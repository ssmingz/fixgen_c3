digraph "isValidSourceLineNumber#?,int" {
0 [label="2:CtTypeReferenceImpl@boolean" shape=ellipse]
1 [label="2:CtVirtualElement@isValidSourceLineNumber" shape=ellipse]
2 [label="2:CtParameterImpl@int lineNumber" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@int" shape=ellipse]
4 [label="3:CtTypeReferenceImpl@Iterator" shape=ellipse]
5 [label="3:CtPackageReferenceImpl@" shape=ellipse]
6 [label="3:CtExecutableReferenceImpl@iterator()" shape=ellipse]
7 [label="3:CtTypeReferenceImpl@Iterator" shape=ellipse]
8 [label="3:CtVirtualElement@iterator" shape=ellipse]
9 [label="3:CtExecutableReferenceImpl@values()" shape=ellipse]
10 [label="3:CtVirtualElement@values" shape=ellipse]
11 [label="3:CtFieldReferenceImpl@children" shape=ellipse]
12 [label="3:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
13 [label="3:CtFieldReadImpl@this.children" shape=ellipse]
14 [label="3:CtThisAccessImpl@this" shape=ellipse]
15 [label="3:CtInvocationImpl@this.children.values()" shape=ellipse]
16 [label="3:CtInvocationImpl@this.children.values().iterator()" shape=ellipse]
17 [label="3:CtVirtualElement@iter" shape=ellipse]
18 [label="3:CtLocalVariableImpl@Iterator iter = this.children.values().iterator()" shape=ellipse]
19 [label="4:CtExecutableReferenceImpl@hasNext()" shape=ellipse]
20 [label="4:CtTypeReferenceImpl@Iterator" shape=ellipse]
21 [label="4:CtTypeReferenceImpl@boolean" shape=ellipse]
22 [label="4:CtVirtualElement@hasNext" shape=ellipse]
23 [label="4:CtVariableReadImpl@iter" shape=ellipse]
24 [label="4:CtLocalVariableReferenceImpl@iter" shape=ellipse]
25 [label="4:CtInvocationImpl@iter.hasNext()" shape=ellipse]
26 [label="5:CtTypeReferenceImpl@ClassData" shape=ellipse]
27 [label="5:CtPackageReferenceImpl@" shape=ellipse]
28 [label="5:CtExecutableReferenceImpl@next()" shape=ellipse]
29 [label="5:CtTypeReferenceImpl@Iterator" shape=ellipse]
30 [label="5:CtVirtualElement@next" shape=ellipse]
31 [label="5:CtVariableReadImpl@iter" shape=ellipse]
32 [label="5:CtLocalVariableReferenceImpl@iter" shape=ellipse]
33 [label="5:CtInvocationImpl@((ClassData) (iter.next()))" shape=ellipse]
34 [label="5:CtTypeReferenceImpl@ClassData" shape=ellipse]
35 [label="5:CtVirtualElement@classData" shape=ellipse]
36 [label="5:CtLocalVariableImpl@ClassData classData = ((ClassData) (iter.next()))" shape=ellipse]
37 [label="6:CtExecutableReferenceImpl@isValidSourceLineNumber(int)" shape=ellipse]
38 [label="6:CtTypeReferenceImpl@ClassData" shape=ellipse]
39 [label="6:CtTypeReferenceImpl@boolean" shape=ellipse]
40 [label="6:CtTypeReferenceImpl@int" shape=ellipse]
41 [label="6:CtVirtualElement@isValidSourceLineNumber" shape=ellipse]
42 [label="6:CtVariableReadImpl@classData" shape=ellipse]
43 [label="6:CtLocalVariableReferenceImpl@classData" shape=ellipse]
44 [label="6:CtVariableReadImpl@lineNumber" shape=ellipse]
45 [label="6:CtParameterReferenceImpl@lineNumber" shape=ellipse]
46 [label="6:CtInvocationImpl@classData.isValidSourceLineNumber(lineNumber)" shape=ellipse]
47 [label="7:CtLiteralImpl@true" shape=ellipse]
48 [label="7:CtTypeReferenceImpl@boolean" shape=ellipse]
49 [label="7:CtReturnImpl@return true" shape=ellipse]
50 [label="6:CtBlockImpl@\{
    return true;
\}" shape=ellipse]
51 [label="6:CtIfImpl@if (classData.isValidSourceLineNumber(lineNumber)) \{
    return true;
\}" shape=ellipse]
52 [label="4:CtBlockImpl@\{
    ClassData classData = ((ClassData) (iter.next()));
    if (classData.isValidSourceLineNumber(lineNumber)) \{
        return true;
    \}
\}" shape=ellipse]
53 [label="4:CtWhileImpl@while (iter.hasNext()) \{
    ClassData classData = ((ClassData) (iter.next()));
    if (classData.isValidSourceLineNumber(lineNumber)) \{
        return true;
    \}
\} " shape=ellipse]
54 [label="10:CtLiteralImpl@false" shape=ellipse]
55 [label="10:CtTypeReferenceImpl@boolean" shape=ellipse]
56 [label="10:CtReturnImpl@return false" shape=ellipse]
57 [label="2:CtBlockImpl@\{
    Iterator iter = this.children.values().iterator();
    while (iter.hasNext()) \{
        ClassData classData = ((ClassData) (iter.next()));
        if (classData.isValidSourceLineNumber(lineNumber)) \{
            return true;
        \}
    \} 
    return false;
\}" shape=ellipse]
58 [label="2:CtMethodImpl@public boolean isValidSourceLineNumber(int lineNumber) \{
    Iterator iter = this.children.values().iterator();
    while (iter.hasNext()) \{
        ClassData classData = ((ClassData) (iter.next()));
        if (classData.isValidSourceLineNumber(lineNumber)) \{
            return true;
        \}
    \} 
    return false;
\}" shape=ellipse]
59 [label="3:Insert@INSERT" shape=ellipse]
60 [label="3:CtPackageReferenceImpl@" shape=ellipse]
61 [label="3:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
62 [label="3:CtFieldReferenceImpl@lock" shape=ellipse]
63 [label="3:CtFieldReadImpl@lock" shape=ellipse]
64 [label="3:CtPackageReferenceImpl@" shape=ellipse]
65 [label="3:CtTypeReferenceImpl@lock" shape=ellipse]
66 [label="3:CtExecutableReferenceImpl@lock()" shape=ellipse]
67 [label="3:CtInvocationImpl@lock.lock()" shape=ellipse]
68 [label="3:CtVirtualElement@lock" shape=ellipse]
69 [label="4:Insert@INSERT" shape=ellipse]
70 [label="5:CtPackageReferenceImpl@" shape=ellipse]
71 [label="5:CtTypeReferenceImpl@Iterator" shape=ellipse]
72 [label="5:CtPackageReferenceImpl@" shape=ellipse]
73 [label="5:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
74 [label="5:CtPackageReferenceImpl@" shape=ellipse]
75 [label="5:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
76 [label="5:CtTypeAccessImpl@PlaceHold" shape=ellipse]
77 [label="5:CtThisAccessImpl@this" shape=ellipse]
78 [label="5:CtPackageReferenceImpl@" shape=ellipse]
79 [label="5:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
80 [label="5:CtFieldReferenceImpl@children" shape=ellipse]
81 [label="5:CtFieldReadImpl@this.children" shape=ellipse]
82 [label="5:CtExecutableReferenceImpl@values()" shape=ellipse]
83 [label="5:CtInvocationImpl@this.children.values()" shape=ellipse]
84 [label="5:CtVirtualElement@values" shape=ellipse]
85 [label="5:CtPackageReferenceImpl@" shape=ellipse]
86 [label="5:CtTypeReferenceImpl@Iterator" shape=ellipse]
87 [label="5:CtExecutableReferenceImpl@iterator()" shape=ellipse]
88 [label="5:CtInvocationImpl@this.children.values().iterator()" shape=ellipse]
89 [label="5:CtVirtualElement@iterator" shape=ellipse]
90 [label="5:CtLocalVariableImpl@Iterator iter = this.children.values().iterator()" shape=ellipse]
91 [label="5:CtVirtualElement@iter" shape=ellipse]
92 [label="6:CtPackageReferenceImpl@" shape=ellipse]
93 [label="6:CtTypeReferenceImpl@Iterator" shape=ellipse]
94 [label="6:CtLocalVariableReferenceImpl@iter" shape=ellipse]
95 [label="6:CtVariableReadImpl@iter" shape=ellipse]
96 [label="6:CtPackageReferenceImpl@" shape=ellipse]
97 [label="6:CtTypeReferenceImpl@Iterator" shape=ellipse]
98 [label="6:CtTypeReferenceImpl@boolean" shape=ellipse]
99 [label="6:CtExecutableReferenceImpl@hasNext()" shape=ellipse]
100 [label="6:CtInvocationImpl@iter.hasNext()" shape=ellipse]
101 [label="6:CtVirtualElement@hasNext" shape=ellipse]
102 [label="7:CtPackageReferenceImpl@" shape=ellipse]
103 [label="7:CtTypeReferenceImpl@ClassData" shape=ellipse]
104 [label="7:CtPackageReferenceImpl@" shape=ellipse]
105 [label="7:CtTypeReferenceImpl@ClassData" shape=ellipse]
106 [label="7:CtPackageReferenceImpl@" shape=ellipse]
107 [label="7:CtTypeReferenceImpl@Iterator" shape=ellipse]
108 [label="7:CtLocalVariableReferenceImpl@iter" shape=ellipse]
109 [label="7:CtVariableReadImpl@iter" shape=ellipse]
110 [label="7:CtPackageReferenceImpl@" shape=ellipse]
111 [label="7:CtTypeReferenceImpl@Iterator" shape=ellipse]
112 [label="7:CtExecutableReferenceImpl@next()" shape=ellipse]
113 [label="7:CtInvocationImpl@((ClassData) (iter.next()))" shape=ellipse]
114 [label="7:CtVirtualElement@next" shape=ellipse]
115 [label="7:CtLocalVariableImpl@ClassData classData = ((ClassData) (iter.next()))" shape=ellipse]
116 [label="7:CtVirtualElement@classData" shape=ellipse]
117 [label="8:CtPackageReferenceImpl@" shape=ellipse]
118 [label="8:CtTypeReferenceImpl@ClassData" shape=ellipse]
119 [label="8:CtLocalVariableReferenceImpl@classData" shape=ellipse]
120 [label="8:CtVariableReadImpl@classData" shape=ellipse]
121 [label="8:CtPackageReferenceImpl@" shape=ellipse]
122 [label="8:CtTypeReferenceImpl@ClassData" shape=ellipse]
123 [label="8:CtTypeReferenceImpl@boolean" shape=ellipse]
124 [label="8:CtTypeReferenceImpl@int" shape=ellipse]
125 [label="8:CtExecutableReferenceImpl@isValidSourceLineNumber(int)" shape=ellipse]
126 [label="8:CtTypeReferenceImpl@int" shape=ellipse]
127 [label="8:CtParameterReferenceImpl@lineNumber" shape=ellipse]
128 [label="8:CtVariableReadImpl@lineNumber" shape=ellipse]
129 [label="8:CtInvocationImpl@classData.isValidSourceLineNumber(lineNumber)" shape=ellipse]
130 [label="8:CtVirtualElement@isValidSourceLineNumber" shape=ellipse]
131 [label="9:CtTypeReferenceImpl@boolean" shape=ellipse]
132 [label="9:CtLiteralImpl@true" shape=ellipse]
133 [label="9:CtReturnImpl@return true" shape=ellipse]
134 [label="8:CtBlockImpl@\{
    return true;
\}" shape=ellipse]
135 [label="8:CtIfImpl@if (classData.isValidSourceLineNumber(lineNumber)) \{
    return true;
\}" shape=ellipse]
136 [label="6:CtBlockImpl@\{
    ClassData classData = ((ClassData) (iter.next()));
    if (classData.isValidSourceLineNumber(lineNumber)) \{
        return true;
    \}
\}" shape=ellipse]
137 [label="6:CtWhileImpl@while (iter.hasNext()) \{
    ClassData classData = ((ClassData) (iter.next()));
    if (classData.isValidSourceLineNumber(lineNumber)) \{
        return true;
    \}
\} " shape=ellipse]
138 [label="4:CtBlockImpl@\{
    Iterator iter = this.children.values().iterator();
    while (iter.hasNext()) \{
        ClassData classData = ((ClassData) (iter.next()));
        if (classData.isValidSourceLineNumber(lineNumber)) \{
            return true;
        \}
    \} 
\}" shape=ellipse]
139 [label="13:CtPackageReferenceImpl@" shape=ellipse]
140 [label="13:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
141 [label="13:CtFieldReferenceImpl@lock" shape=ellipse]
142 [label="13:CtFieldReadImpl@lock" shape=ellipse]
143 [label="13:CtPackageReferenceImpl@" shape=ellipse]
144 [label="13:CtTypeReferenceImpl@lock" shape=ellipse]
145 [label="13:CtExecutableReferenceImpl@unlock()" shape=ellipse]
146 [label="13:CtInvocationImpl@lock.unlock()" shape=ellipse]
147 [label="13:CtVirtualElement@unlock" shape=ellipse]
148 [label="12:CtBlockImpl@\{
    lock.unlock();
\}" shape=ellipse]
149 [label="4:CtTryImpl@try \{


\} finally \{
    lock.unlock();
\}" shape=ellipse]
150 [label="3:Move@MOVE" shape=ellipse]
151 [label="4:Move@MOVE" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
6 -> 7 [label="AST"];
11 -> 12 [label="AST"];
13 -> 14 [label="AST"];
13 -> 11 [label="AST"];
13 -> 17 [label="Data Dep"];
15 -> 10 [label="AST"];
15 -> 13 [label="AST"];
15 -> 9 [label="AST"];
16 -> 8 [label="AST"];
16 -> 15 [label="AST"];
16 -> 6 [label="AST"];
17 -> 23 [label="Define-Use"];
17 -> 31 [label="Define-Use"];
18 -> 17 [label="AST"];
18 -> 4 [label="AST"];
18 -> 16 [label="AST"];
18 -> 150 [label="Action"];
19 -> 20 [label="AST"];
19 -> 21 [label="AST"];
23 -> 24 [label="AST"];
25 -> 22 [label="AST"];
25 -> 23 [label="AST"];
25 -> 19 [label="AST"];
25 -> 52 [label="Control Dep"];
25 -> 36 [label="Control Dep"];
25 -> 33 [label="Control Dep"];
25 -> 28 [label="Control Dep"];
25 -> 31 [label="Control Dep"];
25 -> 51 [label="Control Dep"];
25 -> 46 [label="Control Dep"];
25 -> 37 [label="Control Dep"];
25 -> 42 [label="Control Dep"];
25 -> 44 [label="Control Dep"];
25 -> 109 [label="Control Dep"];
25 -> 112 [label="Control Dep"];
25 -> 113 [label="Control Dep"];
25 -> 115 [label="Control Dep"];
25 -> 120 [label="Control Dep"];
25 -> 125 [label="Control Dep"];
25 -> 128 [label="Control Dep"];
25 -> 129 [label="Control Dep"];
25 -> 135 [label="Control Dep"];
25 -> 136 [label="Control Dep"];
26 -> 27 [label="AST"];
28 -> 29 [label="AST"];
31 -> 32 [label="AST"];
31 -> 35 [label="Data Dep"];
33 -> 30 [label="AST"];
33 -> 34 [label="AST"];
33 -> 31 [label="AST"];
33 -> 28 [label="AST"];
35 -> 42 [label="Define-Use"];
36 -> 35 [label="AST"];
36 -> 26 [label="AST"];
36 -> 33 [label="AST"];
37 -> 38 [label="AST"];
37 -> 39 [label="AST"];
37 -> 40 [label="AST"];
42 -> 43 [label="AST"];
44 -> 45 [label="AST"];
46 -> 41 [label="AST"];
46 -> 42 [label="AST"];
46 -> 37 [label="AST"];
46 -> 44 [label="AST"];
46 -> 50 [label="Control Dep"];
46 -> 49 [label="Control Dep"];
46 -> 47 [label="Control Dep"];
46 -> 132 [label="Control Dep"];
46 -> 133 [label="Control Dep"];
46 -> 134 [label="Control Dep"];
47 -> 48 [label="AST"];
49 -> 47 [label="AST"];
50 -> 49 [label="AST"];
51 -> 46 [label="AST"];
51 -> 50 [label="AST"];
52 -> 36 [label="AST"];
52 -> 51 [label="AST"];
53 -> 25 [label="AST"];
53 -> 52 [label="AST"];
53 -> 151 [label="Action"];
54 -> 55 [label="AST"];
56 -> 54 [label="AST"];
57 -> 18 [label="AST"];
57 -> 53 [label="AST"];
57 -> 56 [label="AST"];
57 -> 59 [label="Action"];
57 -> 69 [label="Action"];
58 -> 1 [label="AST"];
58 -> 0 [label="AST"];
58 -> 2 [label="AST"];
58 -> 57 [label="AST"];
59 -> 67 [label="Action"];
61 -> 60 [label="AST"];
62 -> 61 [label="AST"];
63 -> 62 [label="AST"];
65 -> 64 [label="AST"];
66 -> 65 [label="AST"];
67 -> 68 [label="AST"];
67 -> 63 [label="AST"];
67 -> 66 [label="AST"];
69 -> 149 [label="Action"];
71 -> 70 [label="AST"];
73 -> 72 [label="AST"];
75 -> 74 [label="AST"];
76 -> 75 [label="AST"];
77 -> 73 [label="AST"];
77 -> 76 [label="AST"];
79 -> 78 [label="AST"];
80 -> 79 [label="AST"];
81 -> 77 [label="AST"];
81 -> 80 [label="AST"];
81 -> 91 [label="Data Dep"];
83 -> 84 [label="AST"];
83 -> 81 [label="AST"];
83 -> 82 [label="AST"];
86 -> 85 [label="AST"];
87 -> 86 [label="AST"];
88 -> 89 [label="AST"];
88 -> 83 [label="AST"];
88 -> 87 [label="AST"];
90 -> 91 [label="AST"];
90 -> 71 [label="AST"];
90 -> 88 [label="AST"];
91 -> 95 [label="Define-Use"];
91 -> 109 [label="Define-Use"];
91 -> 23 [label="Define-Use"];
91 -> 23 [label="Data Dep"];
91 -> 23 [label="Control Dep"];
91 -> 31 [label="Define-Use"];
91 -> 31 [label="Data Dep"];
91 -> 31 [label="Control Dep"];
93 -> 92 [label="AST"];
94 -> 93 [label="AST"];
95 -> 94 [label="AST"];
97 -> 96 [label="AST"];
99 -> 97 [label="AST"];
99 -> 98 [label="AST"];
100 -> 101 [label="AST"];
100 -> 95 [label="AST"];
100 -> 99 [label="AST"];
100 -> 136 [label="Control Dep"];
100 -> 115 [label="Control Dep"];
100 -> 113 [label="Control Dep"];
100 -> 112 [label="Control Dep"];
100 -> 109 [label="Control Dep"];
100 -> 135 [label="Control Dep"];
100 -> 129 [label="Control Dep"];
100 -> 125 [label="Control Dep"];
100 -> 120 [label="Control Dep"];
100 -> 128 [label="Control Dep"];
100 -> 52 [label="Control Dep"];
100 -> 36 [label="Control Dep"];
100 -> 33 [label="Control Dep"];
100 -> 28 [label="Control Dep"];
100 -> 31 [label="Control Dep"];
100 -> 51 [label="Control Dep"];
100 -> 46 [label="Control Dep"];
100 -> 37 [label="Control Dep"];
100 -> 42 [label="Control Dep"];
100 -> 44 [label="Control Dep"];
103 -> 102 [label="AST"];
105 -> 104 [label="AST"];
107 -> 106 [label="AST"];
108 -> 107 [label="AST"];
109 -> 108 [label="AST"];
109 -> 116 [label="Data Dep"];
111 -> 110 [label="AST"];
112 -> 111 [label="AST"];
113 -> 114 [label="AST"];
113 -> 105 [label="AST"];
113 -> 109 [label="AST"];
113 -> 112 [label="AST"];
115 -> 116 [label="AST"];
115 -> 103 [label="AST"];
115 -> 113 [label="AST"];
116 -> 120 [label="Define-Use"];
116 -> 42 [label="Define-Use"];
116 -> 42 [label="Data Dep"];
116 -> 42 [label="Control Dep"];
118 -> 117 [label="AST"];
119 -> 118 [label="AST"];
120 -> 119 [label="AST"];
122 -> 121 [label="AST"];
125 -> 122 [label="AST"];
125 -> 123 [label="AST"];
125 -> 124 [label="AST"];
127 -> 126 [label="AST"];
128 -> 127 [label="AST"];
129 -> 130 [label="AST"];
129 -> 120 [label="AST"];
129 -> 125 [label="AST"];
129 -> 128 [label="AST"];
129 -> 134 [label="Control Dep"];
129 -> 133 [label="Control Dep"];
129 -> 132 [label="Control Dep"];
129 -> 50 [label="Control Dep"];
129 -> 49 [label="Control Dep"];
129 -> 47 [label="Control Dep"];
132 -> 131 [label="AST"];
133 -> 132 [label="AST"];
134 -> 133 [label="AST"];
135 -> 129 [label="AST"];
135 -> 134 [label="AST"];
136 -> 115 [label="AST"];
136 -> 135 [label="AST"];
137 -> 100 [label="AST"];
137 -> 136 [label="AST"];
138 -> 90 [label="AST"];
138 -> 137 [label="AST"];
140 -> 139 [label="AST"];
141 -> 140 [label="AST"];
142 -> 141 [label="AST"];
144 -> 143 [label="AST"];
145 -> 144 [label="AST"];
146 -> 147 [label="AST"];
146 -> 142 [label="AST"];
146 -> 145 [label="AST"];
148 -> 146 [label="AST"];
149 -> 138 [label="AST"];
149 -> 148 [label="AST"];
150 -> 149 [label="Action"];
151 -> 149 [label="Action"];
}