digraph "getCCNForMethod#?,ClassData,String,String" {
0 [label="2:CtTypeReferenceImpl@int" shape=ellipse]
1 [label="2:CtVirtualElement@getCCNForMethod" shape=ellipse]
2 [label="2:CtParameterImpl@ClassData classData" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@ClassData" shape=ellipse]
4 [label="2:CtParameterImpl@String methodName" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
6 [label="2:CtParameterImpl@String methodDescriptor" shape=ellipse]
7 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
8 [label="3:CtExecutableReferenceImpl@notNull(ClassData,java.lang.String)" shape=ellipse]
9 [label="3:CtTypeReferenceImpl@Validate" shape=ellipse]
10 [label="3:CtTypeReferenceImpl@ClassData" shape=ellipse]
11 [label="3:CtTypeReferenceImpl@String" shape=ellipse]
12 [label="3:CtVirtualElement@notNull" shape=ellipse]
13 [label="3:CtTypeAccessImpl@Validate" shape=ellipse]
14 [label="3:CtTypeReferenceImpl@Validate" shape=ellipse]
15 [label="3:CtVariableReadImpl@classData" shape=ellipse]
16 [label="3:CtParameterReferenceImpl@classData" shape=ellipse]
17 [label="3:CtLiteralImpl@\"classData must not be null\"" shape=ellipse]
18 [label="3:CtTypeReferenceImpl@String" shape=ellipse]
19 [label="3:CtInvocationImpl@Validate.notNull(classData, \"classData must not be null\")" shape=ellipse]
20 [label="4:CtExecutableReferenceImpl@notNull(java.lang.String,java.lang.String)" shape=ellipse]
21 [label="4:CtTypeReferenceImpl@Validate" shape=ellipse]
22 [label="4:CtTypeReferenceImpl@String" shape=ellipse]
23 [label="4:CtTypeReferenceImpl@String" shape=ellipse]
24 [label="4:CtVirtualElement@notNull" shape=ellipse]
25 [label="4:CtTypeAccessImpl@Validate" shape=ellipse]
26 [label="4:CtTypeReferenceImpl@Validate" shape=ellipse]
27 [label="4:CtVariableReadImpl@methodName" shape=ellipse]
28 [label="4:CtParameterReferenceImpl@methodName" shape=ellipse]
29 [label="4:CtLiteralImpl@\"methodName must not be null\"" shape=ellipse]
30 [label="4:CtTypeReferenceImpl@String" shape=ellipse]
31 [label="4:CtInvocationImpl@Validate.notNull(methodName, \"methodName must not be null\")" shape=ellipse]
32 [label="5:CtExecutableReferenceImpl@notNull(java.lang.String,java.lang.String)" shape=ellipse]
33 [label="5:CtTypeReferenceImpl@Validate" shape=ellipse]
34 [label="5:CtTypeReferenceImpl@String" shape=ellipse]
35 [label="5:CtTypeReferenceImpl@String" shape=ellipse]
36 [label="5:CtVirtualElement@notNull" shape=ellipse]
37 [label="5:CtTypeAccessImpl@Validate" shape=ellipse]
38 [label="5:CtTypeReferenceImpl@Validate" shape=ellipse]
39 [label="5:CtVariableReadImpl@methodDescriptor" shape=ellipse]
40 [label="5:CtParameterReferenceImpl@methodDescriptor" shape=ellipse]
41 [label="5:CtLiteralImpl@\"methodDescriptor must not be null\"" shape=ellipse]
42 [label="5:CtTypeReferenceImpl@String" shape=ellipse]
43 [label="5:CtInvocationImpl@Validate.notNull(methodDescriptor, \"methodDescriptor must not be null\")" shape=ellipse]
44 [label="6:CtTypeReferenceImpl@int" shape=ellipse]
45 [label="6:CtLiteralImpl@0" shape=ellipse]
46 [label="6:CtTypeReferenceImpl@int" shape=ellipse]
47 [label="6:CtVirtualElement@complexity" shape=ellipse]
48 [label="6:CtLocalVariableImpl@int complexity = 0" shape=ellipse]
49 [label="7:CtTypeReferenceImpl@List<FunctionMetric>" shape=ellipse]
50 [label="7:CtPackageReferenceImpl@" shape=ellipse]
51 [label="7:CtTypeReferenceImpl@FunctionMetric" shape=ellipse]
52 [label="8:CtExecutableReferenceImpl@getFunctionMetricsForSingleFile(<unknown>)" shape=ellipse]
53 [label="8:CtTypeReferenceImpl@List<FunctionMetric>" shape=ellipse]
54 [label="8:CtTypeReferenceImpl@null" shape=ellipse]
55 [label="8:CtVirtualElement@getFunctionMetricsForSingleFile" shape=ellipse]
56 [label="8:CtTypeAccessImpl@PlaceHold" shape=ellipse]
57 [label="8:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
58 [label="8:CtThisAccessImpl@" shape=ellipse]
59 [label="8:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
60 [label="8:CtExecutableReferenceImpl@getSourceFileName()" shape=ellipse]
61 [label="8:CtTypeReferenceImpl@ClassData" shape=ellipse]
62 [label="8:CtVirtualElement@getSourceFileName" shape=ellipse]
63 [label="8:CtVariableReadImpl@classData" shape=ellipse]
64 [label="8:CtParameterReferenceImpl@classData" shape=ellipse]
65 [label="8:CtInvocationImpl@classData.getSourceFileName()" shape=ellipse]
66 [label="8:CtInvocationImpl@getFunctionMetricsForSingleFile(classData.getSourceFileName())" shape=ellipse]
67 [label="7:CtVirtualElement@methodMetrics" shape=ellipse]
68 [label="7:CtLocalVariableImpl@List<FunctionMetric> methodMetrics = getFunctionMetricsForSingleFile(classData.getSourceFileName())" shape=ellipse]
69 [label="9:CtTypeReferenceImpl@String" shape=ellipse]
70 [label="9:CtPackageReferenceImpl@java.lang" shape=ellipse]
71 [label="9:CtVariableReadImpl@methodName" shape=ellipse]
72 [label="9:CtParameterReferenceImpl@methodName" shape=ellipse]
73 [label="9:CtVirtualElement@goldenMethodName" shape=ellipse]
74 [label="9:CtLocalVariableImpl@String goldenMethodName = methodName" shape=ellipse]
75 [label="10:CtTypeReferenceImpl@boolean" shape=ellipse]
76 [label="10:CtLiteralImpl@false" shape=ellipse]
77 [label="10:CtTypeReferenceImpl@boolean" shape=ellipse]
78 [label="10:CtVirtualElement@isConstructor" shape=ellipse]
79 [label="10:CtLocalVariableImpl@boolean isConstructor = false" shape=ellipse]
80 [label="11:CtExecutableReferenceImpl@equals(java.lang.Object)" shape=ellipse]
81 [label="11:CtTypeReferenceImpl@String" shape=ellipse]
82 [label="11:CtTypeReferenceImpl@boolean" shape=ellipse]
83 [label="11:CtTypeReferenceImpl@Object" shape=ellipse]
84 [label="11:CtVirtualElement@equals" shape=ellipse]
85 [label="11:CtVariableReadImpl@goldenMethodName" shape=ellipse]
86 [label="11:CtLocalVariableReferenceImpl@goldenMethodName" shape=ellipse]
87 [label="11:CtLiteralImpl@\"<init>\"" shape=ellipse]
88 [label="11:CtTypeReferenceImpl@String" shape=ellipse]
89 [label="11:CtInvocationImpl@goldenMethodName.equals(\"<init>\")" shape=ellipse]
90 [label="12:CtVariableWriteImpl@isConstructor" shape=ellipse]
91 [label="12:CtLocalVariableReferenceImpl@isConstructor" shape=ellipse]
92 [label="12:CtLiteralImpl@true" shape=ellipse]
93 [label="12:CtTypeReferenceImpl@boolean" shape=ellipse]
94 [label="12:CtTypeReferenceImpl@boolean" shape=ellipse]
95 [label="12:CtAssignmentImpl@isConstructor = true" shape=ellipse]
96 [label="13:CtVariableWriteImpl@goldenMethodName" shape=ellipse]
97 [label="13:CtLocalVariableReferenceImpl@goldenMethodName" shape=ellipse]
98 [label="13:CtExecutableReferenceImpl@getBaseName()" shape=ellipse]
99 [label="13:CtTypeReferenceImpl@ClassData" shape=ellipse]
100 [label="13:CtTypeReferenceImpl@String" shape=ellipse]
101 [label="13:CtVirtualElement@getBaseName" shape=ellipse]
102 [label="13:CtVariableReadImpl@classData" shape=ellipse]
103 [label="13:CtParameterReferenceImpl@classData" shape=ellipse]
104 [label="13:CtInvocationImpl@classData.getBaseName()" shape=ellipse]
105 [label="13:CtTypeReferenceImpl@String" shape=ellipse]
106 [label="13:CtPackageReferenceImpl@java.lang" shape=ellipse]
107 [label="13:CtAssignmentImpl@goldenMethodName = classData.getBaseName()" shape=ellipse]
108 [label="11:CtBlockImpl@\{
    isConstructor = true;
    goldenMethodName = classData.getBaseName();
\}" shape=ellipse]
109 [label="11:CtIfImpl@if (goldenMethodName.equals(\"<init>\")) \{
    isConstructor = true;
    goldenMethodName = classData.getBaseName();
\}" shape=ellipse]
110 [label="15:CtVariableWriteImpl@goldenMethodName" shape=ellipse]
111 [label="15:CtLocalVariableReferenceImpl@goldenMethodName" shape=ellipse]
112 [label="15:CtExecutableReferenceImpl@getName()" shape=ellipse]
113 [label="15:CtTypeReferenceImpl@ClassData" shape=ellipse]
114 [label="15:CtVirtualElement@getName" shape=ellipse]
115 [label="15:CtVariableReadImpl@classData" shape=ellipse]
116 [label="15:CtParameterReferenceImpl@classData" shape=ellipse]
117 [label="15:CtInvocationImpl@classData.getName()" shape=ellipse]
118 [label="15:CtLiteralImpl@\".\"" shape=ellipse]
119 [label="15:CtTypeReferenceImpl@String" shape=ellipse]
120 [label="15:CtBinaryOperatorImpl@(classData.getName() + \".\")" shape=ellipse]
121 [label="15:CtVariableReadImpl@goldenMethodName" shape=ellipse]
122 [label="15:CtLocalVariableReferenceImpl@goldenMethodName" shape=ellipse]
123 [label="15:CtBinaryOperatorImpl@(classData.getName() + \".\") + goldenMethodName" shape=ellipse]
124 [label="15:CtTypeReferenceImpl@String" shape=ellipse]
125 [label="15:CtPackageReferenceImpl@java.lang" shape=ellipse]
126 [label="15:CtAssignmentImpl@goldenMethodName = (classData.getName() + \".\") + goldenMethodName" shape=ellipse]
127 [label="16:CtVariableWriteImpl@goldenMethodName" shape=ellipse]
128 [label="16:CtLocalVariableReferenceImpl@goldenMethodName" shape=ellipse]
129 [label="16:CtExecutableReferenceImpl@replaceAll(java.lang.String,java.lang.String)" shape=ellipse]
130 [label="16:CtTypeReferenceImpl@String" shape=ellipse]
131 [label="16:CtTypeReferenceImpl@String" shape=ellipse]
132 [label="16:CtTypeReferenceImpl@String" shape=ellipse]
133 [label="16:CtTypeReferenceImpl@String" shape=ellipse]
134 [label="16:CtVirtualElement@replaceAll" shape=ellipse]
135 [label="16:CtVariableReadImpl@goldenMethodName" shape=ellipse]
136 [label="16:CtLocalVariableReferenceImpl@goldenMethodName" shape=ellipse]
137 [label="16:CtExecutableReferenceImpl@quote(java.lang.String)" shape=ellipse]
138 [label="16:CtTypeReferenceImpl@Pattern" shape=ellipse]
139 [label="16:CtTypeReferenceImpl@String" shape=ellipse]
140 [label="16:CtVirtualElement@quote" shape=ellipse]
141 [label="16:CtTypeAccessImpl@Pattern" shape=ellipse]
142 [label="16:CtTypeReferenceImpl@Pattern" shape=ellipse]
143 [label="16:CtLiteralImpl@\"$\"" shape=ellipse]
144 [label="16:CtTypeReferenceImpl@String" shape=ellipse]
145 [label="16:CtInvocationImpl@Pattern.quote(\"$\")" shape=ellipse]
146 [label="16:CtLiteralImpl@\".\"" shape=ellipse]
147 [label="16:CtTypeReferenceImpl@String" shape=ellipse]
148 [label="16:CtInvocationImpl@goldenMethodName.replaceAll(Pattern.quote(\"$\"), \".\")" shape=ellipse]
149 [label="16:CtTypeReferenceImpl@String" shape=ellipse]
150 [label="16:CtPackageReferenceImpl@java.lang" shape=ellipse]
151 [label="16:CtAssignmentImpl@goldenMethodName = goldenMethodName.replaceAll(Pattern.quote(\"$\"), \".\")" shape=ellipse]
152 [label="17:CtTypeReferenceImpl@TraceSignatureVisitor" shape=ellipse]
153 [label="17:CtPackageReferenceImpl@" shape=ellipse]
154 [label="17:CtExecutableReferenceImpl@TraceSignatureVisitor()" shape=ellipse]
155 [label="17:CtTypeReferenceImpl@TraceSignatureVisitor" shape=ellipse]
156 [label="17:CtTypeReferenceImpl@TraceSignatureVisitor" shape=ellipse]
157 [label="17:CtFieldReferenceImpl@Opcodes.ACC_PUBLIC" shape=ellipse]
158 [label="17:CtTypeReferenceImpl@Opcodes" shape=ellipse]
159 [label="17:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
160 [label="17:CtFieldReadImpl@Opcodes.ACC_PUBLIC" shape=ellipse]
161 [label="17:CtTypeAccessImpl@Opcodes" shape=ellipse]
162 [label="17:CtConstructorCallImpl@new TraceSignatureVisitor(Opcodes.ACC_PUBLIC)" shape=ellipse]
163 [label="17:CtVirtualElement@v" shape=ellipse]
164 [label="17:CtLocalVariableImpl@TraceSignatureVisitor v = new TraceSignatureVisitor(Opcodes.ACC_PUBLIC)" shape=ellipse]
165 [label="18:CtTypeReferenceImpl@SignatureReader" shape=ellipse]
166 [label="18:CtPackageReferenceImpl@" shape=ellipse]
167 [label="18:CtExecutableReferenceImpl@SignatureReader(java.lang.String)" shape=ellipse]
168 [label="18:CtTypeReferenceImpl@SignatureReader" shape=ellipse]
169 [label="18:CtTypeReferenceImpl@SignatureReader" shape=ellipse]
170 [label="18:CtTypeReferenceImpl@String" shape=ellipse]
171 [label="18:CtVariableReadImpl@methodDescriptor" shape=ellipse]
172 [label="18:CtParameterReferenceImpl@methodDescriptor" shape=ellipse]
173 [label="18:CtConstructorCallImpl@new SignatureReader(methodDescriptor)" shape=ellipse]
174 [label="18:CtVirtualElement@r" shape=ellipse]
175 [label="18:CtLocalVariableImpl@SignatureReader r = new SignatureReader(methodDescriptor)" shape=ellipse]
176 [label="19:CtExecutableReferenceImpl@accept(TraceSignatureVisitor)" shape=ellipse]
177 [label="19:CtTypeReferenceImpl@SignatureReader" shape=ellipse]
178 [label="19:CtTypeReferenceImpl@TraceSignatureVisitor" shape=ellipse]
179 [label="19:CtVirtualElement@accept" shape=ellipse]
180 [label="19:CtVariableReadImpl@r" shape=ellipse]
181 [label="19:CtLocalVariableReferenceImpl@r" shape=ellipse]
182 [label="19:CtVariableReadImpl@v" shape=ellipse]
183 [label="19:CtLocalVariableReferenceImpl@v" shape=ellipse]
184 [label="19:CtInvocationImpl@r.accept(v)" shape=ellipse]
185 [label="20:CtTypeReferenceImpl@String" shape=ellipse]
186 [label="20:CtPackageReferenceImpl@java.lang" shape=ellipse]
187 [label="20:CtExecutableReferenceImpl@getDeclaration()" shape=ellipse]
188 [label="20:CtTypeReferenceImpl@TraceSignatureVisitor" shape=ellipse]
189 [label="20:CtTypeReferenceImpl@String" shape=ellipse]
190 [label="20:CtVirtualElement@getDeclaration" shape=ellipse]
191 [label="20:CtVariableReadImpl@v" shape=ellipse]
192 [label="20:CtLocalVariableReferenceImpl@v" shape=ellipse]
193 [label="20:CtInvocationImpl@v.getDeclaration()" shape=ellipse]
194 [label="20:CtVirtualElement@goldenSignature" shape=ellipse]
195 [label="20:CtLocalVariableImpl@String goldenSignature = v.getDeclaration()" shape=ellipse]
196 [label="21:CtVariableWriteImpl@goldenSignature" shape=ellipse]
197 [label="21:CtLocalVariableReferenceImpl@goldenSignature" shape=ellipse]
198 [label="21:CtExecutableReferenceImpl@substring(int,int)" shape=ellipse]
199 [label="21:CtTypeReferenceImpl@String" shape=ellipse]
200 [label="21:CtTypeReferenceImpl@String" shape=ellipse]
201 [label="21:CtTypeReferenceImpl@int" shape=ellipse]
202 [label="21:CtTypeReferenceImpl@int" shape=ellipse]
203 [label="21:CtVirtualElement@substring" shape=ellipse]
204 [label="21:CtVariableReadImpl@goldenSignature" shape=ellipse]
205 [label="21:CtLocalVariableReferenceImpl@goldenSignature" shape=ellipse]
206 [label="21:CtLiteralImpl@1" shape=ellipse]
207 [label="21:CtTypeReferenceImpl@int" shape=ellipse]
208 [label="21:CtExecutableReferenceImpl@length()" shape=ellipse]
209 [label="21:CtTypeReferenceImpl@String" shape=ellipse]
210 [label="21:CtTypeReferenceImpl@int" shape=ellipse]
211 [label="21:CtVirtualElement@length" shape=ellipse]
212 [label="21:CtVariableReadImpl@goldenSignature" shape=ellipse]
213 [label="21:CtLocalVariableReferenceImpl@goldenSignature" shape=ellipse]
214 [label="21:CtInvocationImpl@goldenSignature.length()" shape=ellipse]
215 [label="21:CtLiteralImpl@1" shape=ellipse]
216 [label="21:CtTypeReferenceImpl@int" shape=ellipse]
217 [label="21:CtBinaryOperatorImpl@goldenSignature.length() - 1" shape=ellipse]
218 [label="21:CtTypeReferenceImpl@int" shape=ellipse]
219 [label="21:CtInvocationImpl@goldenSignature.substring(1, goldenSignature.length() - 1)" shape=ellipse]
220 [label="21:CtTypeReferenceImpl@String" shape=ellipse]
221 [label="21:CtPackageReferenceImpl@java.lang" shape=ellipse]
222 [label="21:CtAssignmentImpl@goldenSignature = goldenSignature.substring(1, goldenSignature.length() - 1)" shape=ellipse]
223 [label="22:CtTypeReferenceImpl@Map<String, Integer>" shape=ellipse]
224 [label="22:CtPackageReferenceImpl@" shape=ellipse]
225 [label="22:CtTypeReferenceImpl@String" shape=ellipse]
226 [label="22:CtTypeReferenceImpl@Integer" shape=ellipse]
227 [label="22:CtExecutableReferenceImpl@HashMap()" shape=ellipse]
228 [label="22:CtTypeReferenceImpl@HashMap<String, Integer>" shape=ellipse]
229 [label="22:CtTypeReferenceImpl@HashMap<String, Integer>" shape=ellipse]
230 [label="22:CtConstructorCallImpl@new HashMap<String, Integer>()" shape=ellipse]
231 [label="22:CtVirtualElement@candidateSignatureToCcn" shape=ellipse]
232 [label="22:CtLocalVariableImpl@Map<String, Integer> candidateSignatureToCcn = new HashMap<String, Integer>()" shape=ellipse]
233 [label="23:CtTypeReferenceImpl@FunctionMetric" shape=ellipse]
234 [label="23:CtPackageReferenceImpl@" shape=ellipse]
235 [label="23:CtVirtualElement@singleMethodMetrics" shape=ellipse]
236 [label="23:CtLocalVariableImpl@FunctionMetric singleMethodMetrics" shape=ellipse]
237 [label="23:CtVariableReadImpl@methodMetrics" shape=ellipse]
238 [label="23:CtLocalVariableReferenceImpl@methodMetrics" shape=ellipse]
239 [label="24:CtTypeReferenceImpl@String" shape=ellipse]
240 [label="24:CtPackageReferenceImpl@java.lang" shape=ellipse]
241 [label="25:CtExecutableReferenceImpl@substring(int)" shape=ellipse]
242 [label="25:CtTypeReferenceImpl@name" shape=ellipse]
243 [label="25:CtTypeReferenceImpl@String" shape=ellipse]
244 [label="25:CtTypeReferenceImpl@int" shape=ellipse]
245 [label="25:CtVirtualElement@substring" shape=ellipse]
246 [label="25:CtFieldReferenceImpl@name" shape=ellipse]
247 [label="25:CtFieldReadImpl@singleMethodMetrics.name" shape=ellipse]
248 [label="25:CtVariableReadImpl@singleMethodMetrics" shape=ellipse]
249 [label="25:CtLiteralImpl@0" shape=ellipse]
250 [label="25:CtTypeReferenceImpl@int" shape=ellipse]
251 [label="25:CtExecutableReferenceImpl@indexOf(char)" shape=ellipse]
252 [label="25:CtTypeReferenceImpl@name" shape=ellipse]
253 [label="25:CtTypeReferenceImpl@char" shape=ellipse]
254 [label="25:CtVirtualElement@indexOf" shape=ellipse]
255 [label="25:CtFieldReferenceImpl@name" shape=ellipse]
256 [label="25:CtFieldReadImpl@singleMethodMetrics.name" shape=ellipse]
257 [label="25:CtVariableReadImpl@singleMethodMetrics" shape=ellipse]
258 [label="25:CtLiteralImpl@'('" shape=ellipse]
259 [label="25:CtTypeReferenceImpl@char" shape=ellipse]
260 [label="25:CtInvocationImpl@singleMethodMetrics.name.indexOf('(')" shape=ellipse]
261 [label="25:CtInvocationImpl@singleMethodMetrics.name.substring(0, singleMethodMetrics.name.indexOf('('))" shape=ellipse]
262 [label="24:CtVirtualElement@candidateMethodName" shape=ellipse]
263 [label="24:CtLocalVariableImpl@String candidateMethodName = singleMethodMetrics.name.substring(0, singleMethodMetrics.name.indexOf('('))" shape=ellipse]
264 [label="26:CtTypeReferenceImpl@String" shape=ellipse]
265 [label="26:CtPackageReferenceImpl@java.lang" shape=ellipse]
266 [label="27:CtExecutableReferenceImpl@stripTypeParameters(<unknown>)" shape=ellipse]
267 [label="27:CtTypeReferenceImpl@String" shape=ellipse]
268 [label="27:CtTypeReferenceImpl@null" shape=ellipse]
269 [label="27:CtVirtualElement@stripTypeParameters" shape=ellipse]
270 [label="27:CtTypeAccessImpl@PlaceHold" shape=ellipse]
271 [label="27:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
272 [label="27:CtThisAccessImpl@" shape=ellipse]
273 [label="27:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
274 [label="28:CtExecutableReferenceImpl@substring()" shape=ellipse]
275 [label="28:CtTypeReferenceImpl@name" shape=ellipse]
276 [label="28:CtVirtualElement@substring" shape=ellipse]
277 [label="28:CtFieldReferenceImpl@name" shape=ellipse]
278 [label="28:CtFieldReadImpl@singleMethodMetrics.name" shape=ellipse]
279 [label="28:CtVariableReadImpl@singleMethodMetrics" shape=ellipse]
280 [label="29:CtExecutableReferenceImpl@indexOf(char)" shape=ellipse]
281 [label="29:CtTypeReferenceImpl@name" shape=ellipse]
282 [label="29:CtTypeReferenceImpl@char" shape=ellipse]
283 [label="29:CtVirtualElement@indexOf" shape=ellipse]
284 [label="29:CtFieldReferenceImpl@name" shape=ellipse]
285 [label="29:CtFieldReadImpl@singleMethodMetrics.name" shape=ellipse]
286 [label="29:CtVariableReadImpl@singleMethodMetrics" shape=ellipse]
287 [label="29:CtLiteralImpl@'('" shape=ellipse]
288 [label="29:CtTypeReferenceImpl@char" shape=ellipse]
289 [label="29:CtInvocationImpl@singleMethodMetrics.name.indexOf('(')" shape=ellipse]
290 [label="29:CtLiteralImpl@1" shape=ellipse]
291 [label="29:CtTypeReferenceImpl@int" shape=ellipse]
292 [label="29:CtBinaryOperatorImpl@singleMethodMetrics.name.indexOf('(') + 1" shape=ellipse]
293 [label="30:CtExecutableReferenceImpl@length()" shape=ellipse]
294 [label="30:CtTypeReferenceImpl@name" shape=ellipse]
295 [label="30:CtVirtualElement@length" shape=ellipse]
296 [label="30:CtFieldReferenceImpl@name" shape=ellipse]
297 [label="30:CtFieldReadImpl@singleMethodMetrics.name" shape=ellipse]
298 [label="30:CtVariableReadImpl@singleMethodMetrics" shape=ellipse]
299 [label="30:CtInvocationImpl@singleMethodMetrics.name.length()" shape=ellipse]
300 [label="30:CtLiteralImpl@1" shape=ellipse]
301 [label="30:CtTypeReferenceImpl@int" shape=ellipse]
302 [label="30:CtBinaryOperatorImpl@singleMethodMetrics.name.length() - 1" shape=ellipse]
303 [label="28:CtInvocationImpl@singleMethodMetrics.name.substring(singleMethodMetrics.name.indexOf('(') + 1, singleMethodMetrics.name.length() - 1)" shape=ellipse]
304 [label="27:CtInvocationImpl@stripTypeParameters(singleMethodMetrics.name.substring(singleMethodMetrics.name.indexOf('(') + 1, singleMethodMetrics.name.length() - 1))" shape=ellipse]
305 [label="26:CtVirtualElement@candidateSignature" shape=ellipse]
306 [label="26:CtLocalVariableImpl@String candidateSignature = stripTypeParameters(singleMethodMetrics.name.substring(singleMethodMetrics.name.indexOf('(') + 1, singleMethodMetrics.name.length() - 1))" shape=ellipse]
307 [label="31:CtExecutableReferenceImpl@equals(java.lang.Object)" shape=ellipse]
308 [label="31:CtTypeReferenceImpl@String" shape=ellipse]
309 [label="31:CtTypeReferenceImpl@boolean" shape=ellipse]
310 [label="31:CtTypeReferenceImpl@Object" shape=ellipse]
311 [label="31:CtVirtualElement@equals" shape=ellipse]
312 [label="31:CtVariableReadImpl@goldenMethodName" shape=ellipse]
313 [label="31:CtLocalVariableReferenceImpl@goldenMethodName" shape=ellipse]
314 [label="31:CtVariableReadImpl@candidateMethodName" shape=ellipse]
315 [label="31:CtLocalVariableReferenceImpl@candidateMethodName" shape=ellipse]
316 [label="31:CtInvocationImpl@goldenMethodName.equals(candidateMethodName)" shape=ellipse]
317 [label="32:CtExecutableReferenceImpl@put(java.lang.String)" shape=ellipse]
318 [label="32:CtTypeReferenceImpl@Map<String, Integer>" shape=ellipse]
319 [label="32:CtTypeReferenceImpl@String" shape=ellipse]
320 [label="32:CtVirtualElement@put" shape=ellipse]
321 [label="32:CtVariableReadImpl@candidateSignatureToCcn" shape=ellipse]
322 [label="32:CtLocalVariableReferenceImpl@candidateSignatureToCcn" shape=ellipse]
323 [label="32:CtVariableReadImpl@candidateSignature" shape=ellipse]
324 [label="32:CtLocalVariableReferenceImpl@candidateSignature" shape=ellipse]
325 [label="32:CtFieldReferenceImpl@ccn" shape=ellipse]
326 [label="32:CtFieldReadImpl@singleMethodMetrics.ccn" shape=ellipse]
327 [label="32:CtVariableReadImpl@singleMethodMetrics" shape=ellipse]
328 [label="32:CtInvocationImpl@candidateSignatureToCcn.put(candidateSignature, singleMethodMetrics.ccn)" shape=ellipse]
329 [label="31:CtBlockImpl@\{
    candidateSignatureToCcn.put(candidateSignature, singleMethodMetrics.ccn);
\}" shape=ellipse]
330 [label="31:CtIfImpl@if (goldenMethodName.equals(candidateMethodName)) \{
    candidateSignatureToCcn.put(candidateSignature, singleMethodMetrics.ccn);
\}" shape=ellipse]
331 [label="23:CtBlockImpl@\{
    String candidateMethodName = singleMethodMetrics.name.substring(0, singleMethodMetrics.name.indexOf('('));
    String candidateSignature = stripTypeParameters(singleMethodMetrics.name.substring(singleMethodMetrics.name.indexOf('(') + 1, singleMethodMetrics.name.length() - 1));
    if (goldenMethodName.equals(candidateMethodName)) \{
        candidateSignatureToCcn.put(candidateSignature, singleMethodMetrics.ccn);
    \}
\}" shape=ellipse]
332 [label="23:CtForEachImpl@for (FunctionMetric singleMethodMetrics : methodMetrics) \{
    String candidateMethodName = singleMethodMetrics.name.substring(0, singleMethodMetrics.name.indexOf('('));
    String candidateSignature = stripTypeParameters(singleMethodMetrics.name.substring(singleMethodMetrics.name.indexOf('(') + 1, singleMethodMetrics.name.length() - 1));
    if (goldenMethodName.equals(candidateMethodName)) \{
        candidateSignatureToCcn.put(candidateSignature, singleMethodMetrics.ccn);
    \}
\}" shape=ellipse]
333 [label="35:CtExecutableReferenceImpl@size()" shape=ellipse]
334 [label="35:CtTypeReferenceImpl@Map<String, Integer>" shape=ellipse]
335 [label="35:CtVirtualElement@size" shape=ellipse]
336 [label="35:CtVariableReadImpl@candidateSignatureToCcn" shape=ellipse]
337 [label="35:CtLocalVariableReferenceImpl@candidateSignatureToCcn" shape=ellipse]
338 [label="35:CtInvocationImpl@candidateSignatureToCcn.size()" shape=ellipse]
339 [label="35:CtLiteralImpl@1" shape=ellipse]
340 [label="35:CtTypeReferenceImpl@int" shape=ellipse]
341 [label="35:CtBinaryOperatorImpl@candidateSignatureToCcn.size() == 1" shape=ellipse]
342 [label="36:CtExecutableReferenceImpl@next()" shape=ellipse]
343 [label="36:CtTypeReferenceImpl@int" shape=ellipse]
344 [label="36:CtVirtualElement@next" shape=ellipse]
345 [label="36:CtExecutableReferenceImpl@iterator()" shape=ellipse]
346 [label="36:CtVirtualElement@iterator" shape=ellipse]
347 [label="36:CtExecutableReferenceImpl@values()" shape=ellipse]
348 [label="36:CtTypeReferenceImpl@Map<String, Integer>" shape=ellipse]
349 [label="36:CtVirtualElement@values" shape=ellipse]
350 [label="36:CtVariableReadImpl@candidateSignatureToCcn" shape=ellipse]
351 [label="36:CtLocalVariableReferenceImpl@candidateSignatureToCcn" shape=ellipse]
352 [label="36:CtInvocationImpl@candidateSignatureToCcn.values()" shape=ellipse]
353 [label="36:CtInvocationImpl@candidateSignatureToCcn.values().iterator()" shape=ellipse]
354 [label="36:CtInvocationImpl@candidateSignatureToCcn.values().iterator().next()" shape=ellipse]
355 [label="36:CtReturnImpl@return candidateSignatureToCcn.values().iterator().next()" shape=ellipse]
356 [label="35:CtBlockImpl@\{
    return candidateSignatureToCcn.values().iterator().next();
\}" shape=ellipse]
357 [label="35:CtIfImpl@if (candidateSignatureToCcn.size() == 1) \{
    return candidateSignatureToCcn.values().iterator().next();
\}" shape=ellipse]
358 [label="38:CtExecutableReferenceImpl@isEmpty()" shape=ellipse]
359 [label="38:CtTypeReferenceImpl@String" shape=ellipse]
360 [label="38:CtTypeReferenceImpl@boolean" shape=ellipse]
361 [label="38:CtVirtualElement@isEmpty" shape=ellipse]
362 [label="38:CtVariableReadImpl@goldenSignature" shape=ellipse]
363 [label="38:CtLocalVariableReferenceImpl@goldenSignature" shape=ellipse]
364 [label="38:CtInvocationImpl@goldenSignature.isEmpty()" shape=ellipse]
365 [label="38:CtUnaryOperatorImpl@!goldenSignature.isEmpty()" shape=ellipse]
366 [label="38:CtTypeReferenceImpl@boolean" shape=ellipse]
367 [label="40:CtVirtualElement@String[]" shape=ellipse]
368 [label="40:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
369 [label="40:CtTypeReferenceImpl@String" shape=ellipse]
370 [label="40:CtExecutableReferenceImpl@split(java.lang.String)" shape=ellipse]
371 [label="40:CtTypeReferenceImpl@String" shape=ellipse]
372 [label="40:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
373 [label="40:CtTypeReferenceImpl@String" shape=ellipse]
374 [label="40:CtVirtualElement@split" shape=ellipse]
375 [label="40:CtVariableReadImpl@goldenSignature" shape=ellipse]
376 [label="40:CtLocalVariableReferenceImpl@goldenSignature" shape=ellipse]
377 [label="40:CtLiteralImpl@\",\"" shape=ellipse]
378 [label="40:CtTypeReferenceImpl@String" shape=ellipse]
379 [label="40:CtInvocationImpl@goldenSignature.split(\",\")" shape=ellipse]
380 [label="40:CtVirtualElement@goldenParameterTypeStrings" shape=ellipse]
381 [label="40:CtLocalVariableImpl@String[] goldenParameterTypeStrings = goldenSignature.split(\",\")" shape=ellipse]
382 [label="41:CtVirtualElement@Class[]" shape=ellipse]
383 [label="41:CtArrayTypeReferenceImpl@Class<?>[]" shape=ellipse]
384 [label="41:CtTypeReferenceImpl@Class<?>" shape=ellipse]
385 [label="41:CtNewArrayImpl@new Class[goldenParameterTypeStrings.length]" shape=ellipse]
386 [label="41:CtArrayTypeReferenceImpl@Class[]" shape=ellipse]
387 [label="41:CtFieldReadImpl@goldenParameterTypeStrings.length" shape=ellipse]
388 [label="41:CtVirtualElement@goldenParameterTypes" shape=ellipse]
389 [label="41:CtLocalVariableImpl@Class<?>[] goldenParameterTypes = new Class[goldenParameterTypeStrings.length]" shape=ellipse]
390 [label="42:CtTypeReferenceImpl@int" shape=ellipse]
391 [label="42:CtLiteralImpl@0" shape=ellipse]
392 [label="42:CtTypeReferenceImpl@int" shape=ellipse]
393 [label="42:CtVirtualElement@i" shape=ellipse]
394 [label="42:CtLocalVariableImpl@int i = 0" shape=ellipse]
395 [label="42:CtVariableReadImpl@i" shape=ellipse]
396 [label="42:CtLocalVariableReferenceImpl@i" shape=ellipse]
397 [label="42:CtFieldReferenceImpl@length" shape=ellipse]
398 [label="42:CtTypeReferenceImpl@int" shape=ellipse]
399 [label="42:CtTypeReferenceImpl@int" shape=ellipse]
400 [label="42:CtFieldReadImpl@goldenParameterTypeStrings.length" shape=ellipse]
401 [label="42:CtVariableReadImpl@goldenParameterTypeStrings" shape=ellipse]
402 [label="42:CtBinaryOperatorImpl@i < goldenParameterTypeStrings.length" shape=ellipse]
403 [label="42:CtTypeReferenceImpl@boolean" shape=ellipse]
404 [label="42:CtVariableWriteImpl@i" shape=ellipse]
405 [label="42:CtLocalVariableReferenceImpl@i" shape=ellipse]
406 [label="42:CtUnaryOperatorImpl@i++" shape=ellipse]
407 [label="42:CtTypeReferenceImpl@int" shape=ellipse]
408 [label="43:CtVariableReadImpl@goldenParameterTypes" shape=ellipse]
409 [label="43:CtLocalVariableReferenceImpl@goldenParameterTypes" shape=ellipse]
410 [label="43:CtVariableReadImpl@i" shape=ellipse]
411 [label="43:CtLocalVariableReferenceImpl@i" shape=ellipse]
412 [label="43:CtTypeReferenceImpl@Class<?>" shape=ellipse]
413 [label="43:CtPackageReferenceImpl@java.lang" shape=ellipse]
414 [label="43:CtWildcardReferenceImpl@?" shape=ellipse]
415 [label="43:CtArrayWriteImpl@goldenParameterTypes[i]" shape=ellipse]
416 [label="44:CtExecutableReferenceImpl@getClass(java.lang.String,boolean)" shape=ellipse]
417 [label="44:CtTypeReferenceImpl@ClassUtils" shape=ellipse]
418 [label="44:CtTypeReferenceImpl@Class<?>" shape=ellipse]
419 [label="44:CtTypeReferenceImpl@String" shape=ellipse]
420 [label="44:CtTypeReferenceImpl@boolean" shape=ellipse]
421 [label="44:CtVirtualElement@getClass" shape=ellipse]
422 [label="44:CtTypeAccessImpl@ClassUtils" shape=ellipse]
423 [label="44:CtTypeReferenceImpl@ClassUtils" shape=ellipse]
424 [label="44:CtExecutableReferenceImpl@trim()" shape=ellipse]
425 [label="44:CtTypeReferenceImpl@String" shape=ellipse]
426 [label="44:CtTypeReferenceImpl@String" shape=ellipse]
427 [label="44:CtVirtualElement@trim" shape=ellipse]
428 [label="44:CtVariableReadImpl@goldenParameterTypeStrings" shape=ellipse]
429 [label="44:CtLocalVariableReferenceImpl@goldenParameterTypeStrings" shape=ellipse]
430 [label="44:CtVariableReadImpl@i" shape=ellipse]
431 [label="44:CtLocalVariableReferenceImpl@i" shape=ellipse]
432 [label="44:CtArrayReadImpl@goldenParameterTypeStrings[i]" shape=ellipse]
433 [label="44:CtTypeReferenceImpl@String" shape=ellipse]
434 [label="44:CtInvocationImpl@goldenParameterTypeStrings[i].trim()" shape=ellipse]
435 [label="44:CtLiteralImpl@false" shape=ellipse]
436 [label="44:CtTypeReferenceImpl@boolean" shape=ellipse]
437 [label="44:CtInvocationImpl@ClassUtils.getClass(goldenParameterTypeStrings[i].trim(), false)" shape=ellipse]
438 [label="43:CtTypeReferenceImpl@Class<?>" shape=ellipse]
439 [label="43:CtPackageReferenceImpl@java.lang" shape=ellipse]
440 [label="43:CtWildcardReferenceImpl@?" shape=ellipse]
441 [label="43:CtAssignmentImpl@goldenParameterTypes[i] = ClassUtils.getClass(goldenParameterTypeStrings[i].trim(), false)" shape=ellipse]
442 [label="42:CtBlockImpl@\{
    goldenParameterTypes[i] = ClassUtils.getClass(goldenParameterTypeStrings[i].trim(), false);
\}" shape=ellipse]
443 [label="42:CtForImpl@for (int i = 0; i < goldenParameterTypeStrings.length; i++) \{
    goldenParameterTypes[i] = ClassUtils.getClass(goldenParameterTypeStrings[i].trim(), false);
\}" shape=ellipse]
444 [label="46:CtTypeReferenceImpl@Class<?>" shape=ellipse]
445 [label="46:CtPackageReferenceImpl@java.lang" shape=ellipse]
446 [label="46:CtWildcardReferenceImpl@?" shape=ellipse]
447 [label="46:CtExecutableReferenceImpl@getClass(boolean)" shape=ellipse]
448 [label="46:CtTypeReferenceImpl@ClassUtils" shape=ellipse]
449 [label="46:CtTypeReferenceImpl@Class<?>" shape=ellipse]
450 [label="46:CtTypeReferenceImpl@boolean" shape=ellipse]
451 [label="46:CtVirtualElement@getClass" shape=ellipse]
452 [label="46:CtTypeAccessImpl@ClassUtils" shape=ellipse]
453 [label="46:CtTypeReferenceImpl@ClassUtils" shape=ellipse]
454 [label="46:CtExecutableReferenceImpl@getName()" shape=ellipse]
455 [label="46:CtTypeReferenceImpl@ClassData" shape=ellipse]
456 [label="46:CtVirtualElement@getName" shape=ellipse]
457 [label="46:CtVariableReadImpl@classData" shape=ellipse]
458 [label="46:CtParameterReferenceImpl@classData" shape=ellipse]
459 [label="46:CtInvocationImpl@classData.getName()" shape=ellipse]
460 [label="46:CtLiteralImpl@false" shape=ellipse]
461 [label="46:CtTypeReferenceImpl@boolean" shape=ellipse]
462 [label="46:CtInvocationImpl@ClassUtils.getClass(classData.getName(), false)" shape=ellipse]
463 [label="46:CtVirtualElement@klass" shape=ellipse]
464 [label="46:CtLocalVariableImpl@Class<?> klass = ClassUtils.getClass(classData.getName(), false)" shape=ellipse]
465 [label="47:CtVariableReadImpl@isConstructor" shape=ellipse]
466 [label="47:CtLocalVariableReferenceImpl@isConstructor" shape=ellipse]
467 [label="48:CtTypeReferenceImpl@Constructor<?>" shape=ellipse]
468 [label="48:CtPackageReferenceImpl@" shape=ellipse]
469 [label="48:CtWildcardReferenceImpl@?" shape=ellipse]
470 [label="48:CtExecutableReferenceImpl@getDeclaredConstructor(java.lang.Class[])" shape=ellipse]
471 [label="48:CtTypeReferenceImpl@Class" shape=ellipse]
472 [label="48:CtTypeReferenceImpl@Constructor<?>" shape=ellipse]
473 [label="48:CtArrayTypeReferenceImpl@Class<?>[]" shape=ellipse]
474 [label="48:CtVirtualElement@getDeclaredConstructor" shape=ellipse]
475 [label="48:CtVariableReadImpl@klass" shape=ellipse]
476 [label="48:CtLocalVariableReferenceImpl@klass" shape=ellipse]
477 [label="48:CtVariableReadImpl@goldenParameterTypes" shape=ellipse]
478 [label="48:CtLocalVariableReferenceImpl@goldenParameterTypes" shape=ellipse]
479 [label="48:CtInvocationImpl@klass.getDeclaredConstructor(goldenParameterTypes)" shape=ellipse]
480 [label="48:CtVirtualElement@realMethod" shape=ellipse]
481 [label="48:CtLocalVariableImpl@Constructor<?> realMethod = klass.getDeclaredConstructor(goldenParameterTypes)" shape=ellipse]
482 [label="49:CtVariableWriteImpl@goldenSignature" shape=ellipse]
483 [label="49:CtLocalVariableReferenceImpl@goldenSignature" shape=ellipse]
484 [label="49:CtExecutableReferenceImpl@toGenericString()" shape=ellipse]
485 [label="49:CtTypeReferenceImpl@Constructor<?>" shape=ellipse]
486 [label="49:CtTypeReferenceImpl@String" shape=ellipse]
487 [label="49:CtVirtualElement@toGenericString" shape=ellipse]
488 [label="49:CtVariableReadImpl@realMethod" shape=ellipse]
489 [label="49:CtLocalVariableReferenceImpl@realMethod" shape=ellipse]
490 [label="49:CtInvocationImpl@realMethod.toGenericString()" shape=ellipse]
491 [label="49:CtTypeReferenceImpl@String" shape=ellipse]
492 [label="49:CtPackageReferenceImpl@java.lang" shape=ellipse]
493 [label="49:CtAssignmentImpl@goldenSignature = realMethod.toGenericString()" shape=ellipse]
494 [label="47:CtBlockImpl@\{
    Constructor<?> realMethod = klass.getDeclaredConstructor(goldenParameterTypes);
    goldenSignature = realMethod.toGenericString();
\}" shape=ellipse]
495 [label="51:CtTypeReferenceImpl@Method" shape=ellipse]
496 [label="51:CtPackageReferenceImpl@" shape=ellipse]
497 [label="51:CtExecutableReferenceImpl@getDeclaredMethod(java.lang.String,java.lang.Class[])" shape=ellipse]
498 [label="51:CtTypeReferenceImpl@Class" shape=ellipse]
499 [label="51:CtTypeReferenceImpl@Method" shape=ellipse]
500 [label="51:CtTypeReferenceImpl@String" shape=ellipse]
501 [label="51:CtArrayTypeReferenceImpl@Class<?>[]" shape=ellipse]
502 [label="51:CtVirtualElement@getDeclaredMethod" shape=ellipse]
503 [label="51:CtVariableReadImpl@klass" shape=ellipse]
504 [label="51:CtLocalVariableReferenceImpl@klass" shape=ellipse]
505 [label="51:CtVariableReadImpl@methodName" shape=ellipse]
506 [label="51:CtParameterReferenceImpl@methodName" shape=ellipse]
507 [label="51:CtVariableReadImpl@goldenParameterTypes" shape=ellipse]
508 [label="51:CtLocalVariableReferenceImpl@goldenParameterTypes" shape=ellipse]
509 [label="51:CtInvocationImpl@klass.getDeclaredMethod(methodName, goldenParameterTypes)" shape=ellipse]
510 [label="51:CtVirtualElement@realMethod" shape=ellipse]
511 [label="51:CtLocalVariableImpl@Method realMethod = klass.getDeclaredMethod(methodName, goldenParameterTypes)" shape=ellipse]
512 [label="52:CtVariableWriteImpl@goldenSignature" shape=ellipse]
513 [label="52:CtLocalVariableReferenceImpl@goldenSignature" shape=ellipse]
514 [label="52:CtExecutableReferenceImpl@toGenericString()" shape=ellipse]
515 [label="52:CtTypeReferenceImpl@Method" shape=ellipse]
516 [label="52:CtTypeReferenceImpl@String" shape=ellipse]
517 [label="52:CtVirtualElement@toGenericString" shape=ellipse]
518 [label="52:CtVariableReadImpl@realMethod" shape=ellipse]
519 [label="52:CtLocalVariableReferenceImpl@realMethod" shape=ellipse]
520 [label="52:CtInvocationImpl@realMethod.toGenericString()" shape=ellipse]
521 [label="52:CtTypeReferenceImpl@String" shape=ellipse]
522 [label="52:CtPackageReferenceImpl@java.lang" shape=ellipse]
523 [label="52:CtAssignmentImpl@goldenSignature = realMethod.toGenericString()" shape=ellipse]
524 [label="50:CtBlockImpl@\{
    Method realMethod = klass.getDeclaredMethod(methodName, goldenParameterTypes);
    goldenSignature = realMethod.toGenericString();
\}" shape=ellipse]
525 [label="47:CtIfImpl@if (isConstructor) \{
    Constructor<?> realMethod = klass.getDeclaredConstructor(goldenParameterTypes);
    goldenSignature = realMethod.toGenericString();
\} else \{
    Method realMethod = klass.getDeclaredMethod(methodName, goldenParameterTypes);
    goldenSignature = realMethod.toGenericString();
\}" shape=ellipse]
526 [label="54:CtVariableWriteImpl@goldenSignature" shape=ellipse]
527 [label="54:CtLocalVariableReferenceImpl@goldenSignature" shape=ellipse]
528 [label="54:CtExecutableReferenceImpl@replaceAll(java.lang.String,java.lang.String)" shape=ellipse]
529 [label="54:CtTypeReferenceImpl@String" shape=ellipse]
530 [label="54:CtTypeReferenceImpl@String" shape=ellipse]
531 [label="54:CtTypeReferenceImpl@String" shape=ellipse]
532 [label="54:CtTypeReferenceImpl@String" shape=ellipse]
533 [label="54:CtVirtualElement@replaceAll" shape=ellipse]
534 [label="54:CtVariableReadImpl@goldenSignature" shape=ellipse]
535 [label="54:CtLocalVariableReferenceImpl@goldenSignature" shape=ellipse]
536 [label="54:CtLiteralImpl@\"\\.\\.\\.\"" shape=ellipse]
537 [label="54:CtTypeReferenceImpl@String" shape=ellipse]
538 [label="54:CtLiteralImpl@\"[]\"" shape=ellipse]
539 [label="54:CtTypeReferenceImpl@String" shape=ellipse]
540 [label="54:CtInvocationImpl@goldenSignature.replaceAll(\"\\.\\.\\.\", \"[]\")" shape=ellipse]
541 [label="54:CtTypeReferenceImpl@String" shape=ellipse]
542 [label="54:CtPackageReferenceImpl@java.lang" shape=ellipse]
543 [label="54:CtAssignmentImpl@goldenSignature = goldenSignature.replaceAll(\"\\.\\.\\.\", \"[]\")" shape=ellipse]
544 [label="55:CtVariableWriteImpl@goldenSignature" shape=ellipse]
545 [label="55:CtLocalVariableReferenceImpl@goldenSignature" shape=ellipse]
546 [label="56:CtExecutableReferenceImpl@substring(int,int)" shape=ellipse]
547 [label="56:CtTypeReferenceImpl@String" shape=ellipse]
548 [label="56:CtTypeReferenceImpl@String" shape=ellipse]
549 [label="56:CtTypeReferenceImpl@int" shape=ellipse]
550 [label="56:CtTypeReferenceImpl@int" shape=ellipse]
551 [label="56:CtVirtualElement@substring" shape=ellipse]
552 [label="56:CtVariableReadImpl@goldenSignature" shape=ellipse]
553 [label="56:CtLocalVariableReferenceImpl@goldenSignature" shape=ellipse]
554 [label="57:CtExecutableReferenceImpl@indexOf(java.lang.String)" shape=ellipse]
555 [label="57:CtTypeReferenceImpl@String" shape=ellipse]
556 [label="57:CtTypeReferenceImpl@int" shape=ellipse]
557 [label="57:CtTypeReferenceImpl@String" shape=ellipse]
558 [label="57:CtVirtualElement@indexOf" shape=ellipse]
559 [label="57:CtVariableReadImpl@goldenSignature" shape=ellipse]
560 [label="57:CtLocalVariableReferenceImpl@goldenSignature" shape=ellipse]
561 [label="57:CtLiteralImpl@\"(\"" shape=ellipse]
562 [label="57:CtTypeReferenceImpl@String" shape=ellipse]
563 [label="57:CtInvocationImpl@goldenSignature.indexOf(\"(\")" shape=ellipse]
564 [label="57:CtLiteralImpl@1" shape=ellipse]
565 [label="57:CtTypeReferenceImpl@int" shape=ellipse]
566 [label="57:CtBinaryOperatorImpl@goldenSignature.indexOf(\"(\") + 1" shape=ellipse]
567 [label="57:CtTypeReferenceImpl@int" shape=ellipse]
568 [label="57:CtExecutableReferenceImpl@length()" shape=ellipse]
569 [label="57:CtTypeReferenceImpl@String" shape=ellipse]
570 [label="57:CtTypeReferenceImpl@int" shape=ellipse]
571 [label="57:CtVirtualElement@length" shape=ellipse]
572 [label="57:CtVariableReadImpl@goldenSignature" shape=ellipse]
573 [label="57:CtLocalVariableReferenceImpl@goldenSignature" shape=ellipse]
574 [label="57:CtInvocationImpl@goldenSignature.length()" shape=ellipse]
575 [label="57:CtLiteralImpl@1" shape=ellipse]
576 [label="57:CtTypeReferenceImpl@int" shape=ellipse]
577 [label="57:CtBinaryOperatorImpl@goldenSignature.length() - 1" shape=ellipse]
578 [label="57:CtTypeReferenceImpl@int" shape=ellipse]
579 [label="56:CtInvocationImpl@goldenSignature.substring(goldenSignature.indexOf(\"(\") + 1, goldenSignature.length() - 1)" shape=ellipse]
580 [label="55:CtTypeReferenceImpl@String" shape=ellipse]
581 [label="55:CtPackageReferenceImpl@java.lang" shape=ellipse]
582 [label="55:CtAssignmentImpl@goldenSignature = goldenSignature.substring(goldenSignature.indexOf(\"(\") + 1, goldenSignature.length() - 1)" shape=ellipse]
583 [label="58:CtVariableWriteImpl@goldenSignature" shape=ellipse]
584 [label="58:CtLocalVariableReferenceImpl@goldenSignature" shape=ellipse]
585 [label="58:CtExecutableReferenceImpl@stripTypeParameters(java.lang.String)" shape=ellipse]
586 [label="58:CtTypeReferenceImpl@String" shape=ellipse]
587 [label="58:CtTypeReferenceImpl@String" shape=ellipse]
588 [label="58:CtVirtualElement@stripTypeParameters" shape=ellipse]
589 [label="58:CtTypeAccessImpl@PlaceHold" shape=ellipse]
590 [label="58:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
591 [label="58:CtThisAccessImpl@" shape=ellipse]
592 [label="58:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
593 [label="58:CtVariableReadImpl@goldenSignature" shape=ellipse]
594 [label="58:CtLocalVariableReferenceImpl@goldenSignature" shape=ellipse]
595 [label="58:CtInvocationImpl@stripTypeParameters(goldenSignature)" shape=ellipse]
596 [label="58:CtTypeReferenceImpl@String" shape=ellipse]
597 [label="58:CtPackageReferenceImpl@java.lang" shape=ellipse]
598 [label="58:CtAssignmentImpl@goldenSignature = stripTypeParameters(goldenSignature)" shape=ellipse]
599 [label="39:CtBlockImpl@\{
    String[] goldenParameterTypeStrings = goldenSignature.split(\",\");
    Class<?>[] goldenParameterTypes = new Class[goldenParameterTypeStrings.length];
    for (int i = 0; i < goldenParameterTypeStrings.length; i++) \{
        goldenParameterTypes[i] = ClassUtils.getClass(goldenParameterTypeStrings[i].trim(), false);
    \}
    Class<?> klass = ClassUtils.getClass(classData.getName(), false);
    if (isConstructor) \{
        Constructor<?> realMethod = klass.getDeclaredConstructor(goldenParameterTypes);
        goldenSignature = realMethod.toGenericString();
    \} else \{
        Method realMethod = klass.getDeclaredMethod(methodName, goldenParameterTypes);
        goldenSignature = realMethod.toGenericString();
    \}
    goldenSignature = goldenSignature.replaceAll(\"\\.\\.\\.\", \"[]\");
    goldenSignature = goldenSignature.substring(goldenSignature.indexOf(\"(\") + 1, goldenSignature.length() - 1);
    goldenSignature = stripTypeParameters(goldenSignature);
\}" shape=ellipse]
600 [label="59:CtVirtualElement@e" shape=ellipse]
601 [label="59:CtTypeReferenceImpl@Exception" shape=ellipse]
602 [label="59:CtPackageReferenceImpl@java.lang" shape=ellipse]
603 [label="59:CtCatchVariableImpl@Exception e" shape=ellipse]
604 [label="60:CtExecutableReferenceImpl@error(java.lang.String,java.lang.Exception)" shape=ellipse]
605 [label="60:CtTypeReferenceImpl@logger" shape=ellipse]
606 [label="60:CtTypeReferenceImpl@String" shape=ellipse]
607 [label="60:CtTypeReferenceImpl@Exception" shape=ellipse]
608 [label="60:CtVirtualElement@error" shape=ellipse]
609 [label="60:CtFieldReferenceImpl@logger" shape=ellipse]
610 [label="60:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
611 [label="60:CtFieldReadImpl@logger" shape=ellipse]
612 [label="60:CtLiteralImpl@\"Error while getting method CC for \"" shape=ellipse]
613 [label="60:CtTypeReferenceImpl@String" shape=ellipse]
614 [label="60:CtVariableReadImpl@goldenMethodName" shape=ellipse]
615 [label="60:CtLocalVariableReferenceImpl@goldenMethodName" shape=ellipse]
616 [label="60:CtBinaryOperatorImpl@\"Error while getting method CC for \" + goldenMethodName" shape=ellipse]
617 [label="60:CtTypeReferenceImpl@String" shape=ellipse]
618 [label="60:CtVariableReadImpl@e" shape=ellipse]
619 [label="60:CtCatchVariableReferenceImpl@e" shape=ellipse]
620 [label="60:CtInvocationImpl@logger.error(\"Error while getting method CC for \" + goldenMethodName, e)" shape=ellipse]
621 [label="61:CtLiteralImpl@0" shape=ellipse]
622 [label="61:CtTypeReferenceImpl@int" shape=ellipse]
623 [label="61:CtReturnImpl@return 0" shape=ellipse]
624 [label="59:CtBlockImpl@\{
    logger.error(\"Error while getting method CC for \" + goldenMethodName, e);
    return 0;
\}" shape=ellipse]
625 [label="59:CtCatchImpl@ catch (Exception e) \{
    logger.error(\"Error while getting method CC for \" + goldenMethodName, e);
    return 0;
\}" shape=ellipse]
626 [label="39:CtTryImpl@try \{
    String[] goldenParameterTypeStrings = goldenSignature.split(\",\");
    Class<?>[] goldenParameterTypes = new Class[goldenParameterTypeStrings.length];
    for (int i = 0; i < goldenParameterTypeStrings.length; i++) \{
        goldenParameterTypes[i] = ClassUtils.getClass(goldenParameterTypeStrings[i].trim(), false);
    \}
    Class<?> klass = ClassUtils.getClass(classData.getName(), false);
    if (isConstructor) \{
        Constructor<?> realMethod = klass.getDeclaredConstructor(goldenParameterTypes);
        goldenSignature = realMethod.toGenericString();
    \} else \{
        Method realMethod = klass.getDeclaredMethod(methodName, goldenParameterTypes);
        goldenSignature = realMethod.toGenericString();
    \}
    goldenSignature = goldenSignature.replaceAll(\"\\.\\.\\.\", \"[]\");
    goldenSignature = goldenSignature.substring(goldenSignature.indexOf(\"(\") + 1, goldenSignature.length() - 1);
    goldenSignature = stripTypeParameters(goldenSignature);
\} catch (Exception e) \{
    logger.error(\"Error while getting method CC for \" + goldenMethodName, e);
    return 0;
\}" shape=ellipse]
627 [label="38:CtBlockImpl@\{
    try \{
        String[] goldenParameterTypeStrings = goldenSignature.split(\",\");
        Class<?>[] goldenParameterTypes = new Class[goldenParameterTypeStrings.length];
        for (int i = 0; i < goldenParameterTypeStrings.length; i++) \{
            goldenParameterTypes[i] = ClassUtils.getClass(goldenParameterTypeStrings[i].trim(), false);
        \}
        Class<?> klass = ClassUtils.getClass(classData.getName(), false);
        if (isConstructor) \{
            Constructor<?> realMethod = klass.getDeclaredConstructor(goldenParameterTypes);
            goldenSignature = realMethod.toGenericString();
        \} else \{
            Method realMethod = klass.getDeclaredMethod(methodName, goldenParameterTypes);
            goldenSignature = realMethod.toGenericString();
        \}
        goldenSignature = goldenSignature.replaceAll(\"\\.\\.\\.\", \"[]\");
        goldenSignature = goldenSignature.substring(goldenSignature.indexOf(\"(\") + 1, goldenSignature.length() - 1);
        goldenSignature = stripTypeParameters(goldenSignature);
    \} catch (Exception e) \{
        logger.error(\"Error while getting method CC for \" + goldenMethodName, e);
        return 0;
    \}
\}" shape=ellipse]
628 [label="38:CtIfImpl@if (!goldenSignature.isEmpty()) \{
    try \{
        String[] goldenParameterTypeStrings = goldenSignature.split(\",\");
        Class<?>[] goldenParameterTypes = new Class[goldenParameterTypeStrings.length];
        for (int i = 0; i < goldenParameterTypeStrings.length; i++) \{
            goldenParameterTypes[i] = ClassUtils.getClass(goldenParameterTypeStrings[i].trim(), false);
        \}
        Class<?> klass = ClassUtils.getClass(classData.getName(), false);
        if (isConstructor) \{
            Constructor<?> realMethod = klass.getDeclaredConstructor(goldenParameterTypes);
            goldenSignature = realMethod.toGenericString();
        \} else \{
            Method realMethod = klass.getDeclaredMethod(methodName, goldenParameterTypes);
            goldenSignature = realMethod.toGenericString();
        \}
        goldenSignature = goldenSignature.replaceAll(\"\\.\\.\\.\", \"[]\");
        goldenSignature = goldenSignature.substring(goldenSignature.indexOf(\"(\") + 1, goldenSignature.length() - 1);
        goldenSignature = stripTypeParameters(goldenSignature);
    \} catch (Exception e) \{
        logger.error(\"Error while getting method CC for \" + goldenMethodName, e);
        return 0;
    \}
\}" shape=ellipse]
629 [label="64:CtVariableWriteImpl@goldenSignature" shape=ellipse]
630 [label="64:CtLocalVariableReferenceImpl@goldenSignature" shape=ellipse]
631 [label="64:CtExecutableReferenceImpl@replaceAll(java.lang.String,java.lang.String)" shape=ellipse]
632 [label="64:CtTypeReferenceImpl@String" shape=ellipse]
633 [label="64:CtTypeReferenceImpl@String" shape=ellipse]
634 [label="64:CtTypeReferenceImpl@String" shape=ellipse]
635 [label="64:CtTypeReferenceImpl@String" shape=ellipse]
636 [label="64:CtVirtualElement@replaceAll" shape=ellipse]
637 [label="64:CtVariableReadImpl@goldenSignature" shape=ellipse]
638 [label="64:CtLocalVariableReferenceImpl@goldenSignature" shape=ellipse]
639 [label="64:CtExecutableReferenceImpl@quote(java.lang.String)" shape=ellipse]
640 [label="64:CtTypeReferenceImpl@Pattern" shape=ellipse]
641 [label="64:CtTypeReferenceImpl@String" shape=ellipse]
642 [label="64:CtVirtualElement@quote" shape=ellipse]
643 [label="64:CtTypeAccessImpl@Pattern" shape=ellipse]
644 [label="64:CtTypeReferenceImpl@Pattern" shape=ellipse]
645 [label="64:CtLiteralImpl@\"$\"" shape=ellipse]
646 [label="64:CtTypeReferenceImpl@String" shape=ellipse]
647 [label="64:CtInvocationImpl@Pattern.quote(\"$\")" shape=ellipse]
648 [label="64:CtLiteralImpl@\".\"" shape=ellipse]
649 [label="64:CtTypeReferenceImpl@String" shape=ellipse]
650 [label="64:CtInvocationImpl@goldenSignature.replaceAll(Pattern.quote(\"$\"), \".\")" shape=ellipse]
651 [label="64:CtTypeReferenceImpl@String" shape=ellipse]
652 [label="64:CtPackageReferenceImpl@java.lang" shape=ellipse]
653 [label="64:CtAssignmentImpl@goldenSignature = goldenSignature.replaceAll(Pattern.quote(\"$\"), \".\")" shape=ellipse]
654 [label="65:CtTypeReferenceImpl@double" shape=ellipse]
655 [label="65:CtLiteralImpl@0" shape=ellipse]
656 [label="65:CtTypeReferenceImpl@int" shape=ellipse]
657 [label="65:CtVirtualElement@signatureMatchPercentTillNow" shape=ellipse]
658 [label="65:CtLocalVariableImpl@double signatureMatchPercentTillNow = 0" shape=ellipse]
659 [label="66:CtTypeReferenceImpl@Entry<String, Integer>" shape=ellipse]
660 [label="66:CtPackageReferenceImpl@" shape=ellipse]
661 [label="66:CtTypeReferenceImpl@String" shape=ellipse]
662 [label="66:CtTypeReferenceImpl@Integer" shape=ellipse]
663 [label="66:CtVirtualElement@candidateSignatureToCcnEntry" shape=ellipse]
664 [label="66:CtLocalVariableImpl@Entry<String, Integer> candidateSignatureToCcnEntry" shape=ellipse]
665 [label="66:CtExecutableReferenceImpl@entrySet()" shape=ellipse]
666 [label="66:CtTypeReferenceImpl@Map<String, Integer>" shape=ellipse]
667 [label="66:CtVirtualElement@entrySet" shape=ellipse]
668 [label="66:CtVariableReadImpl@candidateSignatureToCcn" shape=ellipse]
669 [label="66:CtLocalVariableReferenceImpl@candidateSignatureToCcn" shape=ellipse]
670 [label="66:CtInvocationImpl@candidateSignatureToCcn.entrySet()" shape=ellipse]
671 [label="67:CtTypeReferenceImpl@String" shape=ellipse]
672 [label="67:CtPackageReferenceImpl@java.lang" shape=ellipse]
673 [label="67:CtExecutableReferenceImpl@getKey()" shape=ellipse]
674 [label="67:CtTypeReferenceImpl@Entry<String, Integer>" shape=ellipse]
675 [label="67:CtTypeReferenceImpl@String" shape=ellipse]
676 [label="67:CtVirtualElement@getKey" shape=ellipse]
677 [label="67:CtVariableReadImpl@candidateSignatureToCcnEntry" shape=ellipse]
678 [label="67:CtLocalVariableReferenceImpl@candidateSignatureToCcnEntry" shape=ellipse]
679 [label="67:CtInvocationImpl@candidateSignatureToCcnEntry.getKey()" shape=ellipse]
680 [label="67:CtVirtualElement@candidateSignature" shape=ellipse]
681 [label="67:CtLocalVariableImpl@String candidateSignature = candidateSignatureToCcnEntry.getKey()" shape=ellipse]
682 [label="68:CtTypeReferenceImpl@double" shape=ellipse]
683 [label="68:CtExecutableReferenceImpl@matchSignatures(java.lang.String,java.lang.String)" shape=ellipse]
684 [label="68:CtTypeReferenceImpl@double" shape=ellipse]
685 [label="68:CtTypeReferenceImpl@String" shape=ellipse]
686 [label="68:CtTypeReferenceImpl@String" shape=ellipse]
687 [label="68:CtVirtualElement@matchSignatures" shape=ellipse]
688 [label="68:CtTypeAccessImpl@PlaceHold" shape=ellipse]
689 [label="68:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
690 [label="68:CtThisAccessImpl@" shape=ellipse]
691 [label="68:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
692 [label="68:CtVariableReadImpl@candidateSignature" shape=ellipse]
693 [label="68:CtLocalVariableReferenceImpl@candidateSignature" shape=ellipse]
694 [label="68:CtVariableReadImpl@goldenSignature" shape=ellipse]
695 [label="68:CtLocalVariableReferenceImpl@goldenSignature" shape=ellipse]
696 [label="68:CtInvocationImpl@matchSignatures(candidateSignature, goldenSignature)" shape=ellipse]
697 [label="68:CtVirtualElement@currentMatchPercent" shape=ellipse]
698 [label="68:CtLocalVariableImpl@double currentMatchPercent = matchSignatures(candidateSignature, goldenSignature)" shape=ellipse]
699 [label="69:CtVariableReadImpl@currentMatchPercent" shape=ellipse]
700 [label="69:CtLocalVariableReferenceImpl@currentMatchPercent" shape=ellipse]
701 [label="69:CtLiteralImpl@1" shape=ellipse]
702 [label="69:CtTypeReferenceImpl@int" shape=ellipse]
703 [label="69:CtBinaryOperatorImpl@currentMatchPercent == 1" shape=ellipse]
704 [label="69:CtTypeReferenceImpl@boolean" shape=ellipse]
705 [label="70:CtExecutableReferenceImpl@getValue()" shape=ellipse]
706 [label="70:CtTypeReferenceImpl@Entry<String, Integer>" shape=ellipse]
707 [label="70:CtTypeReferenceImpl@int" shape=ellipse]
708 [label="70:CtVirtualElement@getValue" shape=ellipse]
709 [label="70:CtVariableReadImpl@candidateSignatureToCcnEntry" shape=ellipse]
710 [label="70:CtLocalVariableReferenceImpl@candidateSignatureToCcnEntry" shape=ellipse]
711 [label="70:CtInvocationImpl@candidateSignatureToCcnEntry.getValue()" shape=ellipse]
712 [label="70:CtReturnImpl@return candidateSignatureToCcnEntry.getValue()" shape=ellipse]
713 [label="69:CtBlockImpl@\{
    return candidateSignatureToCcnEntry.getValue();
\}" shape=ellipse]
714 [label="69:CtIfImpl@if (currentMatchPercent == 1) \{
    return candidateSignatureToCcnEntry.getValue();
\}" shape=ellipse]
715 [label="72:CtVariableReadImpl@currentMatchPercent" shape=ellipse]
716 [label="72:CtLocalVariableReferenceImpl@currentMatchPercent" shape=ellipse]
717 [label="72:CtVariableReadImpl@signatureMatchPercentTillNow" shape=ellipse]
718 [label="72:CtLocalVariableReferenceImpl@signatureMatchPercentTillNow" shape=ellipse]
719 [label="72:CtBinaryOperatorImpl@currentMatchPercent > signatureMatchPercentTillNow" shape=ellipse]
720 [label="72:CtTypeReferenceImpl@boolean" shape=ellipse]
721 [label="73:CtVariableWriteImpl@complexity" shape=ellipse]
722 [label="73:CtLocalVariableReferenceImpl@complexity" shape=ellipse]
723 [label="73:CtExecutableReferenceImpl@getValue()" shape=ellipse]
724 [label="73:CtTypeReferenceImpl@Entry<String, Integer>" shape=ellipse]
725 [label="73:CtTypeReferenceImpl@int" shape=ellipse]
726 [label="73:CtVirtualElement@getValue" shape=ellipse]
727 [label="73:CtVariableReadImpl@candidateSignatureToCcnEntry" shape=ellipse]
728 [label="73:CtLocalVariableReferenceImpl@candidateSignatureToCcnEntry" shape=ellipse]
729 [label="73:CtInvocationImpl@candidateSignatureToCcnEntry.getValue()" shape=ellipse]
730 [label="73:CtTypeReferenceImpl@int" shape=ellipse]
731 [label="73:CtAssignmentImpl@complexity = candidateSignatureToCcnEntry.getValue()" shape=ellipse]
732 [label="74:CtVariableWriteImpl@signatureMatchPercentTillNow" shape=ellipse]
733 [label="74:CtLocalVariableReferenceImpl@signatureMatchPercentTillNow" shape=ellipse]
734 [label="74:CtVariableReadImpl@currentMatchPercent" shape=ellipse]
735 [label="74:CtLocalVariableReferenceImpl@currentMatchPercent" shape=ellipse]
736 [label="74:CtTypeReferenceImpl@double" shape=ellipse]
737 [label="74:CtAssignmentImpl@signatureMatchPercentTillNow = currentMatchPercent" shape=ellipse]
738 [label="72:CtBlockImpl@\{
    complexity = candidateSignatureToCcnEntry.getValue();
    signatureMatchPercentTillNow = currentMatchPercent;
\}" shape=ellipse]
739 [label="72:CtIfImpl@if (currentMatchPercent > signatureMatchPercentTillNow) \{
    complexity = candidateSignatureToCcnEntry.getValue();
    signatureMatchPercentTillNow = currentMatchPercent;
\}" shape=ellipse]
740 [label="66:CtBlockImpl@\{
    String candidateSignature = candidateSignatureToCcnEntry.getKey();
    double currentMatchPercent = matchSignatures(candidateSignature, goldenSignature);
    if (currentMatchPercent == 1) \{
        return candidateSignatureToCcnEntry.getValue();
    \}
    if (currentMatchPercent > signatureMatchPercentTillNow) \{
        complexity = candidateSignatureToCcnEntry.getValue();
        signatureMatchPercentTillNow = currentMatchPercent;
    \}
\}" shape=ellipse]
741 [label="66:CtForEachImpl@for (Entry<String, Integer> candidateSignatureToCcnEntry : candidateSignatureToCcn.entrySet()) \{
    String candidateSignature = candidateSignatureToCcnEntry.getKey();
    double currentMatchPercent = matchSignatures(candidateSignature, goldenSignature);
    if (currentMatchPercent == 1) \{
        return candidateSignatureToCcnEntry.getValue();
    \}
    if (currentMatchPercent > signatureMatchPercentTillNow) \{
        complexity = candidateSignatureToCcnEntry.getValue();
        signatureMatchPercentTillNow = currentMatchPercent;
    \}
\}" shape=ellipse]
742 [label="77:CtVariableReadImpl@complexity" shape=ellipse]
743 [label="77:CtLocalVariableReferenceImpl@complexity" shape=ellipse]
744 [label="77:CtReturnImpl@return complexity" shape=ellipse]
745 [label="2:CtBlockImpl@\{
    Validate.notNull(classData, \"classData must not be null\");
    Validate.notNull(methodName, \"methodName must not be null\");
    Validate.notNull(methodDescriptor, \"methodDescriptor must not be null\");
    int complexity = 0;
    List<FunctionMetric> methodMetrics = getFunctionMetricsForSingleFile(classData.getSourceFileName());
    String goldenMethodName = methodName;
    boolean isConstructor = false;
    if (goldenMethodName.equals(\"<init>\")) \{
        isConstructor = true;
        goldenMethodName = classData.getBaseName();
    \}
    goldenMethodName = (classData.getName() + \".\") + goldenMethodName;
    goldenMethodName = goldenMethodName.replaceAll(Pattern.quote(\"$\"), \".\");
    TraceSignatureVisitor v = new TraceSignatureVisitor(Opcodes.ACC_PUBLIC);
    SignatureReader r = new SignatureReader(methodDescriptor);
    r.accept(v);
    String goldenSignature = v.getDeclaration();
    goldenSignature = goldenSignature.substring(1, goldenSignature.length() - 1);
    Map<String, Integer> candidateSignatureToCcn = new HashMap<String, Integer>();
    for (FunctionMetric singleMethodMetrics : methodMetrics) \{
        String candidateMethodName = singleMethodMetrics.name.substring(0, singleMethodMetrics.name.indexOf('('));
        String candidateSignature = stripTypeParameters(singleMethodMetrics.name.substring(singleMethodMetrics.name.indexOf('(') + 1, singleMethodMetrics.name.length() - 1));
        if (goldenMethodName.equals(candidateMethodName)) \{
            candidateSignatureToCcn.put(candidateSignature, singleMethodMetrics.ccn);
        \}
    \}
    if (candidateSignatureToCcn.size() == 1) \{
        return candidateSignatureToCcn.values().iterator().next();
    \}
    if (!goldenSignature.isEmpty()) \{
        try \{
            String[] goldenParameterTypeStrings = goldenSignature.split(\",\");
            Class<?>[] goldenParameterTypes = new Class[goldenParameterTypeStrings.length];
            for (int i = 0; i < goldenParameterTypeStrings.length; i++) \{
                goldenParameterTypes[i] = ClassUtils.getClass(goldenParameterTypeStrings[i].trim(), false);
            \}
            Class<?> klass = ClassUtils.getClass(classData.getName(), false);
            if (isConstructor) \{
                Constructor<?> realMethod = klass.getDeclaredConstructor(goldenParameterTypes);
                goldenSignature = realMethod.toGenericString();
            \} else \{
                Method realMethod = klass.getDeclaredMethod(methodName, goldenParameterTypes);
                goldenSignature = realMethod.toGenericString();
            \}
            goldenSignature = goldenSignature.replaceAll(\"\\.\\.\\.\", \"[]\");
            goldenSignature = goldenSignature.substring(goldenSignature.indexOf(\"(\") + 1, goldenSignature.length() - 1);
            goldenSignature = stripTypeParameters(goldenSignature);
        \} catch (Exception e) \{
            logger.error(\"Error while getting method CC for \" + goldenMethodName, e);
            return 0;
        \}
    \}
    goldenSignature = goldenSignature.replaceAll(Pattern.quote(\"$\"), \".\");
    double signatureMatchPercentTillNow = 0;
    for (Entry<String, Integer> candidateSignatureToCcnEntry : candidateSignatureToCcn.entrySet()) \{
        String candidateSignature = candidateSignatureToCcnEntry.getKey();
        double currentMatchPercent = matchSignatures(candidateSignature, goldenSignature);
        if (currentMatchPercent == 1) \{
            return candidateSignatureToCcnEntry.getValue();
        \}
        if (currentMatchPercent > signatureMatchPercentTillNow) \{
            complexity = candidateSignatureToCcnEntry.getValue();
            signatureMatchPercentTillNow = currentMatchPercent;
        \}
    \}
    return complexity;
\}" shape=ellipse]
746 [label="2:CtMethodImpl@public int getCCNForMethod(ClassData classData, String methodName, String methodDescriptor) \{
    Validate.notNull(classData, \"classData must not be null\");
    Validate.notNull(methodName, \"methodName must not be null\");
    Validate.notNull(methodDescriptor, \"methodDescriptor must not be null\");
    int complexity = 0;
    List<FunctionMetric> methodMetrics = getFunctionMetricsForSingleFile(classData.getSourceFileName());
    String goldenMethodName = methodName;
    boolean isConstructor = false;
    if (goldenMethodName.equals(\"<init>\")) \{
        isConstructor = true;
        goldenMethodName = classData.getBaseName();
    \}
    goldenMethodName = (classData.getName() + \".\") + goldenMethodName;
    goldenMethodName = goldenMethodName.replaceAll(Pattern.quote(\"$\"), \".\");
    TraceSignatureVisitor v = new TraceSignatureVisitor(Opcodes.ACC_PUBLIC);
    SignatureReader r = new SignatureReader(methodDescriptor);
    r.accept(v);
    String goldenSignature = v.getDeclaration();
    goldenSignature = goldenSignature.substring(1, goldenSignature.length() - 1);
    Map<String, Integer> candidateSignatureToCcn = new HashMap<String, Integer>();
    for (FunctionMetric singleMethodMetrics : methodMetrics) \{
        String candidateMethodName = singleMethodMetrics.name.substring(0, singleMethodMetrics.name.indexOf('('));
        String candidateSignature = stripTypeParameters(singleMethodMetrics.name.substring(singleMethodMetrics.name.indexOf('(') + 1, singleMethodMetrics.name.length() - 1));
        if (goldenMethodName.equals(candidateMethodName)) \{
            candidateSignatureToCcn.put(candidateSignature, singleMethodMetrics.ccn);
        \}
    \}
    if (candidateSignatureToCcn.size() == 1) \{
        return candidateSignatureToCcn.values().iterator().next();
    \}
    if (!goldenSignature.isEmpty()) \{
        try \{
            String[] goldenParameterTypeStrings = goldenSignature.split(\",\");
            Class<?>[] goldenParameterTypes = new Class[goldenParameterTypeStrings.length];
            for (int i = 0; i < goldenParameterTypeStrings.length; i++) \{
                goldenParameterTypes[i] = ClassUtils.getClass(goldenParameterTypeStrings[i].trim(), false);
            \}
            Class<?> klass = ClassUtils.getClass(classData.getName(), false);
            if (isConstructor) \{
                Constructor<?> realMethod = klass.getDeclaredConstructor(goldenParameterTypes);
                goldenSignature = realMethod.toGenericString();
            \} else \{
                Method realMethod = klass.getDeclaredMethod(methodName, goldenParameterTypes);
                goldenSignature = realMethod.toGenericString();
            \}
            goldenSignature = goldenSignature.replaceAll(\"\\.\\.\\.\", \"[]\");
            goldenSignature = goldenSignature.substring(goldenSignature.indexOf(\"(\") + 1, goldenSignature.length() - 1);
            goldenSignature = stripTypeParameters(goldenSignature);
        \} catch (Exception e) \{
            logger.error(\"Error while getting method CC for \" + goldenMethodName, e);
            return 0;
        \}
    \}
    goldenSignature = goldenSignature.replaceAll(Pattern.quote(\"$\"), \".\");
    double signatureMatchPercentTillNow = 0;
    for (Entry<String, Integer> candidateSignatureToCcnEntry : candidateSignatureToCcn.entrySet()) \{
        String candidateSignature = candidateSignatureToCcnEntry.getKey();
        double currentMatchPercent = matchSignatures(candidateSignature, goldenSignature);
        if (currentMatchPercent == 1) \{
            return candidateSignatureToCcnEntry.getValue();
        \}
        if (currentMatchPercent > signatureMatchPercentTillNow) \{
            complexity = candidateSignatureToCcnEntry.getValue();
            signatureMatchPercentTillNow = currentMatchPercent;
        \}
    \}
    return complexity;
\}" shape=ellipse]
747 [label="3:Insert@INSERT" shape=ellipse]
748 [label="3:CtPackageReferenceImpl@" shape=ellipse]
749 [label="3:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
750 [label="3:CtFieldReferenceImpl@calculateMethodComplexity" shape=ellipse]
751 [label="3:CtFieldReadImpl@calculateMethodComplexity" shape=ellipse]
752 [label="3:CtUnaryOperatorImpl@!calculateMethodComplexity" shape=ellipse]
753 [label="4:CtTypeReferenceImpl@int" shape=ellipse]
754 [label="4:CtLiteralImpl@0" shape=ellipse]
755 [label="4:CtReturnImpl@return 0" shape=ellipse]
756 [label="3:CtBlockImpl@\{
    return 0;
\}" shape=ellipse]
757 [label="3:CtIfImpl@if (!calculateMethodComplexity) \{
    return 0;
\}" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
6 -> 7 [label="AST"];
8 -> 9 [label="AST"];
8 -> 10 [label="AST"];
8 -> 11 [label="AST"];
13 -> 14 [label="AST"];
15 -> 16 [label="AST"];
17 -> 18 [label="AST"];
19 -> 12 [label="AST"];
19 -> 13 [label="AST"];
19 -> 8 [label="AST"];
19 -> 15 [label="AST"];
19 -> 17 [label="AST"];
20 -> 21 [label="AST"];
20 -> 22 [label="AST"];
20 -> 23 [label="AST"];
25 -> 26 [label="AST"];
27 -> 28 [label="AST"];
29 -> 30 [label="AST"];
31 -> 24 [label="AST"];
31 -> 25 [label="AST"];
31 -> 20 [label="AST"];
31 -> 27 [label="AST"];
31 -> 29 [label="AST"];
32 -> 33 [label="AST"];
32 -> 34 [label="AST"];
32 -> 35 [label="AST"];
37 -> 38 [label="AST"];
39 -> 40 [label="AST"];
41 -> 42 [label="AST"];
43 -> 36 [label="AST"];
43 -> 37 [label="AST"];
43 -> 32 [label="AST"];
43 -> 39 [label="AST"];
43 -> 41 [label="AST"];
45 -> 46 [label="AST"];
47 -> 742 [label="Define-Use"];
48 -> 47 [label="AST"];
48 -> 44 [label="AST"];
48 -> 45 [label="AST"];
49 -> 50 [label="AST"];
49 -> 51 [label="AST"];
52 -> 53 [label="AST"];
52 -> 54 [label="AST"];
56 -> 57 [label="AST"];
58 -> 59 [label="AST"];
58 -> 56 [label="AST"];
58 -> 67 [label="Data Dep"];
60 -> 61 [label="AST"];
63 -> 64 [label="AST"];
63 -> 67 [label="Data Dep"];
65 -> 62 [label="AST"];
65 -> 63 [label="AST"];
65 -> 60 [label="AST"];
66 -> 55 [label="AST"];
66 -> 58 [label="AST"];
66 -> 52 [label="AST"];
66 -> 65 [label="AST"];
67 -> 237 [label="Define-Use"];
68 -> 67 [label="AST"];
68 -> 49 [label="AST"];
68 -> 66 [label="AST"];
69 -> 70 [label="AST"];
71 -> 72 [label="AST"];
71 -> 73 [label="Data Dep"];
73 -> 85 [label="Define-Use"];
74 -> 73 [label="AST"];
74 -> 69 [label="AST"];
74 -> 71 [label="AST"];
76 -> 77 [label="AST"];
78 -> 465 [label="Define-Use"];
79 -> 78 [label="AST"];
79 -> 75 [label="AST"];
79 -> 76 [label="AST"];
80 -> 81 [label="AST"];
80 -> 82 [label="AST"];
80 -> 83 [label="AST"];
85 -> 86 [label="AST"];
87 -> 88 [label="AST"];
89 -> 84 [label="AST"];
89 -> 85 [label="AST"];
89 -> 80 [label="AST"];
89 -> 87 [label="AST"];
89 -> 108 [label="Control Dep"];
89 -> 95 [label="Control Dep"];
89 -> 90 [label="Control Dep"];
89 -> 92 [label="Control Dep"];
89 -> 107 [label="Control Dep"];
89 -> 96 [label="Control Dep"];
89 -> 104 [label="Control Dep"];
89 -> 98 [label="Control Dep"];
89 -> 102 [label="Control Dep"];
90 -> 91 [label="AST"];
90 -> 465 [label="Define-Use"];
91 -> 465 [label="Define-Use"];
92 -> 93 [label="AST"];
95 -> 94 [label="AST"];
95 -> 90 [label="AST"];
95 -> 92 [label="AST"];
96 -> 97 [label="AST"];
98 -> 99 [label="AST"];
98 -> 100 [label="AST"];
102 -> 103 [label="AST"];
102 -> 96 [label="Data Dep"];
104 -> 101 [label="AST"];
104 -> 102 [label="AST"];
104 -> 98 [label="AST"];
105 -> 106 [label="AST"];
107 -> 105 [label="AST"];
107 -> 96 [label="AST"];
107 -> 104 [label="AST"];
108 -> 95 [label="AST"];
108 -> 107 [label="AST"];
109 -> 89 [label="AST"];
109 -> 108 [label="AST"];
110 -> 111 [label="AST"];
111 -> 121 [label="Define-Use"];
112 -> 113 [label="AST"];
115 -> 116 [label="AST"];
115 -> 110 [label="Data Dep"];
117 -> 114 [label="AST"];
117 -> 115 [label="AST"];
117 -> 112 [label="AST"];
118 -> 119 [label="AST"];
120 -> 117 [label="AST"];
120 -> 118 [label="AST"];
121 -> 122 [label="AST"];
121 -> 110 [label="Data Dep"];
123 -> 120 [label="AST"];
123 -> 121 [label="AST"];
124 -> 125 [label="AST"];
126 -> 124 [label="AST"];
126 -> 110 [label="AST"];
126 -> 123 [label="AST"];
127 -> 128 [label="AST"];
127 -> 312 [label="Define-Use"];
127 -> 614 [label="Define-Use"];
128 -> 135 [label="Define-Use"];
129 -> 130 [label="AST"];
129 -> 131 [label="AST"];
129 -> 132 [label="AST"];
129 -> 133 [label="AST"];
135 -> 136 [label="AST"];
135 -> 127 [label="Data Dep"];
137 -> 138 [label="AST"];
137 -> 139 [label="AST"];
141 -> 142 [label="AST"];
143 -> 144 [label="AST"];
145 -> 140 [label="AST"];
145 -> 141 [label="AST"];
145 -> 137 [label="AST"];
145 -> 143 [label="AST"];
146 -> 147 [label="AST"];
148 -> 134 [label="AST"];
148 -> 135 [label="AST"];
148 -> 129 [label="AST"];
148 -> 145 [label="AST"];
148 -> 146 [label="AST"];
149 -> 150 [label="AST"];
151 -> 149 [label="AST"];
151 -> 127 [label="AST"];
151 -> 148 [label="AST"];
152 -> 153 [label="AST"];
154 -> 155 [label="AST"];
154 -> 156 [label="AST"];
157 -> 158 [label="AST"];
157 -> 159 [label="AST"];
160 -> 161 [label="AST"];
160 -> 157 [label="AST"];
160 -> 163 [label="Data Dep"];
162 -> 154 [label="AST"];
162 -> 160 [label="AST"];
163 -> 182 [label="Define-Use"];
163 -> 191 [label="Define-Use"];
164 -> 163 [label="AST"];
164 -> 152 [label="AST"];
164 -> 162 [label="AST"];
165 -> 166 [label="AST"];
167 -> 168 [label="AST"];
167 -> 169 [label="AST"];
167 -> 170 [label="AST"];
171 -> 172 [label="AST"];
171 -> 174 [label="Data Dep"];
173 -> 167 [label="AST"];
173 -> 171 [label="AST"];
174 -> 180 [label="Define-Use"];
175 -> 174 [label="AST"];
175 -> 165 [label="AST"];
175 -> 173 [label="AST"];
176 -> 177 [label="AST"];
176 -> 178 [label="AST"];
180 -> 181 [label="AST"];
182 -> 183 [label="AST"];
184 -> 179 [label="AST"];
184 -> 180 [label="AST"];
184 -> 176 [label="AST"];
184 -> 182 [label="AST"];
185 -> 186 [label="AST"];
187 -> 188 [label="AST"];
187 -> 189 [label="AST"];
191 -> 192 [label="AST"];
191 -> 194 [label="Data Dep"];
193 -> 190 [label="AST"];
193 -> 191 [label="AST"];
193 -> 187 [label="AST"];
195 -> 194 [label="AST"];
195 -> 185 [label="AST"];
195 -> 193 [label="AST"];
196 -> 197 [label="AST"];
196 -> 362 [label="Define-Use"];
196 -> 375 [label="Define-Use"];
197 -> 204 [label="Define-Use"];
197 -> 212 [label="Define-Use"];
198 -> 199 [label="AST"];
198 -> 200 [label="AST"];
198 -> 201 [label="AST"];
198 -> 202 [label="AST"];
204 -> 205 [label="AST"];
204 -> 196 [label="Data Dep"];
206 -> 207 [label="AST"];
208 -> 209 [label="AST"];
208 -> 210 [label="AST"];
212 -> 213 [label="AST"];
212 -> 196 [label="Data Dep"];
214 -> 211 [label="AST"];
214 -> 212 [label="AST"];
214 -> 208 [label="AST"];
215 -> 216 [label="AST"];
217 -> 218 [label="AST"];
217 -> 214 [label="AST"];
217 -> 215 [label="AST"];
219 -> 203 [label="AST"];
219 -> 204 [label="AST"];
219 -> 198 [label="AST"];
219 -> 206 [label="AST"];
219 -> 217 [label="AST"];
220 -> 221 [label="AST"];
222 -> 220 [label="AST"];
222 -> 196 [label="AST"];
222 -> 219 [label="AST"];
223 -> 224 [label="AST"];
223 -> 225 [label="AST"];
223 -> 226 [label="AST"];
227 -> 228 [label="AST"];
227 -> 229 [label="AST"];
230 -> 227 [label="AST"];
231 -> 321 [label="Define-Use"];
231 -> 336 [label="Define-Use"];
231 -> 350 [label="Define-Use"];
231 -> 668 [label="Define-Use"];
232 -> 231 [label="AST"];
232 -> 223 [label="AST"];
232 -> 230 [label="AST"];
233 -> 234 [label="AST"];
236 -> 235 [label="AST"];
236 -> 233 [label="AST"];
237 -> 238 [label="AST"];
237 -> 331 [label="Control Dep"];
237 -> 263 [label="Control Dep"];
237 -> 261 [label="Control Dep"];
237 -> 241 [label="Control Dep"];
237 -> 247 [label="Control Dep"];
237 -> 249 [label="Control Dep"];
237 -> 260 [label="Control Dep"];
237 -> 251 [label="Control Dep"];
237 -> 256 [label="Control Dep"];
237 -> 258 [label="Control Dep"];
237 -> 306 [label="Control Dep"];
237 -> 304 [label="Control Dep"];
237 -> 266 [label="Control Dep"];
237 -> 272 [label="Control Dep"];
237 -> 270 [label="Control Dep"];
237 -> 303 [label="Control Dep"];
237 -> 274 [label="Control Dep"];
237 -> 278 [label="Control Dep"];
237 -> 292 [label="Control Dep"];
237 -> 289 [label="Control Dep"];
237 -> 280 [label="Control Dep"];
237 -> 285 [label="Control Dep"];
237 -> 287 [label="Control Dep"];
237 -> 290 [label="Control Dep"];
237 -> 302 [label="Control Dep"];
237 -> 299 [label="Control Dep"];
237 -> 293 [label="Control Dep"];
237 -> 297 [label="Control Dep"];
237 -> 300 [label="Control Dep"];
237 -> 330 [label="Control Dep"];
237 -> 316 [label="Control Dep"];
237 -> 307 [label="Control Dep"];
237 -> 312 [label="Control Dep"];
237 -> 314 [label="Control Dep"];
239 -> 240 [label="AST"];
241 -> 242 [label="AST"];
241 -> 243 [label="AST"];
241 -> 244 [label="AST"];
247 -> 248 [label="AST"];
247 -> 246 [label="AST"];
247 -> 262 [label="Data Dep"];
249 -> 250 [label="AST"];
251 -> 252 [label="AST"];
251 -> 253 [label="AST"];
256 -> 257 [label="AST"];
256 -> 255 [label="AST"];
256 -> 262 [label="Data Dep"];
258 -> 259 [label="AST"];
260 -> 254 [label="AST"];
260 -> 256 [label="AST"];
260 -> 251 [label="AST"];
260 -> 258 [label="AST"];
261 -> 245 [label="AST"];
261 -> 247 [label="AST"];
261 -> 241 [label="AST"];
261 -> 249 [label="AST"];
261 -> 260 [label="AST"];
262 -> 314 [label="Define-Use"];
263 -> 262 [label="AST"];
263 -> 239 [label="AST"];
263 -> 261 [label="AST"];
264 -> 265 [label="AST"];
266 -> 267 [label="AST"];
266 -> 268 [label="AST"];
270 -> 271 [label="AST"];
272 -> 273 [label="AST"];
272 -> 270 [label="AST"];
272 -> 305 [label="Data Dep"];
274 -> 275 [label="AST"];
278 -> 279 [label="AST"];
278 -> 277 [label="AST"];
278 -> 305 [label="Data Dep"];
280 -> 281 [label="AST"];
280 -> 282 [label="AST"];
285 -> 286 [label="AST"];
285 -> 284 [label="AST"];
285 -> 305 [label="Data Dep"];
287 -> 288 [label="AST"];
289 -> 283 [label="AST"];
289 -> 285 [label="AST"];
289 -> 280 [label="AST"];
289 -> 287 [label="AST"];
290 -> 291 [label="AST"];
292 -> 289 [label="AST"];
292 -> 290 [label="AST"];
293 -> 294 [label="AST"];
297 -> 298 [label="AST"];
297 -> 296 [label="AST"];
297 -> 305 [label="Data Dep"];
299 -> 295 [label="AST"];
299 -> 297 [label="AST"];
299 -> 293 [label="AST"];
300 -> 301 [label="AST"];
302 -> 299 [label="AST"];
302 -> 300 [label="AST"];
303 -> 276 [label="AST"];
303 -> 278 [label="AST"];
303 -> 274 [label="AST"];
303 -> 292 [label="AST"];
303 -> 302 [label="AST"];
304 -> 269 [label="AST"];
304 -> 272 [label="AST"];
304 -> 266 [label="AST"];
304 -> 303 [label="AST"];
305 -> 323 [label="Define-Use"];
306 -> 305 [label="AST"];
306 -> 264 [label="AST"];
306 -> 304 [label="AST"];
307 -> 308 [label="AST"];
307 -> 309 [label="AST"];
307 -> 310 [label="AST"];
312 -> 313 [label="AST"];
314 -> 315 [label="AST"];
316 -> 311 [label="AST"];
316 -> 312 [label="AST"];
316 -> 307 [label="AST"];
316 -> 314 [label="AST"];
316 -> 329 [label="Control Dep"];
316 -> 328 [label="Control Dep"];
316 -> 317 [label="Control Dep"];
316 -> 321 [label="Control Dep"];
316 -> 323 [label="Control Dep"];
316 -> 326 [label="Control Dep"];
317 -> 318 [label="AST"];
317 -> 319 [label="AST"];
321 -> 322 [label="AST"];
323 -> 324 [label="AST"];
326 -> 327 [label="AST"];
326 -> 325 [label="AST"];
328 -> 320 [label="AST"];
328 -> 321 [label="AST"];
328 -> 317 [label="AST"];
328 -> 323 [label="AST"];
328 -> 326 [label="AST"];
329 -> 328 [label="AST"];
330 -> 316 [label="AST"];
330 -> 329 [label="AST"];
331 -> 263 [label="AST"];
331 -> 306 [label="AST"];
331 -> 330 [label="AST"];
332 -> 236 [label="AST"];
332 -> 237 [label="AST"];
332 -> 331 [label="AST"];
333 -> 334 [label="AST"];
336 -> 337 [label="AST"];
338 -> 335 [label="AST"];
338 -> 336 [label="AST"];
338 -> 333 [label="AST"];
339 -> 340 [label="AST"];
341 -> 338 [label="AST"];
341 -> 339 [label="AST"];
341 -> 356 [label="Control Dep"];
341 -> 355 [label="Control Dep"];
341 -> 354 [label="Control Dep"];
341 -> 342 [label="Control Dep"];
341 -> 353 [label="Control Dep"];
341 -> 345 [label="Control Dep"];
341 -> 352 [label="Control Dep"];
341 -> 347 [label="Control Dep"];
341 -> 350 [label="Control Dep"];
342 -> 343 [label="AST"];
347 -> 348 [label="AST"];
350 -> 351 [label="AST"];
352 -> 349 [label="AST"];
352 -> 350 [label="AST"];
352 -> 347 [label="AST"];
353 -> 346 [label="AST"];
353 -> 352 [label="AST"];
353 -> 345 [label="AST"];
354 -> 344 [label="AST"];
354 -> 353 [label="AST"];
354 -> 342 [label="AST"];
355 -> 354 [label="AST"];
356 -> 355 [label="AST"];
357 -> 341 [label="AST"];
357 -> 356 [label="AST"];
358 -> 359 [label="AST"];
358 -> 360 [label="AST"];
362 -> 363 [label="AST"];
364 -> 361 [label="AST"];
364 -> 362 [label="AST"];
364 -> 358 [label="AST"];
365 -> 366 [label="AST"];
365 -> 364 [label="AST"];
365 -> 627 [label="Control Dep"];
365 -> 626 [label="Control Dep"];
365 -> 599 [label="Control Dep"];
365 -> 381 [label="Control Dep"];
365 -> 368 [label="Control Dep"];
365 -> 379 [label="Control Dep"];
365 -> 370 [label="Control Dep"];
365 -> 375 [label="Control Dep"];
365 -> 377 [label="Control Dep"];
365 -> 389 [label="Control Dep"];
365 -> 383 [label="Control Dep"];
365 -> 385 [label="Control Dep"];
365 -> 443 [label="Control Dep"];
365 -> 394 [label="Control Dep"];
365 -> 391 [label="Control Dep"];
365 -> 402 [label="Control Dep"];
365 -> 395 [label="Control Dep"];
365 -> 400 [label="Control Dep"];
365 -> 406 [label="Control Dep"];
365 -> 404 [label="Control Dep"];
365 -> 464 [label="Control Dep"];
365 -> 462 [label="Control Dep"];
365 -> 447 [label="Control Dep"];
365 -> 452 [label="Control Dep"];
365 -> 459 [label="Control Dep"];
365 -> 454 [label="Control Dep"];
365 -> 457 [label="Control Dep"];
365 -> 460 [label="Control Dep"];
365 -> 525 [label="Control Dep"];
365 -> 465 [label="Control Dep"];
365 -> 543 [label="Control Dep"];
365 -> 526 [label="Control Dep"];
365 -> 540 [label="Control Dep"];
365 -> 528 [label="Control Dep"];
365 -> 534 [label="Control Dep"];
365 -> 536 [label="Control Dep"];
365 -> 538 [label="Control Dep"];
365 -> 582 [label="Control Dep"];
365 -> 544 [label="Control Dep"];
365 -> 579 [label="Control Dep"];
365 -> 546 [label="Control Dep"];
365 -> 552 [label="Control Dep"];
365 -> 566 [label="Control Dep"];
365 -> 563 [label="Control Dep"];
365 -> 554 [label="Control Dep"];
365 -> 559 [label="Control Dep"];
365 -> 561 [label="Control Dep"];
365 -> 564 [label="Control Dep"];
365 -> 577 [label="Control Dep"];
365 -> 574 [label="Control Dep"];
365 -> 568 [label="Control Dep"];
365 -> 572 [label="Control Dep"];
365 -> 575 [label="Control Dep"];
365 -> 598 [label="Control Dep"];
365 -> 583 [label="Control Dep"];
365 -> 595 [label="Control Dep"];
365 -> 585 [label="Control Dep"];
365 -> 591 [label="Control Dep"];
365 -> 589 [label="Control Dep"];
365 -> 593 [label="Control Dep"];
365 -> 625 [label="Control Dep"];
365 -> 603 [label="Control Dep"];
368 -> 367 [label="AST"];
368 -> 369 [label="AST"];
370 -> 371 [label="AST"];
370 -> 372 [label="AST"];
370 -> 373 [label="AST"];
375 -> 376 [label="AST"];
375 -> 380 [label="Data Dep"];
377 -> 378 [label="AST"];
379 -> 374 [label="AST"];
379 -> 375 [label="AST"];
379 -> 370 [label="AST"];
379 -> 377 [label="AST"];
380 -> 428 [label="Define-Use"];
380 -> 432 [label="Define-Use"];
381 -> 380 [label="AST"];
381 -> 368 [label="AST"];
381 -> 379 [label="AST"];
383 -> 382 [label="AST"];
383 -> 384 [label="AST"];
385 -> 386 [label="AST"];
385 -> 387 [label="AST"];
387 -> 388 [label="Data Dep"];
388 -> 408 [label="Define-Use"];
388 -> 477 [label="Define-Use"];
388 -> 507 [label="Define-Use"];
389 -> 388 [label="AST"];
389 -> 383 [label="AST"];
389 -> 385 [label="AST"];
391 -> 392 [label="AST"];
393 -> 395 [label="Define-Use"];
394 -> 393 [label="AST"];
394 -> 390 [label="AST"];
394 -> 391 [label="AST"];
395 -> 396 [label="AST"];
397 -> 398 [label="AST"];
397 -> 399 [label="AST"];
400 -> 401 [label="AST"];
400 -> 397 [label="AST"];
402 -> 403 [label="AST"];
402 -> 395 [label="AST"];
402 -> 400 [label="AST"];
402 -> 442 [label="Control Dep"];
402 -> 441 [label="Control Dep"];
402 -> 415 [label="Control Dep"];
402 -> 408 [label="Control Dep"];
402 -> 410 [label="Control Dep"];
402 -> 437 [label="Control Dep"];
402 -> 416 [label="Control Dep"];
402 -> 422 [label="Control Dep"];
402 -> 434 [label="Control Dep"];
402 -> 424 [label="Control Dep"];
402 -> 432 [label="Control Dep"];
402 -> 428 [label="Control Dep"];
402 -> 430 [label="Control Dep"];
402 -> 435 [label="Control Dep"];
404 -> 405 [label="AST"];
404 -> 410 [label="Define-Use"];
404 -> 430 [label="Define-Use"];
406 -> 407 [label="AST"];
406 -> 404 [label="AST"];
408 -> 409 [label="AST"];
410 -> 411 [label="AST"];
412 -> 413 [label="AST"];
412 -> 414 [label="AST"];
415 -> 412 [label="AST"];
415 -> 408 [label="AST"];
415 -> 410 [label="AST"];
416 -> 417 [label="AST"];
416 -> 418 [label="AST"];
416 -> 419 [label="AST"];
416 -> 420 [label="AST"];
422 -> 423 [label="AST"];
424 -> 425 [label="AST"];
424 -> 426 [label="AST"];
428 -> 429 [label="AST"];
430 -> 431 [label="AST"];
432 -> 433 [label="AST"];
432 -> 428 [label="AST"];
432 -> 430 [label="AST"];
432 -> 415 [label="Data Dep"];
434 -> 427 [label="AST"];
434 -> 432 [label="AST"];
434 -> 424 [label="AST"];
435 -> 436 [label="AST"];
437 -> 421 [label="AST"];
437 -> 422 [label="AST"];
437 -> 416 [label="AST"];
437 -> 434 [label="AST"];
437 -> 435 [label="AST"];
438 -> 439 [label="AST"];
438 -> 440 [label="AST"];
441 -> 438 [label="AST"];
441 -> 415 [label="AST"];
441 -> 437 [label="AST"];
442 -> 441 [label="AST"];
443 -> 394 [label="AST"];
443 -> 402 [label="AST"];
443 -> 406 [label="AST"];
443 -> 442 [label="AST"];
444 -> 445 [label="AST"];
444 -> 446 [label="AST"];
447 -> 448 [label="AST"];
447 -> 449 [label="AST"];
447 -> 450 [label="AST"];
452 -> 453 [label="AST"];
454 -> 455 [label="AST"];
457 -> 458 [label="AST"];
457 -> 463 [label="Data Dep"];
459 -> 456 [label="AST"];
459 -> 457 [label="AST"];
459 -> 454 [label="AST"];
460 -> 461 [label="AST"];
462 -> 451 [label="AST"];
462 -> 452 [label="AST"];
462 -> 447 [label="AST"];
462 -> 459 [label="AST"];
462 -> 460 [label="AST"];
463 -> 475 [label="Define-Use"];
463 -> 503 [label="Define-Use"];
464 -> 463 [label="AST"];
464 -> 444 [label="AST"];
464 -> 462 [label="AST"];
465 -> 466 [label="AST"];
465 -> 494 [label="Control Dep"];
465 -> 481 [label="Control Dep"];
465 -> 479 [label="Control Dep"];
465 -> 470 [label="Control Dep"];
465 -> 475 [label="Control Dep"];
465 -> 477 [label="Control Dep"];
465 -> 493 [label="Control Dep"];
465 -> 482 [label="Control Dep"];
465 -> 490 [label="Control Dep"];
465 -> 484 [label="Control Dep"];
465 -> 488 [label="Control Dep"];
465 -> 524 [label="Control Dep"];
465 -> 511 [label="Control Dep"];
465 -> 509 [label="Control Dep"];
465 -> 497 [label="Control Dep"];
465 -> 503 [label="Control Dep"];
465 -> 505 [label="Control Dep"];
465 -> 507 [label="Control Dep"];
465 -> 523 [label="Control Dep"];
465 -> 512 [label="Control Dep"];
465 -> 520 [label="Control Dep"];
465 -> 514 [label="Control Dep"];
465 -> 518 [label="Control Dep"];
467 -> 468 [label="AST"];
467 -> 469 [label="AST"];
470 -> 471 [label="AST"];
470 -> 472 [label="AST"];
470 -> 473 [label="AST"];
475 -> 476 [label="AST"];
475 -> 480 [label="Data Dep"];
477 -> 478 [label="AST"];
477 -> 480 [label="Data Dep"];
479 -> 474 [label="AST"];
479 -> 475 [label="AST"];
479 -> 470 [label="AST"];
479 -> 477 [label="AST"];
480 -> 488 [label="Define-Use"];
480 -> 518 [label="Define-Use"];
481 -> 480 [label="AST"];
481 -> 467 [label="AST"];
481 -> 479 [label="AST"];
482 -> 483 [label="AST"];
484 -> 485 [label="AST"];
484 -> 486 [label="AST"];
488 -> 489 [label="AST"];
488 -> 482 [label="Data Dep"];
490 -> 487 [label="AST"];
490 -> 488 [label="AST"];
490 -> 484 [label="AST"];
491 -> 492 [label="AST"];
493 -> 491 [label="AST"];
493 -> 482 [label="AST"];
493 -> 490 [label="AST"];
494 -> 481 [label="AST"];
494 -> 493 [label="AST"];
495 -> 496 [label="AST"];
497 -> 498 [label="AST"];
497 -> 499 [label="AST"];
497 -> 500 [label="AST"];
497 -> 501 [label="AST"];
503 -> 504 [label="AST"];
503 -> 510 [label="Data Dep"];
505 -> 506 [label="AST"];
505 -> 510 [label="Data Dep"];
507 -> 508 [label="AST"];
507 -> 510 [label="Data Dep"];
509 -> 502 [label="AST"];
509 -> 503 [label="AST"];
509 -> 497 [label="AST"];
509 -> 505 [label="AST"];
509 -> 507 [label="AST"];
510 -> 518 [label="Define-Use"];
511 -> 510 [label="AST"];
511 -> 495 [label="AST"];
511 -> 509 [label="AST"];
512 -> 513 [label="AST"];
514 -> 515 [label="AST"];
514 -> 516 [label="AST"];
518 -> 519 [label="AST"];
518 -> 512 [label="Data Dep"];
520 -> 517 [label="AST"];
520 -> 518 [label="AST"];
520 -> 514 [label="AST"];
521 -> 522 [label="AST"];
523 -> 521 [label="AST"];
523 -> 512 [label="AST"];
523 -> 520 [label="AST"];
524 -> 511 [label="AST"];
524 -> 523 [label="AST"];
525 -> 465 [label="AST"];
525 -> 494 [label="AST"];
525 -> 524 [label="AST"];
526 -> 527 [label="AST"];
527 -> 534 [label="Define-Use"];
528 -> 529 [label="AST"];
528 -> 530 [label="AST"];
528 -> 531 [label="AST"];
528 -> 532 [label="AST"];
534 -> 535 [label="AST"];
534 -> 526 [label="Data Dep"];
536 -> 537 [label="AST"];
538 -> 539 [label="AST"];
540 -> 533 [label="AST"];
540 -> 534 [label="AST"];
540 -> 528 [label="AST"];
540 -> 536 [label="AST"];
540 -> 538 [label="AST"];
541 -> 542 [label="AST"];
543 -> 541 [label="AST"];
543 -> 526 [label="AST"];
543 -> 540 [label="AST"];
544 -> 545 [label="AST"];
545 -> 552 [label="Define-Use"];
545 -> 559 [label="Define-Use"];
545 -> 572 [label="Define-Use"];
546 -> 547 [label="AST"];
546 -> 548 [label="AST"];
546 -> 549 [label="AST"];
546 -> 550 [label="AST"];
552 -> 553 [label="AST"];
552 -> 544 [label="Data Dep"];
554 -> 555 [label="AST"];
554 -> 556 [label="AST"];
554 -> 557 [label="AST"];
559 -> 560 [label="AST"];
559 -> 544 [label="Data Dep"];
561 -> 562 [label="AST"];
563 -> 558 [label="AST"];
563 -> 559 [label="AST"];
563 -> 554 [label="AST"];
563 -> 561 [label="AST"];
564 -> 565 [label="AST"];
566 -> 567 [label="AST"];
566 -> 563 [label="AST"];
566 -> 564 [label="AST"];
568 -> 569 [label="AST"];
568 -> 570 [label="AST"];
572 -> 573 [label="AST"];
572 -> 544 [label="Data Dep"];
574 -> 571 [label="AST"];
574 -> 572 [label="AST"];
574 -> 568 [label="AST"];
575 -> 576 [label="AST"];
577 -> 578 [label="AST"];
577 -> 574 [label="AST"];
577 -> 575 [label="AST"];
579 -> 551 [label="AST"];
579 -> 552 [label="AST"];
579 -> 546 [label="AST"];
579 -> 566 [label="AST"];
579 -> 577 [label="AST"];
580 -> 581 [label="AST"];
582 -> 580 [label="AST"];
582 -> 544 [label="AST"];
582 -> 579 [label="AST"];
583 -> 584 [label="AST"];
584 -> 593 [label="Define-Use"];
585 -> 586 [label="AST"];
585 -> 587 [label="AST"];
589 -> 590 [label="AST"];
591 -> 592 [label="AST"];
591 -> 589 [label="AST"];
591 -> 583 [label="Data Dep"];
593 -> 594 [label="AST"];
593 -> 583 [label="Data Dep"];
595 -> 588 [label="AST"];
595 -> 591 [label="AST"];
595 -> 585 [label="AST"];
595 -> 593 [label="AST"];
596 -> 597 [label="AST"];
598 -> 596 [label="AST"];
598 -> 583 [label="AST"];
598 -> 595 [label="AST"];
599 -> 381 [label="AST"];
599 -> 389 [label="AST"];
599 -> 443 [label="AST"];
599 -> 464 [label="AST"];
599 -> 525 [label="AST"];
599 -> 543 [label="AST"];
599 -> 582 [label="AST"];
599 -> 598 [label="AST"];
600 -> 618 [label="Define-Use"];
601 -> 602 [label="AST"];
603 -> 600 [label="AST"];
603 -> 601 [label="AST"];
603 -> 624 [label="Control Dep"];
603 -> 620 [label="Control Dep"];
603 -> 604 [label="Control Dep"];
603 -> 611 [label="Control Dep"];
603 -> 616 [label="Control Dep"];
603 -> 612 [label="Control Dep"];
603 -> 614 [label="Control Dep"];
603 -> 618 [label="Control Dep"];
603 -> 623 [label="Control Dep"];
603 -> 621 [label="Control Dep"];
604 -> 605 [label="AST"];
604 -> 606 [label="AST"];
604 -> 607 [label="AST"];
609 -> 610 [label="AST"];
611 -> 609 [label="AST"];
612 -> 613 [label="AST"];
614 -> 615 [label="AST"];
616 -> 617 [label="AST"];
616 -> 612 [label="AST"];
616 -> 614 [label="AST"];
618 -> 619 [label="AST"];
620 -> 608 [label="AST"];
620 -> 611 [label="AST"];
620 -> 604 [label="AST"];
620 -> 616 [label="AST"];
620 -> 618 [label="AST"];
621 -> 622 [label="AST"];
623 -> 621 [label="AST"];
624 -> 620 [label="AST"];
624 -> 623 [label="AST"];
625 -> 603 [label="AST"];
625 -> 624 [label="AST"];
626 -> 599 [label="AST"];
626 -> 625 [label="AST"];
627 -> 626 [label="AST"];
628 -> 365 [label="AST"];
628 -> 627 [label="AST"];
629 -> 630 [label="AST"];
629 -> 694 [label="Define-Use"];
630 -> 637 [label="Define-Use"];
631 -> 632 [label="AST"];
631 -> 633 [label="AST"];
631 -> 634 [label="AST"];
631 -> 635 [label="AST"];
637 -> 638 [label="AST"];
637 -> 629 [label="Data Dep"];
639 -> 640 [label="AST"];
639 -> 641 [label="AST"];
643 -> 644 [label="AST"];
645 -> 646 [label="AST"];
647 -> 642 [label="AST"];
647 -> 643 [label="AST"];
647 -> 639 [label="AST"];
647 -> 645 [label="AST"];
648 -> 649 [label="AST"];
650 -> 636 [label="AST"];
650 -> 637 [label="AST"];
650 -> 631 [label="AST"];
650 -> 647 [label="AST"];
650 -> 648 [label="AST"];
651 -> 652 [label="AST"];
653 -> 651 [label="AST"];
653 -> 629 [label="AST"];
653 -> 650 [label="AST"];
655 -> 656 [label="AST"];
657 -> 717 [label="Define-Use"];
658 -> 657 [label="AST"];
658 -> 654 [label="AST"];
658 -> 655 [label="AST"];
659 -> 660 [label="AST"];
659 -> 661 [label="AST"];
659 -> 662 [label="AST"];
663 -> 677 [label="Define-Use"];
663 -> 709 [label="Define-Use"];
663 -> 727 [label="Define-Use"];
664 -> 663 [label="AST"];
664 -> 659 [label="AST"];
665 -> 666 [label="AST"];
668 -> 669 [label="AST"];
670 -> 667 [label="AST"];
670 -> 668 [label="AST"];
670 -> 665 [label="AST"];
670 -> 740 [label="Control Dep"];
670 -> 681 [label="Control Dep"];
670 -> 679 [label="Control Dep"];
670 -> 673 [label="Control Dep"];
670 -> 677 [label="Control Dep"];
670 -> 698 [label="Control Dep"];
670 -> 696 [label="Control Dep"];
670 -> 683 [label="Control Dep"];
670 -> 690 [label="Control Dep"];
670 -> 688 [label="Control Dep"];
670 -> 692 [label="Control Dep"];
670 -> 694 [label="Control Dep"];
670 -> 714 [label="Control Dep"];
670 -> 703 [label="Control Dep"];
670 -> 699 [label="Control Dep"];
670 -> 701 [label="Control Dep"];
670 -> 739 [label="Control Dep"];
670 -> 719 [label="Control Dep"];
670 -> 715 [label="Control Dep"];
670 -> 717 [label="Control Dep"];
671 -> 672 [label="AST"];
673 -> 674 [label="AST"];
673 -> 675 [label="AST"];
677 -> 678 [label="AST"];
677 -> 680 [label="Data Dep"];
679 -> 676 [label="AST"];
679 -> 677 [label="AST"];
679 -> 673 [label="AST"];
680 -> 692 [label="Define-Use"];
681 -> 680 [label="AST"];
681 -> 671 [label="AST"];
681 -> 679 [label="AST"];
683 -> 684 [label="AST"];
683 -> 685 [label="AST"];
683 -> 686 [label="AST"];
688 -> 689 [label="AST"];
690 -> 691 [label="AST"];
690 -> 688 [label="AST"];
690 -> 697 [label="Data Dep"];
692 -> 693 [label="AST"];
692 -> 697 [label="Data Dep"];
694 -> 695 [label="AST"];
694 -> 697 [label="Data Dep"];
696 -> 687 [label="AST"];
696 -> 690 [label="AST"];
696 -> 683 [label="AST"];
696 -> 692 [label="AST"];
696 -> 694 [label="AST"];
697 -> 699 [label="Define-Use"];
697 -> 715 [label="Define-Use"];
697 -> 734 [label="Define-Use"];
698 -> 697 [label="AST"];
698 -> 682 [label="AST"];
698 -> 696 [label="AST"];
699 -> 700 [label="AST"];
701 -> 702 [label="AST"];
703 -> 704 [label="AST"];
703 -> 699 [label="AST"];
703 -> 701 [label="AST"];
703 -> 713 [label="Control Dep"];
703 -> 712 [label="Control Dep"];
703 -> 711 [label="Control Dep"];
703 -> 705 [label="Control Dep"];
703 -> 709 [label="Control Dep"];
705 -> 706 [label="AST"];
705 -> 707 [label="AST"];
709 -> 710 [label="AST"];
711 -> 708 [label="AST"];
711 -> 709 [label="AST"];
711 -> 705 [label="AST"];
712 -> 711 [label="AST"];
713 -> 712 [label="AST"];
714 -> 703 [label="AST"];
714 -> 713 [label="AST"];
715 -> 716 [label="AST"];
717 -> 718 [label="AST"];
719 -> 720 [label="AST"];
719 -> 715 [label="AST"];
719 -> 717 [label="AST"];
719 -> 738 [label="Control Dep"];
719 -> 731 [label="Control Dep"];
719 -> 721 [label="Control Dep"];
719 -> 729 [label="Control Dep"];
719 -> 723 [label="Control Dep"];
719 -> 727 [label="Control Dep"];
719 -> 737 [label="Control Dep"];
719 -> 732 [label="Control Dep"];
719 -> 734 [label="Control Dep"];
721 -> 722 [label="AST"];
721 -> 742 [label="Define-Use"];
722 -> 742 [label="Define-Use"];
723 -> 724 [label="AST"];
723 -> 725 [label="AST"];
727 -> 728 [label="AST"];
727 -> 721 [label="Data Dep"];
729 -> 726 [label="AST"];
729 -> 727 [label="AST"];
729 -> 723 [label="AST"];
731 -> 730 [label="AST"];
731 -> 721 [label="AST"];
731 -> 729 [label="AST"];
732 -> 733 [label="AST"];
734 -> 735 [label="AST"];
734 -> 732 [label="Data Dep"];
737 -> 736 [label="AST"];
737 -> 732 [label="AST"];
737 -> 734 [label="AST"];
738 -> 731 [label="AST"];
738 -> 737 [label="AST"];
739 -> 719 [label="AST"];
739 -> 738 [label="AST"];
740 -> 681 [label="AST"];
740 -> 698 [label="AST"];
740 -> 714 [label="AST"];
740 -> 739 [label="AST"];
741 -> 664 [label="AST"];
741 -> 670 [label="AST"];
741 -> 740 [label="AST"];
742 -> 743 [label="AST"];
744 -> 742 [label="AST"];
745 -> 19 [label="AST"];
745 -> 31 [label="AST"];
745 -> 43 [label="AST"];
745 -> 48 [label="AST"];
745 -> 68 [label="AST"];
745 -> 74 [label="AST"];
745 -> 79 [label="AST"];
745 -> 109 [label="AST"];
745 -> 126 [label="AST"];
745 -> 151 [label="AST"];
745 -> 164 [label="AST"];
745 -> 175 [label="AST"];
745 -> 184 [label="AST"];
745 -> 195 [label="AST"];
745 -> 222 [label="AST"];
745 -> 232 [label="AST"];
745 -> 332 [label="AST"];
745 -> 357 [label="AST"];
745 -> 628 [label="AST"];
745 -> 653 [label="AST"];
745 -> 658 [label="AST"];
745 -> 741 [label="AST"];
745 -> 744 [label="AST"];
745 -> 747 [label="Action"];
746 -> 1 [label="AST"];
746 -> 0 [label="AST"];
746 -> 2 [label="AST"];
746 -> 4 [label="AST"];
746 -> 6 [label="AST"];
746 -> 745 [label="AST"];
747 -> 757 [label="Action"];
749 -> 748 [label="AST"];
750 -> 749 [label="AST"];
751 -> 750 [label="AST"];
752 -> 751 [label="AST"];
752 -> 756 [label="Control Dep"];
752 -> 755 [label="Control Dep"];
752 -> 754 [label="Control Dep"];
754 -> 753 [label="AST"];
755 -> 754 [label="AST"];
756 -> 755 [label="AST"];
757 -> 752 [label="AST"];
757 -> 756 [label="AST"];
}