digraph "getLineCoverageRate#?,String" {
0 [label="2:CtTypeReferenceImpl@double" shape=ellipse]
1 [label="2:CtVirtualElement@getLineCoverageRate" shape=ellipse]
2 [label="2:CtParameterImpl@String methodNameAndDescriptor" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
4 [label="3:CtTypeReferenceImpl@int" shape=ellipse]
5 [label="3:CtLiteralImpl@0" shape=ellipse]
6 [label="3:CtTypeReferenceImpl@int" shape=ellipse]
7 [label="3:CtVirtualElement@total" shape=ellipse]
8 [label="3:CtLocalVariableImpl@int total = 0" shape=ellipse]
9 [label="4:CtTypeReferenceImpl@int" shape=ellipse]
10 [label="4:CtLiteralImpl@0" shape=ellipse]
11 [label="4:CtTypeReferenceImpl@int" shape=ellipse]
12 [label="4:CtVirtualElement@hits" shape=ellipse]
13 [label="4:CtLocalVariableImpl@int hits = 0" shape=ellipse]
14 [label="5:CtExecutableReferenceImpl@lock()" shape=ellipse]
15 [label="5:CtTypeReferenceImpl@lock" shape=ellipse]
16 [label="5:CtVirtualElement@lock" shape=ellipse]
17 [label="5:CtFieldReferenceImpl@lock" shape=ellipse]
18 [label="5:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
19 [label="5:CtFieldReadImpl@lock" shape=ellipse]
20 [label="5:CtInvocationImpl@lock.lock()" shape=ellipse]
21 [label="7:CtTypeReferenceImpl@Iterator" shape=ellipse]
22 [label="7:CtPackageReferenceImpl@" shape=ellipse]
23 [label="7:CtExecutableReferenceImpl@iterator()" shape=ellipse]
24 [label="7:CtTypeReferenceImpl@Iterator" shape=ellipse]
25 [label="7:CtVirtualElement@iterator" shape=ellipse]
26 [label="7:CtExecutableReferenceImpl@values()" shape=ellipse]
27 [label="7:CtTypeReferenceImpl@children" shape=ellipse]
28 [label="7:CtVirtualElement@values" shape=ellipse]
29 [label="7:CtFieldReferenceImpl@children" shape=ellipse]
30 [label="7:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
31 [label="7:CtFieldReadImpl@children" shape=ellipse]
32 [label="7:CtInvocationImpl@children.values()" shape=ellipse]
33 [label="7:CtInvocationImpl@children.values().iterator()" shape=ellipse]
34 [label="7:CtVirtualElement@iter" shape=ellipse]
35 [label="7:CtLocalVariableImpl@Iterator iter = children.values().iterator()" shape=ellipse]
36 [label="8:CtExecutableReferenceImpl@hasNext()" shape=ellipse]
37 [label="8:CtTypeReferenceImpl@Iterator" shape=ellipse]
38 [label="8:CtTypeReferenceImpl@boolean" shape=ellipse]
39 [label="8:CtVirtualElement@hasNext" shape=ellipse]
40 [label="8:CtVariableReadImpl@iter" shape=ellipse]
41 [label="8:CtLocalVariableReferenceImpl@iter" shape=ellipse]
42 [label="8:CtInvocationImpl@iter.hasNext()" shape=ellipse]
43 [label="9:CtTypeReferenceImpl@LineData" shape=ellipse]
44 [label="9:CtPackageReferenceImpl@" shape=ellipse]
45 [label="9:CtExecutableReferenceImpl@next()" shape=ellipse]
46 [label="9:CtTypeReferenceImpl@Iterator" shape=ellipse]
47 [label="9:CtVirtualElement@next" shape=ellipse]
48 [label="9:CtVariableReadImpl@iter" shape=ellipse]
49 [label="9:CtLocalVariableReferenceImpl@iter" shape=ellipse]
50 [label="9:CtInvocationImpl@((LineData) (iter.next()))" shape=ellipse]
51 [label="9:CtTypeReferenceImpl@LineData" shape=ellipse]
52 [label="9:CtVirtualElement@next" shape=ellipse]
53 [label="9:CtLocalVariableImpl@LineData next = ((LineData) (iter.next()))" shape=ellipse]
54 [label="10:CtExecutableReferenceImpl@equals(java.lang.Object)" shape=ellipse]
55 [label="10:CtTypeReferenceImpl@String" shape=ellipse]
56 [label="10:CtTypeReferenceImpl@boolean" shape=ellipse]
57 [label="10:CtTypeReferenceImpl@Object" shape=ellipse]
58 [label="10:CtVirtualElement@equals" shape=ellipse]
59 [label="10:CtVariableReadImpl@methodNameAndDescriptor" shape=ellipse]
60 [label="10:CtParameterReferenceImpl@methodNameAndDescriptor" shape=ellipse]
61 [label="10:CtExecutableReferenceImpl@getMethodName()" shape=ellipse]
62 [label="10:CtTypeReferenceImpl@LineData" shape=ellipse]
63 [label="10:CtVirtualElement@getMethodName" shape=ellipse]
64 [label="10:CtVariableReadImpl@next" shape=ellipse]
65 [label="10:CtLocalVariableReferenceImpl@next" shape=ellipse]
66 [label="10:CtInvocationImpl@next.getMethodName()" shape=ellipse]
67 [label="10:CtExecutableReferenceImpl@getMethodDescriptor()" shape=ellipse]
68 [label="10:CtTypeReferenceImpl@LineData" shape=ellipse]
69 [label="10:CtVirtualElement@getMethodDescriptor" shape=ellipse]
70 [label="10:CtVariableReadImpl@next" shape=ellipse]
71 [label="10:CtLocalVariableReferenceImpl@next" shape=ellipse]
72 [label="10:CtInvocationImpl@next.getMethodDescriptor()" shape=ellipse]
73 [label="10:CtBinaryOperatorImpl@next.getMethodName() + next.getMethodDescriptor()" shape=ellipse]
74 [label="10:CtInvocationImpl@methodNameAndDescriptor.equals(next.getMethodName() + next.getMethodDescriptor())" shape=ellipse]
75 [label="11:CtVariableWriteImpl@total" shape=ellipse]
76 [label="11:CtLocalVariableReferenceImpl@total" shape=ellipse]
77 [label="11:CtUnaryOperatorImpl@total++" shape=ellipse]
78 [label="11:CtTypeReferenceImpl@int" shape=ellipse]
79 [label="12:CtExecutableReferenceImpl@getHits()" shape=ellipse]
80 [label="12:CtTypeReferenceImpl@LineData" shape=ellipse]
81 [label="12:CtVirtualElement@getHits" shape=ellipse]
82 [label="12:CtVariableReadImpl@next" shape=ellipse]
83 [label="12:CtLocalVariableReferenceImpl@next" shape=ellipse]
84 [label="12:CtInvocationImpl@next.getHits()" shape=ellipse]
85 [label="12:CtLiteralImpl@0" shape=ellipse]
86 [label="12:CtTypeReferenceImpl@int" shape=ellipse]
87 [label="12:CtBinaryOperatorImpl@next.getHits() > 0" shape=ellipse]
88 [label="13:CtVariableWriteImpl@hits" shape=ellipse]
89 [label="13:CtLocalVariableReferenceImpl@hits" shape=ellipse]
90 [label="13:CtUnaryOperatorImpl@hits++" shape=ellipse]
91 [label="13:CtTypeReferenceImpl@int" shape=ellipse]
92 [label="12:CtBlockImpl@\{
    hits++;
\}" shape=ellipse]
93 [label="12:CtIfImpl@if (next.getHits() > 0) \{
    hits++;
\}" shape=ellipse]
94 [label="10:CtBlockImpl@\{
    total++;
    if (next.getHits() > 0) \{
        hits++;
    \}
\}" shape=ellipse]
95 [label="10:CtIfImpl@if (methodNameAndDescriptor.equals(next.getMethodName() + next.getMethodDescriptor())) \{
    total++;
    if (next.getHits() > 0) \{
        hits++;
    \}
\}" shape=ellipse]
96 [label="8:CtBlockImpl@\{
    LineData next = ((LineData) (iter.next()));
    if (methodNameAndDescriptor.equals(next.getMethodName() + next.getMethodDescriptor())) \{
        total++;
        if (next.getHits() > 0) \{
            hits++;
        \}
    \}
\}" shape=ellipse]
97 [label="8:CtWhileImpl@while (iter.hasNext()) \{
    LineData next = ((LineData) (iter.next()));
    if (methodNameAndDescriptor.equals(next.getMethodName() + next.getMethodDescriptor())) \{
        total++;
        if (next.getHits() > 0) \{
            hits++;
        \}
    \}
\} " shape=ellipse]
98 [label="17:CtVariableReadImpl@total" shape=ellipse]
99 [label="17:CtLocalVariableReferenceImpl@total" shape=ellipse]
100 [label="17:CtLiteralImpl@0" shape=ellipse]
101 [label="17:CtTypeReferenceImpl@int" shape=ellipse]
102 [label="17:CtBinaryOperatorImpl@total == 0" shape=ellipse]
103 [label="17:CtTypeReferenceImpl@boolean" shape=ellipse]
104 [label="18:CtLiteralImpl@1.0" shape=ellipse]
105 [label="18:CtTypeReferenceImpl@double" shape=ellipse]
106 [label="18:CtReturnImpl@return 1.0" shape=ellipse]
107 [label="17:CtBlockImpl@\{
    return 1.0;
\}" shape=ellipse]
108 [label="17:CtIfImpl@if (total == 0) \{
    return 1.0;
\}" shape=ellipse]
109 [label="20:CtVariableReadImpl@((double) (hits))" shape=ellipse]
110 [label="20:CtTypeReferenceImpl@double" shape=ellipse]
111 [label="20:CtLocalVariableReferenceImpl@hits" shape=ellipse]
112 [label="20:CtVariableReadImpl@total" shape=ellipse]
113 [label="20:CtLocalVariableReferenceImpl@total" shape=ellipse]
114 [label="20:CtBinaryOperatorImpl@((double) (hits)) / total" shape=ellipse]
115 [label="20:CtTypeReferenceImpl@double" shape=ellipse]
116 [label="20:CtReturnImpl@return ((double) (hits)) / total" shape=ellipse]
117 [label="6:CtBlockImpl@\{
    Iterator iter = children.values().iterator();
    while (iter.hasNext()) \{
        LineData next = ((LineData) (iter.next()));
        if (methodNameAndDescriptor.equals(next.getMethodName() + next.getMethodDescriptor())) \{
            total++;
            if (next.getHits() > 0) \{
                hits++;
            \}
        \}
    \} 
    if (total == 0) \{
        return 1.0;
    \}
    return ((double) (hits)) / total;
\}" shape=ellipse]
118 [label="22:CtExecutableReferenceImpl@unlock()" shape=ellipse]
119 [label="22:CtTypeReferenceImpl@lock" shape=ellipse]
120 [label="22:CtVirtualElement@unlock" shape=ellipse]
121 [label="22:CtFieldReferenceImpl@lock" shape=ellipse]
122 [label="22:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
123 [label="22:CtFieldReadImpl@lock" shape=ellipse]
124 [label="22:CtInvocationImpl@lock.unlock()" shape=ellipse]
125 [label="21:CtBlockImpl@\{
    lock.unlock();
\}" shape=ellipse]
126 [label="6:CtTryImpl@try \{
    Iterator iter = children.values().iterator();
    while (iter.hasNext()) \{
        LineData next = ((LineData) (iter.next()));
        if (methodNameAndDescriptor.equals(next.getMethodName() + next.getMethodDescriptor())) \{
            total++;
            if (next.getHits() > 0) \{
                hits++;
            \}
        \}
    \} 
    if (total == 0) \{
        return 1.0;
    \}
    return ((double) (hits)) / total;
\} finally \{
    lock.unlock();
\}" shape=ellipse]
127 [label="2:CtBlockImpl@\{
    int total = 0;
    int hits = 0;
    lock.lock();
    try \{
        Iterator iter = children.values().iterator();
        while (iter.hasNext()) \{
            LineData next = ((LineData) (iter.next()));
            if (methodNameAndDescriptor.equals(next.getMethodName() + next.getMethodDescriptor())) \{
                total++;
                if (next.getHits() > 0) \{
                    hits++;
                \}
            \}
        \} 
        if (total == 0) \{
            return 1.0;
        \}
        return ((double) (hits)) / total;
    \} finally \{
        lock.unlock();
    \}
\}" shape=ellipse]
128 [label="2:CtMethodImpl@public double getLineCoverageRate(String methodNameAndDescriptor) \{
    int total = 0;
    int hits = 0;
    lock.lock();
    try \{
        Iterator iter = children.values().iterator();
        while (iter.hasNext()) \{
            LineData next = ((LineData) (iter.next()));
            if (methodNameAndDescriptor.equals(next.getMethodName() + next.getMethodDescriptor())) \{
                total++;
                if (next.getHits() > 0) \{
                    hits++;
                \}
            \}
        \} 
        if (total == 0) \{
            return 1.0;
        \}
        return ((double) (hits)) / total;
    \} finally \{
        lock.unlock();
    \}
\}" shape=ellipse]
129 [label="7:Insert@INSERT" shape=ellipse]
130 [label="7:CtPackageReferenceImpl@" shape=ellipse]
131 [label="7:CtTypeReferenceImpl@CoverageData" shape=ellipse]
2 -> 3 [label="AST"];
5 -> 6 [label="AST"];
7 -> 98 [label="Define-Use"];
7 -> 112 [label="Define-Use"];
8 -> 7 [label="AST"];
8 -> 4 [label="AST"];
8 -> 5 [label="AST"];
10 -> 11 [label="AST"];
12 -> 109 [label="Define-Use"];
13 -> 12 [label="AST"];
13 -> 9 [label="AST"];
13 -> 10 [label="AST"];
14 -> 15 [label="AST"];
17 -> 18 [label="AST"];
19 -> 17 [label="AST"];
20 -> 16 [label="AST"];
20 -> 19 [label="AST"];
20 -> 14 [label="AST"];
21 -> 22 [label="AST"];
21 -> 129 [label="Action"];
23 -> 24 [label="AST"];
26 -> 27 [label="AST"];
29 -> 30 [label="AST"];
31 -> 29 [label="AST"];
31 -> 34 [label="Data Dep"];
32 -> 28 [label="AST"];
32 -> 31 [label="AST"];
32 -> 26 [label="AST"];
33 -> 25 [label="AST"];
33 -> 32 [label="AST"];
33 -> 23 [label="AST"];
34 -> 40 [label="Define-Use"];
34 -> 48 [label="Define-Use"];
35 -> 34 [label="AST"];
35 -> 21 [label="AST"];
35 -> 33 [label="AST"];
36 -> 37 [label="AST"];
36 -> 38 [label="AST"];
40 -> 41 [label="AST"];
42 -> 39 [label="AST"];
42 -> 40 [label="AST"];
42 -> 36 [label="AST"];
42 -> 96 [label="Control Dep"];
42 -> 53 [label="Control Dep"];
42 -> 50 [label="Control Dep"];
42 -> 45 [label="Control Dep"];
42 -> 48 [label="Control Dep"];
42 -> 95 [label="Control Dep"];
42 -> 74 [label="Control Dep"];
42 -> 54 [label="Control Dep"];
42 -> 59 [label="Control Dep"];
42 -> 73 [label="Control Dep"];
42 -> 66 [label="Control Dep"];
42 -> 61 [label="Control Dep"];
42 -> 64 [label="Control Dep"];
42 -> 72 [label="Control Dep"];
42 -> 67 [label="Control Dep"];
42 -> 70 [label="Control Dep"];
43 -> 44 [label="AST"];
45 -> 46 [label="AST"];
48 -> 49 [label="AST"];
48 -> 52 [label="Data Dep"];
50 -> 47 [label="AST"];
50 -> 51 [label="AST"];
50 -> 48 [label="AST"];
50 -> 45 [label="AST"];
52 -> 64 [label="Define-Use"];
52 -> 70 [label="Define-Use"];
52 -> 82 [label="Define-Use"];
53 -> 52 [label="AST"];
53 -> 43 [label="AST"];
53 -> 50 [label="AST"];
54 -> 55 [label="AST"];
54 -> 56 [label="AST"];
54 -> 57 [label="AST"];
59 -> 60 [label="AST"];
61 -> 62 [label="AST"];
64 -> 65 [label="AST"];
66 -> 63 [label="AST"];
66 -> 64 [label="AST"];
66 -> 61 [label="AST"];
67 -> 68 [label="AST"];
70 -> 71 [label="AST"];
72 -> 69 [label="AST"];
72 -> 70 [label="AST"];
72 -> 67 [label="AST"];
73 -> 66 [label="AST"];
73 -> 72 [label="AST"];
74 -> 58 [label="AST"];
74 -> 59 [label="AST"];
74 -> 54 [label="AST"];
74 -> 73 [label="AST"];
74 -> 94 [label="Control Dep"];
74 -> 77 [label="Control Dep"];
74 -> 75 [label="Control Dep"];
74 -> 93 [label="Control Dep"];
74 -> 87 [label="Control Dep"];
74 -> 84 [label="Control Dep"];
74 -> 79 [label="Control Dep"];
74 -> 82 [label="Control Dep"];
74 -> 85 [label="Control Dep"];
75 -> 76 [label="AST"];
75 -> 98 [label="Define-Use"];
75 -> 112 [label="Define-Use"];
76 -> 98 [label="Define-Use"];
76 -> 112 [label="Define-Use"];
77 -> 78 [label="AST"];
77 -> 75 [label="AST"];
79 -> 80 [label="AST"];
82 -> 83 [label="AST"];
84 -> 81 [label="AST"];
84 -> 82 [label="AST"];
84 -> 79 [label="AST"];
85 -> 86 [label="AST"];
87 -> 84 [label="AST"];
87 -> 85 [label="AST"];
87 -> 92 [label="Control Dep"];
87 -> 90 [label="Control Dep"];
87 -> 88 [label="Control Dep"];
88 -> 89 [label="AST"];
88 -> 109 [label="Define-Use"];
89 -> 109 [label="Define-Use"];
90 -> 91 [label="AST"];
90 -> 88 [label="AST"];
92 -> 90 [label="AST"];
93 -> 87 [label="AST"];
93 -> 92 [label="AST"];
94 -> 77 [label="AST"];
94 -> 93 [label="AST"];
95 -> 74 [label="AST"];
95 -> 94 [label="AST"];
96 -> 53 [label="AST"];
96 -> 95 [label="AST"];
97 -> 42 [label="AST"];
97 -> 96 [label="AST"];
98 -> 99 [label="AST"];
100 -> 101 [label="AST"];
102 -> 103 [label="AST"];
102 -> 98 [label="AST"];
102 -> 100 [label="AST"];
102 -> 107 [label="Control Dep"];
102 -> 106 [label="Control Dep"];
102 -> 104 [label="Control Dep"];
104 -> 105 [label="AST"];
106 -> 104 [label="AST"];
107 -> 106 [label="AST"];
108 -> 102 [label="AST"];
108 -> 107 [label="AST"];
109 -> 110 [label="AST"];
109 -> 111 [label="AST"];
112 -> 113 [label="AST"];
114 -> 115 [label="AST"];
114 -> 109 [label="AST"];
114 -> 112 [label="AST"];
116 -> 114 [label="AST"];
117 -> 35 [label="AST"];
117 -> 97 [label="AST"];
117 -> 108 [label="AST"];
117 -> 116 [label="AST"];
118 -> 119 [label="AST"];
121 -> 122 [label="AST"];
123 -> 121 [label="AST"];
124 -> 120 [label="AST"];
124 -> 123 [label="AST"];
124 -> 118 [label="AST"];
125 -> 124 [label="AST"];
126 -> 117 [label="AST"];
126 -> 125 [label="AST"];
127 -> 8 [label="AST"];
127 -> 13 [label="AST"];
127 -> 20 [label="AST"];
127 -> 126 [label="AST"];
128 -> 1 [label="AST"];
128 -> 0 [label="AST"];
128 -> 2 [label="AST"];
128 -> 127 [label="AST"];
129 -> 131 [label="Action"];
131 -> 130 [label="AST"];
}