digraph "getLineCoverageRate#?" {
0 [label="2:CtTypeReferenceImpl@double" shape=ellipse]
1 [label="2:CtVirtualElement@getLineCoverageRate" shape=ellipse]
2 [label="3:CtTypeReferenceImpl@int" shape=ellipse]
3 [label="3:CtLiteralImpl@0" shape=ellipse]
4 [label="3:CtTypeReferenceImpl@int" shape=ellipse]
5 [label="3:CtVirtualElement@number" shape=ellipse]
6 [label="3:CtLocalVariableImpl@int number = 0" shape=ellipse]
7 [label="4:CtTypeReferenceImpl@int" shape=ellipse]
8 [label="4:CtLiteralImpl@0" shape=ellipse]
9 [label="4:CtTypeReferenceImpl@int" shape=ellipse]
10 [label="4:CtVirtualElement@numberCovered" shape=ellipse]
11 [label="4:CtLocalVariableImpl@int numberCovered = 0" shape=ellipse]
12 [label="5:CtExecutableReferenceImpl@lock()" shape=ellipse]
13 [label="5:CtTypeReferenceImpl@lock" shape=ellipse]
14 [label="5:CtVirtualElement@lock" shape=ellipse]
15 [label="5:CtFieldReferenceImpl@lock" shape=ellipse]
16 [label="5:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
17 [label="5:CtFieldReadImpl@lock" shape=ellipse]
18 [label="5:CtInvocationImpl@lock.lock()" shape=ellipse]
19 [label="7:CtTypeReferenceImpl@Iterator" shape=ellipse]
20 [label="7:CtPackageReferenceImpl@" shape=ellipse]
21 [label="7:CtExecutableReferenceImpl@iterator()" shape=ellipse]
22 [label="7:CtTypeReferenceImpl@Iterator" shape=ellipse]
23 [label="7:CtVirtualElement@iterator" shape=ellipse]
24 [label="7:CtExecutableReferenceImpl@values()" shape=ellipse]
25 [label="7:CtVirtualElement@values" shape=ellipse]
26 [label="7:CtFieldReferenceImpl@children" shape=ellipse]
27 [label="7:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
28 [label="7:CtFieldReadImpl@this.children" shape=ellipse]
29 [label="7:CtThisAccessImpl@this" shape=ellipse]
30 [label="7:CtInvocationImpl@this.children.values()" shape=ellipse]
31 [label="7:CtInvocationImpl@this.children.values().iterator()" shape=ellipse]
32 [label="7:CtVirtualElement@iter" shape=ellipse]
33 [label="7:CtLocalVariableImpl@Iterator iter = this.children.values().iterator()" shape=ellipse]
34 [label="8:CtExecutableReferenceImpl@hasNext()" shape=ellipse]
35 [label="8:CtTypeReferenceImpl@Iterator" shape=ellipse]
36 [label="8:CtTypeReferenceImpl@boolean" shape=ellipse]
37 [label="8:CtVirtualElement@hasNext" shape=ellipse]
38 [label="8:CtVariableReadImpl@iter" shape=ellipse]
39 [label="8:CtLocalVariableReferenceImpl@iter" shape=ellipse]
40 [label="8:CtInvocationImpl@iter.hasNext()" shape=ellipse]
41 [label="9:CtTypeReferenceImpl@CoverageData" shape=ellipse]
42 [label="9:CtPackageReferenceImpl@" shape=ellipse]
43 [label="9:CtExecutableReferenceImpl@next()" shape=ellipse]
44 [label="9:CtTypeReferenceImpl@Iterator" shape=ellipse]
45 [label="9:CtVirtualElement@next" shape=ellipse]
46 [label="9:CtVariableReadImpl@iter" shape=ellipse]
47 [label="9:CtLocalVariableReferenceImpl@iter" shape=ellipse]
48 [label="9:CtInvocationImpl@((CoverageData) (iter.next()))" shape=ellipse]
49 [label="9:CtTypeReferenceImpl@CoverageData" shape=ellipse]
50 [label="9:CtVirtualElement@coverageContainer" shape=ellipse]
51 [label="9:CtLocalVariableImpl@CoverageData coverageContainer = ((CoverageData) (iter.next()))" shape=ellipse]
52 [label="10:CtVariableWriteImpl@number" shape=ellipse]
53 [label="10:CtLocalVariableReferenceImpl@number" shape=ellipse]
54 [label="10:CtExecutableReferenceImpl@getNumberOfValidLines()" shape=ellipse]
55 [label="10:CtTypeReferenceImpl@CoverageData" shape=ellipse]
56 [label="10:CtVirtualElement@getNumberOfValidLines" shape=ellipse]
57 [label="10:CtVariableReadImpl@coverageContainer" shape=ellipse]
58 [label="10:CtLocalVariableReferenceImpl@coverageContainer" shape=ellipse]
59 [label="10:CtInvocationImpl@coverageContainer.getNumberOfValidLines()" shape=ellipse]
60 [label="10:CtOperatorAssignmentImpl@number += coverageContainer.getNumberOfValidLines()" shape=ellipse]
61 [label="11:CtVariableWriteImpl@numberCovered" shape=ellipse]
62 [label="11:CtLocalVariableReferenceImpl@numberCovered" shape=ellipse]
63 [label="11:CtExecutableReferenceImpl@getNumberOfCoveredLines()" shape=ellipse]
64 [label="11:CtTypeReferenceImpl@CoverageData" shape=ellipse]
65 [label="11:CtVirtualElement@getNumberOfCoveredLines" shape=ellipse]
66 [label="11:CtVariableReadImpl@coverageContainer" shape=ellipse]
67 [label="11:CtLocalVariableReferenceImpl@coverageContainer" shape=ellipse]
68 [label="11:CtInvocationImpl@coverageContainer.getNumberOfCoveredLines()" shape=ellipse]
69 [label="11:CtOperatorAssignmentImpl@numberCovered += coverageContainer.getNumberOfCoveredLines()" shape=ellipse]
70 [label="8:CtBlockImpl@\{
    CoverageData coverageContainer = ((CoverageData) (iter.next()));
    number += coverageContainer.getNumberOfValidLines();
    numberCovered += coverageContainer.getNumberOfCoveredLines();
\}" shape=ellipse]
71 [label="8:CtWhileImpl@while (iter.hasNext()) \{
    CoverageData coverageContainer = ((CoverageData) (iter.next()));
    number += coverageContainer.getNumberOfValidLines();
    numberCovered += coverageContainer.getNumberOfCoveredLines();
\} " shape=ellipse]
72 [label="6:CtBlockImpl@\{
    Iterator iter = this.children.values().iterator();
    while (iter.hasNext()) \{
        CoverageData coverageContainer = ((CoverageData) (iter.next()));
        number += coverageContainer.getNumberOfValidLines();
        numberCovered += coverageContainer.getNumberOfCoveredLines();
    \} 
\}" shape=ellipse]
73 [label="14:CtExecutableReferenceImpl@unlock()" shape=ellipse]
74 [label="14:CtTypeReferenceImpl@lock" shape=ellipse]
75 [label="14:CtVirtualElement@unlock" shape=ellipse]
76 [label="14:CtFieldReferenceImpl@lock" shape=ellipse]
77 [label="14:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
78 [label="14:CtFieldReadImpl@lock" shape=ellipse]
79 [label="14:CtInvocationImpl@lock.unlock()" shape=ellipse]
80 [label="13:CtBlockImpl@\{
    lock.unlock();
\}" shape=ellipse]
81 [label="6:CtTryImpl@try \{
    Iterator iter = this.children.values().iterator();
    while (iter.hasNext()) \{
        CoverageData coverageContainer = ((CoverageData) (iter.next()));
        number += coverageContainer.getNumberOfValidLines();
        numberCovered += coverageContainer.getNumberOfCoveredLines();
    \} 
\} finally \{
    lock.unlock();
\}" shape=ellipse]
82 [label="16:CtVariableReadImpl@number" shape=ellipse]
83 [label="16:CtLocalVariableReferenceImpl@number" shape=ellipse]
84 [label="16:CtLiteralImpl@0" shape=ellipse]
85 [label="16:CtTypeReferenceImpl@int" shape=ellipse]
86 [label="16:CtBinaryOperatorImpl@number == 0" shape=ellipse]
87 [label="16:CtTypeReferenceImpl@boolean" shape=ellipse]
88 [label="17:CtLiteralImpl@1.0" shape=ellipse]
89 [label="17:CtTypeReferenceImpl@double" shape=ellipse]
90 [label="17:CtReturnImpl@return 1.0" shape=ellipse]
91 [label="16:CtBlockImpl@\{
    return 1.0;
\}" shape=ellipse]
92 [label="16:CtIfImpl@if (number == 0) \{
    return 1.0;
\}" shape=ellipse]
93 [label="19:CtVariableReadImpl@((double) (numberCovered))" shape=ellipse]
94 [label="19:CtTypeReferenceImpl@double" shape=ellipse]
95 [label="19:CtLocalVariableReferenceImpl@numberCovered" shape=ellipse]
96 [label="19:CtVariableReadImpl@number" shape=ellipse]
97 [label="19:CtLocalVariableReferenceImpl@number" shape=ellipse]
98 [label="19:CtBinaryOperatorImpl@((double) (numberCovered)) / number" shape=ellipse]
99 [label="19:CtTypeReferenceImpl@double" shape=ellipse]
100 [label="19:CtReturnImpl@return ((double) (numberCovered)) / number" shape=ellipse]
101 [label="2:CtBlockImpl@\{
    int number = 0;
    int numberCovered = 0;
    lock.lock();
    try \{
        Iterator iter = this.children.values().iterator();
        while (iter.hasNext()) \{
            CoverageData coverageContainer = ((CoverageData) (iter.next()));
            number += coverageContainer.getNumberOfValidLines();
            numberCovered += coverageContainer.getNumberOfCoveredLines();
        \} 
    \} finally \{
        lock.unlock();
    \}
    if (number == 0) \{
        return 1.0;
    \}
    return ((double) (numberCovered)) / number;
\}" shape=ellipse]
102 [label="2:CtMethodImpl@public double getLineCoverageRate() \{
    int number = 0;
    int numberCovered = 0;
    lock.lock();
    try \{
        Iterator iter = this.children.values().iterator();
        while (iter.hasNext()) \{
            CoverageData coverageContainer = ((CoverageData) (iter.next()));
            number += coverageContainer.getNumberOfValidLines();
            numberCovered += coverageContainer.getNumberOfCoveredLines();
        \} 
    \} finally \{
        lock.unlock();
    \}
    if (number == 0) \{
        return 1.0;
    \}
    return ((double) (numberCovered)) / number;
\}" shape=ellipse]
103 [label="7:Insert@INSERT" shape=ellipse]
104 [label="7:CtPackageReferenceImpl@" shape=ellipse]
105 [label="7:CtTypeReferenceImpl@CoverageData" shape=ellipse]
3 -> 4 [label="AST"];
6 -> 5 [label="AST"];
6 -> 2 [label="AST"];
6 -> 3 [label="AST"];
8 -> 9 [label="AST"];
11 -> 10 [label="AST"];
11 -> 7 [label="AST"];
11 -> 8 [label="AST"];
12 -> 13 [label="AST"];
15 -> 16 [label="AST"];
17 -> 15 [label="AST"];
18 -> 14 [label="AST"];
18 -> 17 [label="AST"];
18 -> 12 [label="AST"];
19 -> 20 [label="AST"];
19 -> 103 [label="Action"];
21 -> 22 [label="AST"];
26 -> 27 [label="AST"];
28 -> 29 [label="AST"];
28 -> 26 [label="AST"];
28 -> 32 [label="Data Dep"];
30 -> 25 [label="AST"];
30 -> 28 [label="AST"];
30 -> 24 [label="AST"];
31 -> 23 [label="AST"];
31 -> 30 [label="AST"];
31 -> 21 [label="AST"];
32 -> 38 [label="Define-Use"];
32 -> 46 [label="Define-Use"];
33 -> 32 [label="AST"];
33 -> 19 [label="AST"];
33 -> 31 [label="AST"];
34 -> 35 [label="AST"];
34 -> 36 [label="AST"];
38 -> 39 [label="AST"];
40 -> 37 [label="AST"];
40 -> 38 [label="AST"];
40 -> 34 [label="AST"];
40 -> 70 [label="Control Dep"];
40 -> 51 [label="Control Dep"];
40 -> 48 [label="Control Dep"];
40 -> 43 [label="Control Dep"];
40 -> 46 [label="Control Dep"];
40 -> 60 [label="Control Dep"];
40 -> 52 [label="Control Dep"];
40 -> 59 [label="Control Dep"];
40 -> 54 [label="Control Dep"];
40 -> 57 [label="Control Dep"];
40 -> 69 [label="Control Dep"];
40 -> 61 [label="Control Dep"];
40 -> 68 [label="Control Dep"];
40 -> 63 [label="Control Dep"];
40 -> 66 [label="Control Dep"];
41 -> 42 [label="AST"];
43 -> 44 [label="AST"];
46 -> 47 [label="AST"];
46 -> 50 [label="Data Dep"];
48 -> 45 [label="AST"];
48 -> 49 [label="AST"];
48 -> 46 [label="AST"];
48 -> 43 [label="AST"];
50 -> 57 [label="Define-Use"];
50 -> 66 [label="Define-Use"];
51 -> 50 [label="AST"];
51 -> 41 [label="AST"];
51 -> 48 [label="AST"];
52 -> 53 [label="AST"];
52 -> 82 [label="Define-Use"];
52 -> 96 [label="Define-Use"];
54 -> 55 [label="AST"];
57 -> 58 [label="AST"];
57 -> 52 [label="Data Dep"];
59 -> 56 [label="AST"];
59 -> 57 [label="AST"];
59 -> 54 [label="AST"];
60 -> 52 [label="AST"];
60 -> 59 [label="AST"];
61 -> 62 [label="AST"];
61 -> 93 [label="Define-Use"];
63 -> 64 [label="AST"];
66 -> 67 [label="AST"];
66 -> 61 [label="Data Dep"];
68 -> 65 [label="AST"];
68 -> 66 [label="AST"];
68 -> 63 [label="AST"];
69 -> 61 [label="AST"];
69 -> 68 [label="AST"];
70 -> 51 [label="AST"];
70 -> 60 [label="AST"];
70 -> 69 [label="AST"];
71 -> 40 [label="AST"];
71 -> 70 [label="AST"];
72 -> 33 [label="AST"];
72 -> 71 [label="AST"];
73 -> 74 [label="AST"];
76 -> 77 [label="AST"];
78 -> 76 [label="AST"];
79 -> 75 [label="AST"];
79 -> 78 [label="AST"];
79 -> 73 [label="AST"];
80 -> 79 [label="AST"];
81 -> 72 [label="AST"];
81 -> 80 [label="AST"];
82 -> 83 [label="AST"];
84 -> 85 [label="AST"];
86 -> 87 [label="AST"];
86 -> 82 [label="AST"];
86 -> 84 [label="AST"];
86 -> 91 [label="Control Dep"];
86 -> 90 [label="Control Dep"];
86 -> 88 [label="Control Dep"];
88 -> 89 [label="AST"];
90 -> 88 [label="AST"];
91 -> 90 [label="AST"];
92 -> 86 [label="AST"];
92 -> 91 [label="AST"];
93 -> 94 [label="AST"];
93 -> 95 [label="AST"];
96 -> 97 [label="AST"];
98 -> 99 [label="AST"];
98 -> 93 [label="AST"];
98 -> 96 [label="AST"];
100 -> 98 [label="AST"];
101 -> 6 [label="AST"];
101 -> 11 [label="AST"];
101 -> 18 [label="AST"];
101 -> 81 [label="AST"];
101 -> 92 [label="AST"];
101 -> 100 [label="AST"];
102 -> 1 [label="AST"];
102 -> 0 [label="AST"];
102 -> 101 [label="AST"];
103 -> 105 [label="Action"];
105 -> 104 [label="AST"];
}