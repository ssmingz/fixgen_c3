digraph "getNumberOfValidBranches#?" {
0 [label="2:CtTypeReferenceImpl@int" shape=ellipse]
1 [label="2:CtVirtualElement@getNumberOfValidBranches" shape=ellipse]
2 [label="3:CtTypeReferenceImpl@int" shape=ellipse]
3 [label="3:CtLiteralImpl@0" shape=ellipse]
4 [label="3:CtTypeReferenceImpl@int" shape=ellipse]
5 [label="3:CtVirtualElement@number" shape=ellipse]
6 [label="3:CtLocalVariableImpl@int number = 0" shape=ellipse]
7 [label="4:CtTypeReferenceImpl@Iterator" shape=ellipse]
8 [label="4:CtPackageReferenceImpl@" shape=ellipse]
9 [label="4:CtExecutableReferenceImpl@iterator()" shape=ellipse]
10 [label="4:CtTypeReferenceImpl@Iterator" shape=ellipse]
11 [label="4:CtVirtualElement@iterator" shape=ellipse]
12 [label="4:CtExecutableReferenceImpl@values()" shape=ellipse]
13 [label="4:CtTypeReferenceImpl@branches" shape=ellipse]
14 [label="4:CtVirtualElement@values" shape=ellipse]
15 [label="4:CtFieldReferenceImpl@branches" shape=ellipse]
16 [label="4:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
17 [label="4:CtFieldReadImpl@branches" shape=ellipse]
18 [label="4:CtInvocationImpl@branches.values()" shape=ellipse]
19 [label="4:CtInvocationImpl@branches.values().iterator()" shape=ellipse]
20 [label="4:CtVirtualElement@i" shape=ellipse]
21 [label="4:CtLocalVariableImpl@Iterator i = branches.values().iterator()" shape=ellipse]
22 [label="5:CtExecutableReferenceImpl@hasNext()" shape=ellipse]
23 [label="5:CtTypeReferenceImpl@Iterator" shape=ellipse]
24 [label="5:CtTypeReferenceImpl@boolean" shape=ellipse]
25 [label="5:CtVirtualElement@hasNext" shape=ellipse]
26 [label="5:CtVariableReadImpl@i" shape=ellipse]
27 [label="5:CtLocalVariableReferenceImpl@i" shape=ellipse]
28 [label="5:CtInvocationImpl@i.hasNext()" shape=ellipse]
29 [label="6:CtVariableWriteImpl@number" shape=ellipse]
30 [label="6:CtLocalVariableReferenceImpl@number" shape=ellipse]
31 [label="6:CtExecutableReferenceImpl@getNumberOfValidBranches()" shape=ellipse]
32 [label="6:CtVirtualElement@getNumberOfValidBranches" shape=ellipse]
33 [label="6:CtExecutableReferenceImpl@next()" shape=ellipse]
34 [label="6:CtTypeReferenceImpl@Iterator" shape=ellipse]
35 [label="6:CtVirtualElement@next" shape=ellipse]
36 [label="6:CtVariableReadImpl@i" shape=ellipse]
37 [label="6:CtLocalVariableReferenceImpl@i" shape=ellipse]
38 [label="6:CtInvocationImpl@((LineData) (i.next()))" shape=ellipse]
39 [label="6:CtTypeReferenceImpl@LineData" shape=ellipse]
40 [label="6:CtInvocationImpl@((LineData) (i.next())).getNumberOfValidBranches()" shape=ellipse]
41 [label="6:CtOperatorAssignmentImpl@number += ((LineData) (i.next())).getNumberOfValidBranches()" shape=ellipse]
42 [label="4:CtForImpl@for (Iterator i = branches.values().iterator(); i.hasNext(); number += ((LineData) (i.next())).getNumberOfValidBranches());" shape=ellipse]
43 [label="8:CtVariableReadImpl@number" shape=ellipse]
44 [label="8:CtLocalVariableReferenceImpl@number" shape=ellipse]
45 [label="8:CtReturnImpl@return number" shape=ellipse]
46 [label="2:CtBlockImpl@\{
    int number = 0;
    for (Iterator i = branches.values().iterator(); i.hasNext(); number += ((LineData) (i.next())).getNumberOfValidBranches());
    return number;
\}" shape=ellipse]
47 [label="2:CtMethodImpl@public int getNumberOfValidBranches() \{
    int number = 0;
    for (Iterator i = branches.values().iterator(); i.hasNext(); number += ((LineData) (i.next())).getNumberOfValidBranches());
    return number;
\}" shape=ellipse]
48 [label="4:Insert@INSERT" shape=ellipse]
49 [label="4:CtPackageReferenceImpl@" shape=ellipse]
50 [label="4:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
51 [label="4:CtFieldReferenceImpl@lock" shape=ellipse]
52 [label="4:CtFieldReadImpl@lock" shape=ellipse]
53 [label="4:CtPackageReferenceImpl@" shape=ellipse]
54 [label="4:CtTypeReferenceImpl@lock" shape=ellipse]
55 [label="4:CtExecutableReferenceImpl@lock()" shape=ellipse]
56 [label="4:CtInvocationImpl@lock.lock()" shape=ellipse]
57 [label="4:CtVirtualElement@lock" shape=ellipse]
58 [label="5:Insert@INSERT" shape=ellipse]
59 [label="6:CtPackageReferenceImpl@" shape=ellipse]
60 [label="6:CtTypeReferenceImpl@Iterator" shape=ellipse]
61 [label="6:CtPackageReferenceImpl@" shape=ellipse]
62 [label="6:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
63 [label="6:CtFieldReferenceImpl@branches" shape=ellipse]
64 [label="6:CtFieldReadImpl@branches" shape=ellipse]
65 [label="6:CtPackageReferenceImpl@" shape=ellipse]
66 [label="6:CtTypeReferenceImpl@branches" shape=ellipse]
67 [label="6:CtExecutableReferenceImpl@values()" shape=ellipse]
68 [label="6:CtInvocationImpl@branches.values()" shape=ellipse]
69 [label="6:CtVirtualElement@values" shape=ellipse]
70 [label="6:CtPackageReferenceImpl@" shape=ellipse]
71 [label="6:CtTypeReferenceImpl@Iterator" shape=ellipse]
72 [label="6:CtExecutableReferenceImpl@iterator()" shape=ellipse]
73 [label="6:CtInvocationImpl@branches.values().iterator()" shape=ellipse]
74 [label="6:CtVirtualElement@iterator" shape=ellipse]
75 [label="6:CtLocalVariableImpl@Iterator i = branches.values().iterator()" shape=ellipse]
76 [label="6:CtVirtualElement@i" shape=ellipse]
77 [label="7:CtPackageReferenceImpl@" shape=ellipse]
78 [label="7:CtTypeReferenceImpl@Iterator" shape=ellipse]
79 [label="7:CtLocalVariableReferenceImpl@i" shape=ellipse]
80 [label="7:CtVariableReadImpl@i" shape=ellipse]
81 [label="7:CtPackageReferenceImpl@" shape=ellipse]
82 [label="7:CtTypeReferenceImpl@Iterator" shape=ellipse]
83 [label="7:CtTypeReferenceImpl@boolean" shape=ellipse]
84 [label="7:CtExecutableReferenceImpl@hasNext()" shape=ellipse]
85 [label="7:CtInvocationImpl@i.hasNext()" shape=ellipse]
86 [label="7:CtVirtualElement@hasNext" shape=ellipse]
87 [label="8:CtTypeReferenceImpl@int" shape=ellipse]
88 [label="8:CtLocalVariableReferenceImpl@number" shape=ellipse]
89 [label="8:CtVariableWriteImpl@number" shape=ellipse]
90 [label="8:CtPackageReferenceImpl@" shape=ellipse]
91 [label="8:CtTypeReferenceImpl@LineData" shape=ellipse]
92 [label="8:CtPackageReferenceImpl@" shape=ellipse]
93 [label="8:CtTypeReferenceImpl@Iterator" shape=ellipse]
94 [label="8:CtLocalVariableReferenceImpl@i" shape=ellipse]
95 [label="8:CtVariableReadImpl@i" shape=ellipse]
96 [label="8:CtPackageReferenceImpl@" shape=ellipse]
97 [label="8:CtTypeReferenceImpl@Iterator" shape=ellipse]
98 [label="8:CtExecutableReferenceImpl@next()" shape=ellipse]
99 [label="8:CtInvocationImpl@((LineData) (i.next()))" shape=ellipse]
100 [label="8:CtVirtualElement@next" shape=ellipse]
101 [label="8:CtExecutableReferenceImpl@getNumberOfValidBranches()" shape=ellipse]
102 [label="8:CtInvocationImpl@((LineData) (i.next())).getNumberOfValidBranches()" shape=ellipse]
103 [label="8:CtVirtualElement@getNumberOfValidBranches" shape=ellipse]
104 [label="8:CtOperatorAssignmentImpl@number += ((LineData) (i.next())).getNumberOfValidBranches()" shape=ellipse]
105 [label="6:CtForImpl@for (Iterator i = branches.values().iterator(); i.hasNext(); number += ((LineData) (i.next())).getNumberOfValidBranches());" shape=ellipse]
106 [label="10:CtTypeReferenceImpl@int" shape=ellipse]
107 [label="10:CtLocalVariableReferenceImpl@number" shape=ellipse]
108 [label="10:CtVariableReadImpl@number" shape=ellipse]
109 [label="10:CtReturnImpl@return number" shape=ellipse]
110 [label="5:CtBlockImpl@\{
    for (Iterator i = branches.values().iterator(); i.hasNext(); number += ((LineData) (i.next())).getNumberOfValidBranches());
    return number;
\}" shape=ellipse]
111 [label="12:CtPackageReferenceImpl@" shape=ellipse]
112 [label="12:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
113 [label="12:CtFieldReferenceImpl@lock" shape=ellipse]
114 [label="12:CtFieldReadImpl@lock" shape=ellipse]
115 [label="12:CtPackageReferenceImpl@" shape=ellipse]
116 [label="12:CtTypeReferenceImpl@lock" shape=ellipse]
117 [label="12:CtExecutableReferenceImpl@unlock()" shape=ellipse]
118 [label="12:CtInvocationImpl@lock.unlock()" shape=ellipse]
119 [label="12:CtVirtualElement@unlock" shape=ellipse]
120 [label="11:CtBlockImpl@\{
    lock.unlock();
\}" shape=ellipse]
121 [label="5:CtTryImpl@try \{


\} finally \{
    lock.unlock();
\}" shape=ellipse]
122 [label="4:Move@MOVE" shape=ellipse]
123 [label="8:Move@MOVE" shape=ellipse]
3 -> 4 [label="AST"];
6 -> 5 [label="AST"];
6 -> 2 [label="AST"];
6 -> 3 [label="AST"];
7 -> 8 [label="AST"];
9 -> 10 [label="AST"];
12 -> 13 [label="AST"];
15 -> 16 [label="AST"];
17 -> 15 [label="AST"];
17 -> 20 [label="Data Dep"];
18 -> 14 [label="AST"];
18 -> 17 [label="AST"];
18 -> 12 [label="AST"];
19 -> 11 [label="AST"];
19 -> 18 [label="AST"];
19 -> 9 [label="AST"];
20 -> 26 [label="Define-Use"];
20 -> 36 [label="Define-Use"];
21 -> 20 [label="AST"];
21 -> 7 [label="AST"];
21 -> 19 [label="AST"];
22 -> 23 [label="AST"];
22 -> 24 [label="AST"];
26 -> 27 [label="AST"];
28 -> 25 [label="AST"];
28 -> 26 [label="AST"];
28 -> 22 [label="AST"];
29 -> 30 [label="AST"];
29 -> 43 [label="Define-Use"];
29 -> 108 [label="Define-Use"];
29 -> 108 [label="Data Dep"];
29 -> 108 [label="Control Dep"];
33 -> 34 [label="AST"];
36 -> 37 [label="AST"];
36 -> 29 [label="Data Dep"];
38 -> 35 [label="AST"];
38 -> 39 [label="AST"];
38 -> 36 [label="AST"];
38 -> 33 [label="AST"];
40 -> 32 [label="AST"];
40 -> 38 [label="AST"];
40 -> 31 [label="AST"];
41 -> 29 [label="AST"];
41 -> 40 [label="AST"];
42 -> 21 [label="AST"];
42 -> 28 [label="AST"];
42 -> 41 [label="AST"];
42 -> 122 [label="Action"];
43 -> 44 [label="AST"];
45 -> 43 [label="AST"];
45 -> 123 [label="Action"];
46 -> 6 [label="AST"];
46 -> 42 [label="AST"];
46 -> 45 [label="AST"];
46 -> 48 [label="Action"];
46 -> 58 [label="Action"];
47 -> 1 [label="AST"];
47 -> 0 [label="AST"];
47 -> 46 [label="AST"];
48 -> 56 [label="Action"];
50 -> 49 [label="AST"];
51 -> 50 [label="AST"];
52 -> 51 [label="AST"];
54 -> 53 [label="AST"];
55 -> 54 [label="AST"];
56 -> 57 [label="AST"];
56 -> 52 [label="AST"];
56 -> 55 [label="AST"];
58 -> 121 [label="Action"];
60 -> 59 [label="AST"];
62 -> 61 [label="AST"];
63 -> 62 [label="AST"];
64 -> 63 [label="AST"];
64 -> 76 [label="Data Dep"];
66 -> 65 [label="AST"];
67 -> 66 [label="AST"];
68 -> 69 [label="AST"];
68 -> 64 [label="AST"];
68 -> 67 [label="AST"];
71 -> 70 [label="AST"];
72 -> 71 [label="AST"];
73 -> 74 [label="AST"];
73 -> 68 [label="AST"];
73 -> 72 [label="AST"];
75 -> 76 [label="AST"];
75 -> 60 [label="AST"];
75 -> 73 [label="AST"];
76 -> 80 [label="Define-Use"];
76 -> 95 [label="Define-Use"];
76 -> 26 [label="Define-Use"];
76 -> 26 [label="Data Dep"];
76 -> 26 [label="Control Dep"];
76 -> 36 [label="Define-Use"];
76 -> 36 [label="Data Dep"];
76 -> 36 [label="Control Dep"];
78 -> 77 [label="AST"];
79 -> 78 [label="AST"];
80 -> 79 [label="AST"];
82 -> 81 [label="AST"];
84 -> 82 [label="AST"];
84 -> 83 [label="AST"];
85 -> 86 [label="AST"];
85 -> 80 [label="AST"];
85 -> 84 [label="AST"];
88 -> 87 [label="AST"];
89 -> 88 [label="AST"];
89 -> 108 [label="Define-Use"];
89 -> 43 [label="Define-Use"];
89 -> 43 [label="Data Dep"];
89 -> 43 [label="Control Dep"];
91 -> 90 [label="AST"];
93 -> 92 [label="AST"];
94 -> 93 [label="AST"];
95 -> 94 [label="AST"];
95 -> 89 [label="Data Dep"];
95 -> 29 [label="Data Dep"];
95 -> 29 [label="Control Dep"];
97 -> 96 [label="AST"];
98 -> 97 [label="AST"];
99 -> 100 [label="AST"];
99 -> 91 [label="AST"];
99 -> 95 [label="AST"];
99 -> 98 [label="AST"];
102 -> 103 [label="AST"];
102 -> 99 [label="AST"];
102 -> 101 [label="AST"];
104 -> 89 [label="AST"];
104 -> 102 [label="AST"];
105 -> 75 [label="AST"];
105 -> 85 [label="AST"];
105 -> 104 [label="AST"];
107 -> 106 [label="AST"];
108 -> 107 [label="AST"];
109 -> 108 [label="AST"];
110 -> 105 [label="AST"];
110 -> 109 [label="AST"];
112 -> 111 [label="AST"];
113 -> 112 [label="AST"];
114 -> 113 [label="AST"];
116 -> 115 [label="AST"];
117 -> 116 [label="AST"];
118 -> 119 [label="AST"];
118 -> 114 [label="AST"];
118 -> 117 [label="AST"];
120 -> 118 [label="AST"];
121 -> 110 [label="AST"];
121 -> 120 [label="AST"];
122 -> 121 [label="Action"];
123 -> 121 [label="Action"];
}