digraph "addInstrumentationToSingleClass#?,File" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@addInstrumentationToSingleClass" shape=ellipse]
2 [label="2:CtParameterImpl@File file" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@File" shape=ellipse]
4 [label="3:CtExecutableReferenceImpl@debug()" shape=ellipse]
5 [label="3:CtTypeReferenceImpl@logger" shape=ellipse]
6 [label="3:CtVirtualElement@debug" shape=ellipse]
7 [label="3:CtFieldReferenceImpl@logger" shape=ellipse]
8 [label="3:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
9 [label="3:CtFieldReadImpl@logger" shape=ellipse]
10 [label="3:CtLiteralImpl@\"Instrumenting class \"" shape=ellipse]
11 [label="3:CtTypeReferenceImpl@String" shape=ellipse]
12 [label="3:CtExecutableReferenceImpl@getAbsolutePath()" shape=ellipse]
13 [label="3:CtTypeReferenceImpl@File" shape=ellipse]
14 [label="3:CtVirtualElement@getAbsolutePath" shape=ellipse]
15 [label="3:CtVariableReadImpl@file" shape=ellipse]
16 [label="3:CtParameterReferenceImpl@file" shape=ellipse]
17 [label="3:CtInvocationImpl@file.getAbsolutePath()" shape=ellipse]
18 [label="3:CtBinaryOperatorImpl@\"Instrumenting class \" + file.getAbsolutePath()" shape=ellipse]
19 [label="3:CtInvocationImpl@logger.debug(\"Instrumenting class \" + file.getAbsolutePath())" shape=ellipse]
20 [label="4:CtTypeReferenceImpl@InputStream" shape=ellipse]
21 [label="4:CtPackageReferenceImpl@" shape=ellipse]
22 [label="4:CtLiteralImpl@null" shape=ellipse]
23 [label="4:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
24 [label="4:CtVirtualElement@inputStream" shape=ellipse]
25 [label="4:CtLocalVariableImpl@InputStream inputStream = null" shape=ellipse]
26 [label="5:CtTypeReferenceImpl@ClassWriter" shape=ellipse]
27 [label="5:CtPackageReferenceImpl@" shape=ellipse]
28 [label="5:CtVirtualElement@cw" shape=ellipse]
29 [label="5:CtLocalVariableImpl@ClassWriter cw" shape=ellipse]
30 [label="6:CtTypeReferenceImpl@ClassInstrumenter" shape=ellipse]
31 [label="6:CtPackageReferenceImpl@" shape=ellipse]
32 [label="6:CtVirtualElement@cv" shape=ellipse]
33 [label="6:CtLocalVariableImpl@ClassInstrumenter cv" shape=ellipse]
34 [label="8:CtVariableWriteImpl@inputStream" shape=ellipse]
35 [label="8:CtLocalVariableReferenceImpl@inputStream" shape=ellipse]
36 [label="8:CtExecutableReferenceImpl@FileInputStream()" shape=ellipse]
37 [label="8:CtTypeReferenceImpl@FileInputStream" shape=ellipse]
38 [label="8:CtTypeReferenceImpl@FileInputStream" shape=ellipse]
39 [label="8:CtVariableReadImpl@file" shape=ellipse]
40 [label="8:CtParameterReferenceImpl@file" shape=ellipse]
41 [label="8:CtConstructorCallImpl@new FileInputStream(file)" shape=ellipse]
42 [label="8:CtAssignmentImpl@inputStream = new FileInputStream(file)" shape=ellipse]
43 [label="9:CtTypeReferenceImpl@ClassReader" shape=ellipse]
44 [label="9:CtPackageReferenceImpl@" shape=ellipse]
45 [label="9:CtExecutableReferenceImpl@ClassReader()" shape=ellipse]
46 [label="9:CtTypeReferenceImpl@ClassReader" shape=ellipse]
47 [label="9:CtTypeReferenceImpl@ClassReader" shape=ellipse]
48 [label="9:CtVariableReadImpl@inputStream" shape=ellipse]
49 [label="9:CtLocalVariableReferenceImpl@inputStream" shape=ellipse]
50 [label="9:CtConstructorCallImpl@new ClassReader(inputStream)" shape=ellipse]
51 [label="9:CtVirtualElement@cr" shape=ellipse]
52 [label="9:CtLocalVariableImpl@ClassReader cr = new ClassReader(inputStream)" shape=ellipse]
53 [label="10:CtVariableWriteImpl@cw" shape=ellipse]
54 [label="10:CtLocalVariableReferenceImpl@cw" shape=ellipse]
55 [label="10:CtExecutableReferenceImpl@ClassWriter(boolean)" shape=ellipse]
56 [label="10:CtTypeReferenceImpl@ClassWriter" shape=ellipse]
57 [label="10:CtTypeReferenceImpl@ClassWriter" shape=ellipse]
58 [label="10:CtTypeReferenceImpl@boolean" shape=ellipse]
59 [label="10:CtLiteralImpl@true" shape=ellipse]
60 [label="10:CtTypeReferenceImpl@boolean" shape=ellipse]
61 [label="10:CtConstructorCallImpl@new ClassWriter(true)" shape=ellipse]
62 [label="10:CtAssignmentImpl@cw = new ClassWriter(true)" shape=ellipse]
63 [label="11:CtVariableWriteImpl@cv" shape=ellipse]
64 [label="11:CtLocalVariableReferenceImpl@cv" shape=ellipse]
65 [label="11:CtExecutableReferenceImpl@ClassInstrumenter()" shape=ellipse]
66 [label="11:CtTypeReferenceImpl@ClassInstrumenter" shape=ellipse]
67 [label="11:CtTypeReferenceImpl@ClassInstrumenter" shape=ellipse]
68 [label="11:CtFieldReferenceImpl@projectData" shape=ellipse]
69 [label="11:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
70 [label="11:CtFieldReadImpl@projectData" shape=ellipse]
71 [label="11:CtVariableReadImpl@cw" shape=ellipse]
72 [label="11:CtLocalVariableReferenceImpl@cw" shape=ellipse]
73 [label="11:CtFieldReferenceImpl@ignoreRegexes" shape=ellipse]
74 [label="11:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
75 [label="11:CtFieldReadImpl@ignoreRegexes" shape=ellipse]
76 [label="11:CtFieldReferenceImpl@ignoreBranchesRegexes" shape=ellipse]
77 [label="11:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
78 [label="11:CtFieldReadImpl@ignoreBranchesRegexes" shape=ellipse]
79 [label="11:CtConstructorCallImpl@new ClassInstrumenter(projectData, cw, ignoreRegexes, ignoreBranchesRegexes)" shape=ellipse]
80 [label="11:CtAssignmentImpl@cv = new ClassInstrumenter(projectData, cw, ignoreRegexes, ignoreBranchesRegexes)" shape=ellipse]
81 [label="12:CtExecutableReferenceImpl@accept(ClassInstrumenter,boolean)" shape=ellipse]
82 [label="12:CtTypeReferenceImpl@ClassReader" shape=ellipse]
83 [label="12:CtTypeReferenceImpl@ClassInstrumenter" shape=ellipse]
84 [label="12:CtTypeReferenceImpl@boolean" shape=ellipse]
85 [label="12:CtVirtualElement@accept" shape=ellipse]
86 [label="12:CtVariableReadImpl@cr" shape=ellipse]
87 [label="12:CtLocalVariableReferenceImpl@cr" shape=ellipse]
88 [label="12:CtVariableReadImpl@cv" shape=ellipse]
89 [label="12:CtLocalVariableReferenceImpl@cv" shape=ellipse]
90 [label="12:CtLiteralImpl@false" shape=ellipse]
91 [label="12:CtTypeReferenceImpl@boolean" shape=ellipse]
92 [label="12:CtInvocationImpl@cr.accept(cv, false)" shape=ellipse]
93 [label="7:CtBlockImpl@\{
    inputStream = new FileInputStream(file);
    ClassReader cr = new ClassReader(inputStream);
    cw = new ClassWriter(true);
    cv = new ClassInstrumenter(projectData, cw, ignoreRegexes, ignoreBranchesRegexes);
    cr.accept(cv, false);
\}" shape=ellipse]
94 [label="13:CtVirtualElement@t" shape=ellipse]
95 [label="13:CtTypeReferenceImpl@Throwable" shape=ellipse]
96 [label="13:CtPackageReferenceImpl@java.lang" shape=ellipse]
97 [label="13:CtCatchVariableImpl@Throwable t" shape=ellipse]
98 [label="14:CtExecutableReferenceImpl@warn(java.lang.Throwable)" shape=ellipse]
99 [label="14:CtTypeReferenceImpl@logger" shape=ellipse]
100 [label="14:CtTypeReferenceImpl@Throwable" shape=ellipse]
101 [label="14:CtVirtualElement@warn" shape=ellipse]
102 [label="14:CtFieldReferenceImpl@logger" shape=ellipse]
103 [label="14:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
104 [label="14:CtFieldReadImpl@logger" shape=ellipse]
105 [label="14:CtLiteralImpl@\"Unable to instrument file \"" shape=ellipse]
106 [label="14:CtTypeReferenceImpl@String" shape=ellipse]
107 [label="14:CtExecutableReferenceImpl@getAbsolutePath()" shape=ellipse]
108 [label="14:CtTypeReferenceImpl@File" shape=ellipse]
109 [label="14:CtVirtualElement@getAbsolutePath" shape=ellipse]
110 [label="14:CtVariableReadImpl@file" shape=ellipse]
111 [label="14:CtParameterReferenceImpl@file" shape=ellipse]
112 [label="14:CtInvocationImpl@file.getAbsolutePath()" shape=ellipse]
113 [label="14:CtBinaryOperatorImpl@\"Unable to instrument file \" + file.getAbsolutePath()" shape=ellipse]
114 [label="14:CtVariableReadImpl@t" shape=ellipse]
115 [label="14:CtCatchVariableReferenceImpl@t" shape=ellipse]
116 [label="14:CtInvocationImpl@logger.warn(\"Unable to instrument file \" + file.getAbsolutePath(), t)" shape=ellipse]
117 [label="15:CtReturnImpl@return" shape=ellipse]
118 [label="13:CtBlockImpl@\{
    logger.warn(\"Unable to instrument file \" + file.getAbsolutePath(), t);
    return;
\}" shape=ellipse]
119 [label="13:CtCatchImpl@ catch (Throwable t) \{
    logger.warn(\"Unable to instrument file \" + file.getAbsolutePath(), t);
    return;
\}" shape=ellipse]
120 [label="17:CtVariableWriteImpl@inputStream" shape=ellipse]
121 [label="17:CtLocalVariableReferenceImpl@inputStream" shape=ellipse]
122 [label="17:CtExecutableReferenceImpl@closeInputStream(InputStream)" shape=ellipse]
123 [label="17:CtTypeReferenceImpl@IOUtil" shape=ellipse]
124 [label="17:CtTypeReferenceImpl@InputStream" shape=ellipse]
125 [label="17:CtVirtualElement@closeInputStream" shape=ellipse]
126 [label="17:CtTypeAccessImpl@IOUtil" shape=ellipse]
127 [label="17:CtTypeReferenceImpl@IOUtil" shape=ellipse]
128 [label="17:CtVariableReadImpl@inputStream" shape=ellipse]
129 [label="17:CtLocalVariableReferenceImpl@inputStream" shape=ellipse]
130 [label="17:CtInvocationImpl@IOUtil.closeInputStream(inputStream)" shape=ellipse]
131 [label="17:CtAssignmentImpl@inputStream = IOUtil.closeInputStream(inputStream)" shape=ellipse]
132 [label="16:CtBlockImpl@\{
    inputStream = IOUtil.closeInputStream(inputStream);
\}" shape=ellipse]
133 [label="7:CtTryImpl@try \{
    inputStream = new FileInputStream(file);
    ClassReader cr = new ClassReader(inputStream);
    cw = new ClassWriter(true);
    cv = new ClassInstrumenter(projectData, cw, ignoreRegexes, ignoreBranchesRegexes);
    cr.accept(cv, false);
\} catch (Throwable t) \{
    logger.warn(\"Unable to instrument file \" + file.getAbsolutePath(), t);
    return;
\} finally \{
    inputStream = IOUtil.closeInputStream(inputStream);
\}" shape=ellipse]
134 [label="19:CtTypeReferenceImpl@OutputStream" shape=ellipse]
135 [label="19:CtPackageReferenceImpl@" shape=ellipse]
136 [label="19:CtLiteralImpl@null" shape=ellipse]
137 [label="19:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
138 [label="19:CtVirtualElement@outputStream" shape=ellipse]
139 [label="19:CtLocalVariableImpl@OutputStream outputStream = null" shape=ellipse]
140 [label="21:CtExecutableReferenceImpl@isInstrumented()" shape=ellipse]
141 [label="21:CtTypeReferenceImpl@ClassInstrumenter" shape=ellipse]
142 [label="21:CtTypeReferenceImpl@boolean" shape=ellipse]
143 [label="21:CtVirtualElement@isInstrumented" shape=ellipse]
144 [label="21:CtVariableReadImpl@cv" shape=ellipse]
145 [label="21:CtLocalVariableReferenceImpl@cv" shape=ellipse]
146 [label="21:CtInvocationImpl@cv.isInstrumented()" shape=ellipse]
147 [label="22:CtTypeReferenceImpl@File" shape=ellipse]
148 [label="22:CtPackageReferenceImpl@" shape=ellipse]
149 [label="22:CtVirtualElement@outputFile" shape=ellipse]
150 [label="22:CtLocalVariableImpl@File outputFile" shape=ellipse]
151 [label="23:CtFieldReferenceImpl@destinationDirectory" shape=ellipse]
152 [label="23:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
153 [label="23:CtFieldReadImpl@destinationDirectory" shape=ellipse]
154 [label="23:CtLiteralImpl@null" shape=ellipse]
155 [label="23:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
156 [label="23:CtBinaryOperatorImpl@destinationDirectory == null" shape=ellipse]
157 [label="24:CtVariableWriteImpl@outputFile" shape=ellipse]
158 [label="24:CtLocalVariableReferenceImpl@outputFile" shape=ellipse]
159 [label="24:CtVariableReadImpl@file" shape=ellipse]
160 [label="24:CtParameterReferenceImpl@file" shape=ellipse]
161 [label="24:CtAssignmentImpl@outputFile = file" shape=ellipse]
162 [label="23:CtBlockImpl@\{
    outputFile = file;
\}" shape=ellipse]
163 [label="26:CtVariableWriteImpl@outputFile" shape=ellipse]
164 [label="26:CtLocalVariableReferenceImpl@outputFile" shape=ellipse]
165 [label="27:CtExecutableReferenceImpl@File()" shape=ellipse]
166 [label="27:CtTypeReferenceImpl@File" shape=ellipse]
167 [label="27:CtTypeReferenceImpl@File" shape=ellipse]
168 [label="28:CtFieldReferenceImpl@destinationDirectory" shape=ellipse]
169 [label="28:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
170 [label="28:CtFieldReadImpl@destinationDirectory" shape=ellipse]
171 [label="29:CtExecutableReferenceImpl@replace(char)" shape=ellipse]
172 [label="29:CtTypeReferenceImpl@char" shape=ellipse]
173 [label="29:CtVirtualElement@replace" shape=ellipse]
174 [label="29:CtExecutableReferenceImpl@getClassName()" shape=ellipse]
175 [label="29:CtTypeReferenceImpl@ClassInstrumenter" shape=ellipse]
176 [label="29:CtVirtualElement@getClassName" shape=ellipse]
177 [label="29:CtVariableReadImpl@cv" shape=ellipse]
178 [label="29:CtLocalVariableReferenceImpl@cv" shape=ellipse]
179 [label="29:CtInvocationImpl@cv.getClassName()" shape=ellipse]
180 [label="29:CtLiteralImpl@'.'" shape=ellipse]
181 [label="29:CtTypeReferenceImpl@char" shape=ellipse]
182 [label="29:CtTypeAccessImpl@separatorChar" shape=ellipse]
183 [label="29:CtTypeReferenceImpl@separatorChar" shape=ellipse]
184 [label="29:CtInvocationImpl@cv.getClassName().replace('.', separatorChar)" shape=ellipse]
185 [label="29:CtLiteralImpl@\".class\"" shape=ellipse]
186 [label="29:CtTypeReferenceImpl@String" shape=ellipse]
187 [label="29:CtBinaryOperatorImpl@cv.getClassName().replace('.', separatorChar) + \".class\"" shape=ellipse]
188 [label="27:CtConstructorCallImpl@new File(destinationDirectory, cv.getClassName().replace('.', separatorChar) + \".class\")" shape=ellipse]
189 [label="26:CtAssignmentImpl@outputFile = new File(destinationDirectory, cv.getClassName().replace('.', separatorChar) + \".class\")" shape=ellipse]
190 [label="25:CtBlockImpl@\{
    outputFile = new File(destinationDirectory, cv.getClassName().replace('.', separatorChar) + \".class\");
\}" shape=ellipse]
191 [label="23:CtIfImpl@if (destinationDirectory == null) \{
    outputFile = file;
\} else \{
    outputFile = new File(destinationDirectory, cv.getClassName().replace('.', separatorChar) + \".class\");
\}" shape=ellipse]
192 [label="31:CtTypeReferenceImpl@File" shape=ellipse]
193 [label="31:CtPackageReferenceImpl@" shape=ellipse]
194 [label="31:CtExecutableReferenceImpl@getParentFile()" shape=ellipse]
195 [label="31:CtTypeReferenceImpl@File" shape=ellipse]
196 [label="31:CtTypeReferenceImpl@File" shape=ellipse]
197 [label="31:CtVirtualElement@getParentFile" shape=ellipse]
198 [label="31:CtVariableReadImpl@outputFile" shape=ellipse]
199 [label="31:CtLocalVariableReferenceImpl@outputFile" shape=ellipse]
200 [label="31:CtInvocationImpl@outputFile.getParentFile()" shape=ellipse]
201 [label="31:CtVirtualElement@parentFile" shape=ellipse]
202 [label="31:CtLocalVariableImpl@File parentFile = outputFile.getParentFile()" shape=ellipse]
203 [label="32:CtVariableReadImpl@parentFile" shape=ellipse]
204 [label="32:CtLocalVariableReferenceImpl@parentFile" shape=ellipse]
205 [label="32:CtLiteralImpl@null" shape=ellipse]
206 [label="32:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
207 [label="32:CtBinaryOperatorImpl@parentFile != null" shape=ellipse]
208 [label="33:CtExecutableReferenceImpl@mkdirs()" shape=ellipse]
209 [label="33:CtTypeReferenceImpl@File" shape=ellipse]
210 [label="33:CtVirtualElement@mkdirs" shape=ellipse]
211 [label="33:CtVariableReadImpl@parentFile" shape=ellipse]
212 [label="33:CtLocalVariableReferenceImpl@parentFile" shape=ellipse]
213 [label="33:CtInvocationImpl@parentFile.mkdirs()" shape=ellipse]
214 [label="32:CtBlockImpl@\{
    parentFile.mkdirs();
\}" shape=ellipse]
215 [label="32:CtIfImpl@if (parentFile != null) \{
    parentFile.mkdirs();
\}" shape=ellipse]
216 [label="35:CtVirtualElement@byte[]" shape=ellipse]
217 [label="35:CtArrayTypeReferenceImpl@byte[]" shape=ellipse]
218 [label="35:CtTypeReferenceImpl@byte" shape=ellipse]
219 [label="35:CtExecutableReferenceImpl@toByteArray()" shape=ellipse]
220 [label="35:CtTypeReferenceImpl@ClassWriter" shape=ellipse]
221 [label="35:CtArrayTypeReferenceImpl@byte[]" shape=ellipse]
222 [label="35:CtVirtualElement@toByteArray" shape=ellipse]
223 [label="35:CtVariableReadImpl@cw" shape=ellipse]
224 [label="35:CtLocalVariableReferenceImpl@cw" shape=ellipse]
225 [label="35:CtInvocationImpl@cw.toByteArray()" shape=ellipse]
226 [label="35:CtVirtualElement@instrumentedClass" shape=ellipse]
227 [label="35:CtLocalVariableImpl@byte[] instrumentedClass = cw.toByteArray()" shape=ellipse]
228 [label="36:CtVariableWriteImpl@outputStream" shape=ellipse]
229 [label="36:CtLocalVariableReferenceImpl@outputStream" shape=ellipse]
230 [label="36:CtExecutableReferenceImpl@FileOutputStream()" shape=ellipse]
231 [label="36:CtTypeReferenceImpl@FileOutputStream" shape=ellipse]
232 [label="36:CtTypeReferenceImpl@FileOutputStream" shape=ellipse]
233 [label="36:CtVariableReadImpl@outputFile" shape=ellipse]
234 [label="36:CtLocalVariableReferenceImpl@outputFile" shape=ellipse]
235 [label="36:CtConstructorCallImpl@new FileOutputStream(outputFile)" shape=ellipse]
236 [label="36:CtAssignmentImpl@outputStream = new FileOutputStream(outputFile)" shape=ellipse]
237 [label="37:CtExecutableReferenceImpl@write(byte[])" shape=ellipse]
238 [label="37:CtTypeReferenceImpl@OutputStream" shape=ellipse]
239 [label="37:CtArrayTypeReferenceImpl@byte[]" shape=ellipse]
240 [label="37:CtVirtualElement@write" shape=ellipse]
241 [label="37:CtVariableReadImpl@outputStream" shape=ellipse]
242 [label="37:CtLocalVariableReferenceImpl@outputStream" shape=ellipse]
243 [label="37:CtVariableReadImpl@instrumentedClass" shape=ellipse]
244 [label="37:CtLocalVariableReferenceImpl@instrumentedClass" shape=ellipse]
245 [label="37:CtInvocationImpl@outputStream.write(instrumentedClass)" shape=ellipse]
246 [label="21:CtBlockImpl@\{
    File outputFile;
    if (destinationDirectory == null) \{
        outputFile = file;
    \} else \{
        outputFile = new File(destinationDirectory, cv.getClassName().replace('.', separatorChar) + \".class\");
    \}
    File parentFile = outputFile.getParentFile();
    if (parentFile != null) \{
        parentFile.mkdirs();
    \}
    byte[] instrumentedClass = cw.toByteArray();
    outputStream = new FileOutputStream(outputFile);
    outputStream.write(instrumentedClass);
\}" shape=ellipse]
247 [label="21:CtIfImpl@if (cv.isInstrumented()) \{
    File outputFile;
    if (destinationDirectory == null) \{
        outputFile = file;
    \} else \{
        outputFile = new File(destinationDirectory, cv.getClassName().replace('.', separatorChar) + \".class\");
    \}
    File parentFile = outputFile.getParentFile();
    if (parentFile != null) \{
        parentFile.mkdirs();
    \}
    byte[] instrumentedClass = cw.toByteArray();
    outputStream = new FileOutputStream(outputFile);
    outputStream.write(instrumentedClass);
\}" shape=ellipse]
248 [label="20:CtBlockImpl@\{
    if (cv.isInstrumented()) \{
        File outputFile;
        if (destinationDirectory == null) \{
            outputFile = file;
        \} else \{
            outputFile = new File(destinationDirectory, cv.getClassName().replace('.', separatorChar) + \".class\");
        \}
        File parentFile = outputFile.getParentFile();
        if (parentFile != null) \{
            parentFile.mkdirs();
        \}
        byte[] instrumentedClass = cw.toByteArray();
        outputStream = new FileOutputStream(outputFile);
        outputStream.write(instrumentedClass);
    \}
\}" shape=ellipse]
249 [label="39:CtVirtualElement@t" shape=ellipse]
250 [label="39:CtTypeReferenceImpl@Throwable" shape=ellipse]
251 [label="39:CtPackageReferenceImpl@java.lang" shape=ellipse]
252 [label="39:CtCatchVariableImpl@Throwable t" shape=ellipse]
253 [label="40:CtExecutableReferenceImpl@warn(java.lang.Throwable)" shape=ellipse]
254 [label="40:CtTypeReferenceImpl@logger" shape=ellipse]
255 [label="40:CtTypeReferenceImpl@Throwable" shape=ellipse]
256 [label="40:CtVirtualElement@warn" shape=ellipse]
257 [label="40:CtFieldReferenceImpl@logger" shape=ellipse]
258 [label="40:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
259 [label="40:CtFieldReadImpl@logger" shape=ellipse]
260 [label="40:CtLiteralImpl@\"Unable to instrument file \"" shape=ellipse]
261 [label="40:CtTypeReferenceImpl@String" shape=ellipse]
262 [label="40:CtExecutableReferenceImpl@getAbsolutePath()" shape=ellipse]
263 [label="40:CtTypeReferenceImpl@File" shape=ellipse]
264 [label="40:CtVirtualElement@getAbsolutePath" shape=ellipse]
265 [label="40:CtVariableReadImpl@file" shape=ellipse]
266 [label="40:CtParameterReferenceImpl@file" shape=ellipse]
267 [label="40:CtInvocationImpl@file.getAbsolutePath()" shape=ellipse]
268 [label="40:CtBinaryOperatorImpl@\"Unable to instrument file \" + file.getAbsolutePath()" shape=ellipse]
269 [label="40:CtVariableReadImpl@t" shape=ellipse]
270 [label="40:CtCatchVariableReferenceImpl@t" shape=ellipse]
271 [label="40:CtInvocationImpl@logger.warn(\"Unable to instrument file \" + file.getAbsolutePath(), t)" shape=ellipse]
272 [label="41:CtReturnImpl@return" shape=ellipse]
273 [label="39:CtBlockImpl@\{
    logger.warn(\"Unable to instrument file \" + file.getAbsolutePath(), t);
    return;
\}" shape=ellipse]
274 [label="39:CtCatchImpl@ catch (Throwable t) \{
    logger.warn(\"Unable to instrument file \" + file.getAbsolutePath(), t);
    return;
\}" shape=ellipse]
275 [label="43:CtVariableWriteImpl@outputStream" shape=ellipse]
276 [label="43:CtLocalVariableReferenceImpl@outputStream" shape=ellipse]
277 [label="43:CtExecutableReferenceImpl@closeOutputStream(OutputStream)" shape=ellipse]
278 [label="43:CtTypeReferenceImpl@IOUtil" shape=ellipse]
279 [label="43:CtTypeReferenceImpl@OutputStream" shape=ellipse]
280 [label="43:CtVirtualElement@closeOutputStream" shape=ellipse]
281 [label="43:CtTypeAccessImpl@IOUtil" shape=ellipse]
282 [label="43:CtTypeReferenceImpl@IOUtil" shape=ellipse]
283 [label="43:CtVariableReadImpl@outputStream" shape=ellipse]
284 [label="43:CtLocalVariableReferenceImpl@outputStream" shape=ellipse]
285 [label="43:CtInvocationImpl@IOUtil.closeOutputStream(outputStream)" shape=ellipse]
286 [label="43:CtAssignmentImpl@outputStream = IOUtil.closeOutputStream(outputStream)" shape=ellipse]
287 [label="42:CtBlockImpl@\{
    outputStream = IOUtil.closeOutputStream(outputStream);
\}" shape=ellipse]
288 [label="20:CtTryImpl@try \{
    if (cv.isInstrumented()) \{
        File outputFile;
        if (destinationDirectory == null) \{
            outputFile = file;
        \} else \{
            outputFile = new File(destinationDirectory, cv.getClassName().replace('.', separatorChar) + \".class\");
        \}
        File parentFile = outputFile.getParentFile();
        if (parentFile != null) \{
            parentFile.mkdirs();
        \}
        byte[] instrumentedClass = cw.toByteArray();
        outputStream = new FileOutputStream(outputFile);
        outputStream.write(instrumentedClass);
    \}
\} catch (Throwable t) \{
    logger.warn(\"Unable to instrument file \" + file.getAbsolutePath(), t);
    return;
\} finally \{
    outputStream = IOUtil.closeOutputStream(outputStream);
\}" shape=ellipse]
289 [label="2:CtBlockImpl@\{
    logger.debug(\"Instrumenting class \" + file.getAbsolutePath());
    InputStream inputStream = null;
    ClassWriter cw;
    ClassInstrumenter cv;
    try \{
        inputStream = new FileInputStream(file);
        ClassReader cr = new ClassReader(inputStream);
        cw = new ClassWriter(true);
        cv = new ClassInstrumenter(projectData, cw, ignoreRegexes, ignoreBranchesRegexes);
        cr.accept(cv, false);
    \} catch (Throwable t) \{
        logger.warn(\"Unable to instrument file \" + file.getAbsolutePath(), t);
        return;
    \} finally \{
        inputStream = IOUtil.closeInputStream(inputStream);
    \}
    OutputStream outputStream = null;
    try \{
        if (cv.isInstrumented()) \{
            File outputFile;
            if (destinationDirectory == null) \{
                outputFile = file;
            \} else \{
                outputFile = new File(destinationDirectory, cv.getClassName().replace('.', separatorChar) + \".class\");
            \}
            File parentFile = outputFile.getParentFile();
            if (parentFile != null) \{
                parentFile.mkdirs();
            \}
            byte[] instrumentedClass = cw.toByteArray();
            outputStream = new FileOutputStream(outputFile);
            outputStream.write(instrumentedClass);
        \}
    \} catch (Throwable t) \{
        logger.warn(\"Unable to instrument file \" + file.getAbsolutePath(), t);
        return;
    \} finally \{
        outputStream = IOUtil.closeOutputStream(outputStream);
    \}
\}" shape=ellipse]
290 [label="2:CtMethodImpl@private void addInstrumentationToSingleClass(File file) \{
    logger.debug(\"Instrumenting class \" + file.getAbsolutePath());
    InputStream inputStream = null;
    ClassWriter cw;
    ClassInstrumenter cv;
    try \{
        inputStream = new FileInputStream(file);
        ClassReader cr = new ClassReader(inputStream);
        cw = new ClassWriter(true);
        cv = new ClassInstrumenter(projectData, cw, ignoreRegexes, ignoreBranchesRegexes);
        cr.accept(cv, false);
    \} catch (Throwable t) \{
        logger.warn(\"Unable to instrument file \" + file.getAbsolutePath(), t);
        return;
    \} finally \{
        inputStream = IOUtil.closeInputStream(inputStream);
    \}
    OutputStream outputStream = null;
    try \{
        if (cv.isInstrumented()) \{
            File outputFile;
            if (destinationDirectory == null) \{
                outputFile = file;
            \} else \{
                outputFile = new File(destinationDirectory, cv.getClassName().replace('.', separatorChar) + \".class\");
            \}
            File parentFile = outputFile.getParentFile();
            if (parentFile != null) \{
                parentFile.mkdirs();
            \}
            byte[] instrumentedClass = cw.toByteArray();
            outputStream = new FileOutputStream(outputFile);
            outputStream.write(instrumentedClass);
        \}
    \} catch (Throwable t) \{
        logger.warn(\"Unable to instrument file \" + file.getAbsolutePath(), t);
        return;
    \} finally \{
        outputStream = IOUtil.closeOutputStream(outputStream);
    \}
\}" shape=ellipse]
291 [label="10:Update@UPDATE" shape=ellipse]
292 [label="10:CtPackageReferenceImpl@" shape=ellipse]
293 [label="10:CtTypeReferenceImpl@ClassWriter" shape=ellipse]
294 [label="10:CtPackageReferenceImpl@" shape=ellipse]
295 [label="10:CtTypeReferenceImpl@ClassWriter" shape=ellipse]
296 [label="10:CtExecutableReferenceImpl@ClassWriter()" shape=ellipse]
297 [label="10:CtPackageReferenceImpl@" shape=ellipse]
298 [label="10:CtTypeReferenceImpl@ClassWriter" shape=ellipse]
299 [label="10:CtTypeAccessImpl@ClassWriter" shape=ellipse]
300 [label="10:CtPackageReferenceImpl@" shape=ellipse]
301 [label="10:CtTypeReferenceImpl@ClassWriter" shape=ellipse]
302 [label="10:CtPackageReferenceImpl@" shape=ellipse]
303 [label="10:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
304 [label="10:CtFieldReferenceImpl@ClassWriter.COMPUTE_MAXS" shape=ellipse]
305 [label="10:CtFieldReadImpl@ClassWriter.COMPUTE_MAXS" shape=ellipse]
306 [label="10:CtConstructorCallImpl@new ClassWriter(ClassWriter.COMPUTE_MAXS)" shape=ellipse]
307 [label="12:Update@UPDATE" shape=ellipse]
308 [label="12:CtTypeReferenceImpl@int" shape=ellipse]
309 [label="12:CtLiteralImpl@0" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
7 -> 8 [label="AST"];
9 -> 7 [label="AST"];
10 -> 11 [label="AST"];
12 -> 13 [label="AST"];
15 -> 16 [label="AST"];
17 -> 14 [label="AST"];
17 -> 15 [label="AST"];
17 -> 12 [label="AST"];
18 -> 10 [label="AST"];
18 -> 17 [label="AST"];
19 -> 6 [label="AST"];
19 -> 9 [label="AST"];
19 -> 4 [label="AST"];
19 -> 18 [label="AST"];
20 -> 21 [label="AST"];
22 -> 23 [label="AST"];
25 -> 24 [label="AST"];
25 -> 20 [label="AST"];
25 -> 22 [label="AST"];
26 -> 27 [label="AST"];
29 -> 28 [label="AST"];
29 -> 26 [label="AST"];
30 -> 31 [label="AST"];
33 -> 32 [label="AST"];
33 -> 30 [label="AST"];
34 -> 35 [label="AST"];
34 -> 48 [label="Define-Use"];
36 -> 37 [label="AST"];
36 -> 38 [label="AST"];
39 -> 40 [label="AST"];
39 -> 34 [label="Data Dep"];
41 -> 36 [label="AST"];
41 -> 39 [label="AST"];
42 -> 34 [label="AST"];
42 -> 41 [label="AST"];
43 -> 44 [label="AST"];
45 -> 46 [label="AST"];
45 -> 47 [label="AST"];
48 -> 49 [label="AST"];
48 -> 51 [label="Data Dep"];
50 -> 45 [label="AST"];
50 -> 48 [label="AST"];
51 -> 86 [label="Define-Use"];
52 -> 51 [label="AST"];
52 -> 43 [label="AST"];
52 -> 50 [label="AST"];
53 -> 54 [label="AST"];
53 -> 71 [label="Define-Use"];
53 -> 223 [label="Define-Use"];
55 -> 56 [label="AST"];
55 -> 57 [label="AST"];
55 -> 58 [label="AST"];
59 -> 60 [label="AST"];
61 -> 55 [label="AST"];
61 -> 59 [label="AST"];
61 -> 291 [label="Action"];
62 -> 53 [label="AST"];
62 -> 61 [label="AST"];
63 -> 64 [label="AST"];
63 -> 88 [label="Define-Use"];
63 -> 144 [label="Define-Use"];
63 -> 177 [label="Define-Use"];
65 -> 66 [label="AST"];
65 -> 67 [label="AST"];
68 -> 69 [label="AST"];
70 -> 68 [label="AST"];
70 -> 63 [label="Data Dep"];
71 -> 72 [label="AST"];
71 -> 63 [label="Data Dep"];
73 -> 74 [label="AST"];
75 -> 73 [label="AST"];
75 -> 63 [label="Data Dep"];
76 -> 77 [label="AST"];
78 -> 76 [label="AST"];
78 -> 63 [label="Data Dep"];
79 -> 65 [label="AST"];
79 -> 70 [label="AST"];
79 -> 71 [label="AST"];
79 -> 75 [label="AST"];
79 -> 78 [label="AST"];
80 -> 63 [label="AST"];
80 -> 79 [label="AST"];
81 -> 82 [label="AST"];
81 -> 83 [label="AST"];
81 -> 84 [label="AST"];
86 -> 87 [label="AST"];
88 -> 89 [label="AST"];
90 -> 91 [label="AST"];
90 -> 307 [label="Action"];
92 -> 85 [label="AST"];
92 -> 86 [label="AST"];
92 -> 81 [label="AST"];
92 -> 88 [label="AST"];
92 -> 90 [label="AST"];
93 -> 42 [label="AST"];
93 -> 52 [label="AST"];
93 -> 62 [label="AST"];
93 -> 80 [label="AST"];
93 -> 92 [label="AST"];
94 -> 114 [label="Define-Use"];
95 -> 96 [label="AST"];
97 -> 94 [label="AST"];
97 -> 95 [label="AST"];
97 -> 118 [label="Control Dep"];
97 -> 116 [label="Control Dep"];
97 -> 98 [label="Control Dep"];
97 -> 104 [label="Control Dep"];
97 -> 113 [label="Control Dep"];
97 -> 105 [label="Control Dep"];
97 -> 112 [label="Control Dep"];
97 -> 107 [label="Control Dep"];
97 -> 110 [label="Control Dep"];
97 -> 114 [label="Control Dep"];
97 -> 117 [label="Control Dep"];
98 -> 99 [label="AST"];
98 -> 100 [label="AST"];
102 -> 103 [label="AST"];
104 -> 102 [label="AST"];
105 -> 106 [label="AST"];
107 -> 108 [label="AST"];
110 -> 111 [label="AST"];
112 -> 109 [label="AST"];
112 -> 110 [label="AST"];
112 -> 107 [label="AST"];
113 -> 105 [label="AST"];
113 -> 112 [label="AST"];
114 -> 115 [label="AST"];
116 -> 101 [label="AST"];
116 -> 104 [label="AST"];
116 -> 98 [label="AST"];
116 -> 113 [label="AST"];
116 -> 114 [label="AST"];
118 -> 116 [label="AST"];
118 -> 117 [label="AST"];
119 -> 97 [label="AST"];
119 -> 118 [label="AST"];
120 -> 121 [label="AST"];
121 -> 128 [label="Define-Use"];
122 -> 123 [label="AST"];
122 -> 124 [label="AST"];
126 -> 127 [label="AST"];
128 -> 129 [label="AST"];
128 -> 120 [label="Data Dep"];
130 -> 125 [label="AST"];
130 -> 126 [label="AST"];
130 -> 122 [label="AST"];
130 -> 128 [label="AST"];
131 -> 120 [label="AST"];
131 -> 130 [label="AST"];
132 -> 131 [label="AST"];
133 -> 93 [label="AST"];
133 -> 119 [label="AST"];
133 -> 132 [label="AST"];
134 -> 135 [label="AST"];
136 -> 137 [label="AST"];
138 -> 241 [label="Define-Use"];
139 -> 138 [label="AST"];
139 -> 134 [label="AST"];
139 -> 136 [label="AST"];
140 -> 141 [label="AST"];
140 -> 142 [label="AST"];
144 -> 145 [label="AST"];
146 -> 143 [label="AST"];
146 -> 144 [label="AST"];
146 -> 140 [label="AST"];
146 -> 246 [label="Control Dep"];
146 -> 150 [label="Control Dep"];
146 -> 191 [label="Control Dep"];
146 -> 156 [label="Control Dep"];
146 -> 153 [label="Control Dep"];
146 -> 154 [label="Control Dep"];
146 -> 202 [label="Control Dep"];
146 -> 200 [label="Control Dep"];
146 -> 194 [label="Control Dep"];
146 -> 198 [label="Control Dep"];
146 -> 215 [label="Control Dep"];
146 -> 207 [label="Control Dep"];
146 -> 203 [label="Control Dep"];
146 -> 205 [label="Control Dep"];
146 -> 227 [label="Control Dep"];
146 -> 217 [label="Control Dep"];
146 -> 225 [label="Control Dep"];
146 -> 219 [label="Control Dep"];
146 -> 223 [label="Control Dep"];
146 -> 236 [label="Control Dep"];
146 -> 228 [label="Control Dep"];
146 -> 235 [label="Control Dep"];
146 -> 230 [label="Control Dep"];
146 -> 233 [label="Control Dep"];
146 -> 245 [label="Control Dep"];
146 -> 237 [label="Control Dep"];
146 -> 241 [label="Control Dep"];
146 -> 243 [label="Control Dep"];
147 -> 148 [label="AST"];
149 -> 198 [label="Define-Use"];
149 -> 233 [label="Define-Use"];
150 -> 149 [label="AST"];
150 -> 147 [label="AST"];
151 -> 152 [label="AST"];
153 -> 151 [label="AST"];
154 -> 155 [label="AST"];
156 -> 153 [label="AST"];
156 -> 154 [label="AST"];
156 -> 162 [label="Control Dep"];
156 -> 161 [label="Control Dep"];
156 -> 157 [label="Control Dep"];
156 -> 159 [label="Control Dep"];
156 -> 190 [label="Control Dep"];
156 -> 189 [label="Control Dep"];
156 -> 163 [label="Control Dep"];
156 -> 188 [label="Control Dep"];
156 -> 165 [label="Control Dep"];
156 -> 170 [label="Control Dep"];
156 -> 187 [label="Control Dep"];
156 -> 184 [label="Control Dep"];
156 -> 171 [label="Control Dep"];
156 -> 179 [label="Control Dep"];
156 -> 174 [label="Control Dep"];
156 -> 177 [label="Control Dep"];
156 -> 180 [label="Control Dep"];
156 -> 182 [label="Control Dep"];
156 -> 185 [label="Control Dep"];
157 -> 158 [label="AST"];
157 -> 198 [label="Define-Use"];
157 -> 233 [label="Define-Use"];
158 -> 198 [label="Define-Use"];
158 -> 233 [label="Define-Use"];
159 -> 160 [label="AST"];
159 -> 157 [label="Data Dep"];
161 -> 157 [label="AST"];
161 -> 159 [label="AST"];
162 -> 161 [label="AST"];
163 -> 164 [label="AST"];
163 -> 198 [label="Define-Use"];
163 -> 233 [label="Define-Use"];
164 -> 198 [label="Define-Use"];
164 -> 233 [label="Define-Use"];
165 -> 166 [label="AST"];
165 -> 167 [label="AST"];
168 -> 169 [label="AST"];
170 -> 168 [label="AST"];
170 -> 163 [label="Data Dep"];
171 -> 172 [label="AST"];
174 -> 175 [label="AST"];
177 -> 178 [label="AST"];
177 -> 163 [label="Data Dep"];
179 -> 176 [label="AST"];
179 -> 177 [label="AST"];
179 -> 174 [label="AST"];
180 -> 181 [label="AST"];
182 -> 183 [label="AST"];
184 -> 173 [label="AST"];
184 -> 179 [label="AST"];
184 -> 171 [label="AST"];
184 -> 180 [label="AST"];
184 -> 182 [label="AST"];
185 -> 186 [label="AST"];
187 -> 184 [label="AST"];
187 -> 185 [label="AST"];
188 -> 165 [label="AST"];
188 -> 170 [label="AST"];
188 -> 187 [label="AST"];
189 -> 163 [label="AST"];
189 -> 188 [label="AST"];
190 -> 189 [label="AST"];
191 -> 156 [label="AST"];
191 -> 162 [label="AST"];
191 -> 190 [label="AST"];
192 -> 193 [label="AST"];
194 -> 195 [label="AST"];
194 -> 196 [label="AST"];
198 -> 199 [label="AST"];
198 -> 201 [label="Data Dep"];
200 -> 197 [label="AST"];
200 -> 198 [label="AST"];
200 -> 194 [label="AST"];
201 -> 203 [label="Define-Use"];
201 -> 211 [label="Define-Use"];
202 -> 201 [label="AST"];
202 -> 192 [label="AST"];
202 -> 200 [label="AST"];
203 -> 204 [label="AST"];
205 -> 206 [label="AST"];
207 -> 203 [label="AST"];
207 -> 205 [label="AST"];
207 -> 214 [label="Control Dep"];
207 -> 213 [label="Control Dep"];
207 -> 208 [label="Control Dep"];
207 -> 211 [label="Control Dep"];
208 -> 209 [label="AST"];
211 -> 212 [label="AST"];
213 -> 210 [label="AST"];
213 -> 211 [label="AST"];
213 -> 208 [label="AST"];
214 -> 213 [label="AST"];
215 -> 207 [label="AST"];
215 -> 214 [label="AST"];
217 -> 216 [label="AST"];
217 -> 218 [label="AST"];
219 -> 220 [label="AST"];
219 -> 221 [label="AST"];
223 -> 224 [label="AST"];
223 -> 226 [label="Data Dep"];
225 -> 222 [label="AST"];
225 -> 223 [label="AST"];
225 -> 219 [label="AST"];
226 -> 243 [label="Define-Use"];
227 -> 226 [label="AST"];
227 -> 217 [label="AST"];
227 -> 225 [label="AST"];
228 -> 229 [label="AST"];
228 -> 241 [label="Define-Use"];
229 -> 241 [label="Define-Use"];
230 -> 231 [label="AST"];
230 -> 232 [label="AST"];
233 -> 234 [label="AST"];
233 -> 228 [label="Data Dep"];
235 -> 230 [label="AST"];
235 -> 233 [label="AST"];
236 -> 228 [label="AST"];
236 -> 235 [label="AST"];
237 -> 238 [label="AST"];
237 -> 239 [label="AST"];
241 -> 242 [label="AST"];
243 -> 244 [label="AST"];
245 -> 240 [label="AST"];
245 -> 241 [label="AST"];
245 -> 237 [label="AST"];
245 -> 243 [label="AST"];
246 -> 150 [label="AST"];
246 -> 191 [label="AST"];
246 -> 202 [label="AST"];
246 -> 215 [label="AST"];
246 -> 227 [label="AST"];
246 -> 236 [label="AST"];
246 -> 245 [label="AST"];
247 -> 146 [label="AST"];
247 -> 246 [label="AST"];
248 -> 247 [label="AST"];
249 -> 269 [label="Define-Use"];
250 -> 251 [label="AST"];
252 -> 249 [label="AST"];
252 -> 250 [label="AST"];
252 -> 273 [label="Control Dep"];
252 -> 271 [label="Control Dep"];
252 -> 253 [label="Control Dep"];
252 -> 259 [label="Control Dep"];
252 -> 268 [label="Control Dep"];
252 -> 260 [label="Control Dep"];
252 -> 267 [label="Control Dep"];
252 -> 262 [label="Control Dep"];
252 -> 265 [label="Control Dep"];
252 -> 269 [label="Control Dep"];
252 -> 272 [label="Control Dep"];
253 -> 254 [label="AST"];
253 -> 255 [label="AST"];
257 -> 258 [label="AST"];
259 -> 257 [label="AST"];
260 -> 261 [label="AST"];
262 -> 263 [label="AST"];
265 -> 266 [label="AST"];
267 -> 264 [label="AST"];
267 -> 265 [label="AST"];
267 -> 262 [label="AST"];
268 -> 260 [label="AST"];
268 -> 267 [label="AST"];
269 -> 270 [label="AST"];
271 -> 256 [label="AST"];
271 -> 259 [label="AST"];
271 -> 253 [label="AST"];
271 -> 268 [label="AST"];
271 -> 269 [label="AST"];
273 -> 271 [label="AST"];
273 -> 272 [label="AST"];
274 -> 252 [label="AST"];
274 -> 273 [label="AST"];
275 -> 276 [label="AST"];
276 -> 283 [label="Define-Use"];
277 -> 278 [label="AST"];
277 -> 279 [label="AST"];
281 -> 282 [label="AST"];
283 -> 284 [label="AST"];
283 -> 275 [label="Data Dep"];
285 -> 280 [label="AST"];
285 -> 281 [label="AST"];
285 -> 277 [label="AST"];
285 -> 283 [label="AST"];
286 -> 275 [label="AST"];
286 -> 285 [label="AST"];
287 -> 286 [label="AST"];
288 -> 248 [label="AST"];
288 -> 274 [label="AST"];
288 -> 287 [label="AST"];
289 -> 19 [label="AST"];
289 -> 25 [label="AST"];
289 -> 29 [label="AST"];
289 -> 33 [label="AST"];
289 -> 133 [label="AST"];
289 -> 139 [label="AST"];
289 -> 288 [label="AST"];
290 -> 1 [label="AST"];
290 -> 0 [label="AST"];
290 -> 2 [label="AST"];
290 -> 289 [label="AST"];
291 -> 306 [label="Action"];
293 -> 292 [label="AST"];
295 -> 294 [label="AST"];
296 -> 293 [label="AST"];
296 -> 295 [label="AST"];
298 -> 297 [label="AST"];
299 -> 298 [label="AST"];
301 -> 300 [label="AST"];
303 -> 302 [label="AST"];
304 -> 301 [label="AST"];
304 -> 303 [label="AST"];
305 -> 299 [label="AST"];
305 -> 304 [label="AST"];
305 -> 53 [label="Data Dep"];
305 -> 53 [label="Control Dep"];
306 -> 296 [label="AST"];
306 -> 305 [label="AST"];
307 -> 309 [label="Action"];
309 -> 308 [label="AST"];
}