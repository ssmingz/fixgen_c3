digraph "Pattern" {
0 [label="testHashCode#?#4:UPDATE
getSwitchDataIteratively#?,LineData#5:UPDATE
testEquals#?#7:UPDATE" shape=ellipse]
1 [label="testHashCode#?#4:new SwitchData(0, new int[]\{ 0, 1, 2, 3 \})
getSwitchDataIteratively#?,LineData#5:new SwitchData(1)
testEquals#?#7:new SwitchData(0, new int[]\{ 0, 1, 2, 3 \})" shape=ellipse]
2 [label="testHashCode#?#4:SwitchData aPrime = new SwitchData(0, new int[]\{ 0, 1, 2, 3 \})
testEquals#?#7:SwitchData aPrime = new SwitchData(0, new int[]\{ 0, 1, 2, 3 \})" shape=ellipse]
3 [label="testHashCode#?#2:\{
    assertEquals(a.hashCode(), a.hashCode());
    SwitchData aPrime = new SwitchData(0, new int[]\{ 0, 1, 2, 3 \});
    assertEquals(a.hashCode(), aPrime.hashCode());
\}
getSwitchDataIteratively#?,LineData#3:\{
    Thread.yield();
    data.getSwitchData(i, new SwitchData(1));
\}
testEquals#?#2:\{
    assertFalse(a.equals(null));
    assertFalse(a.equals(Integer.valueOf(4)));
    assertTrue(a.equals(a));
    assertFalse(a.equals(b));
    SwitchData aPrime = new SwitchData(0, new int[]\{ 0, 1, 2, 3 \});
    assertTrue(a.equals(aPrime));
\}" shape=ellipse]
4 [label="testHashCode#?#4:aPrime
getSwitchDataIteratively#?,LineData#3:i
testEquals#?#7:aPrime" shape=ellipse]
5 [label="testHashCode#?#4:SwitchData
getSwitchDataIteratively#?,LineData#5:getSwitchData(int,SwitchData)
testEquals#?#7:SwitchData" shape=ellipse]
6 [label="testHashCode#?#4:SwitchData(int,int[])
getSwitchDataIteratively#?,LineData#5:SwitchData(int)
testEquals#?#7:SwitchData(int,int[])" shape=ellipse]
7 [label="testHashCode#?#4:SwitchData
testEquals#?#7:SwitchData" shape=ellipse]
8 [label="testHashCode#?#4:SwitchData
testEquals#?#7:SwitchData" shape=ellipse]
9 [label="testHashCode#?#4:int
testEquals#?#7:int" shape=ellipse]
10 [label="testHashCode#?#4:int[]
testEquals#?#7:int[]" shape=ellipse]
11 [label="testHashCode#?#4:0
getSwitchDataIteratively#?,LineData#5:1
testEquals#?#7:0" shape=ellipse]
12 [label="testHashCode#?#4:int
testEquals#?#7:int" shape=ellipse]
13 [label="testHashCode#?#4:new int[]\{ 0, 1, 2, 3 \}
testEquals#?#7:new int[]\{ 0, 1, 2, 3 \}" shape=ellipse]
14 [label="testHashCode#?#4:int[]
testEquals#?#7:int[]" shape=ellipse]
15 [label="testHashCode#?#4:0
getSwitchDataIteratively#?,LineData#3:2000
testEquals#?#7:0" shape=ellipse]
16 [label="testHashCode#?#4:1
getSwitchDataIteratively#?,LineData#5:Integer.MAX_VALUE
testEquals#?#7:1" shape=ellipse]
17 [label="testHashCode#?#4:2
testEquals#?#7:2" shape=ellipse]
18 [label="testHashCode#?#4:3
testEquals#?#7:3" shape=ellipse]
19 [label="testHashCode#?#4:SwitchData(int,int[],int)
getSwitchDataIteratively#?,LineData#5:int
testEquals#?#7:SwitchData(int,int[],int)" shape=ellipse]
20 [label="testHashCode#?#4:SwitchData
testEquals#?#7:SwitchData" shape=ellipse]
21 [label="testHashCode#?#4:
getSwitchDataIteratively#?,LineData#3:boolean
testEquals#?#7:" shape=ellipse]
22 [label="testHashCode#?#4:int
testEquals#?#7:int" shape=ellipse]
23 [label="testHashCode#?#4:int[]
testEquals#?#7:int[]" shape=ellipse]
24 [label="testHashCode#?#4:int
getSwitchDataIteratively#?,LineData#5:Integer
testEquals#?#7:int" shape=ellipse]
25 [label="testHashCode#?#4:int
testEquals#?#7:int" shape=ellipse]
26 [label="testHashCode#?#4:Integer.MAX_VALUE
getSwitchDataIteratively#?,LineData#4:Thread
testEquals#?#7:Integer.MAX_VALUE" shape=ellipse]
27 [label="testHashCode#?#4:Integer
testEquals#?#7:Integer" shape=ellipse]
28 [label="testHashCode#?#4:Integer
getSwitchDataIteratively#?,LineData#5:Integer
testEquals#?#7:Integer" shape=ellipse]
29 [label="testHashCode#?#4:java.lang
getSwitchDataIteratively#?,LineData#5:java.lang
testEquals#?#7:java.lang" shape=ellipse]
30 [label="testHashCode#?#4:Integer.MAX_VALUE
testEquals#?#7:Integer.MAX_VALUE" shape=ellipse]
31 [label="testHashCode#?#4:Integer
getSwitchDataIteratively#?,LineData#4:yield()
testEquals#?#7:Integer" shape=ellipse]
32 [label="testHashCode#?#4:java.lang
testEquals#?#7:java.lang" shape=ellipse]
33 [label="testHashCode#?#4:int
testEquals#?#7:int" shape=ellipse]
34 [label="testHashCode#?#5:aPrime
testEquals#?#8:aPrime" shape=ellipse]
35 [label="testHashCode#?#5:aPrime
testEquals#?#8:aPrime" shape=ellipse]
36 [label="getSwitchDataIteratively#?,LineData#3:i < 2000" shape=ellipse]
37 [label="getSwitchDataIteratively#?,LineData#3:for (int i = 0; i < 2000; i++) \{
    Thread.yield();
    data.getSwitchData(i, new SwitchData(1));
\}" shape=ellipse]
38 [label="getSwitchDataIteratively#?,LineData#4:Thread.yield()" shape=ellipse]
39 [label="getSwitchDataIteratively#?,LineData#5:data.getSwitchData(i, new SwitchData(1))" shape=ellipse]
40 [label="getSwitchDataIteratively#?,LineData#5:data" shape=ellipse]
41 [label="getSwitchDataIteratively#?,LineData#5:i" shape=ellipse]
42 [label="getSwitchDataIteratively#?,LineData#5:Integer" shape=ellipse]
43 [label="getSwitchDataIteratively#?,LineData#5:java.lang" shape=ellipse]
44 [label="getSwitchDataIteratively#?,LineData#5:Integer.MAX_VALUE" shape=ellipse]
1 -> 0 [label="Action:3"];
1 -> 6 [label="AST:3"];
1 -> 11 [label="AST:3"];
1 -> 13 [label="AST:2"];
2 -> 1 [label="AST:2"];
2 -> 4 [label="AST:2"];
2 -> 5 [label="AST:2"];
3 -> 2 [label="AST:2"];
3 -> 38 [label="AST:1"];
3 -> 39 [label="AST:1"];
4 -> 34 [label="Define Use:2"];
6 -> 7 [label="AST:2"];
6 -> 8 [label="AST:2"];
6 -> 9 [label="AST:2"];
6 -> 10 [label="AST:2"];
11 -> 12 [label="AST:2"];
13 -> 14 [label="AST:2"];
13 -> 15 [label="AST:2"];
13 -> 16 [label="AST:2"];
13 -> 17 [label="AST:2"];
13 -> 18 [label="AST:2"];
16 -> 42 [label="AST:1"];
16 -> 44 [label="AST:1"];
19 -> 20 [label="AST:2"];
19 -> 22 [label="AST:2"];
19 -> 23 [label="AST:2"];
19 -> 25 [label="AST:2"];
20 -> 21 [label="AST:2"];
23 -> 24 [label="AST:2"];
24 -> 43 [label="AST:1"];
26 -> 27 [label="AST:2"];
26 -> 30 [label="AST:2"];
27 -> 28 [label="AST:2"];
28 -> 29 [label="AST:3"];
30 -> 31 [label="AST:2"];
30 -> 33 [label="AST:2"];
31 -> 32 [label="AST:2"];
34 -> 35 [label="AST:2"];
36 -> 21 [label="AST:1"];
36 -> 4 [label="AST:1"];
36 -> 15 [label="AST:1"];
36 -> 3 [label="Control Dep:1"];
36 -> 38 [label="Control Dep:1"];
36 -> 31 [label="Control Dep:1"];
36 -> 26 [label="Control Dep:1"];
36 -> 39 [label="Control Dep:1"];
36 -> 5 [label="Control Dep:1"];
36 -> 40 [label="Control Dep:1"];
36 -> 41 [label="Control Dep:1"];
36 -> 1 [label="Control Dep:1"];
36 -> 6 [label="Control Dep:1"];
36 -> 11 [label="Control Dep:1"];
36 -> 16 [label="Control Dep:1"];
37 -> 36 [label="AST:1"];
37 -> 3 [label="AST:1"];
38 -> 26 [label="AST:1"];
38 -> 31 [label="AST:1"];
39 -> 40 [label="AST:1"];
39 -> 5 [label="AST:1"];
39 -> 41 [label="AST:1"];
39 -> 1 [label="AST:1"];
42 -> 24 [label="AST:1"];
44 -> 28 [label="AST:1"];
44 -> 19 [label="AST:1"];
}