digraph "testHashCode#?" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@testHashCode" shape=ellipse]
2 [label="3:CtExecutableReferenceImpl@assertEquals(<unknown>,<unknown>)" shape=ellipse]
3 [label="3:CtTypeReferenceImpl@null" shape=ellipse]
4 [label="3:CtTypeReferenceImpl@null" shape=ellipse]
5 [label="3:CtVirtualElement@assertEquals" shape=ellipse]
6 [label="3:CtTypeAccessImpl@PlaceHold" shape=ellipse]
7 [label="3:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
8 [label="3:CtThisAccessImpl@" shape=ellipse]
9 [label="3:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
10 [label="3:CtExecutableReferenceImpl@hashCode()" shape=ellipse]
11 [label="3:CtTypeReferenceImpl@a" shape=ellipse]
12 [label="3:CtVirtualElement@hashCode" shape=ellipse]
13 [label="3:CtFieldReferenceImpl@a" shape=ellipse]
14 [label="3:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
15 [label="3:CtFieldReadImpl@a" shape=ellipse]
16 [label="3:CtInvocationImpl@a.hashCode()" shape=ellipse]
17 [label="3:CtExecutableReferenceImpl@hashCode()" shape=ellipse]
18 [label="3:CtTypeReferenceImpl@a" shape=ellipse]
19 [label="3:CtVirtualElement@hashCode" shape=ellipse]
20 [label="3:CtFieldReferenceImpl@a" shape=ellipse]
21 [label="3:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
22 [label="3:CtFieldReadImpl@a" shape=ellipse]
23 [label="3:CtInvocationImpl@a.hashCode()" shape=ellipse]
24 [label="3:CtInvocationImpl@assertEquals(a.hashCode(), a.hashCode())" shape=ellipse]
25 [label="4:CtTypeReferenceImpl@SwitchData" shape=ellipse]
26 [label="4:CtPackageReferenceImpl@" shape=ellipse]
27 [label="4:CtExecutableReferenceImpl@SwitchData(int,int[])" shape=ellipse]
28 [label="4:CtTypeReferenceImpl@SwitchData" shape=ellipse]
29 [label="4:CtTypeReferenceImpl@SwitchData" shape=ellipse]
30 [label="4:CtTypeReferenceImpl@int" shape=ellipse]
31 [label="4:CtArrayTypeReferenceImpl@int[]" shape=ellipse]
32 [label="4:CtLiteralImpl@0" shape=ellipse]
33 [label="4:CtTypeReferenceImpl@int" shape=ellipse]
34 [label="4:CtNewArrayImpl@new int[]\{ 0, 1, 2, 3 \}" shape=ellipse]
35 [label="4:CtArrayTypeReferenceImpl@int[]" shape=ellipse]
36 [label="4:CtLiteralImpl@0" shape=ellipse]
37 [label="4:CtLiteralImpl@1" shape=ellipse]
38 [label="4:CtLiteralImpl@2" shape=ellipse]
39 [label="4:CtLiteralImpl@3" shape=ellipse]
40 [label="4:CtConstructorCallImpl@new SwitchData(0, new int[]\{ 0, 1, 2, 3 \})" shape=ellipse]
41 [label="4:CtVirtualElement@aPrime" shape=ellipse]
42 [label="4:CtLocalVariableImpl@SwitchData aPrime = new SwitchData(0, new int[]\{ 0, 1, 2, 3 \})" shape=ellipse]
43 [label="5:CtExecutableReferenceImpl@assertEquals(<unknown>,<unknown>)" shape=ellipse]
44 [label="5:CtTypeReferenceImpl@null" shape=ellipse]
45 [label="5:CtTypeReferenceImpl@null" shape=ellipse]
46 [label="5:CtVirtualElement@assertEquals" shape=ellipse]
47 [label="5:CtTypeAccessImpl@PlaceHold" shape=ellipse]
48 [label="5:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
49 [label="5:CtThisAccessImpl@" shape=ellipse]
50 [label="5:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
51 [label="5:CtExecutableReferenceImpl@hashCode()" shape=ellipse]
52 [label="5:CtTypeReferenceImpl@a" shape=ellipse]
53 [label="5:CtVirtualElement@hashCode" shape=ellipse]
54 [label="5:CtFieldReferenceImpl@a" shape=ellipse]
55 [label="5:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
56 [label="5:CtFieldReadImpl@a" shape=ellipse]
57 [label="5:CtInvocationImpl@a.hashCode()" shape=ellipse]
58 [label="5:CtExecutableReferenceImpl@hashCode()" shape=ellipse]
59 [label="5:CtTypeReferenceImpl@SwitchData" shape=ellipse]
60 [label="5:CtVirtualElement@hashCode" shape=ellipse]
61 [label="5:CtVariableReadImpl@aPrime" shape=ellipse]
62 [label="5:CtLocalVariableReferenceImpl@aPrime" shape=ellipse]
63 [label="5:CtInvocationImpl@aPrime.hashCode()" shape=ellipse]
64 [label="5:CtInvocationImpl@assertEquals(a.hashCode(), aPrime.hashCode())" shape=ellipse]
65 [label="2:CtBlockImpl@\{
    assertEquals(a.hashCode(), a.hashCode());
    SwitchData aPrime = new SwitchData(0, new int[]\{ 0, 1, 2, 3 \});
    assertEquals(a.hashCode(), aPrime.hashCode());
\}" shape=ellipse]
66 [label="2:CtMethodImpl@public void testHashCode() \{
    assertEquals(a.hashCode(), a.hashCode());
    SwitchData aPrime = new SwitchData(0, new int[]\{ 0, 1, 2, 3 \});
    assertEquals(a.hashCode(), aPrime.hashCode());
\}" shape=ellipse]
67 [label="4:Update@UPDATE" shape=ellipse]
68 [label="4:CtPackageReferenceImpl@" shape=ellipse]
69 [label="4:CtTypeReferenceImpl@SwitchData" shape=ellipse]
70 [label="4:CtPackageReferenceImpl@" shape=ellipse]
71 [label="4:CtTypeReferenceImpl@SwitchData" shape=ellipse]
72 [label="4:CtTypeReferenceImpl@int" shape=ellipse]
73 [label="4:CtTypeReferenceImpl@int" shape=ellipse]
74 [label="4:CtArrayTypeReferenceImpl@int[]" shape=ellipse]
75 [label="4:CtTypeReferenceImpl@int" shape=ellipse]
76 [label="4:CtExecutableReferenceImpl@SwitchData(int,int[],int)" shape=ellipse]
77 [label="4:CtTypeReferenceImpl@int" shape=ellipse]
78 [label="4:CtLiteralImpl@0" shape=ellipse]
79 [label="4:CtTypeReferenceImpl@int" shape=ellipse]
80 [label="4:CtArrayTypeReferenceImpl@int[]" shape=ellipse]
81 [label="4:CtTypeReferenceImpl@int" shape=ellipse]
82 [label="4:CtLiteralImpl@0" shape=ellipse]
83 [label="4:CtTypeReferenceImpl@int" shape=ellipse]
84 [label="4:CtLiteralImpl@1" shape=ellipse]
85 [label="4:CtTypeReferenceImpl@int" shape=ellipse]
86 [label="4:CtLiteralImpl@2" shape=ellipse]
87 [label="4:CtTypeReferenceImpl@int" shape=ellipse]
88 [label="4:CtLiteralImpl@3" shape=ellipse]
89 [label="4:CtNewArrayImpl@new int[]\{ 0, 1, 2, 3 \}" shape=ellipse]
90 [label="4:CtPackageReferenceImpl@java.lang" shape=ellipse]
91 [label="4:CtTypeReferenceImpl@Integer" shape=ellipse]
92 [label="4:CtTypeAccessImpl@Integer" shape=ellipse]
93 [label="4:CtPackageReferenceImpl@java.lang" shape=ellipse]
94 [label="4:CtTypeReferenceImpl@Integer" shape=ellipse]
95 [label="4:CtTypeReferenceImpl@int" shape=ellipse]
96 [label="4:CtFieldReferenceImpl@Integer.MAX_VALUE" shape=ellipse]
97 [label="4:CtFieldReadImpl@Integer.MAX_VALUE" shape=ellipse]
98 [label="4:CtConstructorCallImpl@new SwitchData(0, new int[]\{ 0, 1, 2, 3 \}, Integer.MAX_VALUE)" shape=ellipse]
2 -> 3 [label="AST"];
2 -> 4 [label="AST"];
6 -> 7 [label="AST"];
8 -> 9 [label="AST"];
8 -> 6 [label="AST"];
10 -> 11 [label="AST"];
13 -> 14 [label="AST"];
15 -> 13 [label="AST"];
16 -> 12 [label="AST"];
16 -> 15 [label="AST"];
16 -> 10 [label="AST"];
17 -> 18 [label="AST"];
20 -> 21 [label="AST"];
22 -> 20 [label="AST"];
23 -> 19 [label="AST"];
23 -> 22 [label="AST"];
23 -> 17 [label="AST"];
24 -> 5 [label="AST"];
24 -> 8 [label="AST"];
24 -> 2 [label="AST"];
24 -> 16 [label="AST"];
24 -> 23 [label="AST"];
25 -> 26 [label="AST"];
27 -> 28 [label="AST"];
27 -> 29 [label="AST"];
27 -> 30 [label="AST"];
27 -> 31 [label="AST"];
32 -> 33 [label="AST"];
34 -> 35 [label="AST"];
34 -> 36 [label="AST"];
34 -> 37 [label="AST"];
34 -> 38 [label="AST"];
34 -> 39 [label="AST"];
40 -> 27 [label="AST"];
40 -> 32 [label="AST"];
40 -> 34 [label="AST"];
40 -> 67 [label="Action"];
41 -> 61 [label="Define-Use"];
42 -> 41 [label="AST"];
42 -> 25 [label="AST"];
42 -> 40 [label="AST"];
43 -> 44 [label="AST"];
43 -> 45 [label="AST"];
47 -> 48 [label="AST"];
49 -> 50 [label="AST"];
49 -> 47 [label="AST"];
51 -> 52 [label="AST"];
54 -> 55 [label="AST"];
56 -> 54 [label="AST"];
57 -> 53 [label="AST"];
57 -> 56 [label="AST"];
57 -> 51 [label="AST"];
58 -> 59 [label="AST"];
61 -> 62 [label="AST"];
63 -> 60 [label="AST"];
63 -> 61 [label="AST"];
63 -> 58 [label="AST"];
64 -> 46 [label="AST"];
64 -> 49 [label="AST"];
64 -> 43 [label="AST"];
64 -> 57 [label="AST"];
64 -> 63 [label="AST"];
65 -> 24 [label="AST"];
65 -> 42 [label="AST"];
65 -> 64 [label="AST"];
66 -> 1 [label="AST"];
66 -> 0 [label="AST"];
66 -> 65 [label="AST"];
67 -> 98 [label="Action"];
69 -> 68 [label="AST"];
71 -> 70 [label="AST"];
74 -> 73 [label="AST"];
76 -> 69 [label="AST"];
76 -> 71 [label="AST"];
76 -> 72 [label="AST"];
76 -> 74 [label="AST"];
76 -> 75 [label="AST"];
78 -> 77 [label="AST"];
80 -> 79 [label="AST"];
82 -> 81 [label="AST"];
84 -> 83 [label="AST"];
86 -> 85 [label="AST"];
88 -> 87 [label="AST"];
89 -> 80 [label="AST"];
89 -> 82 [label="AST"];
89 -> 84 [label="AST"];
89 -> 86 [label="AST"];
89 -> 88 [label="AST"];
91 -> 90 [label="AST"];
92 -> 91 [label="AST"];
94 -> 93 [label="AST"];
96 -> 94 [label="AST"];
96 -> 95 [label="AST"];
97 -> 92 [label="AST"];
97 -> 96 [label="AST"];
98 -> 76 [label="AST"];
98 -> 78 [label="AST"];
98 -> 89 [label="AST"];
98 -> 97 [label="AST"];
}