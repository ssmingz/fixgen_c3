digraph "runTestAntScript#?,String,String" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@runTestAntScript" shape=ellipse]
2 [label="2:CtParameterImpl@String testName" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
4 [label="2:CtParameterImpl@String target" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
6 [label="2:CtTypeReferenceImpl@IOException" shape=ellipse]
7 [label="2:CtPackageReferenceImpl@" shape=ellipse]
8 [label="3:CtTypeReferenceImpl@Java" shape=ellipse]
9 [label="3:CtPackageReferenceImpl@" shape=ellipse]
10 [label="3:CtExecutableReferenceImpl@Java()" shape=ellipse]
11 [label="3:CtTypeReferenceImpl@Java" shape=ellipse]
12 [label="3:CtTypeReferenceImpl@Java" shape=ellipse]
13 [label="3:CtConstructorCallImpl@new Java()" shape=ellipse]
14 [label="3:CtVirtualElement@java" shape=ellipse]
15 [label="3:CtLocalVariableImpl@Java java = new Java()" shape=ellipse]
16 [label="4:CtExecutableReferenceImpl@setProject()" shape=ellipse]
17 [label="4:CtTypeReferenceImpl@Java" shape=ellipse]
18 [label="4:CtVirtualElement@setProject" shape=ellipse]
19 [label="4:CtVariableReadImpl@java" shape=ellipse]
20 [label="4:CtLocalVariableReferenceImpl@java" shape=ellipse]
21 [label="4:CtFieldReferenceImpl@project" shape=ellipse]
22 [label="4:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
23 [label="4:CtFieldReadImpl@project" shape=ellipse]
24 [label="4:CtInvocationImpl@java.setProject(project)" shape=ellipse]
25 [label="5:CtExecutableReferenceImpl@setTaskName(java.lang.String)" shape=ellipse]
26 [label="5:CtTypeReferenceImpl@Java" shape=ellipse]
27 [label="5:CtTypeReferenceImpl@String" shape=ellipse]
28 [label="5:CtVirtualElement@setTaskName" shape=ellipse]
29 [label="5:CtVariableReadImpl@java" shape=ellipse]
30 [label="5:CtLocalVariableReferenceImpl@java" shape=ellipse]
31 [label="5:CtLiteralImpl@\"java\"" shape=ellipse]
32 [label="5:CtTypeReferenceImpl@String" shape=ellipse]
33 [label="5:CtInvocationImpl@java.setTaskName(\"java\")" shape=ellipse]
34 [label="6:CtExecutableReferenceImpl@setClassname(java.lang.String)" shape=ellipse]
35 [label="6:CtTypeReferenceImpl@Java" shape=ellipse]
36 [label="6:CtTypeReferenceImpl@String" shape=ellipse]
37 [label="6:CtVirtualElement@setClassname" shape=ellipse]
38 [label="6:CtVariableReadImpl@java" shape=ellipse]
39 [label="6:CtLocalVariableReferenceImpl@java" shape=ellipse]
40 [label="6:CtLiteralImpl@\"org.apache.tools.ant.launch.Launcher\"" shape=ellipse]
41 [label="6:CtTypeReferenceImpl@String" shape=ellipse]
42 [label="6:CtInvocationImpl@java.setClassname(\"org.apache.tools.ant.launch.Launcher\")" shape=ellipse]
43 [label="7:CtExecutableReferenceImpl@setFork(boolean)" shape=ellipse]
44 [label="7:CtTypeReferenceImpl@Java" shape=ellipse]
45 [label="7:CtTypeReferenceImpl@boolean" shape=ellipse]
46 [label="7:CtVirtualElement@setFork" shape=ellipse]
47 [label="7:CtVariableReadImpl@java" shape=ellipse]
48 [label="7:CtLocalVariableReferenceImpl@java" shape=ellipse]
49 [label="7:CtLiteralImpl@true" shape=ellipse]
50 [label="7:CtTypeReferenceImpl@boolean" shape=ellipse]
51 [label="7:CtInvocationImpl@java.setFork(true)" shape=ellipse]
52 [label="8:CtExecutableReferenceImpl@transferCoberturaDataFileProperty(Java)" shape=ellipse]
53 [label="8:CtTypeReferenceImpl@AntUtil" shape=ellipse]
54 [label="8:CtTypeReferenceImpl@Java" shape=ellipse]
55 [label="8:CtVirtualElement@transferCoberturaDataFileProperty" shape=ellipse]
56 [label="8:CtTypeAccessImpl@AntUtil" shape=ellipse]
57 [label="8:CtTypeReferenceImpl@AntUtil" shape=ellipse]
58 [label="8:CtVariableReadImpl@java" shape=ellipse]
59 [label="8:CtLocalVariableReferenceImpl@java" shape=ellipse]
60 [label="8:CtInvocationImpl@AntUtil.transferCoberturaDataFileProperty(java)" shape=ellipse]
61 [label="9:CtFieldReferenceImpl@forkedJVMDebugPort" shape=ellipse]
62 [label="9:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
63 [label="9:CtFieldReadImpl@forkedJVMDebugPort" shape=ellipse]
64 [label="9:CtLiteralImpl@0" shape=ellipse]
65 [label="9:CtTypeReferenceImpl@int" shape=ellipse]
66 [label="9:CtBinaryOperatorImpl@forkedJVMDebugPort > 0" shape=ellipse]
67 [label="10:CtExecutableReferenceImpl@setValue(java.lang.String)" shape=ellipse]
68 [label="10:CtTypeReferenceImpl@String" shape=ellipse]
69 [label="10:CtVirtualElement@setValue" shape=ellipse]
70 [label="10:CtExecutableReferenceImpl@createJvmarg()" shape=ellipse]
71 [label="10:CtTypeReferenceImpl@Java" shape=ellipse]
72 [label="10:CtVirtualElement@createJvmarg" shape=ellipse]
73 [label="10:CtVariableReadImpl@java" shape=ellipse]
74 [label="10:CtLocalVariableReferenceImpl@java" shape=ellipse]
75 [label="10:CtInvocationImpl@java.createJvmarg()" shape=ellipse]
76 [label="10:CtLiteralImpl@\"-Xdebug\"" shape=ellipse]
77 [label="10:CtTypeReferenceImpl@String" shape=ellipse]
78 [label="10:CtInvocationImpl@java.createJvmarg().setValue(\"-Xdebug\")" shape=ellipse]
79 [label="12:CtExecutableReferenceImpl@setValue()" shape=ellipse]
80 [label="11:CtVirtualElement@setValue" shape=ellipse]
81 [label="11:CtExecutableReferenceImpl@createJvmarg()" shape=ellipse]
82 [label="11:CtTypeReferenceImpl@Java" shape=ellipse]
83 [label="11:CtVirtualElement@createJvmarg" shape=ellipse]
84 [label="11:CtVariableReadImpl@java" shape=ellipse]
85 [label="11:CtLocalVariableReferenceImpl@java" shape=ellipse]
86 [label="11:CtInvocationImpl@java.createJvmarg()" shape=ellipse]
87 [label="13:CtLiteralImpl@\"-Xrunjdwp:transport=dt_socket,address=\"" shape=ellipse]
88 [label="13:CtTypeReferenceImpl@String" shape=ellipse]
89 [label="13:CtFieldReferenceImpl@forkedJVMDebugPort" shape=ellipse]
90 [label="13:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
91 [label="13:CtFieldReadImpl@forkedJVMDebugPort" shape=ellipse]
92 [label="13:CtBinaryOperatorImpl@(\"-Xrunjdwp:transport=dt_socket,address=\" + forkedJVMDebugPort)" shape=ellipse]
93 [label="14:CtLiteralImpl@\",server=y,suspend=y\"" shape=ellipse]
94 [label="14:CtTypeReferenceImpl@String" shape=ellipse]
95 [label="13:CtBinaryOperatorImpl@(\"-Xrunjdwp:transport=dt_socket,address=\" + forkedJVMDebugPort) + \",server=y,suspend=y\"" shape=ellipse]
96 [label="11:CtInvocationImpl@java.createJvmarg().setValue((\"-Xrunjdwp:transport=dt_socket,address=\" + forkedJVMDebugPort) + \",server=y,suspend=y\")" shape=ellipse]
97 [label="9:CtBlockImpl@\{
    java.createJvmarg().setValue(\"-Xdebug\");
    java.createJvmarg().setValue((\"-Xrunjdwp:transport=dt_socket,address=\" + forkedJVMDebugPort) + \",server=y,suspend=y\");
\}" shape=ellipse]
98 [label="9:CtIfImpl@if (forkedJVMDebugPort > 0) \{
    java.createJvmarg().setValue(\"-Xdebug\");
    java.createJvmarg().setValue((\"-Xrunjdwp:transport=dt_socket,address=\" + forkedJVMDebugPort) + \",server=y,suspend=y\");
\}" shape=ellipse]
99 [label="16:CtExecutableReferenceImpl@setValue(java.lang.String)" shape=ellipse]
100 [label="16:CtTypeReferenceImpl@String" shape=ellipse]
101 [label="16:CtVirtualElement@setValue" shape=ellipse]
102 [label="16:CtExecutableReferenceImpl@createArg()" shape=ellipse]
103 [label="16:CtTypeReferenceImpl@Java" shape=ellipse]
104 [label="16:CtVirtualElement@createArg" shape=ellipse]
105 [label="16:CtVariableReadImpl@java" shape=ellipse]
106 [label="16:CtLocalVariableReferenceImpl@java" shape=ellipse]
107 [label="16:CtInvocationImpl@java.createArg()" shape=ellipse]
108 [label="16:CtLiteralImpl@\"-f\"" shape=ellipse]
109 [label="16:CtTypeReferenceImpl@String" shape=ellipse]
110 [label="16:CtInvocationImpl@java.createArg().setValue(\"-f\")" shape=ellipse]
111 [label="17:CtExecutableReferenceImpl@setValue()" shape=ellipse]
112 [label="17:CtVirtualElement@setValue" shape=ellipse]
113 [label="17:CtExecutableReferenceImpl@createArg()" shape=ellipse]
114 [label="17:CtTypeReferenceImpl@Java" shape=ellipse]
115 [label="17:CtVirtualElement@createArg" shape=ellipse]
116 [label="17:CtVariableReadImpl@java" shape=ellipse]
117 [label="17:CtLocalVariableReferenceImpl@java" shape=ellipse]
118 [label="17:CtInvocationImpl@java.createArg()" shape=ellipse]
119 [label="17:CtFieldReferenceImpl@BASEDIR" shape=ellipse]
120 [label="17:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
121 [label="17:CtFieldReadImpl@BASEDIR" shape=ellipse]
122 [label="17:CtLiteralImpl@\"/build.xml\"" shape=ellipse]
123 [label="17:CtTypeReferenceImpl@String" shape=ellipse]
124 [label="17:CtBinaryOperatorImpl@BASEDIR + \"/build.xml\"" shape=ellipse]
125 [label="17:CtInvocationImpl@java.createArg().setValue(BASEDIR + \"/build.xml\")" shape=ellipse]
126 [label="18:CtExecutableReferenceImpl@setValue(java.lang.String)" shape=ellipse]
127 [label="18:CtTypeReferenceImpl@String" shape=ellipse]
128 [label="18:CtVirtualElement@setValue" shape=ellipse]
129 [label="18:CtExecutableReferenceImpl@createArg()" shape=ellipse]
130 [label="18:CtTypeReferenceImpl@Java" shape=ellipse]
131 [label="18:CtVirtualElement@createArg" shape=ellipse]
132 [label="18:CtVariableReadImpl@java" shape=ellipse]
133 [label="18:CtLocalVariableReferenceImpl@java" shape=ellipse]
134 [label="18:CtInvocationImpl@java.createArg()" shape=ellipse]
135 [label="18:CtVariableReadImpl@target" shape=ellipse]
136 [label="18:CtParameterReferenceImpl@target" shape=ellipse]
137 [label="18:CtInvocationImpl@java.createArg().setValue(target)" shape=ellipse]
138 [label="19:CtExecutableReferenceImpl@setFailonerror(boolean)" shape=ellipse]
139 [label="19:CtTypeReferenceImpl@Java" shape=ellipse]
140 [label="19:CtTypeReferenceImpl@boolean" shape=ellipse]
141 [label="19:CtVirtualElement@setFailonerror" shape=ellipse]
142 [label="19:CtVariableReadImpl@java" shape=ellipse]
143 [label="19:CtLocalVariableReferenceImpl@java" shape=ellipse]
144 [label="19:CtLiteralImpl@true" shape=ellipse]
145 [label="19:CtTypeReferenceImpl@boolean" shape=ellipse]
146 [label="19:CtInvocationImpl@java.setFailonerror(true)" shape=ellipse]
147 [label="20:CtTypeReferenceImpl@File" shape=ellipse]
148 [label="20:CtPackageReferenceImpl@" shape=ellipse]
149 [label="20:CtExecutableReferenceImpl@createTemporaryTextFile(java.lang.String)" shape=ellipse]
150 [label="20:CtTypeReferenceImpl@Util" shape=ellipse]
151 [label="20:CtTypeReferenceImpl@File" shape=ellipse]
152 [label="20:CtTypeReferenceImpl@String" shape=ellipse]
153 [label="20:CtVirtualElement@createTemporaryTextFile" shape=ellipse]
154 [label="20:CtTypeAccessImpl@Util" shape=ellipse]
155 [label="20:CtTypeReferenceImpl@Util" shape=ellipse]
156 [label="20:CtLiteralImpl@\"cobertura-test\"" shape=ellipse]
157 [label="20:CtTypeReferenceImpl@String" shape=ellipse]
158 [label="20:CtInvocationImpl@Util.createTemporaryTextFile(\"cobertura-test\")" shape=ellipse]
159 [label="20:CtVirtualElement@output" shape=ellipse]
160 [label="20:CtLocalVariableImpl@File output = Util.createTemporaryTextFile(\"cobertura-test\")" shape=ellipse]
161 [label="21:CtExecutableReferenceImpl@setOutput(File)" shape=ellipse]
162 [label="21:CtTypeReferenceImpl@Java" shape=ellipse]
163 [label="21:CtTypeReferenceImpl@File" shape=ellipse]
164 [label="21:CtVirtualElement@setOutput" shape=ellipse]
165 [label="21:CtVariableReadImpl@java" shape=ellipse]
166 [label="21:CtLocalVariableReferenceImpl@java" shape=ellipse]
167 [label="21:CtVariableReadImpl@output" shape=ellipse]
168 [label="21:CtLocalVariableReferenceImpl@output" shape=ellipse]
169 [label="21:CtInvocationImpl@java.setOutput(output)" shape=ellipse]
170 [label="22:CtTypeReferenceImpl@Path" shape=ellipse]
171 [label="22:CtPackageReferenceImpl@" shape=ellipse]
172 [label="22:CtExecutableReferenceImpl@Path()" shape=ellipse]
173 [label="22:CtTypeReferenceImpl@Path" shape=ellipse]
174 [label="22:CtTypeReferenceImpl@Path" shape=ellipse]
175 [label="22:CtFieldReferenceImpl@TestUtils.project" shape=ellipse]
176 [label="22:CtTypeReferenceImpl@TestUtils" shape=ellipse]
177 [label="22:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
178 [label="22:CtFieldReadImpl@TestUtils.project" shape=ellipse]
179 [label="22:CtTypeAccessImpl@TestUtils" shape=ellipse]
180 [label="22:CtConstructorCallImpl@new Path(TestUtils.project)" shape=ellipse]
181 [label="22:CtVirtualElement@classpath" shape=ellipse]
182 [label="22:CtLocalVariableImpl@Path classpath = new Path(TestUtils.project)" shape=ellipse]
183 [label="23:CtTypeReferenceImpl@PathElement" shape=ellipse]
184 [label="23:CtPackageReferenceImpl@" shape=ellipse]
185 [label="23:CtExecutableReferenceImpl@PathElement()" shape=ellipse]
186 [label="23:CtTypeReferenceImpl@PathElement" shape=ellipse]
187 [label="23:CtTypeReferenceImpl@PathElement" shape=ellipse]
188 [label="23:CtConstructorCallImpl@classpath.new PathElement()" shape=ellipse]
189 [label="23:CtVariableReadImpl@classpath" shape=ellipse]
190 [label="23:CtVirtualElement@pathElement" shape=ellipse]
191 [label="23:CtLocalVariableImpl@PathElement pathElement = classpath.new PathElement()" shape=ellipse]
192 [label="24:CtExecutableReferenceImpl@setPath(java.lang.String)" shape=ellipse]
193 [label="24:CtTypeReferenceImpl@PathElement" shape=ellipse]
194 [label="24:CtTypeReferenceImpl@String" shape=ellipse]
195 [label="24:CtVirtualElement@setPath" shape=ellipse]
196 [label="24:CtVariableReadImpl@pathElement" shape=ellipse]
197 [label="24:CtLocalVariableReferenceImpl@pathElement" shape=ellipse]
198 [label="24:CtExecutableReferenceImpl@getProperty(java.lang.String)" shape=ellipse]
199 [label="24:CtTypeReferenceImpl@System" shape=ellipse]
200 [label="24:CtTypeReferenceImpl@String" shape=ellipse]
201 [label="24:CtTypeReferenceImpl@String" shape=ellipse]
202 [label="24:CtVirtualElement@getProperty" shape=ellipse]
203 [label="24:CtTypeAccessImpl@System" shape=ellipse]
204 [label="24:CtTypeReferenceImpl@System" shape=ellipse]
205 [label="24:CtLiteralImpl@\"java.class.path\"" shape=ellipse]
206 [label="24:CtTypeReferenceImpl@String" shape=ellipse]
207 [label="24:CtInvocationImpl@System.getProperty(\"java.class.path\")" shape=ellipse]
208 [label="24:CtInvocationImpl@pathElement.setPath(System.getProperty(\"java.class.path\"))" shape=ellipse]
209 [label="25:CtExecutableReferenceImpl@add()" shape=ellipse]
210 [label="25:CtTypeReferenceImpl@Path" shape=ellipse]
211 [label="25:CtVirtualElement@add" shape=ellipse]
212 [label="25:CtVariableReadImpl@classpath" shape=ellipse]
213 [label="25:CtLocalVariableReferenceImpl@classpath" shape=ellipse]
214 [label="25:CtExecutableReferenceImpl@getCoberturaDefaultClasspath()" shape=ellipse]
215 [label="25:CtTypeReferenceImpl@TestUtils" shape=ellipse]
216 [label="25:CtVirtualElement@getCoberturaDefaultClasspath" shape=ellipse]
217 [label="25:CtTypeAccessImpl@TestUtils" shape=ellipse]
218 [label="25:CtTypeReferenceImpl@TestUtils" shape=ellipse]
219 [label="25:CtInvocationImpl@TestUtils.getCoberturaDefaultClasspath()" shape=ellipse]
220 [label="25:CtInvocationImpl@classpath.add(TestUtils.getCoberturaDefaultClasspath())" shape=ellipse]
221 [label="26:CtExecutableReferenceImpl@add(PathElement)" shape=ellipse]
222 [label="26:CtTypeReferenceImpl@Path" shape=ellipse]
223 [label="26:CtTypeReferenceImpl@PathElement" shape=ellipse]
224 [label="26:CtVirtualElement@add" shape=ellipse]
225 [label="26:CtVariableReadImpl@classpath" shape=ellipse]
226 [label="26:CtLocalVariableReferenceImpl@classpath" shape=ellipse]
227 [label="26:CtVariableReadImpl@pathElement" shape=ellipse]
228 [label="26:CtLocalVariableReferenceImpl@pathElement" shape=ellipse]
229 [label="26:CtInvocationImpl@classpath.add(pathElement)" shape=ellipse]
230 [label="27:CtExecutableReferenceImpl@setClasspath(Path)" shape=ellipse]
231 [label="27:CtTypeReferenceImpl@Java" shape=ellipse]
232 [label="27:CtTypeReferenceImpl@Path" shape=ellipse]
233 [label="27:CtVirtualElement@setClasspath" shape=ellipse]
234 [label="27:CtVariableReadImpl@java" shape=ellipse]
235 [label="27:CtLocalVariableReferenceImpl@java" shape=ellipse]
236 [label="27:CtVariableReadImpl@classpath" shape=ellipse]
237 [label="27:CtLocalVariableReferenceImpl@classpath" shape=ellipse]
238 [label="27:CtInvocationImpl@java.setClasspath(classpath)" shape=ellipse]
239 [label="29:CtExecutableReferenceImpl@executeJava()" shape=ellipse]
240 [label="29:CtTypeReferenceImpl@Java" shape=ellipse]
241 [label="29:CtVirtualElement@executeJava" shape=ellipse]
242 [label="29:CtVariableReadImpl@java" shape=ellipse]
243 [label="29:CtLocalVariableReferenceImpl@java" shape=ellipse]
244 [label="29:CtInvocationImpl@java.executeJava()" shape=ellipse]
245 [label="28:CtBlockImpl@\{
    java.executeJava();
\}" shape=ellipse]
246 [label="31:CtExecutableReferenceImpl@exists()" shape=ellipse]
247 [label="31:CtTypeReferenceImpl@File" shape=ellipse]
248 [label="31:CtTypeReferenceImpl@boolean" shape=ellipse]
249 [label="31:CtVirtualElement@exists" shape=ellipse]
250 [label="31:CtVariableReadImpl@output" shape=ellipse]
251 [label="31:CtLocalVariableReferenceImpl@output" shape=ellipse]
252 [label="31:CtInvocationImpl@output.exists()" shape=ellipse]
253 [label="32:CtExecutableReferenceImpl@println(char[])" shape=ellipse]
254 [label="32:CtTypeReferenceImpl@PrintStream" shape=ellipse]
255 [label="32:CtTypeReferenceImpl@void" shape=ellipse]
256 [label="32:CtArrayTypeReferenceImpl@char[]" shape=ellipse]
257 [label="32:CtVirtualElement@println" shape=ellipse]
258 [label="32:CtFieldReferenceImpl@java.lang.System.out" shape=ellipse]
259 [label="32:CtTypeReferenceImpl@System" shape=ellipse]
260 [label="32:CtTypeReferenceImpl@PrintStream" shape=ellipse]
261 [label="32:CtFieldReadImpl@System.out" shape=ellipse]
262 [label="32:CtTypeAccessImpl@System" shape=ellipse]
263 [label="33:CtLiteralImpl@\"\n\n\nOutput from Ant for \"" shape=ellipse]
264 [label="33:CtTypeReferenceImpl@String" shape=ellipse]
265 [label="33:CtVariableReadImpl@testName" shape=ellipse]
266 [label="33:CtParameterReferenceImpl@testName" shape=ellipse]
267 [label="33:CtBinaryOperatorImpl@(\"\n\n\nOutput from Ant for \" + testName)" shape=ellipse]
268 [label="33:CtTypeReferenceImpl@String" shape=ellipse]
269 [label="34:CtLiteralImpl@\" test:\n----------------------------------------\n\"" shape=ellipse]
270 [label="34:CtTypeReferenceImpl@String" shape=ellipse]
271 [label="33:CtBinaryOperatorImpl@((\"\n\n\nOutput from Ant for \" + testName) + \" test:\n----------------------------------------\n\")" shape=ellipse]
272 [label="33:CtTypeReferenceImpl@String" shape=ellipse]
273 [label="35:CtExecutableReferenceImpl@getText(File)" shape=ellipse]
274 [label="35:CtTypeReferenceImpl@Util" shape=ellipse]
275 [label="35:CtTypeReferenceImpl@File" shape=ellipse]
276 [label="35:CtVirtualElement@getText" shape=ellipse]
277 [label="35:CtTypeAccessImpl@Util" shape=ellipse]
278 [label="35:CtTypeReferenceImpl@Util" shape=ellipse]
279 [label="35:CtVariableReadImpl@output" shape=ellipse]
280 [label="35:CtLocalVariableReferenceImpl@output" shape=ellipse]
281 [label="35:CtInvocationImpl@Util.getText(output)" shape=ellipse]
282 [label="33:CtBinaryOperatorImpl@(((\"\n\n\nOutput from Ant for \" + testName) + \" test:\n----------------------------------------\n\") + Util.getText(output))" shape=ellipse]
283 [label="36:CtLiteralImpl@\"----------------------------------------\"" shape=ellipse]
284 [label="36:CtTypeReferenceImpl@String" shape=ellipse]
285 [label="33:CtBinaryOperatorImpl@(((\"\n\n\nOutput from Ant for \" + testName) + \" test:\n----------------------------------------\n\") + Util.getText(output)) + \"----------------------------------------\"" shape=ellipse]
286 [label="32:CtInvocationImpl@System.out.println((((\"\n\n\nOutput from Ant for \" + testName) + \" test:\n----------------------------------------\n\") + Util.getText(output)) + \"----------------------------------------\")" shape=ellipse]
287 [label="37:CtExecutableReferenceImpl@delete()" shape=ellipse]
288 [label="37:CtTypeReferenceImpl@File" shape=ellipse]
289 [label="37:CtVirtualElement@delete" shape=ellipse]
290 [label="37:CtVariableReadImpl@output" shape=ellipse]
291 [label="37:CtLocalVariableReferenceImpl@output" shape=ellipse]
292 [label="37:CtInvocationImpl@output.delete()" shape=ellipse]
293 [label="31:CtBlockImpl@\{
    System.out.println((((\"\n\n\nOutput from Ant for \" + testName) + \" test:\n----------------------------------------\n\") + Util.getText(output)) + \"----------------------------------------\");
    output.delete();
\}" shape=ellipse]
294 [label="31:CtIfImpl@if (output.exists()) \{
    System.out.println((((\"\n\n\nOutput from Ant for \" + testName) + \" test:\n----------------------------------------\n\") + Util.getText(output)) + \"----------------------------------------\");
    output.delete();
\}" shape=ellipse]
295 [label="30:CtBlockImpl@\{
    if (output.exists()) \{
        System.out.println((((\"\n\n\nOutput from Ant for \" + testName) + \" test:\n----------------------------------------\n\") + Util.getText(output)) + \"----------------------------------------\");
        output.delete();
    \}
\}" shape=ellipse]
296 [label="28:CtTryImpl@try \{
    java.executeJava();
\} finally \{
    if (output.exists()) \{
        System.out.println((((\"\n\n\nOutput from Ant for \" + testName) + \" test:\n----------------------------------------\n\") + Util.getText(output)) + \"----------------------------------------\");
        output.delete();
    \}
\}" shape=ellipse]
297 [label="2:CtBlockImpl@\{
    Java java = new Java();
    java.setProject(project);
    java.setTaskName(\"java\");
    java.setClassname(\"org.apache.tools.ant.launch.Launcher\");
    java.setFork(true);
    AntUtil.transferCoberturaDataFileProperty(java);
    if (forkedJVMDebugPort > 0) \{
        java.createJvmarg().setValue(\"-Xdebug\");
        java.createJvmarg().setValue((\"-Xrunjdwp:transport=dt_socket,address=\" + forkedJVMDebugPort) + \",server=y,suspend=y\");
    \}
    java.createArg().setValue(\"-f\");
    java.createArg().setValue(BASEDIR + \"/build.xml\");
    java.createArg().setValue(target);
    java.setFailonerror(true);
    File output = Util.createTemporaryTextFile(\"cobertura-test\");
    java.setOutput(output);
    Path classpath = new Path(TestUtils.project);
    PathElement pathElement = classpath.new PathElement();
    pathElement.setPath(System.getProperty(\"java.class.path\"));
    classpath.add(TestUtils.getCoberturaDefaultClasspath());
    classpath.add(pathElement);
    java.setClasspath(classpath);
    try \{
        java.executeJava();
    \} finally \{
        if (output.exists()) \{
            System.out.println((((\"\n\n\nOutput from Ant for \" + testName) + \" test:\n----------------------------------------\n\") + Util.getText(output)) + \"----------------------------------------\");
            output.delete();
        \}
    \}
\}" shape=ellipse]
298 [label="2:CtMethodImpl@private static void runTestAntScript(String testName, String target) throws IOException \{
    Java java = new Java();
    java.setProject(project);
    java.setTaskName(\"java\");
    java.setClassname(\"org.apache.tools.ant.launch.Launcher\");
    java.setFork(true);
    AntUtil.transferCoberturaDataFileProperty(java);
    if (forkedJVMDebugPort > 0) \{
        java.createJvmarg().setValue(\"-Xdebug\");
        java.createJvmarg().setValue((\"-Xrunjdwp:transport=dt_socket,address=\" + forkedJVMDebugPort) + \",server=y,suspend=y\");
    \}
    java.createArg().setValue(\"-f\");
    java.createArg().setValue(BASEDIR + \"/build.xml\");
    java.createArg().setValue(target);
    java.setFailonerror(true);
    File output = Util.createTemporaryTextFile(\"cobertura-test\");
    java.setOutput(output);
    Path classpath = new Path(TestUtils.project);
    PathElement pathElement = classpath.new PathElement();
    pathElement.setPath(System.getProperty(\"java.class.path\"));
    classpath.add(TestUtils.getCoberturaDefaultClasspath());
    classpath.add(pathElement);
    java.setClasspath(classpath);
    try \{
        java.executeJava();
    \} finally \{
        if (output.exists()) \{
            System.out.println((((\"\n\n\nOutput from Ant for \" + testName) + \" test:\n----------------------------------------\n\") + Util.getText(output)) + \"----------------------------------------\");
            output.delete();
        \}
    \}
\}" shape=ellipse]
299 [label="22:Insert@INSERT" shape=ellipse]
300 [label="22:CtPackageReferenceImpl@" shape=ellipse]
301 [label="22:CtTypeReferenceImpl@Java" shape=ellipse]
302 [label="22:CtLocalVariableReferenceImpl@java" shape=ellipse]
303 [label="22:CtVariableReadImpl@java" shape=ellipse]
304 [label="22:CtPackageReferenceImpl@" shape=ellipse]
305 [label="22:CtTypeReferenceImpl@Java" shape=ellipse]
306 [label="22:CtTypeReferenceImpl@boolean" shape=ellipse]
307 [label="22:CtExecutableReferenceImpl@setFailonerror(boolean)" shape=ellipse]
308 [label="22:CtTypeReferenceImpl@boolean" shape=ellipse]
309 [label="22:CtLiteralImpl@true" shape=ellipse]
310 [label="22:CtInvocationImpl@java.setFailonerror(true)" shape=ellipse]
311 [label="22:CtVirtualElement@setFailonerror" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
6 -> 7 [label="AST"];
8 -> 9 [label="AST"];
10 -> 11 [label="AST"];
10 -> 12 [label="AST"];
13 -> 10 [label="AST"];
14 -> 19 [label="Define-Use"];
14 -> 29 [label="Define-Use"];
14 -> 38 [label="Define-Use"];
14 -> 47 [label="Define-Use"];
14 -> 58 [label="Define-Use"];
14 -> 73 [label="Define-Use"];
14 -> 84 [label="Define-Use"];
14 -> 105 [label="Define-Use"];
14 -> 116 [label="Define-Use"];
14 -> 132 [label="Define-Use"];
14 -> 142 [label="Define-Use"];
14 -> 165 [label="Define-Use"];
14 -> 234 [label="Define-Use"];
14 -> 242 [label="Define-Use"];
15 -> 14 [label="AST"];
15 -> 8 [label="AST"];
15 -> 13 [label="AST"];
16 -> 17 [label="AST"];
19 -> 20 [label="AST"];
21 -> 22 [label="AST"];
23 -> 21 [label="AST"];
24 -> 18 [label="AST"];
24 -> 19 [label="AST"];
24 -> 16 [label="AST"];
24 -> 23 [label="AST"];
25 -> 26 [label="AST"];
25 -> 27 [label="AST"];
29 -> 30 [label="AST"];
31 -> 32 [label="AST"];
33 -> 28 [label="AST"];
33 -> 29 [label="AST"];
33 -> 25 [label="AST"];
33 -> 31 [label="AST"];
34 -> 35 [label="AST"];
34 -> 36 [label="AST"];
38 -> 39 [label="AST"];
40 -> 41 [label="AST"];
42 -> 37 [label="AST"];
42 -> 38 [label="AST"];
42 -> 34 [label="AST"];
42 -> 40 [label="AST"];
43 -> 44 [label="AST"];
43 -> 45 [label="AST"];
47 -> 48 [label="AST"];
49 -> 50 [label="AST"];
51 -> 46 [label="AST"];
51 -> 47 [label="AST"];
51 -> 43 [label="AST"];
51 -> 49 [label="AST"];
52 -> 53 [label="AST"];
52 -> 54 [label="AST"];
56 -> 57 [label="AST"];
58 -> 59 [label="AST"];
60 -> 55 [label="AST"];
60 -> 56 [label="AST"];
60 -> 52 [label="AST"];
60 -> 58 [label="AST"];
61 -> 62 [label="AST"];
63 -> 61 [label="AST"];
64 -> 65 [label="AST"];
66 -> 63 [label="AST"];
66 -> 64 [label="AST"];
66 -> 97 [label="Control Dep"];
66 -> 78 [label="Control Dep"];
66 -> 67 [label="Control Dep"];
66 -> 75 [label="Control Dep"];
66 -> 70 [label="Control Dep"];
66 -> 73 [label="Control Dep"];
66 -> 76 [label="Control Dep"];
66 -> 96 [label="Control Dep"];
66 -> 79 [label="Control Dep"];
66 -> 86 [label="Control Dep"];
66 -> 81 [label="Control Dep"];
66 -> 84 [label="Control Dep"];
66 -> 95 [label="Control Dep"];
66 -> 92 [label="Control Dep"];
66 -> 87 [label="Control Dep"];
66 -> 91 [label="Control Dep"];
66 -> 93 [label="Control Dep"];
67 -> 68 [label="AST"];
70 -> 71 [label="AST"];
73 -> 74 [label="AST"];
75 -> 72 [label="AST"];
75 -> 73 [label="AST"];
75 -> 70 [label="AST"];
76 -> 77 [label="AST"];
78 -> 69 [label="AST"];
78 -> 75 [label="AST"];
78 -> 67 [label="AST"];
78 -> 76 [label="AST"];
81 -> 82 [label="AST"];
84 -> 85 [label="AST"];
86 -> 83 [label="AST"];
86 -> 84 [label="AST"];
86 -> 81 [label="AST"];
87 -> 88 [label="AST"];
89 -> 90 [label="AST"];
91 -> 89 [label="AST"];
92 -> 87 [label="AST"];
92 -> 91 [label="AST"];
93 -> 94 [label="AST"];
95 -> 92 [label="AST"];
95 -> 93 [label="AST"];
96 -> 80 [label="AST"];
96 -> 86 [label="AST"];
96 -> 79 [label="AST"];
96 -> 95 [label="AST"];
97 -> 78 [label="AST"];
97 -> 96 [label="AST"];
98 -> 66 [label="AST"];
98 -> 97 [label="AST"];
99 -> 100 [label="AST"];
102 -> 103 [label="AST"];
105 -> 106 [label="AST"];
107 -> 104 [label="AST"];
107 -> 105 [label="AST"];
107 -> 102 [label="AST"];
108 -> 109 [label="AST"];
110 -> 101 [label="AST"];
110 -> 107 [label="AST"];
110 -> 99 [label="AST"];
110 -> 108 [label="AST"];
113 -> 114 [label="AST"];
116 -> 117 [label="AST"];
118 -> 115 [label="AST"];
118 -> 116 [label="AST"];
118 -> 113 [label="AST"];
119 -> 120 [label="AST"];
121 -> 119 [label="AST"];
122 -> 123 [label="AST"];
124 -> 121 [label="AST"];
124 -> 122 [label="AST"];
125 -> 112 [label="AST"];
125 -> 118 [label="AST"];
125 -> 111 [label="AST"];
125 -> 124 [label="AST"];
126 -> 127 [label="AST"];
129 -> 130 [label="AST"];
132 -> 133 [label="AST"];
134 -> 131 [label="AST"];
134 -> 132 [label="AST"];
134 -> 129 [label="AST"];
135 -> 136 [label="AST"];
137 -> 128 [label="AST"];
137 -> 134 [label="AST"];
137 -> 126 [label="AST"];
137 -> 135 [label="AST"];
138 -> 139 [label="AST"];
138 -> 140 [label="AST"];
142 -> 143 [label="AST"];
144 -> 145 [label="AST"];
146 -> 141 [label="AST"];
146 -> 142 [label="AST"];
146 -> 138 [label="AST"];
146 -> 144 [label="AST"];
147 -> 148 [label="AST"];
149 -> 150 [label="AST"];
149 -> 151 [label="AST"];
149 -> 152 [label="AST"];
154 -> 155 [label="AST"];
156 -> 157 [label="AST"];
158 -> 153 [label="AST"];
158 -> 154 [label="AST"];
158 -> 149 [label="AST"];
158 -> 156 [label="AST"];
159 -> 167 [label="Define-Use"];
159 -> 250 [label="Define-Use"];
159 -> 279 [label="Define-Use"];
159 -> 290 [label="Define-Use"];
160 -> 159 [label="AST"];
160 -> 147 [label="AST"];
160 -> 158 [label="AST"];
161 -> 162 [label="AST"];
161 -> 163 [label="AST"];
165 -> 166 [label="AST"];
167 -> 168 [label="AST"];
169 -> 164 [label="AST"];
169 -> 165 [label="AST"];
169 -> 161 [label="AST"];
169 -> 167 [label="AST"];
170 -> 171 [label="AST"];
172 -> 173 [label="AST"];
172 -> 174 [label="AST"];
175 -> 176 [label="AST"];
175 -> 177 [label="AST"];
178 -> 179 [label="AST"];
178 -> 175 [label="AST"];
178 -> 181 [label="Data Dep"];
180 -> 172 [label="AST"];
180 -> 178 [label="AST"];
181 -> 212 [label="Define-Use"];
181 -> 225 [label="Define-Use"];
181 -> 236 [label="Define-Use"];
182 -> 181 [label="AST"];
182 -> 170 [label="AST"];
182 -> 180 [label="AST"];
183 -> 184 [label="AST"];
185 -> 186 [label="AST"];
185 -> 187 [label="AST"];
188 -> 185 [label="AST"];
188 -> 189 [label="AST"];
189 -> 190 [label="Data Dep"];
190 -> 196 [label="Define-Use"];
190 -> 227 [label="Define-Use"];
191 -> 190 [label="AST"];
191 -> 183 [label="AST"];
191 -> 188 [label="AST"];
192 -> 193 [label="AST"];
192 -> 194 [label="AST"];
196 -> 197 [label="AST"];
198 -> 199 [label="AST"];
198 -> 200 [label="AST"];
198 -> 201 [label="AST"];
203 -> 204 [label="AST"];
205 -> 206 [label="AST"];
207 -> 202 [label="AST"];
207 -> 203 [label="AST"];
207 -> 198 [label="AST"];
207 -> 205 [label="AST"];
208 -> 195 [label="AST"];
208 -> 196 [label="AST"];
208 -> 192 [label="AST"];
208 -> 207 [label="AST"];
209 -> 210 [label="AST"];
212 -> 213 [label="AST"];
214 -> 215 [label="AST"];
217 -> 218 [label="AST"];
219 -> 216 [label="AST"];
219 -> 217 [label="AST"];
219 -> 214 [label="AST"];
220 -> 211 [label="AST"];
220 -> 212 [label="AST"];
220 -> 209 [label="AST"];
220 -> 219 [label="AST"];
221 -> 222 [label="AST"];
221 -> 223 [label="AST"];
225 -> 226 [label="AST"];
227 -> 228 [label="AST"];
229 -> 224 [label="AST"];
229 -> 225 [label="AST"];
229 -> 221 [label="AST"];
229 -> 227 [label="AST"];
230 -> 231 [label="AST"];
230 -> 232 [label="AST"];
234 -> 235 [label="AST"];
236 -> 237 [label="AST"];
238 -> 233 [label="AST"];
238 -> 234 [label="AST"];
238 -> 230 [label="AST"];
238 -> 236 [label="AST"];
239 -> 240 [label="AST"];
242 -> 243 [label="AST"];
244 -> 241 [label="AST"];
244 -> 242 [label="AST"];
244 -> 239 [label="AST"];
245 -> 244 [label="AST"];
246 -> 247 [label="AST"];
246 -> 248 [label="AST"];
250 -> 251 [label="AST"];
252 -> 249 [label="AST"];
252 -> 250 [label="AST"];
252 -> 246 [label="AST"];
252 -> 293 [label="Control Dep"];
252 -> 286 [label="Control Dep"];
252 -> 253 [label="Control Dep"];
252 -> 261 [label="Control Dep"];
252 -> 285 [label="Control Dep"];
252 -> 282 [label="Control Dep"];
252 -> 271 [label="Control Dep"];
252 -> 267 [label="Control Dep"];
252 -> 263 [label="Control Dep"];
252 -> 265 [label="Control Dep"];
252 -> 269 [label="Control Dep"];
252 -> 281 [label="Control Dep"];
252 -> 273 [label="Control Dep"];
252 -> 277 [label="Control Dep"];
252 -> 279 [label="Control Dep"];
252 -> 283 [label="Control Dep"];
252 -> 292 [label="Control Dep"];
252 -> 287 [label="Control Dep"];
252 -> 290 [label="Control Dep"];
253 -> 254 [label="AST"];
253 -> 255 [label="AST"];
253 -> 256 [label="AST"];
258 -> 259 [label="AST"];
258 -> 260 [label="AST"];
261 -> 262 [label="AST"];
261 -> 258 [label="AST"];
263 -> 264 [label="AST"];
265 -> 266 [label="AST"];
267 -> 268 [label="AST"];
267 -> 263 [label="AST"];
267 -> 265 [label="AST"];
269 -> 270 [label="AST"];
271 -> 272 [label="AST"];
271 -> 267 [label="AST"];
271 -> 269 [label="AST"];
273 -> 274 [label="AST"];
273 -> 275 [label="AST"];
277 -> 278 [label="AST"];
279 -> 280 [label="AST"];
281 -> 276 [label="AST"];
281 -> 277 [label="AST"];
281 -> 273 [label="AST"];
281 -> 279 [label="AST"];
282 -> 271 [label="AST"];
282 -> 281 [label="AST"];
283 -> 284 [label="AST"];
285 -> 282 [label="AST"];
285 -> 283 [label="AST"];
286 -> 257 [label="AST"];
286 -> 261 [label="AST"];
286 -> 253 [label="AST"];
286 -> 285 [label="AST"];
287 -> 288 [label="AST"];
290 -> 291 [label="AST"];
292 -> 289 [label="AST"];
292 -> 290 [label="AST"];
292 -> 287 [label="AST"];
293 -> 286 [label="AST"];
293 -> 292 [label="AST"];
294 -> 252 [label="AST"];
294 -> 293 [label="AST"];
295 -> 294 [label="AST"];
296 -> 245 [label="AST"];
296 -> 295 [label="AST"];
297 -> 15 [label="AST"];
297 -> 24 [label="AST"];
297 -> 33 [label="AST"];
297 -> 42 [label="AST"];
297 -> 51 [label="AST"];
297 -> 60 [label="AST"];
297 -> 98 [label="AST"];
297 -> 110 [label="AST"];
297 -> 125 [label="AST"];
297 -> 137 [label="AST"];
297 -> 146 [label="AST"];
297 -> 160 [label="AST"];
297 -> 169 [label="AST"];
297 -> 182 [label="AST"];
297 -> 191 [label="AST"];
297 -> 208 [label="AST"];
297 -> 220 [label="AST"];
297 -> 229 [label="AST"];
297 -> 238 [label="AST"];
297 -> 296 [label="AST"];
297 -> 299 [label="Action"];
298 -> 1 [label="AST"];
298 -> 0 [label="AST"];
298 -> 2 [label="AST"];
298 -> 4 [label="AST"];
298 -> 6 [label="AST"];
298 -> 297 [label="AST"];
299 -> 310 [label="Action"];
301 -> 300 [label="AST"];
302 -> 301 [label="AST"];
303 -> 302 [label="AST"];
305 -> 304 [label="AST"];
307 -> 305 [label="AST"];
307 -> 306 [label="AST"];
309 -> 308 [label="AST"];
310 -> 311 [label="AST"];
310 -> 303 [label="AST"];
310 -> 307 [label="AST"];
310 -> 309 [label="AST"];
}