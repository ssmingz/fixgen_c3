digraph "instrumentClass#?,InputStream" {
0 [label="2:CtTypeReferenceImpl@InstrumentationResult" shape=ellipse]
1 [label="2:CtPackageReferenceImpl@" shape=ellipse]
2 [label="2:CtVirtualElement@instrumentClass" shape=ellipse]
3 [label="2:CtParameterImpl@InputStream inputStream" shape=ellipse]
4 [label="2:CtTypeReferenceImpl@InputStream" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@IOException" shape=ellipse]
6 [label="2:CtPackageReferenceImpl@" shape=ellipse]
7 [label="3:CtTypeReferenceImpl@ClassReader" shape=ellipse]
8 [label="3:CtPackageReferenceImpl@" shape=ellipse]
9 [label="3:CtExecutableReferenceImpl@ClassReader()" shape=ellipse]
10 [label="3:CtTypeReferenceImpl@ClassReader" shape=ellipse]
11 [label="3:CtTypeReferenceImpl@ClassReader" shape=ellipse]
12 [label="3:CtVariableReadImpl@inputStream" shape=ellipse]
13 [label="3:CtParameterReferenceImpl@inputStream" shape=ellipse]
14 [label="3:CtConstructorCallImpl@new ClassReader(inputStream)" shape=ellipse]
15 [label="3:CtVirtualElement@cr0" shape=ellipse]
16 [label="3:CtLocalVariableImpl@ClassReader cr0 = new ClassReader(inputStream)" shape=ellipse]
17 [label="4:CtTypeReferenceImpl@ClassWriter" shape=ellipse]
18 [label="4:CtPackageReferenceImpl@" shape=ellipse]
19 [label="4:CtExecutableReferenceImpl@ClassWriter(int)" shape=ellipse]
20 [label="4:CtTypeReferenceImpl@ClassWriter" shape=ellipse]
21 [label="4:CtTypeReferenceImpl@ClassWriter" shape=ellipse]
22 [label="4:CtTypeReferenceImpl@int" shape=ellipse]
23 [label="4:CtLiteralImpl@0" shape=ellipse]
24 [label="4:CtTypeReferenceImpl@int" shape=ellipse]
25 [label="4:CtConstructorCallImpl@new ClassWriter(0)" shape=ellipse]
26 [label="4:CtVirtualElement@cw0" shape=ellipse]
27 [label="4:CtLocalVariableImpl@ClassWriter cw0 = new ClassWriter(0)" shape=ellipse]
28 [label="5:CtTypeReferenceImpl@DetectIgnoredCodeClassVisitor" shape=ellipse]
29 [label="5:CtPackageReferenceImpl@" shape=ellipse]
30 [label="6:CtExecutableReferenceImpl@DetectIgnoredCodeClassVisitor()" shape=ellipse]
31 [label="6:CtTypeReferenceImpl@DetectIgnoredCodeClassVisitor" shape=ellipse]
32 [label="6:CtTypeReferenceImpl@DetectIgnoredCodeClassVisitor" shape=ellipse]
33 [label="6:CtVariableReadImpl@cw0" shape=ellipse]
34 [label="6:CtLocalVariableReferenceImpl@cw0" shape=ellipse]
35 [label="6:CtFieldReferenceImpl@ignoreTrivial" shape=ellipse]
36 [label="6:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
37 [label="6:CtFieldReadImpl@ignoreTrivial" shape=ellipse]
38 [label="6:CtFieldReferenceImpl@ignoreMethodAnnotations" shape=ellipse]
39 [label="6:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
40 [label="6:CtFieldReadImpl@ignoreMethodAnnotations" shape=ellipse]
41 [label="6:CtConstructorCallImpl@new DetectIgnoredCodeClassVisitor(cw0, ignoreTrivial, ignoreMethodAnnotations)" shape=ellipse]
42 [label="5:CtVirtualElement@detectIgnoredCv" shape=ellipse]
43 [label="5:CtLocalVariableImpl@DetectIgnoredCodeClassVisitor detectIgnoredCv = new DetectIgnoredCodeClassVisitor(cw0, ignoreTrivial, ignoreMethodAnnotations)" shape=ellipse]
44 [label="7:CtTypeReferenceImpl@DetectDuplicatedCodeClassVisitor" shape=ellipse]
45 [label="7:CtPackageReferenceImpl@" shape=ellipse]
46 [label="7:CtExecutableReferenceImpl@DetectDuplicatedCodeClassVisitor()" shape=ellipse]
47 [label="7:CtTypeReferenceImpl@DetectDuplicatedCodeClassVisitor" shape=ellipse]
48 [label="7:CtTypeReferenceImpl@DetectDuplicatedCodeClassVisitor" shape=ellipse]
49 [label="7:CtVariableReadImpl@detectIgnoredCv" shape=ellipse]
50 [label="7:CtLocalVariableReferenceImpl@detectIgnoredCv" shape=ellipse]
51 [label="7:CtConstructorCallImpl@new DetectDuplicatedCodeClassVisitor(detectIgnoredCv)" shape=ellipse]
52 [label="7:CtVirtualElement@cv0" shape=ellipse]
53 [label="7:CtLocalVariableImpl@DetectDuplicatedCodeClassVisitor cv0 = new DetectDuplicatedCodeClassVisitor(detectIgnoredCv)" shape=ellipse]
54 [label="8:CtExecutableReferenceImpl@accept(DetectDuplicatedCodeClassVisitor,int)" shape=ellipse]
55 [label="8:CtTypeReferenceImpl@ClassReader" shape=ellipse]
56 [label="8:CtTypeReferenceImpl@DetectDuplicatedCodeClassVisitor" shape=ellipse]
57 [label="8:CtTypeReferenceImpl@int" shape=ellipse]
58 [label="8:CtVirtualElement@accept" shape=ellipse]
59 [label="8:CtVariableReadImpl@cr0" shape=ellipse]
60 [label="8:CtLocalVariableReferenceImpl@cr0" shape=ellipse]
61 [label="8:CtVariableReadImpl@cv0" shape=ellipse]
62 [label="8:CtLocalVariableReferenceImpl@cv0" shape=ellipse]
63 [label="8:CtLiteralImpl@0" shape=ellipse]
64 [label="8:CtTypeReferenceImpl@int" shape=ellipse]
65 [label="8:CtInvocationImpl@cr0.accept(cv0, 0)" shape=ellipse]
66 [label="9:CtTypeReferenceImpl@ClassReader" shape=ellipse]
67 [label="9:CtPackageReferenceImpl@" shape=ellipse]
68 [label="9:CtExecutableReferenceImpl@ClassReader()" shape=ellipse]
69 [label="9:CtTypeReferenceImpl@ClassReader" shape=ellipse]
70 [label="9:CtTypeReferenceImpl@ClassReader" shape=ellipse]
71 [label="9:CtExecutableReferenceImpl@toByteArray()" shape=ellipse]
72 [label="9:CtTypeReferenceImpl@ClassWriter" shape=ellipse]
73 [label="9:CtVirtualElement@toByteArray" shape=ellipse]
74 [label="9:CtVariableReadImpl@cw0" shape=ellipse]
75 [label="9:CtLocalVariableReferenceImpl@cw0" shape=ellipse]
76 [label="9:CtInvocationImpl@cw0.toByteArray()" shape=ellipse]
77 [label="9:CtConstructorCallImpl@new ClassReader(cw0.toByteArray())" shape=ellipse]
78 [label="9:CtVirtualElement@cr" shape=ellipse]
79 [label="9:CtLocalVariableImpl@ClassReader cr = new ClassReader(cw0.toByteArray())" shape=ellipse]
80 [label="10:CtTypeReferenceImpl@ClassWriter" shape=ellipse]
81 [label="10:CtPackageReferenceImpl@" shape=ellipse]
82 [label="10:CtExecutableReferenceImpl@ClassWriter(int)" shape=ellipse]
83 [label="10:CtTypeReferenceImpl@ClassWriter" shape=ellipse]
84 [label="10:CtTypeReferenceImpl@ClassWriter" shape=ellipse]
85 [label="10:CtTypeReferenceImpl@int" shape=ellipse]
86 [label="10:CtLiteralImpl@0" shape=ellipse]
87 [label="10:CtTypeReferenceImpl@int" shape=ellipse]
88 [label="10:CtConstructorCallImpl@new ClassWriter(0)" shape=ellipse]
89 [label="10:CtVirtualElement@cw" shape=ellipse]
90 [label="10:CtLocalVariableImpl@ClassWriter cw = new ClassWriter(0)" shape=ellipse]
91 [label="11:CtTypeReferenceImpl@BuildClassMapClassVisitor" shape=ellipse]
92 [label="11:CtPackageReferenceImpl@" shape=ellipse]
93 [label="12:CtExecutableReferenceImpl@BuildClassMapClassVisitor()" shape=ellipse]
94 [label="12:CtTypeReferenceImpl@BuildClassMapClassVisitor" shape=ellipse]
95 [label="12:CtTypeReferenceImpl@BuildClassMapClassVisitor" shape=ellipse]
96 [label="13:CtVariableReadImpl@cw" shape=ellipse]
97 [label="13:CtLocalVariableReferenceImpl@cw" shape=ellipse]
98 [label="14:CtFieldReferenceImpl@ignoreRegexes" shape=ellipse]
99 [label="14:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
100 [label="14:CtFieldReadImpl@ignoreRegexes" shape=ellipse]
101 [label="15:CtExecutableReferenceImpl@getDuplicatesLinesCollector()" shape=ellipse]
102 [label="15:CtTypeReferenceImpl@DetectDuplicatedCodeClassVisitor" shape=ellipse]
103 [label="15:CtVirtualElement@getDuplicatesLinesCollector" shape=ellipse]
104 [label="15:CtVariableReadImpl@cv0" shape=ellipse]
105 [label="15:CtLocalVariableReferenceImpl@cv0" shape=ellipse]
106 [label="15:CtInvocationImpl@cv0.getDuplicatesLinesCollector()" shape=ellipse]
107 [label="16:CtExecutableReferenceImpl@getIgnoredMethodNamesAndSignatures()" shape=ellipse]
108 [label="16:CtTypeReferenceImpl@DetectIgnoredCodeClassVisitor" shape=ellipse]
109 [label="16:CtVirtualElement@getIgnoredMethodNamesAndSignatures" shape=ellipse]
110 [label="16:CtVariableReadImpl@detectIgnoredCv" shape=ellipse]
111 [label="16:CtLocalVariableReferenceImpl@detectIgnoredCv" shape=ellipse]
112 [label="16:CtInvocationImpl@detectIgnoredCv.getIgnoredMethodNamesAndSignatures()" shape=ellipse]
113 [label="12:CtConstructorCallImpl@new BuildClassMapClassVisitor(cw, ignoreRegexes, cv0.getDuplicatesLinesCollector(), detectIgnoredCv.getIgnoredMethodNamesAndSignatures())" shape=ellipse]
114 [label="11:CtVirtualElement@cv" shape=ellipse]
115 [label="11:CtLocalVariableImpl@BuildClassMapClassVisitor cv = new BuildClassMapClassVisitor(cw, ignoreRegexes, cv0.getDuplicatesLinesCollector(), detectIgnoredCv.getIgnoredMethodNamesAndSignatures())" shape=ellipse]
116 [label="17:CtExecutableReferenceImpl@accept(BuildClassMapClassVisitor)" shape=ellipse]
117 [label="17:CtTypeReferenceImpl@ClassReader" shape=ellipse]
118 [label="17:CtTypeReferenceImpl@BuildClassMapClassVisitor" shape=ellipse]
119 [label="17:CtVirtualElement@accept" shape=ellipse]
120 [label="17:CtVariableReadImpl@cr" shape=ellipse]
121 [label="17:CtLocalVariableReferenceImpl@cr" shape=ellipse]
122 [label="17:CtVariableReadImpl@cv" shape=ellipse]
123 [label="17:CtLocalVariableReferenceImpl@cv" shape=ellipse]
124 [label="17:CtTypeAccessImpl@EXPAND_FRAMES" shape=ellipse]
125 [label="17:CtTypeReferenceImpl@EXPAND_FRAMES" shape=ellipse]
126 [label="17:CtInvocationImpl@cr.accept(cv, EXPAND_FRAMES)" shape=ellipse]
127 [label="18:CtExecutableReferenceImpl@isDebugEnabled()" shape=ellipse]
128 [label="18:CtTypeReferenceImpl@logger" shape=ellipse]
129 [label="18:CtTypeReferenceImpl@boolean" shape=ellipse]
130 [label="18:CtVirtualElement@isDebugEnabled" shape=ellipse]
131 [label="18:CtFieldReferenceImpl@logger" shape=ellipse]
132 [label="18:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
133 [label="18:CtFieldReadImpl@logger" shape=ellipse]
134 [label="18:CtInvocationImpl@logger.isDebugEnabled()" shape=ellipse]
135 [label="19:CtExecutableReferenceImpl@debug(java.lang.String)" shape=ellipse]
136 [label="19:CtTypeReferenceImpl@logger" shape=ellipse]
137 [label="19:CtTypeReferenceImpl@String" shape=ellipse]
138 [label="19:CtVirtualElement@debug" shape=ellipse]
139 [label="19:CtFieldReferenceImpl@logger" shape=ellipse]
140 [label="19:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
141 [label="19:CtFieldReadImpl@logger" shape=ellipse]
142 [label="19:CtLiteralImpl@\"=============== Detected duplicated code =============\"" shape=ellipse]
143 [label="19:CtTypeReferenceImpl@String" shape=ellipse]
144 [label="19:CtInvocationImpl@logger.debug(\"=============== Detected duplicated code =============\")" shape=ellipse]
145 [label="20:CtTypeReferenceImpl@Map<Integer, Map<Integer, Integer>>" shape=ellipse]
146 [label="20:CtPackageReferenceImpl@" shape=ellipse]
147 [label="20:CtTypeReferenceImpl@Integer" shape=ellipse]
148 [label="20:CtTypeReferenceImpl@Map<Integer, Integer>" shape=ellipse]
149 [label="20:CtExecutableReferenceImpl@getDuplicatesLinesCollector()" shape=ellipse]
150 [label="20:CtTypeReferenceImpl@DetectDuplicatedCodeClassVisitor" shape=ellipse]
151 [label="20:CtTypeReferenceImpl@Map<Integer, Map<Integer, Integer>>" shape=ellipse]
152 [label="20:CtVirtualElement@getDuplicatesLinesCollector" shape=ellipse]
153 [label="20:CtVariableReadImpl@cv0" shape=ellipse]
154 [label="20:CtLocalVariableReferenceImpl@cv0" shape=ellipse]
155 [label="20:CtInvocationImpl@cv0.getDuplicatesLinesCollector()" shape=ellipse]
156 [label="20:CtVirtualElement@l" shape=ellipse]
157 [label="20:CtLocalVariableImpl@Map<Integer, Map<Integer, Integer>> l = cv0.getDuplicatesLinesCollector()" shape=ellipse]
158 [label="21:CtTypeReferenceImpl@Map.Entry<Integer, Map<Integer, Integer>>" shape=ellipse]
159 [label="21:CtTypeReferenceImpl@Map" shape=ellipse]
160 [label="21:CtTypeReferenceImpl@Integer" shape=ellipse]
161 [label="21:CtTypeReferenceImpl@Map<Integer, Integer>" shape=ellipse]
162 [label="21:CtVirtualElement@m" shape=ellipse]
163 [label="21:CtLocalVariableImpl@Map.Entry<Integer, Map<Integer, Integer>> m" shape=ellipse]
164 [label="21:CtExecutableReferenceImpl@entrySet()" shape=ellipse]
165 [label="21:CtTypeReferenceImpl@Map<Integer, Map<Integer, Integer>>" shape=ellipse]
166 [label="21:CtVirtualElement@entrySet" shape=ellipse]
167 [label="21:CtVariableReadImpl@l" shape=ellipse]
168 [label="21:CtLocalVariableReferenceImpl@l" shape=ellipse]
169 [label="21:CtInvocationImpl@l.entrySet()" shape=ellipse]
170 [label="22:CtExecutableReferenceImpl@getValue()" shape=ellipse]
171 [label="22:CtTypeReferenceImpl@m" shape=ellipse]
172 [label="22:CtVirtualElement@getValue" shape=ellipse]
173 [label="22:CtVariableReadImpl@m" shape=ellipse]
174 [label="22:CtLocalVariableReferenceImpl@m" shape=ellipse]
175 [label="22:CtInvocationImpl@m.getValue()" shape=ellipse]
176 [label="22:CtLiteralImpl@null" shape=ellipse]
177 [label="22:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
178 [label="22:CtBinaryOperatorImpl@m.getValue() != null" shape=ellipse]
179 [label="23:CtTypeReferenceImpl@Map.Entry<Integer, Integer>" shape=ellipse]
180 [label="23:CtTypeReferenceImpl@Map" shape=ellipse]
181 [label="23:CtTypeReferenceImpl@Integer" shape=ellipse]
182 [label="23:CtTypeReferenceImpl@Integer" shape=ellipse]
183 [label="23:CtVirtualElement@pair" shape=ellipse]
184 [label="23:CtLocalVariableImpl@Map.Entry<Integer, Integer> pair" shape=ellipse]
185 [label="23:CtExecutableReferenceImpl@entrySet()" shape=ellipse]
186 [label="23:CtVirtualElement@entrySet" shape=ellipse]
187 [label="23:CtExecutableReferenceImpl@getValue()" shape=ellipse]
188 [label="23:CtTypeReferenceImpl@m" shape=ellipse]
189 [label="23:CtVirtualElement@getValue" shape=ellipse]
190 [label="23:CtVariableReadImpl@m" shape=ellipse]
191 [label="23:CtLocalVariableReferenceImpl@m" shape=ellipse]
192 [label="23:CtInvocationImpl@m.getValue()" shape=ellipse]
193 [label="23:CtInvocationImpl@m.getValue().entrySet()" shape=ellipse]
194 [label="24:CtExecutableReferenceImpl@debug()" shape=ellipse]
195 [label="24:CtTypeReferenceImpl@logger" shape=ellipse]
196 [label="24:CtVirtualElement@debug" shape=ellipse]
197 [label="24:CtFieldReferenceImpl@logger" shape=ellipse]
198 [label="24:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
199 [label="24:CtFieldReadImpl@logger" shape=ellipse]
200 [label="25:CtExecutableReferenceImpl@getClassName()" shape=ellipse]
201 [label="25:CtVirtualElement@getClassName" shape=ellipse]
202 [label="25:CtExecutableReferenceImpl@getClassMap()" shape=ellipse]
203 [label="25:CtTypeReferenceImpl@BuildClassMapClassVisitor" shape=ellipse]
204 [label="25:CtVirtualElement@getClassMap" shape=ellipse]
205 [label="25:CtVariableReadImpl@cv" shape=ellipse]
206 [label="25:CtLocalVariableReferenceImpl@cv" shape=ellipse]
207 [label="25:CtInvocationImpl@cv.getClassMap()" shape=ellipse]
208 [label="25:CtInvocationImpl@cv.getClassMap().getClassName()" shape=ellipse]
209 [label="25:CtLiteralImpl@\":\"" shape=ellipse]
210 [label="25:CtTypeReferenceImpl@String" shape=ellipse]
211 [label="25:CtBinaryOperatorImpl@(cv.getClassMap().getClassName() + \":\")" shape=ellipse]
212 [label="25:CtExecutableReferenceImpl@getKey()" shape=ellipse]
213 [label="25:CtTypeReferenceImpl@m" shape=ellipse]
214 [label="25:CtVirtualElement@getKey" shape=ellipse]
215 [label="25:CtVariableReadImpl@m" shape=ellipse]
216 [label="25:CtLocalVariableReferenceImpl@m" shape=ellipse]
217 [label="25:CtInvocationImpl@m.getKey()" shape=ellipse]
218 [label="25:CtBinaryOperatorImpl@((cv.getClassMap().getClassName() + \":\") + m.getKey())" shape=ellipse]
219 [label="25:CtLiteralImpl@\" \"" shape=ellipse]
220 [label="25:CtTypeReferenceImpl@String" shape=ellipse]
221 [label="25:CtBinaryOperatorImpl@(((cv.getClassMap().getClassName() + \":\") + m.getKey()) + \" \")" shape=ellipse]
222 [label="25:CtExecutableReferenceImpl@getKey()" shape=ellipse]
223 [label="25:CtTypeReferenceImpl@pair" shape=ellipse]
224 [label="25:CtVirtualElement@getKey" shape=ellipse]
225 [label="25:CtVariableReadImpl@pair" shape=ellipse]
226 [label="25:CtLocalVariableReferenceImpl@pair" shape=ellipse]
227 [label="25:CtInvocationImpl@pair.getKey()" shape=ellipse]
228 [label="25:CtBinaryOperatorImpl@((((cv.getClassMap().getClassName() + \":\") + m.getKey()) + \" \") + pair.getKey())" shape=ellipse]
229 [label="26:CtLiteralImpl@\"->\"" shape=ellipse]
230 [label="26:CtTypeReferenceImpl@String" shape=ellipse]
231 [label="25:CtBinaryOperatorImpl@(((((cv.getClassMap().getClassName() + \":\") + m.getKey()) + \" \") + pair.getKey()) + \"->\")" shape=ellipse]
232 [label="27:CtExecutableReferenceImpl@getValue()" shape=ellipse]
233 [label="27:CtTypeReferenceImpl@pair" shape=ellipse]
234 [label="27:CtVirtualElement@getValue" shape=ellipse]
235 [label="27:CtVariableReadImpl@pair" shape=ellipse]
236 [label="27:CtLocalVariableReferenceImpl@pair" shape=ellipse]
237 [label="27:CtInvocationImpl@pair.getValue()" shape=ellipse]
238 [label="25:CtBinaryOperatorImpl@(((((cv.getClassMap().getClassName() + \":\") + m.getKey()) + \" \") + pair.getKey()) + \"->\") + pair.getValue()" shape=ellipse]
239 [label="24:CtInvocationImpl@logger.debug((((((cv.getClassMap().getClassName() + \":\") + m.getKey()) + \" \") + pair.getKey()) + \"->\") + pair.getValue())" shape=ellipse]
240 [label="23:CtBlockImpl@\{
    logger.debug((((((cv.getClassMap().getClassName() + \":\") + m.getKey()) + \" \") + pair.getKey()) + \"->\") + pair.getValue());
\}" shape=ellipse]
241 [label="23:CtForEachImpl@for (Map.Entry<Integer, Integer> pair : m.getValue().entrySet()) \{
    logger.debug((((((cv.getClassMap().getClassName() + \":\") + m.getKey()) + \" \") + pair.getKey()) + \"->\") + pair.getValue());
\}" shape=ellipse]
242 [label="22:CtBlockImpl@\{
    for (Map.Entry<Integer, Integer> pair : m.getValue().entrySet()) \{
        logger.debug((((((cv.getClassMap().getClassName() + \":\") + m.getKey()) + \" \") + pair.getKey()) + \"->\") + pair.getValue());
    \}
\}" shape=ellipse]
243 [label="22:CtIfImpl@if (m.getValue() != null) \{
    for (Map.Entry<Integer, Integer> pair : m.getValue().entrySet()) \{
        logger.debug((((((cv.getClassMap().getClassName() + \":\") + m.getKey()) + \" \") + pair.getKey()) + \"->\") + pair.getValue());
    \}
\}" shape=ellipse]
244 [label="21:CtBlockImpl@\{
    if (m.getValue() != null) \{
        for (Map.Entry<Integer, Integer> pair : m.getValue().entrySet()) \{
            logger.debug((((((cv.getClassMap().getClassName() + \":\") + m.getKey()) + \" \") + pair.getKey()) + \"->\") + pair.getValue());
        \}
    \}
\}" shape=ellipse]
245 [label="21:CtForEachImpl@for (Map.Entry<Integer, Map<Integer, Integer>> m : l.entrySet()) \{
    if (m.getValue() != null) \{
        for (Map.Entry<Integer, Integer> pair : m.getValue().entrySet()) \{
            logger.debug((((((cv.getClassMap().getClassName() + \":\") + m.getKey()) + \" \") + pair.getKey()) + \"->\") + pair.getValue());
        \}
    \}
\}" shape=ellipse]
246 [label="31:CtExecutableReferenceImpl@debug(java.lang.String)" shape=ellipse]
247 [label="31:CtTypeReferenceImpl@logger" shape=ellipse]
248 [label="31:CtTypeReferenceImpl@String" shape=ellipse]
249 [label="31:CtVirtualElement@debug" shape=ellipse]
250 [label="31:CtFieldReferenceImpl@logger" shape=ellipse]
251 [label="31:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
252 [label="31:CtFieldReadImpl@logger" shape=ellipse]
253 [label="31:CtLiteralImpl@\"=============== End of detected duplicated code ======\"" shape=ellipse]
254 [label="31:CtTypeReferenceImpl@String" shape=ellipse]
255 [label="31:CtInvocationImpl@logger.debug(\"=============== End of detected duplicated code ======\")" shape=ellipse]
256 [label="18:CtBlockImpl@\{
    logger.debug(\"=============== Detected duplicated code =============\");
    Map<Integer, Map<Integer, Integer>> l = cv0.getDuplicatesLinesCollector();
    for (Map.Entry<Integer, Map<Integer, Integer>> m : l.entrySet()) \{
        if (m.getValue() != null) \{
            for (Map.Entry<Integer, Integer> pair : m.getValue().entrySet()) \{
                logger.debug((((((cv.getClassMap().getClassName() + \":\") + m.getKey()) + \" \") + pair.getKey()) + \"->\") + pair.getValue());
            \}
        \}
    \}
    logger.debug(\"=============== End of detected duplicated code ======\");
\}" shape=ellipse]
257 [label="18:CtIfImpl@if (logger.isDebugEnabled()) \{
    logger.debug(\"=============== Detected duplicated code =============\");
    Map<Integer, Map<Integer, Integer>> l = cv0.getDuplicatesLinesCollector();
    for (Map.Entry<Integer, Map<Integer, Integer>> m : l.entrySet()) \{
        if (m.getValue() != null) \{
            for (Map.Entry<Integer, Integer> pair : m.getValue().entrySet()) \{
                logger.debug((((((cv.getClassMap().getClassName() + \":\") + m.getKey()) + \" \") + pair.getKey()) + \"->\") + pair.getValue());
            \}
        \}
    \}
    logger.debug(\"=============== End of detected duplicated code ======\");
\}" shape=ellipse]
258 [label="33:CtExecutableReferenceImpl@debug()" shape=ellipse]
259 [label="33:CtTypeReferenceImpl@logger" shape=ellipse]
260 [label="33:CtVirtualElement@debug" shape=ellipse]
261 [label="33:CtFieldReferenceImpl@logger" shape=ellipse]
262 [label="33:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
263 [label="33:CtFieldReadImpl@logger" shape=ellipse]
264 [label="34:CtLiteralImpl@\"Migrating classmap in projectData to store in *.ser file: \"" shape=ellipse]
265 [label="34:CtTypeReferenceImpl@String" shape=ellipse]
266 [label="35:CtExecutableReferenceImpl@getClassName()" shape=ellipse]
267 [label="35:CtVirtualElement@getClassName" shape=ellipse]
268 [label="35:CtExecutableReferenceImpl@getClassMap()" shape=ellipse]
269 [label="35:CtTypeReferenceImpl@BuildClassMapClassVisitor" shape=ellipse]
270 [label="35:CtVirtualElement@getClassMap" shape=ellipse]
271 [label="35:CtVariableReadImpl@cv" shape=ellipse]
272 [label="35:CtLocalVariableReferenceImpl@cv" shape=ellipse]
273 [label="35:CtInvocationImpl@cv.getClassMap()" shape=ellipse]
274 [label="35:CtInvocationImpl@cv.getClassMap().getClassName()" shape=ellipse]
275 [label="34:CtBinaryOperatorImpl@\"Migrating classmap in projectData to store in *.ser file: \" + cv.getClassMap().getClassName()" shape=ellipse]
276 [label="33:CtInvocationImpl@logger.debug(\"Migrating classmap in projectData to store in *.ser file: \" + cv.getClassMap().getClassName())" shape=ellipse]
277 [label="36:CtExecutableReferenceImpl@applyOnProjectData()" shape=ellipse]
278 [label="36:CtVirtualElement@applyOnProjectData" shape=ellipse]
279 [label="36:CtExecutableReferenceImpl@getClassMap()" shape=ellipse]
280 [label="36:CtTypeReferenceImpl@BuildClassMapClassVisitor" shape=ellipse]
281 [label="36:CtVirtualElement@getClassMap" shape=ellipse]
282 [label="36:CtVariableReadImpl@cv" shape=ellipse]
283 [label="36:CtLocalVariableReferenceImpl@cv" shape=ellipse]
284 [label="36:CtInvocationImpl@cv.getClassMap()" shape=ellipse]
285 [label="36:CtFieldReferenceImpl@projectData" shape=ellipse]
286 [label="36:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
287 [label="36:CtFieldReadImpl@projectData" shape=ellipse]
288 [label="36:CtExecutableReferenceImpl@shouldBeInstrumented()" shape=ellipse]
289 [label="36:CtTypeReferenceImpl@BuildClassMapClassVisitor" shape=ellipse]
290 [label="36:CtVirtualElement@shouldBeInstrumented" shape=ellipse]
291 [label="36:CtVariableReadImpl@cv" shape=ellipse]
292 [label="36:CtLocalVariableReferenceImpl@cv" shape=ellipse]
293 [label="36:CtInvocationImpl@cv.shouldBeInstrumented()" shape=ellipse]
294 [label="36:CtInvocationImpl@cv.getClassMap().applyOnProjectData(projectData, cv.shouldBeInstrumented())" shape=ellipse]
295 [label="37:CtExecutableReferenceImpl@shouldBeInstrumented()" shape=ellipse]
296 [label="37:CtTypeReferenceImpl@BuildClassMapClassVisitor" shape=ellipse]
297 [label="37:CtTypeReferenceImpl@boolean" shape=ellipse]
298 [label="37:CtVirtualElement@shouldBeInstrumented" shape=ellipse]
299 [label="37:CtVariableReadImpl@cv" shape=ellipse]
300 [label="37:CtLocalVariableReferenceImpl@cv" shape=ellipse]
301 [label="37:CtInvocationImpl@cv.shouldBeInstrumented()" shape=ellipse]
302 [label="38:CtTypeReferenceImpl@ClassReader" shape=ellipse]
303 [label="38:CtPackageReferenceImpl@" shape=ellipse]
304 [label="38:CtExecutableReferenceImpl@ClassReader()" shape=ellipse]
305 [label="38:CtTypeReferenceImpl@ClassReader" shape=ellipse]
306 [label="38:CtTypeReferenceImpl@ClassReader" shape=ellipse]
307 [label="38:CtExecutableReferenceImpl@toByteArray()" shape=ellipse]
308 [label="38:CtTypeReferenceImpl@ClassWriter" shape=ellipse]
309 [label="38:CtVirtualElement@toByteArray" shape=ellipse]
310 [label="38:CtVariableReadImpl@cw0" shape=ellipse]
311 [label="38:CtLocalVariableReferenceImpl@cw0" shape=ellipse]
312 [label="38:CtInvocationImpl@cw0.toByteArray()" shape=ellipse]
313 [label="38:CtConstructorCallImpl@new ClassReader(cw0.toByteArray())" shape=ellipse]
314 [label="38:CtVirtualElement@cr2" shape=ellipse]
315 [label="38:CtLocalVariableImpl@ClassReader cr2 = new ClassReader(cw0.toByteArray())" shape=ellipse]
316 [label="39:CtTypeReferenceImpl@ClassWriter" shape=ellipse]
317 [label="39:CtPackageReferenceImpl@" shape=ellipse]
318 [label="39:CtExecutableReferenceImpl@ClassWriter()" shape=ellipse]
319 [label="39:CtTypeReferenceImpl@ClassWriter" shape=ellipse]
320 [label="39:CtTypeReferenceImpl@ClassWriter" shape=ellipse]
321 [label="39:CtFieldReferenceImpl@ClassWriter.COMPUTE_FRAMES" shape=ellipse]
322 [label="39:CtTypeReferenceImpl@ClassWriter" shape=ellipse]
323 [label="39:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
324 [label="39:CtFieldReadImpl@ClassWriter.COMPUTE_FRAMES" shape=ellipse]
325 [label="39:CtTypeAccessImpl@ClassWriter" shape=ellipse]
326 [label="39:CtConstructorCallImpl@new ClassWriter(ClassWriter.COMPUTE_FRAMES)" shape=ellipse]
327 [label="39:CtVirtualElement@cw2" shape=ellipse]
328 [label="39:CtLocalVariableImpl@ClassWriter cw2 = new ClassWriter(ClassWriter.COMPUTE_FRAMES)" shape=ellipse]
329 [label="40:CtExecutableReferenceImpl@assignCounterIds()" shape=ellipse]
330 [label="40:CtVirtualElement@assignCounterIds" shape=ellipse]
331 [label="40:CtExecutableReferenceImpl@getClassMap()" shape=ellipse]
332 [label="40:CtTypeReferenceImpl@BuildClassMapClassVisitor" shape=ellipse]
333 [label="40:CtVirtualElement@getClassMap" shape=ellipse]
334 [label="40:CtVariableReadImpl@cv" shape=ellipse]
335 [label="40:CtLocalVariableReferenceImpl@cv" shape=ellipse]
336 [label="40:CtInvocationImpl@cv.getClassMap()" shape=ellipse]
337 [label="40:CtInvocationImpl@cv.getClassMap().assignCounterIds()" shape=ellipse]
338 [label="41:CtExecutableReferenceImpl@debug()" shape=ellipse]
339 [label="41:CtTypeReferenceImpl@logger" shape=ellipse]
340 [label="41:CtVirtualElement@debug" shape=ellipse]
341 [label="41:CtFieldReferenceImpl@logger" shape=ellipse]
342 [label="41:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
343 [label="41:CtFieldReadImpl@logger" shape=ellipse]
344 [label="42:CtLiteralImpl@\"Assigned \"" shape=ellipse]
345 [label="42:CtTypeReferenceImpl@String" shape=ellipse]
346 [label="42:CtExecutableReferenceImpl@getMaxCounterId()" shape=ellipse]
347 [label="42:CtVirtualElement@getMaxCounterId" shape=ellipse]
348 [label="42:CtExecutableReferenceImpl@getClassMap()" shape=ellipse]
349 [label="42:CtTypeReferenceImpl@BuildClassMapClassVisitor" shape=ellipse]
350 [label="42:CtVirtualElement@getClassMap" shape=ellipse]
351 [label="42:CtVariableReadImpl@cv" shape=ellipse]
352 [label="42:CtLocalVariableReferenceImpl@cv" shape=ellipse]
353 [label="42:CtInvocationImpl@cv.getClassMap()" shape=ellipse]
354 [label="42:CtInvocationImpl@cv.getClassMap().getMaxCounterId()" shape=ellipse]
355 [label="42:CtBinaryOperatorImpl@(\"Assigned \" + cv.getClassMap().getMaxCounterId())" shape=ellipse]
356 [label="42:CtLiteralImpl@\" counters for class:\"" shape=ellipse]
357 [label="42:CtTypeReferenceImpl@String" shape=ellipse]
358 [label="42:CtBinaryOperatorImpl@((\"Assigned \" + cv.getClassMap().getMaxCounterId()) + \" counters for class:\")" shape=ellipse]
359 [label="43:CtExecutableReferenceImpl@getClassName()" shape=ellipse]
360 [label="43:CtVirtualElement@getClassName" shape=ellipse]
361 [label="43:CtExecutableReferenceImpl@getClassMap()" shape=ellipse]
362 [label="43:CtTypeReferenceImpl@BuildClassMapClassVisitor" shape=ellipse]
363 [label="43:CtVirtualElement@getClassMap" shape=ellipse]
364 [label="43:CtVariableReadImpl@cv" shape=ellipse]
365 [label="43:CtLocalVariableReferenceImpl@cv" shape=ellipse]
366 [label="43:CtInvocationImpl@cv.getClassMap()" shape=ellipse]
367 [label="43:CtInvocationImpl@cv.getClassMap().getClassName()" shape=ellipse]
368 [label="42:CtBinaryOperatorImpl@((\"Assigned \" + cv.getClassMap().getMaxCounterId()) + \" counters for class:\") + cv.getClassMap().getClassName()" shape=ellipse]
369 [label="41:CtInvocationImpl@logger.debug(((\"Assigned \" + cv.getClassMap().getMaxCounterId()) + \" counters for class:\") + cv.getClassMap().getClassName())" shape=ellipse]
370 [label="44:CtTypeReferenceImpl@InjectCodeClassInstrumenter" shape=ellipse]
371 [label="44:CtPackageReferenceImpl@" shape=ellipse]
372 [label="45:CtExecutableReferenceImpl@InjectCodeClassInstrumenter()" shape=ellipse]
373 [label="45:CtTypeReferenceImpl@InjectCodeClassInstrumenter" shape=ellipse]
374 [label="45:CtTypeReferenceImpl@InjectCodeClassInstrumenter" shape=ellipse]
375 [label="46:CtVariableReadImpl@cw2" shape=ellipse]
376 [label="46:CtLocalVariableReferenceImpl@cw2" shape=ellipse]
377 [label="47:CtFieldReferenceImpl@ignoreRegexes" shape=ellipse]
378 [label="47:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
379 [label="47:CtFieldReadImpl@ignoreRegexes" shape=ellipse]
380 [label="48:CtFieldReferenceImpl@threadsafeRigorous" shape=ellipse]
381 [label="48:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
382 [label="48:CtFieldReadImpl@threadsafeRigorous" shape=ellipse]
383 [label="49:CtExecutableReferenceImpl@getClassMap()" shape=ellipse]
384 [label="49:CtTypeReferenceImpl@BuildClassMapClassVisitor" shape=ellipse]
385 [label="49:CtVirtualElement@getClassMap" shape=ellipse]
386 [label="49:CtVariableReadImpl@cv" shape=ellipse]
387 [label="49:CtLocalVariableReferenceImpl@cv" shape=ellipse]
388 [label="49:CtInvocationImpl@cv.getClassMap()" shape=ellipse]
389 [label="50:CtExecutableReferenceImpl@getDuplicatesLinesCollector()" shape=ellipse]
390 [label="50:CtTypeReferenceImpl@DetectDuplicatedCodeClassVisitor" shape=ellipse]
391 [label="50:CtVirtualElement@getDuplicatesLinesCollector" shape=ellipse]
392 [label="50:CtVariableReadImpl@cv0" shape=ellipse]
393 [label="50:CtLocalVariableReferenceImpl@cv0" shape=ellipse]
394 [label="50:CtInvocationImpl@cv0.getDuplicatesLinesCollector()" shape=ellipse]
395 [label="51:CtExecutableReferenceImpl@getIgnoredMethodNamesAndSignatures()" shape=ellipse]
396 [label="51:CtTypeReferenceImpl@DetectIgnoredCodeClassVisitor" shape=ellipse]
397 [label="51:CtVirtualElement@getIgnoredMethodNamesAndSignatures" shape=ellipse]
398 [label="51:CtVariableReadImpl@detectIgnoredCv" shape=ellipse]
399 [label="51:CtLocalVariableReferenceImpl@detectIgnoredCv" shape=ellipse]
400 [label="51:CtInvocationImpl@detectIgnoredCv.getIgnoredMethodNamesAndSignatures()" shape=ellipse]
401 [label="45:CtConstructorCallImpl@new InjectCodeClassInstrumenter(cw2, ignoreRegexes, threadsafeRigorous, cv.getClassMap(), cv0.getDuplicatesLinesCollector(), detectIgnoredCv.getIgnoredMethodNamesAndSignatures())" shape=ellipse]
402 [label="44:CtVirtualElement@cv2" shape=ellipse]
403 [label="44:CtLocalVariableImpl@InjectCodeClassInstrumenter cv2 = new InjectCodeClassInstrumenter(cw2, ignoreRegexes, threadsafeRigorous, cv.getClassMap(), cv0.getDuplicatesLinesCollector(), detectIgnoredCv.getIgnoredMethodNamesAndSignatures())" shape=ellipse]
404 [label="52:CtExecutableReferenceImpl@accept(CheckClassAdapter)" shape=ellipse]
405 [label="52:CtTypeReferenceImpl@ClassReader" shape=ellipse]
406 [label="52:CtTypeReferenceImpl@CheckClassAdapter" shape=ellipse]
407 [label="52:CtVirtualElement@accept" shape=ellipse]
408 [label="52:CtVariableReadImpl@cr2" shape=ellipse]
409 [label="52:CtLocalVariableReferenceImpl@cr2" shape=ellipse]
410 [label="52:CtExecutableReferenceImpl@CheckClassAdapter()" shape=ellipse]
411 [label="52:CtTypeReferenceImpl@CheckClassAdapter" shape=ellipse]
412 [label="52:CtTypeReferenceImpl@CheckClassAdapter" shape=ellipse]
413 [label="52:CtVariableReadImpl@cv2" shape=ellipse]
414 [label="52:CtLocalVariableReferenceImpl@cv2" shape=ellipse]
415 [label="52:CtConstructorCallImpl@new CheckClassAdapter(cv2)" shape=ellipse]
416 [label="52:CtTypeAccessImpl@SKIP_FRAMES" shape=ellipse]
417 [label="52:CtTypeReferenceImpl@SKIP_FRAMES" shape=ellipse]
418 [label="52:CtInvocationImpl@cr2.accept(new CheckClassAdapter(cv2), SKIP_FRAMES)" shape=ellipse]
419 [label="53:CtTypeReferenceImpl@StringWriter" shape=ellipse]
420 [label="53:CtPackageReferenceImpl@" shape=ellipse]
421 [label="53:CtExecutableReferenceImpl@StringWriter()" shape=ellipse]
422 [label="53:CtTypeReferenceImpl@StringWriter" shape=ellipse]
423 [label="53:CtTypeReferenceImpl@StringWriter" shape=ellipse]
424 [label="53:CtConstructorCallImpl@new StringWriter()" shape=ellipse]
425 [label="53:CtVirtualElement@sw" shape=ellipse]
426 [label="53:CtLocalVariableImpl@StringWriter sw = new StringWriter()" shape=ellipse]
427 [label="54:CtTypeReferenceImpl@PrintWriter" shape=ellipse]
428 [label="54:CtPackageReferenceImpl@" shape=ellipse]
429 [label="54:CtExecutableReferenceImpl@PrintWriter()" shape=ellipse]
430 [label="54:CtTypeReferenceImpl@PrintWriter" shape=ellipse]
431 [label="54:CtTypeReferenceImpl@PrintWriter" shape=ellipse]
432 [label="54:CtVariableReadImpl@sw" shape=ellipse]
433 [label="54:CtLocalVariableReferenceImpl@sw" shape=ellipse]
434 [label="54:CtConstructorCallImpl@new PrintWriter(sw)" shape=ellipse]
435 [label="54:CtVirtualElement@pw" shape=ellipse]
436 [label="54:CtLocalVariableImpl@PrintWriter pw = new PrintWriter(sw)" shape=ellipse]
437 [label="55:CtExecutableReferenceImpl@verify(ClassReader,boolean,PrintWriter)" shape=ellipse]
438 [label="55:CtTypeReferenceImpl@CheckClassAdapter" shape=ellipse]
439 [label="55:CtTypeReferenceImpl@ClassReader" shape=ellipse]
440 [label="55:CtTypeReferenceImpl@boolean" shape=ellipse]
441 [label="55:CtTypeReferenceImpl@PrintWriter" shape=ellipse]
442 [label="55:CtVirtualElement@verify" shape=ellipse]
443 [label="55:CtTypeAccessImpl@CheckClassAdapter" shape=ellipse]
444 [label="55:CtTypeReferenceImpl@CheckClassAdapter" shape=ellipse]
445 [label="55:CtExecutableReferenceImpl@ClassReader()" shape=ellipse]
446 [label="55:CtTypeReferenceImpl@ClassReader" shape=ellipse]
447 [label="55:CtTypeReferenceImpl@ClassReader" shape=ellipse]
448 [label="55:CtExecutableReferenceImpl@toByteArray()" shape=ellipse]
449 [label="55:CtTypeReferenceImpl@ClassWriter" shape=ellipse]
450 [label="55:CtVirtualElement@toByteArray" shape=ellipse]
451 [label="55:CtVariableReadImpl@cw2" shape=ellipse]
452 [label="55:CtLocalVariableReferenceImpl@cw2" shape=ellipse]
453 [label="55:CtInvocationImpl@cw2.toByteArray()" shape=ellipse]
454 [label="55:CtConstructorCallImpl@new ClassReader(cw2.toByteArray())" shape=ellipse]
455 [label="55:CtLiteralImpl@false" shape=ellipse]
456 [label="55:CtTypeReferenceImpl@boolean" shape=ellipse]
457 [label="55:CtVariableReadImpl@pw" shape=ellipse]
458 [label="55:CtLocalVariableReferenceImpl@pw" shape=ellipse]
459 [label="55:CtInvocationImpl@CheckClassAdapter.verify(new ClassReader(cw2.toByteArray()), false, pw)" shape=ellipse]
460 [label="56:CtExecutableReferenceImpl@debug()" shape=ellipse]
461 [label="56:CtTypeReferenceImpl@logger" shape=ellipse]
462 [label="56:CtVirtualElement@debug" shape=ellipse]
463 [label="56:CtFieldReferenceImpl@logger" shape=ellipse]
464 [label="56:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
465 [label="56:CtFieldReadImpl@logger" shape=ellipse]
466 [label="56:CtExecutableReferenceImpl@toString()" shape=ellipse]
467 [label="56:CtTypeReferenceImpl@StringWriter" shape=ellipse]
468 [label="56:CtVirtualElement@toString" shape=ellipse]
469 [label="56:CtVariableReadImpl@sw" shape=ellipse]
470 [label="56:CtLocalVariableReferenceImpl@sw" shape=ellipse]
471 [label="56:CtInvocationImpl@sw.toString()" shape=ellipse]
472 [label="56:CtInvocationImpl@logger.debug(sw.toString())" shape=ellipse]
473 [label="57:CtExecutableReferenceImpl@InstrumentationResult()" shape=ellipse]
474 [label="57:CtTypeReferenceImpl@InstrumentationResult" shape=ellipse]
475 [label="57:CtTypeReferenceImpl@InstrumentationResult" shape=ellipse]
476 [label="57:CtExecutableReferenceImpl@getClassName()" shape=ellipse]
477 [label="57:CtVirtualElement@getClassName" shape=ellipse]
478 [label="57:CtExecutableReferenceImpl@getClassMap()" shape=ellipse]
479 [label="57:CtTypeReferenceImpl@BuildClassMapClassVisitor" shape=ellipse]
480 [label="57:CtVirtualElement@getClassMap" shape=ellipse]
481 [label="57:CtVariableReadImpl@cv" shape=ellipse]
482 [label="57:CtLocalVariableReferenceImpl@cv" shape=ellipse]
483 [label="57:CtInvocationImpl@cv.getClassMap()" shape=ellipse]
484 [label="57:CtInvocationImpl@cv.getClassMap().getClassName()" shape=ellipse]
485 [label="57:CtExecutableReferenceImpl@toByteArray()" shape=ellipse]
486 [label="57:CtTypeReferenceImpl@ClassWriter" shape=ellipse]
487 [label="57:CtVirtualElement@toByteArray" shape=ellipse]
488 [label="57:CtVariableReadImpl@cw2" shape=ellipse]
489 [label="57:CtLocalVariableReferenceImpl@cw2" shape=ellipse]
490 [label="57:CtInvocationImpl@cw2.toByteArray()" shape=ellipse]
491 [label="57:CtConstructorCallImpl@new InstrumentationResult(cv.getClassMap().getClassName(), cw2.toByteArray())" shape=ellipse]
492 [label="57:CtReturnImpl@return new InstrumentationResult(cv.getClassMap().getClassName(), cw2.toByteArray())" shape=ellipse]
493 [label="37:CtBlockImpl@\{
    ClassReader cr2 = new ClassReader(cw0.toByteArray());
    ClassWriter cw2 = new ClassWriter(ClassWriter.COMPUTE_FRAMES);
    cv.getClassMap().assignCounterIds();
    logger.debug(((\"Assigned \" + cv.getClassMap().getMaxCounterId()) + \" counters for class:\") + cv.getClassMap().getClassName());
    InjectCodeClassInstrumenter cv2 = new InjectCodeClassInstrumenter(cw2, ignoreRegexes, threadsafeRigorous, cv.getClassMap(), cv0.getDuplicatesLinesCollector(), detectIgnoredCv.getIgnoredMethodNamesAndSignatures());
    cr2.accept(new CheckClassAdapter(cv2), SKIP_FRAMES);
    StringWriter sw = new StringWriter();
    PrintWriter pw = new PrintWriter(sw);
    CheckClassAdapter.verify(new ClassReader(cw2.toByteArray()), false, pw);
    logger.debug(sw.toString());
    return new InstrumentationResult(cv.getClassMap().getClassName(), cw2.toByteArray());
\}" shape=ellipse]
494 [label="59:CtExecutableReferenceImpl@debug()" shape=ellipse]
495 [label="59:CtTypeReferenceImpl@logger" shape=ellipse]
496 [label="59:CtVirtualElement@debug" shape=ellipse]
497 [label="59:CtFieldReferenceImpl@logger" shape=ellipse]
498 [label="59:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
499 [label="59:CtFieldReadImpl@logger" shape=ellipse]
500 [label="59:CtLiteralImpl@\"Class shouldn't be instrumented: \"" shape=ellipse]
501 [label="59:CtTypeReferenceImpl@String" shape=ellipse]
502 [label="59:CtExecutableReferenceImpl@getClassName()" shape=ellipse]
503 [label="59:CtVirtualElement@getClassName" shape=ellipse]
504 [label="59:CtExecutableReferenceImpl@getClassMap()" shape=ellipse]
505 [label="59:CtTypeReferenceImpl@BuildClassMapClassVisitor" shape=ellipse]
506 [label="59:CtVirtualElement@getClassMap" shape=ellipse]
507 [label="59:CtVariableReadImpl@cv" shape=ellipse]
508 [label="59:CtLocalVariableReferenceImpl@cv" shape=ellipse]
509 [label="59:CtInvocationImpl@cv.getClassMap()" shape=ellipse]
510 [label="59:CtInvocationImpl@cv.getClassMap().getClassName()" shape=ellipse]
511 [label="59:CtBinaryOperatorImpl@\"Class shouldn't be instrumented: \" + cv.getClassMap().getClassName()" shape=ellipse]
512 [label="59:CtInvocationImpl@logger.debug(\"Class shouldn't be instrumented: \" + cv.getClassMap().getClassName())" shape=ellipse]
513 [label="60:CtLiteralImpl@null" shape=ellipse]
514 [label="60:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
515 [label="60:CtReturnImpl@return null" shape=ellipse]
516 [label="58:CtBlockImpl@\{
    logger.debug(\"Class shouldn't be instrumented: \" + cv.getClassMap().getClassName());
    return null;
\}" shape=ellipse]
517 [label="37:CtIfImpl@if (cv.shouldBeInstrumented()) \{
    ClassReader cr2 = new ClassReader(cw0.toByteArray());
    ClassWriter cw2 = new ClassWriter(ClassWriter.COMPUTE_FRAMES);
    cv.getClassMap().assignCounterIds();
    logger.debug(((\"Assigned \" + cv.getClassMap().getMaxCounterId()) + \" counters for class:\") + cv.getClassMap().getClassName());
    InjectCodeClassInstrumenter cv2 = new InjectCodeClassInstrumenter(cw2, ignoreRegexes, threadsafeRigorous, cv.getClassMap(), cv0.getDuplicatesLinesCollector(), detectIgnoredCv.getIgnoredMethodNamesAndSignatures());
    cr2.accept(new CheckClassAdapter(cv2), SKIP_FRAMES);
    StringWriter sw = new StringWriter();
    PrintWriter pw = new PrintWriter(sw);
    CheckClassAdapter.verify(new ClassReader(cw2.toByteArray()), false, pw);
    logger.debug(sw.toString());
    return new InstrumentationResult(cv.getClassMap().getClassName(), cw2.toByteArray());
\} else \{
    logger.debug(\"Class shouldn't be instrumented: \" + cv.getClassMap().getClassName());
    return null;
\}" shape=ellipse]
518 [label="2:CtBlockImpl@\{
    ClassReader cr0 = new ClassReader(inputStream);
    ClassWriter cw0 = new ClassWriter(0);
    DetectIgnoredCodeClassVisitor detectIgnoredCv = new DetectIgnoredCodeClassVisitor(cw0, ignoreTrivial, ignoreMethodAnnotations);
    DetectDuplicatedCodeClassVisitor cv0 = new DetectDuplicatedCodeClassVisitor(detectIgnoredCv);
    cr0.accept(cv0, 0);
    ClassReader cr = new ClassReader(cw0.toByteArray());
    ClassWriter cw = new ClassWriter(0);
    BuildClassMapClassVisitor cv = new BuildClassMapClassVisitor(cw, ignoreRegexes, cv0.getDuplicatesLinesCollector(), detectIgnoredCv.getIgnoredMethodNamesAndSignatures());
    cr.accept(cv, EXPAND_FRAMES);
    if (logger.isDebugEnabled()) \{
        logger.debug(\"=============== Detected duplicated code =============\");
        Map<Integer, Map<Integer, Integer>> l = cv0.getDuplicatesLinesCollector();
        for (Map.Entry<Integer, Map<Integer, Integer>> m : l.entrySet()) \{
            if (m.getValue() != null) \{
                for (Map.Entry<Integer, Integer> pair : m.getValue().entrySet()) \{
                    logger.debug((((((cv.getClassMap().getClassName() + \":\") + m.getKey()) + \" \") + pair.getKey()) + \"->\") + pair.getValue());
                \}
            \}
        \}
        logger.debug(\"=============== End of detected duplicated code ======\");
    \}
    logger.debug(\"Migrating classmap in projectData to store in *.ser file: \" + cv.getClassMap().getClassName());
    cv.getClassMap().applyOnProjectData(projectData, cv.shouldBeInstrumented());
    if (cv.shouldBeInstrumented()) \{
        ClassReader cr2 = new ClassReader(cw0.toByteArray());
        ClassWriter cw2 = new ClassWriter(ClassWriter.COMPUTE_FRAMES);
        cv.getClassMap().assignCounterIds();
        logger.debug(((\"Assigned \" + cv.getClassMap().getMaxCounterId()) + \" counters for class:\") + cv.getClassMap().getClassName());
        InjectCodeClassInstrumenter cv2 = new InjectCodeClassInstrumenter(cw2, ignoreRegexes, threadsafeRigorous, cv.getClassMap(), cv0.getDuplicatesLinesCollector(), detectIgnoredCv.getIgnoredMethodNamesAndSignatures());
        cr2.accept(new CheckClassAdapter(cv2), SKIP_FRAMES);
        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);
        CheckClassAdapter.verify(new ClassReader(cw2.toByteArray()), false, pw);
        logger.debug(sw.toString());
        return new InstrumentationResult(cv.getClassMap().getClassName(), cw2.toByteArray());
    \} else \{
        logger.debug(\"Class shouldn't be instrumented: \" + cv.getClassMap().getClassName());
        return null;
    \}
\}" shape=ellipse]
519 [label="2:CtMethodImpl@public InstrumentationResult instrumentClass(InputStream inputStream) throws IOException \{
    ClassReader cr0 = new ClassReader(inputStream);
    ClassWriter cw0 = new ClassWriter(0);
    DetectIgnoredCodeClassVisitor detectIgnoredCv = new DetectIgnoredCodeClassVisitor(cw0, ignoreTrivial, ignoreMethodAnnotations);
    DetectDuplicatedCodeClassVisitor cv0 = new DetectDuplicatedCodeClassVisitor(detectIgnoredCv);
    cr0.accept(cv0, 0);
    ClassReader cr = new ClassReader(cw0.toByteArray());
    ClassWriter cw = new ClassWriter(0);
    BuildClassMapClassVisitor cv = new BuildClassMapClassVisitor(cw, ignoreRegexes, cv0.getDuplicatesLinesCollector(), detectIgnoredCv.getIgnoredMethodNamesAndSignatures());
    cr.accept(cv, EXPAND_FRAMES);
    if (logger.isDebugEnabled()) \{
        logger.debug(\"=============== Detected duplicated code =============\");
        Map<Integer, Map<Integer, Integer>> l = cv0.getDuplicatesLinesCollector();
        for (Map.Entry<Integer, Map<Integer, Integer>> m : l.entrySet()) \{
            if (m.getValue() != null) \{
                for (Map.Entry<Integer, Integer> pair : m.getValue().entrySet()) \{
                    logger.debug((((((cv.getClassMap().getClassName() + \":\") + m.getKey()) + \" \") + pair.getKey()) + \"->\") + pair.getValue());
                \}
            \}
        \}
        logger.debug(\"=============== End of detected duplicated code ======\");
    \}
    logger.debug(\"Migrating classmap in projectData to store in *.ser file: \" + cv.getClassMap().getClassName());
    cv.getClassMap().applyOnProjectData(projectData, cv.shouldBeInstrumented());
    if (cv.shouldBeInstrumented()) \{
        ClassReader cr2 = new ClassReader(cw0.toByteArray());
        ClassWriter cw2 = new ClassWriter(ClassWriter.COMPUTE_FRAMES);
        cv.getClassMap().assignCounterIds();
        logger.debug(((\"Assigned \" + cv.getClassMap().getMaxCounterId()) + \" counters for class:\") + cv.getClassMap().getClassName());
        InjectCodeClassInstrumenter cv2 = new InjectCodeClassInstrumenter(cw2, ignoreRegexes, threadsafeRigorous, cv.getClassMap(), cv0.getDuplicatesLinesCollector(), detectIgnoredCv.getIgnoredMethodNamesAndSignatures());
        cr2.accept(new CheckClassAdapter(cv2), SKIP_FRAMES);
        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);
        CheckClassAdapter.verify(new ClassReader(cw2.toByteArray()), false, pw);
        logger.debug(sw.toString());
        return new InstrumentationResult(cv.getClassMap().getClassName(), cw2.toByteArray());
    \} else \{
        logger.debug(\"Class shouldn't be instrumented: \" + cv.getClassMap().getClassName());
        return null;
    \}
\}" shape=ellipse]
520 [label="39:Update@UPDATE" shape=ellipse]
521 [label="39:CtPackageReferenceImpl@" shape=ellipse]
522 [label="39:CtTypeReferenceImpl@CoberturaClassWriter" shape=ellipse]
523 [label="39:CtPackageReferenceImpl@" shape=ellipse]
524 [label="39:CtTypeReferenceImpl@CoberturaClassWriter" shape=ellipse]
525 [label="39:CtExecutableReferenceImpl@CoberturaClassWriter()" shape=ellipse]
526 [label="39:CtPackageReferenceImpl@" shape=ellipse]
527 [label="39:CtTypeReferenceImpl@ClassWriter" shape=ellipse]
528 [label="39:CtTypeAccessImpl@ClassWriter" shape=ellipse]
529 [label="39:CtPackageReferenceImpl@" shape=ellipse]
530 [label="39:CtTypeReferenceImpl@ClassWriter" shape=ellipse]
531 [label="39:CtPackageReferenceImpl@" shape=ellipse]
532 [label="39:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
533 [label="39:CtFieldReferenceImpl@ClassWriter.COMPUTE_FRAMES" shape=ellipse]
534 [label="39:CtFieldReadImpl@ClassWriter.COMPUTE_FRAMES" shape=ellipse]
535 [label="39:CtConstructorCallImpl@new CoberturaClassWriter(ClassWriter.COMPUTE_FRAMES)" shape=ellipse]
0 -> 1 [label="AST"];
3 -> 4 [label="AST"];
5 -> 6 [label="AST"];
7 -> 8 [label="AST"];
9 -> 10 [label="AST"];
9 -> 11 [label="AST"];
12 -> 13 [label="AST"];
12 -> 15 [label="Data Dep"];
14 -> 9 [label="AST"];
14 -> 12 [label="AST"];
15 -> 59 [label="Define-Use"];
16 -> 15 [label="AST"];
16 -> 7 [label="AST"];
16 -> 14 [label="AST"];
17 -> 18 [label="AST"];
19 -> 20 [label="AST"];
19 -> 21 [label="AST"];
19 -> 22 [label="AST"];
23 -> 24 [label="AST"];
25 -> 19 [label="AST"];
25 -> 23 [label="AST"];
26 -> 33 [label="Define-Use"];
26 -> 74 [label="Define-Use"];
26 -> 310 [label="Define-Use"];
27 -> 26 [label="AST"];
27 -> 17 [label="AST"];
27 -> 25 [label="AST"];
28 -> 29 [label="AST"];
30 -> 31 [label="AST"];
30 -> 32 [label="AST"];
33 -> 34 [label="AST"];
33 -> 42 [label="Data Dep"];
35 -> 36 [label="AST"];
37 -> 35 [label="AST"];
37 -> 42 [label="Data Dep"];
38 -> 39 [label="AST"];
40 -> 38 [label="AST"];
40 -> 42 [label="Data Dep"];
41 -> 30 [label="AST"];
41 -> 33 [label="AST"];
41 -> 37 [label="AST"];
41 -> 40 [label="AST"];
42 -> 49 [label="Define-Use"];
42 -> 110 [label="Define-Use"];
42 -> 398 [label="Define-Use"];
43 -> 42 [label="AST"];
43 -> 28 [label="AST"];
43 -> 41 [label="AST"];
44 -> 45 [label="AST"];
46 -> 47 [label="AST"];
46 -> 48 [label="AST"];
49 -> 50 [label="AST"];
49 -> 52 [label="Data Dep"];
51 -> 46 [label="AST"];
51 -> 49 [label="AST"];
52 -> 61 [label="Define-Use"];
52 -> 104 [label="Define-Use"];
52 -> 153 [label="Define-Use"];
52 -> 392 [label="Define-Use"];
53 -> 52 [label="AST"];
53 -> 44 [label="AST"];
53 -> 51 [label="AST"];
54 -> 55 [label="AST"];
54 -> 56 [label="AST"];
54 -> 57 [label="AST"];
59 -> 60 [label="AST"];
61 -> 62 [label="AST"];
63 -> 64 [label="AST"];
65 -> 58 [label="AST"];
65 -> 59 [label="AST"];
65 -> 54 [label="AST"];
65 -> 61 [label="AST"];
65 -> 63 [label="AST"];
66 -> 67 [label="AST"];
68 -> 69 [label="AST"];
68 -> 70 [label="AST"];
71 -> 72 [label="AST"];
74 -> 75 [label="AST"];
74 -> 78 [label="Data Dep"];
76 -> 73 [label="AST"];
76 -> 74 [label="AST"];
76 -> 71 [label="AST"];
77 -> 68 [label="AST"];
77 -> 76 [label="AST"];
78 -> 120 [label="Define-Use"];
79 -> 78 [label="AST"];
79 -> 66 [label="AST"];
79 -> 77 [label="AST"];
80 -> 81 [label="AST"];
82 -> 83 [label="AST"];
82 -> 84 [label="AST"];
82 -> 85 [label="AST"];
86 -> 87 [label="AST"];
88 -> 82 [label="AST"];
88 -> 86 [label="AST"];
89 -> 96 [label="Define-Use"];
90 -> 89 [label="AST"];
90 -> 80 [label="AST"];
90 -> 88 [label="AST"];
91 -> 92 [label="AST"];
93 -> 94 [label="AST"];
93 -> 95 [label="AST"];
96 -> 97 [label="AST"];
96 -> 114 [label="Data Dep"];
98 -> 99 [label="AST"];
100 -> 98 [label="AST"];
100 -> 114 [label="Data Dep"];
101 -> 102 [label="AST"];
104 -> 105 [label="AST"];
104 -> 114 [label="Data Dep"];
106 -> 103 [label="AST"];
106 -> 104 [label="AST"];
106 -> 101 [label="AST"];
107 -> 108 [label="AST"];
110 -> 111 [label="AST"];
110 -> 114 [label="Data Dep"];
112 -> 109 [label="AST"];
112 -> 110 [label="AST"];
112 -> 107 [label="AST"];
113 -> 93 [label="AST"];
113 -> 96 [label="AST"];
113 -> 100 [label="AST"];
113 -> 106 [label="AST"];
113 -> 112 [label="AST"];
114 -> 122 [label="Define-Use"];
114 -> 205 [label="Define-Use"];
114 -> 271 [label="Define-Use"];
114 -> 282 [label="Define-Use"];
114 -> 291 [label="Define-Use"];
114 -> 299 [label="Define-Use"];
114 -> 334 [label="Define-Use"];
114 -> 351 [label="Define-Use"];
114 -> 364 [label="Define-Use"];
114 -> 386 [label="Define-Use"];
114 -> 481 [label="Define-Use"];
114 -> 507 [label="Define-Use"];
115 -> 114 [label="AST"];
115 -> 91 [label="AST"];
115 -> 113 [label="AST"];
116 -> 117 [label="AST"];
116 -> 118 [label="AST"];
120 -> 121 [label="AST"];
122 -> 123 [label="AST"];
124 -> 125 [label="AST"];
126 -> 119 [label="AST"];
126 -> 120 [label="AST"];
126 -> 116 [label="AST"];
126 -> 122 [label="AST"];
126 -> 124 [label="AST"];
127 -> 128 [label="AST"];
127 -> 129 [label="AST"];
131 -> 132 [label="AST"];
133 -> 131 [label="AST"];
134 -> 130 [label="AST"];
134 -> 133 [label="AST"];
134 -> 127 [label="AST"];
134 -> 256 [label="Control Dep"];
134 -> 144 [label="Control Dep"];
134 -> 135 [label="Control Dep"];
134 -> 141 [label="Control Dep"];
134 -> 142 [label="Control Dep"];
134 -> 157 [label="Control Dep"];
134 -> 155 [label="Control Dep"];
134 -> 149 [label="Control Dep"];
134 -> 153 [label="Control Dep"];
134 -> 245 [label="Control Dep"];
134 -> 163 [label="Control Dep"];
134 -> 169 [label="Control Dep"];
134 -> 164 [label="Control Dep"];
134 -> 167 [label="Control Dep"];
134 -> 255 [label="Control Dep"];
134 -> 246 [label="Control Dep"];
134 -> 252 [label="Control Dep"];
134 -> 253 [label="Control Dep"];
135 -> 136 [label="AST"];
135 -> 137 [label="AST"];
139 -> 140 [label="AST"];
141 -> 139 [label="AST"];
142 -> 143 [label="AST"];
144 -> 138 [label="AST"];
144 -> 141 [label="AST"];
144 -> 135 [label="AST"];
144 -> 142 [label="AST"];
145 -> 146 [label="AST"];
145 -> 147 [label="AST"];
145 -> 148 [label="AST"];
149 -> 150 [label="AST"];
149 -> 151 [label="AST"];
153 -> 154 [label="AST"];
153 -> 156 [label="Data Dep"];
155 -> 152 [label="AST"];
155 -> 153 [label="AST"];
155 -> 149 [label="AST"];
156 -> 167 [label="Define-Use"];
157 -> 156 [label="AST"];
157 -> 145 [label="AST"];
157 -> 155 [label="AST"];
158 -> 159 [label="AST"];
158 -> 160 [label="AST"];
158 -> 161 [label="AST"];
162 -> 173 [label="Define-Use"];
162 -> 190 [label="Define-Use"];
162 -> 215 [label="Define-Use"];
163 -> 162 [label="AST"];
163 -> 158 [label="AST"];
164 -> 165 [label="AST"];
167 -> 168 [label="AST"];
169 -> 166 [label="AST"];
169 -> 167 [label="AST"];
169 -> 164 [label="AST"];
169 -> 244 [label="Control Dep"];
169 -> 243 [label="Control Dep"];
169 -> 178 [label="Control Dep"];
169 -> 175 [label="Control Dep"];
169 -> 170 [label="Control Dep"];
169 -> 173 [label="Control Dep"];
169 -> 176 [label="Control Dep"];
170 -> 171 [label="AST"];
173 -> 174 [label="AST"];
175 -> 172 [label="AST"];
175 -> 173 [label="AST"];
175 -> 170 [label="AST"];
176 -> 177 [label="AST"];
178 -> 175 [label="AST"];
178 -> 176 [label="AST"];
178 -> 242 [label="Control Dep"];
178 -> 241 [label="Control Dep"];
178 -> 184 [label="Control Dep"];
178 -> 193 [label="Control Dep"];
178 -> 185 [label="Control Dep"];
178 -> 192 [label="Control Dep"];
178 -> 187 [label="Control Dep"];
178 -> 190 [label="Control Dep"];
179 -> 180 [label="AST"];
179 -> 181 [label="AST"];
179 -> 182 [label="AST"];
183 -> 225 [label="Define-Use"];
183 -> 235 [label="Define-Use"];
184 -> 183 [label="AST"];
184 -> 179 [label="AST"];
187 -> 188 [label="AST"];
190 -> 191 [label="AST"];
192 -> 189 [label="AST"];
192 -> 190 [label="AST"];
192 -> 187 [label="AST"];
193 -> 186 [label="AST"];
193 -> 192 [label="AST"];
193 -> 185 [label="AST"];
193 -> 240 [label="Control Dep"];
193 -> 239 [label="Control Dep"];
193 -> 194 [label="Control Dep"];
193 -> 199 [label="Control Dep"];
193 -> 238 [label="Control Dep"];
193 -> 231 [label="Control Dep"];
193 -> 228 [label="Control Dep"];
193 -> 221 [label="Control Dep"];
193 -> 218 [label="Control Dep"];
193 -> 211 [label="Control Dep"];
193 -> 208 [label="Control Dep"];
193 -> 200 [label="Control Dep"];
193 -> 207 [label="Control Dep"];
193 -> 202 [label="Control Dep"];
193 -> 205 [label="Control Dep"];
193 -> 209 [label="Control Dep"];
193 -> 217 [label="Control Dep"];
193 -> 212 [label="Control Dep"];
193 -> 215 [label="Control Dep"];
193 -> 219 [label="Control Dep"];
193 -> 227 [label="Control Dep"];
193 -> 222 [label="Control Dep"];
193 -> 225 [label="Control Dep"];
193 -> 229 [label="Control Dep"];
193 -> 237 [label="Control Dep"];
193 -> 232 [label="Control Dep"];
193 -> 235 [label="Control Dep"];
194 -> 195 [label="AST"];
197 -> 198 [label="AST"];
199 -> 197 [label="AST"];
202 -> 203 [label="AST"];
205 -> 206 [label="AST"];
207 -> 204 [label="AST"];
207 -> 205 [label="AST"];
207 -> 202 [label="AST"];
208 -> 201 [label="AST"];
208 -> 207 [label="AST"];
208 -> 200 [label="AST"];
209 -> 210 [label="AST"];
211 -> 208 [label="AST"];
211 -> 209 [label="AST"];
212 -> 213 [label="AST"];
215 -> 216 [label="AST"];
217 -> 214 [label="AST"];
217 -> 215 [label="AST"];
217 -> 212 [label="AST"];
218 -> 211 [label="AST"];
218 -> 217 [label="AST"];
219 -> 220 [label="AST"];
221 -> 218 [label="AST"];
221 -> 219 [label="AST"];
222 -> 223 [label="AST"];
225 -> 226 [label="AST"];
227 -> 224 [label="AST"];
227 -> 225 [label="AST"];
227 -> 222 [label="AST"];
228 -> 221 [label="AST"];
228 -> 227 [label="AST"];
229 -> 230 [label="AST"];
231 -> 228 [label="AST"];
231 -> 229 [label="AST"];
232 -> 233 [label="AST"];
235 -> 236 [label="AST"];
237 -> 234 [label="AST"];
237 -> 235 [label="AST"];
237 -> 232 [label="AST"];
238 -> 231 [label="AST"];
238 -> 237 [label="AST"];
239 -> 196 [label="AST"];
239 -> 199 [label="AST"];
239 -> 194 [label="AST"];
239 -> 238 [label="AST"];
240 -> 239 [label="AST"];
241 -> 184 [label="AST"];
241 -> 193 [label="AST"];
241 -> 240 [label="AST"];
242 -> 241 [label="AST"];
243 -> 178 [label="AST"];
243 -> 242 [label="AST"];
244 -> 243 [label="AST"];
245 -> 163 [label="AST"];
245 -> 169 [label="AST"];
245 -> 244 [label="AST"];
246 -> 247 [label="AST"];
246 -> 248 [label="AST"];
250 -> 251 [label="AST"];
252 -> 250 [label="AST"];
253 -> 254 [label="AST"];
255 -> 249 [label="AST"];
255 -> 252 [label="AST"];
255 -> 246 [label="AST"];
255 -> 253 [label="AST"];
256 -> 144 [label="AST"];
256 -> 157 [label="AST"];
256 -> 245 [label="AST"];
256 -> 255 [label="AST"];
257 -> 134 [label="AST"];
257 -> 256 [label="AST"];
258 -> 259 [label="AST"];
261 -> 262 [label="AST"];
263 -> 261 [label="AST"];
264 -> 265 [label="AST"];
268 -> 269 [label="AST"];
271 -> 272 [label="AST"];
273 -> 270 [label="AST"];
273 -> 271 [label="AST"];
273 -> 268 [label="AST"];
274 -> 267 [label="AST"];
274 -> 273 [label="AST"];
274 -> 266 [label="AST"];
275 -> 264 [label="AST"];
275 -> 274 [label="AST"];
276 -> 260 [label="AST"];
276 -> 263 [label="AST"];
276 -> 258 [label="AST"];
276 -> 275 [label="AST"];
279 -> 280 [label="AST"];
282 -> 283 [label="AST"];
284 -> 281 [label="AST"];
284 -> 282 [label="AST"];
284 -> 279 [label="AST"];
285 -> 286 [label="AST"];
287 -> 285 [label="AST"];
288 -> 289 [label="AST"];
291 -> 292 [label="AST"];
293 -> 290 [label="AST"];
293 -> 291 [label="AST"];
293 -> 288 [label="AST"];
294 -> 278 [label="AST"];
294 -> 284 [label="AST"];
294 -> 277 [label="AST"];
294 -> 287 [label="AST"];
294 -> 293 [label="AST"];
295 -> 296 [label="AST"];
295 -> 297 [label="AST"];
299 -> 300 [label="AST"];
301 -> 298 [label="AST"];
301 -> 299 [label="AST"];
301 -> 295 [label="AST"];
301 -> 493 [label="Control Dep"];
301 -> 315 [label="Control Dep"];
301 -> 313 [label="Control Dep"];
301 -> 304 [label="Control Dep"];
301 -> 312 [label="Control Dep"];
301 -> 307 [label="Control Dep"];
301 -> 310 [label="Control Dep"];
301 -> 328 [label="Control Dep"];
301 -> 326 [label="Control Dep"];
301 -> 318 [label="Control Dep"];
301 -> 324 [label="Control Dep"];
301 -> 337 [label="Control Dep"];
301 -> 329 [label="Control Dep"];
301 -> 336 [label="Control Dep"];
301 -> 331 [label="Control Dep"];
301 -> 334 [label="Control Dep"];
301 -> 369 [label="Control Dep"];
301 -> 338 [label="Control Dep"];
301 -> 343 [label="Control Dep"];
301 -> 368 [label="Control Dep"];
301 -> 358 [label="Control Dep"];
301 -> 355 [label="Control Dep"];
301 -> 344 [label="Control Dep"];
301 -> 354 [label="Control Dep"];
301 -> 346 [label="Control Dep"];
301 -> 353 [label="Control Dep"];
301 -> 348 [label="Control Dep"];
301 -> 351 [label="Control Dep"];
301 -> 356 [label="Control Dep"];
301 -> 367 [label="Control Dep"];
301 -> 359 [label="Control Dep"];
301 -> 366 [label="Control Dep"];
301 -> 361 [label="Control Dep"];
301 -> 364 [label="Control Dep"];
301 -> 403 [label="Control Dep"];
301 -> 401 [label="Control Dep"];
301 -> 372 [label="Control Dep"];
301 -> 375 [label="Control Dep"];
301 -> 379 [label="Control Dep"];
301 -> 382 [label="Control Dep"];
301 -> 388 [label="Control Dep"];
301 -> 383 [label="Control Dep"];
301 -> 386 [label="Control Dep"];
301 -> 394 [label="Control Dep"];
301 -> 389 [label="Control Dep"];
301 -> 392 [label="Control Dep"];
301 -> 400 [label="Control Dep"];
301 -> 395 [label="Control Dep"];
301 -> 398 [label="Control Dep"];
301 -> 418 [label="Control Dep"];
301 -> 404 [label="Control Dep"];
301 -> 408 [label="Control Dep"];
301 -> 415 [label="Control Dep"];
301 -> 410 [label="Control Dep"];
301 -> 413 [label="Control Dep"];
301 -> 416 [label="Control Dep"];
301 -> 426 [label="Control Dep"];
301 -> 424 [label="Control Dep"];
301 -> 421 [label="Control Dep"];
301 -> 436 [label="Control Dep"];
301 -> 434 [label="Control Dep"];
301 -> 429 [label="Control Dep"];
301 -> 432 [label="Control Dep"];
301 -> 459 [label="Control Dep"];
301 -> 437 [label="Control Dep"];
301 -> 443 [label="Control Dep"];
301 -> 454 [label="Control Dep"];
301 -> 445 [label="Control Dep"];
301 -> 453 [label="Control Dep"];
301 -> 448 [label="Control Dep"];
301 -> 451 [label="Control Dep"];
301 -> 455 [label="Control Dep"];
301 -> 457 [label="Control Dep"];
301 -> 472 [label="Control Dep"];
301 -> 460 [label="Control Dep"];
301 -> 465 [label="Control Dep"];
301 -> 471 [label="Control Dep"];
301 -> 466 [label="Control Dep"];
301 -> 469 [label="Control Dep"];
301 -> 492 [label="Control Dep"];
301 -> 491 [label="Control Dep"];
301 -> 473 [label="Control Dep"];
301 -> 484 [label="Control Dep"];
301 -> 476 [label="Control Dep"];
301 -> 483 [label="Control Dep"];
301 -> 478 [label="Control Dep"];
301 -> 481 [label="Control Dep"];
301 -> 490 [label="Control Dep"];
301 -> 485 [label="Control Dep"];
301 -> 488 [label="Control Dep"];
301 -> 516 [label="Control Dep"];
301 -> 512 [label="Control Dep"];
301 -> 494 [label="Control Dep"];
301 -> 499 [label="Control Dep"];
301 -> 511 [label="Control Dep"];
301 -> 500 [label="Control Dep"];
301 -> 510 [label="Control Dep"];
301 -> 502 [label="Control Dep"];
301 -> 509 [label="Control Dep"];
301 -> 504 [label="Control Dep"];
301 -> 507 [label="Control Dep"];
301 -> 515 [label="Control Dep"];
301 -> 513 [label="Control Dep"];
301 -> 525 [label="Control Dep"];
301 -> 534 [label="Control Dep"];
301 -> 535 [label="Control Dep"];
302 -> 303 [label="AST"];
304 -> 305 [label="AST"];
304 -> 306 [label="AST"];
307 -> 308 [label="AST"];
310 -> 311 [label="AST"];
310 -> 314 [label="Data Dep"];
312 -> 309 [label="AST"];
312 -> 310 [label="AST"];
312 -> 307 [label="AST"];
313 -> 304 [label="AST"];
313 -> 312 [label="AST"];
314 -> 408 [label="Define-Use"];
315 -> 314 [label="AST"];
315 -> 302 [label="AST"];
315 -> 313 [label="AST"];
316 -> 317 [label="AST"];
318 -> 319 [label="AST"];
318 -> 320 [label="AST"];
321 -> 322 [label="AST"];
321 -> 323 [label="AST"];
324 -> 325 [label="AST"];
324 -> 321 [label="AST"];
324 -> 327 [label="Data Dep"];
326 -> 318 [label="AST"];
326 -> 324 [label="AST"];
326 -> 520 [label="Action"];
327 -> 375 [label="Define-Use"];
327 -> 451 [label="Define-Use"];
327 -> 488 [label="Define-Use"];
328 -> 327 [label="AST"];
328 -> 316 [label="AST"];
328 -> 326 [label="AST"];
331 -> 332 [label="AST"];
334 -> 335 [label="AST"];
336 -> 333 [label="AST"];
336 -> 334 [label="AST"];
336 -> 331 [label="AST"];
337 -> 330 [label="AST"];
337 -> 336 [label="AST"];
337 -> 329 [label="AST"];
338 -> 339 [label="AST"];
341 -> 342 [label="AST"];
343 -> 341 [label="AST"];
344 -> 345 [label="AST"];
348 -> 349 [label="AST"];
351 -> 352 [label="AST"];
353 -> 350 [label="AST"];
353 -> 351 [label="AST"];
353 -> 348 [label="AST"];
354 -> 347 [label="AST"];
354 -> 353 [label="AST"];
354 -> 346 [label="AST"];
355 -> 344 [label="AST"];
355 -> 354 [label="AST"];
356 -> 357 [label="AST"];
358 -> 355 [label="AST"];
358 -> 356 [label="AST"];
361 -> 362 [label="AST"];
364 -> 365 [label="AST"];
366 -> 363 [label="AST"];
366 -> 364 [label="AST"];
366 -> 361 [label="AST"];
367 -> 360 [label="AST"];
367 -> 366 [label="AST"];
367 -> 359 [label="AST"];
368 -> 358 [label="AST"];
368 -> 367 [label="AST"];
369 -> 340 [label="AST"];
369 -> 343 [label="AST"];
369 -> 338 [label="AST"];
369 -> 368 [label="AST"];
370 -> 371 [label="AST"];
372 -> 373 [label="AST"];
372 -> 374 [label="AST"];
375 -> 376 [label="AST"];
375 -> 402 [label="Data Dep"];
377 -> 378 [label="AST"];
379 -> 377 [label="AST"];
379 -> 402 [label="Data Dep"];
380 -> 381 [label="AST"];
382 -> 380 [label="AST"];
382 -> 402 [label="Data Dep"];
383 -> 384 [label="AST"];
386 -> 387 [label="AST"];
386 -> 402 [label="Data Dep"];
388 -> 385 [label="AST"];
388 -> 386 [label="AST"];
388 -> 383 [label="AST"];
389 -> 390 [label="AST"];
392 -> 393 [label="AST"];
392 -> 402 [label="Data Dep"];
394 -> 391 [label="AST"];
394 -> 392 [label="AST"];
394 -> 389 [label="AST"];
395 -> 396 [label="AST"];
398 -> 399 [label="AST"];
398 -> 402 [label="Data Dep"];
400 -> 397 [label="AST"];
400 -> 398 [label="AST"];
400 -> 395 [label="AST"];
401 -> 372 [label="AST"];
401 -> 375 [label="AST"];
401 -> 379 [label="AST"];
401 -> 382 [label="AST"];
401 -> 388 [label="AST"];
401 -> 394 [label="AST"];
401 -> 400 [label="AST"];
402 -> 413 [label="Define-Use"];
403 -> 402 [label="AST"];
403 -> 370 [label="AST"];
403 -> 401 [label="AST"];
404 -> 405 [label="AST"];
404 -> 406 [label="AST"];
408 -> 409 [label="AST"];
410 -> 411 [label="AST"];
410 -> 412 [label="AST"];
413 -> 414 [label="AST"];
415 -> 410 [label="AST"];
415 -> 413 [label="AST"];
416 -> 417 [label="AST"];
418 -> 407 [label="AST"];
418 -> 408 [label="AST"];
418 -> 404 [label="AST"];
418 -> 415 [label="AST"];
418 -> 416 [label="AST"];
419 -> 420 [label="AST"];
421 -> 422 [label="AST"];
421 -> 423 [label="AST"];
424 -> 421 [label="AST"];
425 -> 432 [label="Define-Use"];
425 -> 469 [label="Define-Use"];
426 -> 425 [label="AST"];
426 -> 419 [label="AST"];
426 -> 424 [label="AST"];
427 -> 428 [label="AST"];
429 -> 430 [label="AST"];
429 -> 431 [label="AST"];
432 -> 433 [label="AST"];
432 -> 435 [label="Data Dep"];
434 -> 429 [label="AST"];
434 -> 432 [label="AST"];
435 -> 457 [label="Define-Use"];
436 -> 435 [label="AST"];
436 -> 427 [label="AST"];
436 -> 434 [label="AST"];
437 -> 438 [label="AST"];
437 -> 439 [label="AST"];
437 -> 440 [label="AST"];
437 -> 441 [label="AST"];
443 -> 444 [label="AST"];
445 -> 446 [label="AST"];
445 -> 447 [label="AST"];
448 -> 449 [label="AST"];
451 -> 452 [label="AST"];
453 -> 450 [label="AST"];
453 -> 451 [label="AST"];
453 -> 448 [label="AST"];
454 -> 445 [label="AST"];
454 -> 453 [label="AST"];
455 -> 456 [label="AST"];
457 -> 458 [label="AST"];
459 -> 442 [label="AST"];
459 -> 443 [label="AST"];
459 -> 437 [label="AST"];
459 -> 454 [label="AST"];
459 -> 455 [label="AST"];
459 -> 457 [label="AST"];
460 -> 461 [label="AST"];
463 -> 464 [label="AST"];
465 -> 463 [label="AST"];
466 -> 467 [label="AST"];
469 -> 470 [label="AST"];
471 -> 468 [label="AST"];
471 -> 469 [label="AST"];
471 -> 466 [label="AST"];
472 -> 462 [label="AST"];
472 -> 465 [label="AST"];
472 -> 460 [label="AST"];
472 -> 471 [label="AST"];
473 -> 474 [label="AST"];
473 -> 475 [label="AST"];
478 -> 479 [label="AST"];
481 -> 482 [label="AST"];
483 -> 480 [label="AST"];
483 -> 481 [label="AST"];
483 -> 478 [label="AST"];
484 -> 477 [label="AST"];
484 -> 483 [label="AST"];
484 -> 476 [label="AST"];
485 -> 486 [label="AST"];
488 -> 489 [label="AST"];
490 -> 487 [label="AST"];
490 -> 488 [label="AST"];
490 -> 485 [label="AST"];
491 -> 473 [label="AST"];
491 -> 484 [label="AST"];
491 -> 490 [label="AST"];
492 -> 491 [label="AST"];
493 -> 315 [label="AST"];
493 -> 328 [label="AST"];
493 -> 337 [label="AST"];
493 -> 369 [label="AST"];
493 -> 403 [label="AST"];
493 -> 418 [label="AST"];
493 -> 426 [label="AST"];
493 -> 436 [label="AST"];
493 -> 459 [label="AST"];
493 -> 472 [label="AST"];
493 -> 492 [label="AST"];
494 -> 495 [label="AST"];
497 -> 498 [label="AST"];
499 -> 497 [label="AST"];
500 -> 501 [label="AST"];
504 -> 505 [label="AST"];
507 -> 508 [label="AST"];
509 -> 506 [label="AST"];
509 -> 507 [label="AST"];
509 -> 504 [label="AST"];
510 -> 503 [label="AST"];
510 -> 509 [label="AST"];
510 -> 502 [label="AST"];
511 -> 500 [label="AST"];
511 -> 510 [label="AST"];
512 -> 496 [label="AST"];
512 -> 499 [label="AST"];
512 -> 494 [label="AST"];
512 -> 511 [label="AST"];
513 -> 514 [label="AST"];
515 -> 513 [label="AST"];
516 -> 512 [label="AST"];
516 -> 515 [label="AST"];
517 -> 301 [label="AST"];
517 -> 493 [label="AST"];
517 -> 516 [label="AST"];
518 -> 16 [label="AST"];
518 -> 27 [label="AST"];
518 -> 43 [label="AST"];
518 -> 53 [label="AST"];
518 -> 65 [label="AST"];
518 -> 79 [label="AST"];
518 -> 90 [label="AST"];
518 -> 115 [label="AST"];
518 -> 126 [label="AST"];
518 -> 257 [label="AST"];
518 -> 276 [label="AST"];
518 -> 294 [label="AST"];
518 -> 517 [label="AST"];
519 -> 2 [label="AST"];
519 -> 0 [label="AST"];
519 -> 3 [label="AST"];
519 -> 5 [label="AST"];
519 -> 518 [label="AST"];
520 -> 535 [label="Action"];
522 -> 521 [label="AST"];
524 -> 523 [label="AST"];
525 -> 522 [label="AST"];
525 -> 524 [label="AST"];
527 -> 526 [label="AST"];
528 -> 527 [label="AST"];
530 -> 529 [label="AST"];
532 -> 531 [label="AST"];
533 -> 530 [label="AST"];
533 -> 532 [label="AST"];
534 -> 528 [label="AST"];
534 -> 533 [label="AST"];
535 -> 525 [label="AST"];
535 -> 534 [label="AST"];
}