digraph "addInstrumentationToArchive#?,ZipInputStream,ZipOutputStream" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@addInstrumentationToArchive" shape=ellipse]
2 [label="2:CtParameterImpl@ZipInputStream archive" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@ZipInputStream" shape=ellipse]
4 [label="2:CtParameterImpl@ZipOutputStream output" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@ZipOutputStream" shape=ellipse]
6 [label="3:CtTypeReferenceImpl@Exception" shape=ellipse]
7 [label="3:CtPackageReferenceImpl@java.lang" shape=ellipse]
8 [label="4:CtTypeReferenceImpl@ZipEntry" shape=ellipse]
9 [label="4:CtPackageReferenceImpl@" shape=ellipse]
10 [label="4:CtVirtualElement@entry" shape=ellipse]
11 [label="4:CtLocalVariableImpl@ZipEntry entry" shape=ellipse]
12 [label="5:CtVariableWriteImpl@entry" shape=ellipse]
13 [label="5:CtLocalVariableReferenceImpl@entry" shape=ellipse]
14 [label="5:CtExecutableReferenceImpl@getNextEntry()" shape=ellipse]
15 [label="5:CtTypeReferenceImpl@ZipInputStream" shape=ellipse]
16 [label="5:CtVirtualElement@getNextEntry" shape=ellipse]
17 [label="5:CtVariableReadImpl@archive" shape=ellipse]
18 [label="5:CtParameterReferenceImpl@archive" shape=ellipse]
19 [label="5:CtInvocationImpl@archive.getNextEntry()" shape=ellipse]
20 [label="5:CtAssignmentImpl@(entry = archive.getNextEntry())" shape=ellipse]
21 [label="5:CtLiteralImpl@null" shape=ellipse]
22 [label="5:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
23 [label="5:CtBinaryOperatorImpl@(entry = archive.getNextEntry()) != null" shape=ellipse]
24 [label="7:CtTypeReferenceImpl@ZipEntry" shape=ellipse]
25 [label="7:CtPackageReferenceImpl@" shape=ellipse]
26 [label="7:CtExecutableReferenceImpl@ZipEntry()" shape=ellipse]
27 [label="7:CtTypeReferenceImpl@ZipEntry" shape=ellipse]
28 [label="7:CtTypeReferenceImpl@ZipEntry" shape=ellipse]
29 [label="7:CtExecutableReferenceImpl@getName()" shape=ellipse]
30 [label="7:CtTypeReferenceImpl@ZipEntry" shape=ellipse]
31 [label="7:CtVirtualElement@getName" shape=ellipse]
32 [label="7:CtVariableReadImpl@entry" shape=ellipse]
33 [label="7:CtLocalVariableReferenceImpl@entry" shape=ellipse]
34 [label="7:CtInvocationImpl@entry.getName()" shape=ellipse]
35 [label="7:CtConstructorCallImpl@new ZipEntry(entry.getName())" shape=ellipse]
36 [label="7:CtVirtualElement@outputEntry" shape=ellipse]
37 [label="7:CtLocalVariableImpl@ZipEntry outputEntry = new ZipEntry(entry.getName())" shape=ellipse]
38 [label="8:CtExecutableReferenceImpl@putNextEntry(ZipEntry)" shape=ellipse]
39 [label="8:CtTypeReferenceImpl@ZipOutputStream" shape=ellipse]
40 [label="8:CtTypeReferenceImpl@ZipEntry" shape=ellipse]
41 [label="8:CtVirtualElement@putNextEntry" shape=ellipse]
42 [label="8:CtVariableReadImpl@output" shape=ellipse]
43 [label="8:CtParameterReferenceImpl@output" shape=ellipse]
44 [label="8:CtVariableReadImpl@outputEntry" shape=ellipse]
45 [label="8:CtLocalVariableReferenceImpl@outputEntry" shape=ellipse]
46 [label="8:CtInvocationImpl@output.putNextEntry(outputEntry)" shape=ellipse]
47 [label="9:CtVirtualElement@byte[]" shape=ellipse]
48 [label="9:CtArrayTypeReferenceImpl@byte[]" shape=ellipse]
49 [label="9:CtTypeReferenceImpl@byte" shape=ellipse]
50 [label="9:CtExecutableReferenceImpl@createByteArrayFromInputStream(ZipInputStream)" shape=ellipse]
51 [label="9:CtTypeReferenceImpl@IOUtil" shape=ellipse]
52 [label="9:CtArrayTypeReferenceImpl@byte[]" shape=ellipse]
53 [label="9:CtTypeReferenceImpl@ZipInputStream" shape=ellipse]
54 [label="9:CtVirtualElement@createByteArrayFromInputStream" shape=ellipse]
55 [label="9:CtTypeAccessImpl@IOUtil" shape=ellipse]
56 [label="9:CtTypeReferenceImpl@IOUtil" shape=ellipse]
57 [label="9:CtVariableReadImpl@archive" shape=ellipse]
58 [label="9:CtParameterReferenceImpl@archive" shape=ellipse]
59 [label="9:CtInvocationImpl@IOUtil.createByteArrayFromInputStream(archive)" shape=ellipse]
60 [label="9:CtVirtualElement@entryBytes" shape=ellipse]
61 [label="9:CtLocalVariableImpl@byte[] entryBytes = IOUtil.createByteArrayFromInputStream(archive)" shape=ellipse]
62 [label="10:CtExecutableReferenceImpl@isClass(<unknown>)" shape=ellipse]
63 [label="10:CtTypeReferenceImpl@boolean" shape=ellipse]
64 [label="10:CtTypeReferenceImpl@null" shape=ellipse]
65 [label="10:CtVirtualElement@isClass" shape=ellipse]
66 [label="10:CtTypeAccessImpl@PlaceHold" shape=ellipse]
67 [label="10:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
68 [label="10:CtThisAccessImpl@" shape=ellipse]
69 [label="10:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
70 [label="10:CtVariableReadImpl@entry" shape=ellipse]
71 [label="10:CtLocalVariableReferenceImpl@entry" shape=ellipse]
72 [label="10:CtInvocationImpl@isClass(entry)" shape=ellipse]
73 [label="11:CtTypeReferenceImpl@ClassReader" shape=ellipse]
74 [label="11:CtPackageReferenceImpl@" shape=ellipse]
75 [label="11:CtExecutableReferenceImpl@ClassReader(byte[])" shape=ellipse]
76 [label="11:CtTypeReferenceImpl@ClassReader" shape=ellipse]
77 [label="11:CtTypeReferenceImpl@ClassReader" shape=ellipse]
78 [label="11:CtArrayTypeReferenceImpl@byte[]" shape=ellipse]
79 [label="11:CtVariableReadImpl@entryBytes" shape=ellipse]
80 [label="11:CtLocalVariableReferenceImpl@entryBytes" shape=ellipse]
81 [label="11:CtConstructorCallImpl@new ClassReader(entryBytes)" shape=ellipse]
82 [label="11:CtVirtualElement@cr" shape=ellipse]
83 [label="11:CtLocalVariableImpl@ClassReader cr = new ClassReader(entryBytes)" shape=ellipse]
84 [label="12:CtTypeReferenceImpl@ClassWriter" shape=ellipse]
85 [label="12:CtPackageReferenceImpl@" shape=ellipse]
86 [label="12:CtExecutableReferenceImpl@ClassWriter(boolean)" shape=ellipse]
87 [label="12:CtTypeReferenceImpl@ClassWriter" shape=ellipse]
88 [label="12:CtTypeReferenceImpl@ClassWriter" shape=ellipse]
89 [label="12:CtTypeReferenceImpl@boolean" shape=ellipse]
90 [label="12:CtLiteralImpl@true" shape=ellipse]
91 [label="12:CtTypeReferenceImpl@boolean" shape=ellipse]
92 [label="12:CtConstructorCallImpl@new ClassWriter(true)" shape=ellipse]
93 [label="12:CtVirtualElement@cw" shape=ellipse]
94 [label="12:CtLocalVariableImpl@ClassWriter cw = new ClassWriter(true)" shape=ellipse]
95 [label="13:CtTypeReferenceImpl@ClassInstrumenter" shape=ellipse]
96 [label="13:CtPackageReferenceImpl@" shape=ellipse]
97 [label="13:CtExecutableReferenceImpl@ClassInstrumenter()" shape=ellipse]
98 [label="13:CtTypeReferenceImpl@ClassInstrumenter" shape=ellipse]
99 [label="13:CtTypeReferenceImpl@ClassInstrumenter" shape=ellipse]
100 [label="13:CtFieldReferenceImpl@projectData" shape=ellipse]
101 [label="13:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
102 [label="13:CtFieldReadImpl@projectData" shape=ellipse]
103 [label="13:CtVariableReadImpl@cw" shape=ellipse]
104 [label="13:CtLocalVariableReferenceImpl@cw" shape=ellipse]
105 [label="13:CtFieldReferenceImpl@ignoreRegex" shape=ellipse]
106 [label="13:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
107 [label="13:CtFieldReadImpl@ignoreRegex" shape=ellipse]
108 [label="13:CtConstructorCallImpl@new ClassInstrumenter(projectData, cw, ignoreRegex)" shape=ellipse]
109 [label="13:CtVirtualElement@cv" shape=ellipse]
110 [label="13:CtLocalVariableImpl@ClassInstrumenter cv = new ClassInstrumenter(projectData, cw, ignoreRegex)" shape=ellipse]
111 [label="14:CtExecutableReferenceImpl@accept(ClassInstrumenter,boolean)" shape=ellipse]
112 [label="14:CtTypeReferenceImpl@ClassReader" shape=ellipse]
113 [label="14:CtTypeReferenceImpl@ClassInstrumenter" shape=ellipse]
114 [label="14:CtTypeReferenceImpl@boolean" shape=ellipse]
115 [label="14:CtVirtualElement@accept" shape=ellipse]
116 [label="14:CtVariableReadImpl@cr" shape=ellipse]
117 [label="14:CtLocalVariableReferenceImpl@cr" shape=ellipse]
118 [label="14:CtVariableReadImpl@cv" shape=ellipse]
119 [label="14:CtLocalVariableReferenceImpl@cv" shape=ellipse]
120 [label="14:CtLiteralImpl@false" shape=ellipse]
121 [label="14:CtTypeReferenceImpl@boolean" shape=ellipse]
122 [label="14:CtInvocationImpl@cr.accept(cv, false)" shape=ellipse]
123 [label="15:CtExecutableReferenceImpl@isInstrumented()" shape=ellipse]
124 [label="15:CtTypeReferenceImpl@ClassInstrumenter" shape=ellipse]
125 [label="15:CtTypeReferenceImpl@boolean" shape=ellipse]
126 [label="15:CtVirtualElement@isInstrumented" shape=ellipse]
127 [label="15:CtVariableReadImpl@cv" shape=ellipse]
128 [label="15:CtLocalVariableReferenceImpl@cv" shape=ellipse]
129 [label="15:CtInvocationImpl@cv.isInstrumented()" shape=ellipse]
130 [label="16:CtExecutableReferenceImpl@debug()" shape=ellipse]
131 [label="16:CtTypeReferenceImpl@logger" shape=ellipse]
132 [label="16:CtVirtualElement@debug" shape=ellipse]
133 [label="16:CtFieldReferenceImpl@logger" shape=ellipse]
134 [label="16:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
135 [label="16:CtFieldReadImpl@logger" shape=ellipse]
136 [label="16:CtLiteralImpl@\"Putting instrumeted entry: \"" shape=ellipse]
137 [label="16:CtTypeReferenceImpl@String" shape=ellipse]
138 [label="16:CtExecutableReferenceImpl@getName()" shape=ellipse]
139 [label="16:CtTypeReferenceImpl@ZipEntry" shape=ellipse]
140 [label="16:CtVirtualElement@getName" shape=ellipse]
141 [label="16:CtVariableReadImpl@entry" shape=ellipse]
142 [label="16:CtLocalVariableReferenceImpl@entry" shape=ellipse]
143 [label="16:CtInvocationImpl@entry.getName()" shape=ellipse]
144 [label="16:CtBinaryOperatorImpl@\"Putting instrumeted entry: \" + entry.getName()" shape=ellipse]
145 [label="16:CtInvocationImpl@logger.debug(\"Putting instrumeted entry: \" + entry.getName())" shape=ellipse]
146 [label="17:CtVariableWriteImpl@entryBytes" shape=ellipse]
147 [label="17:CtLocalVariableReferenceImpl@entryBytes" shape=ellipse]
148 [label="17:CtExecutableReferenceImpl@toByteArray()" shape=ellipse]
149 [label="17:CtTypeReferenceImpl@ClassWriter" shape=ellipse]
150 [label="17:CtArrayTypeReferenceImpl@byte[]" shape=ellipse]
151 [label="17:CtVirtualElement@toByteArray" shape=ellipse]
152 [label="17:CtVariableReadImpl@cw" shape=ellipse]
153 [label="17:CtLocalVariableReferenceImpl@cw" shape=ellipse]
154 [label="17:CtInvocationImpl@cw.toByteArray()" shape=ellipse]
155 [label="17:CtVirtualElement@byte[]" shape=ellipse]
156 [label="17:CtArrayTypeReferenceImpl@byte[]" shape=ellipse]
157 [label="17:CtTypeReferenceImpl@byte" shape=ellipse]
158 [label="17:CtAssignmentImpl@entryBytes = cw.toByteArray()" shape=ellipse]
159 [label="15:CtBlockImpl@\{
    logger.debug(\"Putting instrumeted entry: \" + entry.getName());
    entryBytes = cw.toByteArray();
\}" shape=ellipse]
160 [label="15:CtIfImpl@if (cv.isInstrumented()) \{
    logger.debug(\"Putting instrumeted entry: \" + entry.getName());
    entryBytes = cw.toByteArray();
\}" shape=ellipse]
161 [label="10:CtBlockImpl@\{
    ClassReader cr = new ClassReader(entryBytes);
    ClassWriter cw = new ClassWriter(true);
    ClassInstrumenter cv = new ClassInstrumenter(projectData, cw, ignoreRegex);
    cr.accept(cv, false);
    if (cv.isInstrumented()) \{
        logger.debug(\"Putting instrumeted entry: \" + entry.getName());
        entryBytes = cw.toByteArray();
    \}
\}" shape=ellipse]
162 [label="10:CtIfImpl@if (isClass(entry)) \{
    ClassReader cr = new ClassReader(entryBytes);
    ClassWriter cw = new ClassWriter(true);
    ClassInstrumenter cv = new ClassInstrumenter(projectData, cw, ignoreRegex);
    cr.accept(cv, false);
    if (cv.isInstrumented()) \{
        logger.debug(\"Putting instrumeted entry: \" + entry.getName());
        entryBytes = cw.toByteArray();
    \}
\}" shape=ellipse]
163 [label="20:CtExecutableReferenceImpl@write(byte[])" shape=ellipse]
164 [label="20:CtTypeReferenceImpl@ZipOutputStream" shape=ellipse]
165 [label="20:CtArrayTypeReferenceImpl@byte[]" shape=ellipse]
166 [label="20:CtVirtualElement@write" shape=ellipse]
167 [label="20:CtVariableReadImpl@output" shape=ellipse]
168 [label="20:CtParameterReferenceImpl@output" shape=ellipse]
169 [label="20:CtVariableReadImpl@entryBytes" shape=ellipse]
170 [label="20:CtLocalVariableReferenceImpl@entryBytes" shape=ellipse]
171 [label="20:CtInvocationImpl@output.write(entryBytes)" shape=ellipse]
172 [label="21:CtExecutableReferenceImpl@closeEntry()" shape=ellipse]
173 [label="21:CtTypeReferenceImpl@ZipOutputStream" shape=ellipse]
174 [label="21:CtVirtualElement@closeEntry" shape=ellipse]
175 [label="21:CtVariableReadImpl@output" shape=ellipse]
176 [label="21:CtParameterReferenceImpl@output" shape=ellipse]
177 [label="21:CtInvocationImpl@output.closeEntry()" shape=ellipse]
178 [label="22:CtExecutableReferenceImpl@closeEntry()" shape=ellipse]
179 [label="22:CtTypeReferenceImpl@ZipInputStream" shape=ellipse]
180 [label="22:CtVirtualElement@closeEntry" shape=ellipse]
181 [label="22:CtVariableReadImpl@archive" shape=ellipse]
182 [label="22:CtParameterReferenceImpl@archive" shape=ellipse]
183 [label="22:CtInvocationImpl@archive.closeEntry()" shape=ellipse]
184 [label="6:CtBlockImpl@\{
    ZipEntry outputEntry = new ZipEntry(entry.getName());
    output.putNextEntry(outputEntry);
    byte[] entryBytes = IOUtil.createByteArrayFromInputStream(archive);
    if (isClass(entry)) \{
        ClassReader cr = new ClassReader(entryBytes);
        ClassWriter cw = new ClassWriter(true);
        ClassInstrumenter cv = new ClassInstrumenter(projectData, cw, ignoreRegex);
        cr.accept(cv, false);
        if (cv.isInstrumented()) \{
            logger.debug(\"Putting instrumeted entry: \" + entry.getName());
            entryBytes = cw.toByteArray();
        \}
    \}
    output.write(entryBytes);
    output.closeEntry();
    archive.closeEntry();
\}" shape=ellipse]
185 [label="23:CtVirtualElement@e" shape=ellipse]
186 [label="23:CtTypeReferenceImpl@Exception" shape=ellipse]
187 [label="23:CtPackageReferenceImpl@java.lang" shape=ellipse]
188 [label="23:CtCatchVariableImpl@Exception e" shape=ellipse]
189 [label="24:CtExecutableReferenceImpl@warn()" shape=ellipse]
190 [label="24:CtTypeReferenceImpl@logger" shape=ellipse]
191 [label="24:CtVirtualElement@warn" shape=ellipse]
192 [label="24:CtFieldReferenceImpl@logger" shape=ellipse]
193 [label="24:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
194 [label="24:CtFieldReadImpl@logger" shape=ellipse]
195 [label="24:CtLiteralImpl@\"Problems with archive entry: \"" shape=ellipse]
196 [label="24:CtTypeReferenceImpl@String" shape=ellipse]
197 [label="24:CtVariableReadImpl@entry" shape=ellipse]
198 [label="24:CtLocalVariableReferenceImpl@entry" shape=ellipse]
199 [label="24:CtBinaryOperatorImpl@\"Problems with archive entry: \" + entry" shape=ellipse]
200 [label="24:CtInvocationImpl@logger.warn(\"Problems with archive entry: \" + entry)" shape=ellipse]
201 [label="25:CtVariableReadImpl@e" shape=ellipse]
202 [label="25:CtCatchVariableReferenceImpl@e" shape=ellipse]
203 [label="25:CtThrowImpl@throw e" shape=ellipse]
204 [label="23:CtBlockImpl@\{
    logger.warn(\"Problems with archive entry: \" + entry);
    throw e;
\}" shape=ellipse]
205 [label="23:CtCatchImpl@ catch (Exception e) \{
    logger.warn(\"Problems with archive entry: \" + entry);
    throw e;
\}" shape=ellipse]
206 [label="6:CtTryImpl@try \{
    ZipEntry outputEntry = new ZipEntry(entry.getName());
    output.putNextEntry(outputEntry);
    byte[] entryBytes = IOUtil.createByteArrayFromInputStream(archive);
    if (isClass(entry)) \{
        ClassReader cr = new ClassReader(entryBytes);
        ClassWriter cw = new ClassWriter(true);
        ClassInstrumenter cv = new ClassInstrumenter(projectData, cw, ignoreRegex);
        cr.accept(cv, false);
        if (cv.isInstrumented()) \{
            logger.debug(\"Putting instrumeted entry: \" + entry.getName());
            entryBytes = cw.toByteArray();
        \}
    \}
    output.write(entryBytes);
    output.closeEntry();
    archive.closeEntry();
\} catch (Exception e) \{
    logger.warn(\"Problems with archive entry: \" + entry);
    throw e;
\}" shape=ellipse]
207 [label="27:CtExecutableReferenceImpl@flush()" shape=ellipse]
208 [label="27:CtTypeReferenceImpl@ZipOutputStream" shape=ellipse]
209 [label="27:CtVirtualElement@flush" shape=ellipse]
210 [label="27:CtVariableReadImpl@output" shape=ellipse]
211 [label="27:CtParameterReferenceImpl@output" shape=ellipse]
212 [label="27:CtInvocationImpl@output.flush()" shape=ellipse]
213 [label="5:CtBlockImpl@\{
    try \{
        ZipEntry outputEntry = new ZipEntry(entry.getName());
        output.putNextEntry(outputEntry);
        byte[] entryBytes = IOUtil.createByteArrayFromInputStream(archive);
        if (isClass(entry)) \{
            ClassReader cr = new ClassReader(entryBytes);
            ClassWriter cw = new ClassWriter(true);
            ClassInstrumenter cv = new ClassInstrumenter(projectData, cw, ignoreRegex);
            cr.accept(cv, false);
            if (cv.isInstrumented()) \{
                logger.debug(\"Putting instrumeted entry: \" + entry.getName());
                entryBytes = cw.toByteArray();
            \}
        \}
        output.write(entryBytes);
        output.closeEntry();
        archive.closeEntry();
    \} catch (Exception e) \{
        logger.warn(\"Problems with archive entry: \" + entry);
        throw e;
    \}
    output.flush();
\}" shape=ellipse]
214 [label="5:CtWhileImpl@while ((entry = archive.getNextEntry()) != null) \{
    try \{
        ZipEntry outputEntry = new ZipEntry(entry.getName());
        output.putNextEntry(outputEntry);
        byte[] entryBytes = IOUtil.createByteArrayFromInputStream(archive);
        if (isClass(entry)) \{
            ClassReader cr = new ClassReader(entryBytes);
            ClassWriter cw = new ClassWriter(true);
            ClassInstrumenter cv = new ClassInstrumenter(projectData, cw, ignoreRegex);
            cr.accept(cv, false);
            if (cv.isInstrumented()) \{
                logger.debug(\"Putting instrumeted entry: \" + entry.getName());
                entryBytes = cw.toByteArray();
            \}
        \}
        output.write(entryBytes);
        output.closeEntry();
        archive.closeEntry();
    \} catch (Exception e) \{
        logger.warn(\"Problems with archive entry: \" + entry);
        throw e;
    \}
    output.flush();
\} " shape=ellipse]
215 [label="3:CtBlockImpl@\{
    ZipEntry entry;
    while ((entry = archive.getNextEntry()) != null) \{
        try \{
            ZipEntry outputEntry = new ZipEntry(entry.getName());
            output.putNextEntry(outputEntry);
            byte[] entryBytes = IOUtil.createByteArrayFromInputStream(archive);
            if (isClass(entry)) \{
                ClassReader cr = new ClassReader(entryBytes);
                ClassWriter cw = new ClassWriter(true);
                ClassInstrumenter cv = new ClassInstrumenter(projectData, cw, ignoreRegex);
                cr.accept(cv, false);
                if (cv.isInstrumented()) \{
                    logger.debug(\"Putting instrumeted entry: \" + entry.getName());
                    entryBytes = cw.toByteArray();
                \}
            \}
            output.write(entryBytes);
            output.closeEntry();
            archive.closeEntry();
        \} catch (Exception e) \{
            logger.warn(\"Problems with archive entry: \" + entry);
            throw e;
        \}
        output.flush();
    \} 
\}" shape=ellipse]
216 [label="2:CtMethodImpl@private void addInstrumentationToArchive(ZipInputStream archive, ZipOutputStream output) throws Exception \{
    ZipEntry entry;
    while ((entry = archive.getNextEntry()) != null) \{
        try \{
            ZipEntry outputEntry = new ZipEntry(entry.getName());
            output.putNextEntry(outputEntry);
            byte[] entryBytes = IOUtil.createByteArrayFromInputStream(archive);
            if (isClass(entry)) \{
                ClassReader cr = new ClassReader(entryBytes);
                ClassWriter cw = new ClassWriter(true);
                ClassInstrumenter cv = new ClassInstrumenter(projectData, cw, ignoreRegex);
                cr.accept(cv, false);
                if (cv.isInstrumented()) \{
                    logger.debug(\"Putting instrumeted entry: \" + entry.getName());
                    entryBytes = cw.toByteArray();
                \}
            \}
            output.write(entryBytes);
            output.closeEntry();
            archive.closeEntry();
        \} catch (Exception e) \{
            logger.warn(\"Problems with archive entry: \" + entry);
            throw e;
        \}
        output.flush();
    \} 
\}" shape=ellipse]
217 [label="13:Update@UPDATE" shape=ellipse]
218 [label="13:CtPackageReferenceImpl@" shape=ellipse]
219 [label="13:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
220 [label="13:CtPackageReferenceImpl@" shape=ellipse]
221 [label="13:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
222 [label="13:CtTypeAccessImpl@PlaceHold" shape=ellipse]
223 [label="13:CtThisAccessImpl@this" shape=ellipse]
224 [label="13:CtPackageReferenceImpl@" shape=ellipse]
225 [label="13:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
226 [label="13:CtFieldReferenceImpl@ignoreRegexs" shape=ellipse]
227 [label="13:CtFieldReadImpl@this.ignoreRegexs" shape=ellipse]
228 [label="13:Insert@INSERT" shape=ellipse]
229 [label="13:CtPackageReferenceImpl@" shape=ellipse]
230 [label="13:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
231 [label="13:CtPackageReferenceImpl@" shape=ellipse]
232 [label="13:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
233 [label="13:CtTypeAccessImpl@PlaceHold" shape=ellipse]
234 [label="13:CtThisAccessImpl@this" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
6 -> 7 [label="AST"];
8 -> 9 [label="AST"];
11 -> 10 [label="AST"];
11 -> 8 [label="AST"];
12 -> 13 [label="AST"];
12 -> 32 [label="Define-Use"];
12 -> 70 [label="Define-Use"];
12 -> 141 [label="Define-Use"];
12 -> 197 [label="Define-Use"];
14 -> 15 [label="AST"];
17 -> 18 [label="AST"];
17 -> 12 [label="Data Dep"];
19 -> 16 [label="AST"];
19 -> 17 [label="AST"];
19 -> 14 [label="AST"];
20 -> 12 [label="AST"];
20 -> 19 [label="AST"];
21 -> 22 [label="AST"];
23 -> 20 [label="AST"];
23 -> 21 [label="AST"];
23 -> 213 [label="Control Dep"];
23 -> 206 [label="Control Dep"];
23 -> 184 [label="Control Dep"];
23 -> 37 [label="Control Dep"];
23 -> 35 [label="Control Dep"];
23 -> 26 [label="Control Dep"];
23 -> 34 [label="Control Dep"];
23 -> 29 [label="Control Dep"];
23 -> 32 [label="Control Dep"];
23 -> 46 [label="Control Dep"];
23 -> 38 [label="Control Dep"];
23 -> 42 [label="Control Dep"];
23 -> 44 [label="Control Dep"];
23 -> 61 [label="Control Dep"];
23 -> 48 [label="Control Dep"];
23 -> 59 [label="Control Dep"];
23 -> 50 [label="Control Dep"];
23 -> 55 [label="Control Dep"];
23 -> 57 [label="Control Dep"];
23 -> 162 [label="Control Dep"];
23 -> 72 [label="Control Dep"];
23 -> 62 [label="Control Dep"];
23 -> 68 [label="Control Dep"];
23 -> 66 [label="Control Dep"];
23 -> 70 [label="Control Dep"];
23 -> 171 [label="Control Dep"];
23 -> 163 [label="Control Dep"];
23 -> 167 [label="Control Dep"];
23 -> 169 [label="Control Dep"];
23 -> 177 [label="Control Dep"];
23 -> 172 [label="Control Dep"];
23 -> 175 [label="Control Dep"];
23 -> 183 [label="Control Dep"];
23 -> 178 [label="Control Dep"];
23 -> 181 [label="Control Dep"];
23 -> 205 [label="Control Dep"];
23 -> 188 [label="Control Dep"];
23 -> 212 [label="Control Dep"];
23 -> 207 [label="Control Dep"];
23 -> 210 [label="Control Dep"];
24 -> 25 [label="AST"];
26 -> 27 [label="AST"];
26 -> 28 [label="AST"];
29 -> 30 [label="AST"];
32 -> 33 [label="AST"];
32 -> 36 [label="Data Dep"];
34 -> 31 [label="AST"];
34 -> 32 [label="AST"];
34 -> 29 [label="AST"];
35 -> 26 [label="AST"];
35 -> 34 [label="AST"];
36 -> 44 [label="Define-Use"];
37 -> 36 [label="AST"];
37 -> 24 [label="AST"];
37 -> 35 [label="AST"];
38 -> 39 [label="AST"];
38 -> 40 [label="AST"];
42 -> 43 [label="AST"];
44 -> 45 [label="AST"];
46 -> 41 [label="AST"];
46 -> 42 [label="AST"];
46 -> 38 [label="AST"];
46 -> 44 [label="AST"];
48 -> 47 [label="AST"];
48 -> 49 [label="AST"];
50 -> 51 [label="AST"];
50 -> 52 [label="AST"];
50 -> 53 [label="AST"];
55 -> 56 [label="AST"];
57 -> 58 [label="AST"];
57 -> 60 [label="Data Dep"];
59 -> 54 [label="AST"];
59 -> 55 [label="AST"];
59 -> 50 [label="AST"];
59 -> 57 [label="AST"];
60 -> 79 [label="Define-Use"];
60 -> 169 [label="Define-Use"];
61 -> 60 [label="AST"];
61 -> 48 [label="AST"];
61 -> 59 [label="AST"];
62 -> 63 [label="AST"];
62 -> 64 [label="AST"];
66 -> 67 [label="AST"];
68 -> 69 [label="AST"];
68 -> 66 [label="AST"];
70 -> 71 [label="AST"];
72 -> 65 [label="AST"];
72 -> 68 [label="AST"];
72 -> 62 [label="AST"];
72 -> 70 [label="AST"];
72 -> 161 [label="Control Dep"];
72 -> 83 [label="Control Dep"];
72 -> 81 [label="Control Dep"];
72 -> 75 [label="Control Dep"];
72 -> 79 [label="Control Dep"];
72 -> 94 [label="Control Dep"];
72 -> 92 [label="Control Dep"];
72 -> 86 [label="Control Dep"];
72 -> 90 [label="Control Dep"];
72 -> 110 [label="Control Dep"];
72 -> 108 [label="Control Dep"];
72 -> 97 [label="Control Dep"];
72 -> 102 [label="Control Dep"];
72 -> 103 [label="Control Dep"];
72 -> 107 [label="Control Dep"];
72 -> 122 [label="Control Dep"];
72 -> 111 [label="Control Dep"];
72 -> 116 [label="Control Dep"];
72 -> 118 [label="Control Dep"];
72 -> 120 [label="Control Dep"];
72 -> 160 [label="Control Dep"];
72 -> 129 [label="Control Dep"];
72 -> 123 [label="Control Dep"];
72 -> 127 [label="Control Dep"];
72 -> 227 [label="Control Dep"];
73 -> 74 [label="AST"];
75 -> 76 [label="AST"];
75 -> 77 [label="AST"];
75 -> 78 [label="AST"];
79 -> 80 [label="AST"];
79 -> 82 [label="Data Dep"];
81 -> 75 [label="AST"];
81 -> 79 [label="AST"];
82 -> 116 [label="Define-Use"];
83 -> 82 [label="AST"];
83 -> 73 [label="AST"];
83 -> 81 [label="AST"];
84 -> 85 [label="AST"];
86 -> 87 [label="AST"];
86 -> 88 [label="AST"];
86 -> 89 [label="AST"];
90 -> 91 [label="AST"];
92 -> 86 [label="AST"];
92 -> 90 [label="AST"];
93 -> 103 [label="Define-Use"];
93 -> 152 [label="Define-Use"];
94 -> 93 [label="AST"];
94 -> 84 [label="AST"];
94 -> 92 [label="AST"];
95 -> 96 [label="AST"];
97 -> 98 [label="AST"];
97 -> 99 [label="AST"];
100 -> 101 [label="AST"];
102 -> 100 [label="AST"];
102 -> 109 [label="Data Dep"];
102 -> 228 [label="Action"];
103 -> 104 [label="AST"];
103 -> 109 [label="Data Dep"];
105 -> 106 [label="AST"];
107 -> 105 [label="AST"];
107 -> 109 [label="Data Dep"];
107 -> 217 [label="Action"];
108 -> 97 [label="AST"];
108 -> 102 [label="AST"];
108 -> 103 [label="AST"];
108 -> 107 [label="AST"];
109 -> 118 [label="Define-Use"];
109 -> 127 [label="Define-Use"];
110 -> 109 [label="AST"];
110 -> 95 [label="AST"];
110 -> 108 [label="AST"];
111 -> 112 [label="AST"];
111 -> 113 [label="AST"];
111 -> 114 [label="AST"];
116 -> 117 [label="AST"];
118 -> 119 [label="AST"];
120 -> 121 [label="AST"];
122 -> 115 [label="AST"];
122 -> 116 [label="AST"];
122 -> 111 [label="AST"];
122 -> 118 [label="AST"];
122 -> 120 [label="AST"];
123 -> 124 [label="AST"];
123 -> 125 [label="AST"];
127 -> 128 [label="AST"];
129 -> 126 [label="AST"];
129 -> 127 [label="AST"];
129 -> 123 [label="AST"];
129 -> 159 [label="Control Dep"];
129 -> 145 [label="Control Dep"];
129 -> 130 [label="Control Dep"];
129 -> 135 [label="Control Dep"];
129 -> 144 [label="Control Dep"];
129 -> 136 [label="Control Dep"];
129 -> 143 [label="Control Dep"];
129 -> 138 [label="Control Dep"];
129 -> 141 [label="Control Dep"];
129 -> 158 [label="Control Dep"];
129 -> 146 [label="Control Dep"];
129 -> 154 [label="Control Dep"];
129 -> 148 [label="Control Dep"];
129 -> 152 [label="Control Dep"];
129 -> 156 [label="Control Dep"];
130 -> 131 [label="AST"];
133 -> 134 [label="AST"];
135 -> 133 [label="AST"];
136 -> 137 [label="AST"];
138 -> 139 [label="AST"];
141 -> 142 [label="AST"];
143 -> 140 [label="AST"];
143 -> 141 [label="AST"];
143 -> 138 [label="AST"];
144 -> 136 [label="AST"];
144 -> 143 [label="AST"];
145 -> 132 [label="AST"];
145 -> 135 [label="AST"];
145 -> 130 [label="AST"];
145 -> 144 [label="AST"];
146 -> 147 [label="AST"];
146 -> 169 [label="Define-Use"];
147 -> 169 [label="Define-Use"];
148 -> 149 [label="AST"];
148 -> 150 [label="AST"];
152 -> 153 [label="AST"];
152 -> 146 [label="Data Dep"];
154 -> 151 [label="AST"];
154 -> 152 [label="AST"];
154 -> 148 [label="AST"];
156 -> 155 [label="AST"];
156 -> 157 [label="AST"];
158 -> 156 [label="AST"];
158 -> 146 [label="AST"];
158 -> 154 [label="AST"];
159 -> 145 [label="AST"];
159 -> 158 [label="AST"];
160 -> 129 [label="AST"];
160 -> 159 [label="AST"];
161 -> 83 [label="AST"];
161 -> 94 [label="AST"];
161 -> 110 [label="AST"];
161 -> 122 [label="AST"];
161 -> 160 [label="AST"];
162 -> 72 [label="AST"];
162 -> 161 [label="AST"];
163 -> 164 [label="AST"];
163 -> 165 [label="AST"];
167 -> 168 [label="AST"];
169 -> 170 [label="AST"];
171 -> 166 [label="AST"];
171 -> 167 [label="AST"];
171 -> 163 [label="AST"];
171 -> 169 [label="AST"];
172 -> 173 [label="AST"];
175 -> 176 [label="AST"];
177 -> 174 [label="AST"];
177 -> 175 [label="AST"];
177 -> 172 [label="AST"];
178 -> 179 [label="AST"];
181 -> 182 [label="AST"];
183 -> 180 [label="AST"];
183 -> 181 [label="AST"];
183 -> 178 [label="AST"];
184 -> 37 [label="AST"];
184 -> 46 [label="AST"];
184 -> 61 [label="AST"];
184 -> 162 [label="AST"];
184 -> 171 [label="AST"];
184 -> 177 [label="AST"];
184 -> 183 [label="AST"];
185 -> 201 [label="Define-Use"];
186 -> 187 [label="AST"];
188 -> 185 [label="AST"];
188 -> 186 [label="AST"];
188 -> 204 [label="Control Dep"];
188 -> 200 [label="Control Dep"];
188 -> 189 [label="Control Dep"];
188 -> 194 [label="Control Dep"];
188 -> 199 [label="Control Dep"];
188 -> 195 [label="Control Dep"];
188 -> 197 [label="Control Dep"];
188 -> 203 [label="Control Dep"];
188 -> 201 [label="Control Dep"];
189 -> 190 [label="AST"];
192 -> 193 [label="AST"];
194 -> 192 [label="AST"];
195 -> 196 [label="AST"];
197 -> 198 [label="AST"];
199 -> 195 [label="AST"];
199 -> 197 [label="AST"];
200 -> 191 [label="AST"];
200 -> 194 [label="AST"];
200 -> 189 [label="AST"];
200 -> 199 [label="AST"];
201 -> 202 [label="AST"];
203 -> 201 [label="AST"];
204 -> 200 [label="AST"];
204 -> 203 [label="AST"];
205 -> 188 [label="AST"];
205 -> 204 [label="AST"];
206 -> 184 [label="AST"];
206 -> 205 [label="AST"];
207 -> 208 [label="AST"];
210 -> 211 [label="AST"];
212 -> 209 [label="AST"];
212 -> 210 [label="AST"];
212 -> 207 [label="AST"];
213 -> 206 [label="AST"];
213 -> 212 [label="AST"];
214 -> 23 [label="AST"];
214 -> 213 [label="AST"];
215 -> 11 [label="AST"];
215 -> 214 [label="AST"];
216 -> 1 [label="AST"];
216 -> 0 [label="AST"];
216 -> 2 [label="AST"];
216 -> 4 [label="AST"];
216 -> 6 [label="AST"];
216 -> 215 [label="AST"];
217 -> 227 [label="Action"];
219 -> 218 [label="AST"];
221 -> 220 [label="AST"];
222 -> 221 [label="AST"];
223 -> 219 [label="AST"];
223 -> 222 [label="AST"];
225 -> 224 [label="AST"];
226 -> 225 [label="AST"];
227 -> 223 [label="AST"];
227 -> 226 [label="AST"];
228 -> 234 [label="Action"];
230 -> 229 [label="AST"];
232 -> 231 [label="AST"];
233 -> 232 [label="AST"];
234 -> 230 [label="AST"];
234 -> 233 [label="AST"];
}