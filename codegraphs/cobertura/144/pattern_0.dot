digraph "Pattern" {
0 [label="addInstrumentationToArchive#?,CoberturaFile,ZipInputStream,ZipOutputStream#36:INSERT
addInstrumentationToSingleClass#?,File#17:INSERT
visitMethod#?,int,String,String,String,String[]#26:INSERT" shape=ellipse]
1 [label="addInstrumentationToArchive#?,CoberturaFile,ZipInputStream,ZipOutputStream#31:new ClassInstrumenter(projectData, cw, ignoreRegexes, ignoreBranchesRegexes, ignoreTrivial)
addInstrumentationToSingleClass#?,File#12:new ClassInstrumenter(projectData, cw, ignoreRegexes, ignoreBranchesRegexes, ignoreTrivial)
visitMethod#?,int,String,String,String,String[]#14:new FirstPassMethodInstrumenter(classData, mv, this.myName, this.superName, access, name, desc, signature, exceptions, ignoreRegexs, ignoreBranchesRegexs, ignoreTrivial)" shape=ellipse]
2 [label="addInstrumentationToArchive#?,CoberturaFile,ZipInputStream,ZipOutputStream#26:isClass(entry) && classPattern.matches(entryName)
visitMethod#?,int,String,String,String,String[]#12:mv == null" shape=ellipse]
3 [label="addInstrumentationToArchive#?,CoberturaFile,ZipInputStream,ZipOutputStream#18:classPattern.isSpecified() && ArchiveUtil.isArchive(entryName)" shape=ellipse]
4 [label="addInstrumentationToArchive#?,CoberturaFile,ZipInputStream,ZipOutputStream#26:if (isClass(entry) && classPattern.matches(entryName)) \{
    try \{
        ClassReader cr = new ClassReader(entryBytes);
        ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);
        ClassInstrumenter cv = new ClassInstrumenter(projectData, cw, ignoreRegexes, ignoreBranchesRegexes, ignoreTrivial);
        cr.accept(cv, 0);
        if (cv.isInstrumented()) \{
            logger.debug(\"Putting instrumented entry: \" + entry.getName());
            entryBytes = cw.toByteArray();
            modified = true;
            outputEntry.setTime(System.currentTimeMillis());
        \}
    \} catch (Throwable t) \{
        if (entry.getName().endsWith(\"_Stub.class\")) \{
            logger.debug(\"Problems instrumenting archive entry: \" + entry.getName(), t);
        \} else \{
            logger.warn(\"Problems instrumenting archive entry: \" + entry.getName(), t);
        \}
    \}
\}" shape=ellipse]
5 [label="addInstrumentationToArchive#?,CoberturaFile,ZipInputStream,ZipOutputStream#26:isClass(entry)" shape=ellipse]
6 [label="addInstrumentationToArchive#?,CoberturaFile,ZipInputStream,ZipOutputStream#26:classPattern.matches(entryName)" shape=ellipse]
7 [label="addInstrumentationToArchive#?,CoberturaFile,ZipInputStream,ZipOutputStream#26:\{
    try \{
        ClassReader cr = new ClassReader(entryBytes);
        ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);
        ClassInstrumenter cv = new ClassInstrumenter(projectData, cw, ignoreRegexes, ignoreBranchesRegexes, ignoreTrivial);
        cr.accept(cv, 0);
        if (cv.isInstrumented()) \{
            logger.debug(\"Putting instrumented entry: \" + entry.getName());
            entryBytes = cw.toByteArray();
            modified = true;
            outputEntry.setTime(System.currentTimeMillis());
        \}
    \} catch (Throwable t) \{
        if (entry.getName().endsWith(\"_Stub.class\")) \{
            logger.debug(\"Problems instrumenting archive entry: \" + entry.getName(), t);
        \} else \{
            logger.warn(\"Problems instrumenting archive entry: \" + entry.getName(), t);
        \}
    \}
\}
addInstrumentationToSingleClass#?,File#7:\{
    inputStream = new FileInputStream(file);
    ClassReader cr = new ClassReader(inputStream);
    cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);
    cv = new ClassInstrumenter(projectData, cw, ignoreRegexes, ignoreBranchesRegexes, ignoreTrivial);
    cr.accept(cv, 0);
\}" shape=ellipse]
8 [label="addInstrumentationToArchive#?,CoberturaFile,ZipInputStream,ZipOutputStream#27:try \{
    ClassReader cr = new ClassReader(entryBytes);
    ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);
    ClassInstrumenter cv = new ClassInstrumenter(projectData, cw, ignoreRegexes, ignoreBranchesRegexes, ignoreTrivial);
    cr.accept(cv, 0);
    if (cv.isInstrumented()) \{
        logger.debug(\"Putting instrumented entry: \" + entry.getName());
        entryBytes = cw.toByteArray();
        modified = true;
        outputEntry.setTime(System.currentTimeMillis());
    \}
\} catch (Throwable t) \{
    if (entry.getName().endsWith(\"_Stub.class\")) \{
        logger.debug(\"Problems instrumenting archive entry: \" + entry.getName(), t);
    \} else \{
        logger.warn(\"Problems instrumenting archive entry: \" + entry.getName(), t);
    \}
\}" shape=ellipse]
9 [label="addInstrumentationToArchive#?,CoberturaFile,ZipInputStream,ZipOutputStream#27:\{
    ClassReader cr = new ClassReader(entryBytes);
    ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);
    ClassInstrumenter cv = new ClassInstrumenter(projectData, cw, ignoreRegexes, ignoreBranchesRegexes, ignoreTrivial);
    cr.accept(cv, 0);
    if (cv.isInstrumented()) \{
        logger.debug(\"Putting instrumented entry: \" + entry.getName());
        entryBytes = cw.toByteArray();
        modified = true;
        outputEntry.setTime(System.currentTimeMillis());
    \}
\}" shape=ellipse]
10 [label="addInstrumentationToArchive#?,CoberturaFile,ZipInputStream,ZipOutputStream#28:ClassReader cr = new ClassReader(entryBytes)" shape=ellipse]
11 [label="addInstrumentationToArchive#?,CoberturaFile,ZipInputStream,ZipOutputStream#28:new ClassReader(entryBytes)" shape=ellipse]
12 [label="addInstrumentationToArchive#?,CoberturaFile,ZipInputStream,ZipOutputStream#28:ClassReader(byte[])
addInstrumentationToSingleClass#?,File#12:ClassInstrumenter" shape=ellipse]
13 [label="addInstrumentationToArchive#?,CoberturaFile,ZipInputStream,ZipOutputStream#28:entryBytes
addInstrumentationToSingleClass#?,File#11:cv" shape=ellipse]
14 [label="addInstrumentationToArchive#?,CoberturaFile,ZipInputStream,ZipOutputStream#29:ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS)" shape=ellipse]
15 [label="addInstrumentationToArchive#?,CoberturaFile,ZipInputStream,ZipOutputStream#29:new ClassWriter(ClassWriter.COMPUTE_MAXS)" shape=ellipse]
16 [label="addInstrumentationToArchive#?,CoberturaFile,ZipInputStream,ZipOutputStream#29:ClassWriter()
addInstrumentationToSingleClass#?,File#12:ClassInstrumenter" shape=ellipse]
17 [label="addInstrumentationToArchive#?,CoberturaFile,ZipInputStream,ZipOutputStream#29:ClassWriter.COMPUTE_MAXS
addInstrumentationToSingleClass#?,File#10:cw
visitMethod#?,int,String,String,String,String[]#13:null" shape=ellipse]
18 [label="addInstrumentationToArchive#?,CoberturaFile,ZipInputStream,ZipOutputStream#30:ClassInstrumenter cv = new ClassInstrumenter(projectData, cw, ignoreRegexes, ignoreBranchesRegexes, ignoreTrivial)" shape=ellipse]
19 [label="addInstrumentationToArchive#?,CoberturaFile,ZipInputStream,ZipOutputStream#31:ClassInstrumenter()
visitMethod#?,int,String,String,String,String[]#14:FirstPassMethodInstrumenter()" shape=ellipse]
20 [label="addInstrumentationToArchive#?,CoberturaFile,ZipInputStream,ZipOutputStream#32:projectData
visitMethod#?,int,String,String,String,String[]#23:exceptions" shape=ellipse]
21 [label="addInstrumentationToArchive#?,CoberturaFile,ZipInputStream,ZipOutputStream#32:cw
visitMethod#?,int,String,String,String,String[]#19:access" shape=ellipse]
22 [label="addInstrumentationToArchive#?,CoberturaFile,ZipInputStream,ZipOutputStream#32:ignoreRegexes
visitMethod#?,int,String,String,String,String[]#24:ignoreRegexs" shape=ellipse]
23 [label="addInstrumentationToArchive#?,CoberturaFile,ZipInputStream,ZipOutputStream#32:ignoreBranchesRegexes
visitMethod#?,int,String,String,String,String[]#25:ignoreBranchesRegexs" shape=ellipse]
24 [label="addInstrumentationToArchive#?,CoberturaFile,ZipInputStream,ZipOutputStream#32:ignoreTrivial
visitMethod#?,int,String,String,String,String[]#26:ignoreTrivial" shape=ellipse]
25 [label="addInstrumentationToArchive#?,CoberturaFile,ZipInputStream,ZipOutputStream#33:cr.accept(cv, 0)" shape=ellipse]
26 [label="addInstrumentationToArchive#?,CoberturaFile,ZipInputStream,ZipOutputStream#33:accept(ClassInstrumenter,int)
addInstrumentationToSingleClass#?,File#17:PlaceHold" shape=ellipse]
27 [label="addInstrumentationToArchive#?,CoberturaFile,ZipInputStream,ZipOutputStream#33:cr" shape=ellipse]
28 [label="addInstrumentationToArchive#?,CoberturaFile,ZipInputStream,ZipOutputStream#33:cv" shape=ellipse]
29 [label="addInstrumentationToArchive#?,CoberturaFile,ZipInputStream,ZipOutputStream#33:0" shape=ellipse]
30 [label="addInstrumentationToArchive#?,CoberturaFile,ZipInputStream,ZipOutputStream#34:if (cv.isInstrumented()) \{
    logger.debug(\"Putting instrumented entry: \" + entry.getName());
    entryBytes = cw.toByteArray();
    modified = true;
    outputEntry.setTime(System.currentTimeMillis());
\}" shape=ellipse]
31 [label="addInstrumentationToArchive#?,CoberturaFile,ZipInputStream,ZipOutputStream#34:cv.isInstrumented()" shape=ellipse]
32 [label="addInstrumentationToArchive#?,CoberturaFile,ZipInputStream,ZipOutputStream#34:isInstrumented()" shape=ellipse]
33 [label="addInstrumentationToArchive#?,CoberturaFile,ZipInputStream,ZipOutputStream#34:cv" shape=ellipse]
34 [label="addInstrumentationToArchive#?,CoberturaFile,ZipInputStream,ZipOutputStream#40: catch (Throwable t) \{
    if (entry.getName().endsWith(\"_Stub.class\")) \{
        logger.debug(\"Problems instrumenting archive entry: \" + entry.getName(), t);
    \} else \{
        logger.warn(\"Problems instrumenting archive entry: \" + entry.getName(), t);
    \}
\}" shape=ellipse]
35 [label="addInstrumentationToArchive#?,CoberturaFile,ZipInputStream,ZipOutputStream#40:Throwable t" shape=ellipse]
36 [label="addInstrumentationToArchive#?,CoberturaFile,ZipInputStream,ZipOutputStream#36:ignoreMethodAnnotations
visitMethod#?,int,String,String,String,String[]#26:ignoreMethodAnnotations" shape=ellipse]
37 [label="addInstrumentationToArchive#?,CoberturaFile,ZipInputStream,ZipOutputStream#36:ignoreMethodAnnotations
addInstrumentationToSingleClass#?,File#13:ignoreBranchesRegexes
visitMethod#?,int,String,String,String,String[]#26:ignoreMethodAnnotations" shape=ellipse]
38 [label="addInstrumentationToArchive#?,CoberturaFile,ZipInputStream,ZipOutputStream#36:PlaceHold
visitMethod#?,int,String,String,String,String[]#26:PlaceHold" shape=ellipse]
39 [label="addInstrumentationToArchive#?,CoberturaFile,ZipInputStream,ZipOutputStream#36:
visitMethod#?,int,String,String,String,String[]#26:" shape=ellipse]
40 [label="addInstrumentationToSingleClass#?,File#11:cv = new ClassInstrumenter(projectData, cw, ignoreRegexes, ignoreBranchesRegexes, ignoreTrivial)" shape=ellipse]
41 [label="addInstrumentationToSingleClass#?,File#17:ignoreMethodAnnotations" shape=ellipse]
42 [label="addInstrumentationToSingleClass#?,File#17:" shape=ellipse]
43 [label="addInstrumentationToSingleClass#?,File#13:projectData" shape=ellipse]
44 [label="addInstrumentationToSingleClass#?,File#13:cw" shape=ellipse]
45 [label="addInstrumentationToSingleClass#?,File#13:ignoreRegexes" shape=ellipse]
46 [label="addInstrumentationToSingleClass#?,File#13:ignoreBranchesRegexes" shape=ellipse]
47 [label="addInstrumentationToSingleClass#?,File#13:ignoreTrivial" shape=ellipse]
48 [label="addInstrumentationToSingleClass#?,File#12:ClassInstrumenter()" shape=ellipse]
49 [label="addInstrumentationToSingleClass#?,File#13:ignoreTrivial" shape=ellipse]
50 [label="addInstrumentationToSingleClass#?,File#13:ignoreRegexes" shape=ellipse]
51 [label="addInstrumentationToSingleClass#?,File#13:cw" shape=ellipse]
52 [label="addInstrumentationToSingleClass#?,File#13:projectData" shape=ellipse]
53 [label="addInstrumentationToSingleClass#?,File#17:ignoreMethodAnnotations" shape=ellipse]
54 [label="visitMethod#?,int,String,String,String,String[]#12:mv == null ? null : new FirstPassMethodInstrumenter(classData, mv, this.myName, this.superName, access, name, desc, signature, exceptions, ignoreRegexs, ignoreBranchesRegexs, ignoreTrivial)" shape=ellipse]
55 [label="visitMethod#?,int,String,String,String,String[]#12:mv" shape=ellipse]
56 [label="visitMethod#?,int,String,String,String,String[]#12:null" shape=ellipse]
57 [label="visitMethod#?,int,String,String,String,String[]#15:classData" shape=ellipse]
58 [label="visitMethod#?,int,String,String,String,String[]#16:mv" shape=ellipse]
59 [label="visitMethod#?,int,String,String,String,String[]#17:this.myName" shape=ellipse]
60 [label="visitMethod#?,int,String,String,String,String[]#18:this.superName" shape=ellipse]
61 [label="visitMethod#?,int,String,String,String,String[]#20:name" shape=ellipse]
62 [label="visitMethod#?,int,String,String,String,String[]#21:desc" shape=ellipse]
63 [label="visitMethod#?,int,String,String,String,String[]#22:signature" shape=ellipse]
0 -> 36 [label="Action:2"];
0 -> 41 [label="Action:1"];
1 -> 0 [label="Action:3"];
1 -> 19 [label="AST:2"];
1 -> 20 [label="AST:2"];
1 -> 21 [label="AST:2"];
1 -> 22 [label="AST:2"];
1 -> 23 [label="AST:2"];
1 -> 24 [label="AST:2"];
1 -> 43 [label="AST:1"];
1 -> 44 [label="AST:1"];
1 -> 45 [label="AST:1"];
1 -> 46 [label="AST:1"];
1 -> 47 [label="AST:1"];
1 -> 48 [label="AST:1"];
1 -> 57 [label="AST:1"];
1 -> 58 [label="AST:1"];
1 -> 59 [label="AST:1"];
1 -> 60 [label="AST:1"];
1 -> 61 [label="AST:1"];
1 -> 62 [label="AST:1"];
1 -> 63 [label="AST:1"];
2 -> 1 [label="Control Dep:2"];
2 -> 5 [label="AST:1"];
2 -> 6 [label="AST:1"];
2 -> 7 [label="Control Dep:1"];
2 -> 8 [label="Control Dep:1"];
2 -> 9 [label="Control Dep:1"];
2 -> 10 [label="Control Dep:1"];
2 -> 11 [label="Control Dep:1"];
2 -> 12 [label="Control Dep:1"];
2 -> 13 [label="Control Dep:1"];
2 -> 14 [label="Control Dep:1"];
2 -> 15 [label="Control Dep:1"];
2 -> 16 [label="Control Dep:1"];
2 -> 17 [label="Control Dep:2"];
2 -> 18 [label="Control Dep:1"];
2 -> 19 [label="Control Dep:2"];
2 -> 20 [label="Control Dep:2"];
2 -> 21 [label="Control Dep:2"];
2 -> 22 [label="Control Dep:2"];
2 -> 23 [label="Control Dep:2"];
2 -> 24 [label="Control Dep:2"];
2 -> 25 [label="Control Dep:1"];
2 -> 26 [label="Control Dep:1"];
2 -> 27 [label="Control Dep:1"];
2 -> 28 [label="Control Dep:1"];
2 -> 29 [label="Control Dep:1"];
2 -> 30 [label="Control Dep:1"];
2 -> 31 [label="Control Dep:1"];
2 -> 32 [label="Control Dep:1"];
2 -> 33 [label="Control Dep:1"];
2 -> 34 [label="Control Dep:1"];
2 -> 35 [label="Control Dep:1"];
2 -> 36 [label="Control Dep:2"];
2 -> 55 [label="AST:1"];
2 -> 56 [label="AST:1"];
2 -> 57 [label="Control Dep:1"];
2 -> 58 [label="Control Dep:1"];
2 -> 59 [label="Control Dep:1"];
2 -> 60 [label="Control Dep:1"];
2 -> 61 [label="Control Dep:1"];
2 -> 62 [label="Control Dep:1"];
2 -> 63 [label="Control Dep:1"];
3 -> 2 [label="Control Dep:1"];
3 -> 4 [label="Control Dep:1"];
3 -> 5 [label="Control Dep:1"];
3 -> 6 [label="Control Dep:1"];
4 -> 2 [label="AST:1"];
4 -> 7 [label="AST:1"];
7 -> 8 [label="AST:1"];
7 -> 40 [label="AST:1"];
8 -> 9 [label="AST:1"];
8 -> 34 [label="AST:1"];
9 -> 10 [label="AST:1"];
9 -> 14 [label="AST:1"];
9 -> 18 [label="AST:1"];
9 -> 25 [label="AST:1"];
9 -> 30 [label="AST:1"];
10 -> 11 [label="AST:1"];
11 -> 12 [label="AST:1"];
11 -> 13 [label="AST:1"];
14 -> 15 [label="AST:1"];
15 -> 16 [label="AST:1"];
15 -> 17 [label="AST:1"];
17 -> 44 [label="Define Use:1"];
18 -> 1 [label="AST:1"];
25 -> 27 [label="AST:1"];
25 -> 26 [label="AST:1"];
25 -> 28 [label="AST:1"];
25 -> 29 [label="AST:1"];
26 -> 42 [label="AST:1"];
30 -> 31 [label="AST:1"];
31 -> 33 [label="AST:1"];
31 -> 32 [label="AST:1"];
34 -> 35 [label="AST:1"];
36 -> 37 [label="AST:2"];
37 -> 38 [label="AST:2"];
38 -> 39 [label="AST:2"];
40 -> 13 [label="AST:1"];
40 -> 1 [label="AST:1"];
41 -> 53 [label="AST:1"];
41 -> 13 [label="Data Dep:1"];
41 -> 13 [label="Control Dep:1"];
43 -> 52 [label="AST:1"];
43 -> 13 [label="Data Dep:1"];
44 -> 51 [label="AST:1"];
44 -> 13 [label="Data Dep:1"];
45 -> 50 [label="AST:1"];
45 -> 13 [label="Data Dep:1"];
46 -> 37 [label="AST:1"];
46 -> 13 [label="Data Dep:1"];
47 -> 49 [label="AST:1"];
47 -> 13 [label="Data Dep:1"];
48 -> 12 [label="AST:1"];
48 -> 16 [label="AST:1"];
53 -> 26 [label="AST:1"];
54 -> 2 [label="AST:1"];
54 -> 17 [label="AST:1"];
54 -> 1 [label="AST:1"];
}