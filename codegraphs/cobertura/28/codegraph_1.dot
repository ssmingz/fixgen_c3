digraph "merge#?,CoverageData" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@merge" shape=ellipse]
2 [label="2:CtParameterImpl@CoverageData coverageData" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@CoverageData" shape=ellipse]
4 [label="3:CtTypeReferenceImpl@ProjectData" shape=ellipse]
5 [label="3:CtPackageReferenceImpl@" shape=ellipse]
6 [label="3:CtVariableReadImpl@((ProjectData) (coverageData))" shape=ellipse]
7 [label="3:CtTypeReferenceImpl@ProjectData" shape=ellipse]
8 [label="3:CtParameterReferenceImpl@coverageData" shape=ellipse]
9 [label="3:CtVirtualElement@projectData" shape=ellipse]
10 [label="3:CtLocalVariableImpl@ProjectData projectData = ((ProjectData) (coverageData))" shape=ellipse]
11 [label="4:CtExecutableReferenceImpl@getBothLocks(<unknown>)" shape=ellipse]
12 [label="4:CtTypeReferenceImpl@null" shape=ellipse]
13 [label="4:CtVirtualElement@getBothLocks" shape=ellipse]
14 [label="4:CtTypeAccessImpl@PlaceHold" shape=ellipse]
15 [label="4:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
16 [label="4:CtThisAccessImpl@" shape=ellipse]
17 [label="4:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
18 [label="4:CtVariableReadImpl@projectData" shape=ellipse]
19 [label="4:CtLocalVariableReferenceImpl@projectData" shape=ellipse]
20 [label="4:CtInvocationImpl@getBothLocks(projectData)" shape=ellipse]
21 [label="6:CtExecutableReferenceImpl@merge(CoverageData)" shape=ellipse]
22 [label="6:CtTypeReferenceImpl@Object" shape=ellipse]
23 [label="6:CtTypeReferenceImpl@CoverageData" shape=ellipse]
24 [label="6:CtVirtualElement@merge" shape=ellipse]
25 [label="6:CtSuperAccessImpl@super" shape=ellipse]
26 [label="6:CtLocalVariableReferenceImpl@" shape=ellipse]
27 [label="6:CtVariableReadImpl@coverageData" shape=ellipse]
28 [label="6:CtParameterReferenceImpl@coverageData" shape=ellipse]
29 [label="6:CtInvocationImpl@super.merge(coverageData)" shape=ellipse]
30 [label="7:CtTypeReferenceImpl@Iterator" shape=ellipse]
31 [label="7:CtPackageReferenceImpl@" shape=ellipse]
32 [label="7:CtExecutableReferenceImpl@iterator()" shape=ellipse]
33 [label="7:CtTypeReferenceImpl@Iterator" shape=ellipse]
34 [label="7:CtVirtualElement@iterator" shape=ellipse]
35 [label="7:CtExecutableReferenceImpl@keySet()" shape=ellipse]
36 [label="7:CtTypeReferenceImpl@classes" shape=ellipse]
37 [label="7:CtVirtualElement@keySet" shape=ellipse]
38 [label="7:CtFieldReferenceImpl@classes" shape=ellipse]
39 [label="7:CtFieldReadImpl@projectData.classes" shape=ellipse]
40 [label="7:CtVariableReadImpl@projectData" shape=ellipse]
41 [label="7:CtInvocationImpl@projectData.classes.keySet()" shape=ellipse]
42 [label="7:CtInvocationImpl@projectData.classes.keySet().iterator()" shape=ellipse]
43 [label="7:CtVirtualElement@iter" shape=ellipse]
44 [label="7:CtLocalVariableImpl@Iterator iter = projectData.classes.keySet().iterator()" shape=ellipse]
45 [label="7:CtExecutableReferenceImpl@hasNext()" shape=ellipse]
46 [label="7:CtTypeReferenceImpl@Iterator" shape=ellipse]
47 [label="7:CtTypeReferenceImpl@boolean" shape=ellipse]
48 [label="7:CtVirtualElement@hasNext" shape=ellipse]
49 [label="7:CtVariableReadImpl@iter" shape=ellipse]
50 [label="7:CtLocalVariableReferenceImpl@iter" shape=ellipse]
51 [label="7:CtInvocationImpl@iter.hasNext()" shape=ellipse]
52 [label="8:CtTypeReferenceImpl@Object" shape=ellipse]
53 [label="8:CtPackageReferenceImpl@java.lang" shape=ellipse]
54 [label="8:CtExecutableReferenceImpl@next()" shape=ellipse]
55 [label="8:CtTypeReferenceImpl@Iterator" shape=ellipse]
56 [label="8:CtTypeReferenceImpl@Object" shape=ellipse]
57 [label="8:CtVirtualElement@next" shape=ellipse]
58 [label="8:CtVariableReadImpl@iter" shape=ellipse]
59 [label="8:CtLocalVariableReferenceImpl@iter" shape=ellipse]
60 [label="8:CtInvocationImpl@iter.next()" shape=ellipse]
61 [label="8:CtVirtualElement@key" shape=ellipse]
62 [label="8:CtLocalVariableImpl@Object key = iter.next()" shape=ellipse]
63 [label="9:CtExecutableReferenceImpl@containsKey(java.lang.Object)" shape=ellipse]
64 [label="9:CtTypeReferenceImpl@Object" shape=ellipse]
65 [label="9:CtVirtualElement@containsKey" shape=ellipse]
66 [label="9:CtFieldReferenceImpl@classes" shape=ellipse]
67 [label="9:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
68 [label="9:CtFieldReadImpl@this.classes" shape=ellipse]
69 [label="9:CtThisAccessImpl@this" shape=ellipse]
70 [label="9:CtVariableReadImpl@key" shape=ellipse]
71 [label="9:CtLocalVariableReferenceImpl@key" shape=ellipse]
72 [label="9:CtInvocationImpl@this.classes.containsKey(key)" shape=ellipse]
73 [label="9:CtUnaryOperatorImpl@!this.classes.containsKey(key)" shape=ellipse]
74 [label="10:CtExecutableReferenceImpl@put(java.lang.Object)" shape=ellipse]
75 [label="10:CtTypeReferenceImpl@Object" shape=ellipse]
76 [label="10:CtVirtualElement@put" shape=ellipse]
77 [label="10:CtFieldReferenceImpl@classes" shape=ellipse]
78 [label="10:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
79 [label="10:CtFieldReadImpl@this.classes" shape=ellipse]
80 [label="10:CtThisAccessImpl@this" shape=ellipse]
81 [label="10:CtVariableReadImpl@key" shape=ellipse]
82 [label="10:CtLocalVariableReferenceImpl@key" shape=ellipse]
83 [label="10:CtExecutableReferenceImpl@get(java.lang.Object)" shape=ellipse]
84 [label="10:CtTypeReferenceImpl@classes" shape=ellipse]
85 [label="10:CtTypeReferenceImpl@Object" shape=ellipse]
86 [label="10:CtVirtualElement@get" shape=ellipse]
87 [label="10:CtFieldReferenceImpl@classes" shape=ellipse]
88 [label="10:CtFieldReadImpl@projectData.classes" shape=ellipse]
89 [label="10:CtVariableReadImpl@projectData" shape=ellipse]
90 [label="10:CtVariableReadImpl@key" shape=ellipse]
91 [label="10:CtLocalVariableReferenceImpl@key" shape=ellipse]
92 [label="10:CtInvocationImpl@projectData.classes.get(key)" shape=ellipse]
93 [label="10:CtInvocationImpl@this.classes.put(key, projectData.classes.get(key))" shape=ellipse]
94 [label="9:CtBlockImpl@\{
    this.classes.put(key, projectData.classes.get(key));
\}" shape=ellipse]
95 [label="9:CtIfImpl@if (!this.classes.containsKey(key)) \{
    this.classes.put(key, projectData.classes.get(key));
\}" shape=ellipse]
96 [label="7:CtBlockImpl@\{
    Object key = iter.next();
    if (!this.classes.containsKey(key)) \{
        this.classes.put(key, projectData.classes.get(key));
    \}
\}" shape=ellipse]
97 [label="7:CtForImpl@for (Iterator iter = projectData.classes.keySet().iterator(); iter.hasNext();) \{
    Object key = iter.next();
    if (!this.classes.containsKey(key)) \{
        this.classes.put(key, projectData.classes.get(key));
    \}
\}" shape=ellipse]
98 [label="5:CtBlockImpl@\{
    super.merge(coverageData);
    for (Iterator iter = projectData.classes.keySet().iterator(); iter.hasNext();) \{
        Object key = iter.next();
        if (!this.classes.containsKey(key)) \{
            this.classes.put(key, projectData.classes.get(key));
        \}
    \}
\}" shape=ellipse]
99 [label="14:CtExecutableReferenceImpl@unlock()" shape=ellipse]
100 [label="14:CtTypeReferenceImpl@lock" shape=ellipse]
101 [label="14:CtVirtualElement@unlock" shape=ellipse]
102 [label="14:CtFieldReferenceImpl@lock" shape=ellipse]
103 [label="14:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
104 [label="14:CtFieldReadImpl@lock" shape=ellipse]
105 [label="14:CtInvocationImpl@lock.unlock()" shape=ellipse]
106 [label="15:CtExecutableReferenceImpl@unlock()" shape=ellipse]
107 [label="15:CtTypeReferenceImpl@lock" shape=ellipse]
108 [label="15:CtVirtualElement@unlock" shape=ellipse]
109 [label="15:CtFieldReferenceImpl@lock" shape=ellipse]
110 [label="15:CtFieldReadImpl@projectData.lock" shape=ellipse]
111 [label="15:CtVariableReadImpl@projectData" shape=ellipse]
112 [label="15:CtInvocationImpl@projectData.lock.unlock()" shape=ellipse]
113 [label="13:CtBlockImpl@\{
    lock.unlock();
    projectData.lock.unlock();
\}" shape=ellipse]
114 [label="5:CtTryImpl@try \{
    super.merge(coverageData);
    for (Iterator iter = projectData.classes.keySet().iterator(); iter.hasNext();) \{
        Object key = iter.next();
        if (!this.classes.containsKey(key)) \{
            this.classes.put(key, projectData.classes.get(key));
        \}
    \}
\} finally \{
    lock.unlock();
    projectData.lock.unlock();
\}" shape=ellipse]
115 [label="2:CtBlockImpl@\{
    ProjectData projectData = ((ProjectData) (coverageData));
    getBothLocks(projectData);
    try \{
        super.merge(coverageData);
        for (Iterator iter = projectData.classes.keySet().iterator(); iter.hasNext();) \{
            Object key = iter.next();
            if (!this.classes.containsKey(key)) \{
                this.classes.put(key, projectData.classes.get(key));
            \}
        \}
    \} finally \{
        lock.unlock();
        projectData.lock.unlock();
    \}
\}" shape=ellipse]
116 [label="2:CtMethodImpl@public void merge(CoverageData coverageData) \{
    ProjectData projectData = ((ProjectData) (coverageData));
    getBothLocks(projectData);
    try \{
        super.merge(coverageData);
        for (Iterator iter = projectData.classes.keySet().iterator(); iter.hasNext();) \{
            Object key = iter.next();
            if (!this.classes.containsKey(key)) \{
                this.classes.put(key, projectData.classes.get(key));
            \}
        \}
    \} finally \{
        lock.unlock();
        projectData.lock.unlock();
    \}
\}" shape=ellipse]
117 [label="3:Insert@INSERT" shape=ellipse]
118 [label="3:CtPackageReferenceImpl@" shape=ellipse]
119 [label="3:CtTypeReferenceImpl@CoverageData" shape=ellipse]
120 [label="3:CtParameterReferenceImpl@coverageData" shape=ellipse]
121 [label="3:CtVariableReadImpl@coverageData" shape=ellipse]
122 [label="3:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
123 [label="3:CtLiteralImpl@null" shape=ellipse]
124 [label="3:CtBinaryOperatorImpl@coverageData == null" shape=ellipse]
125 [label="4:CtReturnImpl@return" shape=ellipse]
126 [label="3:CtBlockImpl@\{
    return;
\}" shape=ellipse]
127 [label="3:CtIfImpl@if (coverageData == null) \{
    return;
\}" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
6 -> 7 [label="AST"];
6 -> 8 [label="AST"];
6 -> 9 [label="Data Dep"];
9 -> 18 [label="Define-Use"];
10 -> 9 [label="AST"];
10 -> 4 [label="AST"];
10 -> 6 [label="AST"];
11 -> 12 [label="AST"];
14 -> 15 [label="AST"];
16 -> 17 [label="AST"];
16 -> 14 [label="AST"];
18 -> 19 [label="AST"];
20 -> 13 [label="AST"];
20 -> 16 [label="AST"];
20 -> 11 [label="AST"];
20 -> 18 [label="AST"];
21 -> 22 [label="AST"];
21 -> 23 [label="AST"];
25 -> 26 [label="AST"];
27 -> 28 [label="AST"];
29 -> 24 [label="AST"];
29 -> 25 [label="AST"];
29 -> 21 [label="AST"];
29 -> 27 [label="AST"];
30 -> 31 [label="AST"];
32 -> 33 [label="AST"];
35 -> 36 [label="AST"];
39 -> 40 [label="AST"];
39 -> 38 [label="AST"];
39 -> 43 [label="Data Dep"];
41 -> 37 [label="AST"];
41 -> 39 [label="AST"];
41 -> 35 [label="AST"];
42 -> 34 [label="AST"];
42 -> 41 [label="AST"];
42 -> 32 [label="AST"];
43 -> 49 [label="Define-Use"];
43 -> 58 [label="Define-Use"];
44 -> 43 [label="AST"];
44 -> 30 [label="AST"];
44 -> 42 [label="AST"];
45 -> 46 [label="AST"];
45 -> 47 [label="AST"];
49 -> 50 [label="AST"];
51 -> 48 [label="AST"];
51 -> 49 [label="AST"];
51 -> 45 [label="AST"];
51 -> 96 [label="Control Dep"];
51 -> 62 [label="Control Dep"];
51 -> 60 [label="Control Dep"];
51 -> 54 [label="Control Dep"];
51 -> 58 [label="Control Dep"];
51 -> 95 [label="Control Dep"];
51 -> 73 [label="Control Dep"];
51 -> 72 [label="Control Dep"];
51 -> 63 [label="Control Dep"];
51 -> 68 [label="Control Dep"];
51 -> 70 [label="Control Dep"];
52 -> 53 [label="AST"];
54 -> 55 [label="AST"];
54 -> 56 [label="AST"];
58 -> 59 [label="AST"];
58 -> 61 [label="Data Dep"];
60 -> 57 [label="AST"];
60 -> 58 [label="AST"];
60 -> 54 [label="AST"];
61 -> 70 [label="Define-Use"];
61 -> 81 [label="Define-Use"];
61 -> 90 [label="Define-Use"];
62 -> 61 [label="AST"];
62 -> 52 [label="AST"];
62 -> 60 [label="AST"];
63 -> 64 [label="AST"];
66 -> 67 [label="AST"];
68 -> 69 [label="AST"];
68 -> 66 [label="AST"];
70 -> 71 [label="AST"];
72 -> 65 [label="AST"];
72 -> 68 [label="AST"];
72 -> 63 [label="AST"];
72 -> 70 [label="AST"];
73 -> 72 [label="AST"];
73 -> 94 [label="Control Dep"];
73 -> 93 [label="Control Dep"];
73 -> 74 [label="Control Dep"];
73 -> 79 [label="Control Dep"];
73 -> 81 [label="Control Dep"];
73 -> 92 [label="Control Dep"];
73 -> 83 [label="Control Dep"];
73 -> 88 [label="Control Dep"];
73 -> 90 [label="Control Dep"];
74 -> 75 [label="AST"];
77 -> 78 [label="AST"];
79 -> 80 [label="AST"];
79 -> 77 [label="AST"];
81 -> 82 [label="AST"];
83 -> 84 [label="AST"];
83 -> 85 [label="AST"];
88 -> 89 [label="AST"];
88 -> 87 [label="AST"];
90 -> 91 [label="AST"];
92 -> 86 [label="AST"];
92 -> 88 [label="AST"];
92 -> 83 [label="AST"];
92 -> 90 [label="AST"];
93 -> 76 [label="AST"];
93 -> 79 [label="AST"];
93 -> 74 [label="AST"];
93 -> 81 [label="AST"];
93 -> 92 [label="AST"];
94 -> 93 [label="AST"];
95 -> 73 [label="AST"];
95 -> 94 [label="AST"];
96 -> 62 [label="AST"];
96 -> 95 [label="AST"];
97 -> 44 [label="AST"];
97 -> 51 [label="AST"];
97 -> 96 [label="AST"];
98 -> 29 [label="AST"];
98 -> 97 [label="AST"];
99 -> 100 [label="AST"];
102 -> 103 [label="AST"];
104 -> 102 [label="AST"];
105 -> 101 [label="AST"];
105 -> 104 [label="AST"];
105 -> 99 [label="AST"];
106 -> 107 [label="AST"];
110 -> 111 [label="AST"];
110 -> 109 [label="AST"];
112 -> 108 [label="AST"];
112 -> 110 [label="AST"];
112 -> 106 [label="AST"];
113 -> 105 [label="AST"];
113 -> 112 [label="AST"];
114 -> 98 [label="AST"];
114 -> 113 [label="AST"];
115 -> 10 [label="AST"];
115 -> 20 [label="AST"];
115 -> 114 [label="AST"];
115 -> 117 [label="Action"];
116 -> 1 [label="AST"];
116 -> 0 [label="AST"];
116 -> 2 [label="AST"];
116 -> 115 [label="AST"];
117 -> 127 [label="Action"];
119 -> 118 [label="AST"];
120 -> 119 [label="AST"];
121 -> 120 [label="AST"];
123 -> 122 [label="AST"];
124 -> 121 [label="AST"];
124 -> 123 [label="AST"];
124 -> 126 [label="Control Dep"];
124 -> 125 [label="Control Dep"];
126 -> 125 [label="AST"];
127 -> 124 [label="AST"];
127 -> 126 [label="AST"];
}