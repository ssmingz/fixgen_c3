digraph "Pattern" {
0 [label="getCCN#?,File,boolean#3:INSERT
merge#?,CoverageData#3:INSERT" shape=ellipse]
1 [label="getCCN#?,File,boolean#2:\{
    int ccnAccumulator = 0;
    Vector files = getListOfFiles(file, recursive);
    if (files.isEmpty()) \{
        logger.warn(((\"Cannot find files to compute CCN, file=\" + file.getAbsolutePath()) + \", recursive=\") + recursive);
        return 0;
    \}
    Javancss javancss = new Javancss(files);
    List functionMetrics = javancss.getFunctionMetrics();
    if (functionMetrics.size() <= 0) \{
        return 0;
    \}
    Iterator iter = functionMetrics.iterator();
    while (iter.hasNext()) \{
        Vector functionMetric = ((Vector) (iter.next()));
        ccnAccumulator += ((Integer) (functionMetric.elementAt(FCT_CCN))).intValue();
    \} 
    return ((double) (ccnAccumulator)) / functionMetrics.size();
\}
merge#?,CoverageData#2:\{
    ProjectData projectData = ((ProjectData) (coverageData));
    getBothLocks(projectData);
    try \{
        super.merge(coverageData);
        for (Iterator iter = projectData.classes.keySet().iterator(); iter.hasNext();) \{
            Object key = iter.next();
            if (!this.classes.containsKey(key)) \{
                this.classes.put(key, projectData.classes.get(key));
            \}
        \}
    \} finally \{
        lock.unlock();
        projectData.lock.unlock();
    \}
\}" shape=ellipse]
2 [label="getCCN#?,File,boolean#2:public static double getCCN(File file, boolean recursive) \{
    int ccnAccumulator = 0;
    Vector files = getListOfFiles(file, recursive);
    if (files.isEmpty()) \{
        logger.warn(((\"Cannot find files to compute CCN, file=\" + file.getAbsolutePath()) + \", recursive=\") + recursive);
        return 0;
    \}
    Javancss javancss = new Javancss(files);
    List functionMetrics = javancss.getFunctionMetrics();
    if (functionMetrics.size() <= 0) \{
        return 0;
    \}
    Iterator iter = functionMetrics.iterator();
    while (iter.hasNext()) \{
        Vector functionMetric = ((Vector) (iter.next()));
        ccnAccumulator += ((Integer) (functionMetric.elementAt(FCT_CCN))).intValue();
    \} 
    return ((double) (ccnAccumulator)) / functionMetrics.size();
\}
merge#?,CoverageData#2:public void merge(CoverageData coverageData) \{
    ProjectData projectData = ((ProjectData) (coverageData));
    getBothLocks(projectData);
    try \{
        super.merge(coverageData);
        for (Iterator iter = projectData.classes.keySet().iterator(); iter.hasNext();) \{
            Object key = iter.next();
            if (!this.classes.containsKey(key)) \{
                this.classes.put(key, projectData.classes.get(key));
            \}
        \}
    \} finally \{
        lock.unlock();
        projectData.lock.unlock();
    \}
\}" shape=ellipse]
3 [label="getCCN#?,File,boolean#2:getCCN
merge#?,CoverageData#2:merge" shape=ellipse]
4 [label="getCCN#?,File,boolean#2:double
merge#?,CoverageData#2:void" shape=ellipse]
5 [label="getCCN#?,File,boolean#2:File file
merge#?,CoverageData#2:CoverageData coverageData" shape=ellipse]
6 [label="getCCN#?,File,boolean#2:boolean recursive" shape=ellipse]
7 [label="getCCN#?,File,boolean#3:int ccnAccumulator = 0
merge#?,CoverageData#5:try \{
    super.merge(coverageData);
    for (Iterator iter = projectData.classes.keySet().iterator(); iter.hasNext();) \{
        Object key = iter.next();
        if (!this.classes.containsKey(key)) \{
            this.classes.put(key, projectData.classes.get(key));
        \}
    \}
\} finally \{
    lock.unlock();
    projectData.lock.unlock();
\}" shape=ellipse]
8 [label="getCCN#?,File,boolean#3:ccnAccumulator" shape=ellipse]
9 [label="getCCN#?,File,boolean#3:int" shape=ellipse]
10 [label="getCCN#?,File,boolean#3:0" shape=ellipse]
11 [label="getCCN#?,File,boolean#4:Vector files = getListOfFiles(file, recursive)
merge#?,CoverageData#3:ProjectData projectData = ((ProjectData) (coverageData))" shape=ellipse]
12 [label="getCCN#?,File,boolean#4:files
merge#?,CoverageData#3:projectData" shape=ellipse]
13 [label="getCCN#?,File,boolean#4:Vector
merge#?,CoverageData#3:ProjectData" shape=ellipse]
14 [label="getCCN#?,File,boolean#4:getListOfFiles(file, recursive)" shape=ellipse]
15 [label="getCCN#?,File,boolean#5:if (files.isEmpty()) \{
    logger.warn(((\"Cannot find files to compute CCN, file=\" + file.getAbsolutePath()) + \", recursive=\") + recursive);
    return 0;
\}" shape=ellipse]
16 [label="getCCN#?,File,boolean#5:files.isEmpty()" shape=ellipse]
17 [label="getCCN#?,File,boolean#5:\{
    logger.warn(((\"Cannot find files to compute CCN, file=\" + file.getAbsolutePath()) + \", recursive=\") + recursive);
    return 0;
\}
merge#?,CoverageData#3:\{
    return;
\}" shape=ellipse]
18 [label="getCCN#?,File,boolean#11:Javancss javancss = new Javancss(files)" shape=ellipse]
19 [label="getCCN#?,File,boolean#11:javancss
merge#?,CoverageData#3:coverageData" shape=ellipse]
20 [label="getCCN#?,File,boolean#11:Javancss
merge#?,CoverageData#4:getBothLocks(<unknown>)" shape=ellipse]
21 [label="getCCN#?,File,boolean#11:new Javancss(files)" shape=ellipse]
22 [label="getCCN#?,File,boolean#12:List functionMetrics = javancss.getFunctionMetrics()" shape=ellipse]
23 [label="getCCN#?,File,boolean#12:functionMetrics
merge#?,CoverageData#4:" shape=ellipse]
24 [label="getCCN#?,File,boolean#12:List
merge#?,CoverageData#3:CoverageData" shape=ellipse]
25 [label="getCCN#?,File,boolean#12:javancss.getFunctionMetrics()" shape=ellipse]
26 [label="getCCN#?,File,boolean#13:if (functionMetrics.size() <= 0) \{
    return 0;
\}" shape=ellipse]
27 [label="getCCN#?,File,boolean#13:functionMetrics.size() <= 0" shape=ellipse]
28 [label="getCCN#?,File,boolean#13:\{
    return 0;
\}" shape=ellipse]
29 [label="getCCN#?,File,boolean#16:Iterator iter = functionMetrics.iterator()" shape=ellipse]
30 [label="getCCN#?,File,boolean#16:iter" shape=ellipse]
31 [label="getCCN#?,File,boolean#16:Iterator
merge#?,CoverageData#3:<nulltype>" shape=ellipse]
32 [label="getCCN#?,File,boolean#16:functionMetrics.iterator()" shape=ellipse]
33 [label="getCCN#?,File,boolean#17:while (iter.hasNext()) \{
    Vector functionMetric = ((Vector) (iter.next()));
    ccnAccumulator += ((Integer) (functionMetric.elementAt(FCT_CCN))).intValue();
\} " shape=ellipse]
34 [label="getCCN#?,File,boolean#17:iter.hasNext()" shape=ellipse]
35 [label="getCCN#?,File,boolean#17:\{
    Vector functionMetric = ((Vector) (iter.next()));
    ccnAccumulator += ((Integer) (functionMetric.elementAt(FCT_CCN))).intValue();
\}" shape=ellipse]
36 [label="getCCN#?,File,boolean#21:return ((double) (ccnAccumulator)) / functionMetrics.size()" shape=ellipse]
37 [label="getCCN#?,File,boolean#21:((double) (ccnAccumulator)) / functionMetrics.size()" shape=ellipse]
38 [label="getCCN#?,File,boolean#3:if (file == null) \{
    return 0;
\}" shape=ellipse]
39 [label="getCCN#?,File,boolean#3:file == null" shape=ellipse]
40 [label="getCCN#?,File,boolean#3:file" shape=ellipse]
41 [label="getCCN#?,File,boolean#3:file" shape=ellipse]
42 [label="getCCN#?,File,boolean#3:File" shape=ellipse]
43 [label="getCCN#?,File,boolean#3:" shape=ellipse]
44 [label="getCCN#?,File,boolean#3:null" shape=ellipse]
45 [label="getCCN#?,File,boolean#3:<nulltype>" shape=ellipse]
46 [label="getCCN#?,File,boolean#3:\{
    return 0;
\}" shape=ellipse]
47 [label="getCCN#?,File,boolean#4:return 0" shape=ellipse]
48 [label="getCCN#?,File,boolean#4:0" shape=ellipse]
49 [label="getCCN#?,File,boolean#4:int" shape=ellipse]
50 [label="merge#?,CoverageData#3:((ProjectData) (coverageData))" shape=ellipse]
51 [label="merge#?,CoverageData#4:getBothLocks(projectData)" shape=ellipse]
52 [label="merge#?,CoverageData#4:projectData" shape=ellipse]
53 [label="merge#?,CoverageData#5:\{
    super.merge(coverageData);
    for (Iterator iter = projectData.classes.keySet().iterator(); iter.hasNext();) \{
        Object key = iter.next();
        if (!this.classes.containsKey(key)) \{
            this.classes.put(key, projectData.classes.get(key));
        \}
    \}
\}" shape=ellipse]
54 [label="merge#?,CoverageData#13:\{
    lock.unlock();
    projectData.lock.unlock();
\}" shape=ellipse]
55 [label="merge#?,CoverageData#3:if (coverageData == null) \{
    return;
\}" shape=ellipse]
56 [label="merge#?,CoverageData#3:coverageData == null" shape=ellipse]
57 [label="merge#?,CoverageData#3:" shape=ellipse]
58 [label="merge#?,CoverageData#3:null" shape=ellipse]
59 [label="merge#?,CoverageData#4:return" shape=ellipse]
60 [label="merge#?,CoverageData#4:getBothLocks" shape=ellipse]
61 [label="merge#?,CoverageData#3:coverageData" shape=ellipse]
0 -> 38 [label="Action:1"];
0 -> 55 [label="Action:1"];
1 -> 0 [label="Action:2"];
1 -> 7 [label="AST:2"];
1 -> 11 [label="AST:2"];
1 -> 15 [label="AST:1"];
1 -> 18 [label="AST:1"];
1 -> 22 [label="AST:1"];
1 -> 26 [label="AST:1"];
1 -> 29 [label="AST:1"];
1 -> 33 [label="AST:1"];
1 -> 36 [label="AST:1"];
1 -> 51 [label="AST:1"];
2 -> 1 [label="AST:2"];
2 -> 3 [label="AST:2"];
2 -> 4 [label="AST:2"];
2 -> 5 [label="AST:2"];
2 -> 6 [label="AST:1"];
7 -> 8 [label="AST:1"];
7 -> 9 [label="AST:1"];
7 -> 10 [label="AST:1"];
7 -> 53 [label="AST:1"];
7 -> 54 [label="AST:1"];
11 -> 12 [label="AST:2"];
11 -> 13 [label="AST:2"];
11 -> 14 [label="AST:1"];
11 -> 50 [label="AST:1"];
12 -> 52 [label="Define Use:1"];
15 -> 16 [label="AST:1"];
15 -> 17 [label="AST:1"];
16 -> 17 [label="Control Dep:1"];
17 -> 59 [label="AST:1"];
18 -> 19 [label="AST:1"];
18 -> 20 [label="AST:1"];
18 -> 21 [label="AST:1"];
19 -> 61 [label="AST:1"];
22 -> 23 [label="AST:1"];
22 -> 24 [label="AST:1"];
22 -> 25 [label="AST:1"];
24 -> 57 [label="AST:1"];
26 -> 27 [label="AST:1"];
26 -> 28 [label="AST:1"];
27 -> 28 [label="Control Dep:1"];
29 -> 30 [label="AST:1"];
29 -> 31 [label="AST:1"];
29 -> 32 [label="AST:1"];
33 -> 34 [label="AST:1"];
33 -> 35 [label="AST:1"];
34 -> 35 [label="Control Dep:1"];
36 -> 37 [label="AST:1"];
38 -> 39 [label="AST:1"];
38 -> 46 [label="AST:1"];
39 -> 40 [label="AST:1"];
39 -> 44 [label="AST:1"];
39 -> 46 [label="Control Dep:1"];
39 -> 47 [label="Control Dep:1"];
39 -> 48 [label="Control Dep:1"];
40 -> 41 [label="AST:1"];
41 -> 42 [label="AST:1"];
42 -> 43 [label="AST:1"];
44 -> 45 [label="AST:1"];
46 -> 47 [label="AST:1"];
47 -> 48 [label="AST:1"];
48 -> 49 [label="AST:1"];
50 -> 12 [label="Data Dep:1"];
51 -> 60 [label="AST:1"];
51 -> 23 [label="AST:1"];
51 -> 20 [label="AST:1"];
51 -> 52 [label="AST:1"];
55 -> 56 [label="AST:1"];
55 -> 17 [label="AST:1"];
56 -> 19 [label="AST:1"];
56 -> 58 [label="AST:1"];
56 -> 17 [label="Control Dep:1"];
56 -> 59 [label="Control Dep:1"];
58 -> 31 [label="AST:1"];
61 -> 24 [label="AST:1"];
}