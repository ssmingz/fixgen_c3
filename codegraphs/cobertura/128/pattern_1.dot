digraph "Pattern" {
0 [label="instrumentClass#?,InputStream#52:INSERT
instrumentClass#?,InputStream#17:INSERT" shape=ellipse]
1 [label="instrumentClass#?,InputStream#52:cr2.accept(cv2, 0)
instrumentClass#?,InputStream#17:cr.accept(cv, 0)" shape=ellipse]
2 [label="instrumentClass#?,InputStream#37:cv.shouldBeInstrumented()" shape=ellipse]
3 [label="instrumentClass#?,InputStream#37:if (cv.shouldBeInstrumented()) \{
    ClassReader cr2 = new ClassReader(cw0.toByteArray());
    ClassWriter cw2 = new ClassWriter(ClassWriter.COMPUTE_MAXS);
    cv.getClassMap().assignCounterIds();
    logger.debug(((\"Assigned \" + cv.getClassMap().getMaxCounterId()) + \" counters for class:\") + cv.getClassMap().getClassName());
    InjectCodeClassInstrumenter cv2 = new InjectCodeClassInstrumenter(cw2, ignoreRegexes, threadsafeRigorous, cv.getClassMap(), cv0.getDuplicatesLinesCollector(), detectIgnoredCv.getIgnoredMethodNamesAndSignatures());
    cr2.accept(cv2, 0);
    return new InstrumentationResult(cv.getClassMap().getClassName(), cw2.toByteArray());
\} else \{
    logger.debug(\"Class shouldn't be instrumented: \" + cv.getClassMap().getClassName());
    return null;
\}" shape=ellipse]
4 [label="instrumentClass#?,InputStream#37:shouldBeInstrumented" shape=ellipse]
5 [label="instrumentClass#?,InputStream#37:cv" shape=ellipse]
6 [label="instrumentClass#?,InputStream#37:shouldBeInstrumented()
instrumentClass#?,InputStream#17:int" shape=ellipse]
7 [label="instrumentClass#?,InputStream#37:\{
    ClassReader cr2 = new ClassReader(cw0.toByteArray());
    ClassWriter cw2 = new ClassWriter(ClassWriter.COMPUTE_MAXS);
    cv.getClassMap().assignCounterIds();
    logger.debug(((\"Assigned \" + cv.getClassMap().getMaxCounterId()) + \" counters for class:\") + cv.getClassMap().getClassName());
    InjectCodeClassInstrumenter cv2 = new InjectCodeClassInstrumenter(cw2, ignoreRegexes, threadsafeRigorous, cv.getClassMap(), cv0.getDuplicatesLinesCollector(), detectIgnoredCv.getIgnoredMethodNamesAndSignatures());
    cr2.accept(cv2, 0);
    return new InstrumentationResult(cv.getClassMap().getClassName(), cw2.toByteArray());
\}
instrumentClass#?,InputStream#2:\{
    ClassReader cr0 = new ClassReader(inputStream);
    ClassWriter cw0 = new ClassWriter(0);
    DetectIgnoredCodeClassVisitor detectIgnoredCv = new DetectIgnoredCodeClassVisitor(cw0, ignoreTrivial, ignoreMethodAnnotations);
    DetectDuplicatedCodeClassVisitor cv0 = new DetectDuplicatedCodeClassVisitor(detectIgnoredCv);
    cr0.accept(cv0, 0);
    ClassReader cr = new ClassReader(cw0.toByteArray());
    ClassWriter cw = new ClassWriter(0);
    BuildClassMapClassVisitor cv = new BuildClassMapClassVisitor(cw, ignoreRegexes, cv0.getDuplicatesLinesCollector(), detectIgnoredCv.getIgnoredMethodNamesAndSignatures());
    cr.accept(cv, 0);
    if (logger.isDebugEnabled()) \{
        logger.debug(\"=============== Detected duplicated code =============\");
        Map<Integer, Map<Integer, Integer>> l = cv0.getDuplicatesLinesCollector();
        for (Map.Entry<Integer, Map<Integer, Integer>> m : l.entrySet()) \{
            if (m.getValue() != null) \{
                for (Map.Entry<Integer, Integer> pair : m.getValue().entrySet()) \{
                    logger.debug((((((cv.getClassMap().getClassName() + \":\") + m.getKey()) + \" \") + pair.getKey()) + \"->\") + pair.getValue());
                \}
            \}
        \}
        logger.debug(\"=============== End of detected duplicated code ======\");
    \}
    logger.debug(\"Migrating classmap in projectData to store in *.ser file: \" + cv.getClassMap().getClassName());
    cv.getClassMap().applyOnProjectData(projectData, cv.shouldBeInstrumented());
    if (cv.shouldBeInstrumented()) \{
        ClassReader cr2 = new ClassReader(cw0.toByteArray());
        ClassWriter cw2 = new ClassWriter(ClassWriter.COMPUTE_MAXS);
        cv.getClassMap().assignCounterIds();
        logger.debug(((\"Assigned \" + cv.getClassMap().getMaxCounterId()) + \" counters for class:\") + cv.getClassMap().getClassName());
        InjectCodeClassInstrumenter cv2 = new InjectCodeClassInstrumenter(cw2, ignoreRegexes, threadsafeRigorous, cv.getClassMap(), cv0.getDuplicatesLinesCollector(), detectIgnoredCv.getIgnoredMethodNamesAndSignatures());
        cr2.accept(cv2, EXPAND_FRAMES);
        return new InstrumentationResult(cv.getClassMap().getClassName(), cw2.toByteArray());
    \} else \{
        logger.debug(\"Class shouldn't be instrumented: \" + cv.getClassMap().getClassName());
        return null;
    \}
\}" shape=ellipse]
8 [label="instrumentClass#?,InputStream#38:ClassReader cr2 = new ClassReader(cw0.toByteArray())" shape=ellipse]
9 [label="instrumentClass#?,InputStream#38:new ClassReader(cw0.toByteArray())" shape=ellipse]
10 [label="instrumentClass#?,InputStream#38:ClassReader()
instrumentClass#?,InputStream#17:EXPAND_FRAMES" shape=ellipse]
11 [label="instrumentClass#?,InputStream#38:cw0.toByteArray()" shape=ellipse]
12 [label="instrumentClass#?,InputStream#38:toByteArray()" shape=ellipse]
13 [label="instrumentClass#?,InputStream#38:cw0" shape=ellipse]
14 [label="instrumentClass#?,InputStream#39:ClassWriter cw2 = new ClassWriter(ClassWriter.COMPUTE_MAXS)" shape=ellipse]
15 [label="instrumentClass#?,InputStream#39:new ClassWriter(ClassWriter.COMPUTE_MAXS)" shape=ellipse]
16 [label="instrumentClass#?,InputStream#39:ClassWriter()" shape=ellipse]
17 [label="instrumentClass#?,InputStream#39:ClassWriter.COMPUTE_MAXS" shape=ellipse]
18 [label="instrumentClass#?,InputStream#40:cv.getClassMap().assignCounterIds()" shape=ellipse]
19 [label="instrumentClass#?,InputStream#40:assignCounterIds()" shape=ellipse]
20 [label="instrumentClass#?,InputStream#40:cv.getClassMap()" shape=ellipse]
21 [label="instrumentClass#?,InputStream#40:getClassMap()" shape=ellipse]
22 [label="instrumentClass#?,InputStream#40:cv" shape=ellipse]
23 [label="instrumentClass#?,InputStream#41:logger.debug(((\"Assigned \" + cv.getClassMap().getMaxCounterId()) + \" counters for class:\") + cv.getClassMap().getClassName())" shape=ellipse]
24 [label="instrumentClass#?,InputStream#41:debug()" shape=ellipse]
25 [label="instrumentClass#?,InputStream#41:logger" shape=ellipse]
26 [label="instrumentClass#?,InputStream#42:((\"Assigned \" + cv.getClassMap().getMaxCounterId()) + \" counters for class:\") + cv.getClassMap().getClassName()" shape=ellipse]
27 [label="instrumentClass#?,InputStream#42:((\"Assigned \" + cv.getClassMap().getMaxCounterId()) + \" counters for class:\")" shape=ellipse]
28 [label="instrumentClass#?,InputStream#42:(\"Assigned \" + cv.getClassMap().getMaxCounterId())" shape=ellipse]
29 [label="instrumentClass#?,InputStream#42:\"Assigned \"" shape=ellipse]
30 [label="instrumentClass#?,InputStream#42:cv.getClassMap().getMaxCounterId()" shape=ellipse]
31 [label="instrumentClass#?,InputStream#42:getMaxCounterId()" shape=ellipse]
32 [label="instrumentClass#?,InputStream#42:cv.getClassMap()" shape=ellipse]
33 [label="instrumentClass#?,InputStream#42:getClassMap()" shape=ellipse]
34 [label="instrumentClass#?,InputStream#42:cv" shape=ellipse]
35 [label="instrumentClass#?,InputStream#42:\" counters for class:\"" shape=ellipse]
36 [label="instrumentClass#?,InputStream#43:cv.getClassMap().getClassName()" shape=ellipse]
37 [label="instrumentClass#?,InputStream#43:getClassName()" shape=ellipse]
38 [label="instrumentClass#?,InputStream#43:cv.getClassMap()" shape=ellipse]
39 [label="instrumentClass#?,InputStream#43:getClassMap()" shape=ellipse]
40 [label="instrumentClass#?,InputStream#43:cv" shape=ellipse]
41 [label="instrumentClass#?,InputStream#44:InjectCodeClassInstrumenter cv2 = new InjectCodeClassInstrumenter(cw2, ignoreRegexes, threadsafeRigorous, cv.getClassMap(), cv0.getDuplicatesLinesCollector(), detectIgnoredCv.getIgnoredMethodNamesAndSignatures())" shape=ellipse]
42 [label="instrumentClass#?,InputStream#45:new InjectCodeClassInstrumenter(cw2, ignoreRegexes, threadsafeRigorous, cv.getClassMap(), cv0.getDuplicatesLinesCollector(), detectIgnoredCv.getIgnoredMethodNamesAndSignatures())" shape=ellipse]
43 [label="instrumentClass#?,InputStream#45:InjectCodeClassInstrumenter()" shape=ellipse]
44 [label="instrumentClass#?,InputStream#46:cw2" shape=ellipse]
45 [label="instrumentClass#?,InputStream#47:ignoreRegexes" shape=ellipse]
46 [label="instrumentClass#?,InputStream#48:threadsafeRigorous" shape=ellipse]
47 [label="instrumentClass#?,InputStream#49:cv.getClassMap()" shape=ellipse]
48 [label="instrumentClass#?,InputStream#49:getClassMap()" shape=ellipse]
49 [label="instrumentClass#?,InputStream#49:cv" shape=ellipse]
50 [label="instrumentClass#?,InputStream#50:cv0.getDuplicatesLinesCollector()" shape=ellipse]
51 [label="instrumentClass#?,InputStream#50:getDuplicatesLinesCollector()" shape=ellipse]
52 [label="instrumentClass#?,InputStream#50:cv0" shape=ellipse]
53 [label="instrumentClass#?,InputStream#51:detectIgnoredCv.getIgnoredMethodNamesAndSignatures()" shape=ellipse]
54 [label="instrumentClass#?,InputStream#51:getIgnoredMethodNamesAndSignatures()" shape=ellipse]
55 [label="instrumentClass#?,InputStream#51:detectIgnoredCv" shape=ellipse]
56 [label="instrumentClass#?,InputStream#52:accept(InjectCodeClassInstrumenter,int)
instrumentClass#?,InputStream#17:accept(BuildClassMapClassVisitor,int)" shape=ellipse]
57 [label="instrumentClass#?,InputStream#52:cr2
instrumentClass#?,InputStream#17:cr" shape=ellipse]
58 [label="instrumentClass#?,InputStream#52:cv2
instrumentClass#?,InputStream#17:cv" shape=ellipse]
59 [label="instrumentClass#?,InputStream#52:0" shape=ellipse]
60 [label="instrumentClass#?,InputStream#53:return new InstrumentationResult(cv.getClassMap().getClassName(), cw2.toByteArray())" shape=ellipse]
61 [label="instrumentClass#?,InputStream#53:new InstrumentationResult(cv.getClassMap().getClassName(), cw2.toByteArray())" shape=ellipse]
62 [label="instrumentClass#?,InputStream#53:InstrumentationResult()" shape=ellipse]
63 [label="instrumentClass#?,InputStream#53:cv.getClassMap().getClassName()" shape=ellipse]
64 [label="instrumentClass#?,InputStream#53:getClassName()" shape=ellipse]
65 [label="instrumentClass#?,InputStream#53:cv.getClassMap()" shape=ellipse]
66 [label="instrumentClass#?,InputStream#53:getClassMap()" shape=ellipse]
67 [label="instrumentClass#?,InputStream#53:cv" shape=ellipse]
68 [label="instrumentClass#?,InputStream#53:cw2.toByteArray()" shape=ellipse]
69 [label="instrumentClass#?,InputStream#53:toByteArray()" shape=ellipse]
70 [label="instrumentClass#?,InputStream#53:cw2" shape=ellipse]
71 [label="instrumentClass#?,InputStream#54:\{
    logger.debug(\"Class shouldn't be instrumented: \" + cv.getClassMap().getClassName());
    return null;
\}" shape=ellipse]
72 [label="instrumentClass#?,InputStream#55:logger.debug(\"Class shouldn't be instrumented: \" + cv.getClassMap().getClassName())" shape=ellipse]
73 [label="instrumentClass#?,InputStream#55:debug()" shape=ellipse]
74 [label="instrumentClass#?,InputStream#55:logger" shape=ellipse]
75 [label="instrumentClass#?,InputStream#55:\"Class shouldn't be instrumented: \" + cv.getClassMap().getClassName()" shape=ellipse]
76 [label="instrumentClass#?,InputStream#55:\"Class shouldn't be instrumented: \"" shape=ellipse]
77 [label="instrumentClass#?,InputStream#55:cv.getClassMap().getClassName()" shape=ellipse]
78 [label="instrumentClass#?,InputStream#55:getClassName()" shape=ellipse]
79 [label="instrumentClass#?,InputStream#55:cv.getClassMap()" shape=ellipse]
80 [label="instrumentClass#?,InputStream#55:getClassMap()" shape=ellipse]
81 [label="instrumentClass#?,InputStream#55:cv" shape=ellipse]
82 [label="instrumentClass#?,InputStream#56:return null" shape=ellipse]
83 [label="instrumentClass#?,InputStream#56:null" shape=ellipse]
84 [label="instrumentClass#?,InputStream#52:EXPAND_FRAMES" shape=ellipse]
85 [label="instrumentClass#?,InputStream#52:EXPAND_FRAMES" shape=ellipse]
86 [label="instrumentClass#?,InputStream#52:" shape=ellipse]
87 [label="instrumentClass#?,InputStream#52:accept
instrumentClass#?,InputStream#17:accept" shape=ellipse]
88 [label="instrumentClass#?,InputStream#17:DELETE" shape=ellipse]
89 [label="instrumentClass#?,InputStream#17:0" shape=ellipse]
90 [label="instrumentClass#?,InputStream#17:EXPAND_FRAMES" shape=ellipse]
91 [label="instrumentClass#?,InputStream#17:" shape=ellipse]
0 -> 84 [label="Action:1"];
0 -> 90 [label="Action:1"];
1 -> 0 [label="Action:2"];
1 -> 87 [label="AST:2"];
1 -> 57 [label="AST:2"];
1 -> 56 [label="AST:2"];
1 -> 58 [label="AST:2"];
1 -> 59 [label="AST:1"];
1 -> 89 [label="AST:1"];
2 -> 1 [label="Control Dep:1"];
2 -> 4 [label="AST:1"];
2 -> 5 [label="AST:1"];
2 -> 6 [label="AST:1"];
2 -> 7 [label="Control Dep:1"];
2 -> 8 [label="Control Dep:1"];
2 -> 9 [label="Control Dep:1"];
2 -> 10 [label="Control Dep:1"];
2 -> 11 [label="Control Dep:1"];
2 -> 12 [label="Control Dep:1"];
2 -> 13 [label="Control Dep:1"];
2 -> 14 [label="Control Dep:1"];
2 -> 15 [label="Control Dep:1"];
2 -> 16 [label="Control Dep:1"];
2 -> 17 [label="Control Dep:1"];
2 -> 18 [label="Control Dep:1"];
2 -> 19 [label="Control Dep:1"];
2 -> 20 [label="Control Dep:1"];
2 -> 21 [label="Control Dep:1"];
2 -> 22 [label="Control Dep:1"];
2 -> 23 [label="Control Dep:1"];
2 -> 24 [label="Control Dep:1"];
2 -> 25 [label="Control Dep:1"];
2 -> 26 [label="Control Dep:1"];
2 -> 27 [label="Control Dep:1"];
2 -> 28 [label="Control Dep:1"];
2 -> 29 [label="Control Dep:1"];
2 -> 30 [label="Control Dep:1"];
2 -> 31 [label="Control Dep:1"];
2 -> 32 [label="Control Dep:1"];
2 -> 33 [label="Control Dep:1"];
2 -> 34 [label="Control Dep:1"];
2 -> 35 [label="Control Dep:1"];
2 -> 36 [label="Control Dep:1"];
2 -> 37 [label="Control Dep:1"];
2 -> 38 [label="Control Dep:1"];
2 -> 39 [label="Control Dep:1"];
2 -> 40 [label="Control Dep:1"];
2 -> 41 [label="Control Dep:1"];
2 -> 42 [label="Control Dep:1"];
2 -> 43 [label="Control Dep:1"];
2 -> 44 [label="Control Dep:1"];
2 -> 45 [label="Control Dep:1"];
2 -> 46 [label="Control Dep:1"];
2 -> 47 [label="Control Dep:1"];
2 -> 48 [label="Control Dep:1"];
2 -> 49 [label="Control Dep:1"];
2 -> 50 [label="Control Dep:1"];
2 -> 51 [label="Control Dep:1"];
2 -> 52 [label="Control Dep:1"];
2 -> 53 [label="Control Dep:1"];
2 -> 54 [label="Control Dep:1"];
2 -> 55 [label="Control Dep:1"];
2 -> 56 [label="Control Dep:1"];
2 -> 57 [label="Control Dep:1"];
2 -> 58 [label="Control Dep:1"];
2 -> 59 [label="Control Dep:1"];
2 -> 60 [label="Control Dep:1"];
2 -> 61 [label="Control Dep:1"];
2 -> 62 [label="Control Dep:1"];
2 -> 63 [label="Control Dep:1"];
2 -> 64 [label="Control Dep:1"];
2 -> 65 [label="Control Dep:1"];
2 -> 66 [label="Control Dep:1"];
2 -> 67 [label="Control Dep:1"];
2 -> 68 [label="Control Dep:1"];
2 -> 69 [label="Control Dep:1"];
2 -> 70 [label="Control Dep:1"];
2 -> 71 [label="Control Dep:1"];
2 -> 72 [label="Control Dep:1"];
2 -> 73 [label="Control Dep:1"];
2 -> 74 [label="Control Dep:1"];
2 -> 75 [label="Control Dep:1"];
2 -> 76 [label="Control Dep:1"];
2 -> 77 [label="Control Dep:1"];
2 -> 78 [label="Control Dep:1"];
2 -> 79 [label="Control Dep:1"];
2 -> 80 [label="Control Dep:1"];
2 -> 81 [label="Control Dep:1"];
2 -> 82 [label="Control Dep:1"];
2 -> 83 [label="Control Dep:1"];
2 -> 84 [label="Control Dep:1"];
3 -> 2 [label="AST:1"];
3 -> 7 [label="AST:1"];
3 -> 71 [label="AST:1"];
7 -> 1 [label="AST:2"];
7 -> 8 [label="AST:1"];
7 -> 14 [label="AST:1"];
7 -> 18 [label="AST:1"];
7 -> 23 [label="AST:1"];
7 -> 41 [label="AST:1"];
7 -> 60 [label="AST:1"];
8 -> 9 [label="AST:1"];
9 -> 10 [label="AST:1"];
9 -> 11 [label="AST:1"];
10 -> 91 [label="AST:1"];
11 -> 13 [label="AST:1"];
11 -> 12 [label="AST:1"];
14 -> 15 [label="AST:1"];
15 -> 16 [label="AST:1"];
15 -> 17 [label="AST:1"];
18 -> 20 [label="AST:1"];
18 -> 19 [label="AST:1"];
20 -> 22 [label="AST:1"];
20 -> 21 [label="AST:1"];
23 -> 25 [label="AST:1"];
23 -> 24 [label="AST:1"];
23 -> 26 [label="AST:1"];
26 -> 27 [label="AST:1"];
26 -> 36 [label="AST:1"];
27 -> 28 [label="AST:1"];
27 -> 35 [label="AST:1"];
28 -> 29 [label="AST:1"];
28 -> 30 [label="AST:1"];
30 -> 32 [label="AST:1"];
30 -> 31 [label="AST:1"];
32 -> 34 [label="AST:1"];
32 -> 33 [label="AST:1"];
36 -> 38 [label="AST:1"];
36 -> 37 [label="AST:1"];
38 -> 40 [label="AST:1"];
38 -> 39 [label="AST:1"];
41 -> 42 [label="AST:1"];
42 -> 43 [label="AST:1"];
42 -> 44 [label="AST:1"];
42 -> 45 [label="AST:1"];
42 -> 46 [label="AST:1"];
42 -> 47 [label="AST:1"];
42 -> 50 [label="AST:1"];
42 -> 53 [label="AST:1"];
47 -> 49 [label="AST:1"];
47 -> 48 [label="AST:1"];
50 -> 52 [label="AST:1"];
50 -> 51 [label="AST:1"];
53 -> 55 [label="AST:1"];
53 -> 54 [label="AST:1"];
60 -> 61 [label="AST:1"];
61 -> 62 [label="AST:1"];
61 -> 63 [label="AST:1"];
61 -> 68 [label="AST:1"];
63 -> 65 [label="AST:1"];
63 -> 64 [label="AST:1"];
65 -> 67 [label="AST:1"];
65 -> 66 [label="AST:1"];
68 -> 70 [label="AST:1"];
68 -> 69 [label="AST:1"];
71 -> 72 [label="AST:1"];
71 -> 82 [label="AST:1"];
72 -> 74 [label="AST:1"];
72 -> 73 [label="AST:1"];
72 -> 75 [label="AST:1"];
75 -> 76 [label="AST:1"];
75 -> 77 [label="AST:1"];
77 -> 79 [label="AST:1"];
77 -> 78 [label="AST:1"];
79 -> 81 [label="AST:1"];
79 -> 80 [label="AST:1"];
82 -> 83 [label="AST:1"];
84 -> 85 [label="AST:1"];
85 -> 86 [label="AST:1"];
89 -> 88 [label="Action:1"];
89 -> 6 [label="AST:1"];
90 -> 10 [label="AST:1"];
}