digraph "getNumberOfValidBranches#?" {
0 [label="2:CtTypeReferenceImpl@int" shape=ellipse]
1 [label="2:CtVirtualElement@getNumberOfValidBranches" shape=ellipse]
2 [label="3:CtTypeReferenceImpl@int" shape=ellipse]
3 [label="3:CtLiteralImpl@0" shape=ellipse]
4 [label="3:CtTypeReferenceImpl@int" shape=ellipse]
5 [label="3:CtVirtualElement@ret" shape=ellipse]
6 [label="3:CtLocalVariableImpl@int ret = 0" shape=ellipse]
7 [label="4:CtExecutableReferenceImpl@lock()" shape=ellipse]
8 [label="4:CtTypeReferenceImpl@lock" shape=ellipse]
9 [label="4:CtVirtualElement@lock" shape=ellipse]
10 [label="4:CtFieldReferenceImpl@lock" shape=ellipse]
11 [label="4:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
12 [label="4:CtFieldReadImpl@lock" shape=ellipse]
13 [label="4:CtInvocationImpl@lock.lock()" shape=ellipse]
14 [label="6:CtFieldReferenceImpl@jumps" shape=ellipse]
15 [label="6:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
16 [label="6:CtFieldReadImpl@jumps" shape=ellipse]
17 [label="6:CtLiteralImpl@null" shape=ellipse]
18 [label="6:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
19 [label="6:CtBinaryOperatorImpl@jumps != null" shape=ellipse]
20 [label="7:CtTypeReferenceImpl@int" shape=ellipse]
21 [label="7:CtExecutableReferenceImpl@size()" shape=ellipse]
22 [label="7:CtTypeReferenceImpl@jumps" shape=ellipse]
23 [label="7:CtVirtualElement@size" shape=ellipse]
24 [label="7:CtFieldReferenceImpl@jumps" shape=ellipse]
25 [label="7:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
26 [label="7:CtFieldReadImpl@jumps" shape=ellipse]
27 [label="7:CtInvocationImpl@jumps.size()" shape=ellipse]
28 [label="7:CtLiteralImpl@1" shape=ellipse]
29 [label="7:CtTypeReferenceImpl@int" shape=ellipse]
30 [label="7:CtBinaryOperatorImpl@jumps.size() - 1" shape=ellipse]
31 [label="7:CtVirtualElement@i" shape=ellipse]
32 [label="7:CtLocalVariableImpl@int i = jumps.size() - 1" shape=ellipse]
33 [label="7:CtVariableReadImpl@i" shape=ellipse]
34 [label="7:CtLocalVariableReferenceImpl@i" shape=ellipse]
35 [label="7:CtLiteralImpl@0" shape=ellipse]
36 [label="7:CtTypeReferenceImpl@int" shape=ellipse]
37 [label="7:CtBinaryOperatorImpl@i >= 0" shape=ellipse]
38 [label="7:CtTypeReferenceImpl@boolean" shape=ellipse]
39 [label="7:CtVariableWriteImpl@i" shape=ellipse]
40 [label="7:CtLocalVariableReferenceImpl@i" shape=ellipse]
41 [label="7:CtUnaryOperatorImpl@i--" shape=ellipse]
42 [label="7:CtTypeReferenceImpl@int" shape=ellipse]
43 [label="8:CtVariableWriteImpl@ret" shape=ellipse]
44 [label="8:CtLocalVariableReferenceImpl@ret" shape=ellipse]
45 [label="8:CtExecutableReferenceImpl@getNumberOfValidBranches()" shape=ellipse]
46 [label="8:CtVirtualElement@getNumberOfValidBranches" shape=ellipse]
47 [label="8:CtExecutableReferenceImpl@get(int)" shape=ellipse]
48 [label="8:CtTypeReferenceImpl@jumps" shape=ellipse]
49 [label="8:CtTypeReferenceImpl@int" shape=ellipse]
50 [label="8:CtVirtualElement@get" shape=ellipse]
51 [label="8:CtFieldReferenceImpl@jumps" shape=ellipse]
52 [label="8:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
53 [label="8:CtFieldReadImpl@jumps" shape=ellipse]
54 [label="8:CtVariableReadImpl@i" shape=ellipse]
55 [label="8:CtLocalVariableReferenceImpl@i" shape=ellipse]
56 [label="8:CtInvocationImpl@((JumpData) (jumps.get(i)))" shape=ellipse]
57 [label="8:CtTypeReferenceImpl@JumpData" shape=ellipse]
58 [label="8:CtInvocationImpl@((JumpData) (jumps.get(i))).getNumberOfValidBranches()" shape=ellipse]
59 [label="8:CtOperatorAssignmentImpl@ret += ((JumpData) (jumps.get(i))).getNumberOfValidBranches()" shape=ellipse]
60 [label="7:CtBlockImpl@\{
    ret += ((JumpData) (jumps.get(i))).getNumberOfValidBranches();
\}" shape=ellipse]
61 [label="7:CtForImpl@for (int i = jumps.size() - 1; i >= 0; i--) \{
    ret += ((JumpData) (jumps.get(i))).getNumberOfValidBranches();
\}" shape=ellipse]
62 [label="6:CtBlockImpl@\{
    for (int i = jumps.size() - 1; i >= 0; i--) \{
        ret += ((JumpData) (jumps.get(i))).getNumberOfValidBranches();
    \}
\}" shape=ellipse]
63 [label="6:CtIfImpl@if (jumps != null) \{
    for (int i = jumps.size() - 1; i >= 0; i--) \{
        ret += ((JumpData) (jumps.get(i))).getNumberOfValidBranches();
    \}
\}" shape=ellipse]
64 [label="11:CtFieldReferenceImpl@switches" shape=ellipse]
65 [label="11:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
66 [label="11:CtFieldReadImpl@switches" shape=ellipse]
67 [label="11:CtLiteralImpl@null" shape=ellipse]
68 [label="11:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
69 [label="11:CtBinaryOperatorImpl@switches != null" shape=ellipse]
70 [label="12:CtTypeReferenceImpl@int" shape=ellipse]
71 [label="12:CtExecutableReferenceImpl@size()" shape=ellipse]
72 [label="12:CtTypeReferenceImpl@switches" shape=ellipse]
73 [label="12:CtVirtualElement@size" shape=ellipse]
74 [label="12:CtFieldReferenceImpl@switches" shape=ellipse]
75 [label="12:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
76 [label="12:CtFieldReadImpl@switches" shape=ellipse]
77 [label="12:CtInvocationImpl@switches.size()" shape=ellipse]
78 [label="12:CtLiteralImpl@1" shape=ellipse]
79 [label="12:CtTypeReferenceImpl@int" shape=ellipse]
80 [label="12:CtBinaryOperatorImpl@switches.size() - 1" shape=ellipse]
81 [label="12:CtVirtualElement@i" shape=ellipse]
82 [label="12:CtLocalVariableImpl@int i = switches.size() - 1" shape=ellipse]
83 [label="12:CtVariableReadImpl@i" shape=ellipse]
84 [label="12:CtLocalVariableReferenceImpl@i" shape=ellipse]
85 [label="12:CtLiteralImpl@0" shape=ellipse]
86 [label="12:CtTypeReferenceImpl@int" shape=ellipse]
87 [label="12:CtBinaryOperatorImpl@i >= 0" shape=ellipse]
88 [label="12:CtTypeReferenceImpl@boolean" shape=ellipse]
89 [label="12:CtVariableWriteImpl@i" shape=ellipse]
90 [label="12:CtLocalVariableReferenceImpl@i" shape=ellipse]
91 [label="12:CtUnaryOperatorImpl@i--" shape=ellipse]
92 [label="12:CtTypeReferenceImpl@int" shape=ellipse]
93 [label="13:CtVariableWriteImpl@ret" shape=ellipse]
94 [label="13:CtLocalVariableReferenceImpl@ret" shape=ellipse]
95 [label="13:CtExecutableReferenceImpl@getNumberOfValidBranches()" shape=ellipse]
96 [label="13:CtVirtualElement@getNumberOfValidBranches" shape=ellipse]
97 [label="13:CtExecutableReferenceImpl@get(int)" shape=ellipse]
98 [label="13:CtTypeReferenceImpl@switches" shape=ellipse]
99 [label="13:CtTypeReferenceImpl@int" shape=ellipse]
100 [label="13:CtVirtualElement@get" shape=ellipse]
101 [label="13:CtFieldReferenceImpl@switches" shape=ellipse]
102 [label="13:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
103 [label="13:CtFieldReadImpl@switches" shape=ellipse]
104 [label="13:CtVariableReadImpl@i" shape=ellipse]
105 [label="13:CtLocalVariableReferenceImpl@i" shape=ellipse]
106 [label="13:CtInvocationImpl@((SwitchData) (switches.get(i)))" shape=ellipse]
107 [label="13:CtTypeReferenceImpl@SwitchData" shape=ellipse]
108 [label="13:CtInvocationImpl@((SwitchData) (switches.get(i))).getNumberOfValidBranches()" shape=ellipse]
109 [label="13:CtOperatorAssignmentImpl@ret += ((SwitchData) (switches.get(i))).getNumberOfValidBranches()" shape=ellipse]
110 [label="12:CtBlockImpl@\{
    ret += ((SwitchData) (switches.get(i))).getNumberOfValidBranches();
\}" shape=ellipse]
111 [label="12:CtForImpl@for (int i = switches.size() - 1; i >= 0; i--) \{
    ret += ((SwitchData) (switches.get(i))).getNumberOfValidBranches();
\}" shape=ellipse]
112 [label="11:CtBlockImpl@\{
    for (int i = switches.size() - 1; i >= 0; i--) \{
        ret += ((SwitchData) (switches.get(i))).getNumberOfValidBranches();
    \}
\}" shape=ellipse]
113 [label="11:CtIfImpl@if (switches != null) \{
    for (int i = switches.size() - 1; i >= 0; i--) \{
        ret += ((SwitchData) (switches.get(i))).getNumberOfValidBranches();
    \}
\}" shape=ellipse]
114 [label="16:CtVariableReadImpl@ret" shape=ellipse]
115 [label="16:CtLocalVariableReferenceImpl@ret" shape=ellipse]
116 [label="16:CtReturnImpl@return ret" shape=ellipse]
117 [label="5:CtBlockImpl@\{
    if (jumps != null) \{
        for (int i = jumps.size() - 1; i >= 0; i--) \{
            ret += ((JumpData) (jumps.get(i))).getNumberOfValidBranches();
        \}
    \}
    if (switches != null) \{
        for (int i = switches.size() - 1; i >= 0; i--) \{
            ret += ((SwitchData) (switches.get(i))).getNumberOfValidBranches();
        \}
    \}
    return ret;
\}" shape=ellipse]
118 [label="18:CtExecutableReferenceImpl@unlock()" shape=ellipse]
119 [label="18:CtTypeReferenceImpl@lock" shape=ellipse]
120 [label="18:CtVirtualElement@unlock" shape=ellipse]
121 [label="18:CtFieldReferenceImpl@lock" shape=ellipse]
122 [label="18:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
123 [label="18:CtFieldReadImpl@lock" shape=ellipse]
124 [label="18:CtInvocationImpl@lock.unlock()" shape=ellipse]
125 [label="17:CtBlockImpl@\{
    lock.unlock();
\}" shape=ellipse]
126 [label="5:CtTryImpl@try \{
    if (jumps != null) \{
        for (int i = jumps.size() - 1; i >= 0; i--) \{
            ret += ((JumpData) (jumps.get(i))).getNumberOfValidBranches();
        \}
    \}
    if (switches != null) \{
        for (int i = switches.size() - 1; i >= 0; i--) \{
            ret += ((SwitchData) (switches.get(i))).getNumberOfValidBranches();
        \}
    \}
    return ret;
\} finally \{
    lock.unlock();
\}" shape=ellipse]
127 [label="2:CtBlockImpl@\{
    int ret = 0;
    lock.lock();
    try \{
        if (jumps != null) \{
            for (int i = jumps.size() - 1; i >= 0; i--) \{
                ret += ((JumpData) (jumps.get(i))).getNumberOfValidBranches();
            \}
        \}
        if (switches != null) \{
            for (int i = switches.size() - 1; i >= 0; i--) \{
                ret += ((SwitchData) (switches.get(i))).getNumberOfValidBranches();
            \}
        \}
        return ret;
    \} finally \{
        lock.unlock();
    \}
\}" shape=ellipse]
128 [label="2:CtMethodImpl@public int getNumberOfValidBranches() \{
    int ret = 0;
    lock.lock();
    try \{
        if (jumps != null) \{
            for (int i = jumps.size() - 1; i >= 0; i--) \{
                ret += ((JumpData) (jumps.get(i))).getNumberOfValidBranches();
            \}
        \}
        if (switches != null) \{
            for (int i = switches.size() - 1; i >= 0; i--) \{
                ret += ((SwitchData) (switches.get(i))).getNumberOfValidBranches();
            \}
        \}
        return ret;
    \} finally \{
        lock.unlock();
    \}
\}" shape=ellipse]
129 [label="4:Delete@DELETE" shape=ellipse]
130 [label="18:Delete@DELETE" shape=ellipse]
131 [label="2:Insert@INSERT" shape=ellipse]
3 -> 4 [label="AST"];
6 -> 5 [label="AST"];
6 -> 2 [label="AST"];
6 -> 3 [label="AST"];
7 -> 8 [label="AST"];
10 -> 11 [label="AST"];
12 -> 10 [label="AST"];
13 -> 9 [label="AST"];
13 -> 12 [label="AST"];
13 -> 7 [label="AST"];
13 -> 129 [label="Action"];
14 -> 15 [label="AST"];
16 -> 14 [label="AST"];
17 -> 18 [label="AST"];
19 -> 16 [label="AST"];
19 -> 17 [label="AST"];
19 -> 62 [label="Control Dep"];
19 -> 61 [label="Control Dep"];
19 -> 32 [label="Control Dep"];
19 -> 30 [label="Control Dep"];
19 -> 27 [label="Control Dep"];
19 -> 21 [label="Control Dep"];
19 -> 26 [label="Control Dep"];
19 -> 28 [label="Control Dep"];
19 -> 37 [label="Control Dep"];
19 -> 33 [label="Control Dep"];
19 -> 35 [label="Control Dep"];
19 -> 41 [label="Control Dep"];
19 -> 39 [label="Control Dep"];
21 -> 22 [label="AST"];
24 -> 25 [label="AST"];
26 -> 24 [label="AST"];
26 -> 31 [label="Data Dep"];
27 -> 23 [label="AST"];
27 -> 26 [label="AST"];
27 -> 21 [label="AST"];
28 -> 29 [label="AST"];
30 -> 27 [label="AST"];
30 -> 28 [label="AST"];
31 -> 33 [label="Define-Use"];
31 -> 54 [label="Define-Use"];
31 -> 83 [label="Define-Use"];
31 -> 104 [label="Define-Use"];
32 -> 31 [label="AST"];
32 -> 20 [label="AST"];
32 -> 30 [label="AST"];
33 -> 34 [label="AST"];
35 -> 36 [label="AST"];
37 -> 38 [label="AST"];
37 -> 33 [label="AST"];
37 -> 35 [label="AST"];
37 -> 60 [label="Control Dep"];
37 -> 59 [label="Control Dep"];
37 -> 43 [label="Control Dep"];
37 -> 58 [label="Control Dep"];
37 -> 45 [label="Control Dep"];
37 -> 56 [label="Control Dep"];
37 -> 47 [label="Control Dep"];
37 -> 53 [label="Control Dep"];
37 -> 54 [label="Control Dep"];
39 -> 40 [label="AST"];
39 -> 54 [label="Define-Use"];
39 -> 83 [label="Define-Use"];
39 -> 104 [label="Define-Use"];
40 -> 54 [label="Define-Use"];
40 -> 83 [label="Define-Use"];
40 -> 104 [label="Define-Use"];
41 -> 42 [label="AST"];
41 -> 39 [label="AST"];
43 -> 44 [label="AST"];
47 -> 48 [label="AST"];
47 -> 49 [label="AST"];
51 -> 52 [label="AST"];
53 -> 51 [label="AST"];
53 -> 43 [label="Data Dep"];
54 -> 55 [label="AST"];
54 -> 43 [label="Data Dep"];
56 -> 50 [label="AST"];
56 -> 57 [label="AST"];
56 -> 53 [label="AST"];
56 -> 47 [label="AST"];
56 -> 54 [label="AST"];
58 -> 46 [label="AST"];
58 -> 56 [label="AST"];
58 -> 45 [label="AST"];
59 -> 43 [label="AST"];
59 -> 58 [label="AST"];
60 -> 59 [label="AST"];
61 -> 32 [label="AST"];
61 -> 37 [label="AST"];
61 -> 41 [label="AST"];
61 -> 60 [label="AST"];
62 -> 61 [label="AST"];
63 -> 19 [label="AST"];
63 -> 62 [label="AST"];
64 -> 65 [label="AST"];
66 -> 64 [label="AST"];
67 -> 68 [label="AST"];
69 -> 66 [label="AST"];
69 -> 67 [label="AST"];
69 -> 112 [label="Control Dep"];
69 -> 111 [label="Control Dep"];
69 -> 82 [label="Control Dep"];
69 -> 80 [label="Control Dep"];
69 -> 77 [label="Control Dep"];
69 -> 71 [label="Control Dep"];
69 -> 76 [label="Control Dep"];
69 -> 78 [label="Control Dep"];
69 -> 87 [label="Control Dep"];
69 -> 83 [label="Control Dep"];
69 -> 85 [label="Control Dep"];
69 -> 91 [label="Control Dep"];
69 -> 89 [label="Control Dep"];
71 -> 72 [label="AST"];
74 -> 75 [label="AST"];
76 -> 74 [label="AST"];
76 -> 81 [label="Data Dep"];
77 -> 73 [label="AST"];
77 -> 76 [label="AST"];
77 -> 71 [label="AST"];
78 -> 79 [label="AST"];
80 -> 77 [label="AST"];
80 -> 78 [label="AST"];
81 -> 83 [label="Define-Use"];
81 -> 104 [label="Define-Use"];
82 -> 81 [label="AST"];
82 -> 70 [label="AST"];
82 -> 80 [label="AST"];
83 -> 84 [label="AST"];
85 -> 86 [label="AST"];
87 -> 88 [label="AST"];
87 -> 83 [label="AST"];
87 -> 85 [label="AST"];
87 -> 110 [label="Control Dep"];
87 -> 109 [label="Control Dep"];
87 -> 93 [label="Control Dep"];
87 -> 108 [label="Control Dep"];
87 -> 95 [label="Control Dep"];
87 -> 106 [label="Control Dep"];
87 -> 97 [label="Control Dep"];
87 -> 103 [label="Control Dep"];
87 -> 104 [label="Control Dep"];
89 -> 90 [label="AST"];
89 -> 104 [label="Define-Use"];
90 -> 104 [label="Define-Use"];
91 -> 92 [label="AST"];
91 -> 89 [label="AST"];
93 -> 94 [label="AST"];
93 -> 114 [label="Define-Use"];
97 -> 98 [label="AST"];
97 -> 99 [label="AST"];
101 -> 102 [label="AST"];
103 -> 101 [label="AST"];
103 -> 93 [label="Data Dep"];
104 -> 105 [label="AST"];
104 -> 93 [label="Data Dep"];
106 -> 100 [label="AST"];
106 -> 107 [label="AST"];
106 -> 103 [label="AST"];
106 -> 97 [label="AST"];
106 -> 104 [label="AST"];
108 -> 96 [label="AST"];
108 -> 106 [label="AST"];
108 -> 95 [label="AST"];
109 -> 93 [label="AST"];
109 -> 108 [label="AST"];
110 -> 109 [label="AST"];
111 -> 82 [label="AST"];
111 -> 87 [label="AST"];
111 -> 91 [label="AST"];
111 -> 110 [label="AST"];
112 -> 111 [label="AST"];
113 -> 69 [label="AST"];
113 -> 112 [label="AST"];
114 -> 115 [label="AST"];
116 -> 114 [label="AST"];
117 -> 63 [label="AST"];
117 -> 113 [label="AST"];
117 -> 116 [label="AST"];
118 -> 119 [label="AST"];
121 -> 122 [label="AST"];
123 -> 121 [label="AST"];
124 -> 120 [label="AST"];
124 -> 123 [label="AST"];
124 -> 118 [label="AST"];
124 -> 130 [label="Action"];
125 -> 124 [label="AST"];
126 -> 117 [label="AST"];
126 -> 125 [label="AST"];
127 -> 6 [label="AST"];
127 -> 13 [label="AST"];
127 -> 126 [label="AST"];
128 -> 1 [label="AST"];
128 -> 0 [label="AST"];
128 -> 127 [label="AST"];
128 -> 131 [label="Action"];
}