digraph "trySocket#?,InetSocketAddress" {
0 [label="2:CtTypeReferenceImpl@boolean" shape=ellipse]
1 [label="2:CtVirtualElement@trySocket" shape=ellipse]
2 [label="2:CtParameterImpl@InetSocketAddress address" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@InetSocketAddress" shape=ellipse]
4 [label="3:CtTypeReferenceImpl@boolean" shape=ellipse]
5 [label="3:CtLiteralImpl@false" shape=ellipse]
6 [label="3:CtTypeReferenceImpl@boolean" shape=ellipse]
7 [label="3:CtVirtualElement@success" shape=ellipse]
8 [label="3:CtLocalVariableImpl@boolean success = false" shape=ellipse]
9 [label="4:CtTypeReferenceImpl@Socket" shape=ellipse]
10 [label="4:CtPackageReferenceImpl@" shape=ellipse]
11 [label="4:CtLiteralImpl@null" shape=ellipse]
12 [label="4:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
13 [label="4:CtVirtualElement@socket" shape=ellipse]
14 [label="4:CtLocalVariableImpl@Socket socket = null" shape=ellipse]
15 [label="6:CtVariableWriteImpl@socket" shape=ellipse]
16 [label="6:CtLocalVariableReferenceImpl@socket" shape=ellipse]
17 [label="6:CtExecutableReferenceImpl@Socket()" shape=ellipse]
18 [label="6:CtTypeReferenceImpl@Socket" shape=ellipse]
19 [label="6:CtTypeReferenceImpl@Socket" shape=ellipse]
20 [label="6:CtConstructorCallImpl@new Socket()" shape=ellipse]
21 [label="6:CtAssignmentImpl@socket = new Socket()" shape=ellipse]
22 [label="7:CtExecutableReferenceImpl@connect(InetSocketAddress)" shape=ellipse]
23 [label="7:CtTypeReferenceImpl@Socket" shape=ellipse]
24 [label="7:CtTypeReferenceImpl@InetSocketAddress" shape=ellipse]
25 [label="7:CtVirtualElement@connect" shape=ellipse]
26 [label="7:CtVariableReadImpl@socket" shape=ellipse]
27 [label="7:CtLocalVariableReferenceImpl@socket" shape=ellipse]
28 [label="7:CtVariableReadImpl@address" shape=ellipse]
29 [label="7:CtParameterReferenceImpl@address" shape=ellipse]
30 [label="7:CtInvocationImpl@socket.connect(address)" shape=ellipse]
31 [label="8:CtVariableWriteImpl@success" shape=ellipse]
32 [label="8:CtLocalVariableReferenceImpl@success" shape=ellipse]
33 [label="8:CtLiteralImpl@true" shape=ellipse]
34 [label="8:CtTypeReferenceImpl@boolean" shape=ellipse]
35 [label="8:CtTypeReferenceImpl@boolean" shape=ellipse]
36 [label="8:CtAssignmentImpl@success = true" shape=ellipse]
37 [label="5:CtBlockImpl@\{
    socket = new Socket();
    socket.connect(address);
    success = true;
\}" shape=ellipse]
38 [label="9:CtVirtualElement@e" shape=ellipse]
39 [label="9:CtTypeReferenceImpl@ConnectException" shape=ellipse]
40 [label="9:CtPackageReferenceImpl@" shape=ellipse]
41 [label="9:CtCatchVariableImpl@ConnectException e" shape=ellipse]
42 [label="9:CtBlockImpl@\{
\}" shape=ellipse]
43 [label="9:CtCatchImpl@ catch (ConnectException e) \{
\}" shape=ellipse]
44 [label="10:CtVirtualElement@e" shape=ellipse]
45 [label="10:CtTypeReferenceImpl@Throwable" shape=ellipse]
46 [label="10:CtPackageReferenceImpl@java.lang" shape=ellipse]
47 [label="10:CtCatchVariableImpl@Throwable e" shape=ellipse]
48 [label="11:CtExecutableReferenceImpl@printStackTrace()" shape=ellipse]
49 [label="11:CtTypeReferenceImpl@Throwable" shape=ellipse]
50 [label="11:CtTypeReferenceImpl@void" shape=ellipse]
51 [label="11:CtVirtualElement@printStackTrace" shape=ellipse]
52 [label="11:CtVariableReadImpl@e" shape=ellipse]
53 [label="11:CtCatchVariableReferenceImpl@e" shape=ellipse]
54 [label="11:CtInvocationImpl@e.printStackTrace()" shape=ellipse]
55 [label="10:CtBlockImpl@\{
    e.printStackTrace();
\}" shape=ellipse]
56 [label="10:CtCatchImpl@ catch (Throwable e) \{
    e.printStackTrace();
\}" shape=ellipse]
57 [label="13:CtVariableReadImpl@socket" shape=ellipse]
58 [label="13:CtLocalVariableReferenceImpl@socket" shape=ellipse]
59 [label="13:CtLiteralImpl@null" shape=ellipse]
60 [label="13:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
61 [label="13:CtBinaryOperatorImpl@(socket != null)" shape=ellipse]
62 [label="13:CtExecutableReferenceImpl@isClosed()" shape=ellipse]
63 [label="13:CtTypeReferenceImpl@Socket" shape=ellipse]
64 [label="13:CtVirtualElement@isClosed" shape=ellipse]
65 [label="13:CtVariableReadImpl@socket" shape=ellipse]
66 [label="13:CtLocalVariableReferenceImpl@socket" shape=ellipse]
67 [label="13:CtInvocationImpl@socket.isClosed()" shape=ellipse]
68 [label="13:CtUnaryOperatorImpl@(!socket.isClosed())" shape=ellipse]
69 [label="13:CtBinaryOperatorImpl@(socket != null) || (!socket.isClosed())" shape=ellipse]
70 [label="15:CtExecutableReferenceImpl@close()" shape=ellipse]
71 [label="15:CtTypeReferenceImpl@Socket" shape=ellipse]
72 [label="15:CtVirtualElement@close" shape=ellipse]
73 [label="15:CtVariableReadImpl@socket" shape=ellipse]
74 [label="15:CtLocalVariableReferenceImpl@socket" shape=ellipse]
75 [label="15:CtInvocationImpl@socket.close()" shape=ellipse]
76 [label="14:CtBlockImpl@\{
    socket.close();
\}" shape=ellipse]
77 [label="16:CtVirtualElement@e" shape=ellipse]
78 [label="16:CtTypeReferenceImpl@IOException" shape=ellipse]
79 [label="16:CtPackageReferenceImpl@" shape=ellipse]
80 [label="16:CtCatchVariableImpl@IOException e" shape=ellipse]
81 [label="17:CtExecutableReferenceImpl@printStackTrace()" shape=ellipse]
82 [label="17:CtTypeReferenceImpl@IOException" shape=ellipse]
83 [label="17:CtVirtualElement@printStackTrace" shape=ellipse]
84 [label="17:CtVariableReadImpl@e" shape=ellipse]
85 [label="17:CtCatchVariableReferenceImpl@e" shape=ellipse]
86 [label="17:CtInvocationImpl@e.printStackTrace()" shape=ellipse]
87 [label="16:CtBlockImpl@\{
    e.printStackTrace();
\}" shape=ellipse]
88 [label="16:CtCatchImpl@ catch (IOException e) \{
    e.printStackTrace();
\}" shape=ellipse]
89 [label="14:CtTryImpl@try \{
    socket.close();
\} catch (IOException e) \{
    e.printStackTrace();
\}" shape=ellipse]
90 [label="13:CtBlockImpl@\{
    try \{
        socket.close();
    \} catch (IOException e) \{
        e.printStackTrace();
    \}
\}" shape=ellipse]
91 [label="13:CtIfImpl@if ((socket != null) || (!socket.isClosed())) \{
    try \{
        socket.close();
    \} catch (IOException e) \{
        e.printStackTrace();
    \}
\}" shape=ellipse]
92 [label="12:CtBlockImpl@\{
    if ((socket != null) || (!socket.isClosed())) \{
        try \{
            socket.close();
        \} catch (IOException e) \{
            e.printStackTrace();
        \}
    \}
\}" shape=ellipse]
93 [label="5:CtTryImpl@try \{
    socket = new Socket();
    socket.connect(address);
    success = true;
\} catch (ConnectException e) \{
\} catch (Throwable e) \{
    e.printStackTrace();
\} finally \{
    if ((socket != null) || (!socket.isClosed())) \{
        try \{
            socket.close();
        \} catch (IOException e) \{
            e.printStackTrace();
        \}
    \}
\}" shape=ellipse]
94 [label="21:CtVariableReadImpl@success" shape=ellipse]
95 [label="21:CtLocalVariableReferenceImpl@success" shape=ellipse]
96 [label="21:CtReturnImpl@return success" shape=ellipse]
97 [label="2:CtBlockImpl@\{
    boolean success = false;
    Socket socket = null;
    try \{
        socket = new Socket();
        socket.connect(address);
        success = true;
    \} catch (ConnectException e) \{
    \} catch (Throwable e) \{
        e.printStackTrace();
    \} finally \{
        if ((socket != null) || (!socket.isClosed())) \{
            try \{
                socket.close();
            \} catch (IOException e) \{
                e.printStackTrace();
            \}
        \}
    \}
    return success;
\}" shape=ellipse]
98 [label="2:CtMethodImpl@private static boolean trySocket(InetSocketAddress address) \{
    boolean success = false;
    Socket socket = null;
    try \{
        socket = new Socket();
        socket.connect(address);
        success = true;
    \} catch (ConnectException e) \{
    \} catch (Throwable e) \{
        e.printStackTrace();
    \} finally \{
        if ((socket != null) || (!socket.isClosed())) \{
            try \{
                socket.close();
            \} catch (IOException e) \{
                e.printStackTrace();
            \}
        \}
    \}
    return success;
\}" shape=ellipse]
99 [label="13:Update@UPDATE" shape=ellipse]
100 [label="13:CtPackageReferenceImpl@" shape=ellipse]
101 [label="13:CtTypeReferenceImpl@Socket" shape=ellipse]
102 [label="13:CtLocalVariableReferenceImpl@socket" shape=ellipse]
103 [label="13:CtVariableReadImpl@socket" shape=ellipse]
104 [label="13:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
105 [label="13:CtLiteralImpl@null" shape=ellipse]
106 [label="13:CtBinaryOperatorImpl@(socket != null)" shape=ellipse]
107 [label="13:CtPackageReferenceImpl@" shape=ellipse]
108 [label="13:CtTypeReferenceImpl@Socket" shape=ellipse]
109 [label="13:CtLocalVariableReferenceImpl@socket" shape=ellipse]
110 [label="13:CtVariableReadImpl@socket" shape=ellipse]
111 [label="13:CtPackageReferenceImpl@" shape=ellipse]
112 [label="13:CtTypeReferenceImpl@Socket" shape=ellipse]
113 [label="13:CtExecutableReferenceImpl@isClosed()" shape=ellipse]
114 [label="13:CtInvocationImpl@socket.isClosed()" shape=ellipse]
115 [label="13:CtVirtualElement@isClosed" shape=ellipse]
116 [label="13:CtUnaryOperatorImpl@(!socket.isClosed())" shape=ellipse]
117 [label="13:CtBinaryOperatorImpl@(socket != null) && (!socket.isClosed())" shape=ellipse]
2 -> 3 [label="AST"];
5 -> 6 [label="AST"];
8 -> 7 [label="AST"];
8 -> 4 [label="AST"];
8 -> 5 [label="AST"];
9 -> 10 [label="AST"];
11 -> 12 [label="AST"];
14 -> 13 [label="AST"];
14 -> 9 [label="AST"];
14 -> 11 [label="AST"];
15 -> 16 [label="AST"];
15 -> 26 [label="Define-Use"];
15 -> 57 [label="Define-Use"];
15 -> 65 [label="Define-Use"];
15 -> 73 [label="Define-Use"];
15 -> 103 [label="Define-Use"];
15 -> 103 [label="Data Dep"];
15 -> 103 [label="Control Dep"];
15 -> 110 [label="Define-Use"];
15 -> 110 [label="Data Dep"];
15 -> 110 [label="Control Dep"];
17 -> 18 [label="AST"];
17 -> 19 [label="AST"];
20 -> 17 [label="AST"];
21 -> 15 [label="AST"];
21 -> 20 [label="AST"];
22 -> 23 [label="AST"];
22 -> 24 [label="AST"];
26 -> 27 [label="AST"];
28 -> 29 [label="AST"];
30 -> 25 [label="AST"];
30 -> 26 [label="AST"];
30 -> 22 [label="AST"];
30 -> 28 [label="AST"];
31 -> 32 [label="AST"];
31 -> 94 [label="Define-Use"];
33 -> 34 [label="AST"];
36 -> 35 [label="AST"];
36 -> 31 [label="AST"];
36 -> 33 [label="AST"];
37 -> 21 [label="AST"];
37 -> 30 [label="AST"];
37 -> 36 [label="AST"];
39 -> 40 [label="AST"];
41 -> 38 [label="AST"];
41 -> 39 [label="AST"];
41 -> 42 [label="Control Dep"];
43 -> 41 [label="AST"];
43 -> 42 [label="AST"];
44 -> 52 [label="Define-Use"];
44 -> 84 [label="Define-Use"];
45 -> 46 [label="AST"];
47 -> 44 [label="AST"];
47 -> 45 [label="AST"];
47 -> 55 [label="Control Dep"];
47 -> 54 [label="Control Dep"];
47 -> 48 [label="Control Dep"];
47 -> 52 [label="Control Dep"];
48 -> 49 [label="AST"];
48 -> 50 [label="AST"];
52 -> 53 [label="AST"];
54 -> 51 [label="AST"];
54 -> 52 [label="AST"];
54 -> 48 [label="AST"];
55 -> 54 [label="AST"];
56 -> 47 [label="AST"];
56 -> 55 [label="AST"];
57 -> 58 [label="AST"];
59 -> 60 [label="AST"];
61 -> 57 [label="AST"];
61 -> 59 [label="AST"];
62 -> 63 [label="AST"];
65 -> 66 [label="AST"];
67 -> 64 [label="AST"];
67 -> 65 [label="AST"];
67 -> 62 [label="AST"];
68 -> 67 [label="AST"];
69 -> 61 [label="AST"];
69 -> 68 [label="AST"];
69 -> 90 [label="Control Dep"];
69 -> 89 [label="Control Dep"];
69 -> 76 [label="Control Dep"];
69 -> 75 [label="Control Dep"];
69 -> 70 [label="Control Dep"];
69 -> 73 [label="Control Dep"];
69 -> 88 [label="Control Dep"];
69 -> 80 [label="Control Dep"];
69 -> 99 [label="Action"];
70 -> 71 [label="AST"];
73 -> 74 [label="AST"];
75 -> 72 [label="AST"];
75 -> 73 [label="AST"];
75 -> 70 [label="AST"];
76 -> 75 [label="AST"];
77 -> 84 [label="Define-Use"];
78 -> 79 [label="AST"];
80 -> 77 [label="AST"];
80 -> 78 [label="AST"];
80 -> 87 [label="Control Dep"];
80 -> 86 [label="Control Dep"];
80 -> 81 [label="Control Dep"];
80 -> 84 [label="Control Dep"];
81 -> 82 [label="AST"];
84 -> 85 [label="AST"];
86 -> 83 [label="AST"];
86 -> 84 [label="AST"];
86 -> 81 [label="AST"];
87 -> 86 [label="AST"];
88 -> 80 [label="AST"];
88 -> 87 [label="AST"];
89 -> 76 [label="AST"];
89 -> 88 [label="AST"];
90 -> 89 [label="AST"];
91 -> 69 [label="AST"];
91 -> 90 [label="AST"];
92 -> 91 [label="AST"];
93 -> 37 [label="AST"];
93 -> 43 [label="AST"];
93 -> 56 [label="AST"];
93 -> 92 [label="AST"];
94 -> 95 [label="AST"];
96 -> 94 [label="AST"];
97 -> 8 [label="AST"];
97 -> 14 [label="AST"];
97 -> 93 [label="AST"];
97 -> 96 [label="AST"];
98 -> 1 [label="AST"];
98 -> 0 [label="AST"];
98 -> 2 [label="AST"];
98 -> 97 [label="AST"];
99 -> 117 [label="Action"];
101 -> 100 [label="AST"];
102 -> 101 [label="AST"];
103 -> 102 [label="AST"];
105 -> 104 [label="AST"];
106 -> 103 [label="AST"];
106 -> 105 [label="AST"];
108 -> 107 [label="AST"];
109 -> 108 [label="AST"];
110 -> 109 [label="AST"];
112 -> 111 [label="AST"];
113 -> 112 [label="AST"];
114 -> 115 [label="AST"];
114 -> 110 [label="AST"];
114 -> 113 [label="AST"];
116 -> 114 [label="AST"];
117 -> 106 [label="AST"];
117 -> 116 [label="AST"];
117 -> 90 [label="Control Dep"];
117 -> 89 [label="Control Dep"];
117 -> 76 [label="Control Dep"];
117 -> 75 [label="Control Dep"];
117 -> 70 [label="Control Dep"];
117 -> 73 [label="Control Dep"];
117 -> 88 [label="Control Dep"];
117 -> 80 [label="Control Dep"];
}