digraph "Pattern" {
0 [label="##ActionPoint##
locationInParent:ACTION
nodeType:Delete
nodeType2:ActionNode
nodeType3:CtElementImpl
value:DELETE
value2:" shape=ellipse]
1 [label="locationInParent:STATEMENT
nodeType:CtIfImpl
nodeType2:CtStatementImpl
nodeType3:CtStatementImpl
value:exceed MAX_TOKEN_LENGTH:48 tokens
value2:exceed MAX_TOKEN_LENGTH:48 tokens" shape=ellipse]
2 [label="locationInParent:BODY
nodeType:CtBlockImpl
nodeType2:CtStatementImpl
nodeType3:CtStatementImpl" shape=ellipse]
3 [label="locationInParent:TYPE_MEMBER
nodeType:CtMethodImpl
nodeType2:CtExecutableImpl
nodeType3:CtExecutableImpl" shape=ellipse]
4 [label="locationInParent:METHOD_DEC_NAME
nodeType:CtVirtualElement
nodeType2:CtElementImpl
nodeType3:Object" shape=ellipse]
5 [label="locationInParent:TYPE
nodeType:CtTypeReferenceImpl
nodeType2:CtTypeReferenceImpl
nodeType3:CtTypeReferenceImpl
value:void
value2:void" shape=ellipse]
6 [label="locationInParent:PARAMETER
nodeType:CtParameterImpl
nodeType2:CtParameterImpl
nodeType3:CtParameterImpl
value:String[] args
value2:java.lang.String[] args" shape=ellipse]
7 [label="locationInParent:TYPE
nodeType:CtArrayTypeReferenceImpl
nodeType2:CtTypeReferenceImpl
nodeType3:CtTypeReferenceImpl
value:String[]
value2:java.lang.String[]" shape=ellipse]
8 [label="locationInParent:STATEMENT
nodeType:CtInvocationImpl
nodeType2:CtTargetedExpressionImpl
nodeType3:CtExpressionImpl
value:Header.print(System.out)
value2:Header.print(java.lang.System.PrintStream)" shape=ellipse]
9 [label="locationInParent:STATEMENT
nodeType:CtLocalVariableImpl
nodeType2:CtStatementImpl
nodeType3:CtStatementImpl" shape=ellipse]
10 [label="locationInParent:STATEMENT
nodeType:CtLocalVariableImpl
nodeType2:CtStatementImpl
nodeType3:CtStatementImpl" shape=ellipse]
11 [label="locationInParent:STATEMENT
nodeType:CtForImpl
nodeType2:CtLoopImpl
nodeType3:CtStatementImpl
value:for (int i = 0; i < args.length; i++) \{
    if (args[i].equals(\"--commandsfile\")) \{
        hasCommandsFile = true;
        commandsFileName = args[++i];
    \}
\}
value2:exceed MAX_TOKEN_LENGTH:15 tokens" shape=ellipse]
12 [label="locationInParent:THEN
nodeType:CtBlockImpl
nodeType2:CtStatementImpl
nodeType3:CtStatementImpl
value:exceed MAX_TOKEN_LENGTH:46 tokens
value2:exceed MAX_TOKEN_LENGTH:46 tokens" shape=ellipse]
13 [label="locationInParent:STATEMENT
nodeType:CtLocalVariableImpl
nodeType2:CtStatementImpl
nodeType3:CtStatementImpl
value:List arglist = new ArrayList()
value2:List arglist = new ArrayList()" shape=ellipse]
14 [label="locationInParent:DEFAULT_EXPRESSION
nodeType:CtConstructorCallImpl
nodeType2:CtTargetedExpressionImpl
nodeType3:CtExpressionImpl
value:new ArrayList()
value2:new ArrayList()" shape=ellipse]
15 [label="locationInParent:EXECUTABLE_REF
nodeType:CtExecutableReferenceImpl
nodeType2:CtExecutableReferenceImpl
nodeType3:CtExecutableReferenceImpl
value:ArrayList()
value2:ArrayList()" shape=ellipse]
16 [label="locationInParent:STATEMENT
nodeType:CtLocalVariableImpl
nodeType2:CtStatementImpl
nodeType3:CtStatementImpl" shape=ellipse]
17 [label="locationInParent:DEFAULT_EXPRESSION
nodeType:CtLiteralImpl
nodeType2:CtExpressionImpl
nodeType3:CtExpressionImpl
value:null
value2:null" shape=ellipse]
18 [label="locationInParent:STATEMENT
nodeType:CtTryImpl
nodeType2:CtStatementImpl
nodeType3:CtStatementImpl
value:exceed MAX_TOKEN_LENGTH:35 tokens
value2:exceed MAX_TOKEN_LENGTH:35 tokens" shape=ellipse]
19 [label="locationInParent:BODY
nodeType:CtBlockImpl
nodeType2:CtStatementImpl
nodeType3:CtStatementImpl
value2:exceed MAX_TOKEN_LENGTH:15 tokens" shape=ellipse]
20 [label="locationInParent:STATEMENT
nodeType:CtAssignmentImpl
nodeType2:CtStatementImpl
nodeType3:CtStatementImpl
value2:BufferedReader = new BufferedReader(new FileReader(String))" shape=ellipse]
21 [label="locationInParent:ASSIGNED
nodeType:CtVariableWriteImpl
nodeType2:CtVariableAccessImpl
nodeType3:CtExpressionImpl
value2:BufferedReader" shape=ellipse]
22 [label="locationInParent:ASSIGNMENT
nodeType:CtConstructorCallImpl
nodeType2:CtTargetedExpressionImpl
nodeType3:CtExpressionImpl
value:new BufferedReader(new FileReader(commandsFileName))
value2:new BufferedReader(new FileReader(String))" shape=ellipse]
23 [label="locationInParent:EXECUTABLE_REF
nodeType:CtExecutableReferenceImpl
nodeType2:CtExecutableReferenceImpl
nodeType3:CtExecutableReferenceImpl
value:BufferedReader()
value2:BufferedReader()" shape=ellipse]
24 [label="locationInParent:ARGUMENT
nodeType:CtConstructorCallImpl
nodeType2:CtTargetedExpressionImpl
nodeType3:CtExpressionImpl
value:new FileReader(commandsFileName)
value2:new FileReader(String)" shape=ellipse]
25 [label="locationInParent:EXECUTABLE_REF
nodeType:CtExecutableReferenceImpl
nodeType2:CtExecutableReferenceImpl
nodeType3:CtExecutableReferenceImpl
value:FileReader(java.lang.String)
value2:FileReader(java.lang.String)" shape=ellipse]
26 [label="locationInParent:STATEMENT
nodeType:CtLocalVariableImpl
nodeType2:CtStatementImpl
nodeType3:CtStatementImpl
value:String line
value2:java.lang.String line" shape=ellipse]
27 [label="locationInParent:STATEMENT
nodeType:CtWhileImpl
nodeType2:CtLoopImpl
nodeType3:CtStatementImpl
value2:while ((String = BufferedReader.readLine()) != null) \{
    List.add(String);
\} " shape=ellipse]
28 [label="locationInParent:EXPRESSION
nodeType:CtBinaryOperatorImpl
nodeType2:CtExpressionImpl
nodeType3:CtExpressionImpl
value2:(String = BufferedReader.readLine()) != null" shape=ellipse]
29 [label="locationInParent:LEFT_OPERAND
nodeType:CtAssignmentImpl
nodeType2:CtStatementImpl
nodeType3:CtStatementImpl
value2:(String = BufferedReader.readLine())" shape=ellipse]
30 [label="locationInParent:ASSIGNED
nodeType:CtVariableWriteImpl
nodeType2:CtVariableAccessImpl
nodeType3:CtExpressionImpl
value:line
value2:String" shape=ellipse]
31 [label="locationInParent:ASSIGNMENT
nodeType:CtInvocationImpl
nodeType2:CtTargetedExpressionImpl
nodeType3:CtExpressionImpl
value2:BufferedReader.readLine()" shape=ellipse]
32 [label="locationInParent:EXECUTABLE_REF
nodeType:CtExecutableReferenceImpl
nodeType2:CtExecutableReferenceImpl
nodeType3:CtExecutableReferenceImpl
value:readLine()
value2:readLine()" shape=ellipse]
33 [label="locationInParent:TARGET
nodeType:CtVariableReadImpl
nodeType2:CtVariableAccessImpl
nodeType3:CtExpressionImpl
value2:BufferedReader" shape=ellipse]
34 [label="locationInParent:RIGHT_OPERAND
nodeType:CtLiteralImpl
nodeType2:CtExpressionImpl
nodeType3:CtExpressionImpl
value:null
value2:null" shape=ellipse]
35 [label="locationInParent:CATCH
nodeType:CtCatchImpl
nodeType2:CtCatchImpl
nodeType3:CtCatchImpl
value: catch (IOException e) \{
    logger.fatal((\"Unable to read temporary commands file \" + commandsFileName) + \".\");
    logger.info(e);
\}
value2: catch (IOException e) \{
    PlaceHold.fatal((String + String) + String);
    PlaceHold.info(IOException);
\}" shape=ellipse]
36 [label="locationInParent:PARAMETER
nodeType:CtCatchVariableImpl
nodeType2:CtCatchVariableImpl
nodeType3:CtCatchVariableImpl
value:IOException e
value2:IOException e" shape=ellipse]
37 [label="locationInParent:FINALIZER
nodeType:CtBlockImpl
nodeType2:CtStatementImpl
nodeType3:CtStatementImpl
value2:\{
    if (BufferedReader != null) \{
        try \{
            BufferedReader.close();
        \} catch (IOException e) \{
        \}
    \}
\}" shape=ellipse]
38 [label="locationInParent:STATEMENT
nodeType:CtIfImpl
nodeType2:CtStatementImpl
nodeType3:CtStatementImpl
value2:if (BufferedReader != null) \{
    try \{
        BufferedReader.close();
    \} catch (IOException e) \{
    \}
\}" shape=ellipse]
39 [label="locationInParent:CONDITION
nodeType:CtBinaryOperatorImpl
nodeType2:CtExpressionImpl
nodeType3:CtExpressionImpl
value2:BufferedReader != null" shape=ellipse]
40 [label="locationInParent:LEFT_OPERAND
nodeType:CtVariableReadImpl
nodeType2:CtVariableAccessImpl
nodeType3:CtExpressionImpl
value2:BufferedReader" shape=ellipse]
41 [label="locationInParent:RIGHT_OPERAND
nodeType:CtLiteralImpl
nodeType2:CtExpressionImpl
nodeType3:CtExpressionImpl
value:null
value2:null" shape=ellipse]
42 [label="locationInParent:STATEMENT
nodeType:CtAssignmentImpl
nodeType2:CtStatementImpl
nodeType3:CtStatementImpl
value:args = ((String[]) (arglist.toArray(new String[arglist.size()])))
value2:String[] = ((java.lang.String[]) (List.toArray(new java.lang.String[List.size()])))" shape=ellipse]
43 [label="locationInParent:ASSIGNED
nodeType:CtVariableWriteImpl
nodeType2:CtVariableAccessImpl
nodeType3:CtExpressionImpl
value:args
value2:String[]" shape=ellipse]
44 [label="locationInParent:TARGET
nodeType:CtVariableReadImpl
nodeType2:CtVariableAccessImpl
nodeType3:CtExpressionImpl
value:arglist
value2:List" shape=ellipse]
45 [label="locationInParent:ASSIGNMENT
nodeType:CtInvocationImpl
nodeType2:CtTargetedExpressionImpl
nodeType3:CtExpressionImpl
value:((String[]) (arglist.toArray(new String[arglist.size()])))
value2:((java.lang.String[]) (List.toArray(new java.lang.String[List.size()])))" shape=ellipse]
46 [label="locationInParent:EXECUTABLE_REF
nodeType:CtExecutableReferenceImpl
nodeType2:CtExecutableReferenceImpl
nodeType3:CtExecutableReferenceImpl
value:toArray(java.lang.String[])
value2:toArray(java.lang.String[])" shape=ellipse]
47 [label="locationInParent:TARGET
nodeType:CtVariableReadImpl
nodeType2:CtVariableAccessImpl
nodeType3:CtExpressionImpl
value:arglist
value2:List" shape=ellipse]
48 [label="locationInParent:ARGUMENT
nodeType:CtNewArrayImpl
nodeType2:CtExpressionImpl
nodeType3:CtExpressionImpl
value:new String[arglist.size()]
value2:new java.lang.String[List.size()]" shape=ellipse]
49 [label="locationInParent:TYPE
nodeType:CtArrayTypeReferenceImpl
nodeType2:CtTypeReferenceImpl
nodeType3:CtTypeReferenceImpl
value:String[]
value2:java.lang.String[]" shape=ellipse]
1 -> 0 [label="Action:2"];
1 -> 12 [label="AST:2"];
2 -> 1 [label="AST:2"];
2 -> 8 [label="AST:2"];
2 -> 9 [label="AST:2"];
2 -> 10 [label="AST:2"];
2 -> 11 [label="AST:2"];
3 -> 2 [label="AST:2"];
3 -> 4 [label="AST:2"];
3 -> 5 [label="AST:2"];
3 -> 6 [label="AST:2"];
6 -> 7 [label="AST:2"];
12 -> 13 [label="AST:2"];
12 -> 16 [label="AST:2"];
12 -> 18 [label="AST:2"];
12 -> 42 [label="AST:2"];
13 -> 14 [label="AST:2"];
14 -> 15 [label="AST:2"];
16 -> 17 [label="AST:2"];
18 -> 19 [label="AST:2"];
18 -> 35 [label="AST:2"];
18 -> 37 [label="AST:2"];
19 -> 20 [label="AST:2"];
19 -> 26 [label="AST:2"];
19 -> 27 [label="AST:2"];
20 -> 21 [label="AST:2"];
20 -> 22 [label="AST:2"];
21 -> 33 [label="Define Use:2"];
21 -> 40 [label="Define Use:2"];
22 -> 23 [label="AST:2"];
22 -> 24 [label="AST:2"];
24 -> 25 [label="AST:2"];
27 -> 28 [label="AST:2"];
28 -> 29 [label="AST:2"];
28 -> 34 [label="AST:2"];
29 -> 30 [label="AST:2"];
29 -> 31 [label="AST:2"];
31 -> 33 [label="AST:2"];
31 -> 32 [label="AST:2"];
33 -> 30 [label="Data Dep:2"];
35 -> 36 [label="AST:2"];
37 -> 38 [label="AST:2"];
38 -> 39 [label="AST:2"];
39 -> 40 [label="AST:2"];
39 -> 41 [label="AST:2"];
42 -> 49 [label="AST:2"];
42 -> 43 [label="AST:2"];
42 -> 45 [label="AST:2"];
44 -> 43 [label="Data Dep:2"];
45 -> 47 [label="AST:2"];
45 -> 46 [label="AST:2"];
45 -> 48 [label="AST:2"];
47 -> 43 [label="Data Dep:2"];
}