digraph "Pattern" {
0 [label="main#?,String[]#34:MOVE
main#?,String[]#32:MOVE" shape=ellipse]
1 [label="main#?,String[]#34:args = ((String[]) (arglist.toArray(new String[arglist.size()])))
main#?,String[]#32:args = ((String[]) (arglist.toArray(new String[arglist.size()])))" shape=ellipse]
2 [label="main#?,String[]#14:hasCommandsFile
main#?,String[]#12:hasCommandsFile" shape=ellipse]
3 [label="main#?,String[]#6:hasCommandsFile
main#?,String[]#4:hasCommandsFile" shape=ellipse]
4 [label="main#?,String[]#10:hasCommandsFile
main#?,String[]#8:hasCommandsFile" shape=ellipse]
5 [label="main#?,String[]#10:hasCommandsFile
main#?,String[]#8:hasCommandsFile" shape=ellipse]
6 [label="main#?,String[]#14:if (hasCommandsFile) \{
    List arglist = new ArrayList();
    BufferedReader bufferedReader = null;
    try \{
        bufferedReader = new BufferedReader(new FileReader(commandsFileName));
        String line;
        while ((line = bufferedReader.readLine()) != null) \{
            arglist.add(line);
        \} 
    \} catch (IOException e) \{
        logger.fatal((\"Unable to read temporary commands file \" + commandsFileName) + \".\");
        logger.info(e);
    \} finally \{
        if (bufferedReader != null) \{
            try \{
                bufferedReader.close();
            \} catch (IOException e) \{
            \}
        \}
    \}
    args = ((String[]) (arglist.toArray(new String[arglist.size()])));
\}
main#?,String[]#12:if (hasCommandsFile) \{
    List arglist = new ArrayList();
    BufferedReader bufreader = null;
    try \{
        bufreader = new BufferedReader(new FileReader(commandsFileName));
        String line;
        while ((line = bufreader.readLine()) != null) \{
            arglist.add(line);
        \} 
    \} catch (IOException e) \{
        logger.fatal((\"Unable to read temporary commands file \" + commandsFileName) + \".\");
        logger.info(e);
    \} finally \{
        if (bufreader != null) \{
            try \{
                bufreader.close();
            \} catch (IOException e) \{
            \}
        \}
    \}
    args = ((String[]) (arglist.toArray(new String[arglist.size()])));
\}" shape=ellipse]
7 [label="main#?,String[]#14:hasCommandsFile
main#?,String[]#12:hasCommandsFile" shape=ellipse]
8 [label="main#?,String[]#14:\{
    List arglist = new ArrayList();
    BufferedReader bufferedReader = null;
    try \{
        bufferedReader = new BufferedReader(new FileReader(commandsFileName));
        String line;
        while ((line = bufferedReader.readLine()) != null) \{
            arglist.add(line);
        \} 
    \} catch (IOException e) \{
        logger.fatal((\"Unable to read temporary commands file \" + commandsFileName) + \".\");
        logger.info(e);
    \} finally \{
        if (bufferedReader != null) \{
            try \{
                bufferedReader.close();
            \} catch (IOException e) \{
            \}
        \}
    \}
    args = ((String[]) (arglist.toArray(new String[arglist.size()])));
\}
main#?,String[]#12:\{
    List arglist = new ArrayList();
    BufferedReader bufreader = null;
    try \{
        bufreader = new BufferedReader(new FileReader(commandsFileName));
        String line;
        while ((line = bufreader.readLine()) != null) \{
            arglist.add(line);
        \} 
    \} catch (IOException e) \{
        logger.fatal((\"Unable to read temporary commands file \" + commandsFileName) + \".\");
        logger.info(e);
    \} finally \{
        if (bufreader != null) \{
            try \{
                bufreader.close();
            \} catch (IOException e) \{
            \}
        \}
    \}
    args = ((String[]) (arglist.toArray(new String[arglist.size()])));
\}" shape=ellipse]
9 [label="main#?,String[]#15:List arglist = new ArrayList()
main#?,String[]#13:List arglist = new ArrayList()" shape=ellipse]
10 [label="main#?,String[]#15:new ArrayList()
main#?,String[]#13:new ArrayList()" shape=ellipse]
11 [label="main#?,String[]#15:ArrayList()
main#?,String[]#13:ArrayList()" shape=ellipse]
12 [label="main#?,String[]#16:BufferedReader bufferedReader = null
main#?,String[]#14:BufferedReader bufreader = null" shape=ellipse]
13 [label="main#?,String[]#16:null
main#?,String[]#14:null" shape=ellipse]
14 [label="main#?,String[]#17:try \{
    bufferedReader = new BufferedReader(new FileReader(commandsFileName));
    String line;
    while ((line = bufferedReader.readLine()) != null) \{
        arglist.add(line);
    \} 
\} catch (IOException e) \{
    logger.fatal((\"Unable to read temporary commands file \" + commandsFileName) + \".\");
    logger.info(e);
\} finally \{
    if (bufferedReader != null) \{
        try \{
            bufferedReader.close();
        \} catch (IOException e) \{
        \}
    \}
\}
main#?,String[]#15:try \{
    bufreader = new BufferedReader(new FileReader(commandsFileName));
    String line;
    while ((line = bufreader.readLine()) != null) \{
        arglist.add(line);
    \} 
\} catch (IOException e) \{
    logger.fatal((\"Unable to read temporary commands file \" + commandsFileName) + \".\");
    logger.info(e);
\} finally \{
    if (bufreader != null) \{
        try \{
            bufreader.close();
        \} catch (IOException e) \{
        \}
    \}
\}" shape=ellipse]
15 [label="main#?,String[]#17:\{
    bufferedReader = new BufferedReader(new FileReader(commandsFileName));
    String line;
    while ((line = bufferedReader.readLine()) != null) \{
        arglist.add(line);
    \} 
\}
main#?,String[]#15:\{
    bufreader = new BufferedReader(new FileReader(commandsFileName));
    String line;
    while ((line = bufreader.readLine()) != null) \{
        arglist.add(line);
    \} 
\}" shape=ellipse]
16 [label="main#?,String[]#18:bufferedReader = new BufferedReader(new FileReader(commandsFileName))
main#?,String[]#16:bufreader = new BufferedReader(new FileReader(commandsFileName))" shape=ellipse]
17 [label="main#?,String[]#18:bufferedReader
main#?,String[]#16:bufreader" shape=ellipse]
18 [label="main#?,String[]#18:new BufferedReader(new FileReader(commandsFileName))
main#?,String[]#16:new BufferedReader(new FileReader(commandsFileName))" shape=ellipse]
19 [label="main#?,String[]#18:BufferedReader()
main#?,String[]#16:BufferedReader()" shape=ellipse]
20 [label="main#?,String[]#18:new FileReader(commandsFileName)
main#?,String[]#16:new FileReader(commandsFileName)" shape=ellipse]
21 [label="main#?,String[]#18:FileReader(java.lang.String)
main#?,String[]#16:FileReader(java.lang.String)" shape=ellipse]
22 [label="main#?,String[]#18:commandsFileName
main#?,String[]#16:commandsFileName" shape=ellipse]
23 [label="main#?,String[]#19:String line
main#?,String[]#17:String line" shape=ellipse]
24 [label="main#?,String[]#20:while ((line = bufferedReader.readLine()) != null) \{
    arglist.add(line);
\} 
main#?,String[]#18:while ((line = bufreader.readLine()) != null) \{
    arglist.add(line);
\} " shape=ellipse]
25 [label="main#?,String[]#20:(line = bufferedReader.readLine()) != null
main#?,String[]#18:(line = bufreader.readLine()) != null" shape=ellipse]
26 [label="main#?,String[]#20:(line = bufferedReader.readLine())
main#?,String[]#18:(line = bufreader.readLine())" shape=ellipse]
27 [label="main#?,String[]#20:line
main#?,String[]#18:line" shape=ellipse]
28 [label="main#?,String[]#20:bufferedReader.readLine()
main#?,String[]#18:bufreader.readLine()" shape=ellipse]
29 [label="main#?,String[]#20:readLine()
main#?,String[]#18:readLine()" shape=ellipse]
30 [label="main#?,String[]#20:bufferedReader
main#?,String[]#18:bufreader" shape=ellipse]
31 [label="main#?,String[]#20:null
main#?,String[]#18:null" shape=ellipse]
32 [label="main#?,String[]#23: catch (IOException e) \{
    logger.fatal((\"Unable to read temporary commands file \" + commandsFileName) + \".\");
    logger.info(e);
\}
main#?,String[]#21: catch (IOException e) \{
    logger.fatal((\"Unable to read temporary commands file \" + commandsFileName) + \".\");
    logger.info(e);
\}" shape=ellipse]
33 [label="main#?,String[]#23:IOException e
main#?,String[]#21:IOException e" shape=ellipse]
34 [label="main#?,String[]#26:\{
    if (bufferedReader != null) \{
        try \{
            bufferedReader.close();
        \} catch (IOException e) \{
        \}
    \}
\}
main#?,String[]#24:\{
    if (bufreader != null) \{
        try \{
            bufreader.close();
        \} catch (IOException e) \{
        \}
    \}
\}" shape=ellipse]
35 [label="main#?,String[]#27:if (bufferedReader != null) \{
    try \{
        bufferedReader.close();
    \} catch (IOException e) \{
    \}
\}
main#?,String[]#25:if (bufreader != null) \{
    try \{
        bufreader.close();
    \} catch (IOException e) \{
    \}
\}" shape=ellipse]
36 [label="main#?,String[]#27:bufferedReader != null
main#?,String[]#25:bufreader != null" shape=ellipse]
37 [label="main#?,String[]#27:bufferedReader
main#?,String[]#25:bufreader" shape=ellipse]
38 [label="main#?,String[]#27:null
main#?,String[]#25:null" shape=ellipse]
39 [label="main#?,String[]#34:args
main#?,String[]#32:args" shape=ellipse]
40 [label="main#?,String[]#34:arglist
main#?,String[]#32:arglist" shape=ellipse]
41 [label="main#?,String[]#6:args
main#?,String[]#4:args" shape=ellipse]
42 [label="main#?,String[]#6:String[]
main#?,String[]#4:String[]" shape=ellipse]
43 [label="main#?,String[]#6:String
main#?,String[]#4:String" shape=ellipse]
44 [label="main#?,String[]#6:java.lang
main#?,String[]#4:java.lang" shape=ellipse]
45 [label="main#?,String[]#34:((String[]) (arglist.toArray(new String[arglist.size()])))
main#?,String[]#32:((String[]) (arglist.toArray(new String[arglist.size()])))" shape=ellipse]
46 [label="main#?,String[]#34:toArray(java.lang.String[])
main#?,String[]#32:toArray(java.lang.String[])" shape=ellipse]
47 [label="main#?,String[]#34:arglist
main#?,String[]#32:arglist" shape=ellipse]
48 [label="main#?,String[]#34:new String[arglist.size()]
main#?,String[]#32:new String[arglist.size()]" shape=ellipse]
49 [label="main#?,String[]#34:String[]
main#?,String[]#32:String[]" shape=ellipse]
50 [label="main#?,String[]#2:public static void main(String[] args) \{
    Header.print(System.out);
    long startTime = System.currentTimeMillis();
    Main main = new Main();
    boolean hasCommandsFile = false;
    String commandsFileName = null;
    for (int i = 0; i < args.length; i++) \{
        if (args[i].equals(\"--commandsfile\")) \{
            hasCommandsFile = true;
            commandsFileName = args[++i];
        \}
    \}
    if (hasCommandsFile) \{
        List arglist = new ArrayList();
        BufferedReader bufferedReader = null;
        try \{
            bufferedReader = new BufferedReader(new FileReader(commandsFileName));
            String line;
            while ((line = bufferedReader.readLine()) != null) \{
                arglist.add(line);
            \} 
        \} catch (IOException e) \{
            logger.fatal((\"Unable to read temporary commands file \" + commandsFileName) + \".\");
            logger.info(e);
        \} finally \{
            if (bufferedReader != null) \{
                try \{
                    bufferedReader.close();
                \} catch (IOException e) \{
                \}
            \}
        \}
        args = ((String[]) (arglist.toArray(new String[arglist.size()])));
    \}
    main.parseArguments(args);
    long stopTime = System.currentTimeMillis();
    System.out.println((\"Instrument time: \" + (stopTime - startTime)) + \"ms\");
\}
main#?,String[]#2:public static void main(String[] args) \{
    Header.print(System.out);
    boolean hasCommandsFile = false;
    String commandsFileName = null;
    for (int i = 0; i < args.length; i++) \{
        if (args[i].equals(\"--commandsfile\")) \{
            hasCommandsFile = true;
            commandsFileName = args[++i];
        \}
    \}
    if (hasCommandsFile) \{
        List arglist = new ArrayList();
        BufferedReader bufreader = null;
        try \{
            bufreader = new BufferedReader(new FileReader(commandsFileName));
            String line;
            while ((line = bufreader.readLine()) != null) \{
                arglist.add(line);
            \} 
        \} catch (IOException e) \{
            logger.fatal((\"Unable to read temporary commands file \" + commandsFileName) + \".\");
            logger.info(e);
        \} finally \{
            if (bufreader != null) \{
                try \{
                    bufreader.close();
                \} catch (IOException e) \{
                \}
            \}
        \}
        args = ((String[]) (arglist.toArray(new String[arglist.size()])));
    \}
    new Main(args);
\}" shape=ellipse]
51 [label="main#?,String[]#2:main
main#?,String[]#2:main" shape=ellipse]
52 [label="main#?,String[]#2:void
main#?,String[]#2:void" shape=ellipse]
53 [label="main#?,String[]#2:String[] args
main#?,String[]#2:String[] args" shape=ellipse]
54 [label="main#?,String[]#2:String[]
main#?,String[]#2:String[]" shape=ellipse]
55 [label="main#?,String[]#2:\{
    Header.print(System.out);
    long startTime = System.currentTimeMillis();
    Main main = new Main();
    boolean hasCommandsFile = false;
    String commandsFileName = null;
    for (int i = 0; i < args.length; i++) \{
        if (args[i].equals(\"--commandsfile\")) \{
            hasCommandsFile = true;
            commandsFileName = args[++i];
        \}
    \}
    if (hasCommandsFile) \{
        List arglist = new ArrayList();
        BufferedReader bufferedReader = null;
        try \{
            bufferedReader = new BufferedReader(new FileReader(commandsFileName));
            String line;
            while ((line = bufferedReader.readLine()) != null) \{
                arglist.add(line);
            \} 
        \} catch (IOException e) \{
            logger.fatal((\"Unable to read temporary commands file \" + commandsFileName) + \".\");
            logger.info(e);
        \} finally \{
            if (bufferedReader != null) \{
                try \{
                    bufferedReader.close();
                \} catch (IOException e) \{
                \}
            \}
        \}
        args = ((String[]) (arglist.toArray(new String[arglist.size()])));
    \}
    main.parseArguments(args);
    long stopTime = System.currentTimeMillis();
    System.out.println((\"Instrument time: \" + (stopTime - startTime)) + \"ms\");
\}
main#?,String[]#2:\{
    Header.print(System.out);
    boolean hasCommandsFile = false;
    String commandsFileName = null;
    for (int i = 0; i < args.length; i++) \{
        if (args[i].equals(\"--commandsfile\")) \{
            hasCommandsFile = true;
            commandsFileName = args[++i];
        \}
    \}
    if (hasCommandsFile) \{
        List arglist = new ArrayList();
        BufferedReader bufreader = null;
        try \{
            bufreader = new BufferedReader(new FileReader(commandsFileName));
            String line;
            while ((line = bufreader.readLine()) != null) \{
                arglist.add(line);
            \} 
        \} catch (IOException e) \{
            logger.fatal((\"Unable to read temporary commands file \" + commandsFileName) + \".\");
            logger.info(e);
        \} finally \{
            if (bufreader != null) \{
                try \{
                    bufreader.close();
                \} catch (IOException e) \{
                \}
            \}
        \}
        args = ((String[]) (arglist.toArray(new String[arglist.size()])));
    \}
    new Main(args);
\}" shape=ellipse]
56 [label="main#?,String[]#3:Header.print(System.out)
main#?,String[]#3:Header.print(System.out)" shape=ellipse]
57 [label="main#?,String[]#3:print
main#?,String[]#3:print" shape=ellipse]
58 [label="main#?,String[]#3:Header
main#?,String[]#3:Header" shape=ellipse]
59 [label="main#?,String[]#3:Header
main#?,String[]#3:Header" shape=ellipse]
60 [label="main#?,String[]#3:print(java.io.PrintStream)
main#?,String[]#3:print(java.io.PrintStream)" shape=ellipse]
61 [label="main#?,String[]#3:Header
main#?,String[]#3:Header" shape=ellipse]
62 [label="main#?,String[]#3:PrintStream
main#?,String[]#3:PrintStream" shape=ellipse]
63 [label="main#?,String[]#3:System.out
main#?,String[]#3:System.out" shape=ellipse]
64 [label="main#?,String[]#3:System
main#?,String[]#3:System" shape=ellipse]
65 [label="main#?,String[]#3:System.out
main#?,String[]#3:System.out" shape=ellipse]
66 [label="main#?,String[]#3:System
main#?,String[]#3:System" shape=ellipse]
67 [label="main#?,String[]#3:PrintStream
main#?,String[]#3:PrintStream" shape=ellipse]
68 [label="main#?,String[]#4:long startTime = System.currentTimeMillis()
main#?,String[]#5:String commandsFileName = null" shape=ellipse]
69 [label="main#?,String[]#4:startTime" shape=ellipse]
70 [label="main#?,String[]#38:startTime" shape=ellipse]
71 [label="main#?,String[]#38:startTime
main#?,String[]#7:args" shape=ellipse]
72 [label="main#?,String[]#4:long
main#?,String[]#5:String" shape=ellipse]
73 [label="main#?,String[]#4:System.currentTimeMillis()" shape=ellipse]
74 [label="main#?,String[]#4:currentTimeMillis
main#?,String[]#7:equals" shape=ellipse]
75 [label="main#?,String[]#4:System
main#?,String[]#6:args.length" shape=ellipse]
76 [label="main#?,String[]#4:System" shape=ellipse]
77 [label="main#?,String[]#4:currentTimeMillis()
main#?,String[]#7:equals(java.lang.Object)" shape=ellipse]
78 [label="main#?,String[]#4:System
main#?,String[]#7:String" shape=ellipse]
79 [label="main#?,String[]#4:long
main#?,String[]#7:boolean" shape=ellipse]
80 [label="main#?,String[]#5:Main main = new Main()" shape=ellipse]
81 [label="main#?,String[]#5:main
main#?,String[]#22:commandsFileName" shape=ellipse]
82 [label="main#?,String[]#36:main" shape=ellipse]
83 [label="main#?,String[]#36:main
main#?,String[]#6:i" shape=ellipse]
84 [label="main#?,String[]#5:Main
main#?,String[]#34:Main" shape=ellipse]
85 [label="main#?,String[]#5:" shape=ellipse]
86 [label="main#?,String[]#5:new Main()" shape=ellipse]
87 [label="main#?,String[]#5:Main()
main#?,String[]#34:Main" shape=ellipse]
88 [label="main#?,String[]#5:Main" shape=ellipse]
89 [label="main#?,String[]#5:Main" shape=ellipse]
90 [label="main#?,String[]#6:boolean hasCommandsFile = false
main#?,String[]#4:boolean hasCommandsFile = false" shape=ellipse]
91 [label="main#?,String[]#6:boolean
main#?,String[]#4:boolean" shape=ellipse]
92 [label="main#?,String[]#6:false
main#?,String[]#4:false" shape=ellipse]
93 [label="main#?,String[]#6:boolean
main#?,String[]#4:boolean" shape=ellipse]
94 [label="main#?,String[]#6:DELETE
main#?,String[]#4:DELETE" shape=ellipse]
95 [label="main#?,String[]#7:String commandsFileName = null" shape=ellipse]
96 [label="main#?,String[]#7:commandsFileName
main#?,String[]#9:commandsFileName" shape=ellipse]
97 [label="main#?,String[]#24:commandsFileName" shape=ellipse]
98 [label="main#?,String[]#24:commandsFileName
main#?,String[]#6:i" shape=ellipse]
99 [label="main#?,String[]#7:String
main#?,String[]#7:String" shape=ellipse]
100 [label="main#?,String[]#7:java.lang" shape=ellipse]
101 [label="main#?,String[]#7:null
main#?,String[]#7:\"--commandsfile\"" shape=ellipse]
102 [label="main#?,String[]#7:<nulltype>
main#?,String[]#7:String" shape=ellipse]
103 [label="main#?,String[]#7:DELETE
main#?,String[]#6:DELETE" shape=ellipse]
104 [label="main#?,String[]#8:for (int i = 0; i < args.length; i++) \{
    if (args[i].equals(\"--commandsfile\")) \{
        hasCommandsFile = true;
        commandsFileName = args[++i];
    \}
\}" shape=ellipse]
105 [label="main#?,String[]#8:int i = 0
main#?,String[]#7:if (args[i].equals(\"--commandsfile\")) \{
    hasCommandsFile = true;
    commandsFileName = args[++i];
\}" shape=ellipse]
106 [label="main#?,String[]#8:i" shape=ellipse]
107 [label="main#?,String[]#8:i" shape=ellipse]
108 [label="main#?,String[]#8:i
main#?,String[]#7:i" shape=ellipse]
109 [label="main#?,String[]#8:int" shape=ellipse]
110 [label="main#?,String[]#8:0" shape=ellipse]
111 [label="main#?,String[]#8:int
main#?,String[]#6:int" shape=ellipse]
112 [label="main#?,String[]#8:i < args.length" shape=ellipse]
113 [label="main#?,String[]#8:boolean
main#?,String[]#6:boolean" shape=ellipse]
114 [label="main#?,String[]#8:args.length
main#?,String[]#8:true" shape=ellipse]
115 [label="main#?,String[]#8:args" shape=ellipse]
116 [label="main#?,String[]#8:length" shape=ellipse]
117 [label="main#?,String[]#8:int
main#?,String[]#6:int" shape=ellipse]
118 [label="main#?,String[]#8:int
main#?,String[]#6:int" shape=ellipse]
119 [label="main#?,String[]#8:\{
    if (args[i].equals(\"--commandsfile\")) \{
        hasCommandsFile = true;
        commandsFileName = args[++i];
    \}
\}" shape=ellipse]
120 [label="main#?,String[]#9:if (args[i].equals(\"--commandsfile\")) \{
    hasCommandsFile = true;
    commandsFileName = args[++i];
\}" shape=ellipse]
121 [label="main#?,String[]#9:args[i].equals(\"--commandsfile\")" shape=ellipse]
122 [label="main#?,String[]#9:equals" shape=ellipse]
123 [label="main#?,String[]#9:args[i]
main#?,String[]#9:i" shape=ellipse]
124 [label="main#?,String[]#9:String" shape=ellipse]
125 [label="main#?,String[]#9:args" shape=ellipse]
126 [label="main#?,String[]#9:args
main#?,String[]#9:args" shape=ellipse]
127 [label="main#?,String[]#9:i" shape=ellipse]
128 [label="main#?,String[]#9:i
main#?,String[]#6:i" shape=ellipse]
129 [label="main#?,String[]#9:equals(java.lang.Object)
main#?,String[]#9:java.lang" shape=ellipse]
130 [label="main#?,String[]#9:String" shape=ellipse]
131 [label="main#?,String[]#9:boolean" shape=ellipse]
132 [label="main#?,String[]#9:Object" shape=ellipse]
133 [label="main#?,String[]#9:\"--commandsfile\"" shape=ellipse]
134 [label="main#?,String[]#9:String
main#?,String[]#9:String" shape=ellipse]
135 [label="main#?,String[]#9:\{
    hasCommandsFile = true;
    commandsFileName = args[++i];
\}" shape=ellipse]
136 [label="main#?,String[]#10:hasCommandsFile = true" shape=ellipse]
137 [label="main#?,String[]#10:boolean
main#?,String[]#8:boolean" shape=ellipse]
138 [label="main#?,String[]#10:true" shape=ellipse]
139 [label="main#?,String[]#10:boolean
main#?,String[]#5:<nulltype>" shape=ellipse]
140 [label="main#?,String[]#11:commandsFileName = args[++i]" shape=ellipse]
141 [label="main#?,String[]#11:String
main#?,String[]#6:int" shape=ellipse]
142 [label="main#?,String[]#11:java.lang" shape=ellipse]
143 [label="main#?,String[]#11:commandsFileName" shape=ellipse]
144 [label="main#?,String[]#11:commandsFileName" shape=ellipse]
145 [label="main#?,String[]#11:args[++i]" shape=ellipse]
146 [label="main#?,String[]#11:String
main#?,String[]#9:int" shape=ellipse]
147 [label="main#?,String[]#11:args" shape=ellipse]
148 [label="main#?,String[]#11:args
main#?,String[]#34:args" shape=ellipse]
149 [label="main#?,String[]#11:++i
main#?,String[]#6:i++" shape=ellipse]
150 [label="main#?,String[]#11:int
main#?,String[]#6:int" shape=ellipse]
151 [label="main#?,String[]#11:i" shape=ellipse]
152 [label="main#?,String[]#11:i" shape=ellipse]
153 [label="main#?,String[]#8:i++" shape=ellipse]
154 [label="main#?,String[]#8:int" shape=ellipse]
155 [label="main#?,String[]#8:i" shape=ellipse]
156 [label="main#?,String[]#8:i" shape=ellipse]
157 [label="main#?,String[]#8:DELETE" shape=ellipse]
158 [label="main#?,String[]#36:main.parseArguments(args)" shape=ellipse]
159 [label="main#?,String[]#36:parseArguments" shape=ellipse]
160 [label="main#?,String[]#36:parseArguments(java.lang.String[])" shape=ellipse]
161 [label="main#?,String[]#36:Main" shape=ellipse]
162 [label="main#?,String[]#36:String[]
main#?,String[]#34:String[]" shape=ellipse]
163 [label="main#?,String[]#36:args" shape=ellipse]
164 [label="main#?,String[]#36:args" shape=ellipse]
165 [label="main#?,String[]#37:long stopTime = System.currentTimeMillis()" shape=ellipse]
166 [label="main#?,String[]#37:stopTime" shape=ellipse]
167 [label="main#?,String[]#38:stopTime" shape=ellipse]
168 [label="main#?,String[]#38:stopTime" shape=ellipse]
169 [label="main#?,String[]#37:long" shape=ellipse]
170 [label="main#?,String[]#37:System.currentTimeMillis()" shape=ellipse]
171 [label="main#?,String[]#37:currentTimeMillis" shape=ellipse]
172 [label="main#?,String[]#37:System" shape=ellipse]
173 [label="main#?,String[]#37:System" shape=ellipse]
174 [label="main#?,String[]#37:currentTimeMillis()" shape=ellipse]
175 [label="main#?,String[]#37:System" shape=ellipse]
176 [label="main#?,String[]#37:long" shape=ellipse]
177 [label="main#?,String[]#38:System.out.println((\"Instrument time: \" + (stopTime - startTime)) + \"ms\")" shape=ellipse]
178 [label="main#?,String[]#38:println" shape=ellipse]
179 [label="main#?,String[]#38:System.out" shape=ellipse]
180 [label="main#?,String[]#38:System" shape=ellipse]
181 [label="main#?,String[]#38:System.out" shape=ellipse]
182 [label="main#?,String[]#38:System" shape=ellipse]
183 [label="main#?,String[]#38:PrintStream" shape=ellipse]
184 [label="main#?,String[]#38:println(java.lang.String)" shape=ellipse]
185 [label="main#?,String[]#38:PrintStream" shape=ellipse]
186 [label="main#?,String[]#38:void" shape=ellipse]
187 [label="main#?,String[]#38:String" shape=ellipse]
188 [label="main#?,String[]#38:(\"Instrument time: \" + (stopTime - startTime)) + \"ms\"" shape=ellipse]
189 [label="main#?,String[]#38:String" shape=ellipse]
190 [label="main#?,String[]#38:(\"Instrument time: \" + (stopTime - startTime))" shape=ellipse]
191 [label="main#?,String[]#38:String" shape=ellipse]
192 [label="main#?,String[]#38:\"Instrument time: \"" shape=ellipse]
193 [label="main#?,String[]#38:String" shape=ellipse]
194 [label="main#?,String[]#38:(stopTime - startTime)" shape=ellipse]
195 [label="main#?,String[]#38:long" shape=ellipse]
196 [label="main#?,String[]#38:\"ms\"" shape=ellipse]
197 [label="main#?,String[]#38:String" shape=ellipse]
198 [label="main#?,String[]#6:args" shape=ellipse]
199 [label="main#?,String[]#22:commandsFileName" shape=ellipse]
200 [label="main#?,String[]#5:null" shape=ellipse]
201 [label="main#?,String[]#7:args" shape=ellipse]
202 [label="main#?,String[]#9:commandsFileName = args[++i]" shape=ellipse]
203 [label="main#?,String[]#5:DELETE" shape=ellipse]
204 [label="main#?,String[]#34:args" shape=ellipse]
205 [label="main#?,String[]#8:hasCommandsFile = true" shape=ellipse]
206 [label="main#?,String[]#6:i" shape=ellipse]
207 [label="main#?,String[]#6:for (int i = 0; i < args.length; i++) \{
    if (args[i].equals(\"--commandsfile\")) \{
        hasCommandsFile = true;
        commandsFileName = args[++i];
    \}
\}" shape=ellipse]
208 [label="main#?,String[]#6:i" shape=ellipse]
209 [label="main#?,String[]#6:0" shape=ellipse]
210 [label="main#?,String[]#9:++i" shape=ellipse]
211 [label="main#?,String[]#9:args[++i]" shape=ellipse]
212 [label="main#?,String[]#6:i < args.length" shape=ellipse]
213 [label="main#?,String[]#6:\{
    if (args[i].equals(\"--commandsfile\")) \{
        hasCommandsFile = true;
        commandsFileName = args[++i];
    \}
\}" shape=ellipse]
214 [label="main#?,String[]#9:args" shape=ellipse]
215 [label="main#?,String[]#7:args[i].equals(\"--commandsfile\")" shape=ellipse]
216 [label="main#?,String[]#34:new Main(args)" shape=ellipse]
217 [label="main#?,String[]#7:\{
    hasCommandsFile = true;
    commandsFileName = args[++i];
\}" shape=ellipse]
218 [label="main#?,String[]#7:args[i]" shape=ellipse]
219 [label="main#?,String[]#7:i" shape=ellipse]
220 [label="main#?,String[]#7:Object" shape=ellipse]
221 [label="main#?,String[]#9:String" shape=ellipse]
222 [label="main#?,String[]#5:commandsFileName" shape=ellipse]
223 [label="main#?,String[]#9:commandsFileName" shape=ellipse]
224 [label="main#?,String[]#6:length" shape=ellipse]
225 [label="main#?,String[]#6:int i = 0" shape=ellipse]
226 [label="main#?,String[]#9:i" shape=ellipse]
227 [label="main#?,String[]#34:Main(java.lang.String[])" shape=ellipse]
228 [label="main#?,String[]#8:boolean" shape=ellipse]
229 [label="main#?,String[]#5:java.lang" shape=ellipse]
0 -> 50 [label="Action:2"];
1 -> 0 [label="Action:2"];
1 -> 49 [label="AST:2"];
1 -> 39 [label="AST:2"];
1 -> 45 [label="AST:2"];
2 -> 1 [label="Control Dep:2"];
2 -> 7 [label="AST:2"];
2 -> 8 [label="Control Dep:2"];
2 -> 9 [label="Control Dep:2"];
2 -> 10 [label="Control Dep:2"];
2 -> 11 [label="Control Dep:2"];
2 -> 12 [label="Control Dep:2"];
2 -> 13 [label="Control Dep:2"];
2 -> 14 [label="Control Dep:2"];
2 -> 15 [label="Control Dep:2"];
2 -> 16 [label="Control Dep:2"];
2 -> 17 [label="Control Dep:2"];
2 -> 18 [label="Control Dep:2"];
2 -> 19 [label="Control Dep:2"];
2 -> 20 [label="Control Dep:2"];
2 -> 21 [label="Control Dep:2"];
2 -> 22 [label="Control Dep:2"];
2 -> 23 [label="Control Dep:2"];
2 -> 24 [label="Control Dep:2"];
2 -> 25 [label="Control Dep:2"];
2 -> 26 [label="Control Dep:2"];
2 -> 27 [label="Control Dep:2"];
2 -> 28 [label="Control Dep:2"];
2 -> 29 [label="Control Dep:2"];
2 -> 30 [label="Control Dep:2"];
2 -> 31 [label="Control Dep:2"];
2 -> 32 [label="Control Dep:2"];
2 -> 33 [label="Control Dep:2"];
2 -> 34 [label="Control Dep:2"];
2 -> 35 [label="Control Dep:2"];
2 -> 36 [label="Control Dep:2"];
2 -> 37 [label="Control Dep:2"];
2 -> 38 [label="Control Dep:2"];
2 -> 39 [label="Control Dep:2"];
2 -> 45 [label="Control Dep:2"];
2 -> 46 [label="Control Dep:2"];
2 -> 47 [label="Control Dep:2"];
2 -> 48 [label="Control Dep:2"];
2 -> 49 [label="Control Dep:2"];
3 -> 2 [label="Define Use:2"];
4 -> 2 [label="Define Use:2"];
5 -> 2 [label="Define Use:2"];
5 -> 4 [label="AST:2"];
6 -> 2 [label="AST:2"];
6 -> 8 [label="AST:2"];
8 -> 1 [label="AST:2"];
8 -> 9 [label="AST:2"];
8 -> 12 [label="AST:2"];
8 -> 14 [label="AST:2"];
9 -> 10 [label="AST:2"];
10 -> 11 [label="AST:2"];
12 -> 13 [label="AST:2"];
14 -> 15 [label="AST:2"];
14 -> 32 [label="AST:2"];
14 -> 34 [label="AST:2"];
15 -> 16 [label="AST:2"];
15 -> 23 [label="AST:2"];
15 -> 24 [label="AST:2"];
16 -> 17 [label="AST:2"];
16 -> 18 [label="AST:2"];
17 -> 30 [label="Define Use:2"];
17 -> 37 [label="Define Use:2"];
18 -> 19 [label="AST:2"];
18 -> 20 [label="AST:2"];
20 -> 21 [label="AST:2"];
20 -> 22 [label="AST:2"];
22 -> 17 [label="Data Dep:2"];
24 -> 25 [label="AST:2"];
25 -> 26 [label="AST:2"];
25 -> 31 [label="AST:2"];
26 -> 27 [label="AST:2"];
26 -> 28 [label="AST:2"];
28 -> 30 [label="AST:2"];
28 -> 29 [label="AST:2"];
30 -> 27 [label="Data Dep:2"];
32 -> 33 [label="AST:2"];
33 -> 97 [label="Control Dep:1"];
33 -> 199 [label="Control Dep:1"];
34 -> 35 [label="AST:2"];
35 -> 36 [label="AST:2"];
36 -> 37 [label="AST:2"];
36 -> 38 [label="AST:2"];
39 -> 163 [label="Define Use:1"];
39 -> 204 [label="Define Use:1"];
40 -> 39 [label="Data Dep:2"];
41 -> 42 [label="AST:2"];
42 -> 43 [label="AST:2"];
43 -> 44 [label="AST:2"];
45 -> 47 [label="AST:2"];
45 -> 46 [label="AST:2"];
45 -> 48 [label="AST:2"];
47 -> 39 [label="Data Dep:2"];
50 -> 51 [label="AST:2"];
50 -> 52 [label="AST:2"];
50 -> 53 [label="AST:2"];
50 -> 55 [label="AST:2"];
53 -> 54 [label="AST:2"];
55 -> 6 [label="AST:2"];
55 -> 56 [label="AST:2"];
55 -> 68 [label="AST:2"];
55 -> 80 [label="AST:1"];
55 -> 90 [label="AST:2"];
55 -> 95 [label="AST:1"];
55 -> 104 [label="AST:1"];
55 -> 158 [label="AST:1"];
55 -> 165 [label="AST:1"];
55 -> 177 [label="AST:1"];
55 -> 207 [label="AST:1"];
55 -> 216 [label="AST:1"];
56 -> 57 [label="AST:2"];
56 -> 58 [label="AST:2"];
56 -> 60 [label="AST:2"];
56 -> 63 [label="AST:2"];
58 -> 59 [label="AST:2"];
60 -> 61 [label="AST:2"];
60 -> 62 [label="AST:2"];
63 -> 64 [label="AST:2"];
63 -> 65 [label="AST:2"];
65 -> 66 [label="AST:2"];
65 -> 67 [label="AST:2"];
68 -> 69 [label="AST:1"];
68 -> 72 [label="AST:2"];
68 -> 73 [label="AST:1"];
68 -> 200 [label="AST:1"];
68 -> 203 [label="Action:1"];
68 -> 222 [label="AST:1"];
69 -> 70 [label="Define Use:1"];
70 -> 71 [label="AST:1"];
72 -> 229 [label="AST:1"];
73 -> 74 [label="AST:1"];
73 -> 75 [label="AST:1"];
73 -> 77 [label="AST:1"];
75 -> 76 [label="AST:1"];
75 -> 198 [label="AST:1"];
75 -> 224 [label="AST:1"];
77 -> 78 [label="AST:2"];
77 -> 79 [label="AST:2"];
77 -> 220 [label="AST:1"];
80 -> 81 [label="AST:1"];
80 -> 84 [label="AST:1"];
80 -> 86 [label="AST:1"];
81 -> 82 [label="Define Use:1"];
82 -> 83 [label="AST:1"];
83 -> 208 [label="Define Use:1"];
84 -> 85 [label="AST:1"];
86 -> 87 [label="AST:1"];
87 -> 88 [label="AST:1"];
87 -> 89 [label="AST:1"];
90 -> 3 [label="AST:2"];
90 -> 91 [label="AST:2"];
90 -> 92 [label="AST:2"];
90 -> 94 [label="Action:2"];
92 -> 93 [label="AST:2"];
95 -> 96 [label="AST:1"];
95 -> 99 [label="AST:1"];
95 -> 101 [label="AST:1"];
95 -> 103 [label="Action:1"];
96 -> 22 [label="Define Use:2"];
96 -> 97 [label="Define Use:1"];
96 -> 199 [label="Define Use:1"];
96 -> 223 [label="AST:1"];
97 -> 98 [label="AST:1"];
99 -> 100 [label="AST:1"];
101 -> 102 [label="AST:2"];
104 -> 105 [label="AST:1"];
104 -> 112 [label="AST:1"];
104 -> 153 [label="AST:1"];
104 -> 119 [label="AST:1"];
104 -> 157 [label="Action:1"];
105 -> 106 [label="AST:1"];
105 -> 109 [label="AST:1"];
105 -> 110 [label="AST:1"];
105 -> 215 [label="AST:1"];
105 -> 217 [label="AST:1"];
106 -> 107 [label="Define Use:1"];
107 -> 108 [label="AST:1"];
110 -> 111 [label="AST:1"];
112 -> 107 [label="AST:1"];
112 -> 113 [label="AST:1"];
112 -> 114 [label="AST:1"];
112 -> 119 [label="Control Dep:1"];
112 -> 120 [label="Control Dep:1"];
112 -> 121 [label="Control Dep:1"];
112 -> 129 [label="Control Dep:1"];
112 -> 123 [label="Control Dep:1"];
112 -> 125 [label="Control Dep:1"];
112 -> 127 [label="Control Dep:1"];
112 -> 133 [label="Control Dep:1"];
114 -> 115 [label="AST:1"];
114 -> 116 [label="AST:1"];
114 -> 228 [label="AST:1"];
116 -> 117 [label="AST:1"];
116 -> 118 [label="AST:1"];
119 -> 120 [label="AST:1"];
120 -> 121 [label="AST:1"];
120 -> 135 [label="AST:1"];
121 -> 5 [label="Control Dep:1"];
121 -> 122 [label="AST:1"];
121 -> 123 [label="AST:1"];
121 -> 129 [label="AST:1"];
121 -> 133 [label="AST:1"];
121 -> 135 [label="Control Dep:1"];
121 -> 136 [label="Control Dep:1"];
121 -> 138 [label="Control Dep:1"];
121 -> 140 [label="Control Dep:1"];
121 -> 143 [label="Control Dep:1"];
121 -> 145 [label="Control Dep:1"];
121 -> 147 [label="Control Dep:1"];
121 -> 149 [label="Control Dep:1"];
121 -> 151 [label="Control Dep:1"];
123 -> 124 [label="AST:1"];
123 -> 125 [label="AST:1"];
123 -> 127 [label="AST:1"];
123 -> 226 [label="AST:1"];
125 -> 126 [label="AST:1"];
127 -> 128 [label="AST:1"];
129 -> 130 [label="AST:1"];
129 -> 131 [label="AST:1"];
129 -> 132 [label="AST:1"];
133 -> 134 [label="AST:1"];
135 -> 136 [label="AST:1"];
135 -> 140 [label="AST:1"];
136 -> 5 [label="AST:1"];
136 -> 137 [label="AST:1"];
136 -> 138 [label="AST:1"];
138 -> 139 [label="AST:1"];
140 -> 141 [label="AST:1"];
140 -> 143 [label="AST:1"];
140 -> 145 [label="AST:1"];
141 -> 142 [label="AST:1"];
143 -> 22 [label="Define Use:1"];
143 -> 97 [label="Define Use:1"];
143 -> 144 [label="AST:1"];
144 -> 22 [label="Define Use:1"];
144 -> 97 [label="Define Use:1"];
145 -> 143 [label="Data Dep:1"];
145 -> 146 [label="AST:1"];
145 -> 147 [label="AST:1"];
145 -> 149 [label="AST:1"];
147 -> 143 [label="Data Dep:1"];
147 -> 148 [label="AST:1"];
149 -> 150 [label="AST:2"];
149 -> 151 [label="AST:1"];
149 -> 206 [label="AST:1"];
151 -> 152 [label="AST:1"];
153 -> 154 [label="AST:1"];
153 -> 155 [label="AST:1"];
155 -> 127 [label="Define Use:1"];
155 -> 156 [label="AST:1"];
158 -> 82 [label="AST:1"];
158 -> 159 [label="AST:1"];
158 -> 160 [label="AST:1"];
158 -> 163 [label="AST:1"];
160 -> 161 [label="AST:1"];
160 -> 162 [label="AST:1"];
163 -> 164 [label="AST:1"];
165 -> 166 [label="AST:1"];
165 -> 169 [label="AST:1"];
165 -> 170 [label="AST:1"];
166 -> 167 [label="Define Use:1"];
167 -> 168 [label="AST:1"];
170 -> 171 [label="AST:1"];
170 -> 172 [label="AST:1"];
170 -> 174 [label="AST:1"];
172 -> 173 [label="AST:1"];
174 -> 175 [label="AST:1"];
174 -> 176 [label="AST:1"];
177 -> 178 [label="AST:1"];
177 -> 179 [label="AST:1"];
177 -> 184 [label="AST:1"];
177 -> 188 [label="AST:1"];
179 -> 180 [label="AST:1"];
179 -> 181 [label="AST:1"];
181 -> 182 [label="AST:1"];
181 -> 183 [label="AST:1"];
184 -> 185 [label="AST:1"];
184 -> 186 [label="AST:1"];
184 -> 187 [label="AST:1"];
188 -> 189 [label="AST:1"];
188 -> 190 [label="AST:1"];
188 -> 196 [label="AST:1"];
190 -> 191 [label="AST:1"];
190 -> 192 [label="AST:1"];
190 -> 194 [label="AST:1"];
192 -> 193 [label="AST:1"];
194 -> 70 [label="AST:1"];
194 -> 167 [label="AST:1"];
194 -> 195 [label="AST:1"];
196 -> 197 [label="AST:1"];
199 -> 81 [label="AST:1"];
200 -> 139 [label="AST:1"];
201 -> 71 [label="AST:1"];
202 -> 221 [label="AST:1"];
202 -> 96 [label="AST:1"];
202 -> 211 [label="AST:1"];
204 -> 148 [label="AST:1"];
205 -> 137 [label="AST:1"];
205 -> 5 [label="AST:1"];
205 -> 114 [label="AST:1"];
206 -> 128 [label="AST:1"];
206 -> 219 [label="Define Use:1"];
207 -> 225 [label="AST:1"];
207 -> 212 [label="AST:1"];
207 -> 149 [label="AST:1"];
207 -> 213 [label="AST:1"];
207 -> 103 [label="Action:1"];
208 -> 98 [label="AST:1"];
209 -> 117 [label="AST:1"];
210 -> 146 [label="AST:1"];
210 -> 123 [label="AST:1"];
211 -> 210 [label="AST:1"];
211 -> 134 [label="AST:1"];
211 -> 214 [label="AST:1"];
211 -> 96 [label="Data Dep:1"];
212 -> 201 [label="Control Dep:1"];
212 -> 208 [label="AST:1"];
212 -> 113 [label="AST:1"];
212 -> 75 [label="AST:1"];
212 -> 213 [label="Control Dep:1"];
212 -> 105 [label="Control Dep:1"];
212 -> 215 [label="Control Dep:1"];
212 -> 77 [label="Control Dep:1"];
212 -> 218 [label="Control Dep:1"];
212 -> 219 [label="Control Dep:1"];
212 -> 101 [label="Control Dep:1"];
213 -> 105 [label="AST:1"];
214 -> 126 [label="AST:1"];
214 -> 96 [label="Data Dep:1"];
215 -> 202 [label="Control Dep:1"];
215 -> 205 [label="Control Dep:1"];
215 -> 210 [label="Control Dep:1"];
215 -> 211 [label="Control Dep:1"];
215 -> 214 [label="Control Dep:1"];
215 -> 74 [label="AST:1"];
215 -> 218 [label="AST:1"];
215 -> 77 [label="AST:1"];
215 -> 101 [label="AST:1"];
215 -> 217 [label="Control Dep:1"];
215 -> 5 [label="Control Dep:1"];
215 -> 114 [label="Control Dep:1"];
215 -> 96 [label="Control Dep:1"];
215 -> 123 [label="Control Dep:1"];
216 -> 204 [label="AST:1"];
216 -> 227 [label="AST:1"];
217 -> 202 [label="AST:1"];
217 -> 205 [label="AST:1"];
218 -> 201 [label="AST:1"];
218 -> 99 [label="AST:1"];
218 -> 219 [label="AST:1"];
219 -> 108 [label="AST:1"];
221 -> 129 [label="AST:1"];
222 -> 199 [label="Define Use:1"];
222 -> 22 [label="Define Use:1"];
223 -> 199 [label="Define Use:1"];
223 -> 22 [label="Define Use:1"];
224 -> 118 [label="AST:1"];
224 -> 141 [label="AST:1"];
225 -> 209 [label="AST:1"];
225 -> 83 [label="AST:1"];
225 -> 111 [label="AST:1"];
227 -> 84 [label="AST:1"];
227 -> 87 [label="AST:1"];
227 -> 162 [label="AST:1"];
}