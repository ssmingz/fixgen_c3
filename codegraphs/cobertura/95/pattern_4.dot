digraph "Pattern" {
0 [label="main#?,String[]#7:DELETE
main#?,String[]#5:DELETE" shape=ellipse]
1 [label="main#?,String[]#7:String commandsFileName = null
main#?,String[]#5:String commandsFileName = null" shape=ellipse]
2 [label="main#?,String[]#2:\{
    Header.print(System.out);
    long startTime = System.currentTimeMillis();
    Main main = new Main();
    boolean hasCommandsFile = false;
    String commandsFileName = null;
    for (int i = 0; i < args.length; i++) \{
        if (args[i].equals(\"--commandsfile\")) \{
            hasCommandsFile = true;
            commandsFileName = args[++i];
        \}
    \}
    if (hasCommandsFile) \{
        List arglist = new ArrayList();
        BufferedReader bufferedReader = null;
        try \{
            bufferedReader = new BufferedReader(new FileReader(commandsFileName));
            String line;
            while ((line = bufferedReader.readLine()) != null) \{
                arglist.add(line);
            \} 
        \} catch (IOException e) \{
            logger.fatal((\"Unable to read temporary commands file \" + commandsFileName) + \".\");
            logger.info(e);
        \} finally \{
            if (bufferedReader != null) \{
                try \{
                    bufferedReader.close();
                \} catch (IOException e) \{
                \}
            \}
        \}
        args = ((String[]) (arglist.toArray(new String[arglist.size()])));
    \}
    main.parseArguments(args);
    long stopTime = System.currentTimeMillis();
    System.out.println((\"Instrument time: \" + (stopTime - startTime)) + \"ms\");
\}
main#?,String[]#2:\{
    Header.print(System.out);
    boolean hasCommandsFile = false;
    String commandsFileName = null;
    for (int i = 0; i < args.length; i++) \{
        if (args[i].equals(\"--commandsfile\")) \{
            hasCommandsFile = true;
            commandsFileName = args[++i];
        \}
    \}
    if (hasCommandsFile) \{
        List arglist = new ArrayList();
        BufferedReader bufreader = null;
        try \{
            bufreader = new BufferedReader(new FileReader(commandsFileName));
            String line;
            while ((line = bufreader.readLine()) != null) \{
                arglist.add(line);
            \} 
        \} catch (IOException e) \{
            logger.fatal((\"Unable to read temporary commands file \" + commandsFileName) + \".\");
            logger.info(e);
        \} finally \{
            if (bufreader != null) \{
                try \{
                    bufreader.close();
                \} catch (IOException e) \{
                \}
            \}
        \}
        args = ((String[]) (arglist.toArray(new String[arglist.size()])));
    \}
    new Main(args);
\}" shape=ellipse]
3 [label="main#?,String[]#2:public static void main(String[] args) \{
    Header.print(System.out);
    long startTime = System.currentTimeMillis();
    Main main = new Main();
    boolean hasCommandsFile = false;
    String commandsFileName = null;
    for (int i = 0; i < args.length; i++) \{
        if (args[i].equals(\"--commandsfile\")) \{
            hasCommandsFile = true;
            commandsFileName = args[++i];
        \}
    \}
    if (hasCommandsFile) \{
        List arglist = new ArrayList();
        BufferedReader bufferedReader = null;
        try \{
            bufferedReader = new BufferedReader(new FileReader(commandsFileName));
            String line;
            while ((line = bufferedReader.readLine()) != null) \{
                arglist.add(line);
            \} 
        \} catch (IOException e) \{
            logger.fatal((\"Unable to read temporary commands file \" + commandsFileName) + \".\");
            logger.info(e);
        \} finally \{
            if (bufferedReader != null) \{
                try \{
                    bufferedReader.close();
                \} catch (IOException e) \{
                \}
            \}
        \}
        args = ((String[]) (arglist.toArray(new String[arglist.size()])));
    \}
    main.parseArguments(args);
    long stopTime = System.currentTimeMillis();
    System.out.println((\"Instrument time: \" + (stopTime - startTime)) + \"ms\");
\}
main#?,String[]#2:public static void main(String[] args) \{
    Header.print(System.out);
    boolean hasCommandsFile = false;
    String commandsFileName = null;
    for (int i = 0; i < args.length; i++) \{
        if (args[i].equals(\"--commandsfile\")) \{
            hasCommandsFile = true;
            commandsFileName = args[++i];
        \}
    \}
    if (hasCommandsFile) \{
        List arglist = new ArrayList();
        BufferedReader bufreader = null;
        try \{
            bufreader = new BufferedReader(new FileReader(commandsFileName));
            String line;
            while ((line = bufreader.readLine()) != null) \{
                arglist.add(line);
            \} 
        \} catch (IOException e) \{
            logger.fatal((\"Unable to read temporary commands file \" + commandsFileName) + \".\");
            logger.info(e);
        \} finally \{
            if (bufreader != null) \{
                try \{
                    bufreader.close();
                \} catch (IOException e) \{
                \}
            \}
        \}
        args = ((String[]) (arglist.toArray(new String[arglist.size()])));
    \}
    new Main(args);
\}" shape=ellipse]
4 [label="main#?,String[]#2:main
main#?,String[]#2:main" shape=ellipse]
5 [label="main#?,String[]#2:void
main#?,String[]#2:void" shape=ellipse]
6 [label="main#?,String[]#2:String[] args
main#?,String[]#2:String[] args" shape=ellipse]
7 [label="main#?,String[]#2:String[]
main#?,String[]#2:String[]" shape=ellipse]
8 [label="main#?,String[]#3:Header.print(System.out)
main#?,String[]#3:Header.print(System.out)" shape=ellipse]
9 [label="main#?,String[]#4:long startTime = System.currentTimeMillis()
main#?,String[]#12:if (hasCommandsFile) \{
    List arglist = new ArrayList();
    BufferedReader bufreader = null;
    try \{
        bufreader = new BufferedReader(new FileReader(commandsFileName));
        String line;
        while ((line = bufreader.readLine()) != null) \{
            arglist.add(line);
        \} 
    \} catch (IOException e) \{
        logger.fatal((\"Unable to read temporary commands file \" + commandsFileName) + \".\");
        logger.info(e);
    \} finally \{
        if (bufreader != null) \{
            try \{
                bufreader.close();
            \} catch (IOException e) \{
            \}
        \}
    \}
    args = ((String[]) (arglist.toArray(new String[arglist.size()])));
\}" shape=ellipse]
10 [label="main#?,String[]#5:Main main = new Main()
main#?,String[]#4:boolean hasCommandsFile = false" shape=ellipse]
11 [label="main#?,String[]#6:boolean hasCommandsFile = false" shape=ellipse]
12 [label="main#?,String[]#8:for (int i = 0; i < args.length; i++) \{
    if (args[i].equals(\"--commandsfile\")) \{
        hasCommandsFile = true;
        commandsFileName = args[++i];
    \}
\}
main#?,String[]#6:for (int i = 0; i < args.length; i++) \{
    if (args[i].equals(\"--commandsfile\")) \{
        hasCommandsFile = true;
        commandsFileName = args[++i];
    \}
\}" shape=ellipse]
13 [label="main#?,String[]#14:if (hasCommandsFile) \{
    List arglist = new ArrayList();
    BufferedReader bufferedReader = null;
    try \{
        bufferedReader = new BufferedReader(new FileReader(commandsFileName));
        String line;
        while ((line = bufferedReader.readLine()) != null) \{
            arglist.add(line);
        \} 
    \} catch (IOException e) \{
        logger.fatal((\"Unable to read temporary commands file \" + commandsFileName) + \".\");
        logger.info(e);
    \} finally \{
        if (bufferedReader != null) \{
            try \{
                bufferedReader.close();
            \} catch (IOException e) \{
            \}
        \}
    \}
    args = ((String[]) (arglist.toArray(new String[arglist.size()])));
\}" shape=ellipse]
14 [label="main#?,String[]#36:main.parseArguments(args)" shape=ellipse]
15 [label="main#?,String[]#37:long stopTime = System.currentTimeMillis()" shape=ellipse]
16 [label="main#?,String[]#38:System.out.println((\"Instrument time: \" + (stopTime - startTime)) + \"ms\")" shape=ellipse]
17 [label="main#?,String[]#7:commandsFileName
main#?,String[]#5:commandsFileName" shape=ellipse]
18 [label="main#?,String[]#18:commandsFileName
main#?,String[]#16:commandsFileName" shape=ellipse]
19 [label="main#?,String[]#24:commandsFileName
main#?,String[]#22:commandsFileName" shape=ellipse]
20 [label="main#?,String[]#7:String
main#?,String[]#5:String" shape=ellipse]
21 [label="main#?,String[]#7:java.lang
main#?,String[]#5:java.lang" shape=ellipse]
22 [label="main#?,String[]#7:null
main#?,String[]#5:null" shape=ellipse]
23 [label="main#?,String[]#7:<nulltype>
main#?,String[]#5:<nulltype>" shape=ellipse]
24 [label="main#?,String[]#34:new Main(args)" shape=ellipse]
1 -> 0 [label="Action:2"];
1 -> 17 [label="AST:2"];
1 -> 20 [label="AST:2"];
1 -> 22 [label="AST:2"];
2 -> 1 [label="AST:2"];
2 -> 8 [label="AST:2"];
2 -> 9 [label="AST:2"];
2 -> 10 [label="AST:2"];
2 -> 11 [label="AST:1"];
2 -> 12 [label="AST:2"];
2 -> 13 [label="AST:1"];
2 -> 14 [label="AST:1"];
2 -> 15 [label="AST:1"];
2 -> 16 [label="AST:1"];
2 -> 24 [label="AST:1"];
3 -> 2 [label="AST:2"];
3 -> 4 [label="AST:2"];
3 -> 5 [label="AST:2"];
3 -> 6 [label="AST:2"];
6 -> 7 [label="AST:2"];
17 -> 18 [label="Define Use:2"];
17 -> 19 [label="Define Use:2"];
20 -> 21 [label="AST:2"];
22 -> 23 [label="AST:2"];
}