digraph "Pattern" {
0 [label="main#?,String[]#14:DELETE
main#?,String[]#12:DELETE" shape=ellipse]
1 [label="main#?,String[]#14:if (hasCommandsFile) \{
    List arglist = new ArrayList();
    BufferedReader bufferedReader = null;
    try \{
        bufferedReader = new BufferedReader(new FileReader(commandsFileName));
        String line;
        while ((line = bufferedReader.readLine()) != null) \{
            arglist.add(line);
        \} 
    \} catch (IOException e) \{
        logger.fatal((\"Unable to read temporary commands file \" + commandsFileName) + \".\");
        logger.info(e);
    \} finally \{
        if (bufferedReader != null) \{
            try \{
                bufferedReader.close();
            \} catch (IOException e) \{
            \}
        \}
    \}
    args = ((String[]) (arglist.toArray(new String[arglist.size()])));
\}
main#?,String[]#12:if (hasCommandsFile) \{
    List arglist = new ArrayList();
    BufferedReader bufreader = null;
    try \{
        bufreader = new BufferedReader(new FileReader(commandsFileName));
        String line;
        while ((line = bufreader.readLine()) != null) \{
            arglist.add(line);
        \} 
    \} catch (IOException e) \{
        logger.fatal((\"Unable to read temporary commands file \" + commandsFileName) + \".\");
        logger.info(e);
    \} finally \{
        if (bufreader != null) \{
            try \{
                bufreader.close();
            \} catch (IOException e) \{
            \}
        \}
    \}
    args = ((String[]) (arglist.toArray(new String[arglist.size()])));
\}" shape=ellipse]
2 [label="main#?,String[]#2:\{
    Header.print(System.out);
    long startTime = System.currentTimeMillis();
    Main main = new Main();
    boolean hasCommandsFile = false;
    String commandsFileName = null;
    for (int i = 0; i < args.length; i++) \{
        if (args[i].equals(\"--commandsfile\")) \{
            hasCommandsFile = true;
            commandsFileName = args[++i];
        \}
    \}
    if (hasCommandsFile) \{
        List arglist = new ArrayList();
        BufferedReader bufferedReader = null;
        try \{
            bufferedReader = new BufferedReader(new FileReader(commandsFileName));
            String line;
            while ((line = bufferedReader.readLine()) != null) \{
                arglist.add(line);
            \} 
        \} catch (IOException e) \{
            logger.fatal((\"Unable to read temporary commands file \" + commandsFileName) + \".\");
            logger.info(e);
        \} finally \{
            if (bufferedReader != null) \{
                try \{
                    bufferedReader.close();
                \} catch (IOException e) \{
                \}
            \}
        \}
        args = ((String[]) (arglist.toArray(new String[arglist.size()])));
    \}
    main.parseArguments(args);
    long stopTime = System.currentTimeMillis();
    System.out.println((\"Instrument time: \" + (stopTime - startTime)) + \"ms\");
\}
main#?,String[]#2:\{
    Header.print(System.out);
    boolean hasCommandsFile = false;
    String commandsFileName = null;
    for (int i = 0; i < args.length; i++) \{
        if (args[i].equals(\"--commandsfile\")) \{
            hasCommandsFile = true;
            commandsFileName = args[++i];
        \}
    \}
    if (hasCommandsFile) \{
        List arglist = new ArrayList();
        BufferedReader bufreader = null;
        try \{
            bufreader = new BufferedReader(new FileReader(commandsFileName));
            String line;
            while ((line = bufreader.readLine()) != null) \{
                arglist.add(line);
            \} 
        \} catch (IOException e) \{
            logger.fatal((\"Unable to read temporary commands file \" + commandsFileName) + \".\");
            logger.info(e);
        \} finally \{
            if (bufreader != null) \{
                try \{
                    bufreader.close();
                \} catch (IOException e) \{
                \}
            \}
        \}
        args = ((String[]) (arglist.toArray(new String[arglist.size()])));
    \}
    new Main(args);
\}" shape=ellipse]
3 [label="main#?,String[]#2:public static void main(String[] args) \{
    Header.print(System.out);
    long startTime = System.currentTimeMillis();
    Main main = new Main();
    boolean hasCommandsFile = false;
    String commandsFileName = null;
    for (int i = 0; i < args.length; i++) \{
        if (args[i].equals(\"--commandsfile\")) \{
            hasCommandsFile = true;
            commandsFileName = args[++i];
        \}
    \}
    if (hasCommandsFile) \{
        List arglist = new ArrayList();
        BufferedReader bufferedReader = null;
        try \{
            bufferedReader = new BufferedReader(new FileReader(commandsFileName));
            String line;
            while ((line = bufferedReader.readLine()) != null) \{
                arglist.add(line);
            \} 
        \} catch (IOException e) \{
            logger.fatal((\"Unable to read temporary commands file \" + commandsFileName) + \".\");
            logger.info(e);
        \} finally \{
            if (bufferedReader != null) \{
                try \{
                    bufferedReader.close();
                \} catch (IOException e) \{
                \}
            \}
        \}
        args = ((String[]) (arglist.toArray(new String[arglist.size()])));
    \}
    main.parseArguments(args);
    long stopTime = System.currentTimeMillis();
    System.out.println((\"Instrument time: \" + (stopTime - startTime)) + \"ms\");
\}
main#?,String[]#2:public static void main(String[] args) \{
    Header.print(System.out);
    boolean hasCommandsFile = false;
    String commandsFileName = null;
    for (int i = 0; i < args.length; i++) \{
        if (args[i].equals(\"--commandsfile\")) \{
            hasCommandsFile = true;
            commandsFileName = args[++i];
        \}
    \}
    if (hasCommandsFile) \{
        List arglist = new ArrayList();
        BufferedReader bufreader = null;
        try \{
            bufreader = new BufferedReader(new FileReader(commandsFileName));
            String line;
            while ((line = bufreader.readLine()) != null) \{
                arglist.add(line);
            \} 
        \} catch (IOException e) \{
            logger.fatal((\"Unable to read temporary commands file \" + commandsFileName) + \".\");
            logger.info(e);
        \} finally \{
            if (bufreader != null) \{
                try \{
                    bufreader.close();
                \} catch (IOException e) \{
                \}
            \}
        \}
        args = ((String[]) (arglist.toArray(new String[arglist.size()])));
    \}
    new Main(args);
\}" shape=ellipse]
4 [label="main#?,String[]#2:main
main#?,String[]#2:main" shape=ellipse]
5 [label="main#?,String[]#2:void
main#?,String[]#2:void" shape=ellipse]
6 [label="main#?,String[]#2:String[] args
main#?,String[]#2:String[] args" shape=ellipse]
7 [label="main#?,String[]#2:String[]
main#?,String[]#2:String[]" shape=ellipse]
8 [label="main#?,String[]#3:Header.print(System.out)
main#?,String[]#3:Header.print(System.out)" shape=ellipse]
9 [label="main#?,String[]#4:long startTime = System.currentTimeMillis()
main#?,String[]#5:String commandsFileName = null" shape=ellipse]
10 [label="main#?,String[]#5:Main main = new Main()
main#?,String[]#4:boolean hasCommandsFile = false" shape=ellipse]
11 [label="main#?,String[]#6:boolean hasCommandsFile = false" shape=ellipse]
12 [label="main#?,String[]#7:String commandsFileName = null" shape=ellipse]
13 [label="main#?,String[]#8:for (int i = 0; i < args.length; i++) \{
    if (args[i].equals(\"--commandsfile\")) \{
        hasCommandsFile = true;
        commandsFileName = args[++i];
    \}
\}
main#?,String[]#6:for (int i = 0; i < args.length; i++) \{
    if (args[i].equals(\"--commandsfile\")) \{
        hasCommandsFile = true;
        commandsFileName = args[++i];
    \}
\}" shape=ellipse]
14 [label="main#?,String[]#36:main.parseArguments(args)" shape=ellipse]
15 [label="main#?,String[]#37:long stopTime = System.currentTimeMillis()" shape=ellipse]
16 [label="main#?,String[]#38:System.out.println((\"Instrument time: \" + (stopTime - startTime)) + \"ms\")" shape=ellipse]
17 [label="main#?,String[]#14:hasCommandsFile" shape=ellipse]
18 [label="main#?,String[]#6:hasCommandsFile
main#?,String[]#8:hasCommandsFile" shape=ellipse]
19 [label="main#?,String[]#10:hasCommandsFile
main#?,String[]#12:hasCommandsFile" shape=ellipse]
20 [label="main#?,String[]#10:hasCommandsFile" shape=ellipse]
21 [label="main#?,String[]#14:hasCommandsFile
main#?,String[]#4:args" shape=ellipse]
22 [label="main#?,String[]#14:\{
    List arglist = new ArrayList();
    BufferedReader bufferedReader = null;
    try \{
        bufferedReader = new BufferedReader(new FileReader(commandsFileName));
        String line;
        while ((line = bufferedReader.readLine()) != null) \{
            arglist.add(line);
        \} 
    \} catch (IOException e) \{
        logger.fatal((\"Unable to read temporary commands file \" + commandsFileName) + \".\");
        logger.info(e);
    \} finally \{
        if (bufferedReader != null) \{
            try \{
                bufferedReader.close();
            \} catch (IOException e) \{
            \}
        \}
    \}
    args = ((String[]) (arglist.toArray(new String[arglist.size()])));
\}
main#?,String[]#12:\{
    List arglist = new ArrayList();
    BufferedReader bufreader = null;
    try \{
        bufreader = new BufferedReader(new FileReader(commandsFileName));
        String line;
        while ((line = bufreader.readLine()) != null) \{
            arglist.add(line);
        \} 
    \} catch (IOException e) \{
        logger.fatal((\"Unable to read temporary commands file \" + commandsFileName) + \".\");
        logger.info(e);
    \} finally \{
        if (bufreader != null) \{
            try \{
                bufreader.close();
            \} catch (IOException e) \{
            \}
        \}
    \}
    args = ((String[]) (arglist.toArray(new String[arglist.size()])));
\}" shape=ellipse]
23 [label="main#?,String[]#15:List arglist = new ArrayList()
main#?,String[]#13:List arglist = new ArrayList()" shape=ellipse]
24 [label="main#?,String[]#15:new ArrayList()
main#?,String[]#13:new ArrayList()" shape=ellipse]
25 [label="main#?,String[]#15:ArrayList()
main#?,String[]#13:ArrayList()" shape=ellipse]
26 [label="main#?,String[]#16:BufferedReader bufferedReader = null
main#?,String[]#14:BufferedReader bufreader = null" shape=ellipse]
27 [label="main#?,String[]#16:null
main#?,String[]#14:null" shape=ellipse]
28 [label="main#?,String[]#17:try \{
    bufferedReader = new BufferedReader(new FileReader(commandsFileName));
    String line;
    while ((line = bufferedReader.readLine()) != null) \{
        arglist.add(line);
    \} 
\} catch (IOException e) \{
    logger.fatal((\"Unable to read temporary commands file \" + commandsFileName) + \".\");
    logger.info(e);
\} finally \{
    if (bufferedReader != null) \{
        try \{
            bufferedReader.close();
        \} catch (IOException e) \{
        \}
    \}
\}
main#?,String[]#15:try \{
    bufreader = new BufferedReader(new FileReader(commandsFileName));
    String line;
    while ((line = bufreader.readLine()) != null) \{
        arglist.add(line);
    \} 
\} catch (IOException e) \{
    logger.fatal((\"Unable to read temporary commands file \" + commandsFileName) + \".\");
    logger.info(e);
\} finally \{
    if (bufreader != null) \{
        try \{
            bufreader.close();
        \} catch (IOException e) \{
        \}
    \}
\}" shape=ellipse]
29 [label="main#?,String[]#17:\{
    bufferedReader = new BufferedReader(new FileReader(commandsFileName));
    String line;
    while ((line = bufferedReader.readLine()) != null) \{
        arglist.add(line);
    \} 
\}
main#?,String[]#15:\{
    bufreader = new BufferedReader(new FileReader(commandsFileName));
    String line;
    while ((line = bufreader.readLine()) != null) \{
        arglist.add(line);
    \} 
\}" shape=ellipse]
30 [label="main#?,String[]#18:bufferedReader = new BufferedReader(new FileReader(commandsFileName))
main#?,String[]#16:bufreader = new BufferedReader(new FileReader(commandsFileName))" shape=ellipse]
31 [label="main#?,String[]#18:bufferedReader
main#?,String[]#16:bufreader" shape=ellipse]
32 [label="main#?,String[]#18:new BufferedReader(new FileReader(commandsFileName))
main#?,String[]#16:new BufferedReader(new FileReader(commandsFileName))" shape=ellipse]
33 [label="main#?,String[]#18:BufferedReader()
main#?,String[]#16:BufferedReader()" shape=ellipse]
34 [label="main#?,String[]#18:new FileReader(commandsFileName)
main#?,String[]#16:new FileReader(commandsFileName)" shape=ellipse]
35 [label="main#?,String[]#18:FileReader(java.lang.String)
main#?,String[]#16:FileReader(java.lang.String)" shape=ellipse]
36 [label="main#?,String[]#18:commandsFileName" shape=ellipse]
37 [label="main#?,String[]#19:String line
main#?,String[]#17:String line" shape=ellipse]
38 [label="main#?,String[]#20:while ((line = bufferedReader.readLine()) != null) \{
    arglist.add(line);
\} 
main#?,String[]#18:while ((line = bufreader.readLine()) != null) \{
    arglist.add(line);
\} " shape=ellipse]
39 [label="main#?,String[]#20:(line = bufferedReader.readLine()) != null
main#?,String[]#18:(line = bufreader.readLine()) != null" shape=ellipse]
40 [label="main#?,String[]#20:(line = bufferedReader.readLine())
main#?,String[]#18:(line = bufreader.readLine())" shape=ellipse]
41 [label="main#?,String[]#20:line
main#?,String[]#18:line" shape=ellipse]
42 [label="main#?,String[]#20:bufferedReader.readLine()
main#?,String[]#18:bufreader.readLine()" shape=ellipse]
43 [label="main#?,String[]#20:readLine()
main#?,String[]#18:readLine()" shape=ellipse]
44 [label="main#?,String[]#20:bufferedReader
main#?,String[]#18:bufreader" shape=ellipse]
45 [label="main#?,String[]#20:null
main#?,String[]#18:null" shape=ellipse]
46 [label="main#?,String[]#23: catch (IOException e) \{
    logger.fatal((\"Unable to read temporary commands file \" + commandsFileName) + \".\");
    logger.info(e);
\}
main#?,String[]#21: catch (IOException e) \{
    logger.fatal((\"Unable to read temporary commands file \" + commandsFileName) + \".\");
    logger.info(e);
\}" shape=ellipse]
47 [label="main#?,String[]#23:IOException e
main#?,String[]#21:IOException e" shape=ellipse]
48 [label="main#?,String[]#26:\{
    if (bufferedReader != null) \{
        try \{
            bufferedReader.close();
        \} catch (IOException e) \{
        \}
    \}
\}
main#?,String[]#24:\{
    if (bufreader != null) \{
        try \{
            bufreader.close();
        \} catch (IOException e) \{
        \}
    \}
\}" shape=ellipse]
49 [label="main#?,String[]#27:if (bufferedReader != null) \{
    try \{
        bufferedReader.close();
    \} catch (IOException e) \{
    \}
\}
main#?,String[]#25:if (bufreader != null) \{
    try \{
        bufreader.close();
    \} catch (IOException e) \{
    \}
\}" shape=ellipse]
50 [label="main#?,String[]#27:bufferedReader != null
main#?,String[]#25:bufreader != null" shape=ellipse]
51 [label="main#?,String[]#27:bufferedReader
main#?,String[]#25:bufreader" shape=ellipse]
52 [label="main#?,String[]#27:null
main#?,String[]#25:null" shape=ellipse]
53 [label="main#?,String[]#34:args = ((String[]) (arglist.toArray(new String[arglist.size()])))
main#?,String[]#32:args = ((String[]) (arglist.toArray(new String[arglist.size()])))" shape=ellipse]
54 [label="main#?,String[]#34:args
main#?,String[]#32:args" shape=ellipse]
55 [label="main#?,String[]#34:arglist
main#?,String[]#32:arglist" shape=ellipse]
56 [label="main#?,String[]#6:args" shape=ellipse]
57 [label="main#?,String[]#6:String[]" shape=ellipse]
58 [label="main#?,String[]#6:String
main#?,String[]#4:String" shape=ellipse]
59 [label="main#?,String[]#6:java.lang
main#?,String[]#4:java.lang" shape=ellipse]
60 [label="main#?,String[]#34:((String[]) (arglist.toArray(new String[arglist.size()])))
main#?,String[]#32:((String[]) (arglist.toArray(new String[arglist.size()])))" shape=ellipse]
61 [label="main#?,String[]#34:toArray(java.lang.String[])
main#?,String[]#32:toArray(java.lang.String[])" shape=ellipse]
62 [label="main#?,String[]#34:arglist
main#?,String[]#32:arglist" shape=ellipse]
63 [label="main#?,String[]#34:new String[arglist.size()]
main#?,String[]#32:new String[arglist.size()]" shape=ellipse]
64 [label="main#?,String[]#34:String[]
main#?,String[]#32:String[]" shape=ellipse]
65 [label="main#?,String[]#34:new Main(args)" shape=ellipse]
66 [label="main#?,String[]#12:hasCommandsFile" shape=ellipse]
67 [label="main#?,String[]#8:hasCommandsFile" shape=ellipse]
68 [label="main#?,String[]#16:commandsFileName" shape=ellipse]
69 [label="main#?,String[]#4:hasCommandsFile" shape=ellipse]
70 [label="main#?,String[]#4:String[]" shape=ellipse]
1 -> 0 [label="Action:2"];
1 -> 17 [label="AST:1"];
1 -> 22 [label="AST:2"];
1 -> 66 [label="AST:1"];
2 -> 1 [label="AST:2"];
2 -> 8 [label="AST:2"];
2 -> 9 [label="AST:2"];
2 -> 10 [label="AST:2"];
2 -> 11 [label="AST:1"];
2 -> 12 [label="AST:1"];
2 -> 13 [label="AST:2"];
2 -> 14 [label="AST:1"];
2 -> 15 [label="AST:1"];
2 -> 16 [label="AST:1"];
2 -> 65 [label="AST:1"];
3 -> 2 [label="AST:2"];
3 -> 4 [label="AST:2"];
3 -> 5 [label="AST:2"];
3 -> 6 [label="AST:2"];
6 -> 7 [label="AST:2"];
10 -> 69 [label="AST:1"];
11 -> 18 [label="AST:1"];
17 -> 21 [label="AST:1"];
17 -> 22 [label="Control Dep:1"];
17 -> 23 [label="Control Dep:1"];
17 -> 24 [label="Control Dep:1"];
17 -> 25 [label="Control Dep:1"];
17 -> 26 [label="Control Dep:1"];
17 -> 27 [label="Control Dep:1"];
17 -> 28 [label="Control Dep:1"];
17 -> 29 [label="Control Dep:1"];
17 -> 30 [label="Control Dep:1"];
17 -> 31 [label="Control Dep:1"];
17 -> 32 [label="Control Dep:1"];
17 -> 33 [label="Control Dep:1"];
17 -> 34 [label="Control Dep:1"];
17 -> 35 [label="Control Dep:1"];
17 -> 36 [label="Control Dep:1"];
17 -> 37 [label="Control Dep:1"];
17 -> 38 [label="Control Dep:1"];
17 -> 39 [label="Control Dep:1"];
17 -> 40 [label="Control Dep:1"];
17 -> 41 [label="Control Dep:1"];
17 -> 42 [label="Control Dep:1"];
17 -> 43 [label="Control Dep:1"];
17 -> 44 [label="Control Dep:1"];
17 -> 45 [label="Control Dep:1"];
17 -> 46 [label="Control Dep:1"];
17 -> 47 [label="Control Dep:1"];
17 -> 48 [label="Control Dep:1"];
17 -> 49 [label="Control Dep:1"];
17 -> 50 [label="Control Dep:1"];
17 -> 51 [label="Control Dep:1"];
17 -> 52 [label="Control Dep:1"];
17 -> 53 [label="Control Dep:1"];
17 -> 54 [label="Control Dep:1"];
17 -> 60 [label="Control Dep:1"];
17 -> 61 [label="Control Dep:1"];
17 -> 62 [label="Control Dep:1"];
17 -> 63 [label="Control Dep:1"];
17 -> 64 [label="Control Dep:1"];
18 -> 17 [label="Define Use:1"];
18 -> 66 [label="Define Use:1"];
19 -> 17 [label="Define Use:1"];
20 -> 17 [label="Define Use:1"];
20 -> 19 [label="AST:1"];
21 -> 70 [label="AST:1"];
22 -> 23 [label="AST:2"];
22 -> 26 [label="AST:2"];
22 -> 28 [label="AST:2"];
22 -> 53 [label="AST:2"];
23 -> 24 [label="AST:2"];
24 -> 25 [label="AST:2"];
26 -> 27 [label="AST:2"];
28 -> 29 [label="AST:2"];
28 -> 46 [label="AST:2"];
28 -> 48 [label="AST:2"];
29 -> 30 [label="AST:2"];
29 -> 37 [label="AST:2"];
29 -> 38 [label="AST:2"];
30 -> 31 [label="AST:2"];
30 -> 32 [label="AST:2"];
31 -> 44 [label="Define Use:2"];
31 -> 51 [label="Define Use:2"];
32 -> 33 [label="AST:2"];
32 -> 34 [label="AST:2"];
34 -> 35 [label="AST:2"];
34 -> 36 [label="AST:1"];
34 -> 68 [label="AST:1"];
36 -> 31 [label="Data Dep:1"];
38 -> 39 [label="AST:2"];
39 -> 40 [label="AST:2"];
39 -> 45 [label="AST:2"];
40 -> 41 [label="AST:2"];
40 -> 42 [label="AST:2"];
42 -> 44 [label="AST:2"];
42 -> 43 [label="AST:2"];
44 -> 41 [label="Data Dep:2"];
46 -> 47 [label="AST:2"];
48 -> 49 [label="AST:2"];
49 -> 50 [label="AST:2"];
50 -> 51 [label="AST:2"];
50 -> 52 [label="AST:2"];
53 -> 64 [label="AST:2"];
53 -> 54 [label="AST:2"];
53 -> 60 [label="AST:2"];
55 -> 54 [label="Data Dep:2"];
56 -> 57 [label="AST:1"];
57 -> 58 [label="AST:1"];
58 -> 59 [label="AST:2"];
60 -> 62 [label="AST:2"];
60 -> 61 [label="AST:2"];
60 -> 63 [label="AST:2"];
62 -> 54 [label="Data Dep:2"];
66 -> 19 [label="AST:1"];
66 -> 22 [label="Control Dep:1"];
66 -> 23 [label="Control Dep:1"];
66 -> 24 [label="Control Dep:1"];
66 -> 25 [label="Control Dep:1"];
66 -> 26 [label="Control Dep:1"];
66 -> 27 [label="Control Dep:1"];
66 -> 28 [label="Control Dep:1"];
66 -> 29 [label="Control Dep:1"];
66 -> 30 [label="Control Dep:1"];
66 -> 31 [label="Control Dep:1"];
66 -> 32 [label="Control Dep:1"];
66 -> 33 [label="Control Dep:1"];
66 -> 34 [label="Control Dep:1"];
66 -> 35 [label="Control Dep:1"];
66 -> 68 [label="Control Dep:1"];
66 -> 37 [label="Control Dep:1"];
66 -> 38 [label="Control Dep:1"];
66 -> 39 [label="Control Dep:1"];
66 -> 40 [label="Control Dep:1"];
66 -> 41 [label="Control Dep:1"];
66 -> 42 [label="Control Dep:1"];
66 -> 43 [label="Control Dep:1"];
66 -> 44 [label="Control Dep:1"];
66 -> 45 [label="Control Dep:1"];
66 -> 46 [label="Control Dep:1"];
66 -> 47 [label="Control Dep:1"];
66 -> 48 [label="Control Dep:1"];
66 -> 49 [label="Control Dep:1"];
66 -> 50 [label="Control Dep:1"];
66 -> 51 [label="Control Dep:1"];
66 -> 52 [label="Control Dep:1"];
66 -> 53 [label="Control Dep:1"];
66 -> 54 [label="Control Dep:1"];
66 -> 60 [label="Control Dep:1"];
66 -> 61 [label="Control Dep:1"];
66 -> 62 [label="Control Dep:1"];
66 -> 63 [label="Control Dep:1"];
66 -> 64 [label="Control Dep:1"];
67 -> 66 [label="Define Use:1"];
67 -> 18 [label="AST:1"];
68 -> 31 [label="Data Dep:1"];
69 -> 66 [label="Define Use:1"];
70 -> 58 [label="AST:1"];
}