digraph "Pattern" {
0 [label="execute#?#3:UPDATE
execute#?#3:UPDATE
execute#?#3:UPDATE
execute#?#3:UPDATE
execute#?#3:UPDATE
execute#?#3:UPDATE" shape=ellipse]
1 [label="execute#?#3:attributes.log(\"Using modern compiler\", MSG_VERBOSE)
execute#?#3:attributes.log(\"Using kjc compiler\", MSG_VERBOSE)
execute#?#3:attributes.log(\"Using external javac compiler\", MSG_VERBOSE)
execute#?#3:attributes.log(\"Using external javac compiler\", MSG_VERBOSE)
execute#?#3:attributes.log(\"Using modern compiler\", MSG_VERBOSE)
execute#?#3:attributes.log(\"Using kjc compiler\", MSG_VERBOSE)" shape=ellipse]
2 [label="execute#?#2:\{
    attributes.log(\"Using modern compiler\", MSG_VERBOSE);
    Commandline cmd = setupModernJavacCommand();
    try \{
        Class c = Class.forName(\"com.sun.tools.javac.Main\");
        Object compiler = c.newInstance();
        Method compile = c.getMethod(\"compile\", new Class[]\{ new String[]\{  \}.getClass() \});
        int result = ((Integer) (compile.invoke(compiler, new Object[]\{ cmd.getArguments() \}))).intValue();
        return result == MODERN_COMPILER_SUCCESS;
    \} catch (Exception ex) \{
        if (ex instanceof TaskException) \{
            throw ((TaskException) (ex));
        \} else \{
            throw new TaskException(\"Error starting modern compiler\", ex);
        \}
    \}
\}
execute#?#2:\{
    attributes.log(\"Using kjc compiler\", MSG_VERBOSE);
    Commandline cmd = setupKjcCommand();
    try \{
        Class c = Class.forName(\"at.dms.kjc.Main\");
        Method compile = c.getMethod(\"compile\", new Class[]\{ String[].class \});
        Boolean ok = ((Boolean) (compile.invoke(null, new Object[]\{ cmd.getArguments() \})));
        return ok.booleanValue();
    \} catch (ClassNotFoundException ex) \{
        throw new TaskException((\"Cannot use kjc compiler, as it is not available\" + \" A common solution is to set the environment variable\") + \" CLASSPATH to your kjc archive (kjc.jar).\");
    \} catch (Exception ex) \{
        if (ex instanceof TaskException) \{
            throw ((TaskException) (ex));
        \} else \{
            throw new TaskException(\"Error starting kjc compiler: \", ex);
        \}
    \}
\}
execute#?#2:\{
    attributes.log(\"Using external javac compiler\", MSG_VERBOSE);
    Commandline cmd = new Commandline();
    cmd.setExecutable(getJavac().getJavacExecutable());
    setupModernJavacCommandlineSwitches(cmd);
    int firstFileName = cmd.size();
    logAndAddFilesToCompile(cmd);
    return executeExternalCompile(cmd.getCommandline(), firstFileName) == 0;
\}
execute#?#2:\{
    attributes.log(\"Using external javac compiler\", MSG_VERBOSE);
    Commandline cmd = new Commandline();
    cmd.setExecutable(getJavac().getJavacExecutable());
    setupModernJavacCommandlineSwitches(cmd);
    int firstFileName = cmd.size();
    logAndAddFilesToCompile(cmd);
    return executeExternalCompile(cmd.getCommandline(), firstFileName) == 0;
\}
execute#?#2:\{
    attributes.log(\"Using modern compiler\", MSG_VERBOSE);
    Commandline cmd = setupModernJavacCommand();
    try \{
        Class c = Class.forName(\"com.sun.tools.javac.Main\");
        Object compiler = c.newInstance();
        Method compile = c.getMethod(\"compile\", new Class[]\{ new String[]\{  \}.getClass() \});
        int result = ((Integer) (compile.invoke(compiler, new Object[]\{ cmd.getArguments() \}))).intValue();
        return result == MODERN_COMPILER_SUCCESS;
    \} catch (Exception ex) \{
        if (ex instanceof TaskException) \{
            throw ((TaskException) (ex));
        \} else \{
            throw new TaskException(\"Error starting modern compiler\", ex);
        \}
    \}
\}
execute#?#2:\{
    attributes.log(\"Using kjc compiler\", MSG_VERBOSE);
    Commandline cmd = setupKjcCommand();
    try \{
        Class c = Class.forName(\"at.dms.kjc.Main\");
        Method compile = c.getMethod(\"compile\", new Class[]\{ String[].class \});
        Boolean ok = ((Boolean) (compile.invoke(null, new Object[]\{ cmd.getArguments() \})));
        return ok.booleanValue();
    \} catch (ClassNotFoundException ex) \{
        throw new TaskException((\"Cannot use kjc compiler, as it is not available\" + \" A common solution is to set the environment variable\") + \" CLASSPATH to your kjc archive (kjc.jar).\");
    \} catch (Exception ex) \{
        if (ex instanceof TaskException) \{
            throw ((TaskException) (ex));
        \} else \{
            throw new TaskException(\"Error starting kjc compiler: \", ex);
        \}
    \}
\}" shape=ellipse]
3 [label="execute#?#2:public boolean execute() throws TaskException \{
    attributes.log(\"Using modern compiler\", MSG_VERBOSE);
    Commandline cmd = setupModernJavacCommand();
    try \{
        Class c = Class.forName(\"com.sun.tools.javac.Main\");
        Object compiler = c.newInstance();
        Method compile = c.getMethod(\"compile\", new Class[]\{ new String[]\{  \}.getClass() \});
        int result = ((Integer) (compile.invoke(compiler, new Object[]\{ cmd.getArguments() \}))).intValue();
        return result == MODERN_COMPILER_SUCCESS;
    \} catch (Exception ex) \{
        if (ex instanceof TaskException) \{
            throw ((TaskException) (ex));
        \} else \{
            throw new TaskException(\"Error starting modern compiler\", ex);
        \}
    \}
\}
execute#?#2:public boolean execute() throws TaskException \{
    attributes.log(\"Using kjc compiler\", MSG_VERBOSE);
    Commandline cmd = setupKjcCommand();
    try \{
        Class c = Class.forName(\"at.dms.kjc.Main\");
        Method compile = c.getMethod(\"compile\", new Class[]\{ String[].class \});
        Boolean ok = ((Boolean) (compile.invoke(null, new Object[]\{ cmd.getArguments() \})));
        return ok.booleanValue();
    \} catch (ClassNotFoundException ex) \{
        throw new TaskException((\"Cannot use kjc compiler, as it is not available\" + \" A common solution is to set the environment variable\") + \" CLASSPATH to your kjc archive (kjc.jar).\");
    \} catch (Exception ex) \{
        if (ex instanceof TaskException) \{
            throw ((TaskException) (ex));
        \} else \{
            throw new TaskException(\"Error starting kjc compiler: \", ex);
        \}
    \}
\}
execute#?#2:public boolean execute() throws TaskException \{
    attributes.log(\"Using external javac compiler\", MSG_VERBOSE);
    Commandline cmd = new Commandline();
    cmd.setExecutable(getJavac().getJavacExecutable());
    setupModernJavacCommandlineSwitches(cmd);
    int firstFileName = cmd.size();
    logAndAddFilesToCompile(cmd);
    return executeExternalCompile(cmd.getCommandline(), firstFileName) == 0;
\}
execute#?#2:public boolean execute() throws TaskException \{
    attributes.log(\"Using external javac compiler\", MSG_VERBOSE);
    Commandline cmd = new Commandline();
    cmd.setExecutable(getJavac().getJavacExecutable());
    setupModernJavacCommandlineSwitches(cmd);
    int firstFileName = cmd.size();
    logAndAddFilesToCompile(cmd);
    return executeExternalCompile(cmd.getCommandline(), firstFileName) == 0;
\}
execute#?#2:public boolean execute() throws TaskException \{
    attributes.log(\"Using modern compiler\", MSG_VERBOSE);
    Commandline cmd = setupModernJavacCommand();
    try \{
        Class c = Class.forName(\"com.sun.tools.javac.Main\");
        Object compiler = c.newInstance();
        Method compile = c.getMethod(\"compile\", new Class[]\{ new String[]\{  \}.getClass() \});
        int result = ((Integer) (compile.invoke(compiler, new Object[]\{ cmd.getArguments() \}))).intValue();
        return result == MODERN_COMPILER_SUCCESS;
    \} catch (Exception ex) \{
        if (ex instanceof TaskException) \{
            throw ((TaskException) (ex));
        \} else \{
            throw new TaskException(\"Error starting modern compiler\", ex);
        \}
    \}
\}
execute#?#2:public boolean execute() throws TaskException \{
    attributes.log(\"Using kjc compiler\", MSG_VERBOSE);
    Commandline cmd = setupKjcCommand();
    try \{
        Class c = Class.forName(\"at.dms.kjc.Main\");
        Method compile = c.getMethod(\"compile\", new Class[]\{ String[].class \});
        Boolean ok = ((Boolean) (compile.invoke(null, new Object[]\{ cmd.getArguments() \})));
        return ok.booleanValue();
    \} catch (ClassNotFoundException ex) \{
        throw new TaskException((\"Cannot use kjc compiler, as it is not available\" + \" A common solution is to set the environment variable\") + \" CLASSPATH to your kjc archive (kjc.jar).\");
    \} catch (Exception ex) \{
        if (ex instanceof TaskException) \{
            throw ((TaskException) (ex));
        \} else \{
            throw new TaskException(\"Error starting kjc compiler: \", ex);
        \}
    \}
\}" shape=ellipse]
4 [label="execute#?#4:Commandline cmd = setupModernJavacCommand()
execute#?#4:Commandline cmd = setupKjcCommand()
execute#?#4:Commandline cmd = new Commandline()
execute#?#4:Commandline cmd = new Commandline()
execute#?#4:Commandline cmd = setupModernJavacCommand()
execute#?#4:Commandline cmd = setupKjcCommand()" shape=ellipse]
5 [label="execute#?#5:try \{
    Class c = Class.forName(\"com.sun.tools.javac.Main\");
    Object compiler = c.newInstance();
    Method compile = c.getMethod(\"compile\", new Class[]\{ new String[]\{  \}.getClass() \});
    int result = ((Integer) (compile.invoke(compiler, new Object[]\{ cmd.getArguments() \}))).intValue();
    return result == MODERN_COMPILER_SUCCESS;
\} catch (Exception ex) \{
    if (ex instanceof TaskException) \{
        throw ((TaskException) (ex));
    \} else \{
        throw new TaskException(\"Error starting modern compiler\", ex);
    \}
\}
execute#?#5:try \{
    Class c = Class.forName(\"at.dms.kjc.Main\");
    Method compile = c.getMethod(\"compile\", new Class[]\{ String[].class \});
    Boolean ok = ((Boolean) (compile.invoke(null, new Object[]\{ cmd.getArguments() \})));
    return ok.booleanValue();
\} catch (ClassNotFoundException ex) \{
    throw new TaskException((\"Cannot use kjc compiler, as it is not available\" + \" A common solution is to set the environment variable\") + \" CLASSPATH to your kjc archive (kjc.jar).\");
\} catch (Exception ex) \{
    if (ex instanceof TaskException) \{
        throw ((TaskException) (ex));
    \} else \{
        throw new TaskException(\"Error starting kjc compiler: \", ex);
    \}
\}
execute#?#9:return executeExternalCompile(cmd.getCommandline(), firstFileName) == 0
execute#?#9:return executeExternalCompile(cmd.getCommandline(), firstFileName) == 0
execute#?#5:try \{
    Class c = Class.forName(\"com.sun.tools.javac.Main\");
    Object compiler = c.newInstance();
    Method compile = c.getMethod(\"compile\", new Class[]\{ new String[]\{  \}.getClass() \});
    int result = ((Integer) (compile.invoke(compiler, new Object[]\{ cmd.getArguments() \}))).intValue();
    return result == MODERN_COMPILER_SUCCESS;
\} catch (Exception ex) \{
    if (ex instanceof TaskException) \{
        throw ((TaskException) (ex));
    \} else \{
        throw new TaskException(\"Error starting modern compiler\", ex);
    \}
\}
execute#?#5:try \{
    Class c = Class.forName(\"at.dms.kjc.Main\");
    Method compile = c.getMethod(\"compile\", new Class[]\{ String[].class \});
    Boolean ok = ((Boolean) (compile.invoke(null, new Object[]\{ cmd.getArguments() \})));
    return ok.booleanValue();
\} catch (ClassNotFoundException ex) \{
    throw new TaskException((\"Cannot use kjc compiler, as it is not available\" + \" A common solution is to set the environment variable\") + \" CLASSPATH to your kjc archive (kjc.jar).\");
\} catch (Exception ex) \{
    if (ex instanceof TaskException) \{
        throw ((TaskException) (ex));
    \} else \{
        throw new TaskException(\"Error starting kjc compiler: \", ex);
    \}
\}" shape=ellipse]
6 [label="execute#?#3:log
execute#?#3:log
execute#?#3:log
execute#?#3:log
execute#?#3:log
execute#?#3:log" shape=ellipse]
7 [label="execute#?#3:attributes
execute#?#3:attributes
execute#?#3:attributes
execute#?#3:attributes
execute#?#3:attributes
execute#?#3:attributes" shape=ellipse]
8 [label="execute#?#-1:attributes
execute#?#-1:attributes
execute#?#-1:attributes
execute#?#-1:attributes
execute#?#-1:attributes
execute#?#-1:attributes" shape=ellipse]
9 [label="execute#?#3:log(java.lang.String)
execute#?#3:log(java.lang.String)
execute#?#3:log(java.lang.String)
execute#?#3:log(java.lang.String)
execute#?#3:log(java.lang.String)
execute#?#3:log(java.lang.String)" shape=ellipse]
10 [label="execute#?#-1:attributes
execute#?#-1:attributes
execute#?#-1:attributes
execute#?#-1:attributes
execute#?#-1:attributes
execute#?#-1:attributes" shape=ellipse]
11 [label="execute#?#-1:String
execute#?#-1:String
execute#?#-1:String
execute#?#-1:String
execute#?#-1:String
execute#?#-1:String" shape=ellipse]
12 [label="execute#?#3:\"Using modern compiler\"
execute#?#3:\"Using kjc compiler\"
execute#?#3:\"Using external javac compiler\"
execute#?#3:\"Using external javac compiler\"
execute#?#3:\"Using modern compiler\"
execute#?#3:\"Using kjc compiler\"" shape=ellipse]
13 [label="execute#?#-1:String
execute#?#-1:String
execute#?#-1:String
execute#?#-1:String
execute#?#-1:String
execute#?#-1:String" shape=ellipse]
14 [label="execute#?#3:MSG_VERBOSE
execute#?#3:MSG_VERBOSE
execute#?#3:MSG_VERBOSE
execute#?#3:MSG_VERBOSE
execute#?#3:MSG_VERBOSE
execute#?#3:MSG_VERBOSE" shape=ellipse]
15 [label="execute#?#-1:MSG_VERBOSE
execute#?#-1:MSG_VERBOSE
execute#?#-1:MSG_VERBOSE
execute#?#-1:MSG_VERBOSE
execute#?#-1:MSG_VERBOSE
execute#?#-1:MSG_VERBOSE" shape=ellipse]
16 [label="execute#?#3:getLogger().debug(\"Using modern compiler\")
execute#?#3:getLogger().debug(\"Using kjc compiler\")
execute#?#3:getLogger().debug(\"Using external javac compiler\")
execute#?#3:getLogger().debug(\"Using external javac compiler\")
execute#?#3:getLogger().debug(\"Using modern compiler\")
execute#?#3:getLogger().debug(\"Using kjc compiler\")" shape=ellipse]
17 [label="execute#?#5:cmd.setExecutable(getJavac().getJavacExecutable())" shape=ellipse]
18 [label="execute#?#7:int firstFileName = cmd.size()" shape=ellipse]
19 [label="execute#?#6:setupModernJavacCommandlineSwitches(cmd)" shape=ellipse]
20 [label="execute#?#8:logAndAddFilesToCompile(cmd)" shape=ellipse]
21 [label="execute#?#6:setupModernJavacCommandlineSwitches(cmd)" shape=ellipse]
22 [label="execute#?#8:logAndAddFilesToCompile(cmd)" shape=ellipse]
23 [label="execute#?#7:int firstFileName = cmd.size()" shape=ellipse]
24 [label="execute#?#5:cmd.setExecutable(getJavac().getJavacExecutable())" shape=ellipse]
0 -> 16 [label="Action:6"];
1 -> 0 [label="Action:6"];
1 -> 6 [label="AST:6"];
1 -> 7 [label="AST:6"];
1 -> 9 [label="AST:6"];
1 -> 12 [label="AST:6"];
1 -> 14 [label="AST:6"];
2 -> 1 [label="AST:6"];
2 -> 4 [label="AST:6"];
2 -> 5 [label="AST:6"];
2 -> 17 [label="AST:1"];
2 -> 18 [label="AST:1"];
2 -> 19 [label="AST:1"];
2 -> 20 [label="AST:1"];
2 -> 21 [label="AST:1"];
2 -> 22 [label="AST:1"];
2 -> 23 [label="AST:1"];
2 -> 24 [label="AST:1"];
3 -> 2 [label="AST:6"];
7 -> 8 [label="AST:6"];
9 -> 10 [label="AST:6"];
9 -> 11 [label="AST:6"];
12 -> 13 [label="AST:6"];
14 -> 15 [label="AST:6"];
}