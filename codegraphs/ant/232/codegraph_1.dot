digraph "addSuperClass#?,Class,Hashtable" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@addSuperClass" shape=ellipse]
2 [label="2:CtParameterImpl@Class superClass" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@Class" shape=ellipse]
4 [label="2:CtParameterImpl@Hashtable checkEntries" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@Hashtable" shape=ellipse]
6 [label="3:CtExecutableReferenceImpl@startsWith(java.lang.String)" shape=ellipse]
7 [label="3:CtVirtualElement@startsWith" shape=ellipse]
8 [label="3:CtExecutableReferenceImpl@getName()" shape=ellipse]
9 [label="3:CtVirtualElement@getName" shape=ellipse]
10 [label="3:CtVariableReadImpl@superClass" shape=ellipse]
11 [label="3:CtInvocationImpl@superClass.getName()" shape=ellipse]
12 [label="3:CtLiteralImpl@\"java\"" shape=ellipse]
13 [label="3:CtInvocationImpl@superClass.getName().startsWith(\"java\")" shape=ellipse]
14 [label="3:CtUnaryOperatorImpl@!superClass.getName().startsWith(\"java\")" shape=ellipse]
15 [label="4:CtTypeReferenceImpl@File" shape=ellipse]
16 [label="5:CtTypeReferenceImpl@File" shape=ellipse]
17 [label="6:CtExecutableReferenceImpl@getAbsolutePath()" shape=ellipse]
18 [label="6:CtVirtualElement@getAbsolutePath" shape=ellipse]
19 [label="6:CtFieldReadImpl@srcDir" shape=ellipse]
20 [label="6:CtInvocationImpl@srcDir.getAbsolutePath()" shape=ellipse]
21 [label="6:CtFieldReadImpl@File.separatorChar" shape=ellipse]
22 [label="6:CtBinaryOperatorImpl@(srcDir.getAbsolutePath() + File.separatorChar)" shape=ellipse]
23 [label="7:CtExecutableReferenceImpl@replace(char,char)" shape=ellipse]
24 [label="7:CtVirtualElement@replace" shape=ellipse]
25 [label="7:CtExecutableReferenceImpl@getName()" shape=ellipse]
26 [label="7:CtVirtualElement@getName" shape=ellipse]
27 [label="7:CtVariableReadImpl@superClass" shape=ellipse]
28 [label="7:CtInvocationImpl@superClass.getName()" shape=ellipse]
29 [label="7:CtLiteralImpl@'.'" shape=ellipse]
30 [label="7:CtTypeAccessImpl@separatorChar" shape=ellipse]
31 [label="7:CtInvocationImpl@superClass.getName().replace('.', separatorChar)" shape=ellipse]
32 [label="6:CtBinaryOperatorImpl@((srcDir.getAbsolutePath() + File.separatorChar) + superClass.getName().replace('.', separatorChar))" shape=ellipse]
33 [label="8:CtLiteralImpl@\".class\"" shape=ellipse]
34 [label="6:CtBinaryOperatorImpl@((srcDir.getAbsolutePath() + File.separatorChar) + superClass.getName().replace('.', separatorChar)) + \".class\"" shape=ellipse]
35 [label="5:CtConstructorCallImpl@new File(((srcDir.getAbsolutePath() + File.separatorChar) + superClass.getName().replace('.', separatorChar)) + \".class\")" shape=ellipse]
36 [label="4:CtVirtualElement@superClassFile" shape=ellipse]
37 [label="4:CtLocalVariableImpl@File superClassFile = new File(((srcDir.getAbsolutePath() + File.separatorChar) + superClass.getName().replace('.', separatorChar)) + \".class\")" shape=ellipse]
38 [label="9:CtExecutableReferenceImpl@exists()" shape=ellipse]
39 [label="9:CtVirtualElement@exists" shape=ellipse]
40 [label="9:CtVariableReadImpl@superClassFile" shape=ellipse]
41 [label="9:CtInvocationImpl@superClassFile.exists()" shape=ellipse]
42 [label="9:CtExecutableReferenceImpl@isFile()" shape=ellipse]
43 [label="9:CtVirtualElement@isFile" shape=ellipse]
44 [label="9:CtVariableReadImpl@superClassFile" shape=ellipse]
45 [label="9:CtInvocationImpl@superClassFile.isFile()" shape=ellipse]
46 [label="9:CtBinaryOperatorImpl@superClassFile.exists() && superClassFile.isFile()" shape=ellipse]
47 [label="10:CtExecutableReferenceImpl@put(File)" shape=ellipse]
48 [label="10:CtVirtualElement@put" shape=ellipse]
49 [label="10:CtVariableReadImpl@checkEntries" shape=ellipse]
50 [label="11:CtExecutableReferenceImpl@replace(char,char)" shape=ellipse]
51 [label="11:CtVirtualElement@replace" shape=ellipse]
52 [label="11:CtExecutableReferenceImpl@getName()" shape=ellipse]
53 [label="11:CtVirtualElement@getName" shape=ellipse]
54 [label="11:CtVariableReadImpl@superClass" shape=ellipse]
55 [label="11:CtInvocationImpl@superClass.getName()" shape=ellipse]
56 [label="11:CtLiteralImpl@'.'" shape=ellipse]
57 [label="11:CtTypeAccessImpl@separatorChar" shape=ellipse]
58 [label="11:CtInvocationImpl@superClass.getName().replace('.', separatorChar)" shape=ellipse]
59 [label="11:CtLiteralImpl@\".class\"" shape=ellipse]
60 [label="11:CtBinaryOperatorImpl@superClass.getName().replace('.', separatorChar) + \".class\"" shape=ellipse]
61 [label="11:CtVariableReadImpl@superClassFile" shape=ellipse]
62 [label="10:CtInvocationImpl@checkEntries.put(superClass.getName().replace('.', separatorChar) + \".class\", superClassFile)" shape=ellipse]
63 [label="12:CtVirtualElement@Class[]" shape=ellipse]
64 [label="12:CtArrayTypeReferenceImpl@Class[]" shape=ellipse]
65 [label="12:CtExecutableReferenceImpl@getInterfaces()" shape=ellipse]
66 [label="12:CtVirtualElement@getInterfaces" shape=ellipse]
67 [label="12:CtVariableReadImpl@superClass" shape=ellipse]
68 [label="12:CtInvocationImpl@superClass.getInterfaces()" shape=ellipse]
69 [label="12:CtVirtualElement@superInterfaces" shape=ellipse]
70 [label="12:CtLocalVariableImpl@Class[] superInterfaces = superClass.getInterfaces()" shape=ellipse]
71 [label="13:CtTypeReferenceImpl@int" shape=ellipse]
72 [label="13:CtLiteralImpl@0" shape=ellipse]
73 [label="13:CtVirtualElement@i" shape=ellipse]
74 [label="13:CtLocalVariableImpl@int i = 0" shape=ellipse]
75 [label="13:CtVariableReadImpl@i" shape=ellipse]
76 [label="13:CtVariableReadImpl@superInterfaces" shape=ellipse]
77 [label="13:CtLocalVariableReferenceImpl@superInterfaces" shape=ellipse]
78 [label="13:CtFieldReadImpl@superInterfaces.length" shape=ellipse]
79 [label="13:CtBinaryOperatorImpl@i < superInterfaces.length" shape=ellipse]
80 [label="13:CtVariableWriteImpl@i" shape=ellipse]
81 [label="13:CtUnaryOperatorImpl@i++" shape=ellipse]
82 [label="14:CtExecutableReferenceImpl@addInterface(java.lang.Class,<unknown>)" shape=ellipse]
83 [label="14:CtVirtualElement@addInterface" shape=ellipse]
84 [label="14:CtVariableReadImpl@superInterfaces" shape=ellipse]
85 [label="14:CtVariableReadImpl@i" shape=ellipse]
86 [label="14:CtArrayReadImpl@superInterfaces[i]" shape=ellipse]
87 [label="14:CtVariableReadImpl@checkEntries" shape=ellipse]
88 [label="14:CtInvocationImpl@addInterface(superInterfaces[i], checkEntries)" shape=ellipse]
89 [label="13:CtBlockImpl@\{
    addInterface(superInterfaces[i], checkEntries);
\}" shape=ellipse]
90 [label="13:CtForImpl@for (int i = 0; i < superInterfaces.length; i++) \{
    addInterface(superInterfaces[i], checkEntries);
\}" shape=ellipse]
91 [label="16:CtExecutableReferenceImpl@addSuperClass(java.lang.Class,Hashtable)" shape=ellipse]
92 [label="16:CtVirtualElement@addSuperClass" shape=ellipse]
93 [label="16:CtExecutableReferenceImpl@getSuperclass()" shape=ellipse]
94 [label="16:CtVirtualElement@getSuperclass" shape=ellipse]
95 [label="16:CtVariableReadImpl@superClass" shape=ellipse]
96 [label="16:CtInvocationImpl@superClass.getSuperclass()" shape=ellipse]
97 [label="16:CtVariableReadImpl@checkEntries" shape=ellipse]
98 [label="16:CtInvocationImpl@addSuperClass(superClass.getSuperclass(), checkEntries)" shape=ellipse]
99 [label="9:CtBlockImpl@\{
    checkEntries.put(superClass.getName().replace('.', separatorChar) + \".class\", superClassFile);
    Class[] superInterfaces = superClass.getInterfaces();
    for (int i = 0; i < superInterfaces.length; i++) \{
        addInterface(superInterfaces[i], checkEntries);
    \}
    addSuperClass(superClass.getSuperclass(), checkEntries);
\}" shape=ellipse]
100 [label="9:CtIfImpl@if (superClassFile.exists() && superClassFile.isFile()) \{
    checkEntries.put(superClass.getName().replace('.', separatorChar) + \".class\", superClassFile);
    Class[] superInterfaces = superClass.getInterfaces();
    for (int i = 0; i < superInterfaces.length; i++) \{
        addInterface(superInterfaces[i], checkEntries);
    \}
    addSuperClass(superClass.getSuperclass(), checkEntries);
\}" shape=ellipse]
101 [label="3:CtBlockImpl@\{
    File superClassFile = new File(((srcDir.getAbsolutePath() + File.separatorChar) + superClass.getName().replace('.', separatorChar)) + \".class\");
    if (superClassFile.exists() && superClassFile.isFile()) \{
        checkEntries.put(superClass.getName().replace('.', separatorChar) + \".class\", superClassFile);
        Class[] superInterfaces = superClass.getInterfaces();
        for (int i = 0; i < superInterfaces.length; i++) \{
            addInterface(superInterfaces[i], checkEntries);
        \}
        addSuperClass(superClass.getSuperclass(), checkEntries);
    \}
\}" shape=ellipse]
102 [label="3:CtIfImpl@if (!superClass.getName().startsWith(\"java\")) \{
    File superClassFile = new File(((srcDir.getAbsolutePath() + File.separatorChar) + superClass.getName().replace('.', separatorChar)) + \".class\");
    if (superClassFile.exists() && superClassFile.isFile()) \{
        checkEntries.put(superClass.getName().replace('.', separatorChar) + \".class\", superClassFile);
        Class[] superInterfaces = superClass.getInterfaces();
        for (int i = 0; i < superInterfaces.length; i++) \{
            addInterface(superInterfaces[i], checkEntries);
        \}
        addSuperClass(superClass.getSuperclass(), checkEntries);
    \}
\}" shape=ellipse]
103 [label="2:CtBlockImpl@\{
    if (!superClass.getName().startsWith(\"java\")) \{
        File superClassFile = new File(((srcDir.getAbsolutePath() + File.separatorChar) + superClass.getName().replace('.', separatorChar)) + \".class\");
        if (superClassFile.exists() && superClassFile.isFile()) \{
            checkEntries.put(superClass.getName().replace('.', separatorChar) + \".class\", superClassFile);
            Class[] superInterfaces = superClass.getInterfaces();
            for (int i = 0; i < superInterfaces.length; i++) \{
                addInterface(superInterfaces[i], checkEntries);
            \}
            addSuperClass(superClass.getSuperclass(), checkEntries);
        \}
    \}
\}" shape=ellipse]
104 [label="2:CtMethodImpl@private void addSuperClass(Class superClass, Hashtable checkEntries) \{
    if (!superClass.getName().startsWith(\"java\")) \{
        File superClassFile = new File(((srcDir.getAbsolutePath() + File.separatorChar) + superClass.getName().replace('.', separatorChar)) + \".class\");
        if (superClassFile.exists() && superClassFile.isFile()) \{
            checkEntries.put(superClass.getName().replace('.', separatorChar) + \".class\", superClassFile);
            Class[] superInterfaces = superClass.getInterfaces();
            for (int i = 0; i < superInterfaces.length; i++) \{
                addInterface(superInterfaces[i], checkEntries);
            \}
            addSuperClass(superClass.getSuperclass(), checkEntries);
        \}
    \}
\}" shape=ellipse]
105 [label="6:Delete@DELETE" shape=ellipse]
106 [label="6:Insert@INSERT" shape=ellipse]
107 [label="6:CtTypeAccessImpl@srcDir" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
11 -> 9 [label="AST"];
11 -> 10 [label="AST"];
11 -> 8 [label="AST"];
13 -> 7 [label="AST"];
13 -> 11 [label="AST"];
13 -> 6 [label="AST"];
13 -> 12 [label="AST"];
14 -> 13 [label="AST"];
14 -> 101 [label="Control Dep"];
14 -> 37 [label="Control Dep"];
14 -> 35 [label="Control Dep"];
14 -> 34 [label="Control Dep"];
14 -> 32 [label="Control Dep"];
14 -> 22 [label="Control Dep"];
14 -> 20 [label="Control Dep"];
14 -> 17 [label="Control Dep"];
14 -> 19 [label="Control Dep"];
14 -> 21 [label="Control Dep"];
14 -> 31 [label="Control Dep"];
14 -> 23 [label="Control Dep"];
14 -> 28 [label="Control Dep"];
14 -> 25 [label="Control Dep"];
14 -> 27 [label="Control Dep"];
14 -> 29 [label="Control Dep"];
14 -> 30 [label="Control Dep"];
14 -> 33 [label="Control Dep"];
14 -> 100 [label="Control Dep"];
14 -> 46 [label="Control Dep"];
14 -> 41 [label="Control Dep"];
14 -> 38 [label="Control Dep"];
14 -> 40 [label="Control Dep"];
14 -> 45 [label="Control Dep"];
14 -> 42 [label="Control Dep"];
14 -> 44 [label="Control Dep"];
19 -> 36 [label="Data Dep"];
19 -> 105 [label="Action"];
20 -> 18 [label="AST"];
20 -> 19 [label="AST"];
20 -> 17 [label="AST"];
20 -> 106 [label="Action"];
21 -> 36 [label="Data Dep"];
22 -> 20 [label="AST"];
22 -> 21 [label="AST"];
27 -> 36 [label="Data Dep"];
28 -> 26 [label="AST"];
28 -> 27 [label="AST"];
28 -> 25 [label="AST"];
31 -> 24 [label="AST"];
31 -> 28 [label="AST"];
31 -> 23 [label="AST"];
31 -> 29 [label="AST"];
31 -> 30 [label="AST"];
32 -> 22 [label="AST"];
32 -> 31 [label="AST"];
34 -> 32 [label="AST"];
34 -> 33 [label="AST"];
35 -> 34 [label="AST"];
36 -> 40 [label="Define-Use"];
36 -> 44 [label="Define-Use"];
36 -> 61 [label="Define-Use"];
37 -> 36 [label="AST"];
37 -> 15 [label="AST"];
37 -> 35 [label="AST"];
41 -> 39 [label="AST"];
41 -> 40 [label="AST"];
41 -> 38 [label="AST"];
45 -> 43 [label="AST"];
45 -> 44 [label="AST"];
45 -> 42 [label="AST"];
46 -> 41 [label="AST"];
46 -> 45 [label="AST"];
46 -> 99 [label="Control Dep"];
46 -> 62 [label="Control Dep"];
46 -> 47 [label="Control Dep"];
46 -> 49 [label="Control Dep"];
46 -> 60 [label="Control Dep"];
46 -> 58 [label="Control Dep"];
46 -> 50 [label="Control Dep"];
46 -> 55 [label="Control Dep"];
46 -> 52 [label="Control Dep"];
46 -> 54 [label="Control Dep"];
46 -> 56 [label="Control Dep"];
46 -> 57 [label="Control Dep"];
46 -> 59 [label="Control Dep"];
46 -> 61 [label="Control Dep"];
46 -> 70 [label="Control Dep"];
46 -> 64 [label="Control Dep"];
46 -> 68 [label="Control Dep"];
46 -> 65 [label="Control Dep"];
46 -> 67 [label="Control Dep"];
46 -> 90 [label="Control Dep"];
46 -> 74 [label="Control Dep"];
46 -> 72 [label="Control Dep"];
46 -> 79 [label="Control Dep"];
46 -> 75 [label="Control Dep"];
46 -> 78 [label="Control Dep"];
46 -> 76 [label="Control Dep"];
46 -> 81 [label="Control Dep"];
46 -> 80 [label="Control Dep"];
46 -> 98 [label="Control Dep"];
46 -> 91 [label="Control Dep"];
46 -> 96 [label="Control Dep"];
46 -> 93 [label="Control Dep"];
46 -> 95 [label="Control Dep"];
46 -> 97 [label="Control Dep"];
55 -> 53 [label="AST"];
55 -> 54 [label="AST"];
55 -> 52 [label="AST"];
58 -> 51 [label="AST"];
58 -> 55 [label="AST"];
58 -> 50 [label="AST"];
58 -> 56 [label="AST"];
58 -> 57 [label="AST"];
60 -> 58 [label="AST"];
60 -> 59 [label="AST"];
62 -> 48 [label="AST"];
62 -> 49 [label="AST"];
62 -> 47 [label="AST"];
62 -> 60 [label="AST"];
62 -> 61 [label="AST"];
64 -> 63 [label="AST"];
67 -> 69 [label="Data Dep"];
68 -> 66 [label="AST"];
68 -> 67 [label="AST"];
68 -> 65 [label="AST"];
69 -> 76 [label="Define-Use"];
69 -> 84 [label="Define-Use"];
69 -> 86 [label="Define-Use"];
70 -> 69 [label="AST"];
70 -> 64 [label="AST"];
70 -> 68 [label="AST"];
73 -> 75 [label="Define-Use"];
73 -> 85 [label="Define-Use"];
74 -> 73 [label="AST"];
74 -> 71 [label="AST"];
74 -> 72 [label="AST"];
76 -> 77 [label="AST"];
78 -> 76 [label="AST"];
79 -> 75 [label="AST"];
79 -> 78 [label="AST"];
79 -> 89 [label="Control Dep"];
79 -> 88 [label="Control Dep"];
79 -> 82 [label="Control Dep"];
79 -> 86 [label="Control Dep"];
79 -> 84 [label="Control Dep"];
79 -> 85 [label="Control Dep"];
79 -> 87 [label="Control Dep"];
80 -> 85 [label="Define-Use"];
81 -> 80 [label="AST"];
86 -> 84 [label="AST"];
86 -> 85 [label="AST"];
88 -> 83 [label="AST"];
88 -> 82 [label="AST"];
88 -> 86 [label="AST"];
88 -> 87 [label="AST"];
89 -> 88 [label="AST"];
90 -> 74 [label="AST"];
90 -> 79 [label="AST"];
90 -> 81 [label="AST"];
90 -> 89 [label="AST"];
96 -> 94 [label="AST"];
96 -> 95 [label="AST"];
96 -> 93 [label="AST"];
98 -> 92 [label="AST"];
98 -> 91 [label="AST"];
98 -> 96 [label="AST"];
98 -> 97 [label="AST"];
99 -> 62 [label="AST"];
99 -> 70 [label="AST"];
99 -> 90 [label="AST"];
99 -> 98 [label="AST"];
100 -> 46 [label="AST"];
100 -> 99 [label="AST"];
101 -> 37 [label="AST"];
101 -> 100 [label="AST"];
102 -> 14 [label="AST"];
102 -> 101 [label="AST"];
103 -> 102 [label="AST"];
104 -> 1 [label="AST"];
104 -> 0 [label="AST"];
104 -> 2 [label="AST"];
104 -> 4 [label="AST"];
104 -> 103 [label="AST"];
106 -> 107 [label="Action"];
}