digraph "setBaseDir#?,File" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@setBaseDir" shape=ellipse]
2 [label="2:CtParameterImpl@File baseDir" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@File" shape=ellipse]
4 [label="2:CtTypeReferenceImpl@BuildException" shape=ellipse]
5 [label="3:CtVariableWriteImpl@baseDir" shape=ellipse]
6 [label="3:CtExecutableReferenceImpl@normalize()" shape=ellipse]
7 [label="3:CtVirtualElement@normalize" shape=ellipse]
8 [label="3:CtFieldReadImpl@fileUtils" shape=ellipse]
9 [label="3:CtExecutableReferenceImpl@getAbsolutePath()" shape=ellipse]
10 [label="3:CtVirtualElement@getAbsolutePath" shape=ellipse]
11 [label="3:CtVariableReadImpl@baseDir" shape=ellipse]
12 [label="3:CtInvocationImpl@baseDir.getAbsolutePath()" shape=ellipse]
13 [label="3:CtInvocationImpl@fileUtils.normalize(baseDir.getAbsolutePath())" shape=ellipse]
14 [label="3:CtAssignmentImpl@baseDir = fileUtils.normalize(baseDir.getAbsolutePath())" shape=ellipse]
15 [label="4:CtExecutableReferenceImpl@exists()" shape=ellipse]
16 [label="4:CtVirtualElement@exists" shape=ellipse]
17 [label="4:CtVariableReadImpl@baseDir" shape=ellipse]
18 [label="4:CtInvocationImpl@baseDir.exists()" shape=ellipse]
19 [label="4:CtUnaryOperatorImpl@!baseDir.exists()" shape=ellipse]
20 [label="5:CtTypeReferenceImpl@BuildException" shape=ellipse]
21 [label="5:CtLiteralImpl@\"Basedir \"" shape=ellipse]
22 [label="5:CtExecutableReferenceImpl@getAbsolutePath()" shape=ellipse]
23 [label="5:CtVirtualElement@getAbsolutePath" shape=ellipse]
24 [label="5:CtVariableReadImpl@baseDir" shape=ellipse]
25 [label="5:CtInvocationImpl@baseDir.getAbsolutePath()" shape=ellipse]
26 [label="5:CtBinaryOperatorImpl@(\"Basedir \" + baseDir.getAbsolutePath())" shape=ellipse]
27 [label="5:CtLiteralImpl@\" does not exist\"" shape=ellipse]
28 [label="5:CtBinaryOperatorImpl@(\"Basedir \" + baseDir.getAbsolutePath()) + \" does not exist\"" shape=ellipse]
29 [label="5:CtConstructorCallImpl@new BuildException((\"Basedir \" + baseDir.getAbsolutePath()) + \" does not exist\")" shape=ellipse]
30 [label="5:CtThrowImpl@throw new BuildException((\"Basedir \" + baseDir.getAbsolutePath()) + \" does not exist\")" shape=ellipse]
31 [label="4:CtBlockImpl@\{
    throw new BuildException((\"Basedir \" + baseDir.getAbsolutePath()) + \" does not exist\");
\}" shape=ellipse]
32 [label="4:CtIfImpl@if (!baseDir.exists()) \{
    throw new BuildException((\"Basedir \" + baseDir.getAbsolutePath()) + \" does not exist\");
\}" shape=ellipse]
33 [label="7:CtExecutableReferenceImpl@isDirectory()" shape=ellipse]
34 [label="7:CtVirtualElement@isDirectory" shape=ellipse]
35 [label="7:CtVariableReadImpl@baseDir" shape=ellipse]
36 [label="7:CtInvocationImpl@baseDir.isDirectory()" shape=ellipse]
37 [label="7:CtUnaryOperatorImpl@!baseDir.isDirectory()" shape=ellipse]
38 [label="8:CtTypeReferenceImpl@BuildException" shape=ellipse]
39 [label="8:CtLiteralImpl@\"Basedir \"" shape=ellipse]
40 [label="8:CtExecutableReferenceImpl@getAbsolutePath()" shape=ellipse]
41 [label="8:CtVirtualElement@getAbsolutePath" shape=ellipse]
42 [label="8:CtVariableReadImpl@baseDir" shape=ellipse]
43 [label="8:CtInvocationImpl@baseDir.getAbsolutePath()" shape=ellipse]
44 [label="8:CtBinaryOperatorImpl@(\"Basedir \" + baseDir.getAbsolutePath())" shape=ellipse]
45 [label="8:CtLiteralImpl@\" is not a directory\"" shape=ellipse]
46 [label="8:CtBinaryOperatorImpl@(\"Basedir \" + baseDir.getAbsolutePath()) + \" is not a directory\"" shape=ellipse]
47 [label="8:CtConstructorCallImpl@new BuildException((\"Basedir \" + baseDir.getAbsolutePath()) + \" is not a directory\")" shape=ellipse]
48 [label="8:CtThrowImpl@throw new BuildException((\"Basedir \" + baseDir.getAbsolutePath()) + \" is not a directory\")" shape=ellipse]
49 [label="7:CtBlockImpl@\{
    throw new BuildException((\"Basedir \" + baseDir.getAbsolutePath()) + \" is not a directory\");
\}" shape=ellipse]
50 [label="7:CtIfImpl@if (!baseDir.isDirectory()) \{
    throw new BuildException((\"Basedir \" + baseDir.getAbsolutePath()) + \" is not a directory\");
\}" shape=ellipse]
51 [label="10:CtFieldWriteImpl@this.baseDir" shape=ellipse]
52 [label="10:CtThisAccessImpl@this" shape=ellipse]
53 [label="10:CtVariableReadImpl@baseDir" shape=ellipse]
54 [label="10:CtAssignmentImpl@this.baseDir = baseDir" shape=ellipse]
55 [label="11:CtExecutableReferenceImpl@setPropertyInternal(java.lang.String,<unknown>)" shape=ellipse]
56 [label="11:CtVirtualElement@setPropertyInternal" shape=ellipse]
57 [label="11:CtLiteralImpl@\"basedir\"" shape=ellipse]
58 [label="11:CtExecutableReferenceImpl@getPath()" shape=ellipse]
59 [label="11:CtVirtualElement@getPath" shape=ellipse]
60 [label="11:CtThisAccessImpl@this" shape=ellipse]
61 [label="11:CtFieldReadImpl@this.baseDir" shape=ellipse]
62 [label="11:CtInvocationImpl@this.baseDir.getPath()" shape=ellipse]
63 [label="11:CtInvocationImpl@setPropertyInternal(\"basedir\", this.baseDir.getPath())" shape=ellipse]
64 [label="12:CtTypeReferenceImpl@String" shape=ellipse]
65 [label="12:CtLiteralImpl@\"Project base dir set to: \"" shape=ellipse]
66 [label="12:CtThisAccessImpl@this" shape=ellipse]
67 [label="12:CtFieldReadImpl@this.baseDir" shape=ellipse]
68 [label="12:CtBinaryOperatorImpl@\"Project base dir set to: \" + this.baseDir" shape=ellipse]
69 [label="12:CtVirtualElement@msg" shape=ellipse]
70 [label="12:CtLocalVariableImpl@String msg = \"Project base dir set to: \" + this.baseDir" shape=ellipse]
71 [label="13:CtExecutableReferenceImpl@log(java.lang.String,<unknown>)" shape=ellipse]
72 [label="13:CtVirtualElement@log" shape=ellipse]
73 [label="13:CtVariableReadImpl@msg" shape=ellipse]
74 [label="13:CtTypeAccessImpl@MSG_VERBOSE" shape=ellipse]
75 [label="13:CtInvocationImpl@log(msg, MSG_VERBOSE)" shape=ellipse]
76 [label="2:CtBlockImpl@\{
    baseDir = fileUtils.normalize(baseDir.getAbsolutePath());
    if (!baseDir.exists()) \{
        throw new BuildException((\"Basedir \" + baseDir.getAbsolutePath()) + \" does not exist\");
    \}
    if (!baseDir.isDirectory()) \{
        throw new BuildException((\"Basedir \" + baseDir.getAbsolutePath()) + \" is not a directory\");
    \}
    this.baseDir = baseDir;
    setPropertyInternal(\"basedir\", this.baseDir.getPath());
    String msg = \"Project base dir set to: \" + this.baseDir;
    log(msg, MSG_VERBOSE);
\}" shape=ellipse]
77 [label="2:CtMethodImpl@public void setBaseDir(File baseDir) throws BuildException \{
    baseDir = fileUtils.normalize(baseDir.getAbsolutePath());
    if (!baseDir.exists()) \{
        throw new BuildException((\"Basedir \" + baseDir.getAbsolutePath()) + \" does not exist\");
    \}
    if (!baseDir.isDirectory()) \{
        throw new BuildException((\"Basedir \" + baseDir.getAbsolutePath()) + \" is not a directory\");
    \}
    this.baseDir = baseDir;
    setPropertyInternal(\"basedir\", this.baseDir.getPath());
    String msg = \"Project base dir set to: \" + this.baseDir;
    log(msg, MSG_VERBOSE);
\}" shape=ellipse]
78 [label="3:Delete@DELETE" shape=ellipse]
79 [label="3:Insert@INSERT" shape=ellipse]
80 [label="3:CtTypeAccessImpl@FILE_UTILS" shape=ellipse]
2 -> 3 [label="AST"];
5 -> 17 [label="Define-Use"];
5 -> 24 [label="Define-Use"];
5 -> 35 [label="Define-Use"];
5 -> 42 [label="Define-Use"];
8 -> 5 [label="Data Dep"];
8 -> 78 [label="Action"];
11 -> 5 [label="Data Dep"];
12 -> 10 [label="AST"];
12 -> 11 [label="AST"];
12 -> 9 [label="AST"];
13 -> 7 [label="AST"];
13 -> 8 [label="AST"];
13 -> 6 [label="AST"];
13 -> 12 [label="AST"];
13 -> 79 [label="Action"];
14 -> 5 [label="AST"];
14 -> 13 [label="AST"];
18 -> 16 [label="AST"];
18 -> 17 [label="AST"];
18 -> 15 [label="AST"];
19 -> 18 [label="AST"];
19 -> 31 [label="Control Dep"];
19 -> 30 [label="Control Dep"];
19 -> 29 [label="Control Dep"];
19 -> 28 [label="Control Dep"];
19 -> 26 [label="Control Dep"];
19 -> 21 [label="Control Dep"];
19 -> 25 [label="Control Dep"];
19 -> 22 [label="Control Dep"];
19 -> 24 [label="Control Dep"];
19 -> 27 [label="Control Dep"];
25 -> 23 [label="AST"];
25 -> 24 [label="AST"];
25 -> 22 [label="AST"];
26 -> 21 [label="AST"];
26 -> 25 [label="AST"];
28 -> 26 [label="AST"];
28 -> 27 [label="AST"];
29 -> 28 [label="AST"];
30 -> 29 [label="AST"];
31 -> 30 [label="AST"];
32 -> 19 [label="AST"];
32 -> 31 [label="AST"];
36 -> 34 [label="AST"];
36 -> 35 [label="AST"];
36 -> 33 [label="AST"];
37 -> 36 [label="AST"];
37 -> 49 [label="Control Dep"];
37 -> 48 [label="Control Dep"];
37 -> 47 [label="Control Dep"];
37 -> 46 [label="Control Dep"];
37 -> 44 [label="Control Dep"];
37 -> 39 [label="Control Dep"];
37 -> 43 [label="Control Dep"];
37 -> 40 [label="Control Dep"];
37 -> 42 [label="Control Dep"];
37 -> 45 [label="Control Dep"];
43 -> 41 [label="AST"];
43 -> 42 [label="AST"];
43 -> 40 [label="AST"];
44 -> 39 [label="AST"];
44 -> 43 [label="AST"];
46 -> 44 [label="AST"];
46 -> 45 [label="AST"];
47 -> 46 [label="AST"];
48 -> 47 [label="AST"];
49 -> 48 [label="AST"];
50 -> 37 [label="AST"];
50 -> 49 [label="AST"];
51 -> 52 [label="AST"];
53 -> 51 [label="Data Dep"];
54 -> 51 [label="AST"];
54 -> 53 [label="AST"];
61 -> 60 [label="AST"];
62 -> 59 [label="AST"];
62 -> 61 [label="AST"];
62 -> 58 [label="AST"];
63 -> 56 [label="AST"];
63 -> 55 [label="AST"];
63 -> 57 [label="AST"];
63 -> 62 [label="AST"];
67 -> 66 [label="AST"];
67 -> 69 [label="Data Dep"];
68 -> 65 [label="AST"];
68 -> 67 [label="AST"];
69 -> 73 [label="Define-Use"];
70 -> 69 [label="AST"];
70 -> 64 [label="AST"];
70 -> 68 [label="AST"];
75 -> 72 [label="AST"];
75 -> 71 [label="AST"];
75 -> 73 [label="AST"];
75 -> 74 [label="AST"];
76 -> 14 [label="AST"];
76 -> 32 [label="AST"];
76 -> 50 [label="AST"];
76 -> 54 [label="AST"];
76 -> 63 [label="AST"];
76 -> 70 [label="AST"];
76 -> 75 [label="AST"];
77 -> 1 [label="AST"];
77 -> 0 [label="AST"];
77 -> 2 [label="AST"];
77 -> 4 [label="AST"];
77 -> 76 [label="AST"];
79 -> 80 [label="Action"];
}