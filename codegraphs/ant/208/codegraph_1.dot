digraph "testGZip#?" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@testGZip" shape=ellipse]
2 [label="3:CtExecutableReferenceImpl@executeTarget(java.lang.String)" shape=ellipse]
3 [label="3:CtVirtualElement@executeTarget" shape=ellipse]
4 [label="3:CtLiteralImpl@\"realTest\"" shape=ellipse]
5 [label="3:CtInvocationImpl@executeTarget(\"realTest\")" shape=ellipse]
6 [label="4:CtTypeReferenceImpl@String" shape=ellipse]
7 [label="4:CtExecutableReferenceImpl@getLog()" shape=ellipse]
8 [label="4:CtVirtualElement@getLog" shape=ellipse]
9 [label="4:CtInvocationImpl@getLog()" shape=ellipse]
10 [label="4:CtVirtualElement@log" shape=ellipse]
11 [label="4:CtLocalVariableImpl@String log = getLog()" shape=ellipse]
12 [label="5:CtExecutableReferenceImpl@assertTrue(java.lang.String,boolean)" shape=ellipse]
13 [label="5:CtVirtualElement@assertTrue" shape=ellipse]
14 [label="6:CtLiteralImpl@\"Expecting message starting with 'Building:' but got '\"" shape=ellipse]
15 [label="6:CtVariableReadImpl@log" shape=ellipse]
16 [label="6:CtBinaryOperatorImpl@(\"Expecting message starting with 'Building:' but got '\" + log)" shape=ellipse]
17 [label="6:CtLiteralImpl@\"'\"" shape=ellipse]
18 [label="6:CtBinaryOperatorImpl@(\"Expecting message starting with 'Building:' but got '\" + log) + \"'\"" shape=ellipse]
19 [label="7:CtExecutableReferenceImpl@startsWith(java.lang.String)" shape=ellipse]
20 [label="7:CtVirtualElement@startsWith" shape=ellipse]
21 [label="7:CtVariableReadImpl@log" shape=ellipse]
22 [label="7:CtLiteralImpl@\"Building:\"" shape=ellipse]
23 [label="7:CtInvocationImpl@log.startsWith(\"Building:\")" shape=ellipse]
24 [label="5:CtInvocationImpl@assertTrue((\"Expecting message starting with 'Building:' but got '\" + log) + \"'\", log.startsWith(\"Building:\"))" shape=ellipse]
25 [label="8:CtExecutableReferenceImpl@assertTrue(java.lang.String,boolean)" shape=ellipse]
26 [label="8:CtVirtualElement@assertTrue" shape=ellipse]
27 [label="9:CtLiteralImpl@\"Expecting message ending with 'asf-logo.gif.gz' but got '\"" shape=ellipse]
28 [label="9:CtVariableReadImpl@log" shape=ellipse]
29 [label="9:CtBinaryOperatorImpl@(\"Expecting message ending with 'asf-logo.gif.gz' but got '\" + log)" shape=ellipse]
30 [label="9:CtLiteralImpl@\"'\"" shape=ellipse]
31 [label="9:CtBinaryOperatorImpl@(\"Expecting message ending with 'asf-logo.gif.gz' but got '\" + log) + \"'\"" shape=ellipse]
32 [label="10:CtExecutableReferenceImpl@endsWith(java.lang.String)" shape=ellipse]
33 [label="10:CtVirtualElement@endsWith" shape=ellipse]
34 [label="10:CtVariableReadImpl@log" shape=ellipse]
35 [label="10:CtLiteralImpl@\"asf-logo.gif.gz\"" shape=ellipse]
36 [label="10:CtInvocationImpl@log.endsWith(\"asf-logo.gif.gz\")" shape=ellipse]
37 [label="8:CtInvocationImpl@assertTrue((\"Expecting message ending with 'asf-logo.gif.gz' but got '\" + log) + \"'\", log.endsWith(\"asf-logo.gif.gz\"))" shape=ellipse]
38 [label="2:CtBlockImpl@\{
    executeTarget(\"realTest\");
    String log = getLog();
    assertTrue((\"Expecting message starting with 'Building:' but got '\" + log) + \"'\", log.startsWith(\"Building:\"));
    assertTrue((\"Expecting message ending with 'asf-logo.gif.gz' but got '\" + log) + \"'\", log.endsWith(\"asf-logo.gif.gz\"));
\}" shape=ellipse]
39 [label="2:CtMethodImpl@public void testGZip() \{
    executeTarget(\"realTest\");
    String log = getLog();
    assertTrue((\"Expecting message starting with 'Building:' but got '\" + log) + \"'\", log.startsWith(\"Building:\"));
    assertTrue((\"Expecting message ending with 'asf-logo.gif.gz' but got '\" + log) + \"'\", log.endsWith(\"asf-logo.gif.gz\"));
\}" shape=ellipse]
40 [label="2:Insert@INSERT" shape=ellipse]
41 [label="2:CtAnnotationImpl@@Test" shape=ellipse]
42 [label="4:Insert@INSERT" shape=ellipse]
43 [label="4:CtFieldReadImpl@buildRule" shape=ellipse]
44 [label="5:Insert@INSERT" shape=ellipse]
45 [label="5:CtFieldReadImpl@buildRule" shape=ellipse]
5 -> 3 [label="AST"];
5 -> 2 [label="AST"];
5 -> 4 [label="AST"];
5 -> 42 [label="Action"];
9 -> 8 [label="AST"];
9 -> 7 [label="AST"];
9 -> 44 [label="Action"];
10 -> 15 [label="Define-Use"];
10 -> 21 [label="Define-Use"];
10 -> 28 [label="Define-Use"];
10 -> 34 [label="Define-Use"];
11 -> 10 [label="AST"];
11 -> 6 [label="AST"];
11 -> 9 [label="AST"];
16 -> 14 [label="AST"];
16 -> 15 [label="AST"];
18 -> 16 [label="AST"];
18 -> 17 [label="AST"];
23 -> 20 [label="AST"];
23 -> 21 [label="AST"];
23 -> 19 [label="AST"];
23 -> 22 [label="AST"];
24 -> 13 [label="AST"];
24 -> 12 [label="AST"];
24 -> 18 [label="AST"];
24 -> 23 [label="AST"];
29 -> 27 [label="AST"];
29 -> 28 [label="AST"];
31 -> 29 [label="AST"];
31 -> 30 [label="AST"];
36 -> 33 [label="AST"];
36 -> 34 [label="AST"];
36 -> 32 [label="AST"];
36 -> 35 [label="AST"];
37 -> 26 [label="AST"];
37 -> 25 [label="AST"];
37 -> 31 [label="AST"];
37 -> 36 [label="AST"];
38 -> 5 [label="AST"];
38 -> 11 [label="AST"];
38 -> 24 [label="AST"];
38 -> 37 [label="AST"];
39 -> 1 [label="AST"];
39 -> 0 [label="AST"];
39 -> 38 [label="AST"];
39 -> 40 [label="Action"];
40 -> 41 [label="Action"];
42 -> 43 [label="Action"];
44 -> 45 [label="Action"];
}