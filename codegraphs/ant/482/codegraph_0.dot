digraph "processFile#?,File" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@processFile" shape=ellipse]
2 [label="2:CtParameterImpl@File src" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@File" shape=ellipse]
4 [label="2:CtTypeReferenceImpl@BuildException" shape=ellipse]
5 [label="3:CtExecutableReferenceImpl@exists()" shape=ellipse]
6 [label="3:CtVirtualElement@exists" shape=ellipse]
7 [label="3:CtVariableReadImpl@src" shape=ellipse]
8 [label="3:CtInvocationImpl@src.exists()" shape=ellipse]
9 [label="3:CtUnaryOperatorImpl@!src.exists()" shape=ellipse]
10 [label="4:CtTypeReferenceImpl@BuildException" shape=ellipse]
11 [label="5:CtLiteralImpl@\"Replace: source file \"" shape=ellipse]
12 [label="5:CtExecutableReferenceImpl@getPath()" shape=ellipse]
13 [label="5:CtVirtualElement@getPath" shape=ellipse]
14 [label="5:CtVariableReadImpl@src" shape=ellipse]
15 [label="5:CtInvocationImpl@src.getPath()" shape=ellipse]
16 [label="5:CtBinaryOperatorImpl@(\"Replace: source file \" + src.getPath())" shape=ellipse]
17 [label="5:CtLiteralImpl@\" doesn't exist\"" shape=ellipse]
18 [label="5:CtBinaryOperatorImpl@(\"Replace: source file \" + src.getPath()) + \" doesn't exist\"" shape=ellipse]
19 [label="5:CtFieldReadImpl@location" shape=ellipse]
20 [label="4:CtConstructorCallImpl@new BuildException((\"Replace: source file \" + src.getPath()) + \" doesn't exist\", location)" shape=ellipse]
21 [label="4:CtThrowImpl@throw new BuildException((\"Replace: source file \" + src.getPath()) + \" doesn't exist\", location)" shape=ellipse]
22 [label="3:CtBlockImpl@\{
    throw new BuildException((\"Replace: source file \" + src.getPath()) + \" doesn't exist\", location);
\}" shape=ellipse]
23 [label="3:CtIfImpl@if (!src.exists()) \{
    throw new BuildException((\"Replace: source file \" + src.getPath()) + \" doesn't exist\", location);
\}" shape=ellipse]
24 [label="7:CtTypeReferenceImpl@File" shape=ellipse]
25 [label="7:CtTypeReferenceImpl@File" shape=ellipse]
26 [label="7:CtExecutableReferenceImpl@getPath()" shape=ellipse]
27 [label="7:CtVirtualElement@getPath" shape=ellipse]
28 [label="7:CtVariableReadImpl@src" shape=ellipse]
29 [label="7:CtInvocationImpl@src.getPath()" shape=ellipse]
30 [label="7:CtLiteralImpl@\".temp\"" shape=ellipse]
31 [label="7:CtBinaryOperatorImpl@src.getPath() + \".temp\"" shape=ellipse]
32 [label="7:CtConstructorCallImpl@new File(src.getPath() + \".temp\")" shape=ellipse]
33 [label="7:CtVirtualElement@temp" shape=ellipse]
34 [label="7:CtLocalVariableImpl@File temp = new File(src.getPath() + \".temp\")" shape=ellipse]
35 [label="8:CtExecutableReferenceImpl@exists()" shape=ellipse]
36 [label="8:CtVirtualElement@exists" shape=ellipse]
37 [label="8:CtVariableReadImpl@temp" shape=ellipse]
38 [label="8:CtInvocationImpl@temp.exists()" shape=ellipse]
39 [label="9:CtTypeReferenceImpl@BuildException" shape=ellipse]
40 [label="10:CtLiteralImpl@\"Replace: temporary file \"" shape=ellipse]
41 [label="10:CtExecutableReferenceImpl@getPath()" shape=ellipse]
42 [label="10:CtVirtualElement@getPath" shape=ellipse]
43 [label="10:CtVariableReadImpl@temp" shape=ellipse]
44 [label="10:CtInvocationImpl@temp.getPath()" shape=ellipse]
45 [label="10:CtBinaryOperatorImpl@(\"Replace: temporary file \" + temp.getPath())" shape=ellipse]
46 [label="10:CtLiteralImpl@\" already exists\"" shape=ellipse]
47 [label="10:CtBinaryOperatorImpl@(\"Replace: temporary file \" + temp.getPath()) + \" already exists\"" shape=ellipse]
48 [label="10:CtFieldReadImpl@location" shape=ellipse]
49 [label="9:CtConstructorCallImpl@new BuildException((\"Replace: temporary file \" + temp.getPath()) + \" already exists\", location)" shape=ellipse]
50 [label="9:CtThrowImpl@throw new BuildException((\"Replace: temporary file \" + temp.getPath()) + \" already exists\", location)" shape=ellipse]
51 [label="8:CtBlockImpl@\{
    throw new BuildException((\"Replace: temporary file \" + temp.getPath()) + \" already exists\", location);
\}" shape=ellipse]
52 [label="8:CtIfImpl@if (temp.exists()) \{
    throw new BuildException((\"Replace: temporary file \" + temp.getPath()) + \" already exists\", location);
\}" shape=ellipse]
53 [label="13:CtTypeReferenceImpl@BufferedReader" shape=ellipse]
54 [label="13:CtTypeReferenceImpl@BufferedReader" shape=ellipse]
55 [label="13:CtTypeReferenceImpl@FileReader" shape=ellipse]
56 [label="13:CtVariableReadImpl@src" shape=ellipse]
57 [label="13:CtConstructorCallImpl@new FileReader(src)" shape=ellipse]
58 [label="13:CtConstructorCallImpl@new BufferedReader(new FileReader(src))" shape=ellipse]
59 [label="13:CtVirtualElement@br" shape=ellipse]
60 [label="13:CtLocalVariableImpl@BufferedReader br = new BufferedReader(new FileReader(src))" shape=ellipse]
61 [label="14:CtTypeReferenceImpl@BufferedWriter" shape=ellipse]
62 [label="14:CtTypeReferenceImpl@BufferedWriter" shape=ellipse]
63 [label="14:CtTypeReferenceImpl@FileWriter" shape=ellipse]
64 [label="14:CtVariableReadImpl@temp" shape=ellipse]
65 [label="14:CtConstructorCallImpl@new FileWriter(temp)" shape=ellipse]
66 [label="14:CtConstructorCallImpl@new BufferedWriter(new FileWriter(temp))" shape=ellipse]
67 [label="14:CtVirtualElement@bw" shape=ellipse]
68 [label="14:CtLocalVariableImpl@BufferedWriter bw = new BufferedWriter(new FileWriter(temp))" shape=ellipse]
69 [label="15:CtTypeReferenceImpl@int" shape=ellipse]
70 [label="15:CtExecutableReferenceImpl@length()" shape=ellipse]
71 [label="15:CtVirtualElement@length" shape=ellipse]
72 [label="15:CtVariableReadImpl@src" shape=ellipse]
73 [label="15:CtInvocationImpl@((int) (src.length()))" shape=ellipse]
74 [label="15:CtTypeReferenceImpl@int" shape=ellipse]
75 [label="15:CtVirtualElement@fileLengthInBytes" shape=ellipse]
76 [label="15:CtLocalVariableImpl@int fileLengthInBytes = ((int) (src.length()))" shape=ellipse]
77 [label="16:CtTypeReferenceImpl@StringBuffer" shape=ellipse]
78 [label="16:CtTypeReferenceImpl@StringBuffer" shape=ellipse]
79 [label="16:CtVariableReadImpl@fileLengthInBytes" shape=ellipse]
80 [label="16:CtConstructorCallImpl@new StringBuffer(fileLengthInBytes)" shape=ellipse]
81 [label="16:CtVirtualElement@tmpBuf" shape=ellipse]
82 [label="16:CtLocalVariableImpl@StringBuffer tmpBuf = new StringBuffer(fileLengthInBytes)" shape=ellipse]
83 [label="17:CtTypeReferenceImpl@int" shape=ellipse]
84 [label="17:CtLiteralImpl@0" shape=ellipse]
85 [label="17:CtVirtualElement@readChar" shape=ellipse]
86 [label="17:CtLocalVariableImpl@int readChar = 0" shape=ellipse]
87 [label="18:CtTypeReferenceImpl@int" shape=ellipse]
88 [label="18:CtLiteralImpl@0" shape=ellipse]
89 [label="18:CtVirtualElement@totread" shape=ellipse]
90 [label="18:CtLocalVariableImpl@int totread = 0" shape=ellipse]
91 [label="19:CtLiteralImpl@true" shape=ellipse]
92 [label="20:CtVariableWriteImpl@readChar" shape=ellipse]
93 [label="20:CtExecutableReferenceImpl@read()" shape=ellipse]
94 [label="20:CtVirtualElement@read" shape=ellipse]
95 [label="20:CtVariableReadImpl@br" shape=ellipse]
96 [label="20:CtInvocationImpl@br.read()" shape=ellipse]
97 [label="20:CtAssignmentImpl@readChar = br.read()" shape=ellipse]
98 [label="21:CtVariableReadImpl@readChar" shape=ellipse]
99 [label="21:CtLiteralImpl@0" shape=ellipse]
100 [label="21:CtBinaryOperatorImpl@readChar < 0" shape=ellipse]
101 [label="22:CtBreakImpl@break" shape=ellipse]
102 [label="21:CtBlockImpl@\{
    break;
\}" shape=ellipse]
103 [label="21:CtIfImpl@if (readChar < 0) \{
    break;
\}" shape=ellipse]
104 [label="24:CtExecutableReferenceImpl@append(char)" shape=ellipse]
105 [label="24:CtVirtualElement@append" shape=ellipse]
106 [label="24:CtVariableReadImpl@tmpBuf" shape=ellipse]
107 [label="24:CtVariableReadImpl@((char) (readChar))" shape=ellipse]
108 [label="24:CtTypeReferenceImpl@char" shape=ellipse]
109 [label="24:CtInvocationImpl@tmpBuf.append(((char) (readChar)))" shape=ellipse]
110 [label="25:CtVariableWriteImpl@totread" shape=ellipse]
111 [label="25:CtUnaryOperatorImpl@totread++" shape=ellipse]
112 [label="19:CtBlockImpl@\{
    readChar = br.read();
    if (readChar < 0) \{
        break;
    \}
    tmpBuf.append(((char) (readChar)));
    totread++;
\}" shape=ellipse]
113 [label="19:CtWhileImpl@while (true) \{
    readChar = br.read();
    if (readChar < 0) \{
        break;
    \}
    tmpBuf.append(((char) (readChar)));
    totread++;
\} " shape=ellipse]
114 [label="27:CtTypeReferenceImpl@String" shape=ellipse]
115 [label="27:CtExecutableReferenceImpl@toString()" shape=ellipse]
116 [label="27:CtVirtualElement@toString" shape=ellipse]
117 [label="27:CtVariableReadImpl@tmpBuf" shape=ellipse]
118 [label="27:CtInvocationImpl@tmpBuf.toString()" shape=ellipse]
119 [label="27:CtVirtualElement@buf" shape=ellipse]
120 [label="27:CtLocalVariableImpl@String buf = tmpBuf.toString()" shape=ellipse]
121 [label="28:CtTypeReferenceImpl@String" shape=ellipse]
122 [label="28:CtTypeReferenceImpl@String" shape=ellipse]
123 [label="28:CtVariableReadImpl@buf" shape=ellipse]
124 [label="28:CtConstructorCallImpl@new String(buf)" shape=ellipse]
125 [label="28:CtVirtualElement@newString" shape=ellipse]
126 [label="28:CtLocalVariableImpl@String newString = new String(buf)" shape=ellipse]
127 [label="29:CtFieldReadImpl@token" shape=ellipse]
128 [label="29:CtLiteralImpl@null" shape=ellipse]
129 [label="29:CtBinaryOperatorImpl@token != null" shape=ellipse]
130 [label="30:CtTypeReferenceImpl@String" shape=ellipse]
131 [label="30:CtExecutableReferenceImpl@getProperty(java.lang.String)" shape=ellipse]
132 [label="30:CtVirtualElement@getProperty" shape=ellipse]
133 [label="30:CtTypeAccessImpl@System" shape=ellipse]
134 [label="30:CtLiteralImpl@\"line.separator\"" shape=ellipse]
135 [label="30:CtInvocationImpl@System.getProperty(\"line.separator\")" shape=ellipse]
136 [label="30:CtVirtualElement@linesep" shape=ellipse]
137 [label="30:CtLocalVariableImpl@String linesep = System.getProperty(\"line.separator\")" shape=ellipse]
138 [label="31:CtTypeReferenceImpl@String" shape=ellipse]
139 [label="31:CtExecutableReferenceImpl@stringReplace(<unknown>,java.lang.String,java.lang.String)" shape=ellipse]
140 [label="31:CtVirtualElement@stringReplace" shape=ellipse]
141 [label="31:CtExecutableReferenceImpl@getText()" shape=ellipse]
142 [label="31:CtVirtualElement@getText" shape=ellipse]
143 [label="31:CtFieldReadImpl@value" shape=ellipse]
144 [label="31:CtInvocationImpl@value.getText()" shape=ellipse]
145 [label="31:CtLiteralImpl@\"\n\"" shape=ellipse]
146 [label="31:CtVariableReadImpl@linesep" shape=ellipse]
147 [label="31:CtInvocationImpl@stringReplace(value.getText(), \"\n\", linesep)" shape=ellipse]
148 [label="31:CtVirtualElement@val" shape=ellipse]
149 [label="31:CtLocalVariableImpl@String val = stringReplace(value.getText(), \"\n\", linesep)" shape=ellipse]
150 [label="32:CtTypeReferenceImpl@String" shape=ellipse]
151 [label="32:CtExecutableReferenceImpl@stringReplace(<unknown>,java.lang.String,java.lang.String)" shape=ellipse]
152 [label="32:CtVirtualElement@stringReplace" shape=ellipse]
153 [label="32:CtExecutableReferenceImpl@getText()" shape=ellipse]
154 [label="32:CtVirtualElement@getText" shape=ellipse]
155 [label="32:CtFieldReadImpl@token" shape=ellipse]
156 [label="32:CtInvocationImpl@token.getText()" shape=ellipse]
157 [label="32:CtLiteralImpl@\"\n\"" shape=ellipse]
158 [label="32:CtVariableReadImpl@linesep" shape=ellipse]
159 [label="32:CtInvocationImpl@stringReplace(token.getText(), \"\n\", linesep)" shape=ellipse]
160 [label="32:CtVirtualElement@tok" shape=ellipse]
161 [label="32:CtLocalVariableImpl@String tok = stringReplace(token.getText(), \"\n\", linesep)" shape=ellipse]
162 [label="33:CtExecutableReferenceImpl@log(<unknown>,<unknown>)" shape=ellipse]
163 [label="33:CtVirtualElement@log" shape=ellipse]
164 [label="34:CtLiteralImpl@\"Replacing in \"" shape=ellipse]
165 [label="34:CtExecutableReferenceImpl@getPath()" shape=ellipse]
166 [label="34:CtVirtualElement@getPath" shape=ellipse]
167 [label="34:CtVariableReadImpl@src" shape=ellipse]
168 [label="34:CtInvocationImpl@src.getPath()" shape=ellipse]
169 [label="34:CtBinaryOperatorImpl@(\"Replacing in \" + src.getPath())" shape=ellipse]
170 [label="34:CtLiteralImpl@\": \"" shape=ellipse]
171 [label="34:CtBinaryOperatorImpl@((\"Replacing in \" + src.getPath()) + \": \")" shape=ellipse]
172 [label="34:CtExecutableReferenceImpl@getText()" shape=ellipse]
173 [label="34:CtVirtualElement@getText" shape=ellipse]
174 [label="34:CtFieldReadImpl@token" shape=ellipse]
175 [label="34:CtInvocationImpl@token.getText()" shape=ellipse]
176 [label="34:CtBinaryOperatorImpl@(((\"Replacing in \" + src.getPath()) + \": \") + token.getText())" shape=ellipse]
177 [label="34:CtLiteralImpl@\" --> \"" shape=ellipse]
178 [label="34:CtBinaryOperatorImpl@((((\"Replacing in \" + src.getPath()) + \": \") + token.getText()) + \" --> \")" shape=ellipse]
179 [label="35:CtExecutableReferenceImpl@getText()" shape=ellipse]
180 [label="35:CtVirtualElement@getText" shape=ellipse]
181 [label="35:CtFieldReadImpl@value" shape=ellipse]
182 [label="35:CtInvocationImpl@value.getText()" shape=ellipse]
183 [label="34:CtBinaryOperatorImpl@((((\"Replacing in \" + src.getPath()) + \": \") + token.getText()) + \" --> \") + value.getText()" shape=ellipse]
184 [label="36:CtTypeAccessImpl@MSG_VERBOSE" shape=ellipse]
185 [label="33:CtInvocationImpl@log(((((\"Replacing in \" + src.getPath()) + \": \") + token.getText()) + \" --> \") + value.getText(), MSG_VERBOSE)" shape=ellipse]
186 [label="37:CtVariableWriteImpl@newString" shape=ellipse]
187 [label="37:CtExecutableReferenceImpl@stringReplace(java.lang.String,java.lang.String,java.lang.String)" shape=ellipse]
188 [label="37:CtVirtualElement@stringReplace" shape=ellipse]
189 [label="37:CtVariableReadImpl@newString" shape=ellipse]
190 [label="37:CtVariableReadImpl@tok" shape=ellipse]
191 [label="37:CtVariableReadImpl@val" shape=ellipse]
192 [label="37:CtInvocationImpl@stringReplace(newString, tok, val)" shape=ellipse]
193 [label="37:CtAssignmentImpl@newString = stringReplace(newString, tok, val)" shape=ellipse]
194 [label="29:CtBlockImpl@\{
    String linesep = System.getProperty(\"line.separator\");
    String val = stringReplace(value.getText(), \"\n\", linesep);
    String tok = stringReplace(token.getText(), \"\n\", linesep);
    log(((((\"Replacing in \" + src.getPath()) + \": \") + token.getText()) + \" --> \") + value.getText(), MSG_VERBOSE);
    newString = stringReplace(newString, tok, val);
\}" shape=ellipse]
195 [label="29:CtIfImpl@if (token != null) \{
    String linesep = System.getProperty(\"line.separator\");
    String val = stringReplace(value.getText(), \"\n\", linesep);
    String tok = stringReplace(token.getText(), \"\n\", linesep);
    log(((((\"Replacing in \" + src.getPath()) + \": \") + token.getText()) + \" --> \") + value.getText(), MSG_VERBOSE);
    newString = stringReplace(newString, tok, val);
\}" shape=ellipse]
196 [label="39:CtExecutableReferenceImpl@size()" shape=ellipse]
197 [label="39:CtVirtualElement@size" shape=ellipse]
198 [label="39:CtFieldReadImpl@replacefilters" shape=ellipse]
199 [label="39:CtInvocationImpl@replacefilters.size()" shape=ellipse]
200 [label="39:CtLiteralImpl@0" shape=ellipse]
201 [label="39:CtBinaryOperatorImpl@replacefilters.size() > 0" shape=ellipse]
202 [label="40:CtVariableWriteImpl@newString" shape=ellipse]
203 [label="40:CtExecutableReferenceImpl@processReplacefilters(java.lang.String,<unknown>)" shape=ellipse]
204 [label="40:CtVirtualElement@processReplacefilters" shape=ellipse]
205 [label="40:CtVariableReadImpl@newString" shape=ellipse]
206 [label="40:CtExecutableReferenceImpl@getPath()" shape=ellipse]
207 [label="40:CtVirtualElement@getPath" shape=ellipse]
208 [label="40:CtVariableReadImpl@src" shape=ellipse]
209 [label="40:CtInvocationImpl@src.getPath()" shape=ellipse]
210 [label="40:CtInvocationImpl@processReplacefilters(newString, src.getPath())" shape=ellipse]
211 [label="40:CtAssignmentImpl@newString = processReplacefilters(newString, src.getPath())" shape=ellipse]
212 [label="39:CtBlockImpl@\{
    newString = processReplacefilters(newString, src.getPath());
\}" shape=ellipse]
213 [label="39:CtIfImpl@if (replacefilters.size() > 0) \{
    newString = processReplacefilters(newString, src.getPath());
\}" shape=ellipse]
214 [label="42:CtTypeReferenceImpl@boolean" shape=ellipse]
215 [label="42:CtExecutableReferenceImpl@equals(java.lang.Object)" shape=ellipse]
216 [label="42:CtVirtualElement@equals" shape=ellipse]
217 [label="42:CtVariableReadImpl@newString" shape=ellipse]
218 [label="42:CtVariableReadImpl@buf" shape=ellipse]
219 [label="42:CtInvocationImpl@newString.equals(buf)" shape=ellipse]
220 [label="42:CtUnaryOperatorImpl@!newString.equals(buf)" shape=ellipse]
221 [label="42:CtVirtualElement@changes" shape=ellipse]
222 [label="42:CtLocalVariableImpl@boolean changes = !newString.equals(buf)" shape=ellipse]
223 [label="43:CtVariableReadImpl@changes" shape=ellipse]
224 [label="44:CtExecutableReferenceImpl@write(java.lang.String,int,int)" shape=ellipse]
225 [label="44:CtVirtualElement@write" shape=ellipse]
226 [label="44:CtVariableReadImpl@bw" shape=ellipse]
227 [label="44:CtVariableReadImpl@newString" shape=ellipse]
228 [label="44:CtLiteralImpl@0" shape=ellipse]
229 [label="44:CtExecutableReferenceImpl@length()" shape=ellipse]
230 [label="44:CtVirtualElement@length" shape=ellipse]
231 [label="44:CtVariableReadImpl@newString" shape=ellipse]
232 [label="44:CtInvocationImpl@newString.length()" shape=ellipse]
233 [label="44:CtInvocationImpl@bw.write(newString, 0, newString.length())" shape=ellipse]
234 [label="45:CtExecutableReferenceImpl@flush()" shape=ellipse]
235 [label="45:CtVirtualElement@flush" shape=ellipse]
236 [label="45:CtVariableReadImpl@bw" shape=ellipse]
237 [label="45:CtInvocationImpl@bw.flush()" shape=ellipse]
238 [label="43:CtBlockImpl@\{
    bw.write(newString, 0, newString.length());
    bw.flush();
\}" shape=ellipse]
239 [label="43:CtIfImpl@if (changes) \{
    bw.write(newString, 0, newString.length());
    bw.flush();
\}" shape=ellipse]
240 [label="47:CtExecutableReferenceImpl@close()" shape=ellipse]
241 [label="47:CtVirtualElement@close" shape=ellipse]
242 [label="47:CtVariableReadImpl@bw" shape=ellipse]
243 [label="47:CtInvocationImpl@bw.close()" shape=ellipse]
244 [label="48:CtExecutableReferenceImpl@close()" shape=ellipse]
245 [label="48:CtVirtualElement@close" shape=ellipse]
246 [label="48:CtVariableReadImpl@br" shape=ellipse]
247 [label="48:CtInvocationImpl@br.close()" shape=ellipse]
248 [label="49:CtVariableReadImpl@changes" shape=ellipse]
249 [label="50:CtExecutableReferenceImpl@delete()" shape=ellipse]
250 [label="50:CtVirtualElement@delete" shape=ellipse]
251 [label="50:CtVariableReadImpl@src" shape=ellipse]
252 [label="50:CtInvocationImpl@src.delete()" shape=ellipse]
253 [label="51:CtExecutableReferenceImpl@renameTo(File)" shape=ellipse]
254 [label="51:CtVirtualElement@renameTo" shape=ellipse]
255 [label="51:CtVariableReadImpl@temp" shape=ellipse]
256 [label="51:CtVariableReadImpl@src" shape=ellipse]
257 [label="51:CtInvocationImpl@temp.renameTo(src)" shape=ellipse]
258 [label="49:CtBlockImpl@\{
    src.delete();
    temp.renameTo(src);
\}" shape=ellipse]
259 [label="53:CtExecutableReferenceImpl@delete()" shape=ellipse]
260 [label="53:CtVirtualElement@delete" shape=ellipse]
261 [label="53:CtVariableReadImpl@temp" shape=ellipse]
262 [label="53:CtInvocationImpl@temp.delete()" shape=ellipse]
263 [label="52:CtBlockImpl@\{
    temp.delete();
\}" shape=ellipse]
264 [label="49:CtIfImpl@if (changes) \{
    src.delete();
    temp.renameTo(src);
\} else \{
    temp.delete();
\}" shape=ellipse]
265 [label="12:CtBlockImpl@\{
    BufferedReader br = new BufferedReader(new FileReader(src));
    BufferedWriter bw = new BufferedWriter(new FileWriter(temp));
    int fileLengthInBytes = ((int) (src.length()));
    StringBuffer tmpBuf = new StringBuffer(fileLengthInBytes);
    int readChar = 0;
    int totread = 0;
    while (true) \{
        readChar = br.read();
        if (readChar < 0) \{
            break;
        \}
        tmpBuf.append(((char) (readChar)));
        totread++;
    \} 
    String buf = tmpBuf.toString();
    String newString = new String(buf);
    if (token != null) \{
        String linesep = System.getProperty(\"line.separator\");
        String val = stringReplace(value.getText(), \"\n\", linesep);
        String tok = stringReplace(token.getText(), \"\n\", linesep);
        log(((((\"Replacing in \" + src.getPath()) + \": \") + token.getText()) + \" --> \") + value.getText(), MSG_VERBOSE);
        newString = stringReplace(newString, tok, val);
    \}
    if (replacefilters.size() > 0) \{
        newString = processReplacefilters(newString, src.getPath());
    \}
    boolean changes = !newString.equals(buf);
    if (changes) \{
        bw.write(newString, 0, newString.length());
        bw.flush();
    \}
    bw.close();
    br.close();
    if (changes) \{
        src.delete();
        temp.renameTo(src);
    \} else \{
        temp.delete();
    \}
\}" shape=ellipse]
266 [label="55:CtVirtualElement@ioe" shape=ellipse]
267 [label="55:CtTypeReferenceImpl@IOException" shape=ellipse]
268 [label="55:CtCatchVariableImpl@IOException ioe" shape=ellipse]
269 [label="56:CtExecutableReferenceImpl@printStackTrace()" shape=ellipse]
270 [label="56:CtVirtualElement@printStackTrace" shape=ellipse]
271 [label="56:CtVariableReadImpl@ioe" shape=ellipse]
272 [label="56:CtInvocationImpl@ioe.printStackTrace()" shape=ellipse]
273 [label="57:CtTypeReferenceImpl@BuildException" shape=ellipse]
274 [label="57:CtVariableReadImpl@ioe" shape=ellipse]
275 [label="57:CtFieldReadImpl@location" shape=ellipse]
276 [label="57:CtConstructorCallImpl@new BuildException(ioe, location)" shape=ellipse]
277 [label="57:CtThrowImpl@throw new BuildException(ioe, location)" shape=ellipse]
278 [label="55:CtBlockImpl@\{
    ioe.printStackTrace();
    throw new BuildException(ioe, location);
\}" shape=ellipse]
279 [label="55:CtCatchImpl@ catch (IOException ioe) \{
    ioe.printStackTrace();
    throw new BuildException(ioe, location);
\}" shape=ellipse]
280 [label="12:CtTryImpl@try \{
    BufferedReader br = new BufferedReader(new FileReader(src));
    BufferedWriter bw = new BufferedWriter(new FileWriter(temp));
    int fileLengthInBytes = ((int) (src.length()));
    StringBuffer tmpBuf = new StringBuffer(fileLengthInBytes);
    int readChar = 0;
    int totread = 0;
    while (true) \{
        readChar = br.read();
        if (readChar < 0) \{
            break;
        \}
        tmpBuf.append(((char) (readChar)));
        totread++;
    \} 
    String buf = tmpBuf.toString();
    String newString = new String(buf);
    if (token != null) \{
        String linesep = System.getProperty(\"line.separator\");
        String val = stringReplace(value.getText(), \"\n\", linesep);
        String tok = stringReplace(token.getText(), \"\n\", linesep);
        log(((((\"Replacing in \" + src.getPath()) + \": \") + token.getText()) + \" --> \") + value.getText(), MSG_VERBOSE);
        newString = stringReplace(newString, tok, val);
    \}
    if (replacefilters.size() > 0) \{
        newString = processReplacefilters(newString, src.getPath());
    \}
    boolean changes = !newString.equals(buf);
    if (changes) \{
        bw.write(newString, 0, newString.length());
        bw.flush();
    \}
    bw.close();
    br.close();
    if (changes) \{
        src.delete();
        temp.renameTo(src);
    \} else \{
        temp.delete();
    \}
\} catch (IOException ioe) \{
    ioe.printStackTrace();
    throw new BuildException(ioe, location);
\}" shape=ellipse]
281 [label="2:CtBlockImpl@\{
    if (!src.exists()) \{
        throw new BuildException((\"Replace: source file \" + src.getPath()) + \" doesn't exist\", location);
    \}
    File temp = new File(src.getPath() + \".temp\");
    if (temp.exists()) \{
        throw new BuildException((\"Replace: temporary file \" + temp.getPath()) + \" already exists\", location);
    \}
    try \{
        BufferedReader br = new BufferedReader(new FileReader(src));
        BufferedWriter bw = new BufferedWriter(new FileWriter(temp));
        int fileLengthInBytes = ((int) (src.length()));
        StringBuffer tmpBuf = new StringBuffer(fileLengthInBytes);
        int readChar = 0;
        int totread = 0;
        while (true) \{
            readChar = br.read();
            if (readChar < 0) \{
                break;
            \}
            tmpBuf.append(((char) (readChar)));
            totread++;
        \} 
        String buf = tmpBuf.toString();
        String newString = new String(buf);
        if (token != null) \{
            String linesep = System.getProperty(\"line.separator\");
            String val = stringReplace(value.getText(), \"\n\", linesep);
            String tok = stringReplace(token.getText(), \"\n\", linesep);
            log(((((\"Replacing in \" + src.getPath()) + \": \") + token.getText()) + \" --> \") + value.getText(), MSG_VERBOSE);
            newString = stringReplace(newString, tok, val);
        \}
        if (replacefilters.size() > 0) \{
            newString = processReplacefilters(newString, src.getPath());
        \}
        boolean changes = !newString.equals(buf);
        if (changes) \{
            bw.write(newString, 0, newString.length());
            bw.flush();
        \}
        bw.close();
        br.close();
        if (changes) \{
            src.delete();
            temp.renameTo(src);
        \} else \{
            temp.delete();
        \}
    \} catch (IOException ioe) \{
        ioe.printStackTrace();
        throw new BuildException(ioe, location);
    \}
\}" shape=ellipse]
282 [label="2:CtMethodImpl@private void processFile(File src) throws BuildException \{
    if (!src.exists()) \{
        throw new BuildException((\"Replace: source file \" + src.getPath()) + \" doesn't exist\", location);
    \}
    File temp = new File(src.getPath() + \".temp\");
    if (temp.exists()) \{
        throw new BuildException((\"Replace: temporary file \" + temp.getPath()) + \" already exists\", location);
    \}
    try \{
        BufferedReader br = new BufferedReader(new FileReader(src));
        BufferedWriter bw = new BufferedWriter(new FileWriter(temp));
        int fileLengthInBytes = ((int) (src.length()));
        StringBuffer tmpBuf = new StringBuffer(fileLengthInBytes);
        int readChar = 0;
        int totread = 0;
        while (true) \{
            readChar = br.read();
            if (readChar < 0) \{
                break;
            \}
            tmpBuf.append(((char) (readChar)));
            totread++;
        \} 
        String buf = tmpBuf.toString();
        String newString = new String(buf);
        if (token != null) \{
            String linesep = System.getProperty(\"line.separator\");
            String val = stringReplace(value.getText(), \"\n\", linesep);
            String tok = stringReplace(token.getText(), \"\n\", linesep);
            log(((((\"Replacing in \" + src.getPath()) + \": \") + token.getText()) + \" --> \") + value.getText(), MSG_VERBOSE);
            newString = stringReplace(newString, tok, val);
        \}
        if (replacefilters.size() > 0) \{
            newString = processReplacefilters(newString, src.getPath());
        \}
        boolean changes = !newString.equals(buf);
        if (changes) \{
            bw.write(newString, 0, newString.length());
            bw.flush();
        \}
        bw.close();
        br.close();
        if (changes) \{
            src.delete();
            temp.renameTo(src);
        \} else \{
            temp.delete();
        \}
    \} catch (IOException ioe) \{
        ioe.printStackTrace();
        throw new BuildException(ioe, location);
    \}
\}" shape=ellipse]
283 [label="50:Insert@INSERT" shape=ellipse]
284 [label="50:CtUnaryOperatorImpl@++fileCount" shape=ellipse]
2 -> 3 [label="AST"];
8 -> 6 [label="AST"];
8 -> 7 [label="AST"];
8 -> 5 [label="AST"];
9 -> 8 [label="AST"];
9 -> 22 [label="Control Dep"];
9 -> 21 [label="Control Dep"];
9 -> 20 [label="Control Dep"];
9 -> 18 [label="Control Dep"];
9 -> 16 [label="Control Dep"];
9 -> 11 [label="Control Dep"];
9 -> 15 [label="Control Dep"];
9 -> 12 [label="Control Dep"];
9 -> 14 [label="Control Dep"];
9 -> 17 [label="Control Dep"];
9 -> 19 [label="Control Dep"];
15 -> 13 [label="AST"];
15 -> 14 [label="AST"];
15 -> 12 [label="AST"];
16 -> 11 [label="AST"];
16 -> 15 [label="AST"];
18 -> 16 [label="AST"];
18 -> 17 [label="AST"];
20 -> 18 [label="AST"];
20 -> 19 [label="AST"];
21 -> 20 [label="AST"];
22 -> 21 [label="AST"];
23 -> 9 [label="AST"];
23 -> 22 [label="AST"];
28 -> 33 [label="Data Dep"];
29 -> 27 [label="AST"];
29 -> 28 [label="AST"];
29 -> 26 [label="AST"];
31 -> 29 [label="AST"];
31 -> 30 [label="AST"];
32 -> 31 [label="AST"];
33 -> 37 [label="Define-Use"];
33 -> 43 [label="Define-Use"];
33 -> 64 [label="Define-Use"];
33 -> 255 [label="Define-Use"];
33 -> 261 [label="Define-Use"];
34 -> 33 [label="AST"];
34 -> 24 [label="AST"];
34 -> 32 [label="AST"];
38 -> 36 [label="AST"];
38 -> 37 [label="AST"];
38 -> 35 [label="AST"];
38 -> 51 [label="Control Dep"];
38 -> 50 [label="Control Dep"];
38 -> 49 [label="Control Dep"];
38 -> 47 [label="Control Dep"];
38 -> 45 [label="Control Dep"];
38 -> 40 [label="Control Dep"];
38 -> 44 [label="Control Dep"];
38 -> 41 [label="Control Dep"];
38 -> 43 [label="Control Dep"];
38 -> 46 [label="Control Dep"];
38 -> 48 [label="Control Dep"];
44 -> 42 [label="AST"];
44 -> 43 [label="AST"];
44 -> 41 [label="AST"];
45 -> 40 [label="AST"];
45 -> 44 [label="AST"];
47 -> 45 [label="AST"];
47 -> 46 [label="AST"];
49 -> 47 [label="AST"];
49 -> 48 [label="AST"];
50 -> 49 [label="AST"];
51 -> 50 [label="AST"];
52 -> 38 [label="AST"];
52 -> 51 [label="AST"];
56 -> 59 [label="Data Dep"];
57 -> 56 [label="AST"];
58 -> 57 [label="AST"];
59 -> 95 [label="Define-Use"];
59 -> 246 [label="Define-Use"];
60 -> 59 [label="AST"];
60 -> 53 [label="AST"];
60 -> 58 [label="AST"];
64 -> 67 [label="Data Dep"];
65 -> 64 [label="AST"];
66 -> 65 [label="AST"];
67 -> 226 [label="Define-Use"];
67 -> 236 [label="Define-Use"];
67 -> 242 [label="Define-Use"];
68 -> 67 [label="AST"];
68 -> 61 [label="AST"];
68 -> 66 [label="AST"];
72 -> 75 [label="Data Dep"];
73 -> 71 [label="AST"];
73 -> 74 [label="AST"];
73 -> 72 [label="AST"];
73 -> 70 [label="AST"];
75 -> 79 [label="Define-Use"];
76 -> 75 [label="AST"];
76 -> 69 [label="AST"];
76 -> 73 [label="AST"];
79 -> 81 [label="Data Dep"];
80 -> 79 [label="AST"];
81 -> 106 [label="Define-Use"];
81 -> 117 [label="Define-Use"];
82 -> 81 [label="AST"];
82 -> 77 [label="AST"];
82 -> 80 [label="AST"];
86 -> 85 [label="AST"];
86 -> 83 [label="AST"];
86 -> 84 [label="AST"];
90 -> 89 [label="AST"];
90 -> 87 [label="AST"];
90 -> 88 [label="AST"];
91 -> 112 [label="Control Dep"];
91 -> 97 [label="Control Dep"];
91 -> 92 [label="Control Dep"];
91 -> 96 [label="Control Dep"];
91 -> 93 [label="Control Dep"];
91 -> 95 [label="Control Dep"];
91 -> 103 [label="Control Dep"];
91 -> 100 [label="Control Dep"];
91 -> 98 [label="Control Dep"];
91 -> 99 [label="Control Dep"];
91 -> 109 [label="Control Dep"];
91 -> 104 [label="Control Dep"];
91 -> 106 [label="Control Dep"];
91 -> 107 [label="Control Dep"];
91 -> 111 [label="Control Dep"];
91 -> 110 [label="Control Dep"];
92 -> 98 [label="Define-Use"];
92 -> 107 [label="Define-Use"];
95 -> 92 [label="Data Dep"];
96 -> 94 [label="AST"];
96 -> 95 [label="AST"];
96 -> 93 [label="AST"];
97 -> 92 [label="AST"];
97 -> 96 [label="AST"];
100 -> 98 [label="AST"];
100 -> 99 [label="AST"];
100 -> 102 [label="Control Dep"];
100 -> 101 [label="Control Dep"];
102 -> 101 [label="AST"];
103 -> 100 [label="AST"];
103 -> 102 [label="AST"];
107 -> 108 [label="AST"];
109 -> 105 [label="AST"];
109 -> 106 [label="AST"];
109 -> 104 [label="AST"];
109 -> 107 [label="AST"];
111 -> 110 [label="AST"];
112 -> 97 [label="AST"];
112 -> 103 [label="AST"];
112 -> 109 [label="AST"];
112 -> 111 [label="AST"];
113 -> 91 [label="AST"];
113 -> 112 [label="AST"];
117 -> 119 [label="Data Dep"];
118 -> 116 [label="AST"];
118 -> 117 [label="AST"];
118 -> 115 [label="AST"];
119 -> 123 [label="Define-Use"];
119 -> 218 [label="Define-Use"];
120 -> 119 [label="AST"];
120 -> 114 [label="AST"];
120 -> 118 [label="AST"];
123 -> 125 [label="Data Dep"];
124 -> 123 [label="AST"];
125 -> 189 [label="Define-Use"];
125 -> 205 [label="Define-Use"];
125 -> 217 [label="Define-Use"];
125 -> 227 [label="Define-Use"];
125 -> 231 [label="Define-Use"];
126 -> 125 [label="AST"];
126 -> 121 [label="AST"];
126 -> 124 [label="AST"];
129 -> 127 [label="AST"];
129 -> 128 [label="AST"];
129 -> 194 [label="Control Dep"];
129 -> 137 [label="Control Dep"];
129 -> 135 [label="Control Dep"];
129 -> 131 [label="Control Dep"];
129 -> 133 [label="Control Dep"];
129 -> 134 [label="Control Dep"];
129 -> 149 [label="Control Dep"];
129 -> 147 [label="Control Dep"];
129 -> 139 [label="Control Dep"];
129 -> 144 [label="Control Dep"];
129 -> 141 [label="Control Dep"];
129 -> 143 [label="Control Dep"];
129 -> 145 [label="Control Dep"];
129 -> 146 [label="Control Dep"];
129 -> 161 [label="Control Dep"];
129 -> 159 [label="Control Dep"];
129 -> 151 [label="Control Dep"];
129 -> 156 [label="Control Dep"];
129 -> 153 [label="Control Dep"];
129 -> 155 [label="Control Dep"];
129 -> 157 [label="Control Dep"];
129 -> 158 [label="Control Dep"];
129 -> 185 [label="Control Dep"];
129 -> 162 [label="Control Dep"];
129 -> 183 [label="Control Dep"];
129 -> 178 [label="Control Dep"];
129 -> 176 [label="Control Dep"];
129 -> 171 [label="Control Dep"];
129 -> 169 [label="Control Dep"];
129 -> 164 [label="Control Dep"];
129 -> 168 [label="Control Dep"];
129 -> 165 [label="Control Dep"];
129 -> 167 [label="Control Dep"];
129 -> 170 [label="Control Dep"];
129 -> 175 [label="Control Dep"];
129 -> 172 [label="Control Dep"];
129 -> 174 [label="Control Dep"];
129 -> 177 [label="Control Dep"];
129 -> 182 [label="Control Dep"];
129 -> 179 [label="Control Dep"];
129 -> 181 [label="Control Dep"];
129 -> 184 [label="Control Dep"];
129 -> 193 [label="Control Dep"];
129 -> 186 [label="Control Dep"];
129 -> 192 [label="Control Dep"];
129 -> 187 [label="Control Dep"];
129 -> 189 [label="Control Dep"];
129 -> 190 [label="Control Dep"];
129 -> 191 [label="Control Dep"];
135 -> 132 [label="AST"];
135 -> 133 [label="AST"];
135 -> 131 [label="AST"];
135 -> 134 [label="AST"];
136 -> 146 [label="Define-Use"];
136 -> 158 [label="Define-Use"];
137 -> 136 [label="AST"];
137 -> 130 [label="AST"];
137 -> 135 [label="AST"];
143 -> 148 [label="Data Dep"];
144 -> 142 [label="AST"];
144 -> 143 [label="AST"];
144 -> 141 [label="AST"];
146 -> 148 [label="Data Dep"];
147 -> 140 [label="AST"];
147 -> 139 [label="AST"];
147 -> 144 [label="AST"];
147 -> 145 [label="AST"];
147 -> 146 [label="AST"];
148 -> 191 [label="Define-Use"];
149 -> 148 [label="AST"];
149 -> 138 [label="AST"];
149 -> 147 [label="AST"];
155 -> 160 [label="Data Dep"];
156 -> 154 [label="AST"];
156 -> 155 [label="AST"];
156 -> 153 [label="AST"];
158 -> 160 [label="Data Dep"];
159 -> 152 [label="AST"];
159 -> 151 [label="AST"];
159 -> 156 [label="AST"];
159 -> 157 [label="AST"];
159 -> 158 [label="AST"];
160 -> 190 [label="Define-Use"];
161 -> 160 [label="AST"];
161 -> 150 [label="AST"];
161 -> 159 [label="AST"];
168 -> 166 [label="AST"];
168 -> 167 [label="AST"];
168 -> 165 [label="AST"];
169 -> 164 [label="AST"];
169 -> 168 [label="AST"];
171 -> 169 [label="AST"];
171 -> 170 [label="AST"];
175 -> 173 [label="AST"];
175 -> 174 [label="AST"];
175 -> 172 [label="AST"];
176 -> 171 [label="AST"];
176 -> 175 [label="AST"];
178 -> 176 [label="AST"];
178 -> 177 [label="AST"];
182 -> 180 [label="AST"];
182 -> 181 [label="AST"];
182 -> 179 [label="AST"];
183 -> 178 [label="AST"];
183 -> 182 [label="AST"];
185 -> 163 [label="AST"];
185 -> 162 [label="AST"];
185 -> 183 [label="AST"];
185 -> 184 [label="AST"];
186 -> 205 [label="Define-Use"];
186 -> 217 [label="Define-Use"];
186 -> 227 [label="Define-Use"];
186 -> 231 [label="Define-Use"];
189 -> 186 [label="Data Dep"];
190 -> 186 [label="Data Dep"];
191 -> 186 [label="Data Dep"];
192 -> 188 [label="AST"];
192 -> 187 [label="AST"];
192 -> 189 [label="AST"];
192 -> 190 [label="AST"];
192 -> 191 [label="AST"];
193 -> 186 [label="AST"];
193 -> 192 [label="AST"];
194 -> 137 [label="AST"];
194 -> 149 [label="AST"];
194 -> 161 [label="AST"];
194 -> 185 [label="AST"];
194 -> 193 [label="AST"];
195 -> 129 [label="AST"];
195 -> 194 [label="AST"];
199 -> 197 [label="AST"];
199 -> 198 [label="AST"];
199 -> 196 [label="AST"];
201 -> 199 [label="AST"];
201 -> 200 [label="AST"];
201 -> 212 [label="Control Dep"];
201 -> 211 [label="Control Dep"];
201 -> 202 [label="Control Dep"];
201 -> 210 [label="Control Dep"];
201 -> 203 [label="Control Dep"];
201 -> 205 [label="Control Dep"];
201 -> 209 [label="Control Dep"];
201 -> 206 [label="Control Dep"];
201 -> 208 [label="Control Dep"];
202 -> 217 [label="Define-Use"];
202 -> 227 [label="Define-Use"];
202 -> 231 [label="Define-Use"];
205 -> 202 [label="Data Dep"];
208 -> 202 [label="Data Dep"];
209 -> 207 [label="AST"];
209 -> 208 [label="AST"];
209 -> 206 [label="AST"];
210 -> 204 [label="AST"];
210 -> 203 [label="AST"];
210 -> 205 [label="AST"];
210 -> 209 [label="AST"];
211 -> 202 [label="AST"];
211 -> 210 [label="AST"];
212 -> 211 [label="AST"];
213 -> 201 [label="AST"];
213 -> 212 [label="AST"];
217 -> 221 [label="Data Dep"];
218 -> 221 [label="Data Dep"];
219 -> 216 [label="AST"];
219 -> 217 [label="AST"];
219 -> 215 [label="AST"];
219 -> 218 [label="AST"];
220 -> 219 [label="AST"];
221 -> 223 [label="Define-Use"];
221 -> 248 [label="Define-Use"];
222 -> 221 [label="AST"];
222 -> 214 [label="AST"];
222 -> 220 [label="AST"];
223 -> 238 [label="Control Dep"];
223 -> 233 [label="Control Dep"];
223 -> 224 [label="Control Dep"];
223 -> 226 [label="Control Dep"];
223 -> 227 [label="Control Dep"];
223 -> 228 [label="Control Dep"];
223 -> 232 [label="Control Dep"];
223 -> 229 [label="Control Dep"];
223 -> 231 [label="Control Dep"];
223 -> 237 [label="Control Dep"];
223 -> 234 [label="Control Dep"];
223 -> 236 [label="Control Dep"];
232 -> 230 [label="AST"];
232 -> 231 [label="AST"];
232 -> 229 [label="AST"];
233 -> 225 [label="AST"];
233 -> 226 [label="AST"];
233 -> 224 [label="AST"];
233 -> 227 [label="AST"];
233 -> 228 [label="AST"];
233 -> 232 [label="AST"];
237 -> 235 [label="AST"];
237 -> 236 [label="AST"];
237 -> 234 [label="AST"];
238 -> 233 [label="AST"];
238 -> 237 [label="AST"];
239 -> 223 [label="AST"];
239 -> 238 [label="AST"];
243 -> 241 [label="AST"];
243 -> 242 [label="AST"];
243 -> 240 [label="AST"];
247 -> 245 [label="AST"];
247 -> 246 [label="AST"];
247 -> 244 [label="AST"];
248 -> 258 [label="Control Dep"];
248 -> 252 [label="Control Dep"];
248 -> 249 [label="Control Dep"];
248 -> 251 [label="Control Dep"];
248 -> 257 [label="Control Dep"];
248 -> 253 [label="Control Dep"];
248 -> 255 [label="Control Dep"];
248 -> 256 [label="Control Dep"];
248 -> 263 [label="Control Dep"];
248 -> 262 [label="Control Dep"];
248 -> 259 [label="Control Dep"];
248 -> 261 [label="Control Dep"];
252 -> 250 [label="AST"];
252 -> 251 [label="AST"];
252 -> 249 [label="AST"];
257 -> 254 [label="AST"];
257 -> 255 [label="AST"];
257 -> 253 [label="AST"];
257 -> 256 [label="AST"];
258 -> 252 [label="AST"];
258 -> 257 [label="AST"];
258 -> 283 [label="Action"];
262 -> 260 [label="AST"];
262 -> 261 [label="AST"];
262 -> 259 [label="AST"];
263 -> 262 [label="AST"];
264 -> 248 [label="AST"];
264 -> 258 [label="AST"];
264 -> 263 [label="AST"];
265 -> 60 [label="AST"];
265 -> 68 [label="AST"];
265 -> 76 [label="AST"];
265 -> 82 [label="AST"];
265 -> 86 [label="AST"];
265 -> 90 [label="AST"];
265 -> 113 [label="AST"];
265 -> 120 [label="AST"];
265 -> 126 [label="AST"];
265 -> 195 [label="AST"];
265 -> 213 [label="AST"];
265 -> 222 [label="AST"];
265 -> 239 [label="AST"];
265 -> 243 [label="AST"];
265 -> 247 [label="AST"];
265 -> 264 [label="AST"];
266 -> 271 [label="Define-Use"];
266 -> 274 [label="Define-Use"];
268 -> 266 [label="AST"];
268 -> 267 [label="AST"];
268 -> 278 [label="Control Dep"];
268 -> 272 [label="Control Dep"];
268 -> 269 [label="Control Dep"];
268 -> 271 [label="Control Dep"];
268 -> 277 [label="Control Dep"];
268 -> 276 [label="Control Dep"];
268 -> 274 [label="Control Dep"];
268 -> 275 [label="Control Dep"];
272 -> 270 [label="AST"];
272 -> 271 [label="AST"];
272 -> 269 [label="AST"];
276 -> 274 [label="AST"];
276 -> 275 [label="AST"];
277 -> 276 [label="AST"];
278 -> 272 [label="AST"];
278 -> 277 [label="AST"];
279 -> 268 [label="AST"];
279 -> 278 [label="AST"];
280 -> 265 [label="AST"];
280 -> 279 [label="AST"];
281 -> 23 [label="AST"];
281 -> 34 [label="AST"];
281 -> 52 [label="AST"];
281 -> 280 [label="AST"];
282 -> 1 [label="AST"];
282 -> 0 [label="AST"];
282 -> 2 [label="AST"];
282 -> 4 [label="AST"];
282 -> 281 [label="AST"];
283 -> 284 [label="Action"];
}