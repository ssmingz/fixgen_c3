digraph "scanDir#?,File,String[]" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@scanDir" shape=ellipse]
2 [label="2:CtParameterImpl@File srcDir" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@File" shape=ellipse]
4 [label="2:CtParameterImpl@String[] files" shape=ellipse]
5 [label="2:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
6 [label="3:CtTypeReferenceImpl@long" shape=ellipse]
7 [label="3:CtExecutableReferenceImpl@currentTimeMillis()" shape=ellipse]
8 [label="3:CtVirtualElement@currentTimeMillis" shape=ellipse]
9 [label="3:CtTypeAccessImpl@System" shape=ellipse]
10 [label="3:CtInvocationImpl@System.currentTimeMillis()" shape=ellipse]
11 [label="3:CtVirtualElement@now" shape=ellipse]
12 [label="3:CtLocalVariableImpl@long now = System.currentTimeMillis()" shape=ellipse]
13 [label="4:CtTypeReferenceImpl@int" shape=ellipse]
14 [label="4:CtLiteralImpl@0" shape=ellipse]
15 [label="4:CtVirtualElement@i" shape=ellipse]
16 [label="4:CtLocalVariableImpl@int i = 0" shape=ellipse]
17 [label="4:CtVariableReadImpl@i" shape=ellipse]
18 [label="4:CtVariableReadImpl@files" shape=ellipse]
19 [label="4:CtParameterReferenceImpl@files" shape=ellipse]
20 [label="4:CtFieldReadImpl@files.length" shape=ellipse]
21 [label="4:CtBinaryOperatorImpl@i < files.length" shape=ellipse]
22 [label="4:CtVariableWriteImpl@i" shape=ellipse]
23 [label="4:CtUnaryOperatorImpl@i++" shape=ellipse]
24 [label="5:CtTypeReferenceImpl@File" shape=ellipse]
25 [label="5:CtTypeReferenceImpl@File" shape=ellipse]
26 [label="5:CtVariableReadImpl@srcDir" shape=ellipse]
27 [label="5:CtVariableReadImpl@files" shape=ellipse]
28 [label="5:CtVariableReadImpl@i" shape=ellipse]
29 [label="5:CtArrayReadImpl@files[i]" shape=ellipse]
30 [label="5:CtConstructorCallImpl@new File(srcDir, files[i])" shape=ellipse]
31 [label="5:CtVirtualElement@srcFile" shape=ellipse]
32 [label="5:CtLocalVariableImpl@File srcFile = new File(srcDir, files[i])" shape=ellipse]
33 [label="6:CtExecutableReferenceImpl@endsWith(java.lang.String)" shape=ellipse]
34 [label="6:CtVirtualElement@endsWith" shape=ellipse]
35 [label="6:CtVariableReadImpl@files" shape=ellipse]
36 [label="6:CtVariableReadImpl@i" shape=ellipse]
37 [label="6:CtArrayReadImpl@files[i]" shape=ellipse]
38 [label="6:CtLiteralImpl@\".java\"" shape=ellipse]
39 [label="6:CtInvocationImpl@files[i].endsWith(\".java\")" shape=ellipse]
40 [label="7:CtTypeReferenceImpl@String" shape=ellipse]
41 [label="7:CtExecutableReferenceImpl@getPath()" shape=ellipse]
42 [label="7:CtVirtualElement@getPath" shape=ellipse]
43 [label="7:CtVariableReadImpl@srcFile" shape=ellipse]
44 [label="7:CtInvocationImpl@srcFile.getPath()" shape=ellipse]
45 [label="7:CtVirtualElement@filePath" shape=ellipse]
46 [label="7:CtLocalVariableImpl@String filePath = srcFile.getPath()" shape=ellipse]
47 [label="8:CtTypeReferenceImpl@String" shape=ellipse]
48 [label="9:CtExecutableReferenceImpl@substring(int,int)" shape=ellipse]
49 [label="9:CtVirtualElement@substring" shape=ellipse]
50 [label="9:CtVariableReadImpl@filePath" shape=ellipse]
51 [label="9:CtExecutableReferenceImpl@length()" shape=ellipse]
52 [label="9:CtVirtualElement@length" shape=ellipse]
53 [label="9:CtExecutableReferenceImpl@getPath()" shape=ellipse]
54 [label="9:CtVirtualElement@getPath" shape=ellipse]
55 [label="9:CtVariableReadImpl@srcDir" shape=ellipse]
56 [label="9:CtInvocationImpl@srcDir.getPath()" shape=ellipse]
57 [label="9:CtInvocationImpl@srcDir.getPath().length()" shape=ellipse]
58 [label="9:CtLiteralImpl@1" shape=ellipse]
59 [label="9:CtBinaryOperatorImpl@srcDir.getPath().length() + 1" shape=ellipse]
60 [label="9:CtExecutableReferenceImpl@length()" shape=ellipse]
61 [label="9:CtVirtualElement@length" shape=ellipse]
62 [label="9:CtVariableReadImpl@filePath" shape=ellipse]
63 [label="9:CtInvocationImpl@filePath.length()" shape=ellipse]
64 [label="9:CtExecutableReferenceImpl@length()" shape=ellipse]
65 [label="9:CtVirtualElement@length" shape=ellipse]
66 [label="9:CtLiteralImpl@\".java\"" shape=ellipse]
67 [label="9:CtInvocationImpl@\".java\".length()" shape=ellipse]
68 [label="9:CtBinaryOperatorImpl@filePath.length() - \".java\".length()" shape=ellipse]
69 [label="9:CtInvocationImpl@filePath.substring(srcDir.getPath().length() + 1, filePath.length() - \".java\".length())" shape=ellipse]
70 [label="8:CtVirtualElement@className" shape=ellipse]
71 [label="8:CtLocalVariableImpl@String className = filePath.substring(srcDir.getPath().length() + 1, filePath.length() - \".java\".length())" shape=ellipse]
72 [label="10:CtVariableWriteImpl@className" shape=ellipse]
73 [label="10:CtExecutableReferenceImpl@convertSlashName(java.lang.String)" shape=ellipse]
74 [label="10:CtVirtualElement@convertSlashName" shape=ellipse]
75 [label="10:CtTypeAccessImpl@ClassFileUtils" shape=ellipse]
76 [label="10:CtVariableReadImpl@className" shape=ellipse]
77 [label="10:CtInvocationImpl@ClassFileUtils.convertSlashName(className)" shape=ellipse]
78 [label="10:CtAssignmentImpl@className = ClassFileUtils.convertSlashName(className)" shape=ellipse]
79 [label="11:CtTypeReferenceImpl@ClassFileInfo" shape=ellipse]
80 [label="11:CtExecutableReferenceImpl@get(java.lang.String)" shape=ellipse]
81 [label="11:CtVirtualElement@get" shape=ellipse]
82 [label="11:CtFieldReadImpl@classFileInfoMap" shape=ellipse]
83 [label="11:CtVariableReadImpl@className" shape=ellipse]
84 [label="11:CtInvocationImpl@((ClassFileInfo) (classFileInfoMap.get(className)))" shape=ellipse]
85 [label="11:CtTypeReferenceImpl@ClassFileInfo" shape=ellipse]
86 [label="11:CtVirtualElement@info" shape=ellipse]
87 [label="11:CtLocalVariableImpl@ClassFileInfo info = ((ClassFileInfo) (classFileInfoMap.get(className)))" shape=ellipse]
88 [label="12:CtVariableReadImpl@info" shape=ellipse]
89 [label="12:CtLiteralImpl@null" shape=ellipse]
90 [label="12:CtBinaryOperatorImpl@info == null" shape=ellipse]
91 [label="13:CtExecutableReferenceImpl@put(java.lang.String,java.lang.String)" shape=ellipse]
92 [label="13:CtVirtualElement@put" shape=ellipse]
93 [label="13:CtFieldReadImpl@outOfDateClasses" shape=ellipse]
94 [label="13:CtVariableReadImpl@className" shape=ellipse]
95 [label="13:CtVariableReadImpl@className" shape=ellipse]
96 [label="13:CtInvocationImpl@outOfDateClasses.put(className, className)" shape=ellipse]
97 [label="12:CtBlockImpl@\{
    outOfDateClasses.put(className, className);
\}" shape=ellipse]
98 [label="14:CtExecutableReferenceImpl@lastModified()" shape=ellipse]
99 [label="14:CtVirtualElement@lastModified" shape=ellipse]
100 [label="14:CtVariableReadImpl@srcFile" shape=ellipse]
101 [label="14:CtInvocationImpl@srcFile.lastModified()" shape=ellipse]
102 [label="14:CtExecutableReferenceImpl@lastModified()" shape=ellipse]
103 [label="14:CtVirtualElement@lastModified" shape=ellipse]
104 [label="14:CtVariableReadImpl@info" shape=ellipse]
105 [label="14:CtLocalVariableReferenceImpl@info" shape=ellipse]
106 [label="14:CtFieldReadImpl@info.absoluteFile" shape=ellipse]
107 [label="14:CtInvocationImpl@info.absoluteFile.lastModified()" shape=ellipse]
108 [label="14:CtFieldReadImpl@TIME_TOLERANCE" shape=ellipse]
109 [label="14:CtBinaryOperatorImpl@(info.absoluteFile.lastModified() + TIME_TOLERANCE)" shape=ellipse]
110 [label="14:CtBinaryOperatorImpl@srcFile.lastModified() > (info.absoluteFile.lastModified() + TIME_TOLERANCE)" shape=ellipse]
111 [label="15:CtExecutableReferenceImpl@put(java.lang.String,java.lang.String)" shape=ellipse]
112 [label="15:CtVirtualElement@put" shape=ellipse]
113 [label="15:CtFieldReadImpl@outOfDateClasses" shape=ellipse]
114 [label="15:CtVariableReadImpl@className" shape=ellipse]
115 [label="15:CtVariableReadImpl@className" shape=ellipse]
116 [label="15:CtInvocationImpl@outOfDateClasses.put(className, className)" shape=ellipse]
117 [label="14:CtBlockImpl@\{
    outOfDateClasses.put(className, className);
\}" shape=ellipse]
118 [label="14:CtIfImpl@if (srcFile.lastModified() > (info.absoluteFile.lastModified() + TIME_TOLERANCE)) \{
    outOfDateClasses.put(className, className);
\}" shape=ellipse]
119 [label="14:CtBlockImpl@
    if (srcFile.lastModified() > (info.absoluteFile.lastModified() + TIME_TOLERANCE)) \{
        outOfDateClasses.put(className, className);
    \}
" shape=ellipse]
120 [label="12:CtIfImpl@if (info == null) \{
    outOfDateClasses.put(className, className);
\} else if (srcFile.lastModified() > (info.absoluteFile.lastModified() + TIME_TOLERANCE)) \{
    outOfDateClasses.put(className, className);
\}" shape=ellipse]
121 [label="6:CtBlockImpl@\{
    String filePath = srcFile.getPath();
    String className = filePath.substring(srcDir.getPath().length() + 1, filePath.length() - \".java\".length());
    className = ClassFileUtils.convertSlashName(className);
    ClassFileInfo info = ((ClassFileInfo) (classFileInfoMap.get(className)));
    if (info == null) \{
        outOfDateClasses.put(className, className);
    \} else if (srcFile.lastModified() > (info.absoluteFile.lastModified() + TIME_TOLERANCE)) \{
        outOfDateClasses.put(className, className);
    \}
\}" shape=ellipse]
122 [label="6:CtIfImpl@if (files[i].endsWith(\".java\")) \{
    String filePath = srcFile.getPath();
    String className = filePath.substring(srcDir.getPath().length() + 1, filePath.length() - \".java\".length());
    className = ClassFileUtils.convertSlashName(className);
    ClassFileInfo info = ((ClassFileInfo) (classFileInfoMap.get(className)));
    if (info == null) \{
        outOfDateClasses.put(className, className);
    \} else if (srcFile.lastModified() > (info.absoluteFile.lastModified() + TIME_TOLERANCE)) \{
        outOfDateClasses.put(className, className);
    \}
\}" shape=ellipse]
123 [label="4:CtBlockImpl@\{
    File srcFile = new File(srcDir, files[i]);
    if (files[i].endsWith(\".java\")) \{
        String filePath = srcFile.getPath();
        String className = filePath.substring(srcDir.getPath().length() + 1, filePath.length() - \".java\".length());
        className = ClassFileUtils.convertSlashName(className);
        ClassFileInfo info = ((ClassFileInfo) (classFileInfoMap.get(className)));
        if (info == null) \{
            outOfDateClasses.put(className, className);
        \} else if (srcFile.lastModified() > (info.absoluteFile.lastModified() + TIME_TOLERANCE)) \{
            outOfDateClasses.put(className, className);
        \}
    \}
\}" shape=ellipse]
124 [label="4:CtForImpl@for (int i = 0; i < files.length; i++) \{
    File srcFile = new File(srcDir, files[i]);
    if (files[i].endsWith(\".java\")) \{
        String filePath = srcFile.getPath();
        String className = filePath.substring(srcDir.getPath().length() + 1, filePath.length() - \".java\".length());
        className = ClassFileUtils.convertSlashName(className);
        ClassFileInfo info = ((ClassFileInfo) (classFileInfoMap.get(className)));
        if (info == null) \{
            outOfDateClasses.put(className, className);
        \} else if (srcFile.lastModified() > (info.absoluteFile.lastModified() + TIME_TOLERANCE)) \{
            outOfDateClasses.put(className, className);
        \}
    \}
\}" shape=ellipse]
125 [label="2:CtBlockImpl@\{
    long now = System.currentTimeMillis();
    for (int i = 0; i < files.length; i++) \{
        File srcFile = new File(srcDir, files[i]);
        if (files[i].endsWith(\".java\")) \{
            String filePath = srcFile.getPath();
            String className = filePath.substring(srcDir.getPath().length() + 1, filePath.length() - \".java\".length());
            className = ClassFileUtils.convertSlashName(className);
            ClassFileInfo info = ((ClassFileInfo) (classFileInfoMap.get(className)));
            if (info == null) \{
                outOfDateClasses.put(className, className);
            \} else if (srcFile.lastModified() > (info.absoluteFile.lastModified() + TIME_TOLERANCE)) \{
                outOfDateClasses.put(className, className);
            \}
        \}
    \}
\}" shape=ellipse]
126 [label="2:CtMethodImpl@protected void scanDir(File srcDir, String[] files) \{
    long now = System.currentTimeMillis();
    for (int i = 0; i < files.length; i++) \{
        File srcFile = new File(srcDir, files[i]);
        if (files[i].endsWith(\".java\")) \{
            String filePath = srcFile.getPath();
            String className = filePath.substring(srcDir.getPath().length() + 1, filePath.length() - \".java\".length());
            className = ClassFileUtils.convertSlashName(className);
            ClassFileInfo info = ((ClassFileInfo) (classFileInfoMap.get(className)));
            if (info == null) \{
                outOfDateClasses.put(className, className);
            \} else if (srcFile.lastModified() > (info.absoluteFile.lastModified() + TIME_TOLERANCE)) \{
                outOfDateClasses.put(className, className);
            \}
        \}
    \}
\}" shape=ellipse]
127 [label="14:Update@UPDATE" shape=ellipse]
128 [label="14:CtBinaryOperatorImpl@srcFile.lastModified() > info.absoluteFile.lastModified()" shape=ellipse]
129 [label="14:Delete@DELETE" shape=ellipse]
130 [label="14:Move@MOVE" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
10 -> 8 [label="AST"];
10 -> 9 [label="AST"];
10 -> 7 [label="AST"];
12 -> 11 [label="AST"];
12 -> 6 [label="AST"];
12 -> 10 [label="AST"];
15 -> 17 [label="Define-Use"];
16 -> 15 [label="AST"];
16 -> 13 [label="AST"];
16 -> 14 [label="AST"];
18 -> 19 [label="AST"];
20 -> 18 [label="AST"];
21 -> 17 [label="AST"];
21 -> 20 [label="AST"];
21 -> 123 [label="Control Dep"];
21 -> 32 [label="Control Dep"];
21 -> 30 [label="Control Dep"];
21 -> 26 [label="Control Dep"];
21 -> 29 [label="Control Dep"];
21 -> 27 [label="Control Dep"];
21 -> 28 [label="Control Dep"];
21 -> 122 [label="Control Dep"];
21 -> 39 [label="Control Dep"];
21 -> 33 [label="Control Dep"];
21 -> 37 [label="Control Dep"];
21 -> 35 [label="Control Dep"];
21 -> 36 [label="Control Dep"];
21 -> 38 [label="Control Dep"];
22 -> 28 [label="Define-Use"];
22 -> 36 [label="Define-Use"];
23 -> 22 [label="AST"];
26 -> 31 [label="Data Dep"];
29 -> 27 [label="AST"];
29 -> 28 [label="AST"];
29 -> 31 [label="Data Dep"];
30 -> 26 [label="AST"];
30 -> 29 [label="AST"];
31 -> 43 [label="Define-Use"];
31 -> 100 [label="Define-Use"];
32 -> 31 [label="AST"];
32 -> 24 [label="AST"];
32 -> 30 [label="AST"];
37 -> 35 [label="AST"];
37 -> 36 [label="AST"];
39 -> 34 [label="AST"];
39 -> 37 [label="AST"];
39 -> 33 [label="AST"];
39 -> 38 [label="AST"];
39 -> 121 [label="Control Dep"];
39 -> 46 [label="Control Dep"];
39 -> 44 [label="Control Dep"];
39 -> 41 [label="Control Dep"];
39 -> 43 [label="Control Dep"];
39 -> 71 [label="Control Dep"];
39 -> 69 [label="Control Dep"];
39 -> 48 [label="Control Dep"];
39 -> 50 [label="Control Dep"];
39 -> 59 [label="Control Dep"];
39 -> 57 [label="Control Dep"];
39 -> 51 [label="Control Dep"];
39 -> 56 [label="Control Dep"];
39 -> 53 [label="Control Dep"];
39 -> 55 [label="Control Dep"];
39 -> 58 [label="Control Dep"];
39 -> 68 [label="Control Dep"];
39 -> 63 [label="Control Dep"];
39 -> 60 [label="Control Dep"];
39 -> 62 [label="Control Dep"];
39 -> 67 [label="Control Dep"];
39 -> 64 [label="Control Dep"];
39 -> 66 [label="Control Dep"];
39 -> 78 [label="Control Dep"];
39 -> 72 [label="Control Dep"];
39 -> 77 [label="Control Dep"];
39 -> 73 [label="Control Dep"];
39 -> 75 [label="Control Dep"];
39 -> 76 [label="Control Dep"];
39 -> 87 [label="Control Dep"];
39 -> 84 [label="Control Dep"];
39 -> 80 [label="Control Dep"];
39 -> 82 [label="Control Dep"];
39 -> 83 [label="Control Dep"];
39 -> 120 [label="Control Dep"];
39 -> 90 [label="Control Dep"];
39 -> 88 [label="Control Dep"];
39 -> 89 [label="Control Dep"];
43 -> 45 [label="Data Dep"];
44 -> 42 [label="AST"];
44 -> 43 [label="AST"];
44 -> 41 [label="AST"];
45 -> 50 [label="Define-Use"];
45 -> 62 [label="Define-Use"];
46 -> 45 [label="AST"];
46 -> 40 [label="AST"];
46 -> 44 [label="AST"];
50 -> 70 [label="Data Dep"];
55 -> 70 [label="Data Dep"];
56 -> 54 [label="AST"];
56 -> 55 [label="AST"];
56 -> 53 [label="AST"];
57 -> 52 [label="AST"];
57 -> 56 [label="AST"];
57 -> 51 [label="AST"];
59 -> 57 [label="AST"];
59 -> 58 [label="AST"];
62 -> 70 [label="Data Dep"];
63 -> 61 [label="AST"];
63 -> 62 [label="AST"];
63 -> 60 [label="AST"];
67 -> 65 [label="AST"];
67 -> 66 [label="AST"];
67 -> 64 [label="AST"];
68 -> 63 [label="AST"];
68 -> 67 [label="AST"];
69 -> 49 [label="AST"];
69 -> 50 [label="AST"];
69 -> 48 [label="AST"];
69 -> 59 [label="AST"];
69 -> 68 [label="AST"];
70 -> 76 [label="Define-Use"];
70 -> 83 [label="Define-Use"];
70 -> 94 [label="Define-Use"];
70 -> 95 [label="Define-Use"];
70 -> 114 [label="Define-Use"];
70 -> 115 [label="Define-Use"];
71 -> 70 [label="AST"];
71 -> 47 [label="AST"];
71 -> 69 [label="AST"];
72 -> 83 [label="Define-Use"];
72 -> 94 [label="Define-Use"];
72 -> 95 [label="Define-Use"];
72 -> 114 [label="Define-Use"];
72 -> 115 [label="Define-Use"];
76 -> 72 [label="Data Dep"];
77 -> 74 [label="AST"];
77 -> 75 [label="AST"];
77 -> 73 [label="AST"];
77 -> 76 [label="AST"];
78 -> 72 [label="AST"];
78 -> 77 [label="AST"];
82 -> 86 [label="Data Dep"];
83 -> 86 [label="Data Dep"];
84 -> 81 [label="AST"];
84 -> 85 [label="AST"];
84 -> 82 [label="AST"];
84 -> 80 [label="AST"];
84 -> 83 [label="AST"];
86 -> 88 [label="Define-Use"];
86 -> 104 [label="Define-Use"];
87 -> 86 [label="AST"];
87 -> 79 [label="AST"];
87 -> 84 [label="AST"];
90 -> 88 [label="AST"];
90 -> 89 [label="AST"];
90 -> 97 [label="Control Dep"];
90 -> 96 [label="Control Dep"];
90 -> 91 [label="Control Dep"];
90 -> 93 [label="Control Dep"];
90 -> 94 [label="Control Dep"];
90 -> 95 [label="Control Dep"];
90 -> 119 [label="Control Dep"];
90 -> 118 [label="Control Dep"];
90 -> 110 [label="Control Dep"];
90 -> 101 [label="Control Dep"];
90 -> 98 [label="Control Dep"];
90 -> 100 [label="Control Dep"];
90 -> 109 [label="Control Dep"];
90 -> 107 [label="Control Dep"];
90 -> 102 [label="Control Dep"];
90 -> 106 [label="Control Dep"];
90 -> 104 [label="Control Dep"];
90 -> 108 [label="Control Dep"];
96 -> 92 [label="AST"];
96 -> 93 [label="AST"];
96 -> 91 [label="AST"];
96 -> 94 [label="AST"];
96 -> 95 [label="AST"];
97 -> 96 [label="AST"];
101 -> 99 [label="AST"];
101 -> 100 [label="AST"];
101 -> 98 [label="AST"];
104 -> 105 [label="AST"];
106 -> 104 [label="AST"];
107 -> 103 [label="AST"];
107 -> 106 [label="AST"];
107 -> 102 [label="AST"];
109 -> 107 [label="AST"];
109 -> 108 [label="AST"];
109 -> 127 [label="Action"];
109 -> 130 [label="Action"];
110 -> 101 [label="AST"];
110 -> 109 [label="AST"];
110 -> 117 [label="Control Dep"];
110 -> 116 [label="Control Dep"];
110 -> 111 [label="Control Dep"];
110 -> 113 [label="Control Dep"];
110 -> 114 [label="Control Dep"];
110 -> 115 [label="Control Dep"];
110 -> 129 [label="Action"];
116 -> 112 [label="AST"];
116 -> 113 [label="AST"];
116 -> 111 [label="AST"];
116 -> 114 [label="AST"];
116 -> 115 [label="AST"];
117 -> 116 [label="AST"];
118 -> 110 [label="AST"];
118 -> 117 [label="AST"];
119 -> 118 [label="AST"];
120 -> 90 [label="AST"];
120 -> 97 [label="AST"];
120 -> 119 [label="AST"];
121 -> 46 [label="AST"];
121 -> 71 [label="AST"];
121 -> 78 [label="AST"];
121 -> 87 [label="AST"];
121 -> 120 [label="AST"];
122 -> 39 [label="AST"];
122 -> 121 [label="AST"];
123 -> 32 [label="AST"];
123 -> 122 [label="AST"];
124 -> 16 [label="AST"];
124 -> 21 [label="AST"];
124 -> 23 [label="AST"];
124 -> 123 [label="AST"];
125 -> 12 [label="AST"];
125 -> 124 [label="AST"];
126 -> 1 [label="AST"];
126 -> 0 [label="AST"];
126 -> 2 [label="AST"];
126 -> 4 [label="AST"];
126 -> 125 [label="AST"];
127 -> 128 [label="Action"];
130 -> 118 [label="Action"];
}