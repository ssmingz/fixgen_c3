digraph "buildWebsphereJar#?,File,File" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@buildWebsphereJar" shape=ellipse]
2 [label="2:CtParameterImpl@File sourceJar" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@File" shape=ellipse]
4 [label="2:CtParameterImpl@File destJar" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@File" shape=ellipse]
6 [label="4:CtFieldReadImpl@ejbdeploy" shape=ellipse]
7 [label="5:CtTypeReferenceImpl@Java" shape=ellipse]
8 [label="5:CtExecutableReferenceImpl@createTask(java.lang.String)" shape=ellipse]
9 [label="5:CtVirtualElement@createTask" shape=ellipse]
10 [label="5:CtExecutableReferenceImpl@getProject()" shape=ellipse]
11 [label="5:CtVirtualElement@getProject" shape=ellipse]
12 [label="5:CtExecutableReferenceImpl@getTask()" shape=ellipse]
13 [label="5:CtVirtualElement@getTask" shape=ellipse]
14 [label="5:CtInvocationImpl@getTask()" shape=ellipse]
15 [label="5:CtInvocationImpl@getTask().getProject()" shape=ellipse]
16 [label="5:CtLiteralImpl@\"java\"" shape=ellipse]
17 [label="5:CtInvocationImpl@((Java) (getTask().getProject().createTask(\"java\")))" shape=ellipse]
18 [label="5:CtTypeReferenceImpl@Java" shape=ellipse]
19 [label="5:CtVirtualElement@javaTask" shape=ellipse]
20 [label="5:CtLocalVariableImpl@Java javaTask = ((Java) (getTask().getProject().createTask(\"java\")))" shape=ellipse]
21 [label="6:CtExecutableReferenceImpl@setValue(java.lang.String)" shape=ellipse]
22 [label="6:CtVirtualElement@setValue" shape=ellipse]
23 [label="6:CtExecutableReferenceImpl@createJvmarg()" shape=ellipse]
24 [label="6:CtVirtualElement@createJvmarg" shape=ellipse]
25 [label="6:CtVariableReadImpl@javaTask" shape=ellipse]
26 [label="6:CtInvocationImpl@javaTask.createJvmarg()" shape=ellipse]
27 [label="6:CtLiteralImpl@\"-Xms64m\"" shape=ellipse]
28 [label="6:CtInvocationImpl@javaTask.createJvmarg().setValue(\"-Xms64m\")" shape=ellipse]
29 [label="7:CtExecutableReferenceImpl@setValue(java.lang.String)" shape=ellipse]
30 [label="7:CtVirtualElement@setValue" shape=ellipse]
31 [label="7:CtExecutableReferenceImpl@createJvmarg()" shape=ellipse]
32 [label="7:CtVirtualElement@createJvmarg" shape=ellipse]
33 [label="7:CtVariableReadImpl@javaTask" shape=ellipse]
34 [label="7:CtInvocationImpl@javaTask.createJvmarg()" shape=ellipse]
35 [label="7:CtLiteralImpl@\"-Xmx128m\"" shape=ellipse]
36 [label="7:CtInvocationImpl@javaTask.createJvmarg().setValue(\"-Xmx128m\")" shape=ellipse]
37 [label="8:CtTypeReferenceImpl@Environment.Variable" shape=ellipse]
38 [label="8:CtTypeReferenceImpl@Environment" shape=ellipse]
39 [label="8:CtTypeReferenceImpl@Environment.Variable" shape=ellipse]
40 [label="8:CtConstructorCallImpl@new Environment.Variable()" shape=ellipse]
41 [label="8:CtVirtualElement@var" shape=ellipse]
42 [label="8:CtLocalVariableImpl@Environment.Variable var = new Environment.Variable()" shape=ellipse]
43 [label="9:CtExecutableReferenceImpl@setKey(java.lang.String)" shape=ellipse]
44 [label="9:CtVirtualElement@setKey" shape=ellipse]
45 [label="9:CtVariableReadImpl@var" shape=ellipse]
46 [label="9:CtLiteralImpl@\"websphere.lib.dir\"" shape=ellipse]
47 [label="9:CtInvocationImpl@var.setKey(\"websphere.lib.dir\")" shape=ellipse]
48 [label="10:CtTypeReferenceImpl@File" shape=ellipse]
49 [label="10:CtTypeReferenceImpl@File" shape=ellipse]
50 [label="10:CtFieldReadImpl@websphereHome" shape=ellipse]
51 [label="10:CtLiteralImpl@\"lib\"" shape=ellipse]
52 [label="10:CtConstructorCallImpl@new File(websphereHome, \"lib\")" shape=ellipse]
53 [label="10:CtVirtualElement@libdir" shape=ellipse]
54 [label="10:CtLocalVariableImpl@File libdir = new File(websphereHome, \"lib\")" shape=ellipse]
55 [label="11:CtExecutableReferenceImpl@setValue()" shape=ellipse]
56 [label="11:CtVirtualElement@setValue" shape=ellipse]
57 [label="11:CtVariableReadImpl@var" shape=ellipse]
58 [label="11:CtExecutableReferenceImpl@getAbsolutePath()" shape=ellipse]
59 [label="11:CtVirtualElement@getAbsolutePath" shape=ellipse]
60 [label="11:CtVariableReadImpl@libdir" shape=ellipse]
61 [label="11:CtInvocationImpl@libdir.getAbsolutePath()" shape=ellipse]
62 [label="11:CtInvocationImpl@var.setValue(libdir.getAbsolutePath())" shape=ellipse]
63 [label="12:CtExecutableReferenceImpl@addSysproperty(Environment.Variable)" shape=ellipse]
64 [label="12:CtVirtualElement@addSysproperty" shape=ellipse]
65 [label="12:CtVariableReadImpl@javaTask" shape=ellipse]
66 [label="12:CtVariableReadImpl@var" shape=ellipse]
67 [label="12:CtInvocationImpl@javaTask.addSysproperty(var)" shape=ellipse]
68 [label="13:CtExecutableReferenceImpl@setDir()" shape=ellipse]
69 [label="13:CtVirtualElement@setDir" shape=ellipse]
70 [label="13:CtVariableReadImpl@javaTask" shape=ellipse]
71 [label="13:CtFieldReadImpl@websphereHome" shape=ellipse]
72 [label="13:CtInvocationImpl@javaTask.setDir(websphereHome)" shape=ellipse]
73 [label="14:CtExecutableReferenceImpl@setTaskName(java.lang.String)" shape=ellipse]
74 [label="14:CtVirtualElement@setTaskName" shape=ellipse]
75 [label="14:CtVariableReadImpl@javaTask" shape=ellipse]
76 [label="14:CtLiteralImpl@\"ejbdeploy\"" shape=ellipse]
77 [label="14:CtInvocationImpl@javaTask.setTaskName(\"ejbdeploy\")" shape=ellipse]
78 [label="15:CtExecutableReferenceImpl@setClassname(java.lang.String)" shape=ellipse]
79 [label="15:CtVirtualElement@setClassname" shape=ellipse]
80 [label="15:CtVariableReadImpl@javaTask" shape=ellipse]
81 [label="15:CtLiteralImpl@\"com.ibm.etools.ejbdeploy.EJBDeploy\"" shape=ellipse]
82 [label="15:CtInvocationImpl@javaTask.setClassname(\"com.ibm.etools.ejbdeploy.EJBDeploy\")" shape=ellipse]
83 [label="16:CtExecutableReferenceImpl@setValue()" shape=ellipse]
84 [label="16:CtVirtualElement@setValue" shape=ellipse]
85 [label="16:CtExecutableReferenceImpl@createArg()" shape=ellipse]
86 [label="16:CtVirtualElement@createArg" shape=ellipse]
87 [label="16:CtVariableReadImpl@javaTask" shape=ellipse]
88 [label="16:CtInvocationImpl@javaTask.createArg()" shape=ellipse]
89 [label="16:CtExecutableReferenceImpl@getPath()" shape=ellipse]
90 [label="16:CtVirtualElement@getPath" shape=ellipse]
91 [label="16:CtVariableReadImpl@sourceJar" shape=ellipse]
92 [label="16:CtInvocationImpl@sourceJar.getPath()" shape=ellipse]
93 [label="16:CtInvocationImpl@javaTask.createArg().setValue(sourceJar.getPath())" shape=ellipse]
94 [label="17:CtExecutableReferenceImpl@setValue()" shape=ellipse]
95 [label="17:CtVirtualElement@setValue" shape=ellipse]
96 [label="17:CtExecutableReferenceImpl@createArg()" shape=ellipse]
97 [label="17:CtVirtualElement@createArg" shape=ellipse]
98 [label="17:CtVariableReadImpl@javaTask" shape=ellipse]
99 [label="17:CtInvocationImpl@javaTask.createArg()" shape=ellipse]
100 [label="17:CtFieldReadImpl@tempdir" shape=ellipse]
101 [label="17:CtInvocationImpl@javaTask.createArg().setValue(tempdir)" shape=ellipse]
102 [label="18:CtExecutableReferenceImpl@setValue()" shape=ellipse]
103 [label="18:CtVirtualElement@setValue" shape=ellipse]
104 [label="18:CtExecutableReferenceImpl@createArg()" shape=ellipse]
105 [label="18:CtVirtualElement@createArg" shape=ellipse]
106 [label="18:CtVariableReadImpl@javaTask" shape=ellipse]
107 [label="18:CtInvocationImpl@javaTask.createArg()" shape=ellipse]
108 [label="18:CtExecutableReferenceImpl@getPath()" shape=ellipse]
109 [label="18:CtVirtualElement@getPath" shape=ellipse]
110 [label="18:CtVariableReadImpl@destJar" shape=ellipse]
111 [label="18:CtInvocationImpl@destJar.getPath()" shape=ellipse]
112 [label="18:CtInvocationImpl@javaTask.createArg().setValue(destJar.getPath())" shape=ellipse]
113 [label="19:CtExecutableReferenceImpl@setLine()" shape=ellipse]
114 [label="19:CtVirtualElement@setLine" shape=ellipse]
115 [label="19:CtExecutableReferenceImpl@createArg()" shape=ellipse]
116 [label="19:CtVirtualElement@createArg" shape=ellipse]
117 [label="19:CtVariableReadImpl@javaTask" shape=ellipse]
118 [label="19:CtInvocationImpl@javaTask.createArg()" shape=ellipse]
119 [label="19:CtExecutableReferenceImpl@getOptions()" shape=ellipse]
120 [label="19:CtVirtualElement@getOptions" shape=ellipse]
121 [label="19:CtInvocationImpl@getOptions()" shape=ellipse]
122 [label="19:CtInvocationImpl@javaTask.createArg().setLine(getOptions())" shape=ellipse]
123 [label="20:CtExecutableReferenceImpl@getCombinedClasspath()" shape=ellipse]
124 [label="20:CtVirtualElement@getCombinedClasspath" shape=ellipse]
125 [label="20:CtInvocationImpl@getCombinedClasspath()" shape=ellipse]
126 [label="20:CtLiteralImpl@null" shape=ellipse]
127 [label="20:CtBinaryOperatorImpl@(getCombinedClasspath() != null)" shape=ellipse]
128 [label="20:CtExecutableReferenceImpl@length()" shape=ellipse]
129 [label="20:CtVirtualElement@length" shape=ellipse]
130 [label="20:CtExecutableReferenceImpl@toString()" shape=ellipse]
131 [label="20:CtVirtualElement@toString" shape=ellipse]
132 [label="20:CtExecutableReferenceImpl@getCombinedClasspath()" shape=ellipse]
133 [label="20:CtVirtualElement@getCombinedClasspath" shape=ellipse]
134 [label="20:CtInvocationImpl@getCombinedClasspath()" shape=ellipse]
135 [label="20:CtInvocationImpl@getCombinedClasspath().toString()" shape=ellipse]
136 [label="20:CtInvocationImpl@getCombinedClasspath().toString().length()" shape=ellipse]
137 [label="20:CtLiteralImpl@0" shape=ellipse]
138 [label="20:CtBinaryOperatorImpl@(getCombinedClasspath().toString().length() > 0)" shape=ellipse]
139 [label="20:CtBinaryOperatorImpl@(getCombinedClasspath() != null) && (getCombinedClasspath().toString().length() > 0)" shape=ellipse]
140 [label="21:CtExecutableReferenceImpl@setValue(java.lang.String)" shape=ellipse]
141 [label="21:CtVirtualElement@setValue" shape=ellipse]
142 [label="21:CtExecutableReferenceImpl@createArg()" shape=ellipse]
143 [label="21:CtVirtualElement@createArg" shape=ellipse]
144 [label="21:CtVariableReadImpl@javaTask" shape=ellipse]
145 [label="21:CtInvocationImpl@javaTask.createArg()" shape=ellipse]
146 [label="21:CtLiteralImpl@\"-cp\"" shape=ellipse]
147 [label="21:CtInvocationImpl@javaTask.createArg().setValue(\"-cp\")" shape=ellipse]
148 [label="22:CtExecutableReferenceImpl@setValue()" shape=ellipse]
149 [label="22:CtVirtualElement@setValue" shape=ellipse]
150 [label="22:CtExecutableReferenceImpl@createArg()" shape=ellipse]
151 [label="22:CtVirtualElement@createArg" shape=ellipse]
152 [label="22:CtVariableReadImpl@javaTask" shape=ellipse]
153 [label="22:CtInvocationImpl@javaTask.createArg()" shape=ellipse]
154 [label="22:CtExecutableReferenceImpl@toString()" shape=ellipse]
155 [label="22:CtVirtualElement@toString" shape=ellipse]
156 [label="22:CtExecutableReferenceImpl@getCombinedClasspath()" shape=ellipse]
157 [label="22:CtVirtualElement@getCombinedClasspath" shape=ellipse]
158 [label="22:CtInvocationImpl@getCombinedClasspath()" shape=ellipse]
159 [label="22:CtInvocationImpl@getCombinedClasspath().toString()" shape=ellipse]
160 [label="22:CtInvocationImpl@javaTask.createArg().setValue(getCombinedClasspath().toString())" shape=ellipse]
161 [label="20:CtBlockImpl@\{
    javaTask.createArg().setValue(\"-cp\");
    javaTask.createArg().setValue(getCombinedClasspath().toString());
\}" shape=ellipse]
162 [label="20:CtIfImpl@if ((getCombinedClasspath() != null) && (getCombinedClasspath().toString().length() > 0)) \{
    javaTask.createArg().setValue(\"-cp\");
    javaTask.createArg().setValue(getCombinedClasspath().toString());
\}" shape=ellipse]
163 [label="24:CtTypeReferenceImpl@Path" shape=ellipse]
164 [label="24:CtFieldReadImpl@wasClasspath" shape=ellipse]
165 [label="24:CtVirtualElement@classpath" shape=ellipse]
166 [label="24:CtLocalVariableImpl@Path classpath = wasClasspath" shape=ellipse]
167 [label="25:CtVariableReadImpl@classpath" shape=ellipse]
168 [label="25:CtLiteralImpl@null" shape=ellipse]
169 [label="25:CtBinaryOperatorImpl@classpath == null" shape=ellipse]
170 [label="26:CtVariableWriteImpl@classpath" shape=ellipse]
171 [label="26:CtExecutableReferenceImpl@getCombinedClasspath()" shape=ellipse]
172 [label="26:CtVirtualElement@getCombinedClasspath" shape=ellipse]
173 [label="26:CtInvocationImpl@getCombinedClasspath()" shape=ellipse]
174 [label="26:CtAssignmentImpl@classpath = getCombinedClasspath()" shape=ellipse]
175 [label="25:CtBlockImpl@\{
    classpath = getCombinedClasspath();
\}" shape=ellipse]
176 [label="25:CtIfImpl@if (classpath == null) \{
    classpath = getCombinedClasspath();
\}" shape=ellipse]
177 [label="28:CtVariableReadImpl@classpath" shape=ellipse]
178 [label="28:CtLiteralImpl@null" shape=ellipse]
179 [label="28:CtBinaryOperatorImpl@classpath != null" shape=ellipse]
180 [label="29:CtExecutableReferenceImpl@setClasspath(Path)" shape=ellipse]
181 [label="29:CtVirtualElement@setClasspath" shape=ellipse]
182 [label="29:CtVariableReadImpl@javaTask" shape=ellipse]
183 [label="29:CtVariableReadImpl@classpath" shape=ellipse]
184 [label="29:CtInvocationImpl@javaTask.setClasspath(classpath)" shape=ellipse]
185 [label="30:CtExecutableReferenceImpl@setFork(boolean)" shape=ellipse]
186 [label="30:CtVirtualElement@setFork" shape=ellipse]
187 [label="30:CtVariableReadImpl@javaTask" shape=ellipse]
188 [label="30:CtLiteralImpl@true" shape=ellipse]
189 [label="30:CtInvocationImpl@javaTask.setFork(true)" shape=ellipse]
190 [label="28:CtBlockImpl@\{
    javaTask.setClasspath(classpath);
    javaTask.setFork(true);
\}" shape=ellipse]
191 [label="32:CtExecutableReferenceImpl@setFork(boolean)" shape=ellipse]
192 [label="32:CtVirtualElement@setFork" shape=ellipse]
193 [label="32:CtVariableReadImpl@javaTask" shape=ellipse]
194 [label="32:CtLiteralImpl@true" shape=ellipse]
195 [label="32:CtInvocationImpl@javaTask.setFork(true)" shape=ellipse]
196 [label="31:CtBlockImpl@\{
    javaTask.setFork(true);
\}" shape=ellipse]
197 [label="28:CtIfImpl@if (classpath != null) \{
    javaTask.setClasspath(classpath);
    javaTask.setFork(true);
\} else \{
    javaTask.setFork(true);
\}" shape=ellipse]
198 [label="34:CtExecutableReferenceImpl@log(<unknown>,<unknown>)" shape=ellipse]
199 [label="34:CtVirtualElement@log" shape=ellipse]
200 [label="34:CtLiteralImpl@\"Calling websphere.ejbdeploy for \"" shape=ellipse]
201 [label="34:CtExecutableReferenceImpl@toString()" shape=ellipse]
202 [label="34:CtVirtualElement@toString" shape=ellipse]
203 [label="34:CtVariableReadImpl@sourceJar" shape=ellipse]
204 [label="34:CtInvocationImpl@sourceJar.toString()" shape=ellipse]
205 [label="34:CtBinaryOperatorImpl@\"Calling websphere.ejbdeploy for \" + sourceJar.toString()" shape=ellipse]
206 [label="34:CtTypeAccessImpl@MSG_VERBOSE" shape=ellipse]
207 [label="34:CtInvocationImpl@log(\"Calling websphere.ejbdeploy for \" + sourceJar.toString(), MSG_VERBOSE)" shape=ellipse]
208 [label="35:CtExecutableReferenceImpl@execute()" shape=ellipse]
209 [label="35:CtVirtualElement@execute" shape=ellipse]
210 [label="35:CtVariableReadImpl@javaTask" shape=ellipse]
211 [label="35:CtInvocationImpl@javaTask.execute()" shape=ellipse]
212 [label="4:CtBlockImpl@\{
    Java javaTask = ((Java) (getTask().getProject().createTask(\"java\")));
    javaTask.createJvmarg().setValue(\"-Xms64m\");
    javaTask.createJvmarg().setValue(\"-Xmx128m\");
    Environment.Variable var = new Environment.Variable();
    var.setKey(\"websphere.lib.dir\");
    File libdir = new File(websphereHome, \"lib\");
    var.setValue(libdir.getAbsolutePath());
    javaTask.addSysproperty(var);
    javaTask.setDir(websphereHome);
    javaTask.setTaskName(\"ejbdeploy\");
    javaTask.setClassname(\"com.ibm.etools.ejbdeploy.EJBDeploy\");
    javaTask.createArg().setValue(sourceJar.getPath());
    javaTask.createArg().setValue(tempdir);
    javaTask.createArg().setValue(destJar.getPath());
    javaTask.createArg().setLine(getOptions());
    if ((getCombinedClasspath() != null) && (getCombinedClasspath().toString().length() > 0)) \{
        javaTask.createArg().setValue(\"-cp\");
        javaTask.createArg().setValue(getCombinedClasspath().toString());
    \}
    Path classpath = wasClasspath;
    if (classpath == null) \{
        classpath = getCombinedClasspath();
    \}
    if (classpath != null) \{
        javaTask.setClasspath(classpath);
        javaTask.setFork(true);
    \} else \{
        javaTask.setFork(true);
    \}
    log(\"Calling websphere.ejbdeploy for \" + sourceJar.toString(), MSG_VERBOSE);
    javaTask.execute();
\}" shape=ellipse]
213 [label="4:CtIfImpl@if (ejbdeploy) \{
    Java javaTask = ((Java) (getTask().getProject().createTask(\"java\")));
    javaTask.createJvmarg().setValue(\"-Xms64m\");
    javaTask.createJvmarg().setValue(\"-Xmx128m\");
    Environment.Variable var = new Environment.Variable();
    var.setKey(\"websphere.lib.dir\");
    File libdir = new File(websphereHome, \"lib\");
    var.setValue(libdir.getAbsolutePath());
    javaTask.addSysproperty(var);
    javaTask.setDir(websphereHome);
    javaTask.setTaskName(\"ejbdeploy\");
    javaTask.setClassname(\"com.ibm.etools.ejbdeploy.EJBDeploy\");
    javaTask.createArg().setValue(sourceJar.getPath());
    javaTask.createArg().setValue(tempdir);
    javaTask.createArg().setValue(destJar.getPath());
    javaTask.createArg().setLine(getOptions());
    if ((getCombinedClasspath() != null) && (getCombinedClasspath().toString().length() > 0)) \{
        javaTask.createArg().setValue(\"-cp\");
        javaTask.createArg().setValue(getCombinedClasspath().toString());
    \}
    Path classpath = wasClasspath;
    if (classpath == null) \{
        classpath = getCombinedClasspath();
    \}
    if (classpath != null) \{
        javaTask.setClasspath(classpath);
        javaTask.setFork(true);
    \} else \{
        javaTask.setFork(true);
    \}
    log(\"Calling websphere.ejbdeploy for \" + sourceJar.toString(), MSG_VERBOSE);
    javaTask.execute();
\}" shape=ellipse]
214 [label="3:CtBlockImpl@\{
    if (ejbdeploy) \{
        Java javaTask = ((Java) (getTask().getProject().createTask(\"java\")));
        javaTask.createJvmarg().setValue(\"-Xms64m\");
        javaTask.createJvmarg().setValue(\"-Xmx128m\");
        Environment.Variable var = new Environment.Variable();
        var.setKey(\"websphere.lib.dir\");
        File libdir = new File(websphereHome, \"lib\");
        var.setValue(libdir.getAbsolutePath());
        javaTask.addSysproperty(var);
        javaTask.setDir(websphereHome);
        javaTask.setTaskName(\"ejbdeploy\");
        javaTask.setClassname(\"com.ibm.etools.ejbdeploy.EJBDeploy\");
        javaTask.createArg().setValue(sourceJar.getPath());
        javaTask.createArg().setValue(tempdir);
        javaTask.createArg().setValue(destJar.getPath());
        javaTask.createArg().setLine(getOptions());
        if ((getCombinedClasspath() != null) && (getCombinedClasspath().toString().length() > 0)) \{
            javaTask.createArg().setValue(\"-cp\");
            javaTask.createArg().setValue(getCombinedClasspath().toString());
        \}
        Path classpath = wasClasspath;
        if (classpath == null) \{
            classpath = getCombinedClasspath();
        \}
        if (classpath != null) \{
            javaTask.setClasspath(classpath);
            javaTask.setFork(true);
        \} else \{
            javaTask.setFork(true);
        \}
        log(\"Calling websphere.ejbdeploy for \" + sourceJar.toString(), MSG_VERBOSE);
        javaTask.execute();
    \}
\}" shape=ellipse]
215 [label="37:CtVirtualElement@e" shape=ellipse]
216 [label="37:CtTypeReferenceImpl@Exception" shape=ellipse]
217 [label="37:CtCatchVariableImpl@Exception e" shape=ellipse]
218 [label="38:CtTypeReferenceImpl@String" shape=ellipse]
219 [label="38:CtLiteralImpl@\"Exception while calling ejbdeploy. Details: \"" shape=ellipse]
220 [label="38:CtExecutableReferenceImpl@toString()" shape=ellipse]
221 [label="38:CtVirtualElement@toString" shape=ellipse]
222 [label="38:CtVariableReadImpl@e" shape=ellipse]
223 [label="38:CtInvocationImpl@e.toString()" shape=ellipse]
224 [label="38:CtBinaryOperatorImpl@\"Exception while calling ejbdeploy. Details: \" + e.toString()" shape=ellipse]
225 [label="38:CtVirtualElement@msg" shape=ellipse]
226 [label="38:CtLocalVariableImpl@String msg = \"Exception while calling ejbdeploy. Details: \" + e.toString()" shape=ellipse]
227 [label="39:CtTypeReferenceImpl@BuildException" shape=ellipse]
228 [label="39:CtVariableReadImpl@msg" shape=ellipse]
229 [label="39:CtVariableReadImpl@e" shape=ellipse]
230 [label="39:CtConstructorCallImpl@new BuildException(msg, e)" shape=ellipse]
231 [label="39:CtThrowImpl@throw new BuildException(msg, e)" shape=ellipse]
232 [label="37:CtBlockImpl@\{
    String msg = \"Exception while calling ejbdeploy. Details: \" + e.toString();
    throw new BuildException(msg, e);
\}" shape=ellipse]
233 [label="37:CtCatchImpl@ catch (Exception e) \{
    String msg = \"Exception while calling ejbdeploy. Details: \" + e.toString();
    throw new BuildException(msg, e);
\}" shape=ellipse]
234 [label="3:CtTryImpl@try \{
    if (ejbdeploy) \{
        Java javaTask = ((Java) (getTask().getProject().createTask(\"java\")));
        javaTask.createJvmarg().setValue(\"-Xms64m\");
        javaTask.createJvmarg().setValue(\"-Xmx128m\");
        Environment.Variable var = new Environment.Variable();
        var.setKey(\"websphere.lib.dir\");
        File libdir = new File(websphereHome, \"lib\");
        var.setValue(libdir.getAbsolutePath());
        javaTask.addSysproperty(var);
        javaTask.setDir(websphereHome);
        javaTask.setTaskName(\"ejbdeploy\");
        javaTask.setClassname(\"com.ibm.etools.ejbdeploy.EJBDeploy\");
        javaTask.createArg().setValue(sourceJar.getPath());
        javaTask.createArg().setValue(tempdir);
        javaTask.createArg().setValue(destJar.getPath());
        javaTask.createArg().setLine(getOptions());
        if ((getCombinedClasspath() != null) && (getCombinedClasspath().toString().length() > 0)) \{
            javaTask.createArg().setValue(\"-cp\");
            javaTask.createArg().setValue(getCombinedClasspath().toString());
        \}
        Path classpath = wasClasspath;
        if (classpath == null) \{
            classpath = getCombinedClasspath();
        \}
        if (classpath != null) \{
            javaTask.setClasspath(classpath);
            javaTask.setFork(true);
        \} else \{
            javaTask.setFork(true);
        \}
        log(\"Calling websphere.ejbdeploy for \" + sourceJar.toString(), MSG_VERBOSE);
        javaTask.execute();
    \}
\} catch (Exception e) \{
    String msg = \"Exception while calling ejbdeploy. Details: \" + e.toString();
    throw new BuildException(msg, e);
\}" shape=ellipse]
235 [label="2:CtBlockImpl@\{
    try \{
        if (ejbdeploy) \{
            Java javaTask = ((Java) (getTask().getProject().createTask(\"java\")));
            javaTask.createJvmarg().setValue(\"-Xms64m\");
            javaTask.createJvmarg().setValue(\"-Xmx128m\");
            Environment.Variable var = new Environment.Variable();
            var.setKey(\"websphere.lib.dir\");
            File libdir = new File(websphereHome, \"lib\");
            var.setValue(libdir.getAbsolutePath());
            javaTask.addSysproperty(var);
            javaTask.setDir(websphereHome);
            javaTask.setTaskName(\"ejbdeploy\");
            javaTask.setClassname(\"com.ibm.etools.ejbdeploy.EJBDeploy\");
            javaTask.createArg().setValue(sourceJar.getPath());
            javaTask.createArg().setValue(tempdir);
            javaTask.createArg().setValue(destJar.getPath());
            javaTask.createArg().setLine(getOptions());
            if ((getCombinedClasspath() != null) && (getCombinedClasspath().toString().length() > 0)) \{
                javaTask.createArg().setValue(\"-cp\");
                javaTask.createArg().setValue(getCombinedClasspath().toString());
            \}
            Path classpath = wasClasspath;
            if (classpath == null) \{
                classpath = getCombinedClasspath();
            \}
            if (classpath != null) \{
                javaTask.setClasspath(classpath);
                javaTask.setFork(true);
            \} else \{
                javaTask.setFork(true);
            \}
            log(\"Calling websphere.ejbdeploy for \" + sourceJar.toString(), MSG_VERBOSE);
            javaTask.execute();
        \}
    \} catch (Exception e) \{
        String msg = \"Exception while calling ejbdeploy. Details: \" + e.toString();
        throw new BuildException(msg, e);
    \}
\}" shape=ellipse]
236 [label="2:CtMethodImpl@private void buildWebsphereJar(File sourceJar, File destJar) \{
    try \{
        if (ejbdeploy) \{
            Java javaTask = ((Java) (getTask().getProject().createTask(\"java\")));
            javaTask.createJvmarg().setValue(\"-Xms64m\");
            javaTask.createJvmarg().setValue(\"-Xmx128m\");
            Environment.Variable var = new Environment.Variable();
            var.setKey(\"websphere.lib.dir\");
            File libdir = new File(websphereHome, \"lib\");
            var.setValue(libdir.getAbsolutePath());
            javaTask.addSysproperty(var);
            javaTask.setDir(websphereHome);
            javaTask.setTaskName(\"ejbdeploy\");
            javaTask.setClassname(\"com.ibm.etools.ejbdeploy.EJBDeploy\");
            javaTask.createArg().setValue(sourceJar.getPath());
            javaTask.createArg().setValue(tempdir);
            javaTask.createArg().setValue(destJar.getPath());
            javaTask.createArg().setLine(getOptions());
            if ((getCombinedClasspath() != null) && (getCombinedClasspath().toString().length() > 0)) \{
                javaTask.createArg().setValue(\"-cp\");
                javaTask.createArg().setValue(getCombinedClasspath().toString());
            \}
            Path classpath = wasClasspath;
            if (classpath == null) \{
                classpath = getCombinedClasspath();
            \}
            if (classpath != null) \{
                javaTask.setClasspath(classpath);
                javaTask.setFork(true);
            \} else \{
                javaTask.setFork(true);
            \}
            log(\"Calling websphere.ejbdeploy for \" + sourceJar.toString(), MSG_VERBOSE);
            javaTask.execute();
        \}
    \} catch (Exception e) \{
        String msg = \"Exception while calling ejbdeploy. Details: \" + e.toString();
        throw new BuildException(msg, e);
    \}
\}" shape=ellipse]
237 [label="5:Delete@DELETE" shape=ellipse]
238 [label="5:Insert@INSERT" shape=ellipse]
239 [label="5:CtConstructorCallImpl@new Java(getTask())" shape=ellipse]
240 [label="5:Move@MOVE" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
6 -> 212 [label="Control Dep"];
6 -> 20 [label="Control Dep"];
6 -> 17 [label="Control Dep"];
6 -> 8 [label="Control Dep"];
6 -> 15 [label="Control Dep"];
6 -> 10 [label="Control Dep"];
6 -> 14 [label="Control Dep"];
6 -> 12 [label="Control Dep"];
6 -> 16 [label="Control Dep"];
6 -> 28 [label="Control Dep"];
6 -> 21 [label="Control Dep"];
6 -> 26 [label="Control Dep"];
6 -> 23 [label="Control Dep"];
6 -> 25 [label="Control Dep"];
6 -> 27 [label="Control Dep"];
6 -> 36 [label="Control Dep"];
6 -> 29 [label="Control Dep"];
6 -> 34 [label="Control Dep"];
6 -> 31 [label="Control Dep"];
6 -> 33 [label="Control Dep"];
6 -> 35 [label="Control Dep"];
6 -> 42 [label="Control Dep"];
6 -> 40 [label="Control Dep"];
6 -> 47 [label="Control Dep"];
6 -> 43 [label="Control Dep"];
6 -> 45 [label="Control Dep"];
6 -> 46 [label="Control Dep"];
6 -> 54 [label="Control Dep"];
6 -> 52 [label="Control Dep"];
6 -> 50 [label="Control Dep"];
6 -> 51 [label="Control Dep"];
6 -> 62 [label="Control Dep"];
6 -> 55 [label="Control Dep"];
6 -> 57 [label="Control Dep"];
6 -> 61 [label="Control Dep"];
6 -> 58 [label="Control Dep"];
6 -> 60 [label="Control Dep"];
6 -> 67 [label="Control Dep"];
6 -> 63 [label="Control Dep"];
6 -> 65 [label="Control Dep"];
6 -> 66 [label="Control Dep"];
6 -> 72 [label="Control Dep"];
6 -> 68 [label="Control Dep"];
6 -> 70 [label="Control Dep"];
6 -> 71 [label="Control Dep"];
6 -> 77 [label="Control Dep"];
6 -> 73 [label="Control Dep"];
6 -> 75 [label="Control Dep"];
6 -> 76 [label="Control Dep"];
6 -> 82 [label="Control Dep"];
6 -> 78 [label="Control Dep"];
6 -> 80 [label="Control Dep"];
6 -> 81 [label="Control Dep"];
6 -> 93 [label="Control Dep"];
6 -> 83 [label="Control Dep"];
6 -> 88 [label="Control Dep"];
6 -> 85 [label="Control Dep"];
6 -> 87 [label="Control Dep"];
6 -> 92 [label="Control Dep"];
6 -> 89 [label="Control Dep"];
6 -> 91 [label="Control Dep"];
6 -> 101 [label="Control Dep"];
6 -> 94 [label="Control Dep"];
6 -> 99 [label="Control Dep"];
6 -> 96 [label="Control Dep"];
6 -> 98 [label="Control Dep"];
6 -> 100 [label="Control Dep"];
6 -> 112 [label="Control Dep"];
6 -> 102 [label="Control Dep"];
6 -> 107 [label="Control Dep"];
6 -> 104 [label="Control Dep"];
6 -> 106 [label="Control Dep"];
6 -> 111 [label="Control Dep"];
6 -> 108 [label="Control Dep"];
6 -> 110 [label="Control Dep"];
6 -> 122 [label="Control Dep"];
6 -> 113 [label="Control Dep"];
6 -> 118 [label="Control Dep"];
6 -> 115 [label="Control Dep"];
6 -> 117 [label="Control Dep"];
6 -> 121 [label="Control Dep"];
6 -> 119 [label="Control Dep"];
6 -> 162 [label="Control Dep"];
6 -> 139 [label="Control Dep"];
6 -> 127 [label="Control Dep"];
6 -> 125 [label="Control Dep"];
6 -> 123 [label="Control Dep"];
6 -> 126 [label="Control Dep"];
6 -> 138 [label="Control Dep"];
6 -> 136 [label="Control Dep"];
6 -> 128 [label="Control Dep"];
6 -> 135 [label="Control Dep"];
6 -> 130 [label="Control Dep"];
6 -> 134 [label="Control Dep"];
6 -> 132 [label="Control Dep"];
6 -> 137 [label="Control Dep"];
6 -> 166 [label="Control Dep"];
6 -> 164 [label="Control Dep"];
6 -> 176 [label="Control Dep"];
6 -> 169 [label="Control Dep"];
6 -> 167 [label="Control Dep"];
6 -> 168 [label="Control Dep"];
6 -> 197 [label="Control Dep"];
6 -> 179 [label="Control Dep"];
6 -> 177 [label="Control Dep"];
6 -> 178 [label="Control Dep"];
6 -> 207 [label="Control Dep"];
6 -> 198 [label="Control Dep"];
6 -> 205 [label="Control Dep"];
6 -> 200 [label="Control Dep"];
6 -> 204 [label="Control Dep"];
6 -> 201 [label="Control Dep"];
6 -> 203 [label="Control Dep"];
6 -> 206 [label="Control Dep"];
6 -> 211 [label="Control Dep"];
6 -> 208 [label="Control Dep"];
6 -> 210 [label="Control Dep"];
14 -> 13 [label="AST"];
14 -> 12 [label="AST"];
14 -> 240 [label="Action"];
15 -> 11 [label="AST"];
15 -> 14 [label="AST"];
15 -> 10 [label="AST"];
17 -> 9 [label="AST"];
17 -> 18 [label="AST"];
17 -> 15 [label="AST"];
17 -> 8 [label="AST"];
17 -> 16 [label="AST"];
17 -> 237 [label="Action"];
19 -> 25 [label="Define-Use"];
19 -> 33 [label="Define-Use"];
19 -> 65 [label="Define-Use"];
19 -> 70 [label="Define-Use"];
19 -> 75 [label="Define-Use"];
19 -> 80 [label="Define-Use"];
19 -> 87 [label="Define-Use"];
19 -> 98 [label="Define-Use"];
19 -> 106 [label="Define-Use"];
19 -> 117 [label="Define-Use"];
19 -> 144 [label="Define-Use"];
19 -> 152 [label="Define-Use"];
19 -> 182 [label="Define-Use"];
19 -> 187 [label="Define-Use"];
19 -> 193 [label="Define-Use"];
19 -> 210 [label="Define-Use"];
20 -> 19 [label="AST"];
20 -> 7 [label="AST"];
20 -> 17 [label="AST"];
20 -> 238 [label="Action"];
26 -> 24 [label="AST"];
26 -> 25 [label="AST"];
26 -> 23 [label="AST"];
28 -> 22 [label="AST"];
28 -> 26 [label="AST"];
28 -> 21 [label="AST"];
28 -> 27 [label="AST"];
34 -> 32 [label="AST"];
34 -> 33 [label="AST"];
34 -> 31 [label="AST"];
36 -> 30 [label="AST"];
36 -> 34 [label="AST"];
36 -> 29 [label="AST"];
36 -> 35 [label="AST"];
37 -> 38 [label="AST"];
41 -> 45 [label="Define-Use"];
41 -> 57 [label="Define-Use"];
41 -> 66 [label="Define-Use"];
42 -> 41 [label="AST"];
42 -> 37 [label="AST"];
42 -> 40 [label="AST"];
47 -> 44 [label="AST"];
47 -> 45 [label="AST"];
47 -> 43 [label="AST"];
47 -> 46 [label="AST"];
50 -> 53 [label="Data Dep"];
52 -> 50 [label="AST"];
52 -> 51 [label="AST"];
53 -> 60 [label="Define-Use"];
54 -> 53 [label="AST"];
54 -> 48 [label="AST"];
54 -> 52 [label="AST"];
61 -> 59 [label="AST"];
61 -> 60 [label="AST"];
61 -> 58 [label="AST"];
62 -> 56 [label="AST"];
62 -> 57 [label="AST"];
62 -> 55 [label="AST"];
62 -> 61 [label="AST"];
67 -> 64 [label="AST"];
67 -> 65 [label="AST"];
67 -> 63 [label="AST"];
67 -> 66 [label="AST"];
72 -> 69 [label="AST"];
72 -> 70 [label="AST"];
72 -> 68 [label="AST"];
72 -> 71 [label="AST"];
77 -> 74 [label="AST"];
77 -> 75 [label="AST"];
77 -> 73 [label="AST"];
77 -> 76 [label="AST"];
82 -> 79 [label="AST"];
82 -> 80 [label="AST"];
82 -> 78 [label="AST"];
82 -> 81 [label="AST"];
88 -> 86 [label="AST"];
88 -> 87 [label="AST"];
88 -> 85 [label="AST"];
92 -> 90 [label="AST"];
92 -> 91 [label="AST"];
92 -> 89 [label="AST"];
93 -> 84 [label="AST"];
93 -> 88 [label="AST"];
93 -> 83 [label="AST"];
93 -> 92 [label="AST"];
99 -> 97 [label="AST"];
99 -> 98 [label="AST"];
99 -> 96 [label="AST"];
101 -> 95 [label="AST"];
101 -> 99 [label="AST"];
101 -> 94 [label="AST"];
101 -> 100 [label="AST"];
107 -> 105 [label="AST"];
107 -> 106 [label="AST"];
107 -> 104 [label="AST"];
111 -> 109 [label="AST"];
111 -> 110 [label="AST"];
111 -> 108 [label="AST"];
112 -> 103 [label="AST"];
112 -> 107 [label="AST"];
112 -> 102 [label="AST"];
112 -> 111 [label="AST"];
118 -> 116 [label="AST"];
118 -> 117 [label="AST"];
118 -> 115 [label="AST"];
121 -> 120 [label="AST"];
121 -> 119 [label="AST"];
122 -> 114 [label="AST"];
122 -> 118 [label="AST"];
122 -> 113 [label="AST"];
122 -> 121 [label="AST"];
125 -> 124 [label="AST"];
125 -> 123 [label="AST"];
127 -> 125 [label="AST"];
127 -> 126 [label="AST"];
134 -> 133 [label="AST"];
134 -> 132 [label="AST"];
135 -> 131 [label="AST"];
135 -> 134 [label="AST"];
135 -> 130 [label="AST"];
136 -> 129 [label="AST"];
136 -> 135 [label="AST"];
136 -> 128 [label="AST"];
138 -> 136 [label="AST"];
138 -> 137 [label="AST"];
139 -> 127 [label="AST"];
139 -> 138 [label="AST"];
139 -> 161 [label="Control Dep"];
139 -> 147 [label="Control Dep"];
139 -> 140 [label="Control Dep"];
139 -> 145 [label="Control Dep"];
139 -> 142 [label="Control Dep"];
139 -> 144 [label="Control Dep"];
139 -> 146 [label="Control Dep"];
139 -> 160 [label="Control Dep"];
139 -> 148 [label="Control Dep"];
139 -> 153 [label="Control Dep"];
139 -> 150 [label="Control Dep"];
139 -> 152 [label="Control Dep"];
139 -> 159 [label="Control Dep"];
139 -> 154 [label="Control Dep"];
139 -> 158 [label="Control Dep"];
139 -> 156 [label="Control Dep"];
145 -> 143 [label="AST"];
145 -> 144 [label="AST"];
145 -> 142 [label="AST"];
147 -> 141 [label="AST"];
147 -> 145 [label="AST"];
147 -> 140 [label="AST"];
147 -> 146 [label="AST"];
153 -> 151 [label="AST"];
153 -> 152 [label="AST"];
153 -> 150 [label="AST"];
158 -> 157 [label="AST"];
158 -> 156 [label="AST"];
159 -> 155 [label="AST"];
159 -> 158 [label="AST"];
159 -> 154 [label="AST"];
160 -> 149 [label="AST"];
160 -> 153 [label="AST"];
160 -> 148 [label="AST"];
160 -> 159 [label="AST"];
161 -> 147 [label="AST"];
161 -> 160 [label="AST"];
162 -> 139 [label="AST"];
162 -> 161 [label="AST"];
164 -> 165 [label="Data Dep"];
165 -> 167 [label="Define-Use"];
165 -> 177 [label="Define-Use"];
165 -> 183 [label="Define-Use"];
166 -> 165 [label="AST"];
166 -> 163 [label="AST"];
166 -> 164 [label="AST"];
169 -> 167 [label="AST"];
169 -> 168 [label="AST"];
169 -> 175 [label="Control Dep"];
169 -> 174 [label="Control Dep"];
169 -> 170 [label="Control Dep"];
169 -> 173 [label="Control Dep"];
169 -> 171 [label="Control Dep"];
170 -> 177 [label="Define-Use"];
170 -> 183 [label="Define-Use"];
173 -> 172 [label="AST"];
173 -> 171 [label="AST"];
174 -> 170 [label="AST"];
174 -> 173 [label="AST"];
175 -> 174 [label="AST"];
176 -> 169 [label="AST"];
176 -> 175 [label="AST"];
179 -> 177 [label="AST"];
179 -> 178 [label="AST"];
179 -> 190 [label="Control Dep"];
179 -> 184 [label="Control Dep"];
179 -> 180 [label="Control Dep"];
179 -> 182 [label="Control Dep"];
179 -> 183 [label="Control Dep"];
179 -> 189 [label="Control Dep"];
179 -> 185 [label="Control Dep"];
179 -> 187 [label="Control Dep"];
179 -> 188 [label="Control Dep"];
179 -> 196 [label="Control Dep"];
179 -> 195 [label="Control Dep"];
179 -> 191 [label="Control Dep"];
179 -> 193 [label="Control Dep"];
179 -> 194 [label="Control Dep"];
184 -> 181 [label="AST"];
184 -> 182 [label="AST"];
184 -> 180 [label="AST"];
184 -> 183 [label="AST"];
189 -> 186 [label="AST"];
189 -> 187 [label="AST"];
189 -> 185 [label="AST"];
189 -> 188 [label="AST"];
190 -> 184 [label="AST"];
190 -> 189 [label="AST"];
195 -> 192 [label="AST"];
195 -> 193 [label="AST"];
195 -> 191 [label="AST"];
195 -> 194 [label="AST"];
196 -> 195 [label="AST"];
197 -> 179 [label="AST"];
197 -> 190 [label="AST"];
197 -> 196 [label="AST"];
204 -> 202 [label="AST"];
204 -> 203 [label="AST"];
204 -> 201 [label="AST"];
205 -> 200 [label="AST"];
205 -> 204 [label="AST"];
207 -> 199 [label="AST"];
207 -> 198 [label="AST"];
207 -> 205 [label="AST"];
207 -> 206 [label="AST"];
211 -> 209 [label="AST"];
211 -> 210 [label="AST"];
211 -> 208 [label="AST"];
212 -> 20 [label="AST"];
212 -> 28 [label="AST"];
212 -> 36 [label="AST"];
212 -> 42 [label="AST"];
212 -> 47 [label="AST"];
212 -> 54 [label="AST"];
212 -> 62 [label="AST"];
212 -> 67 [label="AST"];
212 -> 72 [label="AST"];
212 -> 77 [label="AST"];
212 -> 82 [label="AST"];
212 -> 93 [label="AST"];
212 -> 101 [label="AST"];
212 -> 112 [label="AST"];
212 -> 122 [label="AST"];
212 -> 162 [label="AST"];
212 -> 166 [label="AST"];
212 -> 176 [label="AST"];
212 -> 197 [label="AST"];
212 -> 207 [label="AST"];
212 -> 211 [label="AST"];
213 -> 6 [label="AST"];
213 -> 212 [label="AST"];
214 -> 213 [label="AST"];
215 -> 222 [label="Define-Use"];
215 -> 229 [label="Define-Use"];
217 -> 215 [label="AST"];
217 -> 216 [label="AST"];
217 -> 232 [label="Control Dep"];
217 -> 226 [label="Control Dep"];
217 -> 224 [label="Control Dep"];
217 -> 219 [label="Control Dep"];
217 -> 223 [label="Control Dep"];
217 -> 220 [label="Control Dep"];
217 -> 222 [label="Control Dep"];
217 -> 231 [label="Control Dep"];
217 -> 230 [label="Control Dep"];
217 -> 228 [label="Control Dep"];
217 -> 229 [label="Control Dep"];
222 -> 225 [label="Data Dep"];
223 -> 221 [label="AST"];
223 -> 222 [label="AST"];
223 -> 220 [label="AST"];
224 -> 219 [label="AST"];
224 -> 223 [label="AST"];
225 -> 228 [label="Define-Use"];
226 -> 225 [label="AST"];
226 -> 218 [label="AST"];
226 -> 224 [label="AST"];
230 -> 228 [label="AST"];
230 -> 229 [label="AST"];
231 -> 230 [label="AST"];
232 -> 226 [label="AST"];
232 -> 231 [label="AST"];
233 -> 217 [label="AST"];
233 -> 232 [label="AST"];
234 -> 214 [label="AST"];
234 -> 233 [label="AST"];
235 -> 234 [label="AST"];
236 -> 1 [label="AST"];
236 -> 0 [label="AST"];
236 -> 2 [label="AST"];
236 -> 4 [label="AST"];
236 -> 235 [label="AST"];
238 -> 239 [label="Action"];
240 -> 239 [label="Action"];
}