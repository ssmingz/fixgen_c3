digraph "Pattern" {
0 [label="dieOnCircularReference#?,Stack,Project#9:INSERT
dieOnCircularReference#?,Stack,Project#10:INSERT" shape=ellipse]
1 [label="dieOnCircularReference#?,Stack,Project#8:\{
    DataType.invokeCircularReferenceCheck(comp, stk, p);
    setChecked(true);
\}
dieOnCircularReference#?,Stack,Project#9:\{
    invokeCircularReferenceCheck(union, stk, p);
\}" shape=ellipse]
2 [label="dieOnCircularReference#?,Stack,Project#6:isReference()" shape=ellipse]
3 [label="dieOnCircularReference#?,Stack,Project#6:if (isReference()) \{
    super.dieOnCircularReference(stk, p);
\} else \{
    DataType.invokeCircularReferenceCheck(comp, stk, p);
    setChecked(true);
\}
dieOnCircularReference#?,Stack,Project#9:if (union != null) \{
    invokeCircularReferenceCheck(union, stk, p);
\}" shape=ellipse]
4 [label="dieOnCircularReference#?,Stack,Project#6:isReference" shape=ellipse]
5 [label="dieOnCircularReference#?,Stack,Project#-1:
dieOnCircularReference#?,Stack,Project#-1:" shape=ellipse]
6 [label="dieOnCircularReference#?,Stack,Project#6:isReference()
dieOnCircularReference#?,Stack,Project#10:invokeCircularReferenceCheck(<unknown>,<unknown>,<unknown>)" shape=ellipse]
7 [label="dieOnCircularReference#?,Stack,Project#6:\{
    super.dieOnCircularReference(stk, p);
\}" shape=ellipse]
8 [label="dieOnCircularReference#?,Stack,Project#7:super.dieOnCircularReference(stk, p)
dieOnCircularReference#?,Stack,Project#12:stk.pop()" shape=ellipse]
9 [label="dieOnCircularReference#?,Stack,Project#7:dieOnCircularReference(Stack,Project)" shape=ellipse]
10 [label="dieOnCircularReference#?,Stack,Project#7:super" shape=ellipse]
11 [label="dieOnCircularReference#?,Stack,Project#7:stk" shape=ellipse]
12 [label="dieOnCircularReference#?,Stack,Project#7:p" shape=ellipse]
13 [label="dieOnCircularReference#?,Stack,Project#9:DataType.invokeCircularReferenceCheck(comp, stk, p)" shape=ellipse]
14 [label="dieOnCircularReference#?,Stack,Project#9:invokeCircularReferenceCheck(Stack,Project)" shape=ellipse]
15 [label="dieOnCircularReference#?,Stack,Project#9:DataType
dieOnCircularReference#?,Stack,Project#9:union" shape=ellipse]
16 [label="dieOnCircularReference#?,Stack,Project#9:comp
dieOnCircularReference#?,Stack,Project#10:p" shape=ellipse]
17 [label="dieOnCircularReference#?,Stack,Project#9:stk
dieOnCircularReference#?,Stack,Project#10:stk" shape=ellipse]
18 [label="dieOnCircularReference#?,Stack,Project#9:p
dieOnCircularReference#?,Stack,Project#10:union" shape=ellipse]
19 [label="dieOnCircularReference#?,Stack,Project#10:setChecked(true)" shape=ellipse]
20 [label="dieOnCircularReference#?,Stack,Project#10:setChecked(boolean)" shape=ellipse]
21 [label="dieOnCircularReference#?,Stack,Project#-1:" shape=ellipse]
22 [label="dieOnCircularReference#?,Stack,Project#-1:PlaceHold" shape=ellipse]
23 [label="dieOnCircularReference#?,Stack,Project#10:true
dieOnCircularReference#?,Stack,Project#9:null" shape=ellipse]
24 [label="dieOnCircularReference#?,Stack,Project#11:INSERT" shape=ellipse]
25 [label="dieOnCircularReference#?,Stack,Project#11:stk.pop()" shape=ellipse]
26 [label="dieOnCircularReference#?,Stack,Project#9:stk.push(comp)
dieOnCircularReference#?,Stack,Project#10:stk.push(union)" shape=ellipse]
27 [label="dieOnCircularReference#?,Stack,Project#6:isReference()" shape=ellipse]
28 [label="dieOnCircularReference#?,Stack,Project#-1:PlaceHold" shape=ellipse]
29 [label="dieOnCircularReference#?,Stack,Project#12:INSERT" shape=ellipse]
30 [label="dieOnCircularReference#?,Stack,Project#10:invokeCircularReferenceCheck(union, stk, p)" shape=ellipse]
31 [label="dieOnCircularReference#?,Stack,Project#9:union != null" shape=ellipse]
0 -> 26 [label="Action:2"];
1 -> 0 [label="Action:2"];
1 -> 13 [label="AST:1"];
1 -> 19 [label="AST:1"];
1 -> 24 [label="Action:1"];
1 -> 29 [label="Action:1"];
1 -> 30 [label="AST:1"];
2 -> 1 [label="Control Dep:1"];
2 -> 4 [label="AST:1"];
2 -> 5 [label="AST:1"];
2 -> 6 [label="AST:1"];
2 -> 7 [label="Control Dep:1"];
2 -> 8 [label="Control Dep:1"];
2 -> 9 [label="Control Dep:1"];
2 -> 10 [label="Control Dep:1"];
2 -> 11 [label="Control Dep:1"];
2 -> 12 [label="Control Dep:1"];
2 -> 13 [label="Control Dep:1"];
2 -> 14 [label="Control Dep:1"];
2 -> 15 [label="Control Dep:1"];
2 -> 16 [label="Control Dep:1"];
2 -> 17 [label="Control Dep:1"];
2 -> 18 [label="Control Dep:1"];
2 -> 19 [label="Control Dep:1"];
2 -> 20 [label="Control Dep:1"];
2 -> 21 [label="Control Dep:1"];
2 -> 22 [label="Control Dep:1"];
2 -> 23 [label="Control Dep:1"];
3 -> 1 [label="AST:2"];
3 -> 2 [label="AST:1"];
3 -> 7 [label="AST:1"];
3 -> 31 [label="AST:1"];
5 -> 28 [label="AST:1"];
7 -> 8 [label="AST:1"];
8 -> 10 [label="AST:1"];
8 -> 9 [label="AST:1"];
8 -> 11 [label="AST:1"];
8 -> 12 [label="AST:1"];
13 -> 15 [label="AST:1"];
13 -> 14 [label="AST:1"];
13 -> 16 [label="AST:1"];
13 -> 17 [label="AST:1"];
13 -> 18 [label="AST:1"];
19 -> 21 [label="AST:1"];
19 -> 20 [label="AST:1"];
19 -> 23 [label="AST:1"];
21 -> 22 [label="AST:1"];
24 -> 25 [label="Action:1"];
27 -> 3 [label="Control Dep:1"];
27 -> 31 [label="Control Dep:1"];
27 -> 15 [label="Control Dep:1"];
27 -> 23 [label="Control Dep:1"];
29 -> 8 [label="Action:1"];
30 -> 5 [label="AST:1"];
30 -> 6 [label="AST:1"];
30 -> 18 [label="AST:1"];
30 -> 17 [label="AST:1"];
30 -> 16 [label="AST:1"];
31 -> 28 [label="Control Dep:1"];
31 -> 30 [label="Control Dep:1"];
31 -> 15 [label="AST:1"];
31 -> 23 [label="AST:1"];
31 -> 1 [label="Control Dep:1"];
31 -> 6 [label="Control Dep:1"];
31 -> 5 [label="Control Dep:1"];
31 -> 18 [label="Control Dep:1"];
31 -> 17 [label="Control Dep:1"];
31 -> 16 [label="Control Dep:1"];
}