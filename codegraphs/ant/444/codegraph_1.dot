digraph "executeAsForked#?,JUnitTest,ExecuteWatchdog,File" {
0 [label="2:CtTypeReferenceImpl@TestResultHolder" shape=ellipse]
1 [label="2:CtVirtualElement@executeAsForked" shape=ellipse]
2 [label="2:CtParameterImpl@JUnitTest test" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@JUnitTest" shape=ellipse]
4 [label="2:CtParameterImpl@ExecuteWatchdog watchdog" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@ExecuteWatchdog" shape=ellipse]
6 [label="2:CtParameterImpl@File casesFile" shape=ellipse]
7 [label="2:CtTypeReferenceImpl@File" shape=ellipse]
8 [label="3:CtTypeReferenceImpl@BuildException" shape=ellipse]
9 [label="4:CtFieldReadImpl@perm" shape=ellipse]
10 [label="4:CtLiteralImpl@null" shape=ellipse]
11 [label="4:CtBinaryOperatorImpl@perm != null" shape=ellipse]
12 [label="5:CtExecutableReferenceImpl@log(java.lang.String,<unknown>)" shape=ellipse]
13 [label="5:CtVirtualElement@log" shape=ellipse]
14 [label="5:CtLiteralImpl@\"Permissions ignored when running in forked mode!\"" shape=ellipse]
15 [label="5:CtTypeAccessImpl@MSG_WARN" shape=ellipse]
16 [label="5:CtInvocationImpl@log(\"Permissions ignored when running in forked mode!\", MSG_WARN)" shape=ellipse]
17 [label="4:CtBlockImpl@\{
    log(\"Permissions ignored when running in forked mode!\", MSG_WARN);
\}" shape=ellipse]
18 [label="4:CtIfImpl@if (perm != null) \{
    log(\"Permissions ignored when running in forked mode!\", MSG_WARN);
\}" shape=ellipse]
19 [label="7:CtTypeReferenceImpl@CommandlineJava" shape=ellipse]
20 [label="7:CtVirtualElement@cmd" shape=ellipse]
21 [label="7:CtLocalVariableImpl@CommandlineJava cmd" shape=ellipse]
22 [label="9:CtVariableWriteImpl@cmd" shape=ellipse]
23 [label="9:CtExecutableReferenceImpl@clone()" shape=ellipse]
24 [label="9:CtVirtualElement@clone" shape=ellipse]
25 [label="9:CtExecutableReferenceImpl@getCommandline()" shape=ellipse]
26 [label="9:CtVirtualElement@getCommandline" shape=ellipse]
27 [label="9:CtInvocationImpl@getCommandline()" shape=ellipse]
28 [label="9:CtInvocationImpl@((CommandlineJava) (getCommandline().clone()))" shape=ellipse]
29 [label="9:CtTypeReferenceImpl@CommandlineJava" shape=ellipse]
30 [label="9:CtAssignmentImpl@cmd = ((CommandlineJava) (getCommandline().clone()))" shape=ellipse]
31 [label="8:CtBlockImpl@\{
    cmd = ((CommandlineJava) (getCommandline().clone()));
\}" shape=ellipse]
32 [label="10:CtVirtualElement@e" shape=ellipse]
33 [label="10:CtTypeReferenceImpl@CloneNotSupportedException" shape=ellipse]
34 [label="10:CtCatchVariableImpl@CloneNotSupportedException e" shape=ellipse]
35 [label="11:CtTypeReferenceImpl@BuildException" shape=ellipse]
36 [label="11:CtLiteralImpl@\"This shouldn't happen\"" shape=ellipse]
37 [label="11:CtVariableReadImpl@e" shape=ellipse]
38 [label="11:CtExecutableReferenceImpl@getLocation()" shape=ellipse]
39 [label="11:CtVirtualElement@getLocation" shape=ellipse]
40 [label="11:CtInvocationImpl@getLocation()" shape=ellipse]
41 [label="11:CtConstructorCallImpl@new BuildException(\"This shouldn't happen\", e, getLocation())" shape=ellipse]
42 [label="11:CtThrowImpl@throw new BuildException(\"This shouldn't happen\", e, getLocation())" shape=ellipse]
43 [label="10:CtBlockImpl@\{
    throw new BuildException(\"This shouldn't happen\", e, getLocation());
\}" shape=ellipse]
44 [label="10:CtCatchImpl@ catch (CloneNotSupportedException e) \{
    throw new BuildException(\"This shouldn't happen\", e, getLocation());
\}" shape=ellipse]
45 [label="8:CtTryImpl@try \{
    cmd = ((CommandlineJava) (getCommandline().clone()));
\} catch (CloneNotSupportedException e) \{
    throw new BuildException(\"This shouldn't happen\", e, getLocation());
\}" shape=ellipse]
46 [label="13:CtExecutableReferenceImpl@setClassname(java.lang.String)" shape=ellipse]
47 [label="13:CtVirtualElement@setClassname" shape=ellipse]
48 [label="13:CtVariableReadImpl@cmd" shape=ellipse]
49 [label="13:CtLiteralImpl@\"org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner\"" shape=ellipse]
50 [label="13:CtInvocationImpl@cmd.setClassname(\"org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner\")" shape=ellipse]
51 [label="14:CtVariableReadImpl@casesFile" shape=ellipse]
52 [label="14:CtLiteralImpl@null" shape=ellipse]
53 [label="14:CtBinaryOperatorImpl@casesFile == null" shape=ellipse]
54 [label="15:CtExecutableReferenceImpl@setValue()" shape=ellipse]
55 [label="15:CtVirtualElement@setValue" shape=ellipse]
56 [label="15:CtExecutableReferenceImpl@createArgument()" shape=ellipse]
57 [label="15:CtVirtualElement@createArgument" shape=ellipse]
58 [label="15:CtVariableReadImpl@cmd" shape=ellipse]
59 [label="15:CtInvocationImpl@cmd.createArgument()" shape=ellipse]
60 [label="15:CtExecutableReferenceImpl@getName()" shape=ellipse]
61 [label="15:CtVirtualElement@getName" shape=ellipse]
62 [label="15:CtVariableReadImpl@test" shape=ellipse]
63 [label="15:CtInvocationImpl@test.getName()" shape=ellipse]
64 [label="15:CtInvocationImpl@cmd.createArgument().setValue(test.getName())" shape=ellipse]
65 [label="14:CtBlockImpl@\{
    cmd.createArgument().setValue(test.getName());
\}" shape=ellipse]
66 [label="17:CtExecutableReferenceImpl@log(java.lang.String,<unknown>)" shape=ellipse]
67 [label="17:CtVirtualElement@log" shape=ellipse]
68 [label="17:CtLiteralImpl@\"Running multiple tests in the same VM\"" shape=ellipse]
69 [label="17:CtTypeAccessImpl@MSG_VERBOSE" shape=ellipse]
70 [label="17:CtInvocationImpl@log(\"Running multiple tests in the same VM\", MSG_VERBOSE)" shape=ellipse]
71 [label="18:CtExecutableReferenceImpl@setValue()" shape=ellipse]
72 [label="18:CtVirtualElement@setValue" shape=ellipse]
73 [label="18:CtExecutableReferenceImpl@createArgument()" shape=ellipse]
74 [label="18:CtVirtualElement@createArgument" shape=ellipse]
75 [label="18:CtVariableReadImpl@cmd" shape=ellipse]
76 [label="18:CtInvocationImpl@cmd.createArgument()" shape=ellipse]
77 [label="18:CtFieldReadImpl@Constants.TESTSFILE" shape=ellipse]
78 [label="18:CtVariableReadImpl@casesFile" shape=ellipse]
79 [label="18:CtBinaryOperatorImpl@Constants.TESTSFILE + casesFile" shape=ellipse]
80 [label="18:CtInvocationImpl@cmd.createArgument().setValue(Constants.TESTSFILE + casesFile)" shape=ellipse]
81 [label="16:CtBlockImpl@\{
    log(\"Running multiple tests in the same VM\", MSG_VERBOSE);
    cmd.createArgument().setValue(Constants.TESTSFILE + casesFile);
\}" shape=ellipse]
82 [label="14:CtIfImpl@if (casesFile == null) \{
    cmd.createArgument().setValue(test.getName());
\} else \{
    log(\"Running multiple tests in the same VM\", MSG_VERBOSE);
    cmd.createArgument().setValue(Constants.TESTSFILE + casesFile);
\}" shape=ellipse]
83 [label="20:CtExecutableReferenceImpl@setValue()" shape=ellipse]
84 [label="20:CtVirtualElement@setValue" shape=ellipse]
85 [label="20:CtExecutableReferenceImpl@createArgument()" shape=ellipse]
86 [label="20:CtVirtualElement@createArgument" shape=ellipse]
87 [label="20:CtVariableReadImpl@cmd" shape=ellipse]
88 [label="20:CtInvocationImpl@cmd.createArgument()" shape=ellipse]
89 [label="20:CtFieldReadImpl@Constants.FILTERTRACE" shape=ellipse]
90 [label="20:CtExecutableReferenceImpl@getFiltertrace()" shape=ellipse]
91 [label="20:CtVirtualElement@getFiltertrace" shape=ellipse]
92 [label="20:CtVariableReadImpl@test" shape=ellipse]
93 [label="20:CtInvocationImpl@test.getFiltertrace()" shape=ellipse]
94 [label="20:CtBinaryOperatorImpl@Constants.FILTERTRACE + test.getFiltertrace()" shape=ellipse]
95 [label="20:CtInvocationImpl@cmd.createArgument().setValue(Constants.FILTERTRACE + test.getFiltertrace())" shape=ellipse]
96 [label="21:CtExecutableReferenceImpl@setValue()" shape=ellipse]
97 [label="21:CtVirtualElement@setValue" shape=ellipse]
98 [label="21:CtExecutableReferenceImpl@createArgument()" shape=ellipse]
99 [label="21:CtVirtualElement@createArgument" shape=ellipse]
100 [label="21:CtVariableReadImpl@cmd" shape=ellipse]
101 [label="21:CtInvocationImpl@cmd.createArgument()" shape=ellipse]
102 [label="21:CtFieldReadImpl@Constants.HALT_ON_ERROR" shape=ellipse]
103 [label="21:CtExecutableReferenceImpl@getHaltonerror()" shape=ellipse]
104 [label="21:CtVirtualElement@getHaltonerror" shape=ellipse]
105 [label="21:CtVariableReadImpl@test" shape=ellipse]
106 [label="21:CtInvocationImpl@test.getHaltonerror()" shape=ellipse]
107 [label="21:CtBinaryOperatorImpl@Constants.HALT_ON_ERROR + test.getHaltonerror()" shape=ellipse]
108 [label="21:CtInvocationImpl@cmd.createArgument().setValue(Constants.HALT_ON_ERROR + test.getHaltonerror())" shape=ellipse]
109 [label="22:CtExecutableReferenceImpl@setValue()" shape=ellipse]
110 [label="22:CtVirtualElement@setValue" shape=ellipse]
111 [label="22:CtExecutableReferenceImpl@createArgument()" shape=ellipse]
112 [label="22:CtVirtualElement@createArgument" shape=ellipse]
113 [label="22:CtVariableReadImpl@cmd" shape=ellipse]
114 [label="22:CtInvocationImpl@cmd.createArgument()" shape=ellipse]
115 [label="22:CtFieldReadImpl@Constants.HALT_ON_FAILURE" shape=ellipse]
116 [label="22:CtExecutableReferenceImpl@getHaltonfailure()" shape=ellipse]
117 [label="22:CtVirtualElement@getHaltonfailure" shape=ellipse]
118 [label="22:CtVariableReadImpl@test" shape=ellipse]
119 [label="22:CtInvocationImpl@test.getHaltonfailure()" shape=ellipse]
120 [label="22:CtBinaryOperatorImpl@Constants.HALT_ON_FAILURE + test.getHaltonfailure()" shape=ellipse]
121 [label="22:CtInvocationImpl@cmd.createArgument().setValue(Constants.HALT_ON_FAILURE + test.getHaltonfailure())" shape=ellipse]
122 [label="23:CtExecutableReferenceImpl@checkIncludeAntRuntime(<unknown>)" shape=ellipse]
123 [label="23:CtVirtualElement@checkIncludeAntRuntime" shape=ellipse]
124 [label="23:CtVariableReadImpl@cmd" shape=ellipse]
125 [label="23:CtInvocationImpl@checkIncludeAntRuntime(cmd)" shape=ellipse]
126 [label="24:CtExecutableReferenceImpl@checkIncludeSummary(<unknown>)" shape=ellipse]
127 [label="24:CtVirtualElement@checkIncludeSummary" shape=ellipse]
128 [label="24:CtVariableReadImpl@cmd" shape=ellipse]
129 [label="24:CtInvocationImpl@checkIncludeSummary(cmd)" shape=ellipse]
130 [label="25:CtExecutableReferenceImpl@setValue()" shape=ellipse]
131 [label="25:CtVirtualElement@setValue" shape=ellipse]
132 [label="25:CtExecutableReferenceImpl@createArgument()" shape=ellipse]
133 [label="25:CtVirtualElement@createArgument" shape=ellipse]
134 [label="25:CtVariableReadImpl@cmd" shape=ellipse]
135 [label="25:CtInvocationImpl@cmd.createArgument()" shape=ellipse]
136 [label="25:CtFieldReadImpl@Constants.SHOWOUTPUT" shape=ellipse]
137 [label="25:CtExecutableReferenceImpl@valueOf(char[])" shape=ellipse]
138 [label="25:CtVirtualElement@valueOf" shape=ellipse]
139 [label="25:CtTypeAccessImpl@String" shape=ellipse]
140 [label="25:CtFieldReadImpl@showOutput" shape=ellipse]
141 [label="25:CtInvocationImpl@String.valueOf(showOutput)" shape=ellipse]
142 [label="25:CtBinaryOperatorImpl@Constants.SHOWOUTPUT + String.valueOf(showOutput)" shape=ellipse]
143 [label="25:CtInvocationImpl@cmd.createArgument().setValue(Constants.SHOWOUTPUT + String.valueOf(showOutput))" shape=ellipse]
144 [label="27:CtExecutableReferenceImpl@setValue()" shape=ellipse]
145 [label="26:CtVirtualElement@setValue" shape=ellipse]
146 [label="26:CtExecutableReferenceImpl@createArgument()" shape=ellipse]
147 [label="26:CtVirtualElement@createArgument" shape=ellipse]
148 [label="26:CtVariableReadImpl@cmd" shape=ellipse]
149 [label="26:CtInvocationImpl@cmd.createArgument()" shape=ellipse]
150 [label="27:CtFieldReadImpl@Constants.OUTPUT_TO_FORMATTERS" shape=ellipse]
151 [label="27:CtExecutableReferenceImpl@valueOf(char[])" shape=ellipse]
152 [label="27:CtVirtualElement@valueOf" shape=ellipse]
153 [label="27:CtTypeAccessImpl@String" shape=ellipse]
154 [label="27:CtFieldReadImpl@outputToFormatters" shape=ellipse]
155 [label="27:CtInvocationImpl@String.valueOf(outputToFormatters)" shape=ellipse]
156 [label="27:CtBinaryOperatorImpl@Constants.OUTPUT_TO_FORMATTERS + String.valueOf(outputToFormatters)" shape=ellipse]
157 [label="26:CtInvocationImpl@cmd.createArgument().setValue(Constants.OUTPUT_TO_FORMATTERS + String.valueOf(outputToFormatters))" shape=ellipse]
158 [label="28:CtExecutableReferenceImpl@setValue()" shape=ellipse]
159 [label="28:CtVirtualElement@setValue" shape=ellipse]
160 [label="28:CtExecutableReferenceImpl@createArgument()" shape=ellipse]
161 [label="28:CtVirtualElement@createArgument" shape=ellipse]
162 [label="28:CtVariableReadImpl@cmd" shape=ellipse]
163 [label="28:CtInvocationImpl@cmd.createArgument()" shape=ellipse]
164 [label="28:CtFieldReadImpl@Constants.LOGTESTLISTENEREVENTS" shape=ellipse]
165 [label="28:CtLiteralImpl@\"true\"" shape=ellipse]
166 [label="28:CtBinaryOperatorImpl@Constants.LOGTESTLISTENEREVENTS + \"true\"" shape=ellipse]
167 [label="28:CtInvocationImpl@cmd.createArgument().setValue(Constants.LOGTESTLISTENEREVENTS + \"true\")" shape=ellipse]
168 [label="29:CtTypeReferenceImpl@StringBuffer" shape=ellipse]
169 [label="29:CtTypeReferenceImpl@StringBuffer" shape=ellipse]
170 [label="29:CtFieldReadImpl@STRING_BUFFER_SIZE" shape=ellipse]
171 [label="29:CtConstructorCallImpl@new StringBuffer(STRING_BUFFER_SIZE)" shape=ellipse]
172 [label="29:CtVirtualElement@formatterArg" shape=ellipse]
173 [label="29:CtLocalVariableImpl@StringBuffer formatterArg = new StringBuffer(STRING_BUFFER_SIZE)" shape=ellipse]
174 [label="30:CtVirtualElement@FormatterElement[]" shape=ellipse]
175 [label="30:CtArrayTypeReferenceImpl@FormatterElement[]" shape=ellipse]
176 [label="30:CtExecutableReferenceImpl@mergeFormatters(<unknown>)" shape=ellipse]
177 [label="30:CtVirtualElement@mergeFormatters" shape=ellipse]
178 [label="30:CtVariableReadImpl@test" shape=ellipse]
179 [label="30:CtInvocationImpl@mergeFormatters(test)" shape=ellipse]
180 [label="30:CtVirtualElement@feArray" shape=ellipse]
181 [label="30:CtLocalVariableImpl@final FormatterElement[] feArray = mergeFormatters(test)" shape=ellipse]
182 [label="31:CtTypeReferenceImpl@int" shape=ellipse]
183 [label="31:CtLiteralImpl@0" shape=ellipse]
184 [label="31:CtVirtualElement@i" shape=ellipse]
185 [label="31:CtLocalVariableImpl@int i = 0" shape=ellipse]
186 [label="31:CtVariableReadImpl@i" shape=ellipse]
187 [label="31:CtVariableReadImpl@feArray" shape=ellipse]
188 [label="31:CtLocalVariableReferenceImpl@feArray" shape=ellipse]
189 [label="31:CtFieldReadImpl@feArray.length" shape=ellipse]
190 [label="31:CtBinaryOperatorImpl@i < feArray.length" shape=ellipse]
191 [label="31:CtVariableWriteImpl@i" shape=ellipse]
192 [label="31:CtUnaryOperatorImpl@i++" shape=ellipse]
193 [label="32:CtTypeReferenceImpl@FormatterElement" shape=ellipse]
194 [label="32:CtVariableReadImpl@feArray" shape=ellipse]
195 [label="32:CtVariableReadImpl@i" shape=ellipse]
196 [label="32:CtArrayReadImpl@feArray[i]" shape=ellipse]
197 [label="32:CtVirtualElement@fe" shape=ellipse]
198 [label="32:CtLocalVariableImpl@FormatterElement fe = feArray[i]" shape=ellipse]
199 [label="33:CtExecutableReferenceImpl@shouldUse(PlaceHold)" shape=ellipse]
200 [label="33:CtVirtualElement@shouldUse" shape=ellipse]
201 [label="33:CtVariableReadImpl@fe" shape=ellipse]
202 [label="33:CtThisAccessImpl@this" shape=ellipse]
203 [label="33:CtInvocationImpl@fe.shouldUse(this)" shape=ellipse]
204 [label="34:CtExecutableReferenceImpl@append(java.lang.Object)" shape=ellipse]
205 [label="34:CtVirtualElement@append" shape=ellipse]
206 [label="34:CtVariableReadImpl@formatterArg" shape=ellipse]
207 [label="34:CtTypeAccessImpl@FORMATTER" shape=ellipse]
208 [label="34:CtInvocationImpl@formatterArg.append(FORMATTER)" shape=ellipse]
209 [label="35:CtExecutableReferenceImpl@append(java.lang.Object)" shape=ellipse]
210 [label="35:CtVirtualElement@append" shape=ellipse]
211 [label="35:CtVariableReadImpl@formatterArg" shape=ellipse]
212 [label="35:CtExecutableReferenceImpl@getClassname()" shape=ellipse]
213 [label="35:CtVirtualElement@getClassname" shape=ellipse]
214 [label="35:CtVariableReadImpl@fe" shape=ellipse]
215 [label="35:CtInvocationImpl@fe.getClassname()" shape=ellipse]
216 [label="35:CtInvocationImpl@formatterArg.append(fe.getClassname())" shape=ellipse]
217 [label="36:CtTypeReferenceImpl@File" shape=ellipse]
218 [label="36:CtExecutableReferenceImpl@getOutput(<unknown>,<unknown>)" shape=ellipse]
219 [label="36:CtVirtualElement@getOutput" shape=ellipse]
220 [label="36:CtVariableReadImpl@fe" shape=ellipse]
221 [label="36:CtVariableReadImpl@test" shape=ellipse]
222 [label="36:CtInvocationImpl@getOutput(fe, test)" shape=ellipse]
223 [label="36:CtVirtualElement@outFile" shape=ellipse]
224 [label="36:CtLocalVariableImpl@File outFile = getOutput(fe, test)" shape=ellipse]
225 [label="37:CtVariableReadImpl@outFile" shape=ellipse]
226 [label="37:CtLiteralImpl@null" shape=ellipse]
227 [label="37:CtBinaryOperatorImpl@outFile != null" shape=ellipse]
228 [label="38:CtExecutableReferenceImpl@append(java.lang.String)" shape=ellipse]
229 [label="38:CtVirtualElement@append" shape=ellipse]
230 [label="38:CtVariableReadImpl@formatterArg" shape=ellipse]
231 [label="38:CtLiteralImpl@\",\"" shape=ellipse]
232 [label="38:CtInvocationImpl@formatterArg.append(\",\")" shape=ellipse]
233 [label="39:CtExecutableReferenceImpl@append(java.lang.Object)" shape=ellipse]
234 [label="39:CtVirtualElement@append" shape=ellipse]
235 [label="39:CtVariableReadImpl@formatterArg" shape=ellipse]
236 [label="39:CtVariableReadImpl@outFile" shape=ellipse]
237 [label="39:CtInvocationImpl@formatterArg.append(outFile)" shape=ellipse]
238 [label="37:CtBlockImpl@\{
    formatterArg.append(\",\");
    formatterArg.append(outFile);
\}" shape=ellipse]
239 [label="37:CtIfImpl@if (outFile != null) \{
    formatterArg.append(\",\");
    formatterArg.append(outFile);
\}" shape=ellipse]
240 [label="41:CtExecutableReferenceImpl@setValue(java.lang.String)" shape=ellipse]
241 [label="41:CtVirtualElement@setValue" shape=ellipse]
242 [label="41:CtExecutableReferenceImpl@createArgument()" shape=ellipse]
243 [label="41:CtVirtualElement@createArgument" shape=ellipse]
244 [label="41:CtVariableReadImpl@cmd" shape=ellipse]
245 [label="41:CtInvocationImpl@cmd.createArgument()" shape=ellipse]
246 [label="41:CtExecutableReferenceImpl@toString()" shape=ellipse]
247 [label="41:CtVirtualElement@toString" shape=ellipse]
248 [label="41:CtVariableReadImpl@formatterArg" shape=ellipse]
249 [label="41:CtInvocationImpl@formatterArg.toString()" shape=ellipse]
250 [label="41:CtInvocationImpl@cmd.createArgument().setValue(formatterArg.toString())" shape=ellipse]
251 [label="42:CtVariableWriteImpl@formatterArg" shape=ellipse]
252 [label="42:CtTypeReferenceImpl@StringBuffer" shape=ellipse]
253 [label="42:CtConstructorCallImpl@new StringBuffer()" shape=ellipse]
254 [label="42:CtAssignmentImpl@formatterArg = new StringBuffer()" shape=ellipse]
255 [label="33:CtBlockImpl@\{
    formatterArg.append(FORMATTER);
    formatterArg.append(fe.getClassname());
    File outFile = getOutput(fe, test);
    if (outFile != null) \{
        formatterArg.append(\",\");
        formatterArg.append(outFile);
    \}
    cmd.createArgument().setValue(formatterArg.toString());
    formatterArg = new StringBuffer();
\}" shape=ellipse]
256 [label="33:CtIfImpl@if (fe.shouldUse(this)) \{
    formatterArg.append(FORMATTER);
    formatterArg.append(fe.getClassname());
    File outFile = getOutput(fe, test);
    if (outFile != null) \{
        formatterArg.append(\",\");
        formatterArg.append(outFile);
    \}
    cmd.createArgument().setValue(formatterArg.toString());
    formatterArg = new StringBuffer();
\}" shape=ellipse]
257 [label="31:CtBlockImpl@\{
    FormatterElement fe = feArray[i];
    if (fe.shouldUse(this)) \{
        formatterArg.append(FORMATTER);
        formatterArg.append(fe.getClassname());
        File outFile = getOutput(fe, test);
        if (outFile != null) \{
            formatterArg.append(\",\");
            formatterArg.append(outFile);
        \}
        cmd.createArgument().setValue(formatterArg.toString());
        formatterArg = new StringBuffer();
    \}
\}" shape=ellipse]
258 [label="31:CtForImpl@for (int i = 0; i < feArray.length; i++) \{
    FormatterElement fe = feArray[i];
    if (fe.shouldUse(this)) \{
        formatterArg.append(FORMATTER);
        formatterArg.append(fe.getClassname());
        File outFile = getOutput(fe, test);
        if (outFile != null) \{
            formatterArg.append(\",\");
            formatterArg.append(outFile);
        \}
        cmd.createArgument().setValue(formatterArg.toString());
        formatterArg = new StringBuffer();
    \}
\}" shape=ellipse]
259 [label="45:CtTypeReferenceImpl@File" shape=ellipse]
260 [label="45:CtExecutableReferenceImpl@createTempPropertiesFile(java.lang.String)" shape=ellipse]
261 [label="45:CtVirtualElement@createTempPropertiesFile" shape=ellipse]
262 [label="45:CtLiteralImpl@\"junitvmwatcher\"" shape=ellipse]
263 [label="45:CtInvocationImpl@createTempPropertiesFile(\"junitvmwatcher\")" shape=ellipse]
264 [label="45:CtVirtualElement@vmWatcher" shape=ellipse]
265 [label="45:CtLocalVariableImpl@File vmWatcher = createTempPropertiesFile(\"junitvmwatcher\")" shape=ellipse]
266 [label="46:CtExecutableReferenceImpl@setValue()" shape=ellipse]
267 [label="46:CtVirtualElement@setValue" shape=ellipse]
268 [label="46:CtExecutableReferenceImpl@createArgument()" shape=ellipse]
269 [label="46:CtVirtualElement@createArgument" shape=ellipse]
270 [label="46:CtVariableReadImpl@cmd" shape=ellipse]
271 [label="46:CtInvocationImpl@cmd.createArgument()" shape=ellipse]
272 [label="46:CtFieldReadImpl@Constants.CRASHFILE" shape=ellipse]
273 [label="46:CtExecutableReferenceImpl@getAbsolutePath()" shape=ellipse]
274 [label="46:CtVirtualElement@getAbsolutePath" shape=ellipse]
275 [label="46:CtVariableReadImpl@vmWatcher" shape=ellipse]
276 [label="46:CtInvocationImpl@vmWatcher.getAbsolutePath()" shape=ellipse]
277 [label="46:CtBinaryOperatorImpl@Constants.CRASHFILE + vmWatcher.getAbsolutePath()" shape=ellipse]
278 [label="46:CtInvocationImpl@cmd.createArgument().setValue(Constants.CRASHFILE + vmWatcher.getAbsolutePath())" shape=ellipse]
279 [label="47:CtTypeReferenceImpl@File" shape=ellipse]
280 [label="47:CtExecutableReferenceImpl@createTempPropertiesFile(java.lang.String)" shape=ellipse]
281 [label="47:CtVirtualElement@createTempPropertiesFile" shape=ellipse]
282 [label="47:CtLiteralImpl@\"junit\"" shape=ellipse]
283 [label="47:CtInvocationImpl@createTempPropertiesFile(\"junit\")" shape=ellipse]
284 [label="47:CtVirtualElement@propsFile" shape=ellipse]
285 [label="47:CtLocalVariableImpl@File propsFile = createTempPropertiesFile(\"junit\")" shape=ellipse]
286 [label="48:CtExecutableReferenceImpl@setValue()" shape=ellipse]
287 [label="48:CtVirtualElement@setValue" shape=ellipse]
288 [label="48:CtExecutableReferenceImpl@createArgument()" shape=ellipse]
289 [label="48:CtVirtualElement@createArgument" shape=ellipse]
290 [label="48:CtVariableReadImpl@cmd" shape=ellipse]
291 [label="48:CtInvocationImpl@cmd.createArgument()" shape=ellipse]
292 [label="48:CtFieldReadImpl@Constants.PROPSFILE" shape=ellipse]
293 [label="48:CtExecutableReferenceImpl@getAbsolutePath()" shape=ellipse]
294 [label="48:CtVirtualElement@getAbsolutePath" shape=ellipse]
295 [label="48:CtVariableReadImpl@propsFile" shape=ellipse]
296 [label="48:CtInvocationImpl@propsFile.getAbsolutePath()" shape=ellipse]
297 [label="48:CtBinaryOperatorImpl@Constants.PROPSFILE + propsFile.getAbsolutePath()" shape=ellipse]
298 [label="48:CtInvocationImpl@cmd.createArgument().setValue(Constants.PROPSFILE + propsFile.getAbsolutePath())" shape=ellipse]
299 [label="49:CtTypeReferenceImpl@Hashtable" shape=ellipse]
300 [label="49:CtExecutableReferenceImpl@getProperties()" shape=ellipse]
301 [label="49:CtVirtualElement@getProperties" shape=ellipse]
302 [label="49:CtExecutableReferenceImpl@getProject()" shape=ellipse]
303 [label="49:CtVirtualElement@getProject" shape=ellipse]
304 [label="49:CtInvocationImpl@getProject()" shape=ellipse]
305 [label="49:CtInvocationImpl@getProject().getProperties()" shape=ellipse]
306 [label="49:CtVirtualElement@p" shape=ellipse]
307 [label="49:CtLocalVariableImpl@Hashtable p = getProject().getProperties()" shape=ellipse]
308 [label="50:CtTypeReferenceImpl@Properties" shape=ellipse]
309 [label="50:CtTypeReferenceImpl@Properties" shape=ellipse]
310 [label="50:CtConstructorCallImpl@new Properties()" shape=ellipse]
311 [label="50:CtVirtualElement@props" shape=ellipse]
312 [label="50:CtLocalVariableImpl@Properties props = new Properties()" shape=ellipse]
313 [label="51:CtTypeReferenceImpl@Enumeration" shape=ellipse]
314 [label="51:CtExecutableReferenceImpl@keys()" shape=ellipse]
315 [label="51:CtVirtualElement@keys" shape=ellipse]
316 [label="51:CtVariableReadImpl@p" shape=ellipse]
317 [label="51:CtInvocationImpl@p.keys()" shape=ellipse]
318 [label="51:CtVirtualElement@e" shape=ellipse]
319 [label="51:CtLocalVariableImpl@Enumeration e = p.keys()" shape=ellipse]
320 [label="51:CtExecutableReferenceImpl@hasMoreElements()" shape=ellipse]
321 [label="51:CtVirtualElement@hasMoreElements" shape=ellipse]
322 [label="51:CtVariableReadImpl@e" shape=ellipse]
323 [label="51:CtInvocationImpl@e.hasMoreElements()" shape=ellipse]
324 [label="52:CtTypeReferenceImpl@Object" shape=ellipse]
325 [label="52:CtExecutableReferenceImpl@nextElement()" shape=ellipse]
326 [label="52:CtVirtualElement@nextElement" shape=ellipse]
327 [label="52:CtVariableReadImpl@e" shape=ellipse]
328 [label="52:CtInvocationImpl@e.nextElement()" shape=ellipse]
329 [label="52:CtVirtualElement@key" shape=ellipse]
330 [label="52:CtLocalVariableImpl@Object key = e.nextElement()" shape=ellipse]
331 [label="53:CtExecutableReferenceImpl@put(java.lang.Object)" shape=ellipse]
332 [label="53:CtVirtualElement@put" shape=ellipse]
333 [label="53:CtVariableReadImpl@props" shape=ellipse]
334 [label="53:CtVariableReadImpl@key" shape=ellipse]
335 [label="53:CtExecutableReferenceImpl@get(java.lang.Object)" shape=ellipse]
336 [label="53:CtVirtualElement@get" shape=ellipse]
337 [label="53:CtVariableReadImpl@p" shape=ellipse]
338 [label="53:CtVariableReadImpl@key" shape=ellipse]
339 [label="53:CtInvocationImpl@p.get(key)" shape=ellipse]
340 [label="53:CtInvocationImpl@props.put(key, p.get(key))" shape=ellipse]
341 [label="51:CtBlockImpl@\{
    Object key = e.nextElement();
    props.put(key, p.get(key));
\}" shape=ellipse]
342 [label="51:CtForImpl@for (Enumeration e = p.keys(); e.hasMoreElements();) \{
    Object key = e.nextElement();
    props.put(key, p.get(key));
\}" shape=ellipse]
343 [label="56:CtTypeReferenceImpl@FileOutputStream" shape=ellipse]
344 [label="56:CtTypeReferenceImpl@FileOutputStream" shape=ellipse]
345 [label="56:CtVariableReadImpl@propsFile" shape=ellipse]
346 [label="56:CtConstructorCallImpl@new FileOutputStream(propsFile)" shape=ellipse]
347 [label="56:CtVirtualElement@outstream" shape=ellipse]
348 [label="56:CtLocalVariableImpl@FileOutputStream outstream = new FileOutputStream(propsFile)" shape=ellipse]
349 [label="57:CtExecutableReferenceImpl@store(FileOutputStream,java.lang.String)" shape=ellipse]
350 [label="57:CtVirtualElement@store" shape=ellipse]
351 [label="57:CtVariableReadImpl@props" shape=ellipse]
352 [label="57:CtVariableReadImpl@outstream" shape=ellipse]
353 [label="57:CtLiteralImpl@\"Ant JUnitTask generated properties file\"" shape=ellipse]
354 [label="57:CtInvocationImpl@props.store(outstream, \"Ant JUnitTask generated properties file\")" shape=ellipse]
355 [label="58:CtExecutableReferenceImpl@close()" shape=ellipse]
356 [label="58:CtVirtualElement@close" shape=ellipse]
357 [label="58:CtVariableReadImpl@outstream" shape=ellipse]
358 [label="58:CtInvocationImpl@outstream.close()" shape=ellipse]
359 [label="55:CtBlockImpl@\{
    FileOutputStream outstream = new FileOutputStream(propsFile);
    props.store(outstream, \"Ant JUnitTask generated properties file\");
    outstream.close();
\}" shape=ellipse]
360 [label="59:CtVirtualElement@e" shape=ellipse]
361 [label="59:CtTypeReferenceImpl@IOException" shape=ellipse]
362 [label="59:CtCatchVariableImpl@IOException e" shape=ellipse]
363 [label="60:CtExecutableReferenceImpl@delete()" shape=ellipse]
364 [label="60:CtVirtualElement@delete" shape=ellipse]
365 [label="60:CtVariableReadImpl@propsFile" shape=ellipse]
366 [label="60:CtInvocationImpl@propsFile.delete()" shape=ellipse]
367 [label="61:CtTypeReferenceImpl@BuildException" shape=ellipse]
368 [label="61:CtLiteralImpl@\"Error creating temporary properties \"" shape=ellipse]
369 [label="61:CtLiteralImpl@\"file.\"" shape=ellipse]
370 [label="61:CtBinaryOperatorImpl@\"Error creating temporary properties \" + \"file.\"" shape=ellipse]
371 [label="61:CtVariableReadImpl@e" shape=ellipse]
372 [label="61:CtExecutableReferenceImpl@getLocation()" shape=ellipse]
373 [label="61:CtVirtualElement@getLocation" shape=ellipse]
374 [label="61:CtInvocationImpl@getLocation()" shape=ellipse]
375 [label="61:CtConstructorCallImpl@new BuildException(\"Error creating temporary properties \" + \"file.\", e, getLocation())" shape=ellipse]
376 [label="61:CtThrowImpl@throw new BuildException(\"Error creating temporary properties \" + \"file.\", e, getLocation())" shape=ellipse]
377 [label="59:CtBlockImpl@\{
    propsFile.delete();
    throw new BuildException(\"Error creating temporary properties \" + \"file.\", e, getLocation());
\}" shape=ellipse]
378 [label="59:CtCatchImpl@ catch (IOException e) \{
    propsFile.delete();
    throw new BuildException(\"Error creating temporary properties \" + \"file.\", e, getLocation());
\}" shape=ellipse]
379 [label="55:CtTryImpl@try \{
    FileOutputStream outstream = new FileOutputStream(propsFile);
    props.store(outstream, \"Ant JUnitTask generated properties file\");
    outstream.close();
\} catch (IOException e) \{
    propsFile.delete();
    throw new BuildException(\"Error creating temporary properties \" + \"file.\", e, getLocation());
\}" shape=ellipse]
380 [label="63:CtTypeReferenceImpl@Execute" shape=ellipse]
381 [label="64:CtTypeReferenceImpl@Execute" shape=ellipse]
382 [label="64:CtTypeReferenceImpl@JUnitLogStreamHandler" shape=ellipse]
383 [label="64:CtThisAccessImpl@this" shape=ellipse]
384 [label="64:CtFieldReadImpl@Project.MSG_INFO" shape=ellipse]
385 [label="64:CtFieldReadImpl@Project.MSG_WARN" shape=ellipse]
386 [label="64:CtConstructorCallImpl@new JUnitLogStreamHandler(this, Project.MSG_INFO, Project.MSG_WARN)" shape=ellipse]
387 [label="64:CtVariableReadImpl@watchdog" shape=ellipse]
388 [label="64:CtConstructorCallImpl@new Execute(new JUnitLogStreamHandler(this, Project.MSG_INFO, Project.MSG_WARN), watchdog)" shape=ellipse]
389 [label="63:CtVirtualElement@execute" shape=ellipse]
390 [label="63:CtLocalVariableImpl@Execute execute = new Execute(new JUnitLogStreamHandler(this, Project.MSG_INFO, Project.MSG_WARN), watchdog)" shape=ellipse]
391 [label="65:CtExecutableReferenceImpl@setCommandline()" shape=ellipse]
392 [label="65:CtVirtualElement@setCommandline" shape=ellipse]
393 [label="65:CtVariableReadImpl@execute" shape=ellipse]
394 [label="65:CtExecutableReferenceImpl@getCommandline()" shape=ellipse]
395 [label="65:CtVirtualElement@getCommandline" shape=ellipse]
396 [label="65:CtVariableReadImpl@cmd" shape=ellipse]
397 [label="65:CtInvocationImpl@cmd.getCommandline()" shape=ellipse]
398 [label="65:CtInvocationImpl@execute.setCommandline(cmd.getCommandline())" shape=ellipse]
399 [label="66:CtExecutableReferenceImpl@setAntRun()" shape=ellipse]
400 [label="66:CtVirtualElement@setAntRun" shape=ellipse]
401 [label="66:CtVariableReadImpl@execute" shape=ellipse]
402 [label="66:CtExecutableReferenceImpl@getProject()" shape=ellipse]
403 [label="66:CtVirtualElement@getProject" shape=ellipse]
404 [label="66:CtInvocationImpl@getProject()" shape=ellipse]
405 [label="66:CtInvocationImpl@execute.setAntRun(getProject())" shape=ellipse]
406 [label="67:CtFieldReadImpl@dir" shape=ellipse]
407 [label="67:CtLiteralImpl@null" shape=ellipse]
408 [label="67:CtBinaryOperatorImpl@dir != null" shape=ellipse]
409 [label="68:CtExecutableReferenceImpl@setWorkingDirectory()" shape=ellipse]
410 [label="68:CtVirtualElement@setWorkingDirectory" shape=ellipse]
411 [label="68:CtVariableReadImpl@execute" shape=ellipse]
412 [label="68:CtFieldReadImpl@dir" shape=ellipse]
413 [label="68:CtInvocationImpl@execute.setWorkingDirectory(dir)" shape=ellipse]
414 [label="67:CtBlockImpl@\{
    execute.setWorkingDirectory(dir);
\}" shape=ellipse]
415 [label="67:CtIfImpl@if (dir != null) \{
    execute.setWorkingDirectory(dir);
\}" shape=ellipse]
416 [label="70:CtVirtualElement@String[]" shape=ellipse]
417 [label="70:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
418 [label="70:CtExecutableReferenceImpl@getVariables()" shape=ellipse]
419 [label="70:CtVirtualElement@getVariables" shape=ellipse]
420 [label="70:CtFieldReadImpl@env" shape=ellipse]
421 [label="70:CtInvocationImpl@env.getVariables()" shape=ellipse]
422 [label="70:CtVirtualElement@environment" shape=ellipse]
423 [label="70:CtLocalVariableImpl@String[] environment = env.getVariables()" shape=ellipse]
424 [label="71:CtVariableReadImpl@environment" shape=ellipse]
425 [label="71:CtLiteralImpl@null" shape=ellipse]
426 [label="71:CtBinaryOperatorImpl@environment != null" shape=ellipse]
427 [label="72:CtTypeReferenceImpl@int" shape=ellipse]
428 [label="72:CtLiteralImpl@0" shape=ellipse]
429 [label="72:CtVirtualElement@i" shape=ellipse]
430 [label="72:CtLocalVariableImpl@int i = 0" shape=ellipse]
431 [label="72:CtVariableReadImpl@i" shape=ellipse]
432 [label="72:CtVariableReadImpl@environment" shape=ellipse]
433 [label="72:CtLocalVariableReferenceImpl@environment" shape=ellipse]
434 [label="72:CtFieldReadImpl@environment.length" shape=ellipse]
435 [label="72:CtBinaryOperatorImpl@i < environment.length" shape=ellipse]
436 [label="72:CtVariableWriteImpl@i" shape=ellipse]
437 [label="72:CtUnaryOperatorImpl@i++" shape=ellipse]
438 [label="73:CtExecutableReferenceImpl@log(java.lang.String,<unknown>)" shape=ellipse]
439 [label="73:CtVirtualElement@log" shape=ellipse]
440 [label="73:CtLiteralImpl@\"Setting environment variable: \"" shape=ellipse]
441 [label="73:CtVariableReadImpl@environment" shape=ellipse]
442 [label="73:CtVariableReadImpl@i" shape=ellipse]
443 [label="73:CtArrayReadImpl@environment[i]" shape=ellipse]
444 [label="73:CtBinaryOperatorImpl@\"Setting environment variable: \" + environment[i]" shape=ellipse]
445 [label="73:CtTypeAccessImpl@MSG_VERBOSE" shape=ellipse]
446 [label="73:CtInvocationImpl@log(\"Setting environment variable: \" + environment[i], MSG_VERBOSE)" shape=ellipse]
447 [label="72:CtBlockImpl@\{
    log(\"Setting environment variable: \" + environment[i], MSG_VERBOSE);
\}" shape=ellipse]
448 [label="72:CtForImpl@for (int i = 0; i < environment.length; i++) \{
    log(\"Setting environment variable: \" + environment[i], MSG_VERBOSE);
\}" shape=ellipse]
449 [label="71:CtBlockImpl@\{
    for (int i = 0; i < environment.length; i++) \{
        log(\"Setting environment variable: \" + environment[i], MSG_VERBOSE);
    \}
\}" shape=ellipse]
450 [label="71:CtIfImpl@if (environment != null) \{
    for (int i = 0; i < environment.length; i++) \{
        log(\"Setting environment variable: \" + environment[i], MSG_VERBOSE);
    \}
\}" shape=ellipse]
451 [label="76:CtExecutableReferenceImpl@setNewenvironment()" shape=ellipse]
452 [label="76:CtVirtualElement@setNewenvironment" shape=ellipse]
453 [label="76:CtVariableReadImpl@execute" shape=ellipse]
454 [label="76:CtFieldReadImpl@newEnvironment" shape=ellipse]
455 [label="76:CtInvocationImpl@execute.setNewenvironment(newEnvironment)" shape=ellipse]
456 [label="77:CtExecutableReferenceImpl@setEnvironment(java.lang.String[])" shape=ellipse]
457 [label="77:CtVirtualElement@setEnvironment" shape=ellipse]
458 [label="77:CtVariableReadImpl@execute" shape=ellipse]
459 [label="77:CtVariableReadImpl@environment" shape=ellipse]
460 [label="77:CtInvocationImpl@execute.setEnvironment(environment)" shape=ellipse]
461 [label="78:CtExecutableReferenceImpl@log(<unknown>,<unknown>)" shape=ellipse]
462 [label="78:CtVirtualElement@log" shape=ellipse]
463 [label="78:CtExecutableReferenceImpl@describeCommand()" shape=ellipse]
464 [label="78:CtVirtualElement@describeCommand" shape=ellipse]
465 [label="78:CtVariableReadImpl@cmd" shape=ellipse]
466 [label="78:CtInvocationImpl@cmd.describeCommand()" shape=ellipse]
467 [label="78:CtTypeAccessImpl@MSG_VERBOSE" shape=ellipse]
468 [label="78:CtInvocationImpl@log(cmd.describeCommand(), MSG_VERBOSE)" shape=ellipse]
469 [label="79:CtExecutableReferenceImpl@checkForkedPath(<unknown>)" shape=ellipse]
470 [label="79:CtVirtualElement@checkForkedPath" shape=ellipse]
471 [label="79:CtVariableReadImpl@cmd" shape=ellipse]
472 [label="79:CtInvocationImpl@checkForkedPath(cmd)" shape=ellipse]
473 [label="80:CtTypeReferenceImpl@TestResultHolder" shape=ellipse]
474 [label="80:CtTypeReferenceImpl@TestResultHolder" shape=ellipse]
475 [label="80:CtConstructorCallImpl@new TestResultHolder()" shape=ellipse]
476 [label="80:CtVirtualElement@result" shape=ellipse]
477 [label="80:CtLocalVariableImpl@TestResultHolder result = new TestResultHolder()" shape=ellipse]
478 [label="82:CtFieldWriteImpl@result.exitCode" shape=ellipse]
479 [label="82:CtVariableWriteImpl@result" shape=ellipse]
480 [label="82:CtExecutableReferenceImpl@execute()" shape=ellipse]
481 [label="82:CtVirtualElement@execute" shape=ellipse]
482 [label="82:CtVariableReadImpl@execute" shape=ellipse]
483 [label="82:CtInvocationImpl@execute.execute()" shape=ellipse]
484 [label="82:CtAssignmentImpl@result.exitCode = execute.execute()" shape=ellipse]
485 [label="81:CtBlockImpl@\{
    result.exitCode = execute.execute();
\}" shape=ellipse]
486 [label="83:CtVirtualElement@e" shape=ellipse]
487 [label="83:CtTypeReferenceImpl@IOException" shape=ellipse]
488 [label="83:CtCatchVariableImpl@IOException e" shape=ellipse]
489 [label="84:CtTypeReferenceImpl@BuildException" shape=ellipse]
490 [label="84:CtLiteralImpl@\"Process fork failed.\"" shape=ellipse]
491 [label="84:CtVariableReadImpl@e" shape=ellipse]
492 [label="84:CtExecutableReferenceImpl@getLocation()" shape=ellipse]
493 [label="84:CtVirtualElement@getLocation" shape=ellipse]
494 [label="84:CtInvocationImpl@getLocation()" shape=ellipse]
495 [label="84:CtConstructorCallImpl@new BuildException(\"Process fork failed.\", e, getLocation())" shape=ellipse]
496 [label="84:CtThrowImpl@throw new BuildException(\"Process fork failed.\", e, getLocation())" shape=ellipse]
497 [label="83:CtBlockImpl@\{
    throw new BuildException(\"Process fork failed.\", e, getLocation());
\}" shape=ellipse]
498 [label="83:CtCatchImpl@ catch (IOException e) \{
    throw new BuildException(\"Process fork failed.\", e, getLocation());
\}" shape=ellipse]
499 [label="86:CtTypeReferenceImpl@String" shape=ellipse]
500 [label="86:CtLiteralImpl@\"unknown\"" shape=ellipse]
501 [label="86:CtVirtualElement@vmCrashString" shape=ellipse]
502 [label="86:CtLocalVariableImpl@String vmCrashString = \"unknown\"" shape=ellipse]
503 [label="87:CtTypeReferenceImpl@BufferedReader" shape=ellipse]
504 [label="87:CtLiteralImpl@null" shape=ellipse]
505 [label="87:CtVirtualElement@br" shape=ellipse]
506 [label="87:CtLocalVariableImpl@BufferedReader br = null" shape=ellipse]
507 [label="89:CtExecutableReferenceImpl@exists()" shape=ellipse]
508 [label="89:CtVirtualElement@exists" shape=ellipse]
509 [label="89:CtVariableReadImpl@vmWatcher" shape=ellipse]
510 [label="89:CtInvocationImpl@vmWatcher.exists()" shape=ellipse]
511 [label="90:CtVariableWriteImpl@br" shape=ellipse]
512 [label="90:CtTypeReferenceImpl@BufferedReader" shape=ellipse]
513 [label="90:CtTypeReferenceImpl@FileReader" shape=ellipse]
514 [label="90:CtVariableReadImpl@vmWatcher" shape=ellipse]
515 [label="90:CtConstructorCallImpl@new FileReader(vmWatcher)" shape=ellipse]
516 [label="90:CtConstructorCallImpl@new BufferedReader(new FileReader(vmWatcher))" shape=ellipse]
517 [label="90:CtAssignmentImpl@br = new BufferedReader(new FileReader(vmWatcher))" shape=ellipse]
518 [label="91:CtVariableWriteImpl@vmCrashString" shape=ellipse]
519 [label="91:CtExecutableReferenceImpl@readLine()" shape=ellipse]
520 [label="91:CtVirtualElement@readLine" shape=ellipse]
521 [label="91:CtVariableReadImpl@br" shape=ellipse]
522 [label="91:CtInvocationImpl@br.readLine()" shape=ellipse]
523 [label="91:CtAssignmentImpl@vmCrashString = br.readLine()" shape=ellipse]
524 [label="89:CtBlockImpl@\{
    br = new BufferedReader(new FileReader(vmWatcher));
    vmCrashString = br.readLine();
\}" shape=ellipse]
525 [label="93:CtVariableWriteImpl@vmCrashString" shape=ellipse]
526 [label="94:CtLiteralImpl@\"Monitor file (\"" shape=ellipse]
527 [label="94:CtExecutableReferenceImpl@getAbsolutePath()" shape=ellipse]
528 [label="94:CtVirtualElement@getAbsolutePath" shape=ellipse]
529 [label="94:CtVariableReadImpl@vmWatcher" shape=ellipse]
530 [label="94:CtInvocationImpl@vmWatcher.getAbsolutePath()" shape=ellipse]
531 [label="94:CtBinaryOperatorImpl@(\"Monitor file (\" + vmWatcher.getAbsolutePath())" shape=ellipse]
532 [label="95:CtLiteralImpl@\") missing, location not writable,\"" shape=ellipse]
533 [label="94:CtBinaryOperatorImpl@((\"Monitor file (\" + vmWatcher.getAbsolutePath()) + \") missing, location not writable,\")" shape=ellipse]
534 [label="96:CtLiteralImpl@\" testcase not started or mixing ant versions?\"" shape=ellipse]
535 [label="94:CtBinaryOperatorImpl@((\"Monitor file (\" + vmWatcher.getAbsolutePath()) + \") missing, location not writable,\") + \" testcase not started or mixing ant versions?\"" shape=ellipse]
536 [label="93:CtAssignmentImpl@vmCrashString = ((\"Monitor file (\" + vmWatcher.getAbsolutePath()) + \") missing, location not writable,\") + \" testcase not started or mixing ant versions?\"" shape=ellipse]
537 [label="92:CtBlockImpl@\{
    vmCrashString = ((\"Monitor file (\" + vmWatcher.getAbsolutePath()) + \") missing, location not writable,\") + \" testcase not started or mixing ant versions?\";
\}" shape=ellipse]
538 [label="89:CtIfImpl@if (vmWatcher.exists()) \{
    br = new BufferedReader(new FileReader(vmWatcher));
    vmCrashString = br.readLine();
\} else \{
    vmCrashString = ((\"Monitor file (\" + vmWatcher.getAbsolutePath()) + \") missing, location not writable,\") + \" testcase not started or mixing ant versions?\";
\}" shape=ellipse]
539 [label="88:CtBlockImpl@\{
    if (vmWatcher.exists()) \{
        br = new BufferedReader(new FileReader(vmWatcher));
        vmCrashString = br.readLine();
    \} else \{
        vmCrashString = ((\"Monitor file (\" + vmWatcher.getAbsolutePath()) + \") missing, location not writable,\") + \" testcase not started or mixing ant versions?\";
    \}
\}" shape=ellipse]
540 [label="98:CtVirtualElement@e" shape=ellipse]
541 [label="98:CtTypeReferenceImpl@Exception" shape=ellipse]
542 [label="98:CtCatchVariableImpl@Exception e" shape=ellipse]
543 [label="99:CtExecutableReferenceImpl@printStackTrace()" shape=ellipse]
544 [label="99:CtVirtualElement@printStackTrace" shape=ellipse]
545 [label="99:CtVariableReadImpl@e" shape=ellipse]
546 [label="99:CtInvocationImpl@e.printStackTrace()" shape=ellipse]
547 [label="98:CtBlockImpl@\{
    e.printStackTrace();
\}" shape=ellipse]
548 [label="98:CtCatchImpl@ catch (Exception e) \{
    e.printStackTrace();
\}" shape=ellipse]
549 [label="101:CtExecutableReferenceImpl@close(BufferedReader)" shape=ellipse]
550 [label="101:CtVirtualElement@close" shape=ellipse]
551 [label="101:CtTypeAccessImpl@FileUtils" shape=ellipse]
552 [label="101:CtVariableReadImpl@br" shape=ellipse]
553 [label="101:CtInvocationImpl@FileUtils.close(br)" shape=ellipse]
554 [label="102:CtExecutableReferenceImpl@exists()" shape=ellipse]
555 [label="102:CtVirtualElement@exists" shape=ellipse]
556 [label="102:CtVariableReadImpl@vmWatcher" shape=ellipse]
557 [label="102:CtInvocationImpl@vmWatcher.exists()" shape=ellipse]
558 [label="103:CtExecutableReferenceImpl@delete()" shape=ellipse]
559 [label="103:CtVirtualElement@delete" shape=ellipse]
560 [label="103:CtVariableReadImpl@vmWatcher" shape=ellipse]
561 [label="103:CtInvocationImpl@vmWatcher.delete()" shape=ellipse]
562 [label="102:CtBlockImpl@\{
    vmWatcher.delete();
\}" shape=ellipse]
563 [label="102:CtIfImpl@if (vmWatcher.exists()) \{
    vmWatcher.delete();
\}" shape=ellipse]
564 [label="100:CtBlockImpl@\{
    FileUtils.close(br);
    if (vmWatcher.exists()) \{
        vmWatcher.delete();
    \}
\}" shape=ellipse]
565 [label="88:CtTryImpl@try \{
    if (vmWatcher.exists()) \{
        br = new BufferedReader(new FileReader(vmWatcher));
        vmCrashString = br.readLine();
    \} else \{
        vmCrashString = ((\"Monitor file (\" + vmWatcher.getAbsolutePath()) + \") missing, location not writable,\") + \" testcase not started or mixing ant versions?\";
    \}
\} catch (Exception e) \{
    e.printStackTrace();
\} finally \{
    FileUtils.close(br);
    if (vmWatcher.exists()) \{
        vmWatcher.delete();
    \}
\}" shape=ellipse]
566 [label="106:CtTypeReferenceImpl@boolean" shape=ellipse]
567 [label="107:CtVariableReadImpl@watchdog" shape=ellipse]
568 [label="107:CtLiteralImpl@null" shape=ellipse]
569 [label="107:CtBinaryOperatorImpl@(watchdog != null)" shape=ellipse]
570 [label="107:CtExecutableReferenceImpl@killedProcess()" shape=ellipse]
571 [label="107:CtVirtualElement@killedProcess" shape=ellipse]
572 [label="107:CtVariableReadImpl@watchdog" shape=ellipse]
573 [label="107:CtInvocationImpl@watchdog.killedProcess()" shape=ellipse]
574 [label="107:CtBinaryOperatorImpl@((watchdog != null) && watchdog.killedProcess())" shape=ellipse]
575 [label="108:CtExecutableReferenceImpl@equals(java.lang.String)" shape=ellipse]
576 [label="108:CtVirtualElement@equals" shape=ellipse]
577 [label="108:CtTypeAccessImpl@TERMINATED_SUCCESSFULLY" shape=ellipse]
578 [label="108:CtVariableReadImpl@vmCrashString" shape=ellipse]
579 [label="108:CtInvocationImpl@TERMINATED_SUCCESSFULLY.equals(vmCrashString)" shape=ellipse]
580 [label="108:CtUnaryOperatorImpl@(!TERMINATED_SUCCESSFULLY.equals(vmCrashString))" shape=ellipse]
581 [label="107:CtBinaryOperatorImpl@((watchdog != null) && watchdog.killedProcess()) || (!TERMINATED_SUCCESSFULLY.equals(vmCrashString))" shape=ellipse]
582 [label="106:CtVirtualElement@crash" shape=ellipse]
583 [label="106:CtLocalVariableImpl@boolean crash = ((watchdog != null) && watchdog.killedProcess()) || (!TERMINATED_SUCCESSFULLY.equals(vmCrashString))" shape=ellipse]
584 [label="109:CtVariableReadImpl@casesFile" shape=ellipse]
585 [label="109:CtLiteralImpl@null" shape=ellipse]
586 [label="109:CtBinaryOperatorImpl@(casesFile != null)" shape=ellipse]
587 [label="109:CtVariableReadImpl@crash" shape=ellipse]
588 [label="109:CtBinaryOperatorImpl@(casesFile != null) && crash" shape=ellipse]
589 [label="110:CtVariableWriteImpl@test" shape=ellipse]
590 [label="110:CtExecutableReferenceImpl@createDummyTestForBatchTest(<unknown>)" shape=ellipse]
591 [label="110:CtVirtualElement@createDummyTestForBatchTest" shape=ellipse]
592 [label="110:CtVariableReadImpl@test" shape=ellipse]
593 [label="110:CtInvocationImpl@createDummyTestForBatchTest(test)" shape=ellipse]
594 [label="110:CtAssignmentImpl@test = createDummyTestForBatchTest(test)" shape=ellipse]
595 [label="109:CtBlockImpl@\{
    test = createDummyTestForBatchTest(test);
\}" shape=ellipse]
596 [label="109:CtIfImpl@if ((casesFile != null) && crash) \{
    test = createDummyTestForBatchTest(test);
\}" shape=ellipse]
597 [label="112:CtVariableReadImpl@watchdog" shape=ellipse]
598 [label="112:CtLiteralImpl@null" shape=ellipse]
599 [label="112:CtBinaryOperatorImpl@(watchdog != null)" shape=ellipse]
600 [label="112:CtExecutableReferenceImpl@killedProcess()" shape=ellipse]
601 [label="112:CtVirtualElement@killedProcess" shape=ellipse]
602 [label="112:CtVariableReadImpl@watchdog" shape=ellipse]
603 [label="112:CtInvocationImpl@watchdog.killedProcess()" shape=ellipse]
604 [label="112:CtBinaryOperatorImpl@(watchdog != null) && watchdog.killedProcess()" shape=ellipse]
605 [label="113:CtFieldWriteImpl@result.timedOut" shape=ellipse]
606 [label="113:CtVariableWriteImpl@result" shape=ellipse]
607 [label="113:CtLiteralImpl@true" shape=ellipse]
608 [label="113:CtAssignmentImpl@result.timedOut = true" shape=ellipse]
609 [label="114:CtExecutableReferenceImpl@logTimeout(<unknown>,<unknown>,java.lang.String)" shape=ellipse]
610 [label="114:CtVirtualElement@logTimeout" shape=ellipse]
611 [label="114:CtVariableReadImpl@feArray" shape=ellipse]
612 [label="114:CtVariableReadImpl@test" shape=ellipse]
613 [label="114:CtVariableReadImpl@vmCrashString" shape=ellipse]
614 [label="114:CtInvocationImpl@logTimeout(feArray, test, vmCrashString)" shape=ellipse]
615 [label="112:CtBlockImpl@\{
    result.timedOut = true;
    logTimeout(feArray, test, vmCrashString);
\}" shape=ellipse]
616 [label="115:CtVariableReadImpl@crash" shape=ellipse]
617 [label="116:CtFieldWriteImpl@result.crashed" shape=ellipse]
618 [label="116:CtVariableWriteImpl@result" shape=ellipse]
619 [label="116:CtLiteralImpl@true" shape=ellipse]
620 [label="116:CtAssignmentImpl@result.crashed = true" shape=ellipse]
621 [label="117:CtExecutableReferenceImpl@logVmCrash(<unknown>,<unknown>,java.lang.String)" shape=ellipse]
622 [label="117:CtVirtualElement@logVmCrash" shape=ellipse]
623 [label="117:CtVariableReadImpl@feArray" shape=ellipse]
624 [label="117:CtVariableReadImpl@test" shape=ellipse]
625 [label="117:CtVariableReadImpl@vmCrashString" shape=ellipse]
626 [label="117:CtInvocationImpl@logVmCrash(feArray, test, vmCrashString)" shape=ellipse]
627 [label="115:CtBlockImpl@\{
    result.crashed = true;
    logVmCrash(feArray, test, vmCrashString);
\}" shape=ellipse]
628 [label="115:CtIfImpl@if (crash) \{
    result.crashed = true;
    logVmCrash(feArray, test, vmCrashString);
\}" shape=ellipse]
629 [label="115:CtBlockImpl@
    if (crash) \{
        result.crashed = true;
        logVmCrash(feArray, test, vmCrashString);
    \}
" shape=ellipse]
630 [label="112:CtIfImpl@if ((watchdog != null) && watchdog.killedProcess()) \{
    result.timedOut = true;
    logTimeout(feArray, test, vmCrashString);
\} else if (crash) \{
    result.crashed = true;
    logVmCrash(feArray, test, vmCrashString);
\}" shape=ellipse]
631 [label="119:CtExecutableReferenceImpl@delete()" shape=ellipse]
632 [label="119:CtVirtualElement@delete" shape=ellipse]
633 [label="119:CtVariableReadImpl@propsFile" shape=ellipse]
634 [label="119:CtInvocationImpl@propsFile.delete()" shape=ellipse]
635 [label="119:CtUnaryOperatorImpl@!propsFile.delete()" shape=ellipse]
636 [label="120:CtTypeReferenceImpl@BuildException" shape=ellipse]
637 [label="120:CtLiteralImpl@\"Could not delete temporary \"" shape=ellipse]
638 [label="120:CtLiteralImpl@\"properties file.\"" shape=ellipse]
639 [label="120:CtBinaryOperatorImpl@\"Could not delete temporary \" + \"properties file.\"" shape=ellipse]
640 [label="120:CtConstructorCallImpl@new BuildException(\"Could not delete temporary \" + \"properties file.\")" shape=ellipse]
641 [label="120:CtThrowImpl@throw new BuildException(\"Could not delete temporary \" + \"properties file.\")" shape=ellipse]
642 [label="119:CtBlockImpl@\{
    throw new BuildException(\"Could not delete temporary \" + \"properties file.\");
\}" shape=ellipse]
643 [label="119:CtIfImpl@if (!propsFile.delete()) \{
    throw new BuildException(\"Could not delete temporary \" + \"properties file.\");
\}" shape=ellipse]
644 [label="85:CtBlockImpl@\{
    String vmCrashString = \"unknown\";
    BufferedReader br = null;
    try \{
        if (vmWatcher.exists()) \{
            br = new BufferedReader(new FileReader(vmWatcher));
            vmCrashString = br.readLine();
        \} else \{
            vmCrashString = ((\"Monitor file (\" + vmWatcher.getAbsolutePath()) + \") missing, location not writable,\") + \" testcase not started or mixing ant versions?\";
        \}
    \} catch (Exception e) \{
        e.printStackTrace();
    \} finally \{
        FileUtils.close(br);
        if (vmWatcher.exists()) \{
            vmWatcher.delete();
        \}
    \}
    boolean crash = ((watchdog != null) && watchdog.killedProcess()) || (!TERMINATED_SUCCESSFULLY.equals(vmCrashString));
    if ((casesFile != null) && crash) \{
        test = createDummyTestForBatchTest(test);
    \}
    if ((watchdog != null) && watchdog.killedProcess()) \{
        result.timedOut = true;
        logTimeout(feArray, test, vmCrashString);
    \} else if (crash) \{
        result.crashed = true;
        logVmCrash(feArray, test, vmCrashString);
    \}
    if (!propsFile.delete()) \{
        throw new BuildException(\"Could not delete temporary \" + \"properties file.\");
    \}
\}" shape=ellipse]
645 [label="81:CtTryImpl@try \{
    result.exitCode = execute.execute();
\} catch (IOException e) \{
    throw new BuildException(\"Process fork failed.\", e, getLocation());
\} finally \{
    String vmCrashString = \"unknown\";
    BufferedReader br = null;
    try \{
        if (vmWatcher.exists()) \{
            br = new BufferedReader(new FileReader(vmWatcher));
            vmCrashString = br.readLine();
        \} else \{
            vmCrashString = ((\"Monitor file (\" + vmWatcher.getAbsolutePath()) + \") missing, location not writable,\") + \" testcase not started or mixing ant versions?\";
        \}
    \} catch (Exception e) \{
        e.printStackTrace();
    \} finally \{
        FileUtils.close(br);
        if (vmWatcher.exists()) \{
            vmWatcher.delete();
        \}
    \}
    boolean crash = ((watchdog != null) && watchdog.killedProcess()) || (!TERMINATED_SUCCESSFULLY.equals(vmCrashString));
    if ((casesFile != null) && crash) \{
        test = createDummyTestForBatchTest(test);
    \}
    if ((watchdog != null) && watchdog.killedProcess()) \{
        result.timedOut = true;
        logTimeout(feArray, test, vmCrashString);
    \} else if (crash) \{
        result.crashed = true;
        logVmCrash(feArray, test, vmCrashString);
    \}
    if (!propsFile.delete()) \{
        throw new BuildException(\"Could not delete temporary \" + \"properties file.\");
    \}
\}" shape=ellipse]
646 [label="123:CtVariableReadImpl@result" shape=ellipse]
647 [label="123:CtReturnImpl@return result" shape=ellipse]
648 [label="3:CtBlockImpl@\{
    if (perm != null) \{
        log(\"Permissions ignored when running in forked mode!\", MSG_WARN);
    \}
    CommandlineJava cmd;
    try \{
        cmd = ((CommandlineJava) (getCommandline().clone()));
    \} catch (CloneNotSupportedException e) \{
        throw new BuildException(\"This shouldn't happen\", e, getLocation());
    \}
    cmd.setClassname(\"org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner\");
    if (casesFile == null) \{
        cmd.createArgument().setValue(test.getName());
    \} else \{
        log(\"Running multiple tests in the same VM\", MSG_VERBOSE);
        cmd.createArgument().setValue(Constants.TESTSFILE + casesFile);
    \}
    cmd.createArgument().setValue(Constants.FILTERTRACE + test.getFiltertrace());
    cmd.createArgument().setValue(Constants.HALT_ON_ERROR + test.getHaltonerror());
    cmd.createArgument().setValue(Constants.HALT_ON_FAILURE + test.getHaltonfailure());
    checkIncludeAntRuntime(cmd);
    checkIncludeSummary(cmd);
    cmd.createArgument().setValue(Constants.SHOWOUTPUT + String.valueOf(showOutput));
    cmd.createArgument().setValue(Constants.OUTPUT_TO_FORMATTERS + String.valueOf(outputToFormatters));
    cmd.createArgument().setValue(Constants.LOGTESTLISTENEREVENTS + \"true\");
    StringBuffer formatterArg = new StringBuffer(STRING_BUFFER_SIZE);
    final FormatterElement[] feArray = mergeFormatters(test);
    for (int i = 0; i < feArray.length; i++) \{
        FormatterElement fe = feArray[i];
        if (fe.shouldUse(this)) \{
            formatterArg.append(FORMATTER);
            formatterArg.append(fe.getClassname());
            File outFile = getOutput(fe, test);
            if (outFile != null) \{
                formatterArg.append(\",\");
                formatterArg.append(outFile);
            \}
            cmd.createArgument().setValue(formatterArg.toString());
            formatterArg = new StringBuffer();
        \}
    \}
    File vmWatcher = createTempPropertiesFile(\"junitvmwatcher\");
    cmd.createArgument().setValue(Constants.CRASHFILE + vmWatcher.getAbsolutePath());
    File propsFile = createTempPropertiesFile(\"junit\");
    cmd.createArgument().setValue(Constants.PROPSFILE + propsFile.getAbsolutePath());
    Hashtable p = getProject().getProperties();
    Properties props = new Properties();
    for (Enumeration e = p.keys(); e.hasMoreElements();) \{
        Object key = e.nextElement();
        props.put(key, p.get(key));
    \}
    try \{
        FileOutputStream outstream = new FileOutputStream(propsFile);
        props.store(outstream, \"Ant JUnitTask generated properties file\");
        outstream.close();
    \} catch (IOException e) \{
        propsFile.delete();
        throw new BuildException(\"Error creating temporary properties \" + \"file.\", e, getLocation());
    \}
    Execute execute = new Execute(new JUnitLogStreamHandler(this, Project.MSG_INFO, Project.MSG_WARN), watchdog);
    execute.setCommandline(cmd.getCommandline());
    execute.setAntRun(getProject());
    if (dir != null) \{
        execute.setWorkingDirectory(dir);
    \}
    String[] environment = env.getVariables();
    if (environment != null) \{
        for (int i = 0; i < environment.length; i++) \{
            log(\"Setting environment variable: \" + environment[i], MSG_VERBOSE);
        \}
    \}
    execute.setNewenvironment(newEnvironment);
    execute.setEnvironment(environment);
    log(cmd.describeCommand(), MSG_VERBOSE);
    checkForkedPath(cmd);
    TestResultHolder result = new TestResultHolder();
    try \{
        result.exitCode = execute.execute();
    \} catch (IOException e) \{
        throw new BuildException(\"Process fork failed.\", e, getLocation());
    \} finally \{
        String vmCrashString = \"unknown\";
        BufferedReader br = null;
        try \{
            if (vmWatcher.exists()) \{
                br = new BufferedReader(new FileReader(vmWatcher));
                vmCrashString = br.readLine();
            \} else \{
                vmCrashString = ((\"Monitor file (\" + vmWatcher.getAbsolutePath()) + \") missing, location not writable,\") + \" testcase not started or mixing ant versions?\";
            \}
        \} catch (Exception e) \{
            e.printStackTrace();
        \} finally \{
            FileUtils.close(br);
            if (vmWatcher.exists()) \{
                vmWatcher.delete();
            \}
        \}
        boolean crash = ((watchdog != null) && watchdog.killedProcess()) || (!TERMINATED_SUCCESSFULLY.equals(vmCrashString));
        if ((casesFile != null) && crash) \{
            test = createDummyTestForBatchTest(test);
        \}
        if ((watchdog != null) && watchdog.killedProcess()) \{
            result.timedOut = true;
            logTimeout(feArray, test, vmCrashString);
        \} else if (crash) \{
            result.crashed = true;
            logVmCrash(feArray, test, vmCrashString);
        \}
        if (!propsFile.delete()) \{
            throw new BuildException(\"Could not delete temporary \" + \"properties file.\");
        \}
    \}
    return result;
\}" shape=ellipse]
649 [label="2:CtMethodImpl@private TestResultHolder executeAsForked(JUnitTest test, ExecuteWatchdog watchdog, File casesFile) throws BuildException \{
    if (perm != null) \{
        log(\"Permissions ignored when running in forked mode!\", MSG_WARN);
    \}
    CommandlineJava cmd;
    try \{
        cmd = ((CommandlineJava) (getCommandline().clone()));
    \} catch (CloneNotSupportedException e) \{
        throw new BuildException(\"This shouldn't happen\", e, getLocation());
    \}
    cmd.setClassname(\"org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner\");
    if (casesFile == null) \{
        cmd.createArgument().setValue(test.getName());
    \} else \{
        log(\"Running multiple tests in the same VM\", MSG_VERBOSE);
        cmd.createArgument().setValue(Constants.TESTSFILE + casesFile);
    \}
    cmd.createArgument().setValue(Constants.FILTERTRACE + test.getFiltertrace());
    cmd.createArgument().setValue(Constants.HALT_ON_ERROR + test.getHaltonerror());
    cmd.createArgument().setValue(Constants.HALT_ON_FAILURE + test.getHaltonfailure());
    checkIncludeAntRuntime(cmd);
    checkIncludeSummary(cmd);
    cmd.createArgument().setValue(Constants.SHOWOUTPUT + String.valueOf(showOutput));
    cmd.createArgument().setValue(Constants.OUTPUT_TO_FORMATTERS + String.valueOf(outputToFormatters));
    cmd.createArgument().setValue(Constants.LOGTESTLISTENEREVENTS + \"true\");
    StringBuffer formatterArg = new StringBuffer(STRING_BUFFER_SIZE);
    final FormatterElement[] feArray = mergeFormatters(test);
    for (int i = 0; i < feArray.length; i++) \{
        FormatterElement fe = feArray[i];
        if (fe.shouldUse(this)) \{
            formatterArg.append(FORMATTER);
            formatterArg.append(fe.getClassname());
            File outFile = getOutput(fe, test);
            if (outFile != null) \{
                formatterArg.append(\",\");
                formatterArg.append(outFile);
            \}
            cmd.createArgument().setValue(formatterArg.toString());
            formatterArg = new StringBuffer();
        \}
    \}
    File vmWatcher = createTempPropertiesFile(\"junitvmwatcher\");
    cmd.createArgument().setValue(Constants.CRASHFILE + vmWatcher.getAbsolutePath());
    File propsFile = createTempPropertiesFile(\"junit\");
    cmd.createArgument().setValue(Constants.PROPSFILE + propsFile.getAbsolutePath());
    Hashtable p = getProject().getProperties();
    Properties props = new Properties();
    for (Enumeration e = p.keys(); e.hasMoreElements();) \{
        Object key = e.nextElement();
        props.put(key, p.get(key));
    \}
    try \{
        FileOutputStream outstream = new FileOutputStream(propsFile);
        props.store(outstream, \"Ant JUnitTask generated properties file\");
        outstream.close();
    \} catch (IOException e) \{
        propsFile.delete();
        throw new BuildException(\"Error creating temporary properties \" + \"file.\", e, getLocation());
    \}
    Execute execute = new Execute(new JUnitLogStreamHandler(this, Project.MSG_INFO, Project.MSG_WARN), watchdog);
    execute.setCommandline(cmd.getCommandline());
    execute.setAntRun(getProject());
    if (dir != null) \{
        execute.setWorkingDirectory(dir);
    \}
    String[] environment = env.getVariables();
    if (environment != null) \{
        for (int i = 0; i < environment.length; i++) \{
            log(\"Setting environment variable: \" + environment[i], MSG_VERBOSE);
        \}
    \}
    execute.setNewenvironment(newEnvironment);
    execute.setEnvironment(environment);
    log(cmd.describeCommand(), MSG_VERBOSE);
    checkForkedPath(cmd);
    TestResultHolder result = new TestResultHolder();
    try \{
        result.exitCode = execute.execute();
    \} catch (IOException e) \{
        throw new BuildException(\"Process fork failed.\", e, getLocation());
    \} finally \{
        String vmCrashString = \"unknown\";
        BufferedReader br = null;
        try \{
            if (vmWatcher.exists()) \{
                br = new BufferedReader(new FileReader(vmWatcher));
                vmCrashString = br.readLine();
            \} else \{
                vmCrashString = ((\"Monitor file (\" + vmWatcher.getAbsolutePath()) + \") missing, location not writable,\") + \" testcase not started or mixing ant versions?\";
            \}
        \} catch (Exception e) \{
            e.printStackTrace();
        \} finally \{
            FileUtils.close(br);
            if (vmWatcher.exists()) \{
                vmWatcher.delete();
            \}
        \}
        boolean crash = ((watchdog != null) && watchdog.killedProcess()) || (!TERMINATED_SUCCESSFULLY.equals(vmCrashString));
        if ((casesFile != null) && crash) \{
            test = createDummyTestForBatchTest(test);
        \}
        if ((watchdog != null) && watchdog.killedProcess()) \{
            result.timedOut = true;
            logTimeout(feArray, test, vmCrashString);
        \} else if (crash) \{
            result.crashed = true;
            logVmCrash(feArray, test, vmCrashString);
        \}
        if (!propsFile.delete()) \{
            throw new BuildException(\"Could not delete temporary \" + \"properties file.\");
        \}
    \}
    return result;
\}" shape=ellipse]
650 [label="28:Insert@INSERT" shape=ellipse]
651 [label="28:CtInvocationImpl@cmd.createArgument().setValue(Constants.LOG_FAILED_TESTS + String.valueOf(logFailedTests))" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
6 -> 7 [label="AST"];
11 -> 9 [label="AST"];
11 -> 10 [label="AST"];
11 -> 17 [label="Control Dep"];
11 -> 16 [label="Control Dep"];
11 -> 12 [label="Control Dep"];
11 -> 14 [label="Control Dep"];
11 -> 15 [label="Control Dep"];
16 -> 13 [label="AST"];
16 -> 12 [label="AST"];
16 -> 14 [label="AST"];
16 -> 15 [label="AST"];
17 -> 16 [label="AST"];
18 -> 11 [label="AST"];
18 -> 17 [label="AST"];
21 -> 20 [label="AST"];
21 -> 19 [label="AST"];
22 -> 48 [label="Define-Use"];
22 -> 58 [label="Define-Use"];
22 -> 75 [label="Define-Use"];
22 -> 87 [label="Define-Use"];
22 -> 100 [label="Define-Use"];
22 -> 113 [label="Define-Use"];
22 -> 124 [label="Define-Use"];
22 -> 128 [label="Define-Use"];
22 -> 134 [label="Define-Use"];
22 -> 148 [label="Define-Use"];
22 -> 162 [label="Define-Use"];
22 -> 244 [label="Define-Use"];
22 -> 270 [label="Define-Use"];
22 -> 290 [label="Define-Use"];
22 -> 396 [label="Define-Use"];
22 -> 465 [label="Define-Use"];
22 -> 471 [label="Define-Use"];
27 -> 26 [label="AST"];
27 -> 25 [label="AST"];
28 -> 24 [label="AST"];
28 -> 29 [label="AST"];
28 -> 27 [label="AST"];
28 -> 23 [label="AST"];
30 -> 22 [label="AST"];
30 -> 28 [label="AST"];
31 -> 30 [label="AST"];
32 -> 37 [label="Define-Use"];
34 -> 32 [label="AST"];
34 -> 33 [label="AST"];
34 -> 43 [label="Control Dep"];
34 -> 42 [label="Control Dep"];
34 -> 41 [label="Control Dep"];
34 -> 36 [label="Control Dep"];
34 -> 37 [label="Control Dep"];
34 -> 40 [label="Control Dep"];
34 -> 38 [label="Control Dep"];
40 -> 39 [label="AST"];
40 -> 38 [label="AST"];
41 -> 36 [label="AST"];
41 -> 37 [label="AST"];
41 -> 40 [label="AST"];
42 -> 41 [label="AST"];
43 -> 42 [label="AST"];
44 -> 34 [label="AST"];
44 -> 43 [label="AST"];
45 -> 31 [label="AST"];
45 -> 44 [label="AST"];
50 -> 47 [label="AST"];
50 -> 48 [label="AST"];
50 -> 46 [label="AST"];
50 -> 49 [label="AST"];
53 -> 51 [label="AST"];
53 -> 52 [label="AST"];
53 -> 65 [label="Control Dep"];
53 -> 64 [label="Control Dep"];
53 -> 54 [label="Control Dep"];
53 -> 59 [label="Control Dep"];
53 -> 56 [label="Control Dep"];
53 -> 58 [label="Control Dep"];
53 -> 63 [label="Control Dep"];
53 -> 60 [label="Control Dep"];
53 -> 62 [label="Control Dep"];
53 -> 81 [label="Control Dep"];
53 -> 70 [label="Control Dep"];
53 -> 66 [label="Control Dep"];
53 -> 68 [label="Control Dep"];
53 -> 69 [label="Control Dep"];
53 -> 80 [label="Control Dep"];
53 -> 71 [label="Control Dep"];
53 -> 76 [label="Control Dep"];
53 -> 73 [label="Control Dep"];
53 -> 75 [label="Control Dep"];
53 -> 79 [label="Control Dep"];
53 -> 77 [label="Control Dep"];
53 -> 78 [label="Control Dep"];
59 -> 57 [label="AST"];
59 -> 58 [label="AST"];
59 -> 56 [label="AST"];
63 -> 61 [label="AST"];
63 -> 62 [label="AST"];
63 -> 60 [label="AST"];
64 -> 55 [label="AST"];
64 -> 59 [label="AST"];
64 -> 54 [label="AST"];
64 -> 63 [label="AST"];
65 -> 64 [label="AST"];
70 -> 67 [label="AST"];
70 -> 66 [label="AST"];
70 -> 68 [label="AST"];
70 -> 69 [label="AST"];
76 -> 74 [label="AST"];
76 -> 75 [label="AST"];
76 -> 73 [label="AST"];
79 -> 77 [label="AST"];
79 -> 78 [label="AST"];
80 -> 72 [label="AST"];
80 -> 76 [label="AST"];
80 -> 71 [label="AST"];
80 -> 79 [label="AST"];
81 -> 70 [label="AST"];
81 -> 80 [label="AST"];
82 -> 53 [label="AST"];
82 -> 65 [label="AST"];
82 -> 81 [label="AST"];
88 -> 86 [label="AST"];
88 -> 87 [label="AST"];
88 -> 85 [label="AST"];
93 -> 91 [label="AST"];
93 -> 92 [label="AST"];
93 -> 90 [label="AST"];
94 -> 89 [label="AST"];
94 -> 93 [label="AST"];
95 -> 84 [label="AST"];
95 -> 88 [label="AST"];
95 -> 83 [label="AST"];
95 -> 94 [label="AST"];
101 -> 99 [label="AST"];
101 -> 100 [label="AST"];
101 -> 98 [label="AST"];
106 -> 104 [label="AST"];
106 -> 105 [label="AST"];
106 -> 103 [label="AST"];
107 -> 102 [label="AST"];
107 -> 106 [label="AST"];
108 -> 97 [label="AST"];
108 -> 101 [label="AST"];
108 -> 96 [label="AST"];
108 -> 107 [label="AST"];
114 -> 112 [label="AST"];
114 -> 113 [label="AST"];
114 -> 111 [label="AST"];
119 -> 117 [label="AST"];
119 -> 118 [label="AST"];
119 -> 116 [label="AST"];
120 -> 115 [label="AST"];
120 -> 119 [label="AST"];
121 -> 110 [label="AST"];
121 -> 114 [label="AST"];
121 -> 109 [label="AST"];
121 -> 120 [label="AST"];
125 -> 123 [label="AST"];
125 -> 122 [label="AST"];
125 -> 124 [label="AST"];
129 -> 127 [label="AST"];
129 -> 126 [label="AST"];
129 -> 128 [label="AST"];
135 -> 133 [label="AST"];
135 -> 134 [label="AST"];
135 -> 132 [label="AST"];
141 -> 138 [label="AST"];
141 -> 139 [label="AST"];
141 -> 137 [label="AST"];
141 -> 140 [label="AST"];
142 -> 136 [label="AST"];
142 -> 141 [label="AST"];
143 -> 131 [label="AST"];
143 -> 135 [label="AST"];
143 -> 130 [label="AST"];
143 -> 142 [label="AST"];
149 -> 147 [label="AST"];
149 -> 148 [label="AST"];
149 -> 146 [label="AST"];
155 -> 152 [label="AST"];
155 -> 153 [label="AST"];
155 -> 151 [label="AST"];
155 -> 154 [label="AST"];
156 -> 150 [label="AST"];
156 -> 155 [label="AST"];
157 -> 145 [label="AST"];
157 -> 149 [label="AST"];
157 -> 144 [label="AST"];
157 -> 156 [label="AST"];
163 -> 161 [label="AST"];
163 -> 162 [label="AST"];
163 -> 160 [label="AST"];
166 -> 164 [label="AST"];
166 -> 165 [label="AST"];
167 -> 159 [label="AST"];
167 -> 163 [label="AST"];
167 -> 158 [label="AST"];
167 -> 166 [label="AST"];
170 -> 172 [label="Data Dep"];
171 -> 170 [label="AST"];
172 -> 206 [label="Define-Use"];
172 -> 211 [label="Define-Use"];
172 -> 230 [label="Define-Use"];
172 -> 235 [label="Define-Use"];
172 -> 248 [label="Define-Use"];
173 -> 172 [label="AST"];
173 -> 168 [label="AST"];
173 -> 171 [label="AST"];
175 -> 174 [label="AST"];
178 -> 180 [label="Data Dep"];
179 -> 177 [label="AST"];
179 -> 176 [label="AST"];
179 -> 178 [label="AST"];
180 -> 187 [label="Define-Use"];
180 -> 194 [label="Define-Use"];
180 -> 196 [label="Define-Use"];
180 -> 611 [label="Define-Use"];
180 -> 623 [label="Define-Use"];
181 -> 180 [label="AST"];
181 -> 175 [label="AST"];
181 -> 179 [label="AST"];
184 -> 186 [label="Define-Use"];
185 -> 184 [label="AST"];
185 -> 182 [label="AST"];
185 -> 183 [label="AST"];
187 -> 188 [label="AST"];
189 -> 187 [label="AST"];
190 -> 186 [label="AST"];
190 -> 189 [label="AST"];
190 -> 257 [label="Control Dep"];
190 -> 198 [label="Control Dep"];
190 -> 196 [label="Control Dep"];
190 -> 194 [label="Control Dep"];
190 -> 195 [label="Control Dep"];
190 -> 256 [label="Control Dep"];
190 -> 203 [label="Control Dep"];
190 -> 199 [label="Control Dep"];
190 -> 201 [label="Control Dep"];
190 -> 202 [label="Control Dep"];
191 -> 195 [label="Define-Use"];
191 -> 431 [label="Define-Use"];
191 -> 442 [label="Define-Use"];
192 -> 191 [label="AST"];
196 -> 194 [label="AST"];
196 -> 195 [label="AST"];
196 -> 197 [label="Data Dep"];
197 -> 201 [label="Define-Use"];
197 -> 214 [label="Define-Use"];
197 -> 220 [label="Define-Use"];
198 -> 197 [label="AST"];
198 -> 193 [label="AST"];
198 -> 196 [label="AST"];
203 -> 200 [label="AST"];
203 -> 201 [label="AST"];
203 -> 199 [label="AST"];
203 -> 202 [label="AST"];
203 -> 255 [label="Control Dep"];
203 -> 208 [label="Control Dep"];
203 -> 204 [label="Control Dep"];
203 -> 206 [label="Control Dep"];
203 -> 207 [label="Control Dep"];
203 -> 216 [label="Control Dep"];
203 -> 209 [label="Control Dep"];
203 -> 211 [label="Control Dep"];
203 -> 215 [label="Control Dep"];
203 -> 212 [label="Control Dep"];
203 -> 214 [label="Control Dep"];
203 -> 224 [label="Control Dep"];
203 -> 222 [label="Control Dep"];
203 -> 218 [label="Control Dep"];
203 -> 220 [label="Control Dep"];
203 -> 221 [label="Control Dep"];
203 -> 239 [label="Control Dep"];
203 -> 227 [label="Control Dep"];
203 -> 225 [label="Control Dep"];
203 -> 226 [label="Control Dep"];
203 -> 250 [label="Control Dep"];
203 -> 240 [label="Control Dep"];
203 -> 245 [label="Control Dep"];
203 -> 242 [label="Control Dep"];
203 -> 244 [label="Control Dep"];
203 -> 249 [label="Control Dep"];
203 -> 246 [label="Control Dep"];
203 -> 248 [label="Control Dep"];
203 -> 254 [label="Control Dep"];
203 -> 251 [label="Control Dep"];
203 -> 253 [label="Control Dep"];
208 -> 205 [label="AST"];
208 -> 206 [label="AST"];
208 -> 204 [label="AST"];
208 -> 207 [label="AST"];
215 -> 213 [label="AST"];
215 -> 214 [label="AST"];
215 -> 212 [label="AST"];
216 -> 210 [label="AST"];
216 -> 211 [label="AST"];
216 -> 209 [label="AST"];
216 -> 215 [label="AST"];
220 -> 223 [label="Data Dep"];
221 -> 223 [label="Data Dep"];
222 -> 219 [label="AST"];
222 -> 218 [label="AST"];
222 -> 220 [label="AST"];
222 -> 221 [label="AST"];
223 -> 225 [label="Define-Use"];
223 -> 236 [label="Define-Use"];
224 -> 223 [label="AST"];
224 -> 217 [label="AST"];
224 -> 222 [label="AST"];
227 -> 225 [label="AST"];
227 -> 226 [label="AST"];
227 -> 238 [label="Control Dep"];
227 -> 232 [label="Control Dep"];
227 -> 228 [label="Control Dep"];
227 -> 230 [label="Control Dep"];
227 -> 231 [label="Control Dep"];
227 -> 237 [label="Control Dep"];
227 -> 233 [label="Control Dep"];
227 -> 235 [label="Control Dep"];
227 -> 236 [label="Control Dep"];
232 -> 229 [label="AST"];
232 -> 230 [label="AST"];
232 -> 228 [label="AST"];
232 -> 231 [label="AST"];
237 -> 234 [label="AST"];
237 -> 235 [label="AST"];
237 -> 233 [label="AST"];
237 -> 236 [label="AST"];
238 -> 232 [label="AST"];
238 -> 237 [label="AST"];
239 -> 227 [label="AST"];
239 -> 238 [label="AST"];
245 -> 243 [label="AST"];
245 -> 244 [label="AST"];
245 -> 242 [label="AST"];
249 -> 247 [label="AST"];
249 -> 248 [label="AST"];
249 -> 246 [label="AST"];
250 -> 241 [label="AST"];
250 -> 245 [label="AST"];
250 -> 240 [label="AST"];
250 -> 249 [label="AST"];
254 -> 251 [label="AST"];
254 -> 253 [label="AST"];
255 -> 208 [label="AST"];
255 -> 216 [label="AST"];
255 -> 224 [label="AST"];
255 -> 239 [label="AST"];
255 -> 250 [label="AST"];
255 -> 254 [label="AST"];
256 -> 203 [label="AST"];
256 -> 255 [label="AST"];
257 -> 198 [label="AST"];
257 -> 256 [label="AST"];
258 -> 185 [label="AST"];
258 -> 190 [label="AST"];
258 -> 192 [label="AST"];
258 -> 257 [label="AST"];
263 -> 261 [label="AST"];
263 -> 260 [label="AST"];
263 -> 262 [label="AST"];
264 -> 275 [label="Define-Use"];
264 -> 509 [label="Define-Use"];
264 -> 514 [label="Define-Use"];
264 -> 529 [label="Define-Use"];
264 -> 556 [label="Define-Use"];
264 -> 560 [label="Define-Use"];
265 -> 264 [label="AST"];
265 -> 259 [label="AST"];
265 -> 263 [label="AST"];
271 -> 269 [label="AST"];
271 -> 270 [label="AST"];
271 -> 268 [label="AST"];
276 -> 274 [label="AST"];
276 -> 275 [label="AST"];
276 -> 273 [label="AST"];
277 -> 272 [label="AST"];
277 -> 276 [label="AST"];
278 -> 267 [label="AST"];
278 -> 271 [label="AST"];
278 -> 266 [label="AST"];
278 -> 277 [label="AST"];
283 -> 281 [label="AST"];
283 -> 280 [label="AST"];
283 -> 282 [label="AST"];
284 -> 295 [label="Define-Use"];
284 -> 345 [label="Define-Use"];
284 -> 365 [label="Define-Use"];
284 -> 633 [label="Define-Use"];
285 -> 284 [label="AST"];
285 -> 279 [label="AST"];
285 -> 283 [label="AST"];
291 -> 289 [label="AST"];
291 -> 290 [label="AST"];
291 -> 288 [label="AST"];
296 -> 294 [label="AST"];
296 -> 295 [label="AST"];
296 -> 293 [label="AST"];
297 -> 292 [label="AST"];
297 -> 296 [label="AST"];
298 -> 287 [label="AST"];
298 -> 291 [label="AST"];
298 -> 286 [label="AST"];
298 -> 297 [label="AST"];
304 -> 303 [label="AST"];
304 -> 302 [label="AST"];
305 -> 301 [label="AST"];
305 -> 304 [label="AST"];
305 -> 300 [label="AST"];
306 -> 316 [label="Define-Use"];
306 -> 337 [label="Define-Use"];
307 -> 306 [label="AST"];
307 -> 299 [label="AST"];
307 -> 305 [label="AST"];
311 -> 333 [label="Define-Use"];
311 -> 351 [label="Define-Use"];
312 -> 311 [label="AST"];
312 -> 308 [label="AST"];
312 -> 310 [label="AST"];
316 -> 318 [label="Data Dep"];
317 -> 315 [label="AST"];
317 -> 316 [label="AST"];
317 -> 314 [label="AST"];
318 -> 322 [label="Define-Use"];
318 -> 327 [label="Define-Use"];
319 -> 318 [label="AST"];
319 -> 313 [label="AST"];
319 -> 317 [label="AST"];
323 -> 321 [label="AST"];
323 -> 322 [label="AST"];
323 -> 320 [label="AST"];
323 -> 341 [label="Control Dep"];
323 -> 330 [label="Control Dep"];
323 -> 328 [label="Control Dep"];
323 -> 325 [label="Control Dep"];
323 -> 327 [label="Control Dep"];
323 -> 340 [label="Control Dep"];
323 -> 331 [label="Control Dep"];
323 -> 333 [label="Control Dep"];
323 -> 334 [label="Control Dep"];
323 -> 339 [label="Control Dep"];
323 -> 335 [label="Control Dep"];
323 -> 337 [label="Control Dep"];
323 -> 338 [label="Control Dep"];
327 -> 329 [label="Data Dep"];
328 -> 326 [label="AST"];
328 -> 327 [label="AST"];
328 -> 325 [label="AST"];
329 -> 334 [label="Define-Use"];
329 -> 338 [label="Define-Use"];
330 -> 329 [label="AST"];
330 -> 324 [label="AST"];
330 -> 328 [label="AST"];
339 -> 336 [label="AST"];
339 -> 337 [label="AST"];
339 -> 335 [label="AST"];
339 -> 338 [label="AST"];
340 -> 332 [label="AST"];
340 -> 333 [label="AST"];
340 -> 331 [label="AST"];
340 -> 334 [label="AST"];
340 -> 339 [label="AST"];
341 -> 330 [label="AST"];
341 -> 340 [label="AST"];
342 -> 319 [label="AST"];
342 -> 323 [label="AST"];
342 -> 341 [label="AST"];
345 -> 347 [label="Data Dep"];
346 -> 345 [label="AST"];
347 -> 352 [label="Define-Use"];
347 -> 357 [label="Define-Use"];
348 -> 347 [label="AST"];
348 -> 343 [label="AST"];
348 -> 346 [label="AST"];
354 -> 350 [label="AST"];
354 -> 351 [label="AST"];
354 -> 349 [label="AST"];
354 -> 352 [label="AST"];
354 -> 353 [label="AST"];
358 -> 356 [label="AST"];
358 -> 357 [label="AST"];
358 -> 355 [label="AST"];
359 -> 348 [label="AST"];
359 -> 354 [label="AST"];
359 -> 358 [label="AST"];
360 -> 371 [label="Define-Use"];
362 -> 360 [label="AST"];
362 -> 361 [label="AST"];
362 -> 377 [label="Control Dep"];
362 -> 366 [label="Control Dep"];
362 -> 363 [label="Control Dep"];
362 -> 365 [label="Control Dep"];
362 -> 376 [label="Control Dep"];
362 -> 375 [label="Control Dep"];
362 -> 370 [label="Control Dep"];
362 -> 368 [label="Control Dep"];
362 -> 369 [label="Control Dep"];
362 -> 371 [label="Control Dep"];
362 -> 374 [label="Control Dep"];
362 -> 372 [label="Control Dep"];
366 -> 364 [label="AST"];
366 -> 365 [label="AST"];
366 -> 363 [label="AST"];
370 -> 368 [label="AST"];
370 -> 369 [label="AST"];
374 -> 373 [label="AST"];
374 -> 372 [label="AST"];
375 -> 370 [label="AST"];
375 -> 371 [label="AST"];
375 -> 374 [label="AST"];
376 -> 375 [label="AST"];
377 -> 366 [label="AST"];
377 -> 376 [label="AST"];
378 -> 362 [label="AST"];
378 -> 377 [label="AST"];
379 -> 359 [label="AST"];
379 -> 378 [label="AST"];
383 -> 389 [label="Data Dep"];
384 -> 389 [label="Data Dep"];
385 -> 389 [label="Data Dep"];
386 -> 383 [label="AST"];
386 -> 384 [label="AST"];
386 -> 385 [label="AST"];
387 -> 389 [label="Data Dep"];
388 -> 386 [label="AST"];
388 -> 387 [label="AST"];
389 -> 393 [label="Define-Use"];
389 -> 401 [label="Define-Use"];
389 -> 411 [label="Define-Use"];
389 -> 453 [label="Define-Use"];
389 -> 458 [label="Define-Use"];
389 -> 482 [label="Define-Use"];
390 -> 389 [label="AST"];
390 -> 380 [label="AST"];
390 -> 388 [label="AST"];
397 -> 395 [label="AST"];
397 -> 396 [label="AST"];
397 -> 394 [label="AST"];
398 -> 392 [label="AST"];
398 -> 393 [label="AST"];
398 -> 391 [label="AST"];
398 -> 397 [label="AST"];
404 -> 403 [label="AST"];
404 -> 402 [label="AST"];
405 -> 400 [label="AST"];
405 -> 401 [label="AST"];
405 -> 399 [label="AST"];
405 -> 404 [label="AST"];
408 -> 406 [label="AST"];
408 -> 407 [label="AST"];
408 -> 414 [label="Control Dep"];
408 -> 413 [label="Control Dep"];
408 -> 409 [label="Control Dep"];
408 -> 411 [label="Control Dep"];
408 -> 412 [label="Control Dep"];
413 -> 410 [label="AST"];
413 -> 411 [label="AST"];
413 -> 409 [label="AST"];
413 -> 412 [label="AST"];
414 -> 413 [label="AST"];
415 -> 408 [label="AST"];
415 -> 414 [label="AST"];
417 -> 416 [label="AST"];
420 -> 422 [label="Data Dep"];
421 -> 419 [label="AST"];
421 -> 420 [label="AST"];
421 -> 418 [label="AST"];
422 -> 424 [label="Define-Use"];
422 -> 432 [label="Define-Use"];
422 -> 441 [label="Define-Use"];
422 -> 443 [label="Define-Use"];
422 -> 459 [label="Define-Use"];
423 -> 422 [label="AST"];
423 -> 417 [label="AST"];
423 -> 421 [label="AST"];
426 -> 424 [label="AST"];
426 -> 425 [label="AST"];
426 -> 449 [label="Control Dep"];
426 -> 448 [label="Control Dep"];
426 -> 430 [label="Control Dep"];
426 -> 428 [label="Control Dep"];
426 -> 435 [label="Control Dep"];
426 -> 431 [label="Control Dep"];
426 -> 434 [label="Control Dep"];
426 -> 432 [label="Control Dep"];
426 -> 437 [label="Control Dep"];
426 -> 436 [label="Control Dep"];
429 -> 431 [label="Define-Use"];
429 -> 442 [label="Define-Use"];
430 -> 429 [label="AST"];
430 -> 427 [label="AST"];
430 -> 428 [label="AST"];
432 -> 433 [label="AST"];
434 -> 432 [label="AST"];
435 -> 431 [label="AST"];
435 -> 434 [label="AST"];
435 -> 447 [label="Control Dep"];
435 -> 446 [label="Control Dep"];
435 -> 438 [label="Control Dep"];
435 -> 444 [label="Control Dep"];
435 -> 440 [label="Control Dep"];
435 -> 443 [label="Control Dep"];
435 -> 441 [label="Control Dep"];
435 -> 442 [label="Control Dep"];
435 -> 445 [label="Control Dep"];
436 -> 442 [label="Define-Use"];
437 -> 436 [label="AST"];
443 -> 441 [label="AST"];
443 -> 442 [label="AST"];
444 -> 440 [label="AST"];
444 -> 443 [label="AST"];
446 -> 439 [label="AST"];
446 -> 438 [label="AST"];
446 -> 444 [label="AST"];
446 -> 445 [label="AST"];
447 -> 446 [label="AST"];
448 -> 430 [label="AST"];
448 -> 435 [label="AST"];
448 -> 437 [label="AST"];
448 -> 447 [label="AST"];
449 -> 448 [label="AST"];
450 -> 426 [label="AST"];
450 -> 449 [label="AST"];
455 -> 452 [label="AST"];
455 -> 453 [label="AST"];
455 -> 451 [label="AST"];
455 -> 454 [label="AST"];
460 -> 457 [label="AST"];
460 -> 458 [label="AST"];
460 -> 456 [label="AST"];
460 -> 459 [label="AST"];
466 -> 464 [label="AST"];
466 -> 465 [label="AST"];
466 -> 463 [label="AST"];
468 -> 462 [label="AST"];
468 -> 461 [label="AST"];
468 -> 466 [label="AST"];
468 -> 467 [label="AST"];
472 -> 470 [label="AST"];
472 -> 469 [label="AST"];
472 -> 471 [label="AST"];
476 -> 646 [label="Define-Use"];
477 -> 476 [label="AST"];
477 -> 473 [label="AST"];
477 -> 475 [label="AST"];
478 -> 479 [label="AST"];
482 -> 478 [label="Data Dep"];
483 -> 481 [label="AST"];
483 -> 482 [label="AST"];
483 -> 480 [label="AST"];
484 -> 478 [label="AST"];
484 -> 483 [label="AST"];
485 -> 484 [label="AST"];
486 -> 491 [label="Define-Use"];
488 -> 486 [label="AST"];
488 -> 487 [label="AST"];
488 -> 497 [label="Control Dep"];
488 -> 496 [label="Control Dep"];
488 -> 495 [label="Control Dep"];
488 -> 490 [label="Control Dep"];
488 -> 491 [label="Control Dep"];
488 -> 494 [label="Control Dep"];
488 -> 492 [label="Control Dep"];
494 -> 493 [label="AST"];
494 -> 492 [label="AST"];
495 -> 490 [label="AST"];
495 -> 491 [label="AST"];
495 -> 494 [label="AST"];
496 -> 495 [label="AST"];
497 -> 496 [label="AST"];
498 -> 488 [label="AST"];
498 -> 497 [label="AST"];
501 -> 578 [label="Define-Use"];
501 -> 613 [label="Define-Use"];
501 -> 625 [label="Define-Use"];
502 -> 501 [label="AST"];
502 -> 499 [label="AST"];
502 -> 500 [label="AST"];
505 -> 521 [label="Define-Use"];
505 -> 552 [label="Define-Use"];
506 -> 505 [label="AST"];
506 -> 503 [label="AST"];
506 -> 504 [label="AST"];
510 -> 508 [label="AST"];
510 -> 509 [label="AST"];
510 -> 507 [label="AST"];
510 -> 524 [label="Control Dep"];
510 -> 517 [label="Control Dep"];
510 -> 511 [label="Control Dep"];
510 -> 516 [label="Control Dep"];
510 -> 515 [label="Control Dep"];
510 -> 514 [label="Control Dep"];
510 -> 523 [label="Control Dep"];
510 -> 518 [label="Control Dep"];
510 -> 522 [label="Control Dep"];
510 -> 519 [label="Control Dep"];
510 -> 521 [label="Control Dep"];
510 -> 537 [label="Control Dep"];
510 -> 536 [label="Control Dep"];
510 -> 525 [label="Control Dep"];
510 -> 535 [label="Control Dep"];
510 -> 533 [label="Control Dep"];
510 -> 531 [label="Control Dep"];
510 -> 526 [label="Control Dep"];
510 -> 530 [label="Control Dep"];
510 -> 527 [label="Control Dep"];
510 -> 529 [label="Control Dep"];
510 -> 532 [label="Control Dep"];
510 -> 534 [label="Control Dep"];
511 -> 521 [label="Define-Use"];
511 -> 552 [label="Define-Use"];
514 -> 511 [label="Data Dep"];
515 -> 514 [label="AST"];
516 -> 515 [label="AST"];
517 -> 511 [label="AST"];
517 -> 516 [label="AST"];
518 -> 578 [label="Define-Use"];
518 -> 613 [label="Define-Use"];
518 -> 625 [label="Define-Use"];
521 -> 518 [label="Data Dep"];
522 -> 520 [label="AST"];
522 -> 521 [label="AST"];
522 -> 519 [label="AST"];
523 -> 518 [label="AST"];
523 -> 522 [label="AST"];
524 -> 517 [label="AST"];
524 -> 523 [label="AST"];
525 -> 578 [label="Define-Use"];
525 -> 613 [label="Define-Use"];
525 -> 625 [label="Define-Use"];
529 -> 525 [label="Data Dep"];
530 -> 528 [label="AST"];
530 -> 529 [label="AST"];
530 -> 527 [label="AST"];
531 -> 526 [label="AST"];
531 -> 530 [label="AST"];
533 -> 531 [label="AST"];
533 -> 532 [label="AST"];
535 -> 533 [label="AST"];
535 -> 534 [label="AST"];
536 -> 525 [label="AST"];
536 -> 535 [label="AST"];
537 -> 536 [label="AST"];
538 -> 510 [label="AST"];
538 -> 524 [label="AST"];
538 -> 537 [label="AST"];
539 -> 538 [label="AST"];
540 -> 545 [label="Define-Use"];
542 -> 540 [label="AST"];
542 -> 541 [label="AST"];
542 -> 547 [label="Control Dep"];
542 -> 546 [label="Control Dep"];
542 -> 543 [label="Control Dep"];
542 -> 545 [label="Control Dep"];
546 -> 544 [label="AST"];
546 -> 545 [label="AST"];
546 -> 543 [label="AST"];
547 -> 546 [label="AST"];
548 -> 542 [label="AST"];
548 -> 547 [label="AST"];
553 -> 550 [label="AST"];
553 -> 551 [label="AST"];
553 -> 549 [label="AST"];
553 -> 552 [label="AST"];
557 -> 555 [label="AST"];
557 -> 556 [label="AST"];
557 -> 554 [label="AST"];
557 -> 562 [label="Control Dep"];
557 -> 561 [label="Control Dep"];
557 -> 558 [label="Control Dep"];
557 -> 560 [label="Control Dep"];
561 -> 559 [label="AST"];
561 -> 560 [label="AST"];
561 -> 558 [label="AST"];
562 -> 561 [label="AST"];
563 -> 557 [label="AST"];
563 -> 562 [label="AST"];
564 -> 553 [label="AST"];
564 -> 563 [label="AST"];
565 -> 539 [label="AST"];
565 -> 548 [label="AST"];
565 -> 564 [label="AST"];
567 -> 582 [label="Data Dep"];
569 -> 567 [label="AST"];
569 -> 568 [label="AST"];
572 -> 582 [label="Data Dep"];
573 -> 571 [label="AST"];
573 -> 572 [label="AST"];
573 -> 570 [label="AST"];
574 -> 569 [label="AST"];
574 -> 573 [label="AST"];
578 -> 582 [label="Data Dep"];
579 -> 576 [label="AST"];
579 -> 577 [label="AST"];
579 -> 575 [label="AST"];
579 -> 578 [label="AST"];
580 -> 579 [label="AST"];
581 -> 574 [label="AST"];
581 -> 580 [label="AST"];
582 -> 587 [label="Define-Use"];
582 -> 616 [label="Define-Use"];
583 -> 582 [label="AST"];
583 -> 566 [label="AST"];
583 -> 581 [label="AST"];
586 -> 584 [label="AST"];
586 -> 585 [label="AST"];
588 -> 586 [label="AST"];
588 -> 587 [label="AST"];
588 -> 595 [label="Control Dep"];
588 -> 594 [label="Control Dep"];
588 -> 589 [label="Control Dep"];
588 -> 593 [label="Control Dep"];
588 -> 590 [label="Control Dep"];
588 -> 592 [label="Control Dep"];
589 -> 612 [label="Define-Use"];
589 -> 624 [label="Define-Use"];
592 -> 589 [label="Data Dep"];
593 -> 591 [label="AST"];
593 -> 590 [label="AST"];
593 -> 592 [label="AST"];
594 -> 589 [label="AST"];
594 -> 593 [label="AST"];
595 -> 594 [label="AST"];
596 -> 588 [label="AST"];
596 -> 595 [label="AST"];
599 -> 597 [label="AST"];
599 -> 598 [label="AST"];
603 -> 601 [label="AST"];
603 -> 602 [label="AST"];
603 -> 600 [label="AST"];
604 -> 599 [label="AST"];
604 -> 603 [label="AST"];
604 -> 615 [label="Control Dep"];
604 -> 608 [label="Control Dep"];
604 -> 605 [label="Control Dep"];
604 -> 607 [label="Control Dep"];
604 -> 614 [label="Control Dep"];
604 -> 609 [label="Control Dep"];
604 -> 611 [label="Control Dep"];
604 -> 612 [label="Control Dep"];
604 -> 613 [label="Control Dep"];
604 -> 629 [label="Control Dep"];
604 -> 628 [label="Control Dep"];
604 -> 616 [label="Control Dep"];
605 -> 606 [label="AST"];
608 -> 605 [label="AST"];
608 -> 607 [label="AST"];
614 -> 610 [label="AST"];
614 -> 609 [label="AST"];
614 -> 611 [label="AST"];
614 -> 612 [label="AST"];
614 -> 613 [label="AST"];
615 -> 608 [label="AST"];
615 -> 614 [label="AST"];
616 -> 627 [label="Control Dep"];
616 -> 620 [label="Control Dep"];
616 -> 617 [label="Control Dep"];
616 -> 619 [label="Control Dep"];
616 -> 626 [label="Control Dep"];
616 -> 621 [label="Control Dep"];
616 -> 623 [label="Control Dep"];
616 -> 624 [label="Control Dep"];
616 -> 625 [label="Control Dep"];
617 -> 618 [label="AST"];
620 -> 617 [label="AST"];
620 -> 619 [label="AST"];
626 -> 622 [label="AST"];
626 -> 621 [label="AST"];
626 -> 623 [label="AST"];
626 -> 624 [label="AST"];
626 -> 625 [label="AST"];
627 -> 620 [label="AST"];
627 -> 626 [label="AST"];
628 -> 616 [label="AST"];
628 -> 627 [label="AST"];
629 -> 628 [label="AST"];
630 -> 604 [label="AST"];
630 -> 615 [label="AST"];
630 -> 629 [label="AST"];
634 -> 632 [label="AST"];
634 -> 633 [label="AST"];
634 -> 631 [label="AST"];
635 -> 634 [label="AST"];
635 -> 642 [label="Control Dep"];
635 -> 641 [label="Control Dep"];
635 -> 640 [label="Control Dep"];
635 -> 639 [label="Control Dep"];
635 -> 637 [label="Control Dep"];
635 -> 638 [label="Control Dep"];
639 -> 637 [label="AST"];
639 -> 638 [label="AST"];
640 -> 639 [label="AST"];
641 -> 640 [label="AST"];
642 -> 641 [label="AST"];
643 -> 635 [label="AST"];
643 -> 642 [label="AST"];
644 -> 502 [label="AST"];
644 -> 506 [label="AST"];
644 -> 565 [label="AST"];
644 -> 583 [label="AST"];
644 -> 596 [label="AST"];
644 -> 630 [label="AST"];
644 -> 643 [label="AST"];
645 -> 485 [label="AST"];
645 -> 498 [label="AST"];
645 -> 644 [label="AST"];
647 -> 646 [label="AST"];
648 -> 18 [label="AST"];
648 -> 21 [label="AST"];
648 -> 45 [label="AST"];
648 -> 50 [label="AST"];
648 -> 82 [label="AST"];
648 -> 95 [label="AST"];
648 -> 108 [label="AST"];
648 -> 121 [label="AST"];
648 -> 125 [label="AST"];
648 -> 129 [label="AST"];
648 -> 143 [label="AST"];
648 -> 157 [label="AST"];
648 -> 167 [label="AST"];
648 -> 173 [label="AST"];
648 -> 181 [label="AST"];
648 -> 258 [label="AST"];
648 -> 265 [label="AST"];
648 -> 278 [label="AST"];
648 -> 285 [label="AST"];
648 -> 298 [label="AST"];
648 -> 307 [label="AST"];
648 -> 312 [label="AST"];
648 -> 342 [label="AST"];
648 -> 379 [label="AST"];
648 -> 390 [label="AST"];
648 -> 398 [label="AST"];
648 -> 405 [label="AST"];
648 -> 415 [label="AST"];
648 -> 423 [label="AST"];
648 -> 450 [label="AST"];
648 -> 455 [label="AST"];
648 -> 460 [label="AST"];
648 -> 468 [label="AST"];
648 -> 472 [label="AST"];
648 -> 477 [label="AST"];
648 -> 645 [label="AST"];
648 -> 647 [label="AST"];
649 -> 1 [label="AST"];
649 -> 0 [label="AST"];
649 -> 2 [label="AST"];
649 -> 4 [label="AST"];
649 -> 6 [label="AST"];
649 -> 8 [label="AST"];
649 -> 648 [label="AST"];
649 -> 650 [label="Action"];
650 -> 651 [label="Action"];
}