digraph "send#?" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@send" shape=ellipse]
2 [label="4:CtTypeReferenceImpl@Properties" shape=ellipse]
3 [label="4:CtTypeReferenceImpl@Properties" shape=ellipse]
4 [label="4:CtConstructorCallImpl@new Properties()" shape=ellipse]
5 [label="4:CtVirtualElement@props" shape=ellipse]
6 [label="4:CtLocalVariableImpl@Properties props = new Properties()" shape=ellipse]
7 [label="5:CtExecutableReferenceImpl@put(java.lang.String)" shape=ellipse]
8 [label="5:CtVirtualElement@put" shape=ellipse]
9 [label="5:CtVariableReadImpl@props" shape=ellipse]
10 [label="5:CtLiteralImpl@\"mail.smtp.host\"" shape=ellipse]
11 [label="5:CtFieldReadImpl@host" shape=ellipse]
12 [label="5:CtInvocationImpl@props.put(\"mail.smtp.host\", host)" shape=ellipse]
13 [label="6:CtExecutableReferenceImpl@put(java.lang.String)" shape=ellipse]
14 [label="6:CtVirtualElement@put" shape=ellipse]
15 [label="6:CtVariableReadImpl@props" shape=ellipse]
16 [label="6:CtLiteralImpl@\"mail.smtp.port\"" shape=ellipse]
17 [label="6:CtExecutableReferenceImpl@valueOf(char[])" shape=ellipse]
18 [label="6:CtVirtualElement@valueOf" shape=ellipse]
19 [label="6:CtTypeAccessImpl@String" shape=ellipse]
20 [label="6:CtFieldReadImpl@port" shape=ellipse]
21 [label="6:CtInvocationImpl@String.valueOf(port)" shape=ellipse]
22 [label="6:CtInvocationImpl@props.put(\"mail.smtp.port\", String.valueOf(port))" shape=ellipse]
23 [label="7:CtTypeReferenceImpl@Session" shape=ellipse]
24 [label="7:CtExecutableReferenceImpl@getDefaultInstance(Properties,<unknown>)" shape=ellipse]
25 [label="7:CtVirtualElement@getDefaultInstance" shape=ellipse]
26 [label="7:CtTypeAccessImpl@Session" shape=ellipse]
27 [label="7:CtVariableReadImpl@props" shape=ellipse]
28 [label="7:CtLiteralImpl@null" shape=ellipse]
29 [label="7:CtInvocationImpl@Session.getDefaultInstance(props, null)" shape=ellipse]
30 [label="7:CtVirtualElement@sesh" shape=ellipse]
31 [label="7:CtLocalVariableImpl@Session sesh = Session.getDefaultInstance(props, null)" shape=ellipse]
32 [label="8:CtTypeReferenceImpl@MimeMessage" shape=ellipse]
33 [label="8:CtTypeReferenceImpl@MimeMessage" shape=ellipse]
34 [label="8:CtVariableReadImpl@sesh" shape=ellipse]
35 [label="8:CtConstructorCallImpl@new MimeMessage(sesh)" shape=ellipse]
36 [label="8:CtVirtualElement@msg" shape=ellipse]
37 [label="8:CtLocalVariableImpl@MimeMessage msg = new MimeMessage(sesh)" shape=ellipse]
38 [label="9:CtTypeReferenceImpl@MimeMultipart" shape=ellipse]
39 [label="9:CtTypeReferenceImpl@MimeMultipart" shape=ellipse]
40 [label="9:CtConstructorCallImpl@new MimeMultipart()" shape=ellipse]
41 [label="9:CtVirtualElement@attachments" shape=ellipse]
42 [label="9:CtLocalVariableImpl@MimeMultipart attachments = new MimeMultipart()" shape=ellipse]
43 [label="10:CtExecutableReferenceImpl@getName()" shape=ellipse]
44 [label="10:CtVirtualElement@getName" shape=ellipse]
45 [label="10:CtFieldReadImpl@from" shape=ellipse]
46 [label="10:CtInvocationImpl@from.getName()" shape=ellipse]
47 [label="10:CtLiteralImpl@null" shape=ellipse]
48 [label="10:CtBinaryOperatorImpl@from.getName() == null" shape=ellipse]
49 [label="11:CtExecutableReferenceImpl@setFrom(InternetAddress)" shape=ellipse]
50 [label="11:CtVirtualElement@setFrom" shape=ellipse]
51 [label="11:CtVariableReadImpl@msg" shape=ellipse]
52 [label="11:CtTypeReferenceImpl@InternetAddress" shape=ellipse]
53 [label="11:CtExecutableReferenceImpl@getAddress()" shape=ellipse]
54 [label="11:CtVirtualElement@getAddress" shape=ellipse]
55 [label="11:CtFieldReadImpl@from" shape=ellipse]
56 [label="11:CtInvocationImpl@from.getAddress()" shape=ellipse]
57 [label="11:CtConstructorCallImpl@new InternetAddress(from.getAddress())" shape=ellipse]
58 [label="11:CtInvocationImpl@msg.setFrom(new InternetAddress(from.getAddress()))" shape=ellipse]
59 [label="10:CtBlockImpl@\{
    msg.setFrom(new InternetAddress(from.getAddress()));
\}" shape=ellipse]
60 [label="13:CtExecutableReferenceImpl@setFrom(InternetAddress)" shape=ellipse]
61 [label="13:CtVirtualElement@setFrom" shape=ellipse]
62 [label="13:CtVariableReadImpl@msg" shape=ellipse]
63 [label="13:CtTypeReferenceImpl@InternetAddress" shape=ellipse]
64 [label="13:CtExecutableReferenceImpl@getAddress()" shape=ellipse]
65 [label="13:CtVirtualElement@getAddress" shape=ellipse]
66 [label="13:CtFieldReadImpl@from" shape=ellipse]
67 [label="13:CtInvocationImpl@from.getAddress()" shape=ellipse]
68 [label="13:CtExecutableReferenceImpl@getName()" shape=ellipse]
69 [label="13:CtVirtualElement@getName" shape=ellipse]
70 [label="13:CtFieldReadImpl@from" shape=ellipse]
71 [label="13:CtInvocationImpl@from.getName()" shape=ellipse]
72 [label="13:CtConstructorCallImpl@new InternetAddress(from.getAddress(), from.getName())" shape=ellipse]
73 [label="13:CtInvocationImpl@msg.setFrom(new InternetAddress(from.getAddress(), from.getName()))" shape=ellipse]
74 [label="12:CtBlockImpl@\{
    msg.setFrom(new InternetAddress(from.getAddress(), from.getName()));
\}" shape=ellipse]
75 [label="10:CtIfImpl@if (from.getName() == null) \{
    msg.setFrom(new InternetAddress(from.getAddress()));
\} else \{
    msg.setFrom(new InternetAddress(from.getAddress(), from.getName()));
\}" shape=ellipse]
76 [label="15:CtExecutableReferenceImpl@setRecipients()" shape=ellipse]
77 [label="15:CtVirtualElement@setRecipients" shape=ellipse]
78 [label="15:CtVariableReadImpl@msg" shape=ellipse]
79 [label="15:CtTypeAccessImpl@TO" shape=ellipse]
80 [label="15:CtExecutableReferenceImpl@internetAddresses(<unknown>)" shape=ellipse]
81 [label="15:CtVirtualElement@internetAddresses" shape=ellipse]
82 [label="15:CtFieldReadImpl@toList" shape=ellipse]
83 [label="15:CtInvocationImpl@internetAddresses(toList)" shape=ellipse]
84 [label="15:CtInvocationImpl@msg.setRecipients(TO, internetAddresses(toList))" shape=ellipse]
85 [label="16:CtExecutableReferenceImpl@setRecipients()" shape=ellipse]
86 [label="16:CtVirtualElement@setRecipients" shape=ellipse]
87 [label="16:CtVariableReadImpl@msg" shape=ellipse]
88 [label="16:CtTypeAccessImpl@CC" shape=ellipse]
89 [label="16:CtExecutableReferenceImpl@internetAddresses(<unknown>)" shape=ellipse]
90 [label="16:CtVirtualElement@internetAddresses" shape=ellipse]
91 [label="16:CtFieldReadImpl@ccList" shape=ellipse]
92 [label="16:CtInvocationImpl@internetAddresses(ccList)" shape=ellipse]
93 [label="16:CtInvocationImpl@msg.setRecipients(CC, internetAddresses(ccList))" shape=ellipse]
94 [label="17:CtExecutableReferenceImpl@setRecipients()" shape=ellipse]
95 [label="17:CtVirtualElement@setRecipients" shape=ellipse]
96 [label="17:CtVariableReadImpl@msg" shape=ellipse]
97 [label="17:CtTypeAccessImpl@BCC" shape=ellipse]
98 [label="17:CtExecutableReferenceImpl@internetAddresses(<unknown>)" shape=ellipse]
99 [label="17:CtVirtualElement@internetAddresses" shape=ellipse]
100 [label="17:CtFieldReadImpl@bccList" shape=ellipse]
101 [label="17:CtInvocationImpl@internetAddresses(bccList)" shape=ellipse]
102 [label="17:CtInvocationImpl@msg.setRecipients(BCC, internetAddresses(bccList))" shape=ellipse]
103 [label="18:CtFieldReadImpl@subject" shape=ellipse]
104 [label="18:CtLiteralImpl@null" shape=ellipse]
105 [label="18:CtBinaryOperatorImpl@subject != null" shape=ellipse]
106 [label="19:CtExecutableReferenceImpl@setSubject()" shape=ellipse]
107 [label="19:CtVirtualElement@setSubject" shape=ellipse]
108 [label="19:CtVariableReadImpl@msg" shape=ellipse]
109 [label="19:CtFieldReadImpl@subject" shape=ellipse]
110 [label="19:CtInvocationImpl@msg.setSubject(subject)" shape=ellipse]
111 [label="18:CtBlockImpl@\{
    msg.setSubject(subject);
\}" shape=ellipse]
112 [label="18:CtIfImpl@if (subject != null) \{
    msg.setSubject(subject);
\}" shape=ellipse]
113 [label="21:CtTypeReferenceImpl@ByteArrayOutputStream" shape=ellipse]
114 [label="21:CtTypeReferenceImpl@ByteArrayOutputStream" shape=ellipse]
115 [label="21:CtConstructorCallImpl@new ByteArrayOutputStream()" shape=ellipse]
116 [label="21:CtVirtualElement@baos" shape=ellipse]
117 [label="21:CtLocalVariableImpl@ByteArrayOutputStream baos = new ByteArrayOutputStream()" shape=ellipse]
118 [label="22:CtTypeReferenceImpl@PrintStream" shape=ellipse]
119 [label="22:CtTypeReferenceImpl@PrintStream" shape=ellipse]
120 [label="22:CtVariableReadImpl@baos" shape=ellipse]
121 [label="22:CtConstructorCallImpl@new PrintStream(baos)" shape=ellipse]
122 [label="22:CtVirtualElement@out" shape=ellipse]
123 [label="22:CtLocalVariableImpl@PrintStream out = new PrintStream(baos)" shape=ellipse]
124 [label="23:CtExecutableReferenceImpl@print(PrintStream)" shape=ellipse]
125 [label="23:CtVirtualElement@print" shape=ellipse]
126 [label="23:CtFieldReadImpl@message" shape=ellipse]
127 [label="23:CtVariableReadImpl@out" shape=ellipse]
128 [label="23:CtInvocationImpl@message.print(out)" shape=ellipse]
129 [label="24:CtExecutableReferenceImpl@close()" shape=ellipse]
130 [label="24:CtVirtualElement@close" shape=ellipse]
131 [label="24:CtVariableReadImpl@out" shape=ellipse]
132 [label="24:CtInvocationImpl@out.close()" shape=ellipse]
133 [label="25:CtTypeReferenceImpl@MimeBodyPart" shape=ellipse]
134 [label="25:CtTypeReferenceImpl@MimeBodyPart" shape=ellipse]
135 [label="25:CtConstructorCallImpl@new MimeBodyPart()" shape=ellipse]
136 [label="25:CtVirtualElement@textbody" shape=ellipse]
137 [label="25:CtLocalVariableImpl@MimeBodyPart textbody = new MimeBodyPart()" shape=ellipse]
138 [label="26:CtExecutableReferenceImpl@setContent()" shape=ellipse]
139 [label="26:CtVirtualElement@setContent" shape=ellipse]
140 [label="26:CtVariableReadImpl@textbody" shape=ellipse]
141 [label="26:CtExecutableReferenceImpl@toString()" shape=ellipse]
142 [label="26:CtVirtualElement@toString" shape=ellipse]
143 [label="26:CtVariableReadImpl@baos" shape=ellipse]
144 [label="26:CtInvocationImpl@baos.toString()" shape=ellipse]
145 [label="26:CtExecutableReferenceImpl@getMimeType()" shape=ellipse]
146 [label="26:CtVirtualElement@getMimeType" shape=ellipse]
147 [label="26:CtFieldReadImpl@message" shape=ellipse]
148 [label="26:CtInvocationImpl@message.getMimeType()" shape=ellipse]
149 [label="26:CtInvocationImpl@textbody.setContent(baos.toString(), message.getMimeType())" shape=ellipse]
150 [label="27:CtExecutableReferenceImpl@addBodyPart(MimeBodyPart)" shape=ellipse]
151 [label="27:CtVirtualElement@addBodyPart" shape=ellipse]
152 [label="27:CtVariableReadImpl@attachments" shape=ellipse]
153 [label="27:CtVariableReadImpl@textbody" shape=ellipse]
154 [label="27:CtInvocationImpl@attachments.addBodyPart(textbody)" shape=ellipse]
155 [label="28:CtTypeReferenceImpl@Enumeration" shape=ellipse]
156 [label="28:CtExecutableReferenceImpl@elements()" shape=ellipse]
157 [label="28:CtVirtualElement@elements" shape=ellipse]
158 [label="28:CtFieldReadImpl@files" shape=ellipse]
159 [label="28:CtInvocationImpl@files.elements()" shape=ellipse]
160 [label="28:CtVirtualElement@e" shape=ellipse]
161 [label="28:CtLocalVariableImpl@Enumeration e = files.elements()" shape=ellipse]
162 [label="29:CtExecutableReferenceImpl@hasMoreElements()" shape=ellipse]
163 [label="29:CtVirtualElement@hasMoreElements" shape=ellipse]
164 [label="29:CtVariableReadImpl@e" shape=ellipse]
165 [label="29:CtInvocationImpl@e.hasMoreElements()" shape=ellipse]
166 [label="30:CtTypeReferenceImpl@File" shape=ellipse]
167 [label="30:CtExecutableReferenceImpl@nextElement()" shape=ellipse]
168 [label="30:CtVirtualElement@nextElement" shape=ellipse]
169 [label="30:CtVariableReadImpl@e" shape=ellipse]
170 [label="30:CtInvocationImpl@((File) (e.nextElement()))" shape=ellipse]
171 [label="30:CtTypeReferenceImpl@File" shape=ellipse]
172 [label="30:CtVirtualElement@file" shape=ellipse]
173 [label="30:CtLocalVariableImpl@File file = ((File) (e.nextElement()))" shape=ellipse]
174 [label="31:CtTypeReferenceImpl@MimeBodyPart" shape=ellipse]
175 [label="31:CtVirtualElement@body" shape=ellipse]
176 [label="31:CtLocalVariableImpl@MimeBodyPart body" shape=ellipse]
177 [label="32:CtVariableWriteImpl@body" shape=ellipse]
178 [label="32:CtTypeReferenceImpl@MimeBodyPart" shape=ellipse]
179 [label="32:CtConstructorCallImpl@new MimeBodyPart()" shape=ellipse]
180 [label="32:CtAssignmentImpl@body = new MimeBodyPart()" shape=ellipse]
181 [label="33:CtExecutableReferenceImpl@exists()" shape=ellipse]
182 [label="33:CtVirtualElement@exists" shape=ellipse]
183 [label="33:CtVariableReadImpl@file" shape=ellipse]
184 [label="33:CtInvocationImpl@file.exists()" shape=ellipse]
185 [label="33:CtUnaryOperatorImpl@(!file.exists())" shape=ellipse]
186 [label="33:CtExecutableReferenceImpl@canRead()" shape=ellipse]
187 [label="33:CtVirtualElement@canRead" shape=ellipse]
188 [label="33:CtVariableReadImpl@file" shape=ellipse]
189 [label="33:CtInvocationImpl@file.canRead()" shape=ellipse]
190 [label="33:CtUnaryOperatorImpl@(!file.canRead())" shape=ellipse]
191 [label="33:CtBinaryOperatorImpl@(!file.exists()) || (!file.canRead())" shape=ellipse]
192 [label="34:CtTypeReferenceImpl@BuildException" shape=ellipse]
193 [label="35:CtLiteralImpl@\"File \\"\"" shape=ellipse]
194 [label="35:CtExecutableReferenceImpl@getAbsolutePath()" shape=ellipse]
195 [label="35:CtVirtualElement@getAbsolutePath" shape=ellipse]
196 [label="35:CtVariableReadImpl@file" shape=ellipse]
197 [label="35:CtInvocationImpl@file.getAbsolutePath()" shape=ellipse]
198 [label="35:CtBinaryOperatorImpl@(\"File \\"\" + file.getAbsolutePath())" shape=ellipse]
199 [label="35:CtLiteralImpl@\"\\" does not exist or is not readable.\"" shape=ellipse]
200 [label="35:CtBinaryOperatorImpl@(\"File \\"\" + file.getAbsolutePath()) + \"\\" does not exist or is not readable.\"" shape=ellipse]
201 [label="34:CtConstructorCallImpl@new BuildException((\"File \\"\" + file.getAbsolutePath()) + \"\\" does not exist or is not readable.\")" shape=ellipse]
202 [label="34:CtThrowImpl@throw new BuildException((\"File \\"\" + file.getAbsolutePath()) + \"\\" does not exist or is not readable.\")" shape=ellipse]
203 [label="33:CtBlockImpl@\{
    throw new BuildException((\"File \\"\" + file.getAbsolutePath()) + \"\\" does not exist or is not readable.\");
\}" shape=ellipse]
204 [label="33:CtIfImpl@if ((!file.exists()) || (!file.canRead())) \{
    throw new BuildException((\"File \\"\" + file.getAbsolutePath()) + \"\\" does not exist or is not readable.\");
\}" shape=ellipse]
205 [label="37:CtTypeReferenceImpl@FileDataSource" shape=ellipse]
206 [label="37:CtTypeReferenceImpl@FileDataSource" shape=ellipse]
207 [label="37:CtVariableReadImpl@file" shape=ellipse]
208 [label="37:CtConstructorCallImpl@new FileDataSource(file)" shape=ellipse]
209 [label="37:CtVirtualElement@fileData" shape=ellipse]
210 [label="37:CtLocalVariableImpl@FileDataSource fileData = new FileDataSource(file)" shape=ellipse]
211 [label="38:CtTypeReferenceImpl@DataHandler" shape=ellipse]
212 [label="38:CtTypeReferenceImpl@DataHandler" shape=ellipse]
213 [label="38:CtVariableReadImpl@fileData" shape=ellipse]
214 [label="38:CtConstructorCallImpl@new DataHandler(fileData)" shape=ellipse]
215 [label="38:CtVirtualElement@fileDataHandler" shape=ellipse]
216 [label="38:CtLocalVariableImpl@DataHandler fileDataHandler = new DataHandler(fileData)" shape=ellipse]
217 [label="39:CtExecutableReferenceImpl@setDataHandler(DataHandler)" shape=ellipse]
218 [label="39:CtVirtualElement@setDataHandler" shape=ellipse]
219 [label="39:CtVariableReadImpl@body" shape=ellipse]
220 [label="39:CtVariableReadImpl@fileDataHandler" shape=ellipse]
221 [label="39:CtInvocationImpl@body.setDataHandler(fileDataHandler)" shape=ellipse]
222 [label="40:CtExecutableReferenceImpl@setFileName()" shape=ellipse]
223 [label="40:CtVirtualElement@setFileName" shape=ellipse]
224 [label="40:CtVariableReadImpl@body" shape=ellipse]
225 [label="40:CtExecutableReferenceImpl@getName()" shape=ellipse]
226 [label="40:CtVirtualElement@getName" shape=ellipse]
227 [label="40:CtVariableReadImpl@file" shape=ellipse]
228 [label="40:CtInvocationImpl@file.getName()" shape=ellipse]
229 [label="40:CtInvocationImpl@body.setFileName(file.getName())" shape=ellipse]
230 [label="41:CtExecutableReferenceImpl@addBodyPart(MimeBodyPart)" shape=ellipse]
231 [label="41:CtVirtualElement@addBodyPart" shape=ellipse]
232 [label="41:CtVariableReadImpl@attachments" shape=ellipse]
233 [label="41:CtVariableReadImpl@body" shape=ellipse]
234 [label="41:CtInvocationImpl@attachments.addBodyPart(body)" shape=ellipse]
235 [label="29:CtBlockImpl@\{
    File file = ((File) (e.nextElement()));
    MimeBodyPart body;
    body = new MimeBodyPart();
    if ((!file.exists()) || (!file.canRead())) \{
        throw new BuildException((\"File \\"\" + file.getAbsolutePath()) + \"\\" does not exist or is not readable.\");
    \}
    FileDataSource fileData = new FileDataSource(file);
    DataHandler fileDataHandler = new DataHandler(fileData);
    body.setDataHandler(fileDataHandler);
    body.setFileName(file.getName());
    attachments.addBodyPart(body);
\}" shape=ellipse]
236 [label="29:CtWhileImpl@while (e.hasMoreElements()) \{
    File file = ((File) (e.nextElement()));
    MimeBodyPart body;
    body = new MimeBodyPart();
    if ((!file.exists()) || (!file.canRead())) \{
        throw new BuildException((\"File \\"\" + file.getAbsolutePath()) + \"\\" does not exist or is not readable.\");
    \}
    FileDataSource fileData = new FileDataSource(file);
    DataHandler fileDataHandler = new DataHandler(fileData);
    body.setDataHandler(fileDataHandler);
    body.setFileName(file.getName());
    attachments.addBodyPart(body);
\} " shape=ellipse]
237 [label="43:CtExecutableReferenceImpl@setContent(MimeMultipart)" shape=ellipse]
238 [label="43:CtVirtualElement@setContent" shape=ellipse]
239 [label="43:CtVariableReadImpl@msg" shape=ellipse]
240 [label="43:CtVariableReadImpl@attachments" shape=ellipse]
241 [label="43:CtInvocationImpl@msg.setContent(attachments)" shape=ellipse]
242 [label="44:CtExecutableReferenceImpl@send(MimeMessage)" shape=ellipse]
243 [label="44:CtVirtualElement@send" shape=ellipse]
244 [label="44:CtTypeAccessImpl@Transport" shape=ellipse]
245 [label="44:CtVariableReadImpl@msg" shape=ellipse]
246 [label="44:CtInvocationImpl@Transport.send(msg)" shape=ellipse]
247 [label="3:CtBlockImpl@\{
    Properties props = new Properties();
    props.put(\"mail.smtp.host\", host);
    props.put(\"mail.smtp.port\", String.valueOf(port));
    Session sesh = Session.getDefaultInstance(props, null);
    MimeMessage msg = new MimeMessage(sesh);
    MimeMultipart attachments = new MimeMultipart();
    if (from.getName() == null) \{
        msg.setFrom(new InternetAddress(from.getAddress()));
    \} else \{
        msg.setFrom(new InternetAddress(from.getAddress(), from.getName()));
    \}
    msg.setRecipients(TO, internetAddresses(toList));
    msg.setRecipients(CC, internetAddresses(ccList));
    msg.setRecipients(BCC, internetAddresses(bccList));
    if (subject != null) \{
        msg.setSubject(subject);
    \}
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    PrintStream out = new PrintStream(baos);
    message.print(out);
    out.close();
    MimeBodyPart textbody = new MimeBodyPart();
    textbody.setContent(baos.toString(), message.getMimeType());
    attachments.addBodyPart(textbody);
    Enumeration e = files.elements();
    while (e.hasMoreElements()) \{
        File file = ((File) (e.nextElement()));
        MimeBodyPart body;
        body = new MimeBodyPart();
        if ((!file.exists()) || (!file.canRead())) \{
            throw new BuildException((\"File \\"\" + file.getAbsolutePath()) + \"\\" does not exist or is not readable.\");
        \}
        FileDataSource fileData = new FileDataSource(file);
        DataHandler fileDataHandler = new DataHandler(fileData);
        body.setDataHandler(fileDataHandler);
        body.setFileName(file.getName());
        attachments.addBodyPart(body);
    \} 
    msg.setContent(attachments);
    Transport.send(msg);
\}" shape=ellipse]
248 [label="45:CtVirtualElement@e" shape=ellipse]
249 [label="45:CtTypeReferenceImpl@MessagingException" shape=ellipse]
250 [label="45:CtCatchVariableImpl@MessagingException e" shape=ellipse]
251 [label="46:CtTypeReferenceImpl@BuildException" shape=ellipse]
252 [label="46:CtLiteralImpl@\"Problem while sending mime mail:\"" shape=ellipse]
253 [label="46:CtVariableReadImpl@e" shape=ellipse]
254 [label="46:CtConstructorCallImpl@new BuildException(\"Problem while sending mime mail:\", e)" shape=ellipse]
255 [label="46:CtThrowImpl@throw new BuildException(\"Problem while sending mime mail:\", e)" shape=ellipse]
256 [label="45:CtBlockImpl@\{
    throw new BuildException(\"Problem while sending mime mail:\", e);
\}" shape=ellipse]
257 [label="45:CtCatchImpl@ catch (MessagingException e) \{
    throw new BuildException(\"Problem while sending mime mail:\", e);
\}" shape=ellipse]
258 [label="47:CtVirtualElement@e" shape=ellipse]
259 [label="47:CtTypeReferenceImpl@IOException" shape=ellipse]
260 [label="47:CtCatchVariableImpl@IOException e" shape=ellipse]
261 [label="48:CtTypeReferenceImpl@BuildException" shape=ellipse]
262 [label="48:CtLiteralImpl@\"Problem while sending mime mail:\"" shape=ellipse]
263 [label="48:CtVariableReadImpl@e" shape=ellipse]
264 [label="48:CtConstructorCallImpl@new BuildException(\"Problem while sending mime mail:\", e)" shape=ellipse]
265 [label="48:CtThrowImpl@throw new BuildException(\"Problem while sending mime mail:\", e)" shape=ellipse]
266 [label="47:CtBlockImpl@\{
    throw new BuildException(\"Problem while sending mime mail:\", e);
\}" shape=ellipse]
267 [label="47:CtCatchImpl@ catch (IOException e) \{
    throw new BuildException(\"Problem while sending mime mail:\", e);
\}" shape=ellipse]
268 [label="3:CtTryImpl@try \{
    Properties props = new Properties();
    props.put(\"mail.smtp.host\", host);
    props.put(\"mail.smtp.port\", String.valueOf(port));
    Session sesh = Session.getDefaultInstance(props, null);
    MimeMessage msg = new MimeMessage(sesh);
    MimeMultipart attachments = new MimeMultipart();
    if (from.getName() == null) \{
        msg.setFrom(new InternetAddress(from.getAddress()));
    \} else \{
        msg.setFrom(new InternetAddress(from.getAddress(), from.getName()));
    \}
    msg.setRecipients(TO, internetAddresses(toList));
    msg.setRecipients(CC, internetAddresses(ccList));
    msg.setRecipients(BCC, internetAddresses(bccList));
    if (subject != null) \{
        msg.setSubject(subject);
    \}
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    PrintStream out = new PrintStream(baos);
    message.print(out);
    out.close();
    MimeBodyPart textbody = new MimeBodyPart();
    textbody.setContent(baos.toString(), message.getMimeType());
    attachments.addBodyPart(textbody);
    Enumeration e = files.elements();
    while (e.hasMoreElements()) \{
        File file = ((File) (e.nextElement()));
        MimeBodyPart body;
        body = new MimeBodyPart();
        if ((!file.exists()) || (!file.canRead())) \{
            throw new BuildException((\"File \\"\" + file.getAbsolutePath()) + \"\\" does not exist or is not readable.\");
        \}
        FileDataSource fileData = new FileDataSource(file);
        DataHandler fileDataHandler = new DataHandler(fileData);
        body.setDataHandler(fileDataHandler);
        body.setFileName(file.getName());
        attachments.addBodyPart(body);
    \} 
    msg.setContent(attachments);
    Transport.send(msg);
\} catch (MessagingException e) \{
    throw new BuildException(\"Problem while sending mime mail:\", e);
\} catch (IOException e) \{
    throw new BuildException(\"Problem while sending mime mail:\", e);
\}" shape=ellipse]
269 [label="2:CtBlockImpl@\{
    try \{
        Properties props = new Properties();
        props.put(\"mail.smtp.host\", host);
        props.put(\"mail.smtp.port\", String.valueOf(port));
        Session sesh = Session.getDefaultInstance(props, null);
        MimeMessage msg = new MimeMessage(sesh);
        MimeMultipart attachments = new MimeMultipart();
        if (from.getName() == null) \{
            msg.setFrom(new InternetAddress(from.getAddress()));
        \} else \{
            msg.setFrom(new InternetAddress(from.getAddress(), from.getName()));
        \}
        msg.setRecipients(TO, internetAddresses(toList));
        msg.setRecipients(CC, internetAddresses(ccList));
        msg.setRecipients(BCC, internetAddresses(bccList));
        if (subject != null) \{
            msg.setSubject(subject);
        \}
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        PrintStream out = new PrintStream(baos);
        message.print(out);
        out.close();
        MimeBodyPart textbody = new MimeBodyPart();
        textbody.setContent(baos.toString(), message.getMimeType());
        attachments.addBodyPart(textbody);
        Enumeration e = files.elements();
        while (e.hasMoreElements()) \{
            File file = ((File) (e.nextElement()));
            MimeBodyPart body;
            body = new MimeBodyPart();
            if ((!file.exists()) || (!file.canRead())) \{
                throw new BuildException((\"File \\"\" + file.getAbsolutePath()) + \"\\" does not exist or is not readable.\");
            \}
            FileDataSource fileData = new FileDataSource(file);
            DataHandler fileDataHandler = new DataHandler(fileData);
            body.setDataHandler(fileDataHandler);
            body.setFileName(file.getName());
            attachments.addBodyPart(body);
        \} 
        msg.setContent(attachments);
        Transport.send(msg);
    \} catch (MessagingException e) \{
        throw new BuildException(\"Problem while sending mime mail:\", e);
    \} catch (IOException e) \{
        throw new BuildException(\"Problem while sending mime mail:\", e);
    \}
\}" shape=ellipse]
270 [label="2:CtMethodImpl@public void send() \{
    try \{
        Properties props = new Properties();
        props.put(\"mail.smtp.host\", host);
        props.put(\"mail.smtp.port\", String.valueOf(port));
        Session sesh = Session.getDefaultInstance(props, null);
        MimeMessage msg = new MimeMessage(sesh);
        MimeMultipart attachments = new MimeMultipart();
        if (from.getName() == null) \{
            msg.setFrom(new InternetAddress(from.getAddress()));
        \} else \{
            msg.setFrom(new InternetAddress(from.getAddress(), from.getName()));
        \}
        msg.setRecipients(TO, internetAddresses(toList));
        msg.setRecipients(CC, internetAddresses(ccList));
        msg.setRecipients(BCC, internetAddresses(bccList));
        if (subject != null) \{
            msg.setSubject(subject);
        \}
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        PrintStream out = new PrintStream(baos);
        message.print(out);
        out.close();
        MimeBodyPart textbody = new MimeBodyPart();
        textbody.setContent(baos.toString(), message.getMimeType());
        attachments.addBodyPart(textbody);
        Enumeration e = files.elements();
        while (e.hasMoreElements()) \{
            File file = ((File) (e.nextElement()));
            MimeBodyPart body;
            body = new MimeBodyPart();
            if ((!file.exists()) || (!file.canRead())) \{
                throw new BuildException((\"File \\"\" + file.getAbsolutePath()) + \"\\" does not exist or is not readable.\");
            \}
            FileDataSource fileData = new FileDataSource(file);
            DataHandler fileDataHandler = new DataHandler(fileData);
            body.setDataHandler(fileDataHandler);
            body.setFileName(file.getName());
            attachments.addBodyPart(body);
        \} 
        msg.setContent(attachments);
        Transport.send(msg);
    \} catch (MessagingException e) \{
        throw new BuildException(\"Problem while sending mime mail:\", e);
    \} catch (IOException e) \{
        throw new BuildException(\"Problem while sending mime mail:\", e);
    \}
\}" shape=ellipse]
271 [label="35:Update@UPDATE" shape=ellipse]
272 [label="35:CtLiteralImpl@\"\\" does not exist or is not \"" shape=ellipse]
273 [label="35:Insert@INSERT" shape=ellipse]
274 [label="35:CtBinaryOperatorImpl@((\"File \\"\" + file.getAbsolutePath()) + \"\\" does not exist or is not \") + \"readable.\"" shape=ellipse]
275 [label="35:Move@MOVE" shape=ellipse]
5 -> 9 [label="Define-Use"];
5 -> 15 [label="Define-Use"];
5 -> 27 [label="Define-Use"];
6 -> 5 [label="AST"];
6 -> 2 [label="AST"];
6 -> 4 [label="AST"];
12 -> 8 [label="AST"];
12 -> 9 [label="AST"];
12 -> 7 [label="AST"];
12 -> 10 [label="AST"];
12 -> 11 [label="AST"];
21 -> 18 [label="AST"];
21 -> 19 [label="AST"];
21 -> 17 [label="AST"];
21 -> 20 [label="AST"];
22 -> 14 [label="AST"];
22 -> 15 [label="AST"];
22 -> 13 [label="AST"];
22 -> 16 [label="AST"];
22 -> 21 [label="AST"];
27 -> 30 [label="Data Dep"];
29 -> 25 [label="AST"];
29 -> 26 [label="AST"];
29 -> 24 [label="AST"];
29 -> 27 [label="AST"];
29 -> 28 [label="AST"];
30 -> 34 [label="Define-Use"];
31 -> 30 [label="AST"];
31 -> 23 [label="AST"];
31 -> 29 [label="AST"];
34 -> 36 [label="Data Dep"];
35 -> 34 [label="AST"];
36 -> 51 [label="Define-Use"];
36 -> 62 [label="Define-Use"];
36 -> 78 [label="Define-Use"];
36 -> 87 [label="Define-Use"];
36 -> 96 [label="Define-Use"];
36 -> 108 [label="Define-Use"];
36 -> 239 [label="Define-Use"];
36 -> 245 [label="Define-Use"];
37 -> 36 [label="AST"];
37 -> 32 [label="AST"];
37 -> 35 [label="AST"];
41 -> 152 [label="Define-Use"];
41 -> 232 [label="Define-Use"];
41 -> 240 [label="Define-Use"];
42 -> 41 [label="AST"];
42 -> 38 [label="AST"];
42 -> 40 [label="AST"];
46 -> 44 [label="AST"];
46 -> 45 [label="AST"];
46 -> 43 [label="AST"];
48 -> 46 [label="AST"];
48 -> 47 [label="AST"];
48 -> 59 [label="Control Dep"];
48 -> 58 [label="Control Dep"];
48 -> 49 [label="Control Dep"];
48 -> 51 [label="Control Dep"];
48 -> 57 [label="Control Dep"];
48 -> 56 [label="Control Dep"];
48 -> 53 [label="Control Dep"];
48 -> 55 [label="Control Dep"];
48 -> 74 [label="Control Dep"];
48 -> 73 [label="Control Dep"];
48 -> 60 [label="Control Dep"];
48 -> 62 [label="Control Dep"];
48 -> 72 [label="Control Dep"];
48 -> 67 [label="Control Dep"];
48 -> 64 [label="Control Dep"];
48 -> 66 [label="Control Dep"];
48 -> 71 [label="Control Dep"];
48 -> 68 [label="Control Dep"];
48 -> 70 [label="Control Dep"];
56 -> 54 [label="AST"];
56 -> 55 [label="AST"];
56 -> 53 [label="AST"];
57 -> 56 [label="AST"];
58 -> 50 [label="AST"];
58 -> 51 [label="AST"];
58 -> 49 [label="AST"];
58 -> 57 [label="AST"];
59 -> 58 [label="AST"];
67 -> 65 [label="AST"];
67 -> 66 [label="AST"];
67 -> 64 [label="AST"];
71 -> 69 [label="AST"];
71 -> 70 [label="AST"];
71 -> 68 [label="AST"];
72 -> 67 [label="AST"];
72 -> 71 [label="AST"];
73 -> 61 [label="AST"];
73 -> 62 [label="AST"];
73 -> 60 [label="AST"];
73 -> 72 [label="AST"];
74 -> 73 [label="AST"];
75 -> 48 [label="AST"];
75 -> 59 [label="AST"];
75 -> 74 [label="AST"];
83 -> 81 [label="AST"];
83 -> 80 [label="AST"];
83 -> 82 [label="AST"];
84 -> 77 [label="AST"];
84 -> 78 [label="AST"];
84 -> 76 [label="AST"];
84 -> 79 [label="AST"];
84 -> 83 [label="AST"];
92 -> 90 [label="AST"];
92 -> 89 [label="AST"];
92 -> 91 [label="AST"];
93 -> 86 [label="AST"];
93 -> 87 [label="AST"];
93 -> 85 [label="AST"];
93 -> 88 [label="AST"];
93 -> 92 [label="AST"];
101 -> 99 [label="AST"];
101 -> 98 [label="AST"];
101 -> 100 [label="AST"];
102 -> 95 [label="AST"];
102 -> 96 [label="AST"];
102 -> 94 [label="AST"];
102 -> 97 [label="AST"];
102 -> 101 [label="AST"];
105 -> 103 [label="AST"];
105 -> 104 [label="AST"];
105 -> 111 [label="Control Dep"];
105 -> 110 [label="Control Dep"];
105 -> 106 [label="Control Dep"];
105 -> 108 [label="Control Dep"];
105 -> 109 [label="Control Dep"];
110 -> 107 [label="AST"];
110 -> 108 [label="AST"];
110 -> 106 [label="AST"];
110 -> 109 [label="AST"];
111 -> 110 [label="AST"];
112 -> 105 [label="AST"];
112 -> 111 [label="AST"];
116 -> 120 [label="Define-Use"];
116 -> 143 [label="Define-Use"];
117 -> 116 [label="AST"];
117 -> 113 [label="AST"];
117 -> 115 [label="AST"];
120 -> 122 [label="Data Dep"];
121 -> 120 [label="AST"];
122 -> 127 [label="Define-Use"];
122 -> 131 [label="Define-Use"];
123 -> 122 [label="AST"];
123 -> 118 [label="AST"];
123 -> 121 [label="AST"];
128 -> 125 [label="AST"];
128 -> 126 [label="AST"];
128 -> 124 [label="AST"];
128 -> 127 [label="AST"];
132 -> 130 [label="AST"];
132 -> 131 [label="AST"];
132 -> 129 [label="AST"];
136 -> 140 [label="Define-Use"];
136 -> 153 [label="Define-Use"];
137 -> 136 [label="AST"];
137 -> 133 [label="AST"];
137 -> 135 [label="AST"];
144 -> 142 [label="AST"];
144 -> 143 [label="AST"];
144 -> 141 [label="AST"];
148 -> 146 [label="AST"];
148 -> 147 [label="AST"];
148 -> 145 [label="AST"];
149 -> 139 [label="AST"];
149 -> 140 [label="AST"];
149 -> 138 [label="AST"];
149 -> 144 [label="AST"];
149 -> 148 [label="AST"];
154 -> 151 [label="AST"];
154 -> 152 [label="AST"];
154 -> 150 [label="AST"];
154 -> 153 [label="AST"];
158 -> 160 [label="Data Dep"];
159 -> 157 [label="AST"];
159 -> 158 [label="AST"];
159 -> 156 [label="AST"];
160 -> 164 [label="Define-Use"];
160 -> 169 [label="Define-Use"];
161 -> 160 [label="AST"];
161 -> 155 [label="AST"];
161 -> 159 [label="AST"];
165 -> 163 [label="AST"];
165 -> 164 [label="AST"];
165 -> 162 [label="AST"];
165 -> 235 [label="Control Dep"];
165 -> 173 [label="Control Dep"];
165 -> 170 [label="Control Dep"];
165 -> 167 [label="Control Dep"];
165 -> 169 [label="Control Dep"];
165 -> 176 [label="Control Dep"];
165 -> 180 [label="Control Dep"];
165 -> 177 [label="Control Dep"];
165 -> 179 [label="Control Dep"];
165 -> 204 [label="Control Dep"];
165 -> 191 [label="Control Dep"];
165 -> 185 [label="Control Dep"];
165 -> 184 [label="Control Dep"];
165 -> 181 [label="Control Dep"];
165 -> 183 [label="Control Dep"];
165 -> 190 [label="Control Dep"];
165 -> 189 [label="Control Dep"];
165 -> 186 [label="Control Dep"];
165 -> 188 [label="Control Dep"];
165 -> 210 [label="Control Dep"];
165 -> 208 [label="Control Dep"];
165 -> 207 [label="Control Dep"];
165 -> 216 [label="Control Dep"];
165 -> 214 [label="Control Dep"];
165 -> 213 [label="Control Dep"];
165 -> 221 [label="Control Dep"];
165 -> 217 [label="Control Dep"];
165 -> 219 [label="Control Dep"];
165 -> 220 [label="Control Dep"];
165 -> 229 [label="Control Dep"];
165 -> 222 [label="Control Dep"];
165 -> 224 [label="Control Dep"];
165 -> 228 [label="Control Dep"];
165 -> 225 [label="Control Dep"];
165 -> 227 [label="Control Dep"];
165 -> 234 [label="Control Dep"];
165 -> 230 [label="Control Dep"];
165 -> 232 [label="Control Dep"];
165 -> 233 [label="Control Dep"];
169 -> 172 [label="Data Dep"];
170 -> 168 [label="AST"];
170 -> 171 [label="AST"];
170 -> 169 [label="AST"];
170 -> 167 [label="AST"];
172 -> 183 [label="Define-Use"];
172 -> 188 [label="Define-Use"];
172 -> 196 [label="Define-Use"];
172 -> 207 [label="Define-Use"];
172 -> 227 [label="Define-Use"];
173 -> 172 [label="AST"];
173 -> 166 [label="AST"];
173 -> 170 [label="AST"];
176 -> 175 [label="AST"];
176 -> 174 [label="AST"];
177 -> 219 [label="Define-Use"];
177 -> 224 [label="Define-Use"];
177 -> 233 [label="Define-Use"];
180 -> 177 [label="AST"];
180 -> 179 [label="AST"];
184 -> 182 [label="AST"];
184 -> 183 [label="AST"];
184 -> 181 [label="AST"];
185 -> 184 [label="AST"];
189 -> 187 [label="AST"];
189 -> 188 [label="AST"];
189 -> 186 [label="AST"];
190 -> 189 [label="AST"];
191 -> 185 [label="AST"];
191 -> 190 [label="AST"];
191 -> 203 [label="Control Dep"];
191 -> 202 [label="Control Dep"];
191 -> 201 [label="Control Dep"];
191 -> 200 [label="Control Dep"];
191 -> 198 [label="Control Dep"];
191 -> 193 [label="Control Dep"];
191 -> 197 [label="Control Dep"];
191 -> 194 [label="Control Dep"];
191 -> 196 [label="Control Dep"];
191 -> 199 [label="Control Dep"];
197 -> 195 [label="AST"];
197 -> 196 [label="AST"];
197 -> 194 [label="AST"];
198 -> 193 [label="AST"];
198 -> 197 [label="AST"];
199 -> 271 [label="Action"];
200 -> 198 [label="AST"];
200 -> 199 [label="AST"];
200 -> 275 [label="Action"];
201 -> 200 [label="AST"];
201 -> 273 [label="Action"];
202 -> 201 [label="AST"];
203 -> 202 [label="AST"];
204 -> 191 [label="AST"];
204 -> 203 [label="AST"];
207 -> 209 [label="Data Dep"];
208 -> 207 [label="AST"];
209 -> 213 [label="Define-Use"];
210 -> 209 [label="AST"];
210 -> 205 [label="AST"];
210 -> 208 [label="AST"];
213 -> 215 [label="Data Dep"];
214 -> 213 [label="AST"];
215 -> 220 [label="Define-Use"];
216 -> 215 [label="AST"];
216 -> 211 [label="AST"];
216 -> 214 [label="AST"];
221 -> 218 [label="AST"];
221 -> 219 [label="AST"];
221 -> 217 [label="AST"];
221 -> 220 [label="AST"];
228 -> 226 [label="AST"];
228 -> 227 [label="AST"];
228 -> 225 [label="AST"];
229 -> 223 [label="AST"];
229 -> 224 [label="AST"];
229 -> 222 [label="AST"];
229 -> 228 [label="AST"];
234 -> 231 [label="AST"];
234 -> 232 [label="AST"];
234 -> 230 [label="AST"];
234 -> 233 [label="AST"];
235 -> 173 [label="AST"];
235 -> 176 [label="AST"];
235 -> 180 [label="AST"];
235 -> 204 [label="AST"];
235 -> 210 [label="AST"];
235 -> 216 [label="AST"];
235 -> 221 [label="AST"];
235 -> 229 [label="AST"];
235 -> 234 [label="AST"];
236 -> 165 [label="AST"];
236 -> 235 [label="AST"];
241 -> 238 [label="AST"];
241 -> 239 [label="AST"];
241 -> 237 [label="AST"];
241 -> 240 [label="AST"];
246 -> 243 [label="AST"];
246 -> 244 [label="AST"];
246 -> 242 [label="AST"];
246 -> 245 [label="AST"];
247 -> 6 [label="AST"];
247 -> 12 [label="AST"];
247 -> 22 [label="AST"];
247 -> 31 [label="AST"];
247 -> 37 [label="AST"];
247 -> 42 [label="AST"];
247 -> 75 [label="AST"];
247 -> 84 [label="AST"];
247 -> 93 [label="AST"];
247 -> 102 [label="AST"];
247 -> 112 [label="AST"];
247 -> 117 [label="AST"];
247 -> 123 [label="AST"];
247 -> 128 [label="AST"];
247 -> 132 [label="AST"];
247 -> 137 [label="AST"];
247 -> 149 [label="AST"];
247 -> 154 [label="AST"];
247 -> 161 [label="AST"];
247 -> 236 [label="AST"];
247 -> 241 [label="AST"];
247 -> 246 [label="AST"];
248 -> 253 [label="Define-Use"];
250 -> 248 [label="AST"];
250 -> 249 [label="AST"];
250 -> 256 [label="Control Dep"];
250 -> 255 [label="Control Dep"];
250 -> 254 [label="Control Dep"];
250 -> 252 [label="Control Dep"];
250 -> 253 [label="Control Dep"];
254 -> 252 [label="AST"];
254 -> 253 [label="AST"];
255 -> 254 [label="AST"];
256 -> 255 [label="AST"];
257 -> 250 [label="AST"];
257 -> 256 [label="AST"];
258 -> 263 [label="Define-Use"];
260 -> 258 [label="AST"];
260 -> 259 [label="AST"];
260 -> 266 [label="Control Dep"];
260 -> 265 [label="Control Dep"];
260 -> 264 [label="Control Dep"];
260 -> 262 [label="Control Dep"];
260 -> 263 [label="Control Dep"];
264 -> 262 [label="AST"];
264 -> 263 [label="AST"];
265 -> 264 [label="AST"];
266 -> 265 [label="AST"];
267 -> 260 [label="AST"];
267 -> 266 [label="AST"];
268 -> 247 [label="AST"];
268 -> 257 [label="AST"];
268 -> 267 [label="AST"];
269 -> 268 [label="AST"];
270 -> 1 [label="AST"];
270 -> 0 [label="AST"];
270 -> 269 [label="AST"];
271 -> 272 [label="Action"];
273 -> 274 [label="Action"];
275 -> 274 [label="Action"];
}