digraph "findLabel#?,View" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@findLabel" shape=ellipse]
2 [label="2:CtParameterImpl@View v" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@View" shape=ellipse]
4 [label="2:CtTypeReferenceImpl@BuildException" shape=ellipse]
5 [label="3:CtVirtualElement@Label[]" shape=ellipse]
6 [label="3:CtArrayTypeReferenceImpl@Label[]" shape=ellipse]
7 [label="3:CtExecutableReferenceImpl@getLabels()" shape=ellipse]
8 [label="3:CtVirtualElement@getLabels" shape=ellipse]
9 [label="3:CtVariableReadImpl@v" shape=ellipse]
10 [label="3:CtInvocationImpl@v.getLabels()" shape=ellipse]
11 [label="3:CtVirtualElement@allLabels" shape=ellipse]
12 [label="3:CtLocalVariableImpl@Label[] allLabels = v.getLabels()" shape=ellipse]
13 [label="4:CtTypeReferenceImpl@int" shape=ellipse]
14 [label="4:CtLiteralImpl@0" shape=ellipse]
15 [label="4:CtVirtualElement@i" shape=ellipse]
16 [label="4:CtLocalVariableImpl@int i = 0" shape=ellipse]
17 [label="4:CtVariableReadImpl@i" shape=ellipse]
18 [label="4:CtVariableReadImpl@allLabels" shape=ellipse]
19 [label="4:CtLocalVariableReferenceImpl@allLabels" shape=ellipse]
20 [label="4:CtFieldReadImpl@allLabels.length" shape=ellipse]
21 [label="4:CtBinaryOperatorImpl@i < allLabels.length" shape=ellipse]
22 [label="4:CtVariableWriteImpl@i" shape=ellipse]
23 [label="4:CtUnaryOperatorImpl@i++" shape=ellipse]
24 [label="5:CtTypeReferenceImpl@Label" shape=ellipse]
25 [label="5:CtVariableReadImpl@allLabels" shape=ellipse]
26 [label="5:CtVariableReadImpl@i" shape=ellipse]
27 [label="5:CtArrayReadImpl@allLabels[i]" shape=ellipse]
28 [label="5:CtVirtualElement@stLabel" shape=ellipse]
29 [label="5:CtLocalVariableImpl@Label stLabel = allLabels[i]" shape=ellipse]
30 [label="6:CtExecutableReferenceImpl@log(<unknown>,<unknown>)" shape=ellipse]
31 [label="6:CtVirtualElement@log" shape=ellipse]
32 [label="6:CtLiteralImpl@\"checking label \"" shape=ellipse]
33 [label="6:CtExecutableReferenceImpl@getName()" shape=ellipse]
34 [label="6:CtVirtualElement@getName" shape=ellipse]
35 [label="6:CtVariableReadImpl@stLabel" shape=ellipse]
36 [label="6:CtInvocationImpl@stLabel.getName()" shape=ellipse]
37 [label="6:CtBinaryOperatorImpl@\"checking label \" + stLabel.getName()" shape=ellipse]
38 [label="6:CtTypeAccessImpl@MSG_DEBUG" shape=ellipse]
39 [label="6:CtInvocationImpl@log(\"checking label \" + stLabel.getName(), MSG_DEBUG)" shape=ellipse]
40 [label="7:CtVariableReadImpl@stLabel" shape=ellipse]
41 [label="7:CtLiteralImpl@null" shape=ellipse]
42 [label="7:CtBinaryOperatorImpl@(stLabel != null)" shape=ellipse]
43 [label="7:CtExecutableReferenceImpl@isDeleted()" shape=ellipse]
44 [label="7:CtVirtualElement@isDeleted" shape=ellipse]
45 [label="7:CtVariableReadImpl@stLabel" shape=ellipse]
46 [label="7:CtInvocationImpl@stLabel.isDeleted()" shape=ellipse]
47 [label="7:CtUnaryOperatorImpl@(!stLabel.isDeleted())" shape=ellipse]
48 [label="7:CtBinaryOperatorImpl@((stLabel != null) && (!stLabel.isDeleted()))" shape=ellipse]
49 [label="7:CtExecutableReferenceImpl@equals()" shape=ellipse]
50 [label="7:CtVirtualElement@equals" shape=ellipse]
51 [label="7:CtExecutableReferenceImpl@getName()" shape=ellipse]
52 [label="7:CtVirtualElement@getName" shape=ellipse]
53 [label="7:CtVariableReadImpl@stLabel" shape=ellipse]
54 [label="7:CtInvocationImpl@stLabel.getName()" shape=ellipse]
55 [label="7:CtThisAccessImpl@this" shape=ellipse]
56 [label="7:CtFieldReadImpl@this.label" shape=ellipse]
57 [label="7:CtInvocationImpl@stLabel.getName().equals(this.label)" shape=ellipse]
58 [label="7:CtBinaryOperatorImpl@((stLabel != null) && (!stLabel.isDeleted())) && stLabel.getName().equals(this.label)" shape=ellipse]
59 [label="8:CtExecutableReferenceImpl@isRevisionLabel()" shape=ellipse]
60 [label="8:CtVirtualElement@isRevisionLabel" shape=ellipse]
61 [label="8:CtVariableReadImpl@stLabel" shape=ellipse]
62 [label="8:CtInvocationImpl@stLabel.isRevisionLabel()" shape=ellipse]
63 [label="8:CtUnaryOperatorImpl@(!stLabel.isRevisionLabel())" shape=ellipse]
64 [label="8:CtExecutableReferenceImpl@isViewLabel()" shape=ellipse]
65 [label="8:CtVirtualElement@isViewLabel" shape=ellipse]
66 [label="8:CtVariableReadImpl@stLabel" shape=ellipse]
67 [label="8:CtInvocationImpl@stLabel.isViewLabel()" shape=ellipse]
68 [label="8:CtUnaryOperatorImpl@(!stLabel.isViewLabel())" shape=ellipse]
69 [label="8:CtBinaryOperatorImpl@(!stLabel.isRevisionLabel()) && (!stLabel.isViewLabel())" shape=ellipse]
70 [label="9:CtTypeReferenceImpl@BuildException" shape=ellipse]
71 [label="9:CtLiteralImpl@\"Unexpected label type.\"" shape=ellipse]
72 [label="9:CtConstructorCallImpl@new BuildException(\"Unexpected label type.\")" shape=ellipse]
73 [label="9:CtThrowImpl@throw new BuildException(\"Unexpected label type.\")" shape=ellipse]
74 [label="8:CtBlockImpl@\{
    throw new BuildException(\"Unexpected label type.\");
\}" shape=ellipse]
75 [label="8:CtIfImpl@if ((!stLabel.isRevisionLabel()) && (!stLabel.isViewLabel())) \{
    throw new BuildException(\"Unexpected label type.\");
\}" shape=ellipse]
76 [label="11:CtExecutableReferenceImpl@log(<unknown>,<unknown>)" shape=ellipse]
77 [label="11:CtVirtualElement@log" shape=ellipse]
78 [label="11:CtLiteralImpl@\"using label \"" shape=ellipse]
79 [label="11:CtExecutableReferenceImpl@getName()" shape=ellipse]
80 [label="11:CtVirtualElement@getName" shape=ellipse]
81 [label="11:CtVariableReadImpl@stLabel" shape=ellipse]
82 [label="11:CtInvocationImpl@stLabel.getName()" shape=ellipse]
83 [label="11:CtBinaryOperatorImpl@\"using label \" + stLabel.getName()" shape=ellipse]
84 [label="11:CtTypeAccessImpl@MSG_DEBUG" shape=ellipse]
85 [label="11:CtInvocationImpl@log(\"using label \" + stLabel.getName(), MSG_DEBUG)" shape=ellipse]
86 [label="12:CtFieldWriteImpl@this.labelInUse" shape=ellipse]
87 [label="12:CtThisAccessImpl@this" shape=ellipse]
88 [label="12:CtVariableReadImpl@stLabel" shape=ellipse]
89 [label="12:CtAssignmentImpl@this.labelInUse = stLabel" shape=ellipse]
90 [label="13:CtReturnImpl@return" shape=ellipse]
91 [label="7:CtBlockImpl@\{
    if ((!stLabel.isRevisionLabel()) && (!stLabel.isViewLabel())) \{
        throw new BuildException(\"Unexpected label type.\");
    \}
    log(\"using label \" + stLabel.getName(), MSG_DEBUG);
    this.labelInUse = stLabel;
    return;
\}" shape=ellipse]
92 [label="7:CtIfImpl@if (((stLabel != null) && (!stLabel.isDeleted())) && stLabel.getName().equals(this.label)) \{
    if ((!stLabel.isRevisionLabel()) && (!stLabel.isViewLabel())) \{
        throw new BuildException(\"Unexpected label type.\");
    \}
    log(\"using label \" + stLabel.getName(), MSG_DEBUG);
    this.labelInUse = stLabel;
    return;
\}" shape=ellipse]
93 [label="4:CtBlockImpl@\{
    Label stLabel = allLabels[i];
    log(\"checking label \" + stLabel.getName(), MSG_DEBUG);
    if (((stLabel != null) && (!stLabel.isDeleted())) && stLabel.getName().equals(this.label)) \{
        if ((!stLabel.isRevisionLabel()) && (!stLabel.isViewLabel())) \{
            throw new BuildException(\"Unexpected label type.\");
        \}
        log(\"using label \" + stLabel.getName(), MSG_DEBUG);
        this.labelInUse = stLabel;
        return;
    \}
\}" shape=ellipse]
94 [label="4:CtForImpl@for (int i = 0; i < allLabels.length; i++) \{
    Label stLabel = allLabels[i];
    log(\"checking label \" + stLabel.getName(), MSG_DEBUG);
    if (((stLabel != null) && (!stLabel.isDeleted())) && stLabel.getName().equals(this.label)) \{
        if ((!stLabel.isRevisionLabel()) && (!stLabel.isViewLabel())) \{
            throw new BuildException(\"Unexpected label type.\");
        \}
        log(\"using label \" + stLabel.getName(), MSG_DEBUG);
        this.labelInUse = stLabel;
        return;
    \}
\}" shape=ellipse]
95 [label="16:CtTypeReferenceImpl@BuildException" shape=ellipse]
96 [label="17:CtLiteralImpl@\"Error: label \"" shape=ellipse]
97 [label="17:CtThisAccessImpl@this" shape=ellipse]
98 [label="17:CtFieldReadImpl@this.label" shape=ellipse]
99 [label="17:CtBinaryOperatorImpl@(\"Error: label \" + this.label)" shape=ellipse]
100 [label="17:CtLiteralImpl@\" does not exist in view \"" shape=ellipse]
101 [label="17:CtBinaryOperatorImpl@((\"Error: label \" + this.label) + \" does not exist in view \")" shape=ellipse]
102 [label="17:CtExecutableReferenceImpl@getFullName()" shape=ellipse]
103 [label="17:CtVirtualElement@getFullName" shape=ellipse]
104 [label="17:CtVariableReadImpl@v" shape=ellipse]
105 [label="17:CtInvocationImpl@v.getFullName()" shape=ellipse]
106 [label="17:CtBinaryOperatorImpl@((\"Error: label \" + this.label) + \" does not exist in view \") + v.getFullName()" shape=ellipse]
107 [label="16:CtConstructorCallImpl@new BuildException(((\"Error: label \" + this.label) + \" does not exist in view \") + v.getFullName())" shape=ellipse]
108 [label="16:CtThrowImpl@throw new BuildException(((\"Error: label \" + this.label) + \" does not exist in view \") + v.getFullName())" shape=ellipse]
109 [label="2:CtBlockImpl@\{
    Label[] allLabels = v.getLabels();
    for (int i = 0; i < allLabels.length; i++) \{
        Label stLabel = allLabels[i];
        log(\"checking label \" + stLabel.getName(), MSG_DEBUG);
        if (((stLabel != null) && (!stLabel.isDeleted())) && stLabel.getName().equals(this.label)) \{
            if ((!stLabel.isRevisionLabel()) && (!stLabel.isViewLabel())) \{
                throw new BuildException(\"Unexpected label type.\");
            \}
            log(\"using label \" + stLabel.getName(), MSG_DEBUG);
            this.labelInUse = stLabel;
            return;
        \}
    \}
    throw new BuildException(((\"Error: label \" + this.label) + \" does not exist in view \") + v.getFullName());
\}" shape=ellipse]
110 [label="2:CtMethodImpl@private void findLabel(View v) throws BuildException \{
    Label[] allLabels = v.getLabels();
    for (int i = 0; i < allLabels.length; i++) \{
        Label stLabel = allLabels[i];
        log(\"checking label \" + stLabel.getName(), MSG_DEBUG);
        if (((stLabel != null) && (!stLabel.isDeleted())) && stLabel.getName().equals(this.label)) \{
            if ((!stLabel.isRevisionLabel()) && (!stLabel.isViewLabel())) \{
                throw new BuildException(\"Unexpected label type.\");
            \}
            log(\"using label \" + stLabel.getName(), MSG_DEBUG);
            this.labelInUse = stLabel;
            return;
        \}
    \}
    throw new BuildException(((\"Error: label \" + this.label) + \" does not exist in view \") + v.getFullName());
\}" shape=ellipse]
111 [label="11:Update@UPDATE" shape=ellipse]
112 [label="11:CtTypeAccessImpl@MSG_VERBOSE" shape=ellipse]
2 -> 3 [label="AST"];
6 -> 5 [label="AST"];
9 -> 11 [label="Data Dep"];
10 -> 8 [label="AST"];
10 -> 9 [label="AST"];
10 -> 7 [label="AST"];
11 -> 18 [label="Define-Use"];
11 -> 25 [label="Define-Use"];
11 -> 27 [label="Define-Use"];
12 -> 11 [label="AST"];
12 -> 6 [label="AST"];
12 -> 10 [label="AST"];
15 -> 17 [label="Define-Use"];
16 -> 15 [label="AST"];
16 -> 13 [label="AST"];
16 -> 14 [label="AST"];
18 -> 19 [label="AST"];
20 -> 18 [label="AST"];
21 -> 17 [label="AST"];
21 -> 20 [label="AST"];
21 -> 93 [label="Control Dep"];
21 -> 29 [label="Control Dep"];
21 -> 27 [label="Control Dep"];
21 -> 25 [label="Control Dep"];
21 -> 26 [label="Control Dep"];
21 -> 39 [label="Control Dep"];
21 -> 30 [label="Control Dep"];
21 -> 37 [label="Control Dep"];
21 -> 32 [label="Control Dep"];
21 -> 36 [label="Control Dep"];
21 -> 33 [label="Control Dep"];
21 -> 35 [label="Control Dep"];
21 -> 38 [label="Control Dep"];
21 -> 92 [label="Control Dep"];
21 -> 58 [label="Control Dep"];
21 -> 48 [label="Control Dep"];
21 -> 42 [label="Control Dep"];
21 -> 40 [label="Control Dep"];
21 -> 41 [label="Control Dep"];
21 -> 47 [label="Control Dep"];
21 -> 46 [label="Control Dep"];
21 -> 43 [label="Control Dep"];
21 -> 45 [label="Control Dep"];
21 -> 57 [label="Control Dep"];
21 -> 49 [label="Control Dep"];
21 -> 54 [label="Control Dep"];
21 -> 51 [label="Control Dep"];
21 -> 53 [label="Control Dep"];
21 -> 56 [label="Control Dep"];
21 -> 55 [label="Control Dep"];
22 -> 26 [label="Define-Use"];
23 -> 22 [label="AST"];
27 -> 25 [label="AST"];
27 -> 26 [label="AST"];
27 -> 28 [label="Data Dep"];
28 -> 35 [label="Define-Use"];
28 -> 40 [label="Define-Use"];
28 -> 45 [label="Define-Use"];
28 -> 53 [label="Define-Use"];
28 -> 61 [label="Define-Use"];
28 -> 66 [label="Define-Use"];
28 -> 81 [label="Define-Use"];
28 -> 88 [label="Define-Use"];
29 -> 28 [label="AST"];
29 -> 24 [label="AST"];
29 -> 27 [label="AST"];
36 -> 34 [label="AST"];
36 -> 35 [label="AST"];
36 -> 33 [label="AST"];
37 -> 32 [label="AST"];
37 -> 36 [label="AST"];
39 -> 31 [label="AST"];
39 -> 30 [label="AST"];
39 -> 37 [label="AST"];
39 -> 38 [label="AST"];
42 -> 40 [label="AST"];
42 -> 41 [label="AST"];
46 -> 44 [label="AST"];
46 -> 45 [label="AST"];
46 -> 43 [label="AST"];
47 -> 46 [label="AST"];
48 -> 42 [label="AST"];
48 -> 47 [label="AST"];
54 -> 52 [label="AST"];
54 -> 53 [label="AST"];
54 -> 51 [label="AST"];
56 -> 55 [label="AST"];
57 -> 50 [label="AST"];
57 -> 54 [label="AST"];
57 -> 49 [label="AST"];
57 -> 56 [label="AST"];
58 -> 48 [label="AST"];
58 -> 57 [label="AST"];
58 -> 91 [label="Control Dep"];
58 -> 75 [label="Control Dep"];
58 -> 69 [label="Control Dep"];
58 -> 63 [label="Control Dep"];
58 -> 62 [label="Control Dep"];
58 -> 59 [label="Control Dep"];
58 -> 61 [label="Control Dep"];
58 -> 68 [label="Control Dep"];
58 -> 67 [label="Control Dep"];
58 -> 64 [label="Control Dep"];
58 -> 66 [label="Control Dep"];
58 -> 85 [label="Control Dep"];
58 -> 76 [label="Control Dep"];
58 -> 83 [label="Control Dep"];
58 -> 78 [label="Control Dep"];
58 -> 82 [label="Control Dep"];
58 -> 79 [label="Control Dep"];
58 -> 81 [label="Control Dep"];
58 -> 84 [label="Control Dep"];
58 -> 89 [label="Control Dep"];
58 -> 86 [label="Control Dep"];
58 -> 88 [label="Control Dep"];
58 -> 90 [label="Control Dep"];
62 -> 60 [label="AST"];
62 -> 61 [label="AST"];
62 -> 59 [label="AST"];
63 -> 62 [label="AST"];
67 -> 65 [label="AST"];
67 -> 66 [label="AST"];
67 -> 64 [label="AST"];
68 -> 67 [label="AST"];
69 -> 63 [label="AST"];
69 -> 68 [label="AST"];
69 -> 74 [label="Control Dep"];
69 -> 73 [label="Control Dep"];
69 -> 72 [label="Control Dep"];
69 -> 71 [label="Control Dep"];
72 -> 71 [label="AST"];
73 -> 72 [label="AST"];
74 -> 73 [label="AST"];
75 -> 69 [label="AST"];
75 -> 74 [label="AST"];
82 -> 80 [label="AST"];
82 -> 81 [label="AST"];
82 -> 79 [label="AST"];
83 -> 78 [label="AST"];
83 -> 82 [label="AST"];
84 -> 111 [label="Action"];
85 -> 77 [label="AST"];
85 -> 76 [label="AST"];
85 -> 83 [label="AST"];
85 -> 84 [label="AST"];
86 -> 87 [label="AST"];
88 -> 86 [label="Data Dep"];
89 -> 86 [label="AST"];
89 -> 88 [label="AST"];
91 -> 75 [label="AST"];
91 -> 85 [label="AST"];
91 -> 89 [label="AST"];
91 -> 90 [label="AST"];
92 -> 58 [label="AST"];
92 -> 91 [label="AST"];
93 -> 29 [label="AST"];
93 -> 39 [label="AST"];
93 -> 92 [label="AST"];
94 -> 16 [label="AST"];
94 -> 21 [label="AST"];
94 -> 23 [label="AST"];
94 -> 93 [label="AST"];
98 -> 97 [label="AST"];
99 -> 96 [label="AST"];
99 -> 98 [label="AST"];
101 -> 99 [label="AST"];
101 -> 100 [label="AST"];
105 -> 103 [label="AST"];
105 -> 104 [label="AST"];
105 -> 102 [label="AST"];
106 -> 101 [label="AST"];
106 -> 105 [label="AST"];
107 -> 106 [label="AST"];
108 -> 107 [label="AST"];
109 -> 12 [label="AST"];
109 -> 94 [label="AST"];
109 -> 108 [label="AST"];
110 -> 1 [label="AST"];
110 -> 0 [label="AST"];
110 -> 2 [label="AST"];
110 -> 4 [label="AST"];
110 -> 109 [label="AST"];
111 -> 112 [label="Action"];
}