digraph "putNextEntry#?,ZipEntry" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@putNextEntry" shape=ellipse]
2 [label="2:CtParameterImpl@ZipEntry ze" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@ZipEntry" shape=ellipse]
4 [label="2:CtTypeReferenceImpl@IOException" shape=ellipse]
5 [label="3:CtExecutableReferenceImpl@closeEntry()" shape=ellipse]
6 [label="3:CtVirtualElement@closeEntry" shape=ellipse]
7 [label="3:CtInvocationImpl@closeEntry()" shape=ellipse]
8 [label="4:CtFieldWriteImpl@entry" shape=ellipse]
9 [label="4:CtVariableReadImpl@ze" shape=ellipse]
10 [label="4:CtAssignmentImpl@entry = ze" shape=ellipse]
11 [label="5:CtExecutableReferenceImpl@addElement()" shape=ellipse]
12 [label="5:CtVirtualElement@addElement" shape=ellipse]
13 [label="5:CtFieldReadImpl@entries" shape=ellipse]
14 [label="5:CtFieldReadImpl@entry" shape=ellipse]
15 [label="5:CtInvocationImpl@entries.addElement(entry)" shape=ellipse]
16 [label="6:CtExecutableReferenceImpl@getMethod()" shape=ellipse]
17 [label="6:CtVirtualElement@getMethod" shape=ellipse]
18 [label="6:CtFieldReadImpl@entry" shape=ellipse]
19 [label="6:CtInvocationImpl@entry.getMethod()" shape=ellipse]
20 [label="6:CtLiteralImpl@1" shape=ellipse]
21 [label="6:CtUnaryOperatorImpl@(-1)" shape=ellipse]
22 [label="6:CtBinaryOperatorImpl@entry.getMethod() == (-1)" shape=ellipse]
23 [label="7:CtExecutableReferenceImpl@setMethod()" shape=ellipse]
24 [label="7:CtVirtualElement@setMethod" shape=ellipse]
25 [label="7:CtFieldReadImpl@entry" shape=ellipse]
26 [label="7:CtFieldReadImpl@method" shape=ellipse]
27 [label="7:CtInvocationImpl@entry.setMethod(method)" shape=ellipse]
28 [label="6:CtBlockImpl@\{
    entry.setMethod(method);
\}" shape=ellipse]
29 [label="6:CtIfImpl@if (entry.getMethod() == (-1)) \{
    entry.setMethod(method);
\}" shape=ellipse]
30 [label="9:CtExecutableReferenceImpl@getTime()" shape=ellipse]
31 [label="9:CtVirtualElement@getTime" shape=ellipse]
32 [label="9:CtFieldReadImpl@entry" shape=ellipse]
33 [label="9:CtInvocationImpl@entry.getTime()" shape=ellipse]
34 [label="9:CtLiteralImpl@1" shape=ellipse]
35 [label="9:CtUnaryOperatorImpl@(-1)" shape=ellipse]
36 [label="9:CtBinaryOperatorImpl@entry.getTime() == (-1)" shape=ellipse]
37 [label="10:CtExecutableReferenceImpl@setTime(long)" shape=ellipse]
38 [label="10:CtVirtualElement@setTime" shape=ellipse]
39 [label="10:CtFieldReadImpl@entry" shape=ellipse]
40 [label="10:CtExecutableReferenceImpl@currentTimeMillis()" shape=ellipse]
41 [label="10:CtVirtualElement@currentTimeMillis" shape=ellipse]
42 [label="10:CtTypeAccessImpl@System" shape=ellipse]
43 [label="10:CtInvocationImpl@System.currentTimeMillis()" shape=ellipse]
44 [label="10:CtInvocationImpl@entry.setTime(System.currentTimeMillis())" shape=ellipse]
45 [label="9:CtBlockImpl@\{
    entry.setTime(System.currentTimeMillis());
\}" shape=ellipse]
46 [label="9:CtIfImpl@if (entry.getTime() == (-1)) \{
    entry.setTime(System.currentTimeMillis());
\}" shape=ellipse]
47 [label="12:CtExecutableReferenceImpl@getMethod()" shape=ellipse]
48 [label="12:CtVirtualElement@getMethod" shape=ellipse]
49 [label="12:CtFieldReadImpl@entry" shape=ellipse]
50 [label="12:CtInvocationImpl@entry.getMethod()" shape=ellipse]
51 [label="12:CtFieldReadImpl@STORED" shape=ellipse]
52 [label="12:CtBinaryOperatorImpl@entry.getMethod() == STORED" shape=ellipse]
53 [label="13:CtExecutableReferenceImpl@getSize()" shape=ellipse]
54 [label="13:CtVirtualElement@getSize" shape=ellipse]
55 [label="13:CtFieldReadImpl@entry" shape=ellipse]
56 [label="13:CtInvocationImpl@entry.getSize()" shape=ellipse]
57 [label="13:CtLiteralImpl@1" shape=ellipse]
58 [label="13:CtUnaryOperatorImpl@(-1)" shape=ellipse]
59 [label="13:CtBinaryOperatorImpl@entry.getSize() == (-1)" shape=ellipse]
60 [label="14:CtTypeReferenceImpl@ZipException" shape=ellipse]
61 [label="14:CtLiteralImpl@\"uncompressed size is required for STORED method\"" shape=ellipse]
62 [label="14:CtConstructorCallImpl@new ZipException(\"uncompressed size is required for STORED method\")" shape=ellipse]
63 [label="14:CtThrowImpl@throw new ZipException(\"uncompressed size is required for STORED method\")" shape=ellipse]
64 [label="13:CtBlockImpl@\{
    throw new ZipException(\"uncompressed size is required for STORED method\");
\}" shape=ellipse]
65 [label="13:CtIfImpl@if (entry.getSize() == (-1)) \{
    throw new ZipException(\"uncompressed size is required for STORED method\");
\}" shape=ellipse]
66 [label="16:CtExecutableReferenceImpl@getCrc()" shape=ellipse]
67 [label="16:CtVirtualElement@getCrc" shape=ellipse]
68 [label="16:CtFieldReadImpl@entry" shape=ellipse]
69 [label="16:CtInvocationImpl@entry.getCrc()" shape=ellipse]
70 [label="16:CtLiteralImpl@1" shape=ellipse]
71 [label="16:CtUnaryOperatorImpl@(-1)" shape=ellipse]
72 [label="16:CtBinaryOperatorImpl@entry.getCrc() == (-1)" shape=ellipse]
73 [label="17:CtTypeReferenceImpl@ZipException" shape=ellipse]
74 [label="17:CtLiteralImpl@\"crc checksum is required for STORED method\"" shape=ellipse]
75 [label="17:CtConstructorCallImpl@new ZipException(\"crc checksum is required for STORED method\")" shape=ellipse]
76 [label="17:CtThrowImpl@throw new ZipException(\"crc checksum is required for STORED method\")" shape=ellipse]
77 [label="16:CtBlockImpl@\{
    throw new ZipException(\"crc checksum is required for STORED method\");
\}" shape=ellipse]
78 [label="16:CtIfImpl@if (entry.getCrc() == (-1)) \{
    throw new ZipException(\"crc checksum is required for STORED method\");
\}" shape=ellipse]
79 [label="19:CtExecutableReferenceImpl@setComprSize()" shape=ellipse]
80 [label="19:CtVirtualElement@setComprSize" shape=ellipse]
81 [label="19:CtFieldReadImpl@entry" shape=ellipse]
82 [label="19:CtExecutableReferenceImpl@getSize()" shape=ellipse]
83 [label="19:CtVirtualElement@getSize" shape=ellipse]
84 [label="19:CtFieldReadImpl@entry" shape=ellipse]
85 [label="19:CtInvocationImpl@entry.getSize()" shape=ellipse]
86 [label="19:CtInvocationImpl@entry.setComprSize(entry.getSize())" shape=ellipse]
87 [label="12:CtBlockImpl@\{
    if (entry.getSize() == (-1)) \{
        throw new ZipException(\"uncompressed size is required for STORED method\");
    \}
    if (entry.getCrc() == (-1)) \{
        throw new ZipException(\"crc checksum is required for STORED method\");
    \}
    entry.setComprSize(entry.getSize());
\}" shape=ellipse]
88 [label="21:CtExecutableReferenceImpl@setLevel()" shape=ellipse]
89 [label="21:CtVirtualElement@setLevel" shape=ellipse]
90 [label="21:CtFieldReadImpl@def" shape=ellipse]
91 [label="21:CtFieldReadImpl@level" shape=ellipse]
92 [label="21:CtInvocationImpl@def.setLevel(level)" shape=ellipse]
93 [label="20:CtBlockImpl@\{
    def.setLevel(level);
\}" shape=ellipse]
94 [label="12:CtIfImpl@if (entry.getMethod() == STORED) \{
    if (entry.getSize() == (-1)) \{
        throw new ZipException(\"uncompressed size is required for STORED method\");
    \}
    if (entry.getCrc() == (-1)) \{
        throw new ZipException(\"crc checksum is required for STORED method\");
    \}
    entry.setComprSize(entry.getSize());
\} else \{
    def.setLevel(level);
\}" shape=ellipse]
95 [label="23:CtExecutableReferenceImpl@writeLocalFileHeader(<unknown>)" shape=ellipse]
96 [label="23:CtVirtualElement@writeLocalFileHeader" shape=ellipse]
97 [label="23:CtFieldReadImpl@entry" shape=ellipse]
98 [label="23:CtInvocationImpl@writeLocalFileHeader(entry)" shape=ellipse]
99 [label="2:CtBlockImpl@\{
    closeEntry();
    entry = ze;
    entries.addElement(entry);
    if (entry.getMethod() == (-1)) \{
        entry.setMethod(method);
    \}
    if (entry.getTime() == (-1)) \{
        entry.setTime(System.currentTimeMillis());
    \}
    if (entry.getMethod() == STORED) \{
        if (entry.getSize() == (-1)) \{
            throw new ZipException(\"uncompressed size is required for STORED method\");
        \}
        if (entry.getCrc() == (-1)) \{
            throw new ZipException(\"crc checksum is required for STORED method\");
        \}
        entry.setComprSize(entry.getSize());
    \} else \{
        def.setLevel(level);
    \}
    writeLocalFileHeader(entry);
\}" shape=ellipse]
100 [label="2:CtMethodImpl@public void putNextEntry(ZipEntry ze) throws IOException \{
    closeEntry();
    entry = ze;
    entries.addElement(entry);
    if (entry.getMethod() == (-1)) \{
        entry.setMethod(method);
    \}
    if (entry.getTime() == (-1)) \{
        entry.setTime(System.currentTimeMillis());
    \}
    if (entry.getMethod() == STORED) \{
        if (entry.getSize() == (-1)) \{
            throw new ZipException(\"uncompressed size is required for STORED method\");
        \}
        if (entry.getCrc() == (-1)) \{
            throw new ZipException(\"crc checksum is required for STORED method\");
        \}
        entry.setComprSize(entry.getSize());
    \} else \{
        def.setLevel(level);
    \}
    writeLocalFileHeader(entry);
\}" shape=ellipse]
101 [label="5:Update@UPDATE" shape=ellipse]
102 [label="5:CtInvocationImpl@entries.add(entry)" shape=ellipse]
2 -> 3 [label="AST"];
7 -> 6 [label="AST"];
7 -> 5 [label="AST"];
8 -> 14 [label="Define-Use"];
8 -> 18 [label="Define-Use"];
8 -> 25 [label="Define-Use"];
8 -> 32 [label="Define-Use"];
8 -> 39 [label="Define-Use"];
8 -> 49 [label="Define-Use"];
8 -> 55 [label="Define-Use"];
8 -> 68 [label="Define-Use"];
8 -> 81 [label="Define-Use"];
8 -> 84 [label="Define-Use"];
8 -> 97 [label="Define-Use"];
9 -> 8 [label="Data Dep"];
10 -> 8 [label="AST"];
10 -> 9 [label="AST"];
15 -> 12 [label="AST"];
15 -> 13 [label="AST"];
15 -> 11 [label="AST"];
15 -> 14 [label="AST"];
15 -> 101 [label="Action"];
19 -> 17 [label="AST"];
19 -> 18 [label="AST"];
19 -> 16 [label="AST"];
21 -> 20 [label="AST"];
22 -> 19 [label="AST"];
22 -> 21 [label="AST"];
22 -> 28 [label="Control Dep"];
22 -> 27 [label="Control Dep"];
22 -> 23 [label="Control Dep"];
22 -> 25 [label="Control Dep"];
22 -> 26 [label="Control Dep"];
27 -> 24 [label="AST"];
27 -> 25 [label="AST"];
27 -> 23 [label="AST"];
27 -> 26 [label="AST"];
28 -> 27 [label="AST"];
29 -> 22 [label="AST"];
29 -> 28 [label="AST"];
33 -> 31 [label="AST"];
33 -> 32 [label="AST"];
33 -> 30 [label="AST"];
35 -> 34 [label="AST"];
36 -> 33 [label="AST"];
36 -> 35 [label="AST"];
36 -> 45 [label="Control Dep"];
36 -> 44 [label="Control Dep"];
36 -> 37 [label="Control Dep"];
36 -> 39 [label="Control Dep"];
36 -> 43 [label="Control Dep"];
36 -> 40 [label="Control Dep"];
36 -> 42 [label="Control Dep"];
43 -> 41 [label="AST"];
43 -> 42 [label="AST"];
43 -> 40 [label="AST"];
44 -> 38 [label="AST"];
44 -> 39 [label="AST"];
44 -> 37 [label="AST"];
44 -> 43 [label="AST"];
45 -> 44 [label="AST"];
46 -> 36 [label="AST"];
46 -> 45 [label="AST"];
50 -> 48 [label="AST"];
50 -> 49 [label="AST"];
50 -> 47 [label="AST"];
52 -> 50 [label="AST"];
52 -> 51 [label="AST"];
52 -> 87 [label="Control Dep"];
52 -> 65 [label="Control Dep"];
52 -> 59 [label="Control Dep"];
52 -> 56 [label="Control Dep"];
52 -> 53 [label="Control Dep"];
52 -> 55 [label="Control Dep"];
52 -> 58 [label="Control Dep"];
52 -> 57 [label="Control Dep"];
52 -> 78 [label="Control Dep"];
52 -> 72 [label="Control Dep"];
52 -> 69 [label="Control Dep"];
52 -> 66 [label="Control Dep"];
52 -> 68 [label="Control Dep"];
52 -> 71 [label="Control Dep"];
52 -> 70 [label="Control Dep"];
52 -> 86 [label="Control Dep"];
52 -> 79 [label="Control Dep"];
52 -> 81 [label="Control Dep"];
52 -> 85 [label="Control Dep"];
52 -> 82 [label="Control Dep"];
52 -> 84 [label="Control Dep"];
52 -> 93 [label="Control Dep"];
52 -> 92 [label="Control Dep"];
52 -> 88 [label="Control Dep"];
52 -> 90 [label="Control Dep"];
52 -> 91 [label="Control Dep"];
56 -> 54 [label="AST"];
56 -> 55 [label="AST"];
56 -> 53 [label="AST"];
58 -> 57 [label="AST"];
59 -> 56 [label="AST"];
59 -> 58 [label="AST"];
59 -> 64 [label="Control Dep"];
59 -> 63 [label="Control Dep"];
59 -> 62 [label="Control Dep"];
59 -> 61 [label="Control Dep"];
62 -> 61 [label="AST"];
63 -> 62 [label="AST"];
64 -> 63 [label="AST"];
65 -> 59 [label="AST"];
65 -> 64 [label="AST"];
69 -> 67 [label="AST"];
69 -> 68 [label="AST"];
69 -> 66 [label="AST"];
71 -> 70 [label="AST"];
72 -> 69 [label="AST"];
72 -> 71 [label="AST"];
72 -> 77 [label="Control Dep"];
72 -> 76 [label="Control Dep"];
72 -> 75 [label="Control Dep"];
72 -> 74 [label="Control Dep"];
75 -> 74 [label="AST"];
76 -> 75 [label="AST"];
77 -> 76 [label="AST"];
78 -> 72 [label="AST"];
78 -> 77 [label="AST"];
85 -> 83 [label="AST"];
85 -> 84 [label="AST"];
85 -> 82 [label="AST"];
86 -> 80 [label="AST"];
86 -> 81 [label="AST"];
86 -> 79 [label="AST"];
86 -> 85 [label="AST"];
87 -> 65 [label="AST"];
87 -> 78 [label="AST"];
87 -> 86 [label="AST"];
92 -> 89 [label="AST"];
92 -> 90 [label="AST"];
92 -> 88 [label="AST"];
92 -> 91 [label="AST"];
93 -> 92 [label="AST"];
94 -> 52 [label="AST"];
94 -> 87 [label="AST"];
94 -> 93 [label="AST"];
98 -> 96 [label="AST"];
98 -> 95 [label="AST"];
98 -> 97 [label="AST"];
99 -> 7 [label="AST"];
99 -> 10 [label="AST"];
99 -> 15 [label="AST"];
99 -> 29 [label="AST"];
99 -> 46 [label="AST"];
99 -> 94 [label="AST"];
99 -> 98 [label="AST"];
100 -> 1 [label="AST"];
100 -> 0 [label="AST"];
100 -> 2 [label="AST"];
100 -> 4 [label="AST"];
100 -> 99 [label="AST"];
101 -> 102 [label="Action"];
}