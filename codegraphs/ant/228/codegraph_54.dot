digraph "scanDir#?,File,String[],FileNameMapper" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@scanDir" shape=ellipse]
2 [label="2:CtParameterImpl@File baseDir" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@File" shape=ellipse]
4 [label="2:CtParameterImpl@String[] files" shape=ellipse]
5 [label="2:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
6 [label="2:CtParameterImpl@FileNameMapper mapper" shape=ellipse]
7 [label="2:CtTypeReferenceImpl@FileNameMapper" shape=ellipse]
8 [label="2:CtTypeReferenceImpl@TaskException" shape=ellipse]
9 [label="3:CtVirtualElement@String[]" shape=ellipse]
10 [label="3:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
11 [label="3:CtVariableReadImpl@files" shape=ellipse]
12 [label="3:CtVirtualElement@newFiles" shape=ellipse]
13 [label="3:CtLocalVariableImpl@String[] newFiles = files" shape=ellipse]
14 [label="4:CtFieldReadImpl@idl" shape=ellipse]
15 [label="5:CtExecutableReferenceImpl@log(java.lang.String,<unknown>)" shape=ellipse]
16 [label="5:CtVirtualElement@log" shape=ellipse]
17 [label="5:CtLiteralImpl@\"will leave uptodate test to rmic implementation in idl mode.\"" shape=ellipse]
18 [label="5:CtTypeAccessImpl@MSG_VERBOSE" shape=ellipse]
19 [label="5:CtInvocationImpl@log(\"will leave uptodate test to rmic implementation in idl mode.\", MSG_VERBOSE)" shape=ellipse]
20 [label="4:CtBlockImpl@\{
    log(\"will leave uptodate test to rmic implementation in idl mode.\", MSG_VERBOSE);
\}" shape=ellipse]
21 [label="6:CtFieldReadImpl@iiop" shape=ellipse]
22 [label="6:CtFieldReadImpl@iiopopts" shape=ellipse]
23 [label="6:CtLiteralImpl@null" shape=ellipse]
24 [label="6:CtBinaryOperatorImpl@(iiopopts != null)" shape=ellipse]
25 [label="6:CtBinaryOperatorImpl@(iiop && (iiopopts != null))" shape=ellipse]
26 [label="6:CtExecutableReferenceImpl@indexOf(java.lang.String)" shape=ellipse]
27 [label="6:CtVirtualElement@indexOf" shape=ellipse]
28 [label="6:CtFieldReadImpl@iiopopts" shape=ellipse]
29 [label="6:CtLiteralImpl@\"-always\"" shape=ellipse]
30 [label="6:CtInvocationImpl@iiopopts.indexOf(\"-always\")" shape=ellipse]
31 [label="6:CtLiteralImpl@1" shape=ellipse]
32 [label="6:CtUnaryOperatorImpl@(-1)" shape=ellipse]
33 [label="6:CtBinaryOperatorImpl@(iiopopts.indexOf(\"-always\") > (-1))" shape=ellipse]
34 [label="6:CtBinaryOperatorImpl@(iiop && (iiopopts != null)) && (iiopopts.indexOf(\"-always\") > (-1))" shape=ellipse]
35 [label="7:CtExecutableReferenceImpl@log(java.lang.String,<unknown>)" shape=ellipse]
36 [label="7:CtVirtualElement@log" shape=ellipse]
37 [label="7:CtLiteralImpl@\"no uptodate test as -always option has been specified\"" shape=ellipse]
38 [label="7:CtTypeAccessImpl@MSG_VERBOSE" shape=ellipse]
39 [label="7:CtInvocationImpl@log(\"no uptodate test as -always option has been specified\", MSG_VERBOSE)" shape=ellipse]
40 [label="6:CtBlockImpl@\{
    log(\"no uptodate test as -always option has been specified\", MSG_VERBOSE);
\}" shape=ellipse]
41 [label="9:CtTypeReferenceImpl@SourceFileScanner" shape=ellipse]
42 [label="9:CtTypeReferenceImpl@SourceFileScanner" shape=ellipse]
43 [label="9:CtThisAccessImpl@this" shape=ellipse]
44 [label="9:CtConstructorCallImpl@new SourceFileScanner(this)" shape=ellipse]
45 [label="9:CtVirtualElement@sfs" shape=ellipse]
46 [label="9:CtLocalVariableImpl@SourceFileScanner sfs = new SourceFileScanner(this)" shape=ellipse]
47 [label="10:CtVariableWriteImpl@newFiles" shape=ellipse]
48 [label="10:CtExecutableReferenceImpl@restrict(java.lang.String[],File,File,FileNameMapper)" shape=ellipse]
49 [label="10:CtVirtualElement@restrict" shape=ellipse]
50 [label="10:CtVariableReadImpl@sfs" shape=ellipse]
51 [label="10:CtVariableReadImpl@files" shape=ellipse]
52 [label="10:CtVariableReadImpl@baseDir" shape=ellipse]
53 [label="10:CtVariableReadImpl@baseDir" shape=ellipse]
54 [label="10:CtVariableReadImpl@mapper" shape=ellipse]
55 [label="10:CtInvocationImpl@sfs.restrict(files, baseDir, baseDir, mapper)" shape=ellipse]
56 [label="10:CtAssignmentImpl@newFiles = sfs.restrict(files, baseDir, baseDir, mapper)" shape=ellipse]
57 [label="8:CtBlockImpl@\{
    SourceFileScanner sfs = new SourceFileScanner(this);
    newFiles = sfs.restrict(files, baseDir, baseDir, mapper);
\}" shape=ellipse]
58 [label="6:CtIfImpl@if ((iiop && (iiopopts != null)) && (iiopopts.indexOf(\"-always\") > (-1))) \{
    log(\"no uptodate test as -always option has been specified\", MSG_VERBOSE);
\} else \{
    SourceFileScanner sfs = new SourceFileScanner(this);
    newFiles = sfs.restrict(files, baseDir, baseDir, mapper);
\}" shape=ellipse]
59 [label="6:CtBlockImpl@
    if ((iiop && (iiopopts != null)) && (iiopopts.indexOf(\"-always\") > (-1))) \{
        log(\"no uptodate test as -always option has been specified\", MSG_VERBOSE);
    \} else \{
        SourceFileScanner sfs = new SourceFileScanner(this);
        newFiles = sfs.restrict(files, baseDir, baseDir, mapper);
    \}
" shape=ellipse]
60 [label="4:CtIfImpl@if (idl) \{
    log(\"will leave uptodate test to rmic implementation in idl mode.\", MSG_VERBOSE);
\} else if ((iiop && (iiopopts != null)) && (iiopopts.indexOf(\"-always\") > (-1))) \{
    log(\"no uptodate test as -always option has been specified\", MSG_VERBOSE);
\} else \{
    SourceFileScanner sfs = new SourceFileScanner(this);
    newFiles = sfs.restrict(files, baseDir, baseDir, mapper);
\}" shape=ellipse]
61 [label="12:CtTypeReferenceImpl@int" shape=ellipse]
62 [label="12:CtLiteralImpl@0" shape=ellipse]
63 [label="12:CtVirtualElement@i" shape=ellipse]
64 [label="12:CtLocalVariableImpl@int i = 0" shape=ellipse]
65 [label="12:CtVariableReadImpl@i" shape=ellipse]
66 [label="12:CtVariableReadImpl@newFiles" shape=ellipse]
67 [label="12:CtLocalVariableReferenceImpl@newFiles" shape=ellipse]
68 [label="12:CtFieldReadImpl@newFiles.length" shape=ellipse]
69 [label="12:CtBinaryOperatorImpl@i < newFiles.length" shape=ellipse]
70 [label="12:CtVariableWriteImpl@i" shape=ellipse]
71 [label="12:CtUnaryOperatorImpl@i++" shape=ellipse]
72 [label="13:CtTypeReferenceImpl@String" shape=ellipse]
73 [label="13:CtExecutableReferenceImpl@replace(char,char)" shape=ellipse]
74 [label="13:CtVirtualElement@replace" shape=ellipse]
75 [label="13:CtVariableReadImpl@newFiles" shape=ellipse]
76 [label="13:CtVariableReadImpl@i" shape=ellipse]
77 [label="13:CtArrayReadImpl@newFiles[i]" shape=ellipse]
78 [label="13:CtTypeAccessImpl@separatorChar" shape=ellipse]
79 [label="13:CtLiteralImpl@'.'" shape=ellipse]
80 [label="13:CtInvocationImpl@newFiles[i].replace(separatorChar, '.')" shape=ellipse]
81 [label="13:CtVirtualElement@classname" shape=ellipse]
82 [label="13:CtLocalVariableImpl@String classname = newFiles[i].replace(separatorChar, '.')" shape=ellipse]
83 [label="14:CtVariableWriteImpl@classname" shape=ellipse]
84 [label="14:CtExecutableReferenceImpl@substring(int,int)" shape=ellipse]
85 [label="14:CtVirtualElement@substring" shape=ellipse]
86 [label="14:CtVariableReadImpl@classname" shape=ellipse]
87 [label="14:CtLiteralImpl@0" shape=ellipse]
88 [label="14:CtExecutableReferenceImpl@lastIndexOf(java.lang.String)" shape=ellipse]
89 [label="14:CtVirtualElement@lastIndexOf" shape=ellipse]
90 [label="14:CtVariableReadImpl@classname" shape=ellipse]
91 [label="14:CtLiteralImpl@\".class\"" shape=ellipse]
92 [label="14:CtInvocationImpl@classname.lastIndexOf(\".class\")" shape=ellipse]
93 [label="14:CtInvocationImpl@classname.substring(0, classname.lastIndexOf(\".class\"))" shape=ellipse]
94 [label="14:CtAssignmentImpl@classname = classname.substring(0, classname.lastIndexOf(\".class\"))" shape=ellipse]
95 [label="15:CtExecutableReferenceImpl@addElement(java.lang.String)" shape=ellipse]
96 [label="15:CtVirtualElement@addElement" shape=ellipse]
97 [label="15:CtFieldReadImpl@compileList" shape=ellipse]
98 [label="15:CtVariableReadImpl@classname" shape=ellipse]
99 [label="15:CtInvocationImpl@compileList.addElement(classname)" shape=ellipse]
100 [label="12:CtBlockImpl@\{
    String classname = newFiles[i].replace(separatorChar, '.');
    classname = classname.substring(0, classname.lastIndexOf(\".class\"));
    compileList.addElement(classname);
\}" shape=ellipse]
101 [label="12:CtForImpl@for (int i = 0; i < newFiles.length; i++) \{
    String classname = newFiles[i].replace(separatorChar, '.');
    classname = classname.substring(0, classname.lastIndexOf(\".class\"));
    compileList.addElement(classname);
\}" shape=ellipse]
102 [label="2:CtBlockImpl@\{
    String[] newFiles = files;
    if (idl) \{
        log(\"will leave uptodate test to rmic implementation in idl mode.\", MSG_VERBOSE);
    \} else if ((iiop && (iiopopts != null)) && (iiopopts.indexOf(\"-always\") > (-1))) \{
        log(\"no uptodate test as -always option has been specified\", MSG_VERBOSE);
    \} else \{
        SourceFileScanner sfs = new SourceFileScanner(this);
        newFiles = sfs.restrict(files, baseDir, baseDir, mapper);
    \}
    for (int i = 0; i < newFiles.length; i++) \{
        String classname = newFiles[i].replace(separatorChar, '.');
        classname = classname.substring(0, classname.lastIndexOf(\".class\"));
        compileList.addElement(classname);
    \}
\}" shape=ellipse]
103 [label="2:CtMethodImpl@protected void scanDir(File baseDir, String[] files, FileNameMapper mapper) throws TaskException \{
    String[] newFiles = files;
    if (idl) \{
        log(\"will leave uptodate test to rmic implementation in idl mode.\", MSG_VERBOSE);
    \} else if ((iiop && (iiopopts != null)) && (iiopopts.indexOf(\"-always\") > (-1))) \{
        log(\"no uptodate test as -always option has been specified\", MSG_VERBOSE);
    \} else \{
        SourceFileScanner sfs = new SourceFileScanner(this);
        newFiles = sfs.restrict(files, baseDir, baseDir, mapper);
    \}
    for (int i = 0; i < newFiles.length; i++) \{
        String classname = newFiles[i].replace(separatorChar, '.');
        classname = classname.substring(0, classname.lastIndexOf(\".class\"));
        compileList.addElement(classname);
    \}
\}" shape=ellipse]
104 [label="15:Update@UPDATE" shape=ellipse]
105 [label="15:CtInvocationImpl@compileList.add(classname)" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
6 -> 7 [label="AST"];
10 -> 9 [label="AST"];
11 -> 12 [label="Data Dep"];
12 -> 66 [label="Define-Use"];
12 -> 75 [label="Define-Use"];
12 -> 77 [label="Define-Use"];
13 -> 12 [label="AST"];
13 -> 10 [label="AST"];
13 -> 11 [label="AST"];
14 -> 20 [label="Control Dep"];
14 -> 19 [label="Control Dep"];
14 -> 15 [label="Control Dep"];
14 -> 17 [label="Control Dep"];
14 -> 18 [label="Control Dep"];
14 -> 59 [label="Control Dep"];
14 -> 58 [label="Control Dep"];
14 -> 34 [label="Control Dep"];
14 -> 25 [label="Control Dep"];
14 -> 21 [label="Control Dep"];
14 -> 24 [label="Control Dep"];
14 -> 22 [label="Control Dep"];
14 -> 23 [label="Control Dep"];
14 -> 33 [label="Control Dep"];
14 -> 30 [label="Control Dep"];
14 -> 26 [label="Control Dep"];
14 -> 28 [label="Control Dep"];
14 -> 29 [label="Control Dep"];
14 -> 32 [label="Control Dep"];
14 -> 31 [label="Control Dep"];
19 -> 16 [label="AST"];
19 -> 15 [label="AST"];
19 -> 17 [label="AST"];
19 -> 18 [label="AST"];
20 -> 19 [label="AST"];
24 -> 22 [label="AST"];
24 -> 23 [label="AST"];
25 -> 21 [label="AST"];
25 -> 24 [label="AST"];
30 -> 27 [label="AST"];
30 -> 28 [label="AST"];
30 -> 26 [label="AST"];
30 -> 29 [label="AST"];
32 -> 31 [label="AST"];
33 -> 30 [label="AST"];
33 -> 32 [label="AST"];
34 -> 25 [label="AST"];
34 -> 33 [label="AST"];
34 -> 40 [label="Control Dep"];
34 -> 39 [label="Control Dep"];
34 -> 35 [label="Control Dep"];
34 -> 37 [label="Control Dep"];
34 -> 38 [label="Control Dep"];
34 -> 57 [label="Control Dep"];
34 -> 46 [label="Control Dep"];
34 -> 44 [label="Control Dep"];
34 -> 43 [label="Control Dep"];
34 -> 56 [label="Control Dep"];
34 -> 47 [label="Control Dep"];
34 -> 55 [label="Control Dep"];
34 -> 48 [label="Control Dep"];
34 -> 50 [label="Control Dep"];
34 -> 51 [label="Control Dep"];
34 -> 52 [label="Control Dep"];
34 -> 53 [label="Control Dep"];
34 -> 54 [label="Control Dep"];
39 -> 36 [label="AST"];
39 -> 35 [label="AST"];
39 -> 37 [label="AST"];
39 -> 38 [label="AST"];
40 -> 39 [label="AST"];
43 -> 45 [label="Data Dep"];
44 -> 43 [label="AST"];
45 -> 50 [label="Define-Use"];
46 -> 45 [label="AST"];
46 -> 41 [label="AST"];
46 -> 44 [label="AST"];
47 -> 66 [label="Define-Use"];
47 -> 75 [label="Define-Use"];
47 -> 77 [label="Define-Use"];
50 -> 47 [label="Data Dep"];
51 -> 47 [label="Data Dep"];
52 -> 47 [label="Data Dep"];
53 -> 47 [label="Data Dep"];
54 -> 47 [label="Data Dep"];
55 -> 49 [label="AST"];
55 -> 50 [label="AST"];
55 -> 48 [label="AST"];
55 -> 51 [label="AST"];
55 -> 52 [label="AST"];
55 -> 53 [label="AST"];
55 -> 54 [label="AST"];
56 -> 47 [label="AST"];
56 -> 55 [label="AST"];
57 -> 46 [label="AST"];
57 -> 56 [label="AST"];
58 -> 34 [label="AST"];
58 -> 40 [label="AST"];
58 -> 57 [label="AST"];
59 -> 58 [label="AST"];
60 -> 14 [label="AST"];
60 -> 20 [label="AST"];
60 -> 59 [label="AST"];
63 -> 65 [label="Define-Use"];
64 -> 63 [label="AST"];
64 -> 61 [label="AST"];
64 -> 62 [label="AST"];
66 -> 67 [label="AST"];
68 -> 66 [label="AST"];
69 -> 65 [label="AST"];
69 -> 68 [label="AST"];
69 -> 100 [label="Control Dep"];
69 -> 82 [label="Control Dep"];
69 -> 80 [label="Control Dep"];
69 -> 73 [label="Control Dep"];
69 -> 77 [label="Control Dep"];
69 -> 75 [label="Control Dep"];
69 -> 76 [label="Control Dep"];
69 -> 78 [label="Control Dep"];
69 -> 79 [label="Control Dep"];
69 -> 94 [label="Control Dep"];
69 -> 83 [label="Control Dep"];
69 -> 93 [label="Control Dep"];
69 -> 84 [label="Control Dep"];
69 -> 86 [label="Control Dep"];
69 -> 87 [label="Control Dep"];
69 -> 92 [label="Control Dep"];
69 -> 88 [label="Control Dep"];
69 -> 90 [label="Control Dep"];
69 -> 91 [label="Control Dep"];
69 -> 99 [label="Control Dep"];
69 -> 95 [label="Control Dep"];
69 -> 97 [label="Control Dep"];
69 -> 98 [label="Control Dep"];
70 -> 76 [label="Define-Use"];
71 -> 70 [label="AST"];
77 -> 75 [label="AST"];
77 -> 76 [label="AST"];
77 -> 81 [label="Data Dep"];
80 -> 74 [label="AST"];
80 -> 77 [label="AST"];
80 -> 73 [label="AST"];
80 -> 78 [label="AST"];
80 -> 79 [label="AST"];
82 -> 81 [label="AST"];
82 -> 72 [label="AST"];
82 -> 80 [label="AST"];
83 -> 98 [label="Define-Use"];
86 -> 83 [label="Data Dep"];
90 -> 83 [label="Data Dep"];
92 -> 89 [label="AST"];
92 -> 90 [label="AST"];
92 -> 88 [label="AST"];
92 -> 91 [label="AST"];
93 -> 85 [label="AST"];
93 -> 86 [label="AST"];
93 -> 84 [label="AST"];
93 -> 87 [label="AST"];
93 -> 92 [label="AST"];
94 -> 83 [label="AST"];
94 -> 93 [label="AST"];
99 -> 96 [label="AST"];
99 -> 97 [label="AST"];
99 -> 95 [label="AST"];
99 -> 98 [label="AST"];
99 -> 104 [label="Action"];
100 -> 82 [label="AST"];
100 -> 94 [label="AST"];
100 -> 99 [label="AST"];
101 -> 64 [label="AST"];
101 -> 69 [label="AST"];
101 -> 71 [label="AST"];
101 -> 100 [label="AST"];
102 -> 13 [label="AST"];
102 -> 60 [label="AST"];
102 -> 101 [label="AST"];
103 -> 1 [label="AST"];
103 -> 0 [label="AST"];
103 -> 2 [label="AST"];
103 -> 4 [label="AST"];
103 -> 6 [label="AST"];
103 -> 8 [label="AST"];
103 -> 102 [label="AST"];
104 -> 105 [label="Action"];
}