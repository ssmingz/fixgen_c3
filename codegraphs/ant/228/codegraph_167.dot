digraph "createParents#?,FTPClient,String" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@createParents" shape=ellipse]
2 [label="2:CtParameterImpl@FTPClient ftp" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@FTPClient" shape=ellipse]
4 [label="2:CtParameterImpl@String filename" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
6 [label="2:CtTypeReferenceImpl@IOException" shape=ellipse]
7 [label="2:CtTypeReferenceImpl@BuildException" shape=ellipse]
8 [label="3:CtTypeReferenceImpl@File" shape=ellipse]
9 [label="3:CtTypeReferenceImpl@File" shape=ellipse]
10 [label="3:CtVariableReadImpl@filename" shape=ellipse]
11 [label="3:CtConstructorCallImpl@new File(filename)" shape=ellipse]
12 [label="3:CtVirtualElement@dir" shape=ellipse]
13 [label="3:CtLocalVariableImpl@File dir = new File(filename)" shape=ellipse]
14 [label="4:CtExecutableReferenceImpl@contains(File)" shape=ellipse]
15 [label="4:CtVirtualElement@contains" shape=ellipse]
16 [label="4:CtFieldReadImpl@dirCache" shape=ellipse]
17 [label="4:CtVariableReadImpl@dir" shape=ellipse]
18 [label="4:CtInvocationImpl@dirCache.contains(dir)" shape=ellipse]
19 [label="5:CtReturnImpl@return" shape=ellipse]
20 [label="4:CtBlockImpl@\{
    return;
\}" shape=ellipse]
21 [label="4:CtIfImpl@if (dirCache.contains(dir)) \{
    return;
\}" shape=ellipse]
22 [label="7:CtTypeReferenceImpl@Vector" shape=ellipse]
23 [label="7:CtTypeReferenceImpl@Vector" shape=ellipse]
24 [label="7:CtConstructorCallImpl@new Vector()" shape=ellipse]
25 [label="7:CtVirtualElement@parents" shape=ellipse]
26 [label="7:CtLocalVariableImpl@Vector parents = new Vector()" shape=ellipse]
27 [label="8:CtTypeReferenceImpl@String" shape=ellipse]
28 [label="8:CtVirtualElement@dirname" shape=ellipse]
29 [label="8:CtLocalVariableImpl@String dirname" shape=ellipse]
30 [label="9:CtVariableWriteImpl@dirname" shape=ellipse]
31 [label="9:CtExecutableReferenceImpl@getParent()" shape=ellipse]
32 [label="9:CtVirtualElement@getParent" shape=ellipse]
33 [label="9:CtVariableReadImpl@dir" shape=ellipse]
34 [label="9:CtInvocationImpl@dir.getParent()" shape=ellipse]
35 [label="9:CtAssignmentImpl@(dirname = dir.getParent())" shape=ellipse]
36 [label="9:CtLiteralImpl@null" shape=ellipse]
37 [label="9:CtBinaryOperatorImpl@(dirname = dir.getParent()) != null" shape=ellipse]
38 [label="10:CtTypeReferenceImpl@File" shape=ellipse]
39 [label="10:CtTypeReferenceImpl@File" shape=ellipse]
40 [label="10:CtVariableReadImpl@dirname" shape=ellipse]
41 [label="10:CtConstructorCallImpl@new File(dirname)" shape=ellipse]
42 [label="10:CtVirtualElement@checkDir" shape=ellipse]
43 [label="10:CtLocalVariableImpl@File checkDir = new File(dirname)" shape=ellipse]
44 [label="11:CtExecutableReferenceImpl@contains(File)" shape=ellipse]
45 [label="11:CtVirtualElement@contains" shape=ellipse]
46 [label="11:CtFieldReadImpl@dirCache" shape=ellipse]
47 [label="11:CtVariableReadImpl@checkDir" shape=ellipse]
48 [label="11:CtInvocationImpl@dirCache.contains(checkDir)" shape=ellipse]
49 [label="12:CtBreakImpl@break" shape=ellipse]
50 [label="11:CtBlockImpl@\{
    break;
\}" shape=ellipse]
51 [label="11:CtIfImpl@if (dirCache.contains(checkDir)) \{
    break;
\}" shape=ellipse]
52 [label="14:CtVariableWriteImpl@dir" shape=ellipse]
53 [label="14:CtVariableReadImpl@checkDir" shape=ellipse]
54 [label="14:CtAssignmentImpl@dir = checkDir" shape=ellipse]
55 [label="15:CtExecutableReferenceImpl@addElement(File)" shape=ellipse]
56 [label="15:CtVirtualElement@addElement" shape=ellipse]
57 [label="15:CtVariableReadImpl@parents" shape=ellipse]
58 [label="15:CtVariableReadImpl@dir" shape=ellipse]
59 [label="15:CtInvocationImpl@parents.addElement(dir)" shape=ellipse]
60 [label="9:CtBlockImpl@\{
    File checkDir = new File(dirname);
    if (dirCache.contains(checkDir)) \{
        break;
    \}
    dir = checkDir;
    parents.addElement(dir);
\}" shape=ellipse]
61 [label="9:CtWhileImpl@while ((dirname = dir.getParent()) != null) \{
    File checkDir = new File(dirname);
    if (dirCache.contains(checkDir)) \{
        break;
    \}
    dir = checkDir;
    parents.addElement(dir);
\} " shape=ellipse]
62 [label="17:CtTypeReferenceImpl@int" shape=ellipse]
63 [label="17:CtExecutableReferenceImpl@size()" shape=ellipse]
64 [label="17:CtVirtualElement@size" shape=ellipse]
65 [label="17:CtVariableReadImpl@parents" shape=ellipse]
66 [label="17:CtInvocationImpl@parents.size()" shape=ellipse]
67 [label="17:CtLiteralImpl@1" shape=ellipse]
68 [label="17:CtBinaryOperatorImpl@parents.size() - 1" shape=ellipse]
69 [label="17:CtVirtualElement@i" shape=ellipse]
70 [label="17:CtLocalVariableImpl@int i = parents.size() - 1" shape=ellipse]
71 [label="18:CtVariableReadImpl@i" shape=ellipse]
72 [label="18:CtLiteralImpl@0" shape=ellipse]
73 [label="18:CtBinaryOperatorImpl@i >= 0" shape=ellipse]
74 [label="19:CtTypeReferenceImpl@String" shape=ellipse]
75 [label="19:CtExecutableReferenceImpl@printWorkingDirectory()" shape=ellipse]
76 [label="19:CtVirtualElement@printWorkingDirectory" shape=ellipse]
77 [label="19:CtVariableReadImpl@ftp" shape=ellipse]
78 [label="19:CtInvocationImpl@ftp.printWorkingDirectory()" shape=ellipse]
79 [label="19:CtVirtualElement@cwd" shape=ellipse]
80 [label="19:CtLocalVariableImpl@String cwd = ftp.printWorkingDirectory()" shape=ellipse]
81 [label="20:CtTypeReferenceImpl@String" shape=ellipse]
82 [label="20:CtExecutableReferenceImpl@getParent()" shape=ellipse]
83 [label="20:CtVirtualElement@getParent" shape=ellipse]
84 [label="20:CtVariableReadImpl@dir" shape=ellipse]
85 [label="20:CtInvocationImpl@dir.getParent()" shape=ellipse]
86 [label="20:CtVirtualElement@parent" shape=ellipse]
87 [label="20:CtLocalVariableImpl@String parent = dir.getParent()" shape=ellipse]
88 [label="21:CtVariableReadImpl@parent" shape=ellipse]
89 [label="21:CtLiteralImpl@null" shape=ellipse]
90 [label="21:CtBinaryOperatorImpl@parent != null" shape=ellipse]
91 [label="22:CtExecutableReferenceImpl@changeWorkingDirectory()" shape=ellipse]
92 [label="22:CtVirtualElement@changeWorkingDirectory" shape=ellipse]
93 [label="22:CtVariableReadImpl@ftp" shape=ellipse]
94 [label="22:CtExecutableReferenceImpl@resolveFile(java.lang.String)" shape=ellipse]
95 [label="22:CtVirtualElement@resolveFile" shape=ellipse]
96 [label="22:CtVariableReadImpl@parent" shape=ellipse]
97 [label="22:CtInvocationImpl@resolveFile(parent)" shape=ellipse]
98 [label="22:CtInvocationImpl@ftp.changeWorkingDirectory(resolveFile(parent))" shape=ellipse]
99 [label="22:CtUnaryOperatorImpl@!ftp.changeWorkingDirectory(resolveFile(parent))" shape=ellipse]
100 [label="23:CtTypeReferenceImpl@BuildException" shape=ellipse]
101 [label="23:CtLiteralImpl@\"could not change to \"" shape=ellipse]
102 [label="23:CtLiteralImpl@\"directory: \"" shape=ellipse]
103 [label="23:CtBinaryOperatorImpl@(\"could not change to \" + \"directory: \")" shape=ellipse]
104 [label="23:CtExecutableReferenceImpl@getReplyString()" shape=ellipse]
105 [label="23:CtVirtualElement@getReplyString" shape=ellipse]
106 [label="23:CtVariableReadImpl@ftp" shape=ellipse]
107 [label="23:CtInvocationImpl@ftp.getReplyString()" shape=ellipse]
108 [label="23:CtBinaryOperatorImpl@(\"could not change to \" + \"directory: \") + ftp.getReplyString()" shape=ellipse]
109 [label="23:CtConstructorCallImpl@new BuildException((\"could not change to \" + \"directory: \") + ftp.getReplyString())" shape=ellipse]
110 [label="23:CtThrowImpl@throw new BuildException((\"could not change to \" + \"directory: \") + ftp.getReplyString())" shape=ellipse]
111 [label="22:CtBlockImpl@\{
    throw new BuildException((\"could not change to \" + \"directory: \") + ftp.getReplyString());
\}" shape=ellipse]
112 [label="22:CtIfImpl@if (!ftp.changeWorkingDirectory(resolveFile(parent))) \{
    throw new BuildException((\"could not change to \" + \"directory: \") + ftp.getReplyString());
\}" shape=ellipse]
113 [label="21:CtBlockImpl@\{
    if (!ftp.changeWorkingDirectory(resolveFile(parent))) \{
        throw new BuildException((\"could not change to \" + \"directory: \") + ftp.getReplyString());
    \}
\}" shape=ellipse]
114 [label="21:CtIfImpl@if (parent != null) \{
    if (!ftp.changeWorkingDirectory(resolveFile(parent))) \{
        throw new BuildException((\"could not change to \" + \"directory: \") + ftp.getReplyString());
    \}
\}" shape=ellipse]
115 [label="26:CtVariableReadImpl@i" shape=ellipse]
116 [label="26:CtLiteralImpl@0" shape=ellipse]
117 [label="26:CtBinaryOperatorImpl@i >= 0" shape=ellipse]
118 [label="27:CtVariableWriteImpl@dir" shape=ellipse]
119 [label="27:CtExecutableReferenceImpl@elementAt(int)" shape=ellipse]
120 [label="27:CtVirtualElement@elementAt" shape=ellipse]
121 [label="27:CtVariableReadImpl@parents" shape=ellipse]
122 [label="27:CtVariableWriteImpl@i" shape=ellipse]
123 [label="27:CtUnaryOperatorImpl@i--" shape=ellipse]
124 [label="27:CtInvocationImpl@((File) (parents.elementAt(i--)))" shape=ellipse]
125 [label="27:CtTypeReferenceImpl@File" shape=ellipse]
126 [label="27:CtAssignmentImpl@dir = ((File) (parents.elementAt(i--)))" shape=ellipse]
127 [label="28:CtExecutableReferenceImpl@changeWorkingDirectory()" shape=ellipse]
128 [label="28:CtVirtualElement@changeWorkingDirectory" shape=ellipse]
129 [label="28:CtVariableReadImpl@ftp" shape=ellipse]
130 [label="28:CtExecutableReferenceImpl@getName()" shape=ellipse]
131 [label="28:CtVirtualElement@getName" shape=ellipse]
132 [label="28:CtVariableReadImpl@dir" shape=ellipse]
133 [label="28:CtInvocationImpl@dir.getName()" shape=ellipse]
134 [label="28:CtInvocationImpl@ftp.changeWorkingDirectory(dir.getName())" shape=ellipse]
135 [label="28:CtUnaryOperatorImpl@!ftp.changeWorkingDirectory(dir.getName())" shape=ellipse]
136 [label="29:CtExecutableReferenceImpl@log(<unknown>,<unknown>)" shape=ellipse]
137 [label="29:CtVirtualElement@log" shape=ellipse]
138 [label="29:CtLiteralImpl@\"creating remote directory \"" shape=ellipse]
139 [label="29:CtExecutableReferenceImpl@resolveFile(<unknown>)" shape=ellipse]
140 [label="29:CtVirtualElement@resolveFile" shape=ellipse]
141 [label="29:CtExecutableReferenceImpl@getPath()" shape=ellipse]
142 [label="29:CtVirtualElement@getPath" shape=ellipse]
143 [label="29:CtVariableReadImpl@dir" shape=ellipse]
144 [label="29:CtInvocationImpl@dir.getPath()" shape=ellipse]
145 [label="29:CtInvocationImpl@resolveFile(dir.getPath())" shape=ellipse]
146 [label="29:CtBinaryOperatorImpl@\"creating remote directory \" + resolveFile(dir.getPath())" shape=ellipse]
147 [label="29:CtTypeAccessImpl@MSG_VERBOSE" shape=ellipse]
148 [label="29:CtInvocationImpl@log(\"creating remote directory \" + resolveFile(dir.getPath()), MSG_VERBOSE)" shape=ellipse]
149 [label="30:CtExecutableReferenceImpl@makeDirectory()" shape=ellipse]
150 [label="30:CtVirtualElement@makeDirectory" shape=ellipse]
151 [label="30:CtVariableReadImpl@ftp" shape=ellipse]
152 [label="30:CtExecutableReferenceImpl@getName()" shape=ellipse]
153 [label="30:CtVirtualElement@getName" shape=ellipse]
154 [label="30:CtVariableReadImpl@dir" shape=ellipse]
155 [label="30:CtInvocationImpl@dir.getName()" shape=ellipse]
156 [label="30:CtInvocationImpl@ftp.makeDirectory(dir.getName())" shape=ellipse]
157 [label="30:CtUnaryOperatorImpl@!ftp.makeDirectory(dir.getName())" shape=ellipse]
158 [label="31:CtExecutableReferenceImpl@handleMkDirFailure(<unknown>)" shape=ellipse]
159 [label="31:CtVirtualElement@handleMkDirFailure" shape=ellipse]
160 [label="31:CtVariableReadImpl@ftp" shape=ellipse]
161 [label="31:CtInvocationImpl@handleMkDirFailure(ftp)" shape=ellipse]
162 [label="30:CtBlockImpl@\{
    handleMkDirFailure(ftp);
\}" shape=ellipse]
163 [label="30:CtIfImpl@if (!ftp.makeDirectory(dir.getName())) \{
    handleMkDirFailure(ftp);
\}" shape=ellipse]
164 [label="33:CtExecutableReferenceImpl@changeWorkingDirectory()" shape=ellipse]
165 [label="33:CtVirtualElement@changeWorkingDirectory" shape=ellipse]
166 [label="33:CtVariableReadImpl@ftp" shape=ellipse]
167 [label="33:CtExecutableReferenceImpl@getName()" shape=ellipse]
168 [label="33:CtVirtualElement@getName" shape=ellipse]
169 [label="33:CtVariableReadImpl@dir" shape=ellipse]
170 [label="33:CtInvocationImpl@dir.getName()" shape=ellipse]
171 [label="33:CtInvocationImpl@ftp.changeWorkingDirectory(dir.getName())" shape=ellipse]
172 [label="33:CtUnaryOperatorImpl@!ftp.changeWorkingDirectory(dir.getName())" shape=ellipse]
173 [label="34:CtTypeReferenceImpl@BuildException" shape=ellipse]
174 [label="35:CtLiteralImpl@\"could not change to \"" shape=ellipse]
175 [label="35:CtLiteralImpl@\"directory: \"" shape=ellipse]
176 [label="35:CtBinaryOperatorImpl@(\"could not change to \" + \"directory: \")" shape=ellipse]
177 [label="35:CtExecutableReferenceImpl@getReplyString()" shape=ellipse]
178 [label="35:CtVirtualElement@getReplyString" shape=ellipse]
179 [label="35:CtVariableReadImpl@ftp" shape=ellipse]
180 [label="35:CtInvocationImpl@ftp.getReplyString()" shape=ellipse]
181 [label="35:CtBinaryOperatorImpl@(\"could not change to \" + \"directory: \") + ftp.getReplyString()" shape=ellipse]
182 [label="34:CtConstructorCallImpl@new BuildException((\"could not change to \" + \"directory: \") + ftp.getReplyString())" shape=ellipse]
183 [label="34:CtThrowImpl@throw new BuildException((\"could not change to \" + \"directory: \") + ftp.getReplyString())" shape=ellipse]
184 [label="33:CtBlockImpl@\{
    throw new BuildException((\"could not change to \" + \"directory: \") + ftp.getReplyString());
\}" shape=ellipse]
185 [label="33:CtIfImpl@if (!ftp.changeWorkingDirectory(dir.getName())) \{
    throw new BuildException((\"could not change to \" + \"directory: \") + ftp.getReplyString());
\}" shape=ellipse]
186 [label="28:CtBlockImpl@\{
    log(\"creating remote directory \" + resolveFile(dir.getPath()), MSG_VERBOSE);
    if (!ftp.makeDirectory(dir.getName())) \{
        handleMkDirFailure(ftp);
    \}
    if (!ftp.changeWorkingDirectory(dir.getName())) \{
        throw new BuildException((\"could not change to \" + \"directory: \") + ftp.getReplyString());
    \}
\}" shape=ellipse]
187 [label="28:CtIfImpl@if (!ftp.changeWorkingDirectory(dir.getName())) \{
    log(\"creating remote directory \" + resolveFile(dir.getPath()), MSG_VERBOSE);
    if (!ftp.makeDirectory(dir.getName())) \{
        handleMkDirFailure(ftp);
    \}
    if (!ftp.changeWorkingDirectory(dir.getName())) \{
        throw new BuildException((\"could not change to \" + \"directory: \") + ftp.getReplyString());
    \}
\}" shape=ellipse]
188 [label="38:CtExecutableReferenceImpl@addElement(File)" shape=ellipse]
189 [label="38:CtVirtualElement@addElement" shape=ellipse]
190 [label="38:CtFieldReadImpl@dirCache" shape=ellipse]
191 [label="38:CtVariableReadImpl@dir" shape=ellipse]
192 [label="38:CtInvocationImpl@dirCache.addElement(dir)" shape=ellipse]
193 [label="26:CtBlockImpl@\{
    dir = ((File) (parents.elementAt(i--)));
    if (!ftp.changeWorkingDirectory(dir.getName())) \{
        log(\"creating remote directory \" + resolveFile(dir.getPath()), MSG_VERBOSE);
        if (!ftp.makeDirectory(dir.getName())) \{
            handleMkDirFailure(ftp);
        \}
        if (!ftp.changeWorkingDirectory(dir.getName())) \{
            throw new BuildException((\"could not change to \" + \"directory: \") + ftp.getReplyString());
        \}
    \}
    dirCache.addElement(dir);
\}" shape=ellipse]
194 [label="26:CtWhileImpl@while (i >= 0) \{
    dir = ((File) (parents.elementAt(i--)));
    if (!ftp.changeWorkingDirectory(dir.getName())) \{
        log(\"creating remote directory \" + resolveFile(dir.getPath()), MSG_VERBOSE);
        if (!ftp.makeDirectory(dir.getName())) \{
            handleMkDirFailure(ftp);
        \}
        if (!ftp.changeWorkingDirectory(dir.getName())) \{
            throw new BuildException((\"could not change to \" + \"directory: \") + ftp.getReplyString());
        \}
    \}
    dirCache.addElement(dir);
\} " shape=ellipse]
195 [label="40:CtExecutableReferenceImpl@changeWorkingDirectory(java.lang.String)" shape=ellipse]
196 [label="40:CtVirtualElement@changeWorkingDirectory" shape=ellipse]
197 [label="40:CtVariableReadImpl@ftp" shape=ellipse]
198 [label="40:CtVariableReadImpl@cwd" shape=ellipse]
199 [label="40:CtInvocationImpl@ftp.changeWorkingDirectory(cwd)" shape=ellipse]
200 [label="18:CtBlockImpl@\{
    String cwd = ftp.printWorkingDirectory();
    String parent = dir.getParent();
    if (parent != null) \{
        if (!ftp.changeWorkingDirectory(resolveFile(parent))) \{
            throw new BuildException((\"could not change to \" + \"directory: \") + ftp.getReplyString());
        \}
    \}
    while (i >= 0) \{
        dir = ((File) (parents.elementAt(i--)));
        if (!ftp.changeWorkingDirectory(dir.getName())) \{
            log(\"creating remote directory \" + resolveFile(dir.getPath()), MSG_VERBOSE);
            if (!ftp.makeDirectory(dir.getName())) \{
                handleMkDirFailure(ftp);
            \}
            if (!ftp.changeWorkingDirectory(dir.getName())) \{
                throw new BuildException((\"could not change to \" + \"directory: \") + ftp.getReplyString());
            \}
        \}
        dirCache.addElement(dir);
    \} 
    ftp.changeWorkingDirectory(cwd);
\}" shape=ellipse]
201 [label="18:CtIfImpl@if (i >= 0) \{
    String cwd = ftp.printWorkingDirectory();
    String parent = dir.getParent();
    if (parent != null) \{
        if (!ftp.changeWorkingDirectory(resolveFile(parent))) \{
            throw new BuildException((\"could not change to \" + \"directory: \") + ftp.getReplyString());
        \}
    \}
    while (i >= 0) \{
        dir = ((File) (parents.elementAt(i--)));
        if (!ftp.changeWorkingDirectory(dir.getName())) \{
            log(\"creating remote directory \" + resolveFile(dir.getPath()), MSG_VERBOSE);
            if (!ftp.makeDirectory(dir.getName())) \{
                handleMkDirFailure(ftp);
            \}
            if (!ftp.changeWorkingDirectory(dir.getName())) \{
                throw new BuildException((\"could not change to \" + \"directory: \") + ftp.getReplyString());
            \}
        \}
        dirCache.addElement(dir);
    \} 
    ftp.changeWorkingDirectory(cwd);
\}" shape=ellipse]
202 [label="2:CtBlockImpl@\{
    File dir = new File(filename);
    if (dirCache.contains(dir)) \{
        return;
    \}
    Vector parents = new Vector();
    String dirname;
    while ((dirname = dir.getParent()) != null) \{
        File checkDir = new File(dirname);
        if (dirCache.contains(checkDir)) \{
            break;
        \}
        dir = checkDir;
        parents.addElement(dir);
    \} 
    int i = parents.size() - 1;
    if (i >= 0) \{
        String cwd = ftp.printWorkingDirectory();
        String parent = dir.getParent();
        if (parent != null) \{
            if (!ftp.changeWorkingDirectory(resolveFile(parent))) \{
                throw new BuildException((\"could not change to \" + \"directory: \") + ftp.getReplyString());
            \}
        \}
        while (i >= 0) \{
            dir = ((File) (parents.elementAt(i--)));
            if (!ftp.changeWorkingDirectory(dir.getName())) \{
                log(\"creating remote directory \" + resolveFile(dir.getPath()), MSG_VERBOSE);
                if (!ftp.makeDirectory(dir.getName())) \{
                    handleMkDirFailure(ftp);
                \}
                if (!ftp.changeWorkingDirectory(dir.getName())) \{
                    throw new BuildException((\"could not change to \" + \"directory: \") + ftp.getReplyString());
                \}
            \}
            dirCache.addElement(dir);
        \} 
        ftp.changeWorkingDirectory(cwd);
    \}
\}" shape=ellipse]
203 [label="2:CtMethodImpl@protected void createParents(FTPClient ftp, String filename) throws IOException, BuildException \{
    File dir = new File(filename);
    if (dirCache.contains(dir)) \{
        return;
    \}
    Vector parents = new Vector();
    String dirname;
    while ((dirname = dir.getParent()) != null) \{
        File checkDir = new File(dirname);
        if (dirCache.contains(checkDir)) \{
            break;
        \}
        dir = checkDir;
        parents.addElement(dir);
    \} 
    int i = parents.size() - 1;
    if (i >= 0) \{
        String cwd = ftp.printWorkingDirectory();
        String parent = dir.getParent();
        if (parent != null) \{
            if (!ftp.changeWorkingDirectory(resolveFile(parent))) \{
                throw new BuildException((\"could not change to \" + \"directory: \") + ftp.getReplyString());
            \}
        \}
        while (i >= 0) \{
            dir = ((File) (parents.elementAt(i--)));
            if (!ftp.changeWorkingDirectory(dir.getName())) \{
                log(\"creating remote directory \" + resolveFile(dir.getPath()), MSG_VERBOSE);
                if (!ftp.makeDirectory(dir.getName())) \{
                    handleMkDirFailure(ftp);
                \}
                if (!ftp.changeWorkingDirectory(dir.getName())) \{
                    throw new BuildException((\"could not change to \" + \"directory: \") + ftp.getReplyString());
                \}
            \}
            dirCache.addElement(dir);
        \} 
        ftp.changeWorkingDirectory(cwd);
    \}
\}" shape=ellipse]
204 [label="38:Update@UPDATE" shape=ellipse]
205 [label="38:CtInvocationImpl@dirCache.add(dir)" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
10 -> 12 [label="Data Dep"];
11 -> 10 [label="AST"];
12 -> 17 [label="Define-Use"];
12 -> 33 [label="Define-Use"];
13 -> 12 [label="AST"];
13 -> 8 [label="AST"];
13 -> 11 [label="AST"];
18 -> 15 [label="AST"];
18 -> 16 [label="AST"];
18 -> 14 [label="AST"];
18 -> 17 [label="AST"];
18 -> 20 [label="Control Dep"];
18 -> 19 [label="Control Dep"];
20 -> 19 [label="AST"];
21 -> 18 [label="AST"];
21 -> 20 [label="AST"];
25 -> 57 [label="Define-Use"];
25 -> 65 [label="Define-Use"];
25 -> 121 [label="Define-Use"];
26 -> 25 [label="AST"];
26 -> 22 [label="AST"];
26 -> 24 [label="AST"];
29 -> 28 [label="AST"];
29 -> 27 [label="AST"];
30 -> 40 [label="Define-Use"];
33 -> 30 [label="Data Dep"];
34 -> 32 [label="AST"];
34 -> 33 [label="AST"];
34 -> 31 [label="AST"];
35 -> 30 [label="AST"];
35 -> 34 [label="AST"];
37 -> 35 [label="AST"];
37 -> 36 [label="AST"];
37 -> 60 [label="Control Dep"];
37 -> 43 [label="Control Dep"];
37 -> 41 [label="Control Dep"];
37 -> 40 [label="Control Dep"];
37 -> 51 [label="Control Dep"];
37 -> 48 [label="Control Dep"];
37 -> 44 [label="Control Dep"];
37 -> 46 [label="Control Dep"];
37 -> 47 [label="Control Dep"];
37 -> 54 [label="Control Dep"];
37 -> 52 [label="Control Dep"];
37 -> 53 [label="Control Dep"];
37 -> 59 [label="Control Dep"];
37 -> 55 [label="Control Dep"];
37 -> 57 [label="Control Dep"];
37 -> 58 [label="Control Dep"];
40 -> 42 [label="Data Dep"];
41 -> 40 [label="AST"];
42 -> 47 [label="Define-Use"];
42 -> 53 [label="Define-Use"];
43 -> 42 [label="AST"];
43 -> 38 [label="AST"];
43 -> 41 [label="AST"];
48 -> 45 [label="AST"];
48 -> 46 [label="AST"];
48 -> 44 [label="AST"];
48 -> 47 [label="AST"];
48 -> 50 [label="Control Dep"];
48 -> 49 [label="Control Dep"];
50 -> 49 [label="AST"];
51 -> 48 [label="AST"];
51 -> 50 [label="AST"];
52 -> 58 [label="Define-Use"];
52 -> 84 [label="Define-Use"];
53 -> 52 [label="Data Dep"];
54 -> 52 [label="AST"];
54 -> 53 [label="AST"];
59 -> 56 [label="AST"];
59 -> 57 [label="AST"];
59 -> 55 [label="AST"];
59 -> 58 [label="AST"];
60 -> 43 [label="AST"];
60 -> 51 [label="AST"];
60 -> 54 [label="AST"];
60 -> 59 [label="AST"];
61 -> 37 [label="AST"];
61 -> 60 [label="AST"];
65 -> 69 [label="Data Dep"];
66 -> 64 [label="AST"];
66 -> 65 [label="AST"];
66 -> 63 [label="AST"];
68 -> 66 [label="AST"];
68 -> 67 [label="AST"];
69 -> 71 [label="Define-Use"];
69 -> 115 [label="Define-Use"];
70 -> 69 [label="AST"];
70 -> 62 [label="AST"];
70 -> 68 [label="AST"];
73 -> 71 [label="AST"];
73 -> 72 [label="AST"];
73 -> 200 [label="Control Dep"];
73 -> 80 [label="Control Dep"];
73 -> 78 [label="Control Dep"];
73 -> 75 [label="Control Dep"];
73 -> 77 [label="Control Dep"];
73 -> 87 [label="Control Dep"];
73 -> 85 [label="Control Dep"];
73 -> 82 [label="Control Dep"];
73 -> 84 [label="Control Dep"];
73 -> 114 [label="Control Dep"];
73 -> 90 [label="Control Dep"];
73 -> 88 [label="Control Dep"];
73 -> 89 [label="Control Dep"];
73 -> 194 [label="Control Dep"];
73 -> 117 [label="Control Dep"];
73 -> 115 [label="Control Dep"];
73 -> 116 [label="Control Dep"];
73 -> 199 [label="Control Dep"];
73 -> 195 [label="Control Dep"];
73 -> 197 [label="Control Dep"];
73 -> 198 [label="Control Dep"];
77 -> 79 [label="Data Dep"];
78 -> 76 [label="AST"];
78 -> 77 [label="AST"];
78 -> 75 [label="AST"];
79 -> 198 [label="Define-Use"];
80 -> 79 [label="AST"];
80 -> 74 [label="AST"];
80 -> 78 [label="AST"];
84 -> 86 [label="Data Dep"];
85 -> 83 [label="AST"];
85 -> 84 [label="AST"];
85 -> 82 [label="AST"];
86 -> 88 [label="Define-Use"];
86 -> 96 [label="Define-Use"];
87 -> 86 [label="AST"];
87 -> 81 [label="AST"];
87 -> 85 [label="AST"];
90 -> 88 [label="AST"];
90 -> 89 [label="AST"];
90 -> 113 [label="Control Dep"];
90 -> 112 [label="Control Dep"];
90 -> 99 [label="Control Dep"];
90 -> 98 [label="Control Dep"];
90 -> 91 [label="Control Dep"];
90 -> 93 [label="Control Dep"];
90 -> 97 [label="Control Dep"];
90 -> 94 [label="Control Dep"];
90 -> 96 [label="Control Dep"];
97 -> 95 [label="AST"];
97 -> 94 [label="AST"];
97 -> 96 [label="AST"];
98 -> 92 [label="AST"];
98 -> 93 [label="AST"];
98 -> 91 [label="AST"];
98 -> 97 [label="AST"];
99 -> 98 [label="AST"];
99 -> 111 [label="Control Dep"];
99 -> 110 [label="Control Dep"];
99 -> 109 [label="Control Dep"];
99 -> 108 [label="Control Dep"];
99 -> 103 [label="Control Dep"];
99 -> 101 [label="Control Dep"];
99 -> 102 [label="Control Dep"];
99 -> 107 [label="Control Dep"];
99 -> 104 [label="Control Dep"];
99 -> 106 [label="Control Dep"];
103 -> 101 [label="AST"];
103 -> 102 [label="AST"];
107 -> 105 [label="AST"];
107 -> 106 [label="AST"];
107 -> 104 [label="AST"];
108 -> 103 [label="AST"];
108 -> 107 [label="AST"];
109 -> 108 [label="AST"];
110 -> 109 [label="AST"];
111 -> 110 [label="AST"];
112 -> 99 [label="AST"];
112 -> 111 [label="AST"];
113 -> 112 [label="AST"];
114 -> 90 [label="AST"];
114 -> 113 [label="AST"];
117 -> 115 [label="AST"];
117 -> 116 [label="AST"];
117 -> 193 [label="Control Dep"];
117 -> 126 [label="Control Dep"];
117 -> 118 [label="Control Dep"];
117 -> 124 [label="Control Dep"];
117 -> 119 [label="Control Dep"];
117 -> 121 [label="Control Dep"];
117 -> 123 [label="Control Dep"];
117 -> 122 [label="Control Dep"];
117 -> 187 [label="Control Dep"];
117 -> 135 [label="Control Dep"];
117 -> 134 [label="Control Dep"];
117 -> 127 [label="Control Dep"];
117 -> 129 [label="Control Dep"];
117 -> 133 [label="Control Dep"];
117 -> 130 [label="Control Dep"];
117 -> 132 [label="Control Dep"];
117 -> 192 [label="Control Dep"];
117 -> 188 [label="Control Dep"];
117 -> 190 [label="Control Dep"];
117 -> 191 [label="Control Dep"];
118 -> 132 [label="Define-Use"];
118 -> 143 [label="Define-Use"];
118 -> 154 [label="Define-Use"];
118 -> 169 [label="Define-Use"];
118 -> 191 [label="Define-Use"];
121 -> 118 [label="Data Dep"];
123 -> 122 [label="AST"];
124 -> 120 [label="AST"];
124 -> 125 [label="AST"];
124 -> 121 [label="AST"];
124 -> 119 [label="AST"];
124 -> 123 [label="AST"];
126 -> 118 [label="AST"];
126 -> 124 [label="AST"];
133 -> 131 [label="AST"];
133 -> 132 [label="AST"];
133 -> 130 [label="AST"];
134 -> 128 [label="AST"];
134 -> 129 [label="AST"];
134 -> 127 [label="AST"];
134 -> 133 [label="AST"];
135 -> 134 [label="AST"];
135 -> 186 [label="Control Dep"];
135 -> 148 [label="Control Dep"];
135 -> 136 [label="Control Dep"];
135 -> 146 [label="Control Dep"];
135 -> 138 [label="Control Dep"];
135 -> 145 [label="Control Dep"];
135 -> 139 [label="Control Dep"];
135 -> 144 [label="Control Dep"];
135 -> 141 [label="Control Dep"];
135 -> 143 [label="Control Dep"];
135 -> 147 [label="Control Dep"];
135 -> 163 [label="Control Dep"];
135 -> 157 [label="Control Dep"];
135 -> 156 [label="Control Dep"];
135 -> 149 [label="Control Dep"];
135 -> 151 [label="Control Dep"];
135 -> 155 [label="Control Dep"];
135 -> 152 [label="Control Dep"];
135 -> 154 [label="Control Dep"];
135 -> 185 [label="Control Dep"];
135 -> 172 [label="Control Dep"];
135 -> 171 [label="Control Dep"];
135 -> 164 [label="Control Dep"];
135 -> 166 [label="Control Dep"];
135 -> 170 [label="Control Dep"];
135 -> 167 [label="Control Dep"];
135 -> 169 [label="Control Dep"];
144 -> 142 [label="AST"];
144 -> 143 [label="AST"];
144 -> 141 [label="AST"];
145 -> 140 [label="AST"];
145 -> 139 [label="AST"];
145 -> 144 [label="AST"];
146 -> 138 [label="AST"];
146 -> 145 [label="AST"];
148 -> 137 [label="AST"];
148 -> 136 [label="AST"];
148 -> 146 [label="AST"];
148 -> 147 [label="AST"];
155 -> 153 [label="AST"];
155 -> 154 [label="AST"];
155 -> 152 [label="AST"];
156 -> 150 [label="AST"];
156 -> 151 [label="AST"];
156 -> 149 [label="AST"];
156 -> 155 [label="AST"];
157 -> 156 [label="AST"];
157 -> 162 [label="Control Dep"];
157 -> 161 [label="Control Dep"];
157 -> 158 [label="Control Dep"];
157 -> 160 [label="Control Dep"];
161 -> 159 [label="AST"];
161 -> 158 [label="AST"];
161 -> 160 [label="AST"];
162 -> 161 [label="AST"];
163 -> 157 [label="AST"];
163 -> 162 [label="AST"];
170 -> 168 [label="AST"];
170 -> 169 [label="AST"];
170 -> 167 [label="AST"];
171 -> 165 [label="AST"];
171 -> 166 [label="AST"];
171 -> 164 [label="AST"];
171 -> 170 [label="AST"];
172 -> 171 [label="AST"];
172 -> 184 [label="Control Dep"];
172 -> 183 [label="Control Dep"];
172 -> 182 [label="Control Dep"];
172 -> 181 [label="Control Dep"];
172 -> 176 [label="Control Dep"];
172 -> 174 [label="Control Dep"];
172 -> 175 [label="Control Dep"];
172 -> 180 [label="Control Dep"];
172 -> 177 [label="Control Dep"];
172 -> 179 [label="Control Dep"];
176 -> 174 [label="AST"];
176 -> 175 [label="AST"];
180 -> 178 [label="AST"];
180 -> 179 [label="AST"];
180 -> 177 [label="AST"];
181 -> 176 [label="AST"];
181 -> 180 [label="AST"];
182 -> 181 [label="AST"];
183 -> 182 [label="AST"];
184 -> 183 [label="AST"];
185 -> 172 [label="AST"];
185 -> 184 [label="AST"];
186 -> 148 [label="AST"];
186 -> 163 [label="AST"];
186 -> 185 [label="AST"];
187 -> 135 [label="AST"];
187 -> 186 [label="AST"];
192 -> 189 [label="AST"];
192 -> 190 [label="AST"];
192 -> 188 [label="AST"];
192 -> 191 [label="AST"];
192 -> 204 [label="Action"];
193 -> 126 [label="AST"];
193 -> 187 [label="AST"];
193 -> 192 [label="AST"];
194 -> 117 [label="AST"];
194 -> 193 [label="AST"];
199 -> 196 [label="AST"];
199 -> 197 [label="AST"];
199 -> 195 [label="AST"];
199 -> 198 [label="AST"];
200 -> 80 [label="AST"];
200 -> 87 [label="AST"];
200 -> 114 [label="AST"];
200 -> 194 [label="AST"];
200 -> 199 [label="AST"];
201 -> 73 [label="AST"];
201 -> 200 [label="AST"];
202 -> 13 [label="AST"];
202 -> 21 [label="AST"];
202 -> 26 [label="AST"];
202 -> 29 [label="AST"];
202 -> 61 [label="AST"];
202 -> 70 [label="AST"];
202 -> 201 [label="AST"];
203 -> 1 [label="AST"];
203 -> 0 [label="AST"];
203 -> 2 [label="AST"];
203 -> 4 [label="AST"];
203 -> 6 [label="AST"];
203 -> 7 [label="AST"];
203 -> 202 [label="AST"];
204 -> 205 [label="Action"];
}