digraph "setFiles#?,String" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@setFiles" shape=ellipse]
2 [label="2:CtParameterImpl@String filenames" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
4 [label="3:CtExecutableReferenceImpl@checkAttributesAllowed()" shape=ellipse]
5 [label="3:CtVirtualElement@checkAttributesAllowed" shape=ellipse]
6 [label="3:CtInvocationImpl@checkAttributesAllowed()" shape=ellipse]
7 [label="4:CtVariableReadImpl@filenames" shape=ellipse]
8 [label="4:CtLiteralImpl@null" shape=ellipse]
9 [label="4:CtBinaryOperatorImpl@(filenames != null)" shape=ellipse]
10 [label="4:CtExecutableReferenceImpl@length()" shape=ellipse]
11 [label="4:CtVirtualElement@length" shape=ellipse]
12 [label="4:CtVariableReadImpl@filenames" shape=ellipse]
13 [label="4:CtInvocationImpl@filenames.length()" shape=ellipse]
14 [label="4:CtLiteralImpl@0" shape=ellipse]
15 [label="4:CtBinaryOperatorImpl@(filenames.length() > 0)" shape=ellipse]
16 [label="4:CtBinaryOperatorImpl@(filenames != null) && (filenames.length() > 0)" shape=ellipse]
17 [label="5:CtTypeReferenceImpl@StringTokenizer" shape=ellipse]
18 [label="5:CtTypeReferenceImpl@StringTokenizer" shape=ellipse]
19 [label="5:CtVariableReadImpl@filenames" shape=ellipse]
20 [label="5:CtLiteralImpl@\", \t\n\r\f\"" shape=ellipse]
21 [label="5:CtLiteralImpl@false" shape=ellipse]
22 [label="5:CtConstructorCallImpl@new StringTokenizer(filenames, \", \t\n\r\f\", false)" shape=ellipse]
23 [label="5:CtVirtualElement@tok" shape=ellipse]
24 [label="5:CtLocalVariableImpl@StringTokenizer tok = new StringTokenizer(filenames, \", \t\n\r\f\", false)" shape=ellipse]
25 [label="6:CtExecutableReferenceImpl@hasMoreTokens()" shape=ellipse]
26 [label="6:CtVirtualElement@hasMoreTokens" shape=ellipse]
27 [label="6:CtVariableReadImpl@tok" shape=ellipse]
28 [label="6:CtInvocationImpl@tok.hasMoreTokens()" shape=ellipse]
29 [label="7:CtExecutableReferenceImpl@addElement()" shape=ellipse]
30 [label="7:CtVirtualElement@addElement" shape=ellipse]
31 [label="7:CtThisAccessImpl@this" shape=ellipse]
32 [label="7:CtFieldReadImpl@this.filenames" shape=ellipse]
33 [label="7:CtExecutableReferenceImpl@nextToken()" shape=ellipse]
34 [label="7:CtVirtualElement@nextToken" shape=ellipse]
35 [label="7:CtVariableReadImpl@tok" shape=ellipse]
36 [label="7:CtInvocationImpl@tok.nextToken()" shape=ellipse]
37 [label="7:CtInvocationImpl@this.filenames.addElement(tok.nextToken())" shape=ellipse]
38 [label="6:CtBlockImpl@\{
    this.filenames.addElement(tok.nextToken());
\}" shape=ellipse]
39 [label="6:CtWhileImpl@while (tok.hasMoreTokens()) \{
    this.filenames.addElement(tok.nextToken());
\} " shape=ellipse]
40 [label="4:CtBlockImpl@\{
    StringTokenizer tok = new StringTokenizer(filenames, \", \t\n\r\f\", false);
    while (tok.hasMoreTokens()) \{
        this.filenames.addElement(tok.nextToken());
    \} 
\}" shape=ellipse]
41 [label="4:CtIfImpl@if ((filenames != null) && (filenames.length() > 0)) \{
    StringTokenizer tok = new StringTokenizer(filenames, \", \t\n\r\f\", false);
    while (tok.hasMoreTokens()) \{
        this.filenames.addElement(tok.nextToken());
    \} 
\}" shape=ellipse]
42 [label="2:CtBlockImpl@\{
    checkAttributesAllowed();
    if ((filenames != null) && (filenames.length() > 0)) \{
        StringTokenizer tok = new StringTokenizer(filenames, \", \t\n\r\f\", false);
        while (tok.hasMoreTokens()) \{
            this.filenames.addElement(tok.nextToken());
        \} 
    \}
\}" shape=ellipse]
43 [label="2:CtMethodImpl@public void setFiles(String filenames) \{
    checkAttributesAllowed();
    if ((filenames != null) && (filenames.length() > 0)) \{
        StringTokenizer tok = new StringTokenizer(filenames, \", \t\n\r\f\", false);
        while (tok.hasMoreTokens()) \{
            this.filenames.addElement(tok.nextToken());
        \} 
    \}
\}" shape=ellipse]
44 [label="7:Update@UPDATE" shape=ellipse]
45 [label="7:CtInvocationImpl@this.filenames.add(tok.nextToken())" shape=ellipse]
2 -> 3 [label="AST"];
6 -> 5 [label="AST"];
6 -> 4 [label="AST"];
9 -> 7 [label="AST"];
9 -> 8 [label="AST"];
13 -> 11 [label="AST"];
13 -> 12 [label="AST"];
13 -> 10 [label="AST"];
15 -> 13 [label="AST"];
15 -> 14 [label="AST"];
16 -> 9 [label="AST"];
16 -> 15 [label="AST"];
16 -> 40 [label="Control Dep"];
16 -> 24 [label="Control Dep"];
16 -> 22 [label="Control Dep"];
16 -> 19 [label="Control Dep"];
16 -> 20 [label="Control Dep"];
16 -> 21 [label="Control Dep"];
16 -> 39 [label="Control Dep"];
16 -> 28 [label="Control Dep"];
16 -> 25 [label="Control Dep"];
16 -> 27 [label="Control Dep"];
19 -> 23 [label="Data Dep"];
22 -> 19 [label="AST"];
22 -> 20 [label="AST"];
22 -> 21 [label="AST"];
23 -> 27 [label="Define-Use"];
23 -> 35 [label="Define-Use"];
24 -> 23 [label="AST"];
24 -> 17 [label="AST"];
24 -> 22 [label="AST"];
28 -> 26 [label="AST"];
28 -> 27 [label="AST"];
28 -> 25 [label="AST"];
28 -> 38 [label="Control Dep"];
28 -> 37 [label="Control Dep"];
28 -> 29 [label="Control Dep"];
28 -> 32 [label="Control Dep"];
28 -> 31 [label="Control Dep"];
28 -> 36 [label="Control Dep"];
28 -> 33 [label="Control Dep"];
28 -> 35 [label="Control Dep"];
32 -> 31 [label="AST"];
36 -> 34 [label="AST"];
36 -> 35 [label="AST"];
36 -> 33 [label="AST"];
37 -> 30 [label="AST"];
37 -> 32 [label="AST"];
37 -> 29 [label="AST"];
37 -> 36 [label="AST"];
37 -> 44 [label="Action"];
38 -> 37 [label="AST"];
39 -> 28 [label="AST"];
39 -> 38 [label="AST"];
40 -> 24 [label="AST"];
40 -> 39 [label="AST"];
41 -> 16 [label="AST"];
41 -> 40 [label="AST"];
42 -> 6 [label="AST"];
42 -> 41 [label="AST"];
43 -> 1 [label="AST"];
43 -> 0 [label="AST"];
43 -> 2 [label="AST"];
43 -> 42 [label="AST"];
44 -> 45 [label="Action"];
}