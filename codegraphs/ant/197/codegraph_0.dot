digraph "getNestedCreator#?,Project,Object,String" {
0 [label="2:CtTypeReferenceImpl@NestedCreator" shape=ellipse]
1 [label="2:CtVirtualElement@getNestedCreator" shape=ellipse]
2 [label="2:CtParameterImpl@Project project" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@Project" shape=ellipse]
4 [label="2:CtParameterImpl@Object parent" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@Object" shape=ellipse]
6 [label="2:CtParameterImpl@String elementName" shape=ellipse]
7 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
8 [label="3:CtTypeReferenceImpl@BuildException" shape=ellipse]
9 [label="4:CtTypeReferenceImpl@NestedCreator" shape=ellipse]
10 [label="4:CtExecutableReferenceImpl@get(java.lang.String)" shape=ellipse]
11 [label="4:CtVirtualElement@get" shape=ellipse]
12 [label="4:CtFieldReadImpl@nestedCreators" shape=ellipse]
13 [label="4:CtVariableReadImpl@elementName" shape=ellipse]
14 [label="4:CtInvocationImpl@((NestedCreator) (nestedCreators.get(elementName)))" shape=ellipse]
15 [label="4:CtTypeReferenceImpl@NestedCreator" shape=ellipse]
16 [label="4:CtVirtualElement@nc" shape=ellipse]
17 [label="4:CtLocalVariableImpl@NestedCreator nc = ((NestedCreator) (nestedCreators.get(elementName)))" shape=ellipse]
18 [label="5:CtVariableReadImpl@nc" shape=ellipse]
19 [label="5:CtLiteralImpl@null" shape=ellipse]
20 [label="5:CtBinaryOperatorImpl@nc == null" shape=ellipse]
21 [label="6:CtVariableWriteImpl@nc" shape=ellipse]
22 [label="6:CtExecutableReferenceImpl@createAddTypeCreator(<unknown>,java.lang.Object,java.lang.String)" shape=ellipse]
23 [label="6:CtVirtualElement@createAddTypeCreator" shape=ellipse]
24 [label="6:CtVariableReadImpl@project" shape=ellipse]
25 [label="6:CtVariableReadImpl@parent" shape=ellipse]
26 [label="6:CtVariableReadImpl@elementName" shape=ellipse]
27 [label="6:CtInvocationImpl@createAddTypeCreator(project, parent, elementName)" shape=ellipse]
28 [label="6:CtAssignmentImpl@nc = createAddTypeCreator(project, parent, elementName)" shape=ellipse]
29 [label="5:CtBlockImpl@\{
    nc = createAddTypeCreator(project, parent, elementName);
\}" shape=ellipse]
30 [label="5:CtIfImpl@if (nc == null) \{
    nc = createAddTypeCreator(project, parent, elementName);
\}" shape=ellipse]
31 [label="8:CtVariableReadImpl@nc" shape=ellipse]
32 [label="8:CtLiteralImpl@null" shape=ellipse]
33 [label="8:CtBinaryOperatorImpl@(nc == null)" shape=ellipse]
34 [label="8:CtVariableReadImpl@parent" shape=ellipse]
35 [label="8:CtTypeAccessImpl@DynamicConfigurator" shape=ellipse]
36 [label="8:CtTypeReferenceImpl@DynamicConfigurator" shape=ellipse]
37 [label="8:CtBinaryOperatorImpl@(parent instanceof DynamicConfigurator)" shape=ellipse]
38 [label="8:CtBinaryOperatorImpl@(nc == null) && (parent instanceof DynamicConfigurator)" shape=ellipse]
39 [label="9:CtTypeReferenceImpl@DynamicConfigurator" shape=ellipse]
40 [label="9:CtVariableReadImpl@((DynamicConfigurator) (parent))" shape=ellipse]
41 [label="9:CtTypeReferenceImpl@DynamicConfigurator" shape=ellipse]
42 [label="9:CtVirtualElement@dc" shape=ellipse]
43 [label="9:CtLocalVariableImpl@DynamicConfigurator dc = ((DynamicConfigurator) (parent))" shape=ellipse]
44 [label="10:CtTypeReferenceImpl@Object" shape=ellipse]
45 [label="10:CtExecutableReferenceImpl@createDynamicElement(java.lang.String)" shape=ellipse]
46 [label="10:CtVirtualElement@createDynamicElement" shape=ellipse]
47 [label="10:CtVariableReadImpl@dc" shape=ellipse]
48 [label="10:CtVariableReadImpl@elementName" shape=ellipse]
49 [label="10:CtInvocationImpl@dc.createDynamicElement(elementName)" shape=ellipse]
50 [label="10:CtVirtualElement@nestedElement" shape=ellipse]
51 [label="10:CtLocalVariableImpl@final Object nestedElement = dc.createDynamicElement(elementName)" shape=ellipse]
52 [label="11:CtVariableReadImpl@nestedElement" shape=ellipse]
53 [label="11:CtLiteralImpl@null" shape=ellipse]
54 [label="11:CtBinaryOperatorImpl@nestedElement != null" shape=ellipse]
55 [label="12:CtVariableWriteImpl@nc" shape=ellipse]
56 [label="13:CtTypeReferenceImpl@NestedCreator" shape=ellipse]
57 [label="13:CtNewClassImpl@new NestedCreator() \{
    public boolean isPolyMorphic() \{
        return false;
    \}

    public Class getElementClass() \{
        return null;
    \}

    public Object create(Project project, Object parent, Object ignore) \{
        return nestedElement;
    \}

    public void store(Object parent, Object child) \{
    \}
\}" shape=ellipse]
58 [label="13:CtClassImpl@ \{
    public boolean isPolyMorphic() \{
        return false;
    \}

    public Class getElementClass() \{
        return null;
    \}

    public Object create(Project project, Object parent, Object ignore) \{
        return nestedElement;
    \}

    public void store(Object parent, Object child) \{
    \}
\}" shape=ellipse]
59 [label="12:CtAssignmentImpl@nc = new NestedCreator() \{
    public boolean isPolyMorphic() \{
        return false;
    \}

    public Class getElementClass() \{
        return null;
    \}

    public Object create(Project project, Object parent, Object ignore) \{
        return nestedElement;
    \}

    public void store(Object parent, Object child) \{
    \}
\}" shape=ellipse]
60 [label="11:CtBlockImpl@\{
    nc = new NestedCreator() \{
        public boolean isPolyMorphic() \{
            return false;
        \}

        public Class getElementClass() \{
            return null;
        \}

        public Object create(Project project, Object parent, Object ignore) \{
            return nestedElement;
        \}

        public void store(Object parent, Object child) \{
        \}
    \};
\}" shape=ellipse]
61 [label="11:CtIfImpl@if (nestedElement != null) \{
    nc = new NestedCreator() \{
        public boolean isPolyMorphic() \{
            return false;
        \}

        public Class getElementClass() \{
            return null;
        \}

        public Object create(Project project, Object parent, Object ignore) \{
            return nestedElement;
        \}

        public void store(Object parent, Object child) \{
        \}
    \};
\}" shape=ellipse]
62 [label="8:CtBlockImpl@\{
    DynamicConfigurator dc = ((DynamicConfigurator) (parent));
    final Object nestedElement = dc.createDynamicElement(elementName);
    if (nestedElement != null) \{
        nc = new NestedCreator() \{
            public boolean isPolyMorphic() \{
                return false;
            \}

            public Class getElementClass() \{
                return null;
            \}

            public Object create(Project project, Object parent, Object ignore) \{
                return nestedElement;
            \}

            public void store(Object parent, Object child) \{
            \}
        \};
    \}
\}" shape=ellipse]
63 [label="8:CtIfImpl@if ((nc == null) && (parent instanceof DynamicConfigurator)) \{
    DynamicConfigurator dc = ((DynamicConfigurator) (parent));
    final Object nestedElement = dc.createDynamicElement(elementName);
    if (nestedElement != null) \{
        nc = new NestedCreator() \{
            public boolean isPolyMorphic() \{
                return false;
            \}

            public Class getElementClass() \{
                return null;
            \}

            public Object create(Project project, Object parent, Object ignore) \{
                return nestedElement;
            \}

            public void store(Object parent, Object child) \{
            \}
        \};
    \}
\}" shape=ellipse]
64 [label="30:CtVariableReadImpl@nc" shape=ellipse]
65 [label="30:CtLiteralImpl@null" shape=ellipse]
66 [label="30:CtBinaryOperatorImpl@nc == null" shape=ellipse]
67 [label="31:CtExecutableReferenceImpl@throwNotSupported(<unknown>,java.lang.Object,java.lang.String)" shape=ellipse]
68 [label="31:CtVirtualElement@throwNotSupported" shape=ellipse]
69 [label="31:CtVariableReadImpl@project" shape=ellipse]
70 [label="31:CtVariableReadImpl@parent" shape=ellipse]
71 [label="31:CtVariableReadImpl@elementName" shape=ellipse]
72 [label="31:CtInvocationImpl@throwNotSupported(project, parent, elementName)" shape=ellipse]
73 [label="30:CtBlockImpl@\{
    throwNotSupported(project, parent, elementName);
\}" shape=ellipse]
74 [label="30:CtIfImpl@if (nc == null) \{
    throwNotSupported(project, parent, elementName);
\}" shape=ellipse]
75 [label="33:CtVariableReadImpl@nc" shape=ellipse]
76 [label="33:CtReturnImpl@return nc" shape=ellipse]
77 [label="3:CtBlockImpl@\{
    NestedCreator nc = ((NestedCreator) (nestedCreators.get(elementName)));
    if (nc == null) \{
        nc = createAddTypeCreator(project, parent, elementName);
    \}
    if ((nc == null) && (parent instanceof DynamicConfigurator)) \{
        DynamicConfigurator dc = ((DynamicConfigurator) (parent));
        final Object nestedElement = dc.createDynamicElement(elementName);
        if (nestedElement != null) \{
            nc = new NestedCreator() \{
                public boolean isPolyMorphic() \{
                    return false;
                \}

                public Class getElementClass() \{
                    return null;
                \}

                public Object create(Project project, Object parent, Object ignore) \{
                    return nestedElement;
                \}

                public void store(Object parent, Object child) \{
                \}
            \};
        \}
    \}
    if (nc == null) \{
        throwNotSupported(project, parent, elementName);
    \}
    return nc;
\}" shape=ellipse]
78 [label="2:CtMethodImpl@private NestedCreator getNestedCreator(Project project, Object parent, String elementName) throws BuildException \{
    NestedCreator nc = ((NestedCreator) (nestedCreators.get(elementName)));
    if (nc == null) \{
        nc = createAddTypeCreator(project, parent, elementName);
    \}
    if ((nc == null) && (parent instanceof DynamicConfigurator)) \{
        DynamicConfigurator dc = ((DynamicConfigurator) (parent));
        final Object nestedElement = dc.createDynamicElement(elementName);
        if (nestedElement != null) \{
            nc = new NestedCreator() \{
                public boolean isPolyMorphic() \{
                    return false;
                \}

                public Class getElementClass() \{
                    return null;
                \}

                public Object create(Project project, Object parent, Object ignore) \{
                    return nestedElement;
                \}

                public void store(Object parent, Object child) \{
                \}
            \};
        \}
    \}
    if (nc == null) \{
        throwNotSupported(project, parent, elementName);
    \}
    return nc;
\}" shape=ellipse]
79 [label="4:Insert@INSERT" shape=ellipse]
80 [label="4:CtInvocationImpl@elementName.toLowerCase(US)" shape=ellipse]
81 [label="4:Move@MOVE" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
6 -> 7 [label="AST"];
12 -> 16 [label="Data Dep"];
13 -> 16 [label="Data Dep"];
13 -> 81 [label="Action"];
14 -> 11 [label="AST"];
14 -> 15 [label="AST"];
14 -> 12 [label="AST"];
14 -> 10 [label="AST"];
14 -> 13 [label="AST"];
14 -> 79 [label="Action"];
16 -> 18 [label="Define-Use"];
16 -> 31 [label="Define-Use"];
16 -> 64 [label="Define-Use"];
16 -> 75 [label="Define-Use"];
17 -> 16 [label="AST"];
17 -> 9 [label="AST"];
17 -> 14 [label="AST"];
20 -> 18 [label="AST"];
20 -> 19 [label="AST"];
20 -> 29 [label="Control Dep"];
20 -> 28 [label="Control Dep"];
20 -> 21 [label="Control Dep"];
20 -> 27 [label="Control Dep"];
20 -> 22 [label="Control Dep"];
20 -> 24 [label="Control Dep"];
20 -> 25 [label="Control Dep"];
20 -> 26 [label="Control Dep"];
21 -> 31 [label="Define-Use"];
21 -> 64 [label="Define-Use"];
21 -> 75 [label="Define-Use"];
24 -> 21 [label="Data Dep"];
25 -> 21 [label="Data Dep"];
26 -> 21 [label="Data Dep"];
27 -> 23 [label="AST"];
27 -> 22 [label="AST"];
27 -> 24 [label="AST"];
27 -> 25 [label="AST"];
27 -> 26 [label="AST"];
28 -> 21 [label="AST"];
28 -> 27 [label="AST"];
29 -> 28 [label="AST"];
30 -> 20 [label="AST"];
30 -> 29 [label="AST"];
33 -> 31 [label="AST"];
33 -> 32 [label="AST"];
35 -> 36 [label="AST"];
37 -> 34 [label="AST"];
37 -> 35 [label="AST"];
38 -> 33 [label="AST"];
38 -> 37 [label="AST"];
38 -> 62 [label="Control Dep"];
38 -> 43 [label="Control Dep"];
38 -> 40 [label="Control Dep"];
38 -> 51 [label="Control Dep"];
38 -> 49 [label="Control Dep"];
38 -> 45 [label="Control Dep"];
38 -> 47 [label="Control Dep"];
38 -> 48 [label="Control Dep"];
38 -> 61 [label="Control Dep"];
38 -> 54 [label="Control Dep"];
38 -> 52 [label="Control Dep"];
38 -> 53 [label="Control Dep"];
40 -> 41 [label="AST"];
40 -> 42 [label="Data Dep"];
42 -> 47 [label="Define-Use"];
43 -> 42 [label="AST"];
43 -> 39 [label="AST"];
43 -> 40 [label="AST"];
47 -> 50 [label="Data Dep"];
48 -> 50 [label="Data Dep"];
49 -> 46 [label="AST"];
49 -> 47 [label="AST"];
49 -> 45 [label="AST"];
49 -> 48 [label="AST"];
50 -> 52 [label="Define-Use"];
51 -> 50 [label="AST"];
51 -> 44 [label="AST"];
51 -> 49 [label="AST"];
54 -> 52 [label="AST"];
54 -> 53 [label="AST"];
54 -> 60 [label="Control Dep"];
54 -> 59 [label="Control Dep"];
54 -> 55 [label="Control Dep"];
54 -> 57 [label="Control Dep"];
55 -> 64 [label="Define-Use"];
55 -> 75 [label="Define-Use"];
57 -> 58 [label="AST"];
59 -> 55 [label="AST"];
59 -> 57 [label="AST"];
60 -> 59 [label="AST"];
61 -> 54 [label="AST"];
61 -> 60 [label="AST"];
62 -> 43 [label="AST"];
62 -> 51 [label="AST"];
62 -> 61 [label="AST"];
63 -> 38 [label="AST"];
63 -> 62 [label="AST"];
66 -> 64 [label="AST"];
66 -> 65 [label="AST"];
66 -> 73 [label="Control Dep"];
66 -> 72 [label="Control Dep"];
66 -> 67 [label="Control Dep"];
66 -> 69 [label="Control Dep"];
66 -> 70 [label="Control Dep"];
66 -> 71 [label="Control Dep"];
72 -> 68 [label="AST"];
72 -> 67 [label="AST"];
72 -> 69 [label="AST"];
72 -> 70 [label="AST"];
72 -> 71 [label="AST"];
73 -> 72 [label="AST"];
74 -> 66 [label="AST"];
74 -> 73 [label="AST"];
76 -> 75 [label="AST"];
77 -> 17 [label="AST"];
77 -> 30 [label="AST"];
77 -> 63 [label="AST"];
77 -> 74 [label="AST"];
77 -> 76 [label="AST"];
78 -> 1 [label="AST"];
78 -> 0 [label="AST"];
78 -> 2 [label="AST"];
78 -> 4 [label="AST"];
78 -> 6 [label="AST"];
78 -> 8 [label="AST"];
78 -> 77 [label="AST"];
79 -> 80 [label="Action"];
81 -> 80 [label="Action"];
}