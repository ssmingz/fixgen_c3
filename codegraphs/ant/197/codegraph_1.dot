digraph "storeElement#?,Project,Object,Object,String" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@storeElement" shape=ellipse]
2 [label="2:CtParameterImpl@Project project" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@Project" shape=ellipse]
4 [label="2:CtParameterImpl@Object parent" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@Object" shape=ellipse]
6 [label="2:CtParameterImpl@Object child" shape=ellipse]
7 [label="2:CtTypeReferenceImpl@Object" shape=ellipse]
8 [label="2:CtParameterImpl@String elementName" shape=ellipse]
9 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
10 [label="3:CtTypeReferenceImpl@BuildException" shape=ellipse]
11 [label="4:CtVariableReadImpl@elementName" shape=ellipse]
12 [label="4:CtLiteralImpl@null" shape=ellipse]
13 [label="4:CtBinaryOperatorImpl@elementName == null" shape=ellipse]
14 [label="5:CtReturnImpl@return" shape=ellipse]
15 [label="4:CtBlockImpl@\{
    return;
\}" shape=ellipse]
16 [label="4:CtIfImpl@if (elementName == null) \{
    return;
\}" shape=ellipse]
17 [label="7:CtTypeReferenceImpl@NestedCreator" shape=ellipse]
18 [label="7:CtExecutableReferenceImpl@get(java.lang.String)" shape=ellipse]
19 [label="7:CtVirtualElement@get" shape=ellipse]
20 [label="7:CtFieldReadImpl@nestedCreators" shape=ellipse]
21 [label="7:CtVariableReadImpl@elementName" shape=ellipse]
22 [label="7:CtInvocationImpl@((NestedCreator) (nestedCreators.get(elementName)))" shape=ellipse]
23 [label="7:CtTypeReferenceImpl@NestedCreator" shape=ellipse]
24 [label="7:CtVirtualElement@ns" shape=ellipse]
25 [label="7:CtLocalVariableImpl@NestedCreator ns = ((NestedCreator) (nestedCreators.get(elementName)))" shape=ellipse]
26 [label="8:CtVariableReadImpl@ns" shape=ellipse]
27 [label="8:CtLiteralImpl@null" shape=ellipse]
28 [label="8:CtBinaryOperatorImpl@ns == null" shape=ellipse]
29 [label="9:CtReturnImpl@return" shape=ellipse]
30 [label="8:CtBlockImpl@\{
    return;
\}" shape=ellipse]
31 [label="8:CtIfImpl@if (ns == null) \{
    return;
\}" shape=ellipse]
32 [label="12:CtExecutableReferenceImpl@store(java.lang.Object,java.lang.Object)" shape=ellipse]
33 [label="12:CtVirtualElement@store" shape=ellipse]
34 [label="12:CtVariableReadImpl@ns" shape=ellipse]
35 [label="12:CtVariableReadImpl@parent" shape=ellipse]
36 [label="12:CtVariableReadImpl@child" shape=ellipse]
37 [label="12:CtInvocationImpl@ns.store(parent, child)" shape=ellipse]
38 [label="11:CtBlockImpl@\{
    ns.store(parent, child);
\}" shape=ellipse]
39 [label="13:CtVirtualElement@ie" shape=ellipse]
40 [label="13:CtTypeReferenceImpl@IllegalAccessException" shape=ellipse]
41 [label="13:CtCatchVariableImpl@IllegalAccessException ie" shape=ellipse]
42 [label="14:CtTypeReferenceImpl@BuildException" shape=ellipse]
43 [label="14:CtVariableReadImpl@ie" shape=ellipse]
44 [label="14:CtConstructorCallImpl@new BuildException(ie)" shape=ellipse]
45 [label="14:CtThrowImpl@throw new BuildException(ie)" shape=ellipse]
46 [label="13:CtBlockImpl@\{
    throw new BuildException(ie);
\}" shape=ellipse]
47 [label="13:CtCatchImpl@ catch (IllegalAccessException ie) \{
    throw new BuildException(ie);
\}" shape=ellipse]
48 [label="15:CtVirtualElement@ine" shape=ellipse]
49 [label="15:CtTypeReferenceImpl@InstantiationException" shape=ellipse]
50 [label="15:CtCatchVariableImpl@InstantiationException ine" shape=ellipse]
51 [label="16:CtTypeReferenceImpl@BuildException" shape=ellipse]
52 [label="16:CtVariableReadImpl@ine" shape=ellipse]
53 [label="16:CtConstructorCallImpl@new BuildException(ine)" shape=ellipse]
54 [label="16:CtThrowImpl@throw new BuildException(ine)" shape=ellipse]
55 [label="15:CtBlockImpl@\{
    throw new BuildException(ine);
\}" shape=ellipse]
56 [label="15:CtCatchImpl@ catch (InstantiationException ine) \{
    throw new BuildException(ine);
\}" shape=ellipse]
57 [label="17:CtVirtualElement@ite" shape=ellipse]
58 [label="17:CtTypeReferenceImpl@InvocationTargetException" shape=ellipse]
59 [label="17:CtCatchVariableImpl@InvocationTargetException ite" shape=ellipse]
60 [label="18:CtTypeReferenceImpl@Throwable" shape=ellipse]
61 [label="18:CtExecutableReferenceImpl@getTargetException()" shape=ellipse]
62 [label="18:CtVirtualElement@getTargetException" shape=ellipse]
63 [label="18:CtVariableReadImpl@ite" shape=ellipse]
64 [label="18:CtInvocationImpl@ite.getTargetException()" shape=ellipse]
65 [label="18:CtVirtualElement@t" shape=ellipse]
66 [label="18:CtLocalVariableImpl@Throwable t = ite.getTargetException()" shape=ellipse]
67 [label="19:CtVariableReadImpl@t" shape=ellipse]
68 [label="19:CtTypeAccessImpl@BuildException" shape=ellipse]
69 [label="19:CtTypeReferenceImpl@BuildException" shape=ellipse]
70 [label="19:CtBinaryOperatorImpl@t instanceof BuildException" shape=ellipse]
71 [label="20:CtVariableReadImpl@((BuildException) (t))" shape=ellipse]
72 [label="20:CtTypeReferenceImpl@BuildException" shape=ellipse]
73 [label="20:CtThrowImpl@throw ((BuildException) (t))" shape=ellipse]
74 [label="19:CtBlockImpl@\{
    throw ((BuildException) (t));
\}" shape=ellipse]
75 [label="19:CtIfImpl@if (t instanceof BuildException) \{
    throw ((BuildException) (t));
\}" shape=ellipse]
76 [label="22:CtTypeReferenceImpl@BuildException" shape=ellipse]
77 [label="22:CtVariableReadImpl@t" shape=ellipse]
78 [label="22:CtConstructorCallImpl@new BuildException(t)" shape=ellipse]
79 [label="22:CtThrowImpl@throw new BuildException(t)" shape=ellipse]
80 [label="17:CtBlockImpl@\{
    Throwable t = ite.getTargetException();
    if (t instanceof BuildException) \{
        throw ((BuildException) (t));
    \}
    throw new BuildException(t);
\}" shape=ellipse]
81 [label="17:CtCatchImpl@ catch (InvocationTargetException ite) \{
    Throwable t = ite.getTargetException();
    if (t instanceof BuildException) \{
        throw ((BuildException) (t));
    \}
    throw new BuildException(t);
\}" shape=ellipse]
82 [label="11:CtTryImpl@try \{
    ns.store(parent, child);
\} catch (IllegalAccessException ie) \{
    throw new BuildException(ie);
\} catch (InstantiationException ine) \{
    throw new BuildException(ine);
\} catch (InvocationTargetException ite) \{
    Throwable t = ite.getTargetException();
    if (t instanceof BuildException) \{
        throw ((BuildException) (t));
    \}
    throw new BuildException(t);
\}" shape=ellipse]
83 [label="3:CtBlockImpl@\{
    if (elementName == null) \{
        return;
    \}
    NestedCreator ns = ((NestedCreator) (nestedCreators.get(elementName)));
    if (ns == null) \{
        return;
    \}
    try \{
        ns.store(parent, child);
    \} catch (IllegalAccessException ie) \{
        throw new BuildException(ie);
    \} catch (InstantiationException ine) \{
        throw new BuildException(ine);
    \} catch (InvocationTargetException ite) \{
        Throwable t = ite.getTargetException();
        if (t instanceof BuildException) \{
            throw ((BuildException) (t));
        \}
        throw new BuildException(t);
    \}
\}" shape=ellipse]
84 [label="2:CtMethodImpl@public void storeElement(Project project, Object parent, Object child, String elementName) throws BuildException \{
    if (elementName == null) \{
        return;
    \}
    NestedCreator ns = ((NestedCreator) (nestedCreators.get(elementName)));
    if (ns == null) \{
        return;
    \}
    try \{
        ns.store(parent, child);
    \} catch (IllegalAccessException ie) \{
        throw new BuildException(ie);
    \} catch (InstantiationException ine) \{
        throw new BuildException(ine);
    \} catch (InvocationTargetException ite) \{
        Throwable t = ite.getTargetException();
        if (t instanceof BuildException) \{
            throw ((BuildException) (t));
        \}
        throw new BuildException(t);
    \}
\}" shape=ellipse]
85 [label="7:Insert@INSERT" shape=ellipse]
86 [label="7:CtInvocationImpl@elementName.toLowerCase(US)" shape=ellipse]
87 [label="7:Move@MOVE" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
6 -> 7 [label="AST"];
8 -> 9 [label="AST"];
13 -> 11 [label="AST"];
13 -> 12 [label="AST"];
13 -> 15 [label="Control Dep"];
13 -> 14 [label="Control Dep"];
15 -> 14 [label="AST"];
16 -> 13 [label="AST"];
16 -> 15 [label="AST"];
20 -> 24 [label="Data Dep"];
21 -> 24 [label="Data Dep"];
21 -> 87 [label="Action"];
22 -> 19 [label="AST"];
22 -> 23 [label="AST"];
22 -> 20 [label="AST"];
22 -> 18 [label="AST"];
22 -> 21 [label="AST"];
22 -> 85 [label="Action"];
24 -> 26 [label="Define-Use"];
24 -> 34 [label="Define-Use"];
25 -> 24 [label="AST"];
25 -> 17 [label="AST"];
25 -> 22 [label="AST"];
28 -> 26 [label="AST"];
28 -> 27 [label="AST"];
28 -> 30 [label="Control Dep"];
28 -> 29 [label="Control Dep"];
30 -> 29 [label="AST"];
31 -> 28 [label="AST"];
31 -> 30 [label="AST"];
37 -> 33 [label="AST"];
37 -> 34 [label="AST"];
37 -> 32 [label="AST"];
37 -> 35 [label="AST"];
37 -> 36 [label="AST"];
38 -> 37 [label="AST"];
39 -> 43 [label="Define-Use"];
41 -> 39 [label="AST"];
41 -> 40 [label="AST"];
41 -> 46 [label="Control Dep"];
41 -> 45 [label="Control Dep"];
41 -> 44 [label="Control Dep"];
41 -> 43 [label="Control Dep"];
44 -> 43 [label="AST"];
45 -> 44 [label="AST"];
46 -> 45 [label="AST"];
47 -> 41 [label="AST"];
47 -> 46 [label="AST"];
48 -> 52 [label="Define-Use"];
50 -> 48 [label="AST"];
50 -> 49 [label="AST"];
50 -> 55 [label="Control Dep"];
50 -> 54 [label="Control Dep"];
50 -> 53 [label="Control Dep"];
50 -> 52 [label="Control Dep"];
53 -> 52 [label="AST"];
54 -> 53 [label="AST"];
55 -> 54 [label="AST"];
56 -> 50 [label="AST"];
56 -> 55 [label="AST"];
57 -> 63 [label="Define-Use"];
59 -> 57 [label="AST"];
59 -> 58 [label="AST"];
59 -> 80 [label="Control Dep"];
59 -> 66 [label="Control Dep"];
59 -> 64 [label="Control Dep"];
59 -> 61 [label="Control Dep"];
59 -> 63 [label="Control Dep"];
59 -> 75 [label="Control Dep"];
59 -> 70 [label="Control Dep"];
59 -> 67 [label="Control Dep"];
59 -> 68 [label="Control Dep"];
59 -> 79 [label="Control Dep"];
59 -> 78 [label="Control Dep"];
59 -> 77 [label="Control Dep"];
63 -> 65 [label="Data Dep"];
64 -> 62 [label="AST"];
64 -> 63 [label="AST"];
64 -> 61 [label="AST"];
65 -> 67 [label="Define-Use"];
65 -> 71 [label="Define-Use"];
65 -> 77 [label="Define-Use"];
66 -> 65 [label="AST"];
66 -> 60 [label="AST"];
66 -> 64 [label="AST"];
68 -> 69 [label="AST"];
70 -> 67 [label="AST"];
70 -> 68 [label="AST"];
70 -> 74 [label="Control Dep"];
70 -> 73 [label="Control Dep"];
70 -> 71 [label="Control Dep"];
71 -> 72 [label="AST"];
73 -> 71 [label="AST"];
74 -> 73 [label="AST"];
75 -> 70 [label="AST"];
75 -> 74 [label="AST"];
78 -> 77 [label="AST"];
79 -> 78 [label="AST"];
80 -> 66 [label="AST"];
80 -> 75 [label="AST"];
80 -> 79 [label="AST"];
81 -> 59 [label="AST"];
81 -> 80 [label="AST"];
82 -> 38 [label="AST"];
82 -> 47 [label="AST"];
82 -> 56 [label="AST"];
82 -> 81 [label="AST"];
83 -> 16 [label="AST"];
83 -> 25 [label="AST"];
83 -> 31 [label="AST"];
83 -> 82 [label="AST"];
84 -> 1 [label="AST"];
84 -> 0 [label="AST"];
84 -> 2 [label="AST"];
84 -> 4 [label="AST"];
84 -> 6 [label="AST"];
84 -> 8 [label="AST"];
84 -> 10 [label="AST"];
84 -> 83 [label="AST"];
85 -> 86 [label="Action"];
87 -> 86 [label="Action"];
}