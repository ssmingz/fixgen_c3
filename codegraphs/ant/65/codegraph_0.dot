digraph "checkTaskClass#?,Class,Project" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@checkTaskClass" shape=ellipse]
2 [label="2:CtParameterImpl@final Class taskClass" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@Class" shape=ellipse]
4 [label="2:CtParameterImpl@final Project project" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@Project" shape=ellipse]
6 [label="4:CtTypeReferenceImpl@Method" shape=ellipse]
7 [label="4:CtExecutableReferenceImpl@getMethod(java.lang.String,java.lang.Class[])" shape=ellipse]
8 [label="4:CtVirtualElement@getMethod" shape=ellipse]
9 [label="4:CtVariableReadImpl@taskClass" shape=ellipse]
10 [label="4:CtLiteralImpl@\"execute\"" shape=ellipse]
11 [label="4:CtLiteralImpl@null" shape=ellipse]
12 [label="4:CtInvocationImpl@taskClass.getMethod(\"execute\", null)" shape=ellipse]
13 [label="4:CtVirtualElement@executeM" shape=ellipse]
14 [label="4:CtLocalVariableImpl@final Method executeM = taskClass.getMethod(\"execute\", null)" shape=ellipse]
15 [label="5:CtExecutableReferenceImpl@equals(java.lang.Object)" shape=ellipse]
16 [label="5:CtVirtualElement@equals" shape=ellipse]
17 [label="5:CtTypeAccessImpl@Void" shape=ellipse]
18 [label="5:CtFieldReadImpl@Void.TYPE" shape=ellipse]
19 [label="5:CtFieldReferenceImpl@java.lang.Void.TYPE" shape=ellipse]
20 [label="5:CtExecutableReferenceImpl@getReturnType()" shape=ellipse]
21 [label="5:CtVirtualElement@getReturnType" shape=ellipse]
22 [label="5:CtVariableReadImpl@executeM" shape=ellipse]
23 [label="5:CtInvocationImpl@executeM.getReturnType()" shape=ellipse]
24 [label="5:CtInvocationImpl@Void.TYPE.equals(executeM.getReturnType())" shape=ellipse]
25 [label="5:CtUnaryOperatorImpl@!Void.TYPE.equals(executeM.getReturnType())" shape=ellipse]
26 [label="6:CtTypeReferenceImpl@String" shape=ellipse]
27 [label="7:CtLiteralImpl@\"return type of execute() should be \"" shape=ellipse]
28 [label="7:CtLiteralImpl@\"void but was \\"\"" shape=ellipse]
29 [label="7:CtBinaryOperatorImpl@(\"return type of execute() should be \" + \"void but was \\"\")" shape=ellipse]
30 [label="8:CtExecutableReferenceImpl@getReturnType()" shape=ellipse]
31 [label="8:CtVirtualElement@getReturnType" shape=ellipse]
32 [label="8:CtVariableReadImpl@executeM" shape=ellipse]
33 [label="8:CtInvocationImpl@executeM.getReturnType()" shape=ellipse]
34 [label="7:CtBinaryOperatorImpl@((\"return type of execute() should be \" + \"void but was \\"\") + executeM.getReturnType())" shape=ellipse]
35 [label="9:CtLiteralImpl@\"\\" in \"" shape=ellipse]
36 [label="7:CtBinaryOperatorImpl@(((\"return type of execute() should be \" + \"void but was \\"\") + executeM.getReturnType()) + \"\\" in \")" shape=ellipse]
37 [label="10:CtVariableReadImpl@taskClass" shape=ellipse]
38 [label="7:CtBinaryOperatorImpl@(((\"return type of execute() should be \" + \"void but was \\"\") + executeM.getReturnType()) + \"\\" in \") + taskClass" shape=ellipse]
39 [label="6:CtVirtualElement@message" shape=ellipse]
40 [label="6:CtLocalVariableImpl@final String message = (((\"return type of execute() should be \" + \"void but was \\"\") + executeM.getReturnType()) + \"\\" in \") + taskClass" shape=ellipse]
41 [label="11:CtExecutableReferenceImpl@log(java.lang.String)" shape=ellipse]
42 [label="11:CtVirtualElement@log" shape=ellipse]
43 [label="11:CtVariableReadImpl@project" shape=ellipse]
44 [label="11:CtVariableReadImpl@message" shape=ellipse]
45 [label="11:CtTypeAccessImpl@MSG_WARN" shape=ellipse]
46 [label="11:CtInvocationImpl@project.log(message, MSG_WARN)" shape=ellipse]
47 [label="5:CtBlockImpl@\{
    final String message = (((\"return type of execute() should be \" + \"void but was \\"\") + executeM.getReturnType()) + \"\\" in \") + taskClass;
    project.log(message, MSG_WARN);
\}" shape=ellipse]
48 [label="5:CtIfImpl@if (!Void.TYPE.equals(executeM.getReturnType())) \{
    final String message = (((\"return type of execute() should be \" + \"void but was \\"\") + executeM.getReturnType()) + \"\\" in \") + taskClass;
    project.log(message, MSG_WARN);
\}" shape=ellipse]
49 [label="3:CtBlockImpl@\{
    final Method executeM = taskClass.getMethod(\"execute\", null);
    if (!Void.TYPE.equals(executeM.getReturnType())) \{
        final String message = (((\"return type of execute() should be \" + \"void but was \\"\") + executeM.getReturnType()) + \"\\" in \") + taskClass;
        project.log(message, MSG_WARN);
    \}
\}" shape=ellipse]
50 [label="13:CtVirtualElement@e" shape=ellipse]
51 [label="13:CtTypeReferenceImpl@NoSuchMethodException" shape=ellipse]
52 [label="13:CtCatchVariableImpl@NoSuchMethodException e" shape=ellipse]
53 [label="14:CtTypeReferenceImpl@String" shape=ellipse]
54 [label="14:CtLiteralImpl@\"No public execute() in \"" shape=ellipse]
55 [label="14:CtVariableReadImpl@taskClass" shape=ellipse]
56 [label="14:CtBinaryOperatorImpl@\"No public execute() in \" + taskClass" shape=ellipse]
57 [label="14:CtVirtualElement@message" shape=ellipse]
58 [label="14:CtLocalVariableImpl@final String message = \"No public execute() in \" + taskClass" shape=ellipse]
59 [label="15:CtExecutableReferenceImpl@log(java.lang.String)" shape=ellipse]
60 [label="15:CtVirtualElement@log" shape=ellipse]
61 [label="15:CtVariableReadImpl@project" shape=ellipse]
62 [label="15:CtVariableReadImpl@message" shape=ellipse]
63 [label="15:CtTypeAccessImpl@MSG_ERR" shape=ellipse]
64 [label="15:CtInvocationImpl@project.log(message, MSG_ERR)" shape=ellipse]
65 [label="16:CtTypeReferenceImpl@BuildException" shape=ellipse]
66 [label="16:CtVariableReadImpl@message" shape=ellipse]
67 [label="16:CtConstructorCallImpl@new BuildException(message)" shape=ellipse]
68 [label="16:CtThrowImpl@throw new BuildException(message)" shape=ellipse]
69 [label="13:CtBlockImpl@\{
    final String message = \"No public execute() in \" + taskClass;
    project.log(message, MSG_ERR);
    throw new BuildException(message);
\}" shape=ellipse]
70 [label="13:CtCatchImpl@ catch (NoSuchMethodException e) \{
    final String message = \"No public execute() in \" + taskClass;
    project.log(message, MSG_ERR);
    throw new BuildException(message);
\}" shape=ellipse]
71 [label="3:CtTryImpl@try \{
    final Method executeM = taskClass.getMethod(\"execute\", null);
    if (!Void.TYPE.equals(executeM.getReturnType())) \{
        final String message = (((\"return type of execute() should be \" + \"void but was \\"\") + executeM.getReturnType()) + \"\\" in \") + taskClass;
        project.log(message, MSG_WARN);
    \}
\} catch (NoSuchMethodException e) \{
    final String message = \"No public execute() in \" + taskClass;
    project.log(message, MSG_ERR);
    throw new BuildException(message);
\}" shape=ellipse]
72 [label="2:CtBlockImpl@\{
    try \{
        final Method executeM = taskClass.getMethod(\"execute\", null);
        if (!Void.TYPE.equals(executeM.getReturnType())) \{
            final String message = (((\"return type of execute() should be \" + \"void but was \\"\") + executeM.getReturnType()) + \"\\" in \") + taskClass;
            project.log(message, MSG_WARN);
        \}
    \} catch (NoSuchMethodException e) \{
        final String message = \"No public execute() in \" + taskClass;
        project.log(message, MSG_ERR);
        throw new BuildException(message);
    \}
\}" shape=ellipse]
73 [label="2:CtMethodImpl@public static void checkTaskClass(final Class taskClass, final Project project) \{
    try \{
        final Method executeM = taskClass.getMethod(\"execute\", null);
        if (!Void.TYPE.equals(executeM.getReturnType())) \{
            final String message = (((\"return type of execute() should be \" + \"void but was \\"\") + executeM.getReturnType()) + \"\\" in \") + taskClass;
            project.log(message, MSG_WARN);
        \}
    \} catch (NoSuchMethodException e) \{
        final String message = \"No public execute() in \" + taskClass;
        project.log(message, MSG_ERR);
        throw new BuildException(message);
    \}
\}" shape=ellipse]
74 [label="17:Insert@INSERT" shape=ellipse]
75 [label="17:CtCatchImpl@ catch (LinkageError e) \{
    String message = ((\"Could not load \" + taskClass) + \": \") + e;
    project.log(message, MSG_ERR);
    throw new BuildException(message, e);
\}" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
9 -> 13 [label="Data Dep"];
12 -> 8 [label="AST"];
12 -> 9 [label="AST"];
12 -> 7 [label="AST"];
12 -> 10 [label="AST"];
12 -> 11 [label="AST"];
13 -> 22 [label="Define-Use"];
13 -> 32 [label="Define-Use"];
14 -> 13 [label="AST"];
14 -> 6 [label="AST"];
14 -> 12 [label="AST"];
18 -> 17 [label="AST"];
18 -> 19 [label="AST"];
23 -> 21 [label="AST"];
23 -> 22 [label="AST"];
23 -> 20 [label="AST"];
24 -> 16 [label="AST"];
24 -> 18 [label="AST"];
24 -> 15 [label="AST"];
24 -> 23 [label="AST"];
25 -> 24 [label="AST"];
25 -> 47 [label="Control Dep"];
25 -> 40 [label="Control Dep"];
25 -> 38 [label="Control Dep"];
25 -> 36 [label="Control Dep"];
25 -> 34 [label="Control Dep"];
25 -> 29 [label="Control Dep"];
25 -> 27 [label="Control Dep"];
25 -> 28 [label="Control Dep"];
25 -> 33 [label="Control Dep"];
25 -> 30 [label="Control Dep"];
25 -> 32 [label="Control Dep"];
25 -> 35 [label="Control Dep"];
25 -> 37 [label="Control Dep"];
25 -> 46 [label="Control Dep"];
25 -> 41 [label="Control Dep"];
25 -> 43 [label="Control Dep"];
25 -> 44 [label="Control Dep"];
25 -> 45 [label="Control Dep"];
29 -> 27 [label="AST"];
29 -> 28 [label="AST"];
32 -> 39 [label="Data Dep"];
33 -> 31 [label="AST"];
33 -> 32 [label="AST"];
33 -> 30 [label="AST"];
34 -> 29 [label="AST"];
34 -> 33 [label="AST"];
36 -> 34 [label="AST"];
36 -> 35 [label="AST"];
37 -> 39 [label="Data Dep"];
38 -> 36 [label="AST"];
38 -> 37 [label="AST"];
39 -> 44 [label="Define-Use"];
40 -> 39 [label="AST"];
40 -> 26 [label="AST"];
40 -> 38 [label="AST"];
46 -> 42 [label="AST"];
46 -> 43 [label="AST"];
46 -> 41 [label="AST"];
46 -> 44 [label="AST"];
46 -> 45 [label="AST"];
47 -> 40 [label="AST"];
47 -> 46 [label="AST"];
48 -> 25 [label="AST"];
48 -> 47 [label="AST"];
49 -> 14 [label="AST"];
49 -> 48 [label="AST"];
52 -> 50 [label="AST"];
52 -> 51 [label="AST"];
52 -> 69 [label="Control Dep"];
52 -> 58 [label="Control Dep"];
52 -> 56 [label="Control Dep"];
52 -> 54 [label="Control Dep"];
52 -> 55 [label="Control Dep"];
52 -> 64 [label="Control Dep"];
52 -> 59 [label="Control Dep"];
52 -> 61 [label="Control Dep"];
52 -> 62 [label="Control Dep"];
52 -> 63 [label="Control Dep"];
52 -> 68 [label="Control Dep"];
52 -> 67 [label="Control Dep"];
52 -> 66 [label="Control Dep"];
55 -> 57 [label="Data Dep"];
56 -> 54 [label="AST"];
56 -> 55 [label="AST"];
57 -> 62 [label="Define-Use"];
57 -> 66 [label="Define-Use"];
58 -> 57 [label="AST"];
58 -> 53 [label="AST"];
58 -> 56 [label="AST"];
64 -> 60 [label="AST"];
64 -> 61 [label="AST"];
64 -> 59 [label="AST"];
64 -> 62 [label="AST"];
64 -> 63 [label="AST"];
67 -> 66 [label="AST"];
68 -> 67 [label="AST"];
69 -> 58 [label="AST"];
69 -> 64 [label="AST"];
69 -> 68 [label="AST"];
70 -> 52 [label="AST"];
70 -> 69 [label="AST"];
71 -> 49 [label="AST"];
71 -> 70 [label="AST"];
71 -> 74 [label="Action"];
72 -> 71 [label="AST"];
73 -> 1 [label="AST"];
73 -> 0 [label="AST"];
73 -> 2 [label="AST"];
73 -> 4 [label="AST"];
73 -> 72 [label="AST"];
74 -> 75 [label="Action"];
}