digraph "checkTaskClass#?,Class" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@checkTaskClass" shape=ellipse]
2 [label="2:CtParameterImpl@final Class taskClass" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@Class" shape=ellipse]
4 [label="2:CtTypeReferenceImpl@BuildException" shape=ellipse]
5 [label="3:CtExecutableReferenceImpl@checkTaskClass(java.lang.Class)" shape=ellipse]
6 [label="3:CtVirtualElement@checkTaskClass" shape=ellipse]
7 [label="3:CtExecutableReferenceImpl@getComponentHelper(PlaceHold)" shape=ellipse]
8 [label="3:CtVirtualElement@getComponentHelper" shape=ellipse]
9 [label="3:CtTypeAccessImpl@ComponentHelper" shape=ellipse]
10 [label="3:CtThisAccessImpl@this" shape=ellipse]
11 [label="3:CtInvocationImpl@ComponentHelper.getComponentHelper(this)" shape=ellipse]
12 [label="3:CtVariableReadImpl@taskClass" shape=ellipse]
13 [label="3:CtInvocationImpl@ComponentHelper.getComponentHelper(this).checkTaskClass(taskClass)" shape=ellipse]
14 [label="4:CtExecutableReferenceImpl@isPublic(int)" shape=ellipse]
15 [label="4:CtVirtualElement@isPublic" shape=ellipse]
16 [label="4:CtTypeAccessImpl@Modifier" shape=ellipse]
17 [label="4:CtExecutableReferenceImpl@getModifiers()" shape=ellipse]
18 [label="4:CtVirtualElement@getModifiers" shape=ellipse]
19 [label="4:CtVariableReadImpl@taskClass" shape=ellipse]
20 [label="4:CtInvocationImpl@taskClass.getModifiers()" shape=ellipse]
21 [label="4:CtInvocationImpl@Modifier.isPublic(taskClass.getModifiers())" shape=ellipse]
22 [label="4:CtUnaryOperatorImpl@!Modifier.isPublic(taskClass.getModifiers())" shape=ellipse]
23 [label="5:CtTypeReferenceImpl@String" shape=ellipse]
24 [label="5:CtVariableReadImpl@taskClass" shape=ellipse]
25 [label="5:CtLiteralImpl@\" is not public\"" shape=ellipse]
26 [label="5:CtBinaryOperatorImpl@taskClass + \" is not public\"" shape=ellipse]
27 [label="5:CtVirtualElement@message" shape=ellipse]
28 [label="5:CtLocalVariableImpl@final String message = taskClass + \" is not public\"" shape=ellipse]
29 [label="6:CtExecutableReferenceImpl@log(java.lang.String,<unknown>)" shape=ellipse]
30 [label="6:CtVirtualElement@log" shape=ellipse]
31 [label="6:CtVariableReadImpl@message" shape=ellipse]
32 [label="6:CtTypeAccessImpl@MSG_ERR" shape=ellipse]
33 [label="6:CtInvocationImpl@log(message, MSG_ERR)" shape=ellipse]
34 [label="7:CtTypeReferenceImpl@BuildException" shape=ellipse]
35 [label="7:CtVariableReadImpl@message" shape=ellipse]
36 [label="7:CtConstructorCallImpl@new BuildException(message)" shape=ellipse]
37 [label="7:CtThrowImpl@throw new BuildException(message)" shape=ellipse]
38 [label="4:CtBlockImpl@\{
    final String message = taskClass + \" is not public\";
    log(message, MSG_ERR);
    throw new BuildException(message);
\}" shape=ellipse]
39 [label="4:CtIfImpl@if (!Modifier.isPublic(taskClass.getModifiers())) \{
    final String message = taskClass + \" is not public\";
    log(message, MSG_ERR);
    throw new BuildException(message);
\}" shape=ellipse]
40 [label="9:CtExecutableReferenceImpl@isAbstract(int)" shape=ellipse]
41 [label="9:CtVirtualElement@isAbstract" shape=ellipse]
42 [label="9:CtTypeAccessImpl@Modifier" shape=ellipse]
43 [label="9:CtExecutableReferenceImpl@getModifiers()" shape=ellipse]
44 [label="9:CtVirtualElement@getModifiers" shape=ellipse]
45 [label="9:CtVariableReadImpl@taskClass" shape=ellipse]
46 [label="9:CtInvocationImpl@taskClass.getModifiers()" shape=ellipse]
47 [label="9:CtInvocationImpl@Modifier.isAbstract(taskClass.getModifiers())" shape=ellipse]
48 [label="10:CtTypeReferenceImpl@String" shape=ellipse]
49 [label="10:CtVariableReadImpl@taskClass" shape=ellipse]
50 [label="10:CtLiteralImpl@\" is abstract\"" shape=ellipse]
51 [label="10:CtBinaryOperatorImpl@taskClass + \" is abstract\"" shape=ellipse]
52 [label="10:CtVirtualElement@message" shape=ellipse]
53 [label="10:CtLocalVariableImpl@final String message = taskClass + \" is abstract\"" shape=ellipse]
54 [label="11:CtExecutableReferenceImpl@log(java.lang.String,<unknown>)" shape=ellipse]
55 [label="11:CtVirtualElement@log" shape=ellipse]
56 [label="11:CtVariableReadImpl@message" shape=ellipse]
57 [label="11:CtTypeAccessImpl@MSG_ERR" shape=ellipse]
58 [label="11:CtInvocationImpl@log(message, MSG_ERR)" shape=ellipse]
59 [label="12:CtTypeReferenceImpl@BuildException" shape=ellipse]
60 [label="12:CtVariableReadImpl@message" shape=ellipse]
61 [label="12:CtConstructorCallImpl@new BuildException(message)" shape=ellipse]
62 [label="12:CtThrowImpl@throw new BuildException(message)" shape=ellipse]
63 [label="9:CtBlockImpl@\{
    final String message = taskClass + \" is abstract\";
    log(message, MSG_ERR);
    throw new BuildException(message);
\}" shape=ellipse]
64 [label="9:CtIfImpl@if (Modifier.isAbstract(taskClass.getModifiers())) \{
    final String message = taskClass + \" is abstract\";
    log(message, MSG_ERR);
    throw new BuildException(message);
\}" shape=ellipse]
65 [label="15:CtExecutableReferenceImpl@getConstructor(java.lang.Class[])" shape=ellipse]
66 [label="15:CtVirtualElement@getConstructor" shape=ellipse]
67 [label="15:CtVariableReadImpl@taskClass" shape=ellipse]
68 [label="15:CtLiteralImpl@null" shape=ellipse]
69 [label="15:CtInvocationImpl@taskClass.getConstructor(null)" shape=ellipse]
70 [label="14:CtBlockImpl@\{
    taskClass.getConstructor(null);
\}" shape=ellipse]
71 [label="16:CtVirtualElement@e" shape=ellipse]
72 [label="16:CtTypeReferenceImpl@NoSuchMethodException" shape=ellipse]
73 [label="16:CtCatchVariableImpl@NoSuchMethodException e" shape=ellipse]
74 [label="17:CtTypeReferenceImpl@String" shape=ellipse]
75 [label="17:CtLiteralImpl@\"No public no-arg constructor in \"" shape=ellipse]
76 [label="17:CtVariableReadImpl@taskClass" shape=ellipse]
77 [label="17:CtBinaryOperatorImpl@\"No public no-arg constructor in \" + taskClass" shape=ellipse]
78 [label="17:CtVirtualElement@message" shape=ellipse]
79 [label="17:CtLocalVariableImpl@final String message = \"No public no-arg constructor in \" + taskClass" shape=ellipse]
80 [label="18:CtExecutableReferenceImpl@log(java.lang.String,<unknown>)" shape=ellipse]
81 [label="18:CtVirtualElement@log" shape=ellipse]
82 [label="18:CtVariableReadImpl@message" shape=ellipse]
83 [label="18:CtTypeAccessImpl@MSG_ERR" shape=ellipse]
84 [label="18:CtInvocationImpl@log(message, MSG_ERR)" shape=ellipse]
85 [label="19:CtTypeReferenceImpl@BuildException" shape=ellipse]
86 [label="19:CtVariableReadImpl@message" shape=ellipse]
87 [label="19:CtConstructorCallImpl@new BuildException(message)" shape=ellipse]
88 [label="19:CtThrowImpl@throw new BuildException(message)" shape=ellipse]
89 [label="16:CtBlockImpl@\{
    final String message = \"No public no-arg constructor in \" + taskClass;
    log(message, MSG_ERR);
    throw new BuildException(message);
\}" shape=ellipse]
90 [label="16:CtCatchImpl@ catch (NoSuchMethodException e) \{
    final String message = \"No public no-arg constructor in \" + taskClass;
    log(message, MSG_ERR);
    throw new BuildException(message);
\}" shape=ellipse]
91 [label="14:CtTryImpl@try \{
    taskClass.getConstructor(null);
\} catch (NoSuchMethodException e) \{
    final String message = \"No public no-arg constructor in \" + taskClass;
    log(message, MSG_ERR);
    throw new BuildException(message);
\}" shape=ellipse]
92 [label="21:CtExecutableReferenceImpl@isAssignableFrom(java.lang.Class)" shape=ellipse]
93 [label="21:CtVirtualElement@isAssignableFrom" shape=ellipse]
94 [label="21:CtFieldReadImpl@Task.class" shape=ellipse]
95 [label="21:CtVariableReadImpl@taskClass" shape=ellipse]
96 [label="21:CtInvocationImpl@Task.class.isAssignableFrom(taskClass)" shape=ellipse]
97 [label="21:CtUnaryOperatorImpl@!Task.class.isAssignableFrom(taskClass)" shape=ellipse]
98 [label="22:CtExecutableReferenceImpl@checkTaskClass(java.lang.Class,PlaceHold)" shape=ellipse]
99 [label="22:CtVirtualElement@checkTaskClass" shape=ellipse]
100 [label="22:CtTypeAccessImpl@TaskAdapter" shape=ellipse]
101 [label="22:CtVariableReadImpl@taskClass" shape=ellipse]
102 [label="22:CtThisAccessImpl@this" shape=ellipse]
103 [label="22:CtInvocationImpl@TaskAdapter.checkTaskClass(taskClass, this)" shape=ellipse]
104 [label="21:CtBlockImpl@\{
    TaskAdapter.checkTaskClass(taskClass, this);
\}" shape=ellipse]
105 [label="21:CtIfImpl@if (!Task.class.isAssignableFrom(taskClass)) \{
    TaskAdapter.checkTaskClass(taskClass, this);
\}" shape=ellipse]
106 [label="2:CtBlockImpl@\{
    ComponentHelper.getComponentHelper(this).checkTaskClass(taskClass);
    if (!Modifier.isPublic(taskClass.getModifiers())) \{
        final String message = taskClass + \" is not public\";
        log(message, MSG_ERR);
        throw new BuildException(message);
    \}
    if (Modifier.isAbstract(taskClass.getModifiers())) \{
        final String message = taskClass + \" is abstract\";
        log(message, MSG_ERR);
        throw new BuildException(message);
    \}
    try \{
        taskClass.getConstructor(null);
    \} catch (NoSuchMethodException e) \{
        final String message = \"No public no-arg constructor in \" + taskClass;
        log(message, MSG_ERR);
        throw new BuildException(message);
    \}
    if (!Task.class.isAssignableFrom(taskClass)) \{
        TaskAdapter.checkTaskClass(taskClass, this);
    \}
\}" shape=ellipse]
107 [label="2:CtMethodImpl@public void checkTaskClass(final Class taskClass) throws BuildException \{
    ComponentHelper.getComponentHelper(this).checkTaskClass(taskClass);
    if (!Modifier.isPublic(taskClass.getModifiers())) \{
        final String message = taskClass + \" is not public\";
        log(message, MSG_ERR);
        throw new BuildException(message);
    \}
    if (Modifier.isAbstract(taskClass.getModifiers())) \{
        final String message = taskClass + \" is abstract\";
        log(message, MSG_ERR);
        throw new BuildException(message);
    \}
    try \{
        taskClass.getConstructor(null);
    \} catch (NoSuchMethodException e) \{
        final String message = \"No public no-arg constructor in \" + taskClass;
        log(message, MSG_ERR);
        throw new BuildException(message);
    \}
    if (!Task.class.isAssignableFrom(taskClass)) \{
        TaskAdapter.checkTaskClass(taskClass, this);
    \}
\}" shape=ellipse]
108 [label="20:Insert@INSERT" shape=ellipse]
109 [label="20:CtCatchImpl@ catch (LinkageError e) \{
    String message = ((\"Could not load \" + taskClass) + \": \") + e;
    log(message, MSG_ERR);
    throw new BuildException(message, e);
\}" shape=ellipse]
2 -> 3 [label="AST"];
11 -> 8 [label="AST"];
11 -> 9 [label="AST"];
11 -> 7 [label="AST"];
11 -> 10 [label="AST"];
13 -> 6 [label="AST"];
13 -> 11 [label="AST"];
13 -> 5 [label="AST"];
13 -> 12 [label="AST"];
20 -> 18 [label="AST"];
20 -> 19 [label="AST"];
20 -> 17 [label="AST"];
21 -> 15 [label="AST"];
21 -> 16 [label="AST"];
21 -> 14 [label="AST"];
21 -> 20 [label="AST"];
22 -> 21 [label="AST"];
22 -> 38 [label="Control Dep"];
22 -> 28 [label="Control Dep"];
22 -> 26 [label="Control Dep"];
22 -> 24 [label="Control Dep"];
22 -> 25 [label="Control Dep"];
22 -> 33 [label="Control Dep"];
22 -> 29 [label="Control Dep"];
22 -> 31 [label="Control Dep"];
22 -> 32 [label="Control Dep"];
22 -> 37 [label="Control Dep"];
22 -> 36 [label="Control Dep"];
22 -> 35 [label="Control Dep"];
24 -> 27 [label="Data Dep"];
26 -> 24 [label="AST"];
26 -> 25 [label="AST"];
27 -> 31 [label="Define-Use"];
27 -> 35 [label="Define-Use"];
27 -> 56 [label="Define-Use"];
27 -> 60 [label="Define-Use"];
28 -> 27 [label="AST"];
28 -> 23 [label="AST"];
28 -> 26 [label="AST"];
33 -> 30 [label="AST"];
33 -> 29 [label="AST"];
33 -> 31 [label="AST"];
33 -> 32 [label="AST"];
36 -> 35 [label="AST"];
37 -> 36 [label="AST"];
38 -> 28 [label="AST"];
38 -> 33 [label="AST"];
38 -> 37 [label="AST"];
39 -> 22 [label="AST"];
39 -> 38 [label="AST"];
46 -> 44 [label="AST"];
46 -> 45 [label="AST"];
46 -> 43 [label="AST"];
47 -> 41 [label="AST"];
47 -> 42 [label="AST"];
47 -> 40 [label="AST"];
47 -> 46 [label="AST"];
47 -> 63 [label="Control Dep"];
47 -> 53 [label="Control Dep"];
47 -> 51 [label="Control Dep"];
47 -> 49 [label="Control Dep"];
47 -> 50 [label="Control Dep"];
47 -> 58 [label="Control Dep"];
47 -> 54 [label="Control Dep"];
47 -> 56 [label="Control Dep"];
47 -> 57 [label="Control Dep"];
47 -> 62 [label="Control Dep"];
47 -> 61 [label="Control Dep"];
47 -> 60 [label="Control Dep"];
49 -> 52 [label="Data Dep"];
51 -> 49 [label="AST"];
51 -> 50 [label="AST"];
52 -> 56 [label="Define-Use"];
52 -> 60 [label="Define-Use"];
53 -> 52 [label="AST"];
53 -> 48 [label="AST"];
53 -> 51 [label="AST"];
58 -> 55 [label="AST"];
58 -> 54 [label="AST"];
58 -> 56 [label="AST"];
58 -> 57 [label="AST"];
61 -> 60 [label="AST"];
62 -> 61 [label="AST"];
63 -> 53 [label="AST"];
63 -> 58 [label="AST"];
63 -> 62 [label="AST"];
64 -> 47 [label="AST"];
64 -> 63 [label="AST"];
69 -> 66 [label="AST"];
69 -> 67 [label="AST"];
69 -> 65 [label="AST"];
69 -> 68 [label="AST"];
70 -> 69 [label="AST"];
73 -> 71 [label="AST"];
73 -> 72 [label="AST"];
73 -> 89 [label="Control Dep"];
73 -> 79 [label="Control Dep"];
73 -> 77 [label="Control Dep"];
73 -> 75 [label="Control Dep"];
73 -> 76 [label="Control Dep"];
73 -> 84 [label="Control Dep"];
73 -> 80 [label="Control Dep"];
73 -> 82 [label="Control Dep"];
73 -> 83 [label="Control Dep"];
73 -> 88 [label="Control Dep"];
73 -> 87 [label="Control Dep"];
73 -> 86 [label="Control Dep"];
76 -> 78 [label="Data Dep"];
77 -> 75 [label="AST"];
77 -> 76 [label="AST"];
78 -> 82 [label="Define-Use"];
78 -> 86 [label="Define-Use"];
79 -> 78 [label="AST"];
79 -> 74 [label="AST"];
79 -> 77 [label="AST"];
84 -> 81 [label="AST"];
84 -> 80 [label="AST"];
84 -> 82 [label="AST"];
84 -> 83 [label="AST"];
87 -> 86 [label="AST"];
88 -> 87 [label="AST"];
89 -> 79 [label="AST"];
89 -> 84 [label="AST"];
89 -> 88 [label="AST"];
90 -> 73 [label="AST"];
90 -> 89 [label="AST"];
91 -> 70 [label="AST"];
91 -> 90 [label="AST"];
91 -> 108 [label="Action"];
96 -> 93 [label="AST"];
96 -> 94 [label="AST"];
96 -> 92 [label="AST"];
96 -> 95 [label="AST"];
97 -> 96 [label="AST"];
97 -> 104 [label="Control Dep"];
97 -> 103 [label="Control Dep"];
97 -> 98 [label="Control Dep"];
97 -> 100 [label="Control Dep"];
97 -> 101 [label="Control Dep"];
97 -> 102 [label="Control Dep"];
103 -> 99 [label="AST"];
103 -> 100 [label="AST"];
103 -> 98 [label="AST"];
103 -> 101 [label="AST"];
103 -> 102 [label="AST"];
104 -> 103 [label="AST"];
105 -> 97 [label="AST"];
105 -> 104 [label="AST"];
106 -> 13 [label="AST"];
106 -> 39 [label="AST"];
106 -> 64 [label="AST"];
106 -> 91 [label="AST"];
106 -> 105 [label="AST"];
107 -> 1 [label="AST"];
107 -> 0 [label="AST"];
107 -> 2 [label="AST"];
107 -> 4 [label="AST"];
107 -> 106 [label="AST"];
108 -> 109 [label="Action"];
}