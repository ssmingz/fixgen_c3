digraph "getNestedCreator#?,Project,String,Object,String,UnknownElement" {
0 [label="2:CtTypeReferenceImpl@NestedCreator" shape=ellipse]
1 [label="2:CtVirtualElement@getNestedCreator" shape=ellipse]
2 [label="3:CtParameterImpl@Project project" shape=ellipse]
3 [label="3:CtTypeReferenceImpl@Project" shape=ellipse]
4 [label="3:CtParameterImpl@String parentUri" shape=ellipse]
5 [label="3:CtTypeReferenceImpl@String" shape=ellipse]
6 [label="3:CtParameterImpl@Object parent" shape=ellipse]
7 [label="3:CtTypeReferenceImpl@Object" shape=ellipse]
8 [label="3:CtParameterImpl@String elementName" shape=ellipse]
9 [label="3:CtTypeReferenceImpl@String" shape=ellipse]
10 [label="3:CtParameterImpl@UnknownElement child" shape=ellipse]
11 [label="3:CtTypeReferenceImpl@UnknownElement" shape=ellipse]
12 [label="4:CtTypeReferenceImpl@BuildException" shape=ellipse]
13 [label="5:CtTypeReferenceImpl@String" shape=ellipse]
14 [label="5:CtExecutableReferenceImpl@extractUriFromComponentName(java.lang.String)" shape=ellipse]
15 [label="5:CtVirtualElement@extractUriFromComponentName" shape=ellipse]
16 [label="5:CtTypeAccessImpl@ProjectHelper" shape=ellipse]
17 [label="5:CtVariableReadImpl@elementName" shape=ellipse]
18 [label="5:CtInvocationImpl@ProjectHelper.extractUriFromComponentName(elementName)" shape=ellipse]
19 [label="5:CtVirtualElement@uri" shape=ellipse]
20 [label="5:CtLocalVariableImpl@String uri = ProjectHelper.extractUriFromComponentName(elementName)" shape=ellipse]
21 [label="6:CtTypeReferenceImpl@String" shape=ellipse]
22 [label="6:CtExecutableReferenceImpl@extractNameFromComponentName(java.lang.String)" shape=ellipse]
23 [label="6:CtVirtualElement@extractNameFromComponentName" shape=ellipse]
24 [label="6:CtTypeAccessImpl@ProjectHelper" shape=ellipse]
25 [label="6:CtVariableReadImpl@elementName" shape=ellipse]
26 [label="6:CtInvocationImpl@ProjectHelper.extractNameFromComponentName(elementName)" shape=ellipse]
27 [label="6:CtVirtualElement@name" shape=ellipse]
28 [label="6:CtLocalVariableImpl@String name = ProjectHelper.extractNameFromComponentName(elementName)" shape=ellipse]
29 [label="7:CtExecutableReferenceImpl@equals(java.lang.Object)" shape=ellipse]
30 [label="7:CtVirtualElement@equals" shape=ellipse]
31 [label="7:CtVariableReadImpl@uri" shape=ellipse]
32 [label="7:CtTypeAccessImpl@ANT_CORE_URI" shape=ellipse]
33 [label="7:CtInvocationImpl@uri.equals(ANT_CORE_URI)" shape=ellipse]
34 [label="8:CtVariableWriteImpl@uri" shape=ellipse]
35 [label="8:CtLiteralImpl@\"\"" shape=ellipse]
36 [label="8:CtAssignmentImpl@uri = \"\"" shape=ellipse]
37 [label="7:CtBlockImpl@\{
    uri = \"\";
\}" shape=ellipse]
38 [label="7:CtIfImpl@if (uri.equals(ANT_CORE_URI)) \{
    uri = \"\";
\}" shape=ellipse]
39 [label="10:CtExecutableReferenceImpl@equals(java.lang.Object)" shape=ellipse]
40 [label="10:CtVirtualElement@equals" shape=ellipse]
41 [label="10:CtVariableReadImpl@parentUri" shape=ellipse]
42 [label="10:CtTypeAccessImpl@ANT_CORE_URI" shape=ellipse]
43 [label="10:CtInvocationImpl@parentUri.equals(ANT_CORE_URI)" shape=ellipse]
44 [label="11:CtVariableWriteImpl@parentUri" shape=ellipse]
45 [label="11:CtLiteralImpl@\"\"" shape=ellipse]
46 [label="11:CtAssignmentImpl@parentUri = \"\"" shape=ellipse]
47 [label="10:CtBlockImpl@\{
    parentUri = \"\";
\}" shape=ellipse]
48 [label="10:CtIfImpl@if (parentUri.equals(ANT_CORE_URI)) \{
    parentUri = \"\";
\}" shape=ellipse]
49 [label="13:CtTypeReferenceImpl@NestedCreator" shape=ellipse]
50 [label="13:CtLiteralImpl@null" shape=ellipse]
51 [label="13:CtVirtualElement@nc" shape=ellipse]
52 [label="13:CtLocalVariableImpl@NestedCreator nc = null" shape=ellipse]
53 [label="14:CtExecutableReferenceImpl@equals(java.lang.Object)" shape=ellipse]
54 [label="14:CtVirtualElement@equals" shape=ellipse]
55 [label="14:CtVariableReadImpl@uri" shape=ellipse]
56 [label="14:CtVariableReadImpl@parentUri" shape=ellipse]
57 [label="14:CtInvocationImpl@uri.equals(parentUri)" shape=ellipse]
58 [label="15:CtVariableWriteImpl@nc" shape=ellipse]
59 [label="15:CtExecutableReferenceImpl@get()" shape=ellipse]
60 [label="15:CtVirtualElement@get" shape=ellipse]
61 [label="15:CtFieldReadImpl@nestedCreators" shape=ellipse]
62 [label="15:CtExecutableReferenceImpl@toLowerCase(java.util.Locale)" shape=ellipse]
63 [label="15:CtVirtualElement@toLowerCase" shape=ellipse]
64 [label="15:CtVariableReadImpl@name" shape=ellipse]
65 [label="15:CtTypeAccessImpl@US" shape=ellipse]
66 [label="15:CtInvocationImpl@name.toLowerCase(US)" shape=ellipse]
67 [label="15:CtInvocationImpl@((NestedCreator) (nestedCreators.get(name.toLowerCase(US))))" shape=ellipse]
68 [label="15:CtTypeReferenceImpl@NestedCreator" shape=ellipse]
69 [label="15:CtAssignmentImpl@nc = ((NestedCreator) (nestedCreators.get(name.toLowerCase(US))))" shape=ellipse]
70 [label="14:CtBlockImpl@\{
    nc = ((NestedCreator) (nestedCreators.get(name.toLowerCase(US))));
\}" shape=ellipse]
71 [label="14:CtIfImpl@if (uri.equals(parentUri)) \{
    nc = ((NestedCreator) (nestedCreators.get(name.toLowerCase(US))));
\}" shape=ellipse]
72 [label="17:CtVariableReadImpl@nc" shape=ellipse]
73 [label="17:CtLiteralImpl@null" shape=ellipse]
74 [label="17:CtBinaryOperatorImpl@nc == null" shape=ellipse]
75 [label="18:CtVariableWriteImpl@nc" shape=ellipse]
76 [label="18:CtExecutableReferenceImpl@createAddTypeCreator(<unknown>,java.lang.Object,java.lang.String)" shape=ellipse]
77 [label="18:CtVirtualElement@createAddTypeCreator" shape=ellipse]
78 [label="18:CtVariableReadImpl@project" shape=ellipse]
79 [label="18:CtVariableReadImpl@parent" shape=ellipse]
80 [label="18:CtVariableReadImpl@elementName" shape=ellipse]
81 [label="18:CtInvocationImpl@createAddTypeCreator(project, parent, elementName)" shape=ellipse]
82 [label="18:CtAssignmentImpl@nc = createAddTypeCreator(project, parent, elementName)" shape=ellipse]
83 [label="17:CtBlockImpl@\{
    nc = createAddTypeCreator(project, parent, elementName);
\}" shape=ellipse]
84 [label="17:CtIfImpl@if (nc == null) \{
    nc = createAddTypeCreator(project, parent, elementName);
\}" shape=ellipse]
85 [label="20:CtVariableReadImpl@nc" shape=ellipse]
86 [label="20:CtLiteralImpl@null" shape=ellipse]
87 [label="20:CtBinaryOperatorImpl@(nc == null)" shape=ellipse]
88 [label="20:CtVariableReadImpl@parent" shape=ellipse]
89 [label="20:CtTypeAccessImpl@DynamicElementNS" shape=ellipse]
90 [label="20:CtTypeReferenceImpl@DynamicElementNS" shape=ellipse]
91 [label="20:CtBinaryOperatorImpl@(parent instanceof DynamicElementNS)" shape=ellipse]
92 [label="20:CtBinaryOperatorImpl@(nc == null) && (parent instanceof DynamicElementNS)" shape=ellipse]
93 [label="21:CtTypeReferenceImpl@DynamicElementNS" shape=ellipse]
94 [label="21:CtVariableReadImpl@((DynamicElementNS) (parent))" shape=ellipse]
95 [label="21:CtTypeReferenceImpl@DynamicElementNS" shape=ellipse]
96 [label="21:CtVirtualElement@dc" shape=ellipse]
97 [label="21:CtLocalVariableImpl@DynamicElementNS dc = ((DynamicElementNS) (parent))" shape=ellipse]
98 [label="22:CtTypeReferenceImpl@String" shape=ellipse]
99 [label="22:CtVariableReadImpl@child" shape=ellipse]
100 [label="22:CtLiteralImpl@null" shape=ellipse]
101 [label="22:CtBinaryOperatorImpl@child == null" shape=ellipse]
102 [label="22:CtVariableReadImpl@name" shape=ellipse]
103 [label="22:CtExecutableReferenceImpl@getQName()" shape=ellipse]
104 [label="22:CtVirtualElement@getQName" shape=ellipse]
105 [label="22:CtVariableReadImpl@child" shape=ellipse]
106 [label="22:CtInvocationImpl@child.getQName()" shape=ellipse]
107 [label="22:CtConditionalImpl@(child == null) ? name : child.getQName()" shape=ellipse]
108 [label="22:CtVirtualElement@qName" shape=ellipse]
109 [label="22:CtLocalVariableImpl@String qName = (child == null) ? name : child.getQName()" shape=ellipse]
110 [label="23:CtTypeReferenceImpl@Object" shape=ellipse]
111 [label="24:CtExecutableReferenceImpl@createDynamicElement(java.lang.String,java.lang.String)" shape=ellipse]
112 [label="24:CtVirtualElement@createDynamicElement" shape=ellipse]
113 [label="24:CtVariableReadImpl@dc" shape=ellipse]
114 [label="24:CtVariableReadImpl@child" shape=ellipse]
115 [label="24:CtLiteralImpl@null" shape=ellipse]
116 [label="24:CtBinaryOperatorImpl@child == null" shape=ellipse]
117 [label="24:CtLiteralImpl@\"\"" shape=ellipse]
118 [label="24:CtExecutableReferenceImpl@getNamespace()" shape=ellipse]
119 [label="24:CtVirtualElement@getNamespace" shape=ellipse]
120 [label="24:CtVariableReadImpl@child" shape=ellipse]
121 [label="24:CtInvocationImpl@child.getNamespace()" shape=ellipse]
122 [label="24:CtConditionalImpl@child == null ? \"\" : child.getNamespace()" shape=ellipse]
123 [label="24:CtVariableReadImpl@name" shape=ellipse]
124 [label="24:CtVariableReadImpl@qName" shape=ellipse]
125 [label="24:CtInvocationImpl@dc.createDynamicElement(child == null ? \"\" : child.getNamespace(), name, qName)" shape=ellipse]
126 [label="23:CtVirtualElement@nestedElement" shape=ellipse]
127 [label="23:CtLocalVariableImpl@final Object nestedElement = dc.createDynamicElement(child == null ? \"\" : child.getNamespace(), name, qName)" shape=ellipse]
128 [label="25:CtVariableReadImpl@nestedElement" shape=ellipse]
129 [label="25:CtLiteralImpl@null" shape=ellipse]
130 [label="25:CtBinaryOperatorImpl@nestedElement != null" shape=ellipse]
131 [label="26:CtVariableWriteImpl@nc" shape=ellipse]
132 [label="27:CtTypeReferenceImpl@NestedCreator" shape=ellipse]
133 [label="27:CtNewClassImpl@new NestedCreator() \{
    public boolean isPolyMorphic() \{
        return false;
    \}

    public Class getElementClass() \{
        return null;
    \}

    public Object getRealObject() \{
        return null;
    \}

    public Object create(Project project, Object parent, Object ignore) \{
        return nestedElement;
    \}

    public void store(Object parent, Object child) \{
    \}
\}" shape=ellipse]
134 [label="27:CtClassImpl@ \{
    public boolean isPolyMorphic() \{
        return false;
    \}

    public Class getElementClass() \{
        return null;
    \}

    public Object getRealObject() \{
        return null;
    \}

    public Object create(Project project, Object parent, Object ignore) \{
        return nestedElement;
    \}

    public void store(Object parent, Object child) \{
    \}
\}" shape=ellipse]
135 [label="26:CtAssignmentImpl@nc = new NestedCreator() \{
    public boolean isPolyMorphic() \{
        return false;
    \}

    public Class getElementClass() \{
        return null;
    \}

    public Object getRealObject() \{
        return null;
    \}

    public Object create(Project project, Object parent, Object ignore) \{
        return nestedElement;
    \}

    public void store(Object parent, Object child) \{
    \}
\}" shape=ellipse]
136 [label="25:CtBlockImpl@\{
    nc = new NestedCreator() \{
        public boolean isPolyMorphic() \{
            return false;
        \}

        public Class getElementClass() \{
            return null;
        \}

        public Object getRealObject() \{
            return null;
        \}

        public Object create(Project project, Object parent, Object ignore) \{
            return nestedElement;
        \}

        public void store(Object parent, Object child) \{
        \}
    \};
\}" shape=ellipse]
137 [label="25:CtIfImpl@if (nestedElement != null) \{
    nc = new NestedCreator() \{
        public boolean isPolyMorphic() \{
            return false;
        \}

        public Class getElementClass() \{
            return null;
        \}

        public Object getRealObject() \{
            return null;
        \}

        public Object create(Project project, Object parent, Object ignore) \{
            return nestedElement;
        \}

        public void store(Object parent, Object child) \{
        \}
    \};
\}" shape=ellipse]
138 [label="20:CtBlockImpl@\{
    DynamicElementNS dc = ((DynamicElementNS) (parent));
    String qName = (child == null) ? name : child.getQName();
    final Object nestedElement = dc.createDynamicElement(child == null ? \"\" : child.getNamespace(), name, qName);
    if (nestedElement != null) \{
        nc = new NestedCreator() \{
            public boolean isPolyMorphic() \{
                return false;
            \}

            public Class getElementClass() \{
                return null;
            \}

            public Object getRealObject() \{
                return null;
            \}

            public Object create(Project project, Object parent, Object ignore) \{
                return nestedElement;
            \}

            public void store(Object parent, Object child) \{
            \}
        \};
    \}
\}" shape=ellipse]
139 [label="20:CtIfImpl@if ((nc == null) && (parent instanceof DynamicElementNS)) \{
    DynamicElementNS dc = ((DynamicElementNS) (parent));
    String qName = (child == null) ? name : child.getQName();
    final Object nestedElement = dc.createDynamicElement(child == null ? \"\" : child.getNamespace(), name, qName);
    if (nestedElement != null) \{
        nc = new NestedCreator() \{
            public boolean isPolyMorphic() \{
                return false;
            \}

            public Class getElementClass() \{
                return null;
            \}

            public Object getRealObject() \{
                return null;
            \}

            public Object create(Project project, Object parent, Object ignore) \{
                return nestedElement;
            \}

            public void store(Object parent, Object child) \{
            \}
        \};
    \}
\}" shape=ellipse]
140 [label="48:CtVariableReadImpl@nc" shape=ellipse]
141 [label="48:CtLiteralImpl@null" shape=ellipse]
142 [label="48:CtBinaryOperatorImpl@(nc == null)" shape=ellipse]
143 [label="48:CtVariableReadImpl@parent" shape=ellipse]
144 [label="48:CtTypeAccessImpl@DynamicElement" shape=ellipse]
145 [label="48:CtTypeReferenceImpl@DynamicElement" shape=ellipse]
146 [label="48:CtBinaryOperatorImpl@(parent instanceof DynamicElement)" shape=ellipse]
147 [label="48:CtBinaryOperatorImpl@(nc == null) && (parent instanceof DynamicElement)" shape=ellipse]
148 [label="49:CtTypeReferenceImpl@DynamicElement" shape=ellipse]
149 [label="49:CtVariableReadImpl@((DynamicElement) (parent))" shape=ellipse]
150 [label="49:CtTypeReferenceImpl@DynamicElement" shape=ellipse]
151 [label="49:CtVirtualElement@dc" shape=ellipse]
152 [label="49:CtLocalVariableImpl@DynamicElement dc = ((DynamicElement) (parent))" shape=ellipse]
153 [label="50:CtTypeReferenceImpl@Object" shape=ellipse]
154 [label="50:CtExecutableReferenceImpl@createDynamicElement()" shape=ellipse]
155 [label="50:CtVirtualElement@createDynamicElement" shape=ellipse]
156 [label="50:CtVariableReadImpl@dc" shape=ellipse]
157 [label="50:CtExecutableReferenceImpl@toLowerCase(java.util.Locale)" shape=ellipse]
158 [label="50:CtVirtualElement@toLowerCase" shape=ellipse]
159 [label="50:CtVariableReadImpl@name" shape=ellipse]
160 [label="50:CtTypeAccessImpl@US" shape=ellipse]
161 [label="50:CtInvocationImpl@name.toLowerCase(US)" shape=ellipse]
162 [label="50:CtInvocationImpl@dc.createDynamicElement(name.toLowerCase(US))" shape=ellipse]
163 [label="50:CtVirtualElement@nestedElement" shape=ellipse]
164 [label="50:CtLocalVariableImpl@final Object nestedElement = dc.createDynamicElement(name.toLowerCase(US))" shape=ellipse]
165 [label="51:CtVariableReadImpl@nestedElement" shape=ellipse]
166 [label="51:CtLiteralImpl@null" shape=ellipse]
167 [label="51:CtBinaryOperatorImpl@nestedElement != null" shape=ellipse]
168 [label="52:CtVariableWriteImpl@nc" shape=ellipse]
169 [label="53:CtTypeReferenceImpl@NestedCreator" shape=ellipse]
170 [label="53:CtNewClassImpl@new NestedCreator() \{
    public boolean isPolyMorphic() \{
        return false;
    \}

    public Class getElementClass() \{
        return null;
    \}

    public Object getRealObject() \{
        return null;
    \}

    public Object create(Project project, Object parent, Object ignore) \{
        return nestedElement;
    \}

    public void store(Object parent, Object child) \{
    \}
\}" shape=ellipse]
171 [label="53:CtClassImpl@ \{
    public boolean isPolyMorphic() \{
        return false;
    \}

    public Class getElementClass() \{
        return null;
    \}

    public Object getRealObject() \{
        return null;
    \}

    public Object create(Project project, Object parent, Object ignore) \{
        return nestedElement;
    \}

    public void store(Object parent, Object child) \{
    \}
\}" shape=ellipse]
172 [label="52:CtAssignmentImpl@nc = new NestedCreator() \{
    public boolean isPolyMorphic() \{
        return false;
    \}

    public Class getElementClass() \{
        return null;
    \}

    public Object getRealObject() \{
        return null;
    \}

    public Object create(Project project, Object parent, Object ignore) \{
        return nestedElement;
    \}

    public void store(Object parent, Object child) \{
    \}
\}" shape=ellipse]
173 [label="51:CtBlockImpl@\{
    nc = new NestedCreator() \{
        public boolean isPolyMorphic() \{
            return false;
        \}

        public Class getElementClass() \{
            return null;
        \}

        public Object getRealObject() \{
            return null;
        \}

        public Object create(Project project, Object parent, Object ignore) \{
            return nestedElement;
        \}

        public void store(Object parent, Object child) \{
        \}
    \};
\}" shape=ellipse]
174 [label="51:CtIfImpl@if (nestedElement != null) \{
    nc = new NestedCreator() \{
        public boolean isPolyMorphic() \{
            return false;
        \}

        public Class getElementClass() \{
            return null;
        \}

        public Object getRealObject() \{
            return null;
        \}

        public Object create(Project project, Object parent, Object ignore) \{
            return nestedElement;
        \}

        public void store(Object parent, Object child) \{
        \}
    \};
\}" shape=ellipse]
175 [label="48:CtBlockImpl@\{
    DynamicElement dc = ((DynamicElement) (parent));
    final Object nestedElement = dc.createDynamicElement(name.toLowerCase(US));
    if (nestedElement != null) \{
        nc = new NestedCreator() \{
            public boolean isPolyMorphic() \{
                return false;
            \}

            public Class getElementClass() \{
                return null;
            \}

            public Object getRealObject() \{
                return null;
            \}

            public Object create(Project project, Object parent, Object ignore) \{
                return nestedElement;
            \}

            public void store(Object parent, Object child) \{
            \}
        \};
    \}
\}" shape=ellipse]
176 [label="48:CtIfImpl@if ((nc == null) && (parent instanceof DynamicElement)) \{
    DynamicElement dc = ((DynamicElement) (parent));
    final Object nestedElement = dc.createDynamicElement(name.toLowerCase(US));
    if (nestedElement != null) \{
        nc = new NestedCreator() \{
            public boolean isPolyMorphic() \{
                return false;
            \}

            public Class getElementClass() \{
                return null;
            \}

            public Object getRealObject() \{
                return null;
            \}

            public Object create(Project project, Object parent, Object ignore) \{
                return nestedElement;
            \}

            public void store(Object parent, Object child) \{
            \}
        \};
    \}
\}" shape=ellipse]
177 [label="74:CtVariableReadImpl@nc" shape=ellipse]
178 [label="74:CtLiteralImpl@null" shape=ellipse]
179 [label="74:CtBinaryOperatorImpl@nc == null" shape=ellipse]
180 [label="75:CtExecutableReferenceImpl@throwNotSupported(<unknown>,java.lang.Object,java.lang.String)" shape=ellipse]
181 [label="75:CtVirtualElement@throwNotSupported" shape=ellipse]
182 [label="75:CtVariableReadImpl@project" shape=ellipse]
183 [label="75:CtVariableReadImpl@parent" shape=ellipse]
184 [label="75:CtVariableReadImpl@elementName" shape=ellipse]
185 [label="75:CtInvocationImpl@throwNotSupported(project, parent, elementName)" shape=ellipse]
186 [label="74:CtBlockImpl@\{
    throwNotSupported(project, parent, elementName);
\}" shape=ellipse]
187 [label="74:CtIfImpl@if (nc == null) \{
    throwNotSupported(project, parent, elementName);
\}" shape=ellipse]
188 [label="77:CtVariableReadImpl@nc" shape=ellipse]
189 [label="77:CtReturnImpl@return nc" shape=ellipse]
190 [label="4:CtBlockImpl@\{
    String uri = ProjectHelper.extractUriFromComponentName(elementName);
    String name = ProjectHelper.extractNameFromComponentName(elementName);
    if (uri.equals(ANT_CORE_URI)) \{
        uri = \"\";
    \}
    if (parentUri.equals(ANT_CORE_URI)) \{
        parentUri = \"\";
    \}
    NestedCreator nc = null;
    if (uri.equals(parentUri)) \{
        nc = ((NestedCreator) (nestedCreators.get(name.toLowerCase(US))));
    \}
    if (nc == null) \{
        nc = createAddTypeCreator(project, parent, elementName);
    \}
    if ((nc == null) && (parent instanceof DynamicElementNS)) \{
        DynamicElementNS dc = ((DynamicElementNS) (parent));
        String qName = (child == null) ? name : child.getQName();
        final Object nestedElement = dc.createDynamicElement(child == null ? \"\" : child.getNamespace(), name, qName);
        if (nestedElement != null) \{
            nc = new NestedCreator() \{
                public boolean isPolyMorphic() \{
                    return false;
                \}

                public Class getElementClass() \{
                    return null;
                \}

                public Object getRealObject() \{
                    return null;
                \}

                public Object create(Project project, Object parent, Object ignore) \{
                    return nestedElement;
                \}

                public void store(Object parent, Object child) \{
                \}
            \};
        \}
    \}
    if ((nc == null) && (parent instanceof DynamicElement)) \{
        DynamicElement dc = ((DynamicElement) (parent));
        final Object nestedElement = dc.createDynamicElement(name.toLowerCase(US));
        if (nestedElement != null) \{
            nc = new NestedCreator() \{
                public boolean isPolyMorphic() \{
                    return false;
                \}

                public Class getElementClass() \{
                    return null;
                \}

                public Object getRealObject() \{
                    return null;
                \}

                public Object create(Project project, Object parent, Object ignore) \{
                    return nestedElement;
                \}

                public void store(Object parent, Object child) \{
                \}
            \};
        \}
    \}
    if (nc == null) \{
        throwNotSupported(project, parent, elementName);
    \}
    return nc;
\}" shape=ellipse]
191 [label="2:CtMethodImpl@private NestedCreator getNestedCreator(Project project, String parentUri, Object parent, String elementName, UnknownElement child) throws BuildException \{
    String uri = ProjectHelper.extractUriFromComponentName(elementName);
    String name = ProjectHelper.extractNameFromComponentName(elementName);
    if (uri.equals(ANT_CORE_URI)) \{
        uri = \"\";
    \}
    if (parentUri.equals(ANT_CORE_URI)) \{
        parentUri = \"\";
    \}
    NestedCreator nc = null;
    if (uri.equals(parentUri)) \{
        nc = ((NestedCreator) (nestedCreators.get(name.toLowerCase(US))));
    \}
    if (nc == null) \{
        nc = createAddTypeCreator(project, parent, elementName);
    \}
    if ((nc == null) && (parent instanceof DynamicElementNS)) \{
        DynamicElementNS dc = ((DynamicElementNS) (parent));
        String qName = (child == null) ? name : child.getQName();
        final Object nestedElement = dc.createDynamicElement(child == null ? \"\" : child.getNamespace(), name, qName);
        if (nestedElement != null) \{
            nc = new NestedCreator() \{
                public boolean isPolyMorphic() \{
                    return false;
                \}

                public Class getElementClass() \{
                    return null;
                \}

                public Object getRealObject() \{
                    return null;
                \}

                public Object create(Project project, Object parent, Object ignore) \{
                    return nestedElement;
                \}

                public void store(Object parent, Object child) \{
                \}
            \};
        \}
    \}
    if ((nc == null) && (parent instanceof DynamicElement)) \{
        DynamicElement dc = ((DynamicElement) (parent));
        final Object nestedElement = dc.createDynamicElement(name.toLowerCase(US));
        if (nestedElement != null) \{
            nc = new NestedCreator() \{
                public boolean isPolyMorphic() \{
                    return false;
                \}

                public Class getElementClass() \{
                    return null;
                \}

                public Object getRealObject() \{
                    return null;
                \}

                public Object create(Project project, Object parent, Object ignore) \{
                    return nestedElement;
                \}

                public void store(Object parent, Object child) \{
                \}
            \};
        \}
    \}
    if (nc == null) \{
        throwNotSupported(project, parent, elementName);
    \}
    return nc;
\}" shape=ellipse]
192 [label="14:Insert@INSERT" shape=ellipse]
193 [label="14:CtBinaryOperatorImpl@uri.equals(parentUri) || uri.equals(\"\")" shape=ellipse]
194 [label="14:Move@MOVE" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
6 -> 7 [label="AST"];
8 -> 9 [label="AST"];
10 -> 11 [label="AST"];
17 -> 19 [label="Data Dep"];
18 -> 15 [label="AST"];
18 -> 16 [label="AST"];
18 -> 14 [label="AST"];
18 -> 17 [label="AST"];
19 -> 31 [label="Define-Use"];
19 -> 55 [label="Define-Use"];
20 -> 19 [label="AST"];
20 -> 13 [label="AST"];
20 -> 18 [label="AST"];
25 -> 27 [label="Data Dep"];
26 -> 23 [label="AST"];
26 -> 24 [label="AST"];
26 -> 22 [label="AST"];
26 -> 25 [label="AST"];
27 -> 64 [label="Define-Use"];
27 -> 102 [label="Define-Use"];
27 -> 123 [label="Define-Use"];
27 -> 159 [label="Define-Use"];
28 -> 27 [label="AST"];
28 -> 21 [label="AST"];
28 -> 26 [label="AST"];
33 -> 30 [label="AST"];
33 -> 31 [label="AST"];
33 -> 29 [label="AST"];
33 -> 32 [label="AST"];
33 -> 37 [label="Control Dep"];
33 -> 36 [label="Control Dep"];
33 -> 34 [label="Control Dep"];
33 -> 35 [label="Control Dep"];
34 -> 55 [label="Define-Use"];
36 -> 34 [label="AST"];
36 -> 35 [label="AST"];
37 -> 36 [label="AST"];
38 -> 33 [label="AST"];
38 -> 37 [label="AST"];
43 -> 40 [label="AST"];
43 -> 41 [label="AST"];
43 -> 39 [label="AST"];
43 -> 42 [label="AST"];
43 -> 47 [label="Control Dep"];
43 -> 46 [label="Control Dep"];
43 -> 44 [label="Control Dep"];
43 -> 45 [label="Control Dep"];
44 -> 56 [label="Define-Use"];
46 -> 44 [label="AST"];
46 -> 45 [label="AST"];
47 -> 46 [label="AST"];
48 -> 43 [label="AST"];
48 -> 47 [label="AST"];
51 -> 72 [label="Define-Use"];
51 -> 85 [label="Define-Use"];
51 -> 140 [label="Define-Use"];
51 -> 177 [label="Define-Use"];
51 -> 188 [label="Define-Use"];
52 -> 51 [label="AST"];
52 -> 49 [label="AST"];
52 -> 50 [label="AST"];
57 -> 54 [label="AST"];
57 -> 55 [label="AST"];
57 -> 53 [label="AST"];
57 -> 56 [label="AST"];
57 -> 70 [label="Control Dep"];
57 -> 69 [label="Control Dep"];
57 -> 58 [label="Control Dep"];
57 -> 67 [label="Control Dep"];
57 -> 59 [label="Control Dep"];
57 -> 61 [label="Control Dep"];
57 -> 66 [label="Control Dep"];
57 -> 62 [label="Control Dep"];
57 -> 64 [label="Control Dep"];
57 -> 65 [label="Control Dep"];
57 -> 194 [label="Action"];
58 -> 72 [label="Define-Use"];
58 -> 85 [label="Define-Use"];
58 -> 140 [label="Define-Use"];
58 -> 177 [label="Define-Use"];
58 -> 188 [label="Define-Use"];
61 -> 58 [label="Data Dep"];
64 -> 58 [label="Data Dep"];
66 -> 63 [label="AST"];
66 -> 64 [label="AST"];
66 -> 62 [label="AST"];
66 -> 65 [label="AST"];
67 -> 60 [label="AST"];
67 -> 68 [label="AST"];
67 -> 61 [label="AST"];
67 -> 59 [label="AST"];
67 -> 66 [label="AST"];
69 -> 58 [label="AST"];
69 -> 67 [label="AST"];
70 -> 69 [label="AST"];
71 -> 57 [label="AST"];
71 -> 70 [label="AST"];
71 -> 192 [label="Action"];
74 -> 72 [label="AST"];
74 -> 73 [label="AST"];
74 -> 83 [label="Control Dep"];
74 -> 82 [label="Control Dep"];
74 -> 75 [label="Control Dep"];
74 -> 81 [label="Control Dep"];
74 -> 76 [label="Control Dep"];
74 -> 78 [label="Control Dep"];
74 -> 79 [label="Control Dep"];
74 -> 80 [label="Control Dep"];
75 -> 85 [label="Define-Use"];
75 -> 140 [label="Define-Use"];
75 -> 177 [label="Define-Use"];
75 -> 188 [label="Define-Use"];
78 -> 75 [label="Data Dep"];
79 -> 75 [label="Data Dep"];
80 -> 75 [label="Data Dep"];
81 -> 77 [label="AST"];
81 -> 76 [label="AST"];
81 -> 78 [label="AST"];
81 -> 79 [label="AST"];
81 -> 80 [label="AST"];
82 -> 75 [label="AST"];
82 -> 81 [label="AST"];
83 -> 82 [label="AST"];
84 -> 74 [label="AST"];
84 -> 83 [label="AST"];
87 -> 85 [label="AST"];
87 -> 86 [label="AST"];
89 -> 90 [label="AST"];
91 -> 88 [label="AST"];
91 -> 89 [label="AST"];
92 -> 87 [label="AST"];
92 -> 91 [label="AST"];
92 -> 138 [label="Control Dep"];
92 -> 97 [label="Control Dep"];
92 -> 94 [label="Control Dep"];
92 -> 109 [label="Control Dep"];
92 -> 107 [label="Control Dep"];
92 -> 101 [label="Control Dep"];
92 -> 99 [label="Control Dep"];
92 -> 100 [label="Control Dep"];
92 -> 127 [label="Control Dep"];
92 -> 125 [label="Control Dep"];
92 -> 111 [label="Control Dep"];
92 -> 113 [label="Control Dep"];
92 -> 122 [label="Control Dep"];
92 -> 116 [label="Control Dep"];
92 -> 114 [label="Control Dep"];
92 -> 115 [label="Control Dep"];
92 -> 123 [label="Control Dep"];
92 -> 124 [label="Control Dep"];
92 -> 137 [label="Control Dep"];
92 -> 130 [label="Control Dep"];
92 -> 128 [label="Control Dep"];
92 -> 129 [label="Control Dep"];
94 -> 95 [label="AST"];
94 -> 96 [label="Data Dep"];
96 -> 113 [label="Define-Use"];
96 -> 156 [label="Define-Use"];
97 -> 96 [label="AST"];
97 -> 93 [label="AST"];
97 -> 94 [label="AST"];
99 -> 108 [label="Data Dep"];
101 -> 99 [label="AST"];
101 -> 100 [label="AST"];
101 -> 102 [label="Control Dep"];
101 -> 106 [label="Control Dep"];
101 -> 103 [label="Control Dep"];
101 -> 105 [label="Control Dep"];
102 -> 108 [label="Data Dep"];
105 -> 108 [label="Data Dep"];
106 -> 104 [label="AST"];
106 -> 105 [label="AST"];
106 -> 103 [label="AST"];
107 -> 101 [label="AST"];
107 -> 102 [label="AST"];
107 -> 106 [label="AST"];
108 -> 124 [label="Define-Use"];
109 -> 108 [label="AST"];
109 -> 98 [label="AST"];
109 -> 107 [label="AST"];
113 -> 126 [label="Data Dep"];
114 -> 126 [label="Data Dep"];
116 -> 114 [label="AST"];
116 -> 115 [label="AST"];
116 -> 117 [label="Control Dep"];
116 -> 121 [label="Control Dep"];
116 -> 118 [label="Control Dep"];
116 -> 120 [label="Control Dep"];
120 -> 126 [label="Data Dep"];
121 -> 119 [label="AST"];
121 -> 120 [label="AST"];
121 -> 118 [label="AST"];
122 -> 116 [label="AST"];
122 -> 117 [label="AST"];
122 -> 121 [label="AST"];
123 -> 126 [label="Data Dep"];
124 -> 126 [label="Data Dep"];
125 -> 112 [label="AST"];
125 -> 113 [label="AST"];
125 -> 111 [label="AST"];
125 -> 122 [label="AST"];
125 -> 123 [label="AST"];
125 -> 124 [label="AST"];
126 -> 128 [label="Define-Use"];
126 -> 165 [label="Define-Use"];
127 -> 126 [label="AST"];
127 -> 110 [label="AST"];
127 -> 125 [label="AST"];
130 -> 128 [label="AST"];
130 -> 129 [label="AST"];
130 -> 136 [label="Control Dep"];
130 -> 135 [label="Control Dep"];
130 -> 131 [label="Control Dep"];
130 -> 133 [label="Control Dep"];
131 -> 140 [label="Define-Use"];
131 -> 177 [label="Define-Use"];
131 -> 188 [label="Define-Use"];
133 -> 134 [label="AST"];
135 -> 131 [label="AST"];
135 -> 133 [label="AST"];
136 -> 135 [label="AST"];
137 -> 130 [label="AST"];
137 -> 136 [label="AST"];
138 -> 97 [label="AST"];
138 -> 109 [label="AST"];
138 -> 127 [label="AST"];
138 -> 137 [label="AST"];
139 -> 92 [label="AST"];
139 -> 138 [label="AST"];
142 -> 140 [label="AST"];
142 -> 141 [label="AST"];
144 -> 145 [label="AST"];
146 -> 143 [label="AST"];
146 -> 144 [label="AST"];
147 -> 142 [label="AST"];
147 -> 146 [label="AST"];
147 -> 175 [label="Control Dep"];
147 -> 152 [label="Control Dep"];
147 -> 149 [label="Control Dep"];
147 -> 164 [label="Control Dep"];
147 -> 162 [label="Control Dep"];
147 -> 154 [label="Control Dep"];
147 -> 156 [label="Control Dep"];
147 -> 161 [label="Control Dep"];
147 -> 157 [label="Control Dep"];
147 -> 159 [label="Control Dep"];
147 -> 160 [label="Control Dep"];
147 -> 174 [label="Control Dep"];
147 -> 167 [label="Control Dep"];
147 -> 165 [label="Control Dep"];
147 -> 166 [label="Control Dep"];
149 -> 150 [label="AST"];
149 -> 151 [label="Data Dep"];
151 -> 156 [label="Define-Use"];
152 -> 151 [label="AST"];
152 -> 148 [label="AST"];
152 -> 149 [label="AST"];
156 -> 163 [label="Data Dep"];
159 -> 163 [label="Data Dep"];
161 -> 158 [label="AST"];
161 -> 159 [label="AST"];
161 -> 157 [label="AST"];
161 -> 160 [label="AST"];
162 -> 155 [label="AST"];
162 -> 156 [label="AST"];
162 -> 154 [label="AST"];
162 -> 161 [label="AST"];
163 -> 165 [label="Define-Use"];
164 -> 163 [label="AST"];
164 -> 153 [label="AST"];
164 -> 162 [label="AST"];
167 -> 165 [label="AST"];
167 -> 166 [label="AST"];
167 -> 173 [label="Control Dep"];
167 -> 172 [label="Control Dep"];
167 -> 168 [label="Control Dep"];
167 -> 170 [label="Control Dep"];
168 -> 177 [label="Define-Use"];
168 -> 188 [label="Define-Use"];
170 -> 171 [label="AST"];
172 -> 168 [label="AST"];
172 -> 170 [label="AST"];
173 -> 172 [label="AST"];
174 -> 167 [label="AST"];
174 -> 173 [label="AST"];
175 -> 152 [label="AST"];
175 -> 164 [label="AST"];
175 -> 174 [label="AST"];
176 -> 147 [label="AST"];
176 -> 175 [label="AST"];
179 -> 177 [label="AST"];
179 -> 178 [label="AST"];
179 -> 186 [label="Control Dep"];
179 -> 185 [label="Control Dep"];
179 -> 180 [label="Control Dep"];
179 -> 182 [label="Control Dep"];
179 -> 183 [label="Control Dep"];
179 -> 184 [label="Control Dep"];
185 -> 181 [label="AST"];
185 -> 180 [label="AST"];
185 -> 182 [label="AST"];
185 -> 183 [label="AST"];
185 -> 184 [label="AST"];
186 -> 185 [label="AST"];
187 -> 179 [label="AST"];
187 -> 186 [label="AST"];
189 -> 188 [label="AST"];
190 -> 20 [label="AST"];
190 -> 28 [label="AST"];
190 -> 38 [label="AST"];
190 -> 48 [label="AST"];
190 -> 52 [label="AST"];
190 -> 71 [label="AST"];
190 -> 84 [label="AST"];
190 -> 139 [label="AST"];
190 -> 176 [label="AST"];
190 -> 187 [label="AST"];
190 -> 189 [label="AST"];
191 -> 1 [label="AST"];
191 -> 0 [label="AST"];
191 -> 2 [label="AST"];
191 -> 4 [label="AST"];
191 -> 6 [label="AST"];
191 -> 8 [label="AST"];
191 -> 10 [label="AST"];
191 -> 12 [label="AST"];
191 -> 190 [label="AST"];
192 -> 193 [label="Action"];
194 -> 193 [label="Action"];
}