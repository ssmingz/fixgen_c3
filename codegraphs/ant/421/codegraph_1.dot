digraph "supportsNestedElement#?,String,String" {
0 [label="2:CtTypeReferenceImpl@boolean" shape=ellipse]
1 [label="2:CtVirtualElement@supportsNestedElement" shape=ellipse]
2 [label="2:CtParameterImpl@String parentUri" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
4 [label="2:CtParameterImpl@String elementName" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
6 [label="3:CtExecutableReferenceImpl@equals(java.lang.Object)" shape=ellipse]
7 [label="3:CtVirtualElement@equals" shape=ellipse]
8 [label="3:CtVariableReadImpl@parentUri" shape=ellipse]
9 [label="3:CtTypeAccessImpl@ANT_CORE_URI" shape=ellipse]
10 [label="3:CtInvocationImpl@parentUri.equals(ANT_CORE_URI)" shape=ellipse]
11 [label="4:CtVariableWriteImpl@parentUri" shape=ellipse]
12 [label="4:CtLiteralImpl@\"\"" shape=ellipse]
13 [label="4:CtAssignmentImpl@parentUri = \"\"" shape=ellipse]
14 [label="3:CtBlockImpl@\{
    parentUri = \"\";
\}" shape=ellipse]
15 [label="3:CtIfImpl@if (parentUri.equals(ANT_CORE_URI)) \{
    parentUri = \"\";
\}" shape=ellipse]
16 [label="6:CtTypeReferenceImpl@String" shape=ellipse]
17 [label="6:CtExecutableReferenceImpl@extractUriFromComponentName(java.lang.String)" shape=ellipse]
18 [label="6:CtVirtualElement@extractUriFromComponentName" shape=ellipse]
19 [label="6:CtTypeAccessImpl@ProjectHelper" shape=ellipse]
20 [label="6:CtVariableReadImpl@elementName" shape=ellipse]
21 [label="6:CtInvocationImpl@ProjectHelper.extractUriFromComponentName(elementName)" shape=ellipse]
22 [label="6:CtVirtualElement@uri" shape=ellipse]
23 [label="6:CtLocalVariableImpl@String uri = ProjectHelper.extractUriFromComponentName(elementName)" shape=ellipse]
24 [label="7:CtExecutableReferenceImpl@equals(java.lang.Object)" shape=ellipse]
25 [label="7:CtVirtualElement@equals" shape=ellipse]
26 [label="7:CtVariableReadImpl@uri" shape=ellipse]
27 [label="7:CtTypeAccessImpl@ANT_CORE_URI" shape=ellipse]
28 [label="7:CtInvocationImpl@uri.equals(ANT_CORE_URI)" shape=ellipse]
29 [label="8:CtVariableWriteImpl@uri" shape=ellipse]
30 [label="8:CtLiteralImpl@\"\"" shape=ellipse]
31 [label="8:CtAssignmentImpl@uri = \"\"" shape=ellipse]
32 [label="7:CtBlockImpl@\{
    uri = \"\";
\}" shape=ellipse]
33 [label="7:CtIfImpl@if (uri.equals(ANT_CORE_URI)) \{
    uri = \"\";
\}" shape=ellipse]
34 [label="10:CtTypeReferenceImpl@String" shape=ellipse]
35 [label="10:CtExecutableReferenceImpl@extractNameFromComponentName(java.lang.String)" shape=ellipse]
36 [label="10:CtVirtualElement@extractNameFromComponentName" shape=ellipse]
37 [label="10:CtTypeAccessImpl@ProjectHelper" shape=ellipse]
38 [label="10:CtVariableReadImpl@elementName" shape=ellipse]
39 [label="10:CtInvocationImpl@ProjectHelper.extractNameFromComponentName(elementName)" shape=ellipse]
40 [label="10:CtVirtualElement@name" shape=ellipse]
41 [label="10:CtLocalVariableImpl@String name = ProjectHelper.extractNameFromComponentName(elementName)" shape=ellipse]
42 [label="11:CtExecutableReferenceImpl@containsKey()" shape=ellipse]
43 [label="11:CtVirtualElement@containsKey" shape=ellipse]
44 [label="11:CtFieldReadImpl@nestedCreators" shape=ellipse]
45 [label="11:CtExecutableReferenceImpl@toLowerCase(java.util.Locale)" shape=ellipse]
46 [label="11:CtVirtualElement@toLowerCase" shape=ellipse]
47 [label="11:CtVariableReadImpl@name" shape=ellipse]
48 [label="11:CtTypeAccessImpl@US" shape=ellipse]
49 [label="11:CtInvocationImpl@name.toLowerCase(US)" shape=ellipse]
50 [label="11:CtInvocationImpl@nestedCreators.containsKey(name.toLowerCase(US))" shape=ellipse]
51 [label="11:CtExecutableReferenceImpl@equals(java.lang.Object)" shape=ellipse]
52 [label="11:CtVirtualElement@equals" shape=ellipse]
53 [label="11:CtVariableReadImpl@uri" shape=ellipse]
54 [label="11:CtVariableReadImpl@parentUri" shape=ellipse]
55 [label="11:CtInvocationImpl@uri.equals(parentUri)" shape=ellipse]
56 [label="11:CtBinaryOperatorImpl@(nestedCreators.containsKey(name.toLowerCase(US)) && uri.equals(parentUri))" shape=ellipse]
57 [label="12:CtExecutableReferenceImpl@isAssignableFrom(java.lang.Class)" shape=ellipse]
58 [label="12:CtVirtualElement@isAssignableFrom" shape=ellipse]
59 [label="12:CtFieldReadImpl@DynamicElement.class" shape=ellipse]
60 [label="12:CtFieldReadImpl@bean" shape=ellipse]
61 [label="12:CtInvocationImpl@DynamicElement.class.isAssignableFrom(bean)" shape=ellipse]
62 [label="11:CtBinaryOperatorImpl@((nestedCreators.containsKey(name.toLowerCase(US)) && uri.equals(parentUri)) || DynamicElement.class.isAssignableFrom(bean))" shape=ellipse]
63 [label="13:CtExecutableReferenceImpl@isAssignableFrom(java.lang.Class)" shape=ellipse]
64 [label="13:CtVirtualElement@isAssignableFrom" shape=ellipse]
65 [label="13:CtFieldReadImpl@DynamicElementNS.class" shape=ellipse]
66 [label="13:CtFieldReadImpl@bean" shape=ellipse]
67 [label="13:CtInvocationImpl@DynamicElementNS.class.isAssignableFrom(bean)" shape=ellipse]
68 [label="11:CtBinaryOperatorImpl@(((nestedCreators.containsKey(name.toLowerCase(US)) && uri.equals(parentUri)) || DynamicElement.class.isAssignableFrom(bean)) || DynamicElementNS.class.isAssignableFrom(bean))" shape=ellipse]
69 [label="14:CtExecutableReferenceImpl@size()" shape=ellipse]
70 [label="14:CtVirtualElement@size" shape=ellipse]
71 [label="14:CtFieldReadImpl@addTypeMethods" shape=ellipse]
72 [label="14:CtInvocationImpl@addTypeMethods.size()" shape=ellipse]
73 [label="14:CtLiteralImpl@0" shape=ellipse]
74 [label="14:CtBinaryOperatorImpl@(addTypeMethods.size() != 0)" shape=ellipse]
75 [label="11:CtBinaryOperatorImpl@(((nestedCreators.containsKey(name.toLowerCase(US)) && uri.equals(parentUri)) || DynamicElement.class.isAssignableFrom(bean)) || DynamicElementNS.class.isAssignableFrom(bean)) || (addTypeMethods.size() != 0)" shape=ellipse]
76 [label="11:CtReturnImpl@return (((nestedCreators.containsKey(name.toLowerCase(US)) && uri.equals(parentUri)) || DynamicElement.class.isAssignableFrom(bean)) || DynamicElementNS.class.isAssignableFrom(bean)) || (addTypeMethods.size() != 0)" shape=ellipse]
77 [label="2:CtBlockImpl@\{
    if (parentUri.equals(ANT_CORE_URI)) \{
        parentUri = \"\";
    \}
    String uri = ProjectHelper.extractUriFromComponentName(elementName);
    if (uri.equals(ANT_CORE_URI)) \{
        uri = \"\";
    \}
    String name = ProjectHelper.extractNameFromComponentName(elementName);
    return (((nestedCreators.containsKey(name.toLowerCase(US)) && uri.equals(parentUri)) || DynamicElement.class.isAssignableFrom(bean)) || DynamicElementNS.class.isAssignableFrom(bean)) || (addTypeMethods.size() != 0);
\}" shape=ellipse]
78 [label="2:CtMethodImpl@public boolean supportsNestedElement(String parentUri, String elementName) \{
    if (parentUri.equals(ANT_CORE_URI)) \{
        parentUri = \"\";
    \}
    String uri = ProjectHelper.extractUriFromComponentName(elementName);
    if (uri.equals(ANT_CORE_URI)) \{
        uri = \"\";
    \}
    String name = ProjectHelper.extractNameFromComponentName(elementName);
    return (((nestedCreators.containsKey(name.toLowerCase(US)) && uri.equals(parentUri)) || DynamicElement.class.isAssignableFrom(bean)) || DynamicElementNS.class.isAssignableFrom(bean)) || (addTypeMethods.size() != 0);
\}" shape=ellipse]
79 [label="12:Insert@INSERT" shape=ellipse]
80 [label="12:CtBinaryOperatorImpl@(uri.equals(parentUri) || uri.equals(\"\"))" shape=ellipse]
81 [label="11:Move@MOVE" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
10 -> 7 [label="AST"];
10 -> 8 [label="AST"];
10 -> 6 [label="AST"];
10 -> 9 [label="AST"];
10 -> 14 [label="Control Dep"];
10 -> 13 [label="Control Dep"];
10 -> 11 [label="Control Dep"];
10 -> 12 [label="Control Dep"];
11 -> 54 [label="Define-Use"];
13 -> 11 [label="AST"];
13 -> 12 [label="AST"];
14 -> 13 [label="AST"];
15 -> 10 [label="AST"];
15 -> 14 [label="AST"];
20 -> 22 [label="Data Dep"];
21 -> 18 [label="AST"];
21 -> 19 [label="AST"];
21 -> 17 [label="AST"];
21 -> 20 [label="AST"];
22 -> 26 [label="Define-Use"];
22 -> 53 [label="Define-Use"];
23 -> 22 [label="AST"];
23 -> 16 [label="AST"];
23 -> 21 [label="AST"];
28 -> 25 [label="AST"];
28 -> 26 [label="AST"];
28 -> 24 [label="AST"];
28 -> 27 [label="AST"];
28 -> 32 [label="Control Dep"];
28 -> 31 [label="Control Dep"];
28 -> 29 [label="Control Dep"];
28 -> 30 [label="Control Dep"];
29 -> 53 [label="Define-Use"];
31 -> 29 [label="AST"];
31 -> 30 [label="AST"];
32 -> 31 [label="AST"];
33 -> 28 [label="AST"];
33 -> 32 [label="AST"];
38 -> 40 [label="Data Dep"];
39 -> 36 [label="AST"];
39 -> 37 [label="AST"];
39 -> 35 [label="AST"];
39 -> 38 [label="AST"];
40 -> 47 [label="Define-Use"];
41 -> 40 [label="AST"];
41 -> 34 [label="AST"];
41 -> 39 [label="AST"];
49 -> 46 [label="AST"];
49 -> 47 [label="AST"];
49 -> 45 [label="AST"];
49 -> 48 [label="AST"];
50 -> 43 [label="AST"];
50 -> 44 [label="AST"];
50 -> 42 [label="AST"];
50 -> 49 [label="AST"];
55 -> 52 [label="AST"];
55 -> 53 [label="AST"];
55 -> 51 [label="AST"];
55 -> 54 [label="AST"];
55 -> 81 [label="Action"];
56 -> 50 [label="AST"];
56 -> 55 [label="AST"];
56 -> 79 [label="Action"];
61 -> 58 [label="AST"];
61 -> 59 [label="AST"];
61 -> 57 [label="AST"];
61 -> 60 [label="AST"];
62 -> 56 [label="AST"];
62 -> 61 [label="AST"];
67 -> 64 [label="AST"];
67 -> 65 [label="AST"];
67 -> 63 [label="AST"];
67 -> 66 [label="AST"];
68 -> 62 [label="AST"];
68 -> 67 [label="AST"];
72 -> 70 [label="AST"];
72 -> 71 [label="AST"];
72 -> 69 [label="AST"];
74 -> 72 [label="AST"];
74 -> 73 [label="AST"];
75 -> 68 [label="AST"];
75 -> 74 [label="AST"];
76 -> 75 [label="AST"];
77 -> 15 [label="AST"];
77 -> 23 [label="AST"];
77 -> 33 [label="AST"];
77 -> 41 [label="AST"];
77 -> 76 [label="AST"];
78 -> 1 [label="AST"];
78 -> 0 [label="AST"];
78 -> 2 [label="AST"];
78 -> 4 [label="AST"];
78 -> 77 [label="AST"];
79 -> 80 [label="Action"];
81 -> 80 [label="Action"];
}