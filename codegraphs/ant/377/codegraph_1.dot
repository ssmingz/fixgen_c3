digraph "getImplementation#?" {
0 [label="2:CtTypeReferenceImpl@FileNameMapper" shape=ellipse]
1 [label="2:CtVirtualElement@getImplementation" shape=ellipse]
2 [label="2:CtTypeReferenceImpl@BuildException" shape=ellipse]
3 [label="3:CtExecutableReferenceImpl@isReference()" shape=ellipse]
4 [label="3:CtVirtualElement@isReference" shape=ellipse]
5 [label="3:CtInvocationImpl@isReference()" shape=ellipse]
6 [label="4:CtExecutableReferenceImpl@getImplementation()" shape=ellipse]
7 [label="4:CtVirtualElement@getImplementation" shape=ellipse]
8 [label="4:CtExecutableReferenceImpl@getRef()" shape=ellipse]
9 [label="4:CtVirtualElement@getRef" shape=ellipse]
10 [label="4:CtInvocationImpl@getRef()" shape=ellipse]
11 [label="4:CtInvocationImpl@getRef().getImplementation()" shape=ellipse]
12 [label="4:CtReturnImpl@return getRef().getImplementation()" shape=ellipse]
13 [label="3:CtBlockImpl@\{
    return getRef().getImplementation();
\}" shape=ellipse]
14 [label="3:CtIfImpl@if (isReference()) \{
    return getRef().getImplementation();
\}" shape=ellipse]
15 [label="6:CtFieldReadImpl@type" shape=ellipse]
16 [label="6:CtLiteralImpl@null" shape=ellipse]
17 [label="6:CtBinaryOperatorImpl@(type == null)" shape=ellipse]
18 [label="6:CtFieldReadImpl@classname" shape=ellipse]
19 [label="6:CtLiteralImpl@null" shape=ellipse]
20 [label="6:CtBinaryOperatorImpl@(classname == null)" shape=ellipse]
21 [label="6:CtBinaryOperatorImpl@(type == null) && (classname == null)" shape=ellipse]
22 [label="7:CtTypeReferenceImpl@BuildException" shape=ellipse]
23 [label="7:CtLiteralImpl@\"one of the attributes type or classname is required\"" shape=ellipse]
24 [label="7:CtConstructorCallImpl@new BuildException(\"one of the attributes type or classname is required\")" shape=ellipse]
25 [label="7:CtThrowImpl@throw new BuildException(\"one of the attributes type or classname is required\")" shape=ellipse]
26 [label="6:CtBlockImpl@\{
    throw new BuildException(\"one of the attributes type or classname is required\");
\}" shape=ellipse]
27 [label="6:CtIfImpl@if ((type == null) && (classname == null)) \{
    throw new BuildException(\"one of the attributes type or classname is required\");
\}" shape=ellipse]
28 [label="9:CtFieldReadImpl@type" shape=ellipse]
29 [label="9:CtLiteralImpl@null" shape=ellipse]
30 [label="9:CtBinaryOperatorImpl@(type != null)" shape=ellipse]
31 [label="9:CtFieldReadImpl@classname" shape=ellipse]
32 [label="9:CtLiteralImpl@null" shape=ellipse]
33 [label="9:CtBinaryOperatorImpl@(classname != null)" shape=ellipse]
34 [label="9:CtBinaryOperatorImpl@(type != null) && (classname != null)" shape=ellipse]
35 [label="10:CtTypeReferenceImpl@BuildException" shape=ellipse]
36 [label="10:CtLiteralImpl@\"must not specify both type and classname attribute\"" shape=ellipse]
37 [label="10:CtConstructorCallImpl@new BuildException(\"must not specify both type and classname attribute\")" shape=ellipse]
38 [label="10:CtThrowImpl@throw new BuildException(\"must not specify both type and classname attribute\")" shape=ellipse]
39 [label="9:CtBlockImpl@\{
    throw new BuildException(\"must not specify both type and classname attribute\");
\}" shape=ellipse]
40 [label="9:CtIfImpl@if ((type != null) && (classname != null)) \{
    throw new BuildException(\"must not specify both type and classname attribute\");
\}" shape=ellipse]
41 [label="13:CtFieldReadImpl@type" shape=ellipse]
42 [label="13:CtLiteralImpl@null" shape=ellipse]
43 [label="13:CtBinaryOperatorImpl@type != null" shape=ellipse]
44 [label="14:CtFieldWriteImpl@classname" shape=ellipse]
45 [label="14:CtExecutableReferenceImpl@getImplementation()" shape=ellipse]
46 [label="14:CtVirtualElement@getImplementation" shape=ellipse]
47 [label="14:CtFieldReadImpl@type" shape=ellipse]
48 [label="14:CtInvocationImpl@type.getImplementation()" shape=ellipse]
49 [label="14:CtAssignmentImpl@classname = type.getImplementation()" shape=ellipse]
50 [label="13:CtBlockImpl@\{
    classname = type.getImplementation();
\}" shape=ellipse]
51 [label="13:CtIfImpl@if (type != null) \{
    classname = type.getImplementation();
\}" shape=ellipse]
52 [label="16:CtTypeReferenceImpl@Class" shape=ellipse]
53 [label="16:CtLiteralImpl@null" shape=ellipse]
54 [label="16:CtVirtualElement@c" shape=ellipse]
55 [label="16:CtLocalVariableImpl@Class c = null" shape=ellipse]
56 [label="17:CtFieldReadImpl@classpath" shape=ellipse]
57 [label="17:CtLiteralImpl@null" shape=ellipse]
58 [label="17:CtBinaryOperatorImpl@classpath == null" shape=ellipse]
59 [label="18:CtVariableWriteImpl@c" shape=ellipse]
60 [label="18:CtExecutableReferenceImpl@forName(java.lang.String)" shape=ellipse]
61 [label="18:CtVirtualElement@forName" shape=ellipse]
62 [label="18:CtTypeAccessImpl@Class" shape=ellipse]
63 [label="18:CtFieldReadImpl@classname" shape=ellipse]
64 [label="18:CtInvocationImpl@Class.forName(classname)" shape=ellipse]
65 [label="18:CtAssignmentImpl@c = Class.forName(classname)" shape=ellipse]
66 [label="17:CtBlockImpl@\{
    c = Class.forName(classname);
\}" shape=ellipse]
67 [label="20:CtTypeReferenceImpl@AntClassLoader" shape=ellipse]
68 [label="20:CtTypeReferenceImpl@AntClassLoader" shape=ellipse]
69 [label="20:CtFieldReadImpl@p" shape=ellipse]
70 [label="20:CtFieldReadImpl@classpath" shape=ellipse]
71 [label="20:CtConstructorCallImpl@new AntClassLoader(p, classpath)" shape=ellipse]
72 [label="20:CtVirtualElement@al" shape=ellipse]
73 [label="20:CtLocalVariableImpl@AntClassLoader al = new AntClassLoader(p, classpath)" shape=ellipse]
74 [label="21:CtVariableWriteImpl@c" shape=ellipse]
75 [label="21:CtExecutableReferenceImpl@loadClass()" shape=ellipse]
76 [label="21:CtVirtualElement@loadClass" shape=ellipse]
77 [label="21:CtVariableReadImpl@al" shape=ellipse]
78 [label="21:CtFieldReadImpl@classname" shape=ellipse]
79 [label="21:CtInvocationImpl@al.loadClass(classname)" shape=ellipse]
80 [label="21:CtAssignmentImpl@c = al.loadClass(classname)" shape=ellipse]
81 [label="22:CtExecutableReferenceImpl@initializeClass(java.lang.Class)" shape=ellipse]
82 [label="22:CtVirtualElement@initializeClass" shape=ellipse]
83 [label="22:CtTypeAccessImpl@AntClassLoader" shape=ellipse]
84 [label="22:CtVariableReadImpl@c" shape=ellipse]
85 [label="22:CtInvocationImpl@AntClassLoader.initializeClass(c)" shape=ellipse]
86 [label="19:CtBlockImpl@\{
    AntClassLoader al = new AntClassLoader(p, classpath);
    c = al.loadClass(classname);
    AntClassLoader.initializeClass(c);
\}" shape=ellipse]
87 [label="17:CtIfImpl@if (classpath == null) \{
    c = Class.forName(classname);
\} else \{
    AntClassLoader al = new AntClassLoader(p, classpath);
    c = al.loadClass(classname);
    AntClassLoader.initializeClass(c);
\}" shape=ellipse]
88 [label="24:CtTypeReferenceImpl@FileNameMapper" shape=ellipse]
89 [label="24:CtExecutableReferenceImpl@newInstance()" shape=ellipse]
90 [label="24:CtVirtualElement@newInstance" shape=ellipse]
91 [label="24:CtVariableReadImpl@c" shape=ellipse]
92 [label="24:CtInvocationImpl@((FileNameMapper) (c.newInstance()))" shape=ellipse]
93 [label="24:CtTypeReferenceImpl@FileNameMapper" shape=ellipse]
94 [label="24:CtVirtualElement@m" shape=ellipse]
95 [label="24:CtLocalVariableImpl@FileNameMapper m = ((FileNameMapper) (c.newInstance()))" shape=ellipse]
96 [label="25:CtExecutableReferenceImpl@setFrom()" shape=ellipse]
97 [label="25:CtVirtualElement@setFrom" shape=ellipse]
98 [label="25:CtVariableReadImpl@m" shape=ellipse]
99 [label="25:CtFieldReadImpl@from" shape=ellipse]
100 [label="25:CtInvocationImpl@m.setFrom(from)" shape=ellipse]
101 [label="26:CtExecutableReferenceImpl@setTo()" shape=ellipse]
102 [label="26:CtVirtualElement@setTo" shape=ellipse]
103 [label="26:CtVariableReadImpl@m" shape=ellipse]
104 [label="26:CtFieldReadImpl@to" shape=ellipse]
105 [label="26:CtInvocationImpl@m.setTo(to)" shape=ellipse]
106 [label="27:CtVariableReadImpl@m" shape=ellipse]
107 [label="27:CtReturnImpl@return m" shape=ellipse]
108 [label="12:CtBlockImpl@\{
    if (type != null) \{
        classname = type.getImplementation();
    \}
    Class c = null;
    if (classpath == null) \{
        c = Class.forName(classname);
    \} else \{
        AntClassLoader al = new AntClassLoader(p, classpath);
        c = al.loadClass(classname);
        AntClassLoader.initializeClass(c);
    \}
    FileNameMapper m = ((FileNameMapper) (c.newInstance()));
    m.setFrom(from);
    m.setTo(to);
    return m;
\}" shape=ellipse]
109 [label="28:CtVirtualElement@be" shape=ellipse]
110 [label="28:CtTypeReferenceImpl@BuildException" shape=ellipse]
111 [label="28:CtCatchVariableImpl@BuildException be" shape=ellipse]
112 [label="29:CtVariableReadImpl@be" shape=ellipse]
113 [label="29:CtThrowImpl@throw be" shape=ellipse]
114 [label="28:CtBlockImpl@\{
    throw be;
\}" shape=ellipse]
115 [label="28:CtCatchImpl@ catch (BuildException be) \{
    throw be;
\}" shape=ellipse]
116 [label="30:CtVirtualElement@t" shape=ellipse]
117 [label="30:CtTypeReferenceImpl@Throwable" shape=ellipse]
118 [label="30:CtCatchVariableImpl@Throwable t" shape=ellipse]
119 [label="31:CtTypeReferenceImpl@BuildException" shape=ellipse]
120 [label="31:CtVariableReadImpl@t" shape=ellipse]
121 [label="31:CtConstructorCallImpl@new BuildException(t)" shape=ellipse]
122 [label="31:CtThrowImpl@throw new BuildException(t)" shape=ellipse]
123 [label="30:CtBlockImpl@\{
    throw new BuildException(t);
\}" shape=ellipse]
124 [label="30:CtCatchImpl@ catch (Throwable t) \{
    throw new BuildException(t);
\}" shape=ellipse]
125 [label="33:CtFieldReadImpl@type" shape=ellipse]
126 [label="33:CtLiteralImpl@null" shape=ellipse]
127 [label="33:CtBinaryOperatorImpl@type != null" shape=ellipse]
128 [label="34:CtFieldWriteImpl@classname" shape=ellipse]
129 [label="34:CtLiteralImpl@null" shape=ellipse]
130 [label="34:CtAssignmentImpl@classname = null" shape=ellipse]
131 [label="33:CtBlockImpl@\{
    classname = null;
\}" shape=ellipse]
132 [label="33:CtIfImpl@if (type != null) \{
    classname = null;
\}" shape=ellipse]
133 [label="32:CtBlockImpl@\{
    if (type != null) \{
        classname = null;
    \}
\}" shape=ellipse]
134 [label="12:CtTryImpl@try \{
    if (type != null) \{
        classname = type.getImplementation();
    \}
    Class c = null;
    if (classpath == null) \{
        c = Class.forName(classname);
    \} else \{
        AntClassLoader al = new AntClassLoader(p, classpath);
        c = al.loadClass(classname);
        AntClassLoader.initializeClass(c);
    \}
    FileNameMapper m = ((FileNameMapper) (c.newInstance()));
    m.setFrom(from);
    m.setTo(to);
    return m;
\} catch (BuildException be) \{
    throw be;
\} catch (Throwable t) \{
    throw new BuildException(t);
\} finally \{
    if (type != null) \{
        classname = null;
    \}
\}" shape=ellipse]
135 [label="2:CtBlockImpl@\{
    if (isReference()) \{
        return getRef().getImplementation();
    \}
    if ((type == null) && (classname == null)) \{
        throw new BuildException(\"one of the attributes type or classname is required\");
    \}
    if ((type != null) && (classname != null)) \{
        throw new BuildException(\"must not specify both type and classname attribute\");
    \}
    try \{
        if (type != null) \{
            classname = type.getImplementation();
        \}
        Class c = null;
        if (classpath == null) \{
            c = Class.forName(classname);
        \} else \{
            AntClassLoader al = new AntClassLoader(p, classpath);
            c = al.loadClass(classname);
            AntClassLoader.initializeClass(c);
        \}
        FileNameMapper m = ((FileNameMapper) (c.newInstance()));
        m.setFrom(from);
        m.setTo(to);
        return m;
    \} catch (BuildException be) \{
        throw be;
    \} catch (Throwable t) \{
        throw new BuildException(t);
    \} finally \{
        if (type != null) \{
            classname = null;
        \}
    \}
\}" shape=ellipse]
136 [label="2:CtMethodImpl@public FileNameMapper getImplementation() throws BuildException \{
    if (isReference()) \{
        return getRef().getImplementation();
    \}
    if ((type == null) && (classname == null)) \{
        throw new BuildException(\"one of the attributes type or classname is required\");
    \}
    if ((type != null) && (classname != null)) \{
        throw new BuildException(\"must not specify both type and classname attribute\");
    \}
    try \{
        if (type != null) \{
            classname = type.getImplementation();
        \}
        Class c = null;
        if (classpath == null) \{
            c = Class.forName(classname);
        \} else \{
            AntClassLoader al = new AntClassLoader(p, classpath);
            c = al.loadClass(classname);
            AntClassLoader.initializeClass(c);
        \}
        FileNameMapper m = ((FileNameMapper) (c.newInstance()));
        m.setFrom(from);
        m.setTo(to);
        return m;
    \} catch (BuildException be) \{
        throw be;
    \} catch (Throwable t) \{
        throw new BuildException(t);
    \} finally \{
        if (type != null) \{
            classname = null;
        \}
    \}
\}" shape=ellipse]
137 [label="20:Delete@DELETE" shape=ellipse]
138 [label="20:Insert@INSERT" shape=ellipse]
139 [label="20:CtInvocationImpl@getProject()" shape=ellipse]
5 -> 4 [label="AST"];
5 -> 3 [label="AST"];
5 -> 13 [label="Control Dep"];
5 -> 12 [label="Control Dep"];
5 -> 11 [label="Control Dep"];
5 -> 6 [label="Control Dep"];
5 -> 10 [label="Control Dep"];
5 -> 8 [label="Control Dep"];
10 -> 9 [label="AST"];
10 -> 8 [label="AST"];
11 -> 7 [label="AST"];
11 -> 10 [label="AST"];
11 -> 6 [label="AST"];
12 -> 11 [label="AST"];
13 -> 12 [label="AST"];
14 -> 5 [label="AST"];
14 -> 13 [label="AST"];
17 -> 15 [label="AST"];
17 -> 16 [label="AST"];
20 -> 18 [label="AST"];
20 -> 19 [label="AST"];
21 -> 17 [label="AST"];
21 -> 20 [label="AST"];
21 -> 26 [label="Control Dep"];
21 -> 25 [label="Control Dep"];
21 -> 24 [label="Control Dep"];
21 -> 23 [label="Control Dep"];
24 -> 23 [label="AST"];
25 -> 24 [label="AST"];
26 -> 25 [label="AST"];
27 -> 21 [label="AST"];
27 -> 26 [label="AST"];
30 -> 28 [label="AST"];
30 -> 29 [label="AST"];
33 -> 31 [label="AST"];
33 -> 32 [label="AST"];
34 -> 30 [label="AST"];
34 -> 33 [label="AST"];
34 -> 39 [label="Control Dep"];
34 -> 38 [label="Control Dep"];
34 -> 37 [label="Control Dep"];
34 -> 36 [label="Control Dep"];
37 -> 36 [label="AST"];
38 -> 37 [label="AST"];
39 -> 38 [label="AST"];
40 -> 34 [label="AST"];
40 -> 39 [label="AST"];
43 -> 41 [label="AST"];
43 -> 42 [label="AST"];
43 -> 50 [label="Control Dep"];
43 -> 49 [label="Control Dep"];
43 -> 44 [label="Control Dep"];
43 -> 48 [label="Control Dep"];
43 -> 45 [label="Control Dep"];
43 -> 47 [label="Control Dep"];
44 -> 63 [label="Define-Use"];
44 -> 78 [label="Define-Use"];
47 -> 44 [label="Data Dep"];
48 -> 46 [label="AST"];
48 -> 47 [label="AST"];
48 -> 45 [label="AST"];
49 -> 44 [label="AST"];
49 -> 48 [label="AST"];
50 -> 49 [label="AST"];
51 -> 43 [label="AST"];
51 -> 50 [label="AST"];
54 -> 84 [label="Define-Use"];
54 -> 91 [label="Define-Use"];
55 -> 54 [label="AST"];
55 -> 52 [label="AST"];
55 -> 53 [label="AST"];
58 -> 56 [label="AST"];
58 -> 57 [label="AST"];
58 -> 66 [label="Control Dep"];
58 -> 65 [label="Control Dep"];
58 -> 59 [label="Control Dep"];
58 -> 64 [label="Control Dep"];
58 -> 60 [label="Control Dep"];
58 -> 62 [label="Control Dep"];
58 -> 63 [label="Control Dep"];
58 -> 86 [label="Control Dep"];
58 -> 73 [label="Control Dep"];
58 -> 71 [label="Control Dep"];
58 -> 69 [label="Control Dep"];
58 -> 70 [label="Control Dep"];
58 -> 80 [label="Control Dep"];
58 -> 74 [label="Control Dep"];
58 -> 79 [label="Control Dep"];
58 -> 75 [label="Control Dep"];
58 -> 77 [label="Control Dep"];
58 -> 78 [label="Control Dep"];
58 -> 85 [label="Control Dep"];
58 -> 81 [label="Control Dep"];
58 -> 83 [label="Control Dep"];
58 -> 84 [label="Control Dep"];
59 -> 84 [label="Define-Use"];
59 -> 91 [label="Define-Use"];
63 -> 59 [label="Data Dep"];
64 -> 61 [label="AST"];
64 -> 62 [label="AST"];
64 -> 60 [label="AST"];
64 -> 63 [label="AST"];
65 -> 59 [label="AST"];
65 -> 64 [label="AST"];
66 -> 65 [label="AST"];
69 -> 72 [label="Data Dep"];
69 -> 137 [label="Action"];
70 -> 72 [label="Data Dep"];
71 -> 69 [label="AST"];
71 -> 70 [label="AST"];
71 -> 138 [label="Action"];
72 -> 77 [label="Define-Use"];
73 -> 72 [label="AST"];
73 -> 67 [label="AST"];
73 -> 71 [label="AST"];
74 -> 84 [label="Define-Use"];
74 -> 91 [label="Define-Use"];
77 -> 74 [label="Data Dep"];
78 -> 74 [label="Data Dep"];
79 -> 76 [label="AST"];
79 -> 77 [label="AST"];
79 -> 75 [label="AST"];
79 -> 78 [label="AST"];
80 -> 74 [label="AST"];
80 -> 79 [label="AST"];
85 -> 82 [label="AST"];
85 -> 83 [label="AST"];
85 -> 81 [label="AST"];
85 -> 84 [label="AST"];
86 -> 73 [label="AST"];
86 -> 80 [label="AST"];
86 -> 85 [label="AST"];
87 -> 58 [label="AST"];
87 -> 66 [label="AST"];
87 -> 86 [label="AST"];
91 -> 94 [label="Data Dep"];
92 -> 90 [label="AST"];
92 -> 93 [label="AST"];
92 -> 91 [label="AST"];
92 -> 89 [label="AST"];
94 -> 98 [label="Define-Use"];
94 -> 103 [label="Define-Use"];
94 -> 106 [label="Define-Use"];
95 -> 94 [label="AST"];
95 -> 88 [label="AST"];
95 -> 92 [label="AST"];
100 -> 97 [label="AST"];
100 -> 98 [label="AST"];
100 -> 96 [label="AST"];
100 -> 99 [label="AST"];
105 -> 102 [label="AST"];
105 -> 103 [label="AST"];
105 -> 101 [label="AST"];
105 -> 104 [label="AST"];
107 -> 106 [label="AST"];
108 -> 51 [label="AST"];
108 -> 55 [label="AST"];
108 -> 87 [label="AST"];
108 -> 95 [label="AST"];
108 -> 100 [label="AST"];
108 -> 105 [label="AST"];
108 -> 107 [label="AST"];
109 -> 112 [label="Define-Use"];
111 -> 109 [label="AST"];
111 -> 110 [label="AST"];
111 -> 114 [label="Control Dep"];
111 -> 113 [label="Control Dep"];
111 -> 112 [label="Control Dep"];
113 -> 112 [label="AST"];
114 -> 113 [label="AST"];
115 -> 111 [label="AST"];
115 -> 114 [label="AST"];
116 -> 120 [label="Define-Use"];
118 -> 116 [label="AST"];
118 -> 117 [label="AST"];
118 -> 123 [label="Control Dep"];
118 -> 122 [label="Control Dep"];
118 -> 121 [label="Control Dep"];
118 -> 120 [label="Control Dep"];
121 -> 120 [label="AST"];
122 -> 121 [label="AST"];
123 -> 122 [label="AST"];
124 -> 118 [label="AST"];
124 -> 123 [label="AST"];
127 -> 125 [label="AST"];
127 -> 126 [label="AST"];
127 -> 131 [label="Control Dep"];
127 -> 130 [label="Control Dep"];
127 -> 128 [label="Control Dep"];
127 -> 129 [label="Control Dep"];
130 -> 128 [label="AST"];
130 -> 129 [label="AST"];
131 -> 130 [label="AST"];
132 -> 127 [label="AST"];
132 -> 131 [label="AST"];
133 -> 132 [label="AST"];
134 -> 108 [label="AST"];
134 -> 115 [label="AST"];
134 -> 124 [label="AST"];
134 -> 133 [label="AST"];
135 -> 14 [label="AST"];
135 -> 27 [label="AST"];
135 -> 40 [label="AST"];
135 -> 134 [label="AST"];
136 -> 1 [label="AST"];
136 -> 0 [label="AST"];
136 -> 2 [label="AST"];
136 -> 135 [label="AST"];
138 -> 139 [label="Action"];
}