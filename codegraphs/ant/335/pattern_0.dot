digraph "Pattern" {
0 [label="load#?,InputStream#4:DELETE
read#?#18:DELETE
execute#?#33:DELETE" shape=ellipse]
1 [label="load#?,InputStream#4:\"ISO-8859-1\"
read#?#18:\"ISO-8859-1\"
execute#?#33:\"ISO8859_1\"" shape=ellipse]
2 [label="load#?,InputStream#4:s.getBytes(\"ISO-8859-1\")
read#?#18:clazz.getBytes(\"ISO-8859-1\")
execute#?#33:text.getBytes(\"ISO8859_1\")" shape=ellipse]
3 [label="load#?,InputStream#4:byte[] ba = s.getBytes(\"ISO-8859-1\")
read#?#18:final byte[] bytes = clazz.getBytes(\"ISO-8859-1\")" shape=ellipse]
4 [label="load#?,InputStream#4:getBytes" shape=ellipse]
5 [label="load#?,InputStream#4:s
read#?#18:clazz
execute#?#33:text" shape=ellipse]
6 [label="load#?,InputStream#4:getBytes(java.lang.String)
read#?#18:getBytes(java.lang.String)
execute#?#33:getBytes(java.lang.String)" shape=ellipse]
7 [label="load#?,InputStream#4:INSERT" shape=ellipse]
8 [label="load#?,InputStream#-1:String
read#?#-1:String
execute#?#-1:String" shape=ellipse]
9 [label="read#?#15:\{
    ch = -1;
\}
execute#?#29:\{
    if (!text.endsWith(\"\n\")) \{
        text = text + \"\n\";
    \}
    tis = new ByteArrayInputStream(text.getBytes(\"ISO8859_1\"));
    final Properties props = new Properties();
    props.load(tis);
    Property propertyTask = new Property();
    propertyTask.bindToOwner(this);
    propertyTask.setPrefix(prefix);
    propertyTask.addProperties(props);
\}" shape=ellipse]
10 [label="read#?#20:forName(java.lang.String)
execute#?#30:endsWith(java.lang.String)" shape=ellipse]
11 [label="read#?#20:final Class javaClassHelper = Class.forName(JAVA_CLASS_HELPER)
execute#?#38:prefix" shape=ellipse]
12 [label="read#?#7:queuedData != null
execute#?#29:(text != null)" shape=ellipse]
13 [label="read#?#21:javaClassHelper != null
execute#?#29:(text.length() != 0)" shape=ellipse]
14 [label="read#?#33: catch (RuntimeException ex) \{
    throw ex;
\}" shape=ellipse]
15 [label="read#?#20:Class.forName(JAVA_CLASS_HELPER)" shape=ellipse]
16 [label="read#?#20:Class
execute#?#-1:PlaceHold" shape=ellipse]
17 [label="read#?#17:\{
    final byte[] bytes = clazz.getBytes(\"ISO-8859-1\");
    try \{
        final Class javaClassHelper = Class.forName(JAVA_CLASS_HELPER);
        if (javaClassHelper != null) \{
            final Class[] params = new Class[]\{ byte[].class \};
            final Method getConstants = javaClassHelper.getMethod(\"getConstants\", params);
            final Object[] args = new Object[]\{ bytes \};
            final StringBuffer sb = ((StringBuffer) (getConstants.invoke(null, args)));
            if (sb.length() > 0) \{
                queuedData = sb.toString();
                return read();
            \}
        \}
    \} catch (NoClassDefFoundError ex) \{
        throw ex;
    \} catch (RuntimeException ex) \{
        throw ex;
    \} catch (InvocationTargetException ex) \{
        Throwable t = ex.getTargetException();
        if (t instanceof NoClassDefFoundError) \{
            throw ((NoClassDefFoundError) (t));
        \}
        if (t instanceof RuntimeException) \{
            throw ((RuntimeException) (t));
        \}
        throw new BuildException(t);
    \} catch (Exception ex) \{
        throw new BuildException(ex);
    \}
\}" shape=ellipse]
18 [label="read#?#16:-1
execute#?#30:!text.endsWith(\"\n\")" shape=ellipse]
19 [label="read#?#19:try \{
    final Class javaClassHelper = Class.forName(JAVA_CLASS_HELPER);
    if (javaClassHelper != null) \{
        final Class[] params = new Class[]\{ byte[].class \};
        final Method getConstants = javaClassHelper.getMethod(\"getConstants\", params);
        final Object[] args = new Object[]\{ bytes \};
        final StringBuffer sb = ((StringBuffer) (getConstants.invoke(null, args)));
        if (sb.length() > 0) \{
            queuedData = sb.toString();
            return read();
        \}
    \}
\} catch (NoClassDefFoundError ex) \{
    throw ex;
\} catch (RuntimeException ex) \{
    throw ex;
\} catch (InvocationTargetException ex) \{
    Throwable t = ex.getTargetException();
    if (t instanceof NoClassDefFoundError) \{
        throw ((NoClassDefFoundError) (t));
    \}
    if (t instanceof RuntimeException) \{
        throw ((RuntimeException) (t));
    \}
    throw new BuildException(t);
\} catch (Exception ex) \{
    throw new BuildException(ex);
\}" shape=ellipse]
20 [label="read#?#35: catch (InvocationTargetException ex) \{
    Throwable t = ex.getTargetException();
    if (t instanceof NoClassDefFoundError) \{
        throw ((NoClassDefFoundError) (t));
    \}
    if (t instanceof RuntimeException) \{
        throw ((RuntimeException) (t));
    \}
    throw new BuildException(t);
\}" shape=ellipse]
21 [label="read#?#20:JAVA_CLASS_HELPER" shape=ellipse]
22 [label="read#?#15:(clazz.length() == 0)" shape=ellipse]
23 [label="read#?#15:(clazz == null) || (clazz.length() == 0)" shape=ellipse]
24 [label="read#?#15:if ((clazz == null) || (clazz.length() == 0)) \{
    ch = -1;
\} else \{
    final byte[] bytes = clazz.getBytes(\"ISO-8859-1\");
    try \{
        final Class javaClassHelper = Class.forName(JAVA_CLASS_HELPER);
        if (javaClassHelper != null) \{
            final Class[] params = new Class[]\{ byte[].class \};
            final Method getConstants = javaClassHelper.getMethod(\"getConstants\", params);
            final Object[] args = new Object[]\{ bytes \};
            final StringBuffer sb = ((StringBuffer) (getConstants.invoke(null, args)));
            if (sb.length() > 0) \{
                queuedData = sb.toString();
                return read();
            \}
        \}
    \} catch (NoClassDefFoundError ex) \{
        throw ex;
    \} catch (RuntimeException ex) \{
        throw ex;
    \} catch (InvocationTargetException ex) \{
        Throwable t = ex.getTargetException();
        if (t instanceof NoClassDefFoundError) \{
            throw ((NoClassDefFoundError) (t));
        \}
        if (t instanceof RuntimeException) \{
            throw ((RuntimeException) (t));
        \}
        throw new BuildException(t);
    \} catch (Exception ex) \{
        throw new BuildException(ex);
    \}
\}" shape=ellipse]
25 [label="read#?#16:ch = -1
execute#?#30:if (!text.endsWith(\"\n\")) \{
    text = text + \"\n\";
\}" shape=ellipse]
26 [label="read#?#19:\{
    final Class javaClassHelper = Class.forName(JAVA_CLASS_HELPER);
    if (javaClassHelper != null) \{
        final Class[] params = new Class[]\{ byte[].class \};
        final Method getConstants = javaClassHelper.getMethod(\"getConstants\", params);
        final Object[] args = new Object[]\{ bytes \};
        final StringBuffer sb = ((StringBuffer) (getConstants.invoke(null, args)));
        if (sb.length() > 0) \{
            queuedData = sb.toString();
            return read();
        \}
    \}
\}" shape=ellipse]
27 [label="read#?#16:ch" shape=ellipse]
28 [label="read#?#-1:boolean
execute#?#-1:boolean" shape=ellipse]
29 [label="read#?#35:InvocationTargetException ex" shape=ellipse]
30 [label="read#?#21:javaClassHelper" shape=ellipse]
31 [label="read#?#21:null" shape=ellipse]
32 [label="read#?#31:NoClassDefFoundError ex" shape=ellipse]
33 [label="read#?#31: catch (NoClassDefFoundError ex) \{
    throw ex;
\}" shape=ellipse]
34 [label="read#?#15:(clazz == null)" shape=ellipse]
35 [label="read#?#33:RuntimeException ex" shape=ellipse]
36 [label="read#?#18:byte[]" shape=ellipse]
37 [label="read#?#16:1" shape=ellipse]
38 [label="read#?#44: catch (Exception ex) \{
    throw new BuildException(ex);
\}" shape=ellipse]
39 [label="read#?#21:if (javaClassHelper != null) \{
    final Class[] params = new Class[]\{ byte[].class \};
    final Method getConstants = javaClassHelper.getMethod(\"getConstants\", params);
    final Object[] args = new Object[]\{ bytes \};
    final StringBuffer sb = ((StringBuffer) (getConstants.invoke(null, args)));
    if (sb.length() > 0) \{
        queuedData = sb.toString();
        return read();
    \}
\}" shape=ellipse]
40 [label="read#?#44:Exception ex" shape=ellipse]
41 [label="execute#?#39:propertyTask.addProperties(props)" shape=ellipse]
42 [label="execute#?#36:new Property()" shape=ellipse]
43 [label="execute#?#34:new Properties()" shape=ellipse]
44 [label="execute#?#38:setPrefix()" shape=ellipse]
45 [label="execute#?#30:\"\n\"" shape=ellipse]
46 [label="execute#?#35:props" shape=ellipse]
47 [label="execute#?#35:load(ByteArrayInputStream)" shape=ellipse]
48 [label="execute#?#29:if ((text != null) && (text.length() != 0)) \{
    if (!text.endsWith(\"\n\")) \{
        text = text + \"\n\";
    \}
    tis = new ByteArrayInputStream(text.getBytes(\"ISO8859_1\"));
    final Properties props = new Properties();
    props.load(tis);
    Property propertyTask = new Property();
    propertyTask.bindToOwner(this);
    propertyTask.setPrefix(prefix);
    propertyTask.addProperties(props);
\}" shape=ellipse]
49 [label="execute#?#36:Property propertyTask = new Property()" shape=ellipse]
50 [label="execute#?#33:new ByteArrayInputStream(text.getBytes(\"ISO8859_1\"))" shape=ellipse]
51 [label="execute#?#30:text.endsWith(\"\n\")" shape=ellipse]
52 [label="execute#?#35:props.load(tis)" shape=ellipse]
53 [label="execute#?#33:tis = new ByteArrayInputStream(text.getBytes(\"ISO8859_1\"))" shape=ellipse]
54 [label="execute#?#38:propertyTask" shape=ellipse]
55 [label="execute#?#37:bindToOwner(PlaceHold)" shape=ellipse]
56 [label="execute#?#37:this" shape=ellipse]
57 [label="execute#?#39:addProperties(Properties)" shape=ellipse]
58 [label="execute#?#39:props" shape=ellipse]
59 [label="execute#?#30:text" shape=ellipse]
60 [label="execute#?#33:tis" shape=ellipse]
61 [label="execute#?#-1:Property()" shape=ellipse]
62 [label="execute#?#34:final Properties props = new Properties()" shape=ellipse]
63 [label="execute#?#37:propertyTask" shape=ellipse]
64 [label="execute#?#-1:Properties()" shape=ellipse]
65 [label="execute#?#38:propertyTask.setPrefix(prefix)" shape=ellipse]
66 [label="execute#?#37:propertyTask.bindToOwner(this)" shape=ellipse]
67 [label="execute#?#39:propertyTask" shape=ellipse]
68 [label="execute#?#29:(text != null) && (text.length() != 0)" shape=ellipse]
69 [label="execute#?#-1:ByteArrayInputStream(byte[])" shape=ellipse]
70 [label="execute#?#35:tis" shape=ellipse]
1 -> 0 [label="Action:3"];
1 -> 8 [label="AST:3"];
2 -> 1 [label="AST:3"];
2 -> 4 [label="AST:1"];
2 -> 5 [label="AST:3"];
2 -> 6 [label="AST:3"];
2 -> 7 [label="Action:1"];
3 -> 2 [label="AST:2"];
3 -> 36 [label="AST:1"];
5 -> 60 [label="Data Dep:1"];
9 -> 25 [label="AST:2"];
9 -> 41 [label="AST:1"];
9 -> 49 [label="AST:1"];
9 -> 52 [label="AST:1"];
9 -> 53 [label="AST:1"];
9 -> 62 [label="AST:1"];
9 -> 65 [label="AST:1"];
9 -> 66 [label="AST:1"];
11 -> 15 [label="AST:1"];
12 -> 24 [label="Control Dep:1"];
12 -> 23 [label="Control Dep:1"];
12 -> 34 [label="Control Dep:1"];
12 -> 22 [label="Control Dep:1"];
13 -> 30 [label="AST:1"];
13 -> 31 [label="AST:1"];
14 -> 35 [label="AST:1"];
15 -> 10 [label="AST:1"];
15 -> 16 [label="AST:1"];
15 -> 21 [label="AST:1"];
17 -> 3 [label="AST:1"];
17 -> 19 [label="AST:1"];
18 -> 37 [label="AST:1"];
18 -> 51 [label="AST:1"];
19 -> 14 [label="AST:1"];
19 -> 26 [label="AST:1"];
19 -> 33 [label="AST:1"];
19 -> 20 [label="AST:1"];
19 -> 38 [label="AST:1"];
20 -> 29 [label="AST:1"];
23 -> 9 [label="Control Dep:1"];
23 -> 10 [label="Control Dep:1"];
23 -> 11 [label="Control Dep:1"];
23 -> 13 [label="Control Dep:1"];
23 -> 14 [label="Control Dep:1"];
23 -> 15 [label="Control Dep:1"];
23 -> 16 [label="Control Dep:1"];
23 -> 17 [label="Control Dep:1"];
23 -> 18 [label="Control Dep:1"];
23 -> 19 [label="Control Dep:1"];
23 -> 20 [label="Control Dep:1"];
23 -> 21 [label="Control Dep:1"];
23 -> 22 [label="AST:1"];
23 -> 28 [label="AST:1"];
23 -> 34 [label="AST:1"];
23 -> 25 [label="Control Dep:1"];
23 -> 27 [label="Control Dep:1"];
23 -> 37 [label="Control Dep:1"];
23 -> 3 [label="Control Dep:1"];
23 -> 36 [label="Control Dep:1"];
23 -> 2 [label="Control Dep:1"];
23 -> 6 [label="Control Dep:1"];
23 -> 5 [label="Control Dep:1"];
23 -> 1 [label="Control Dep:1"];
23 -> 26 [label="Control Dep:1"];
23 -> 39 [label="Control Dep:1"];
23 -> 30 [label="Control Dep:1"];
23 -> 31 [label="Control Dep:1"];
23 -> 33 [label="Control Dep:1"];
23 -> 32 [label="Control Dep:1"];
23 -> 35 [label="Control Dep:1"];
23 -> 29 [label="Control Dep:1"];
23 -> 38 [label="Control Dep:1"];
23 -> 40 [label="Control Dep:1"];
24 -> 9 [label="AST:1"];
24 -> 17 [label="AST:1"];
24 -> 23 [label="AST:1"];
25 -> 18 [label="AST:2"];
25 -> 27 [label="AST:1"];
26 -> 11 [label="AST:1"];
26 -> 39 [label="AST:1"];
33 -> 32 [label="AST:1"];
38 -> 40 [label="AST:1"];
39 -> 13 [label="AST:1"];
41 -> 67 [label="AST:1"];
41 -> 57 [label="AST:1"];
41 -> 58 [label="AST:1"];
42 -> 61 [label="AST:1"];
43 -> 64 [label="AST:1"];
48 -> 68 [label="AST:1"];
48 -> 9 [label="AST:1"];
49 -> 42 [label="AST:1"];
50 -> 69 [label="AST:1"];
50 -> 2 [label="AST:1"];
51 -> 45 [label="AST:1"];
51 -> 59 [label="AST:1"];
51 -> 10 [label="AST:1"];
52 -> 46 [label="AST:1"];
52 -> 47 [label="AST:1"];
52 -> 70 [label="AST:1"];
53 -> 50 [label="AST:1"];
53 -> 60 [label="AST:1"];
56 -> 16 [label="AST:1"];
60 -> 70 [label="Define Use:1"];
62 -> 43 [label="AST:1"];
65 -> 44 [label="AST:1"];
65 -> 54 [label="AST:1"];
65 -> 11 [label="AST:1"];
66 -> 55 [label="AST:1"];
66 -> 56 [label="AST:1"];
66 -> 63 [label="AST:1"];
68 -> 41 [label="Control Dep:1"];
68 -> 42 [label="Control Dep:1"];
68 -> 43 [label="Control Dep:1"];
68 -> 44 [label="Control Dep:1"];
68 -> 45 [label="Control Dep:1"];
68 -> 46 [label="Control Dep:1"];
68 -> 47 [label="Control Dep:1"];
68 -> 49 [label="Control Dep:1"];
68 -> 50 [label="Control Dep:1"];
68 -> 51 [label="Control Dep:1"];
68 -> 52 [label="Control Dep:1"];
68 -> 53 [label="Control Dep:1"];
68 -> 54 [label="Control Dep:1"];
68 -> 55 [label="Control Dep:1"];
68 -> 56 [label="Control Dep:1"];
68 -> 57 [label="Control Dep:1"];
68 -> 58 [label="Control Dep:1"];
68 -> 59 [label="Control Dep:1"];
68 -> 60 [label="Control Dep:1"];
68 -> 61 [label="Control Dep:1"];
68 -> 62 [label="Control Dep:1"];
68 -> 63 [label="Control Dep:1"];
68 -> 64 [label="Control Dep:1"];
68 -> 65 [label="Control Dep:1"];
68 -> 66 [label="Control Dep:1"];
68 -> 67 [label="Control Dep:1"];
68 -> 28 [label="AST:1"];
68 -> 12 [label="AST:1"];
68 -> 13 [label="AST:1"];
68 -> 9 [label="Control Dep:1"];
68 -> 25 [label="Control Dep:1"];
68 -> 18 [label="Control Dep:1"];
68 -> 10 [label="Control Dep:1"];
68 -> 69 [label="Control Dep:1"];
68 -> 2 [label="Control Dep:1"];
68 -> 6 [label="Control Dep:1"];
68 -> 5 [label="Control Dep:1"];
68 -> 1 [label="Control Dep:1"];
68 -> 70 [label="Control Dep:1"];
68 -> 16 [label="Control Dep:1"];
68 -> 11 [label="Control Dep:1"];
}