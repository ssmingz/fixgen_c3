digraph "doOneJar#?,File,File" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@doOneJar" shape=ellipse]
2 [label="2:CtParameterImpl@File jarSource" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@File" shape=ellipse]
4 [label="2:CtParameterImpl@File jarTarget" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@File" shape=ellipse]
6 [label="2:CtTypeReferenceImpl@BuildException" shape=ellipse]
7 [label="3:CtExecutableReferenceImpl@isJavaVersion()" shape=ellipse]
8 [label="3:CtVirtualElement@isJavaVersion" shape=ellipse]
9 [label="3:CtTypeAccessImpl@JavaEnvUtils" shape=ellipse]
10 [label="3:CtTypeAccessImpl@JAVA_1_1" shape=ellipse]
11 [label="3:CtInvocationImpl@JavaEnvUtils.isJavaVersion(JAVA_1_1)" shape=ellipse]
12 [label="4:CtTypeReferenceImpl@BuildException" shape=ellipse]
13 [label="5:CtLiteralImpl@\"The signjar task is only available on \"" shape=ellipse]
14 [label="5:CtLiteralImpl@\"JDK versions 1.2 or greater\"" shape=ellipse]
15 [label="5:CtBinaryOperatorImpl@\"The signjar task is only available on \" + \"JDK versions 1.2 or greater\"" shape=ellipse]
16 [label="4:CtConstructorCallImpl@new BuildException(\"The signjar task is only available on \" + \"JDK versions 1.2 or greater\")" shape=ellipse]
17 [label="4:CtThrowImpl@throw new BuildException(\"The signjar task is only available on \" + \"JDK versions 1.2 or greater\")" shape=ellipse]
18 [label="3:CtBlockImpl@\{
    throw new BuildException(\"The signjar task is only available on \" + \"JDK versions 1.2 or greater\");
\}" shape=ellipse]
19 [label="3:CtIfImpl@if (JavaEnvUtils.isJavaVersion(JAVA_1_1)) \{
    throw new BuildException(\"The signjar task is only available on \" + \"JDK versions 1.2 or greater\");
\}" shape=ellipse]
20 [label="7:CtLiteralImpl@null" shape=ellipse]
21 [label="7:CtFieldReadImpl@alias" shape=ellipse]
22 [label="7:CtBinaryOperatorImpl@null == alias" shape=ellipse]
23 [label="8:CtTypeReferenceImpl@BuildException" shape=ellipse]
24 [label="8:CtLiteralImpl@\"alias attribute must be set\"" shape=ellipse]
25 [label="8:CtConstructorCallImpl@new BuildException(\"alias attribute must be set\")" shape=ellipse]
26 [label="8:CtThrowImpl@throw new BuildException(\"alias attribute must be set\")" shape=ellipse]
27 [label="7:CtBlockImpl@\{
    throw new BuildException(\"alias attribute must be set\");
\}" shape=ellipse]
28 [label="7:CtIfImpl@if (null == alias) \{
    throw new BuildException(\"alias attribute must be set\");
\}" shape=ellipse]
29 [label="10:CtLiteralImpl@null" shape=ellipse]
30 [label="10:CtFieldReadImpl@storepass" shape=ellipse]
31 [label="10:CtBinaryOperatorImpl@null == storepass" shape=ellipse]
32 [label="11:CtTypeReferenceImpl@BuildException" shape=ellipse]
33 [label="11:CtLiteralImpl@\"storepass attribute must be set\"" shape=ellipse]
34 [label="11:CtConstructorCallImpl@new BuildException(\"storepass attribute must be set\")" shape=ellipse]
35 [label="11:CtThrowImpl@throw new BuildException(\"storepass attribute must be set\")" shape=ellipse]
36 [label="10:CtBlockImpl@\{
    throw new BuildException(\"storepass attribute must be set\");
\}" shape=ellipse]
37 [label="10:CtIfImpl@if (null == storepass) \{
    throw new BuildException(\"storepass attribute must be set\");
\}" shape=ellipse]
38 [label="13:CtExecutableReferenceImpl@isUpToDate(<unknown>,<unknown>)" shape=ellipse]
39 [label="13:CtVirtualElement@isUpToDate" shape=ellipse]
40 [label="13:CtVariableReadImpl@jarSource" shape=ellipse]
41 [label="13:CtVariableReadImpl@jarTarget" shape=ellipse]
42 [label="13:CtInvocationImpl@isUpToDate(jarSource, jarTarget)" shape=ellipse]
43 [label="14:CtReturnImpl@return" shape=ellipse]
44 [label="13:CtBlockImpl@\{
    return;
\}" shape=ellipse]
45 [label="13:CtIfImpl@if (isUpToDate(jarSource, jarTarget)) \{
    return;
\}" shape=ellipse]
46 [label="16:CtTypeReferenceImpl@ExecTask" shape=ellipse]
47 [label="16:CtExecutableReferenceImpl@createTask(java.lang.String)" shape=ellipse]
48 [label="16:CtVirtualElement@createTask" shape=ellipse]
49 [label="16:CtFieldReadImpl@project" shape=ellipse]
50 [label="16:CtLiteralImpl@\"exec\"" shape=ellipse]
51 [label="16:CtInvocationImpl@((ExecTask) (project.createTask(\"exec\")))" shape=ellipse]
52 [label="16:CtTypeReferenceImpl@ExecTask" shape=ellipse]
53 [label="16:CtVirtualElement@cmd" shape=ellipse]
54 [label="16:CtLocalVariableImpl@final ExecTask cmd = ((ExecTask) (project.createTask(\"exec\")))" shape=ellipse]
55 [label="17:CtExecutableReferenceImpl@setExecutable(java.lang.String)" shape=ellipse]
56 [label="17:CtVirtualElement@setExecutable" shape=ellipse]
57 [label="17:CtVariableReadImpl@cmd" shape=ellipse]
58 [label="17:CtLiteralImpl@\"jarsigner\"" shape=ellipse]
59 [label="17:CtInvocationImpl@cmd.setExecutable(\"jarsigner\")" shape=ellipse]
60 [label="18:CtLiteralImpl@null" shape=ellipse]
61 [label="18:CtFieldReadImpl@keystore" shape=ellipse]
62 [label="18:CtBinaryOperatorImpl@null != keystore" shape=ellipse]
63 [label="19:CtExecutableReferenceImpl@setValue(java.lang.String)" shape=ellipse]
64 [label="19:CtVirtualElement@setValue" shape=ellipse]
65 [label="19:CtExecutableReferenceImpl@createArg()" shape=ellipse]
66 [label="19:CtVirtualElement@createArg" shape=ellipse]
67 [label="19:CtVariableReadImpl@cmd" shape=ellipse]
68 [label="19:CtInvocationImpl@cmd.createArg()" shape=ellipse]
69 [label="19:CtLiteralImpl@\"-keystore\"" shape=ellipse]
70 [label="19:CtInvocationImpl@cmd.createArg().setValue(\"-keystore\")" shape=ellipse]
71 [label="20:CtExecutableReferenceImpl@setValue()" shape=ellipse]
72 [label="20:CtVirtualElement@setValue" shape=ellipse]
73 [label="20:CtExecutableReferenceImpl@createArg()" shape=ellipse]
74 [label="20:CtVirtualElement@createArg" shape=ellipse]
75 [label="20:CtVariableReadImpl@cmd" shape=ellipse]
76 [label="20:CtInvocationImpl@cmd.createArg()" shape=ellipse]
77 [label="20:CtExecutableReferenceImpl@toString()" shape=ellipse]
78 [label="20:CtVirtualElement@toString" shape=ellipse]
79 [label="20:CtFieldReadImpl@keystore" shape=ellipse]
80 [label="20:CtInvocationImpl@keystore.toString()" shape=ellipse]
81 [label="20:CtInvocationImpl@cmd.createArg().setValue(keystore.toString())" shape=ellipse]
82 [label="18:CtBlockImpl@\{
    cmd.createArg().setValue(\"-keystore\");
    cmd.createArg().setValue(keystore.toString());
\}" shape=ellipse]
83 [label="18:CtIfImpl@if (null != keystore) \{
    cmd.createArg().setValue(\"-keystore\");
    cmd.createArg().setValue(keystore.toString());
\}" shape=ellipse]
84 [label="22:CtLiteralImpl@null" shape=ellipse]
85 [label="22:CtFieldReadImpl@storepass" shape=ellipse]
86 [label="22:CtBinaryOperatorImpl@null != storepass" shape=ellipse]
87 [label="23:CtExecutableReferenceImpl@setValue(java.lang.String)" shape=ellipse]
88 [label="23:CtVirtualElement@setValue" shape=ellipse]
89 [label="23:CtExecutableReferenceImpl@createArg()" shape=ellipse]
90 [label="23:CtVirtualElement@createArg" shape=ellipse]
91 [label="23:CtVariableReadImpl@cmd" shape=ellipse]
92 [label="23:CtInvocationImpl@cmd.createArg()" shape=ellipse]
93 [label="23:CtLiteralImpl@\"-storepass\"" shape=ellipse]
94 [label="23:CtInvocationImpl@cmd.createArg().setValue(\"-storepass\")" shape=ellipse]
95 [label="24:CtExecutableReferenceImpl@setValue()" shape=ellipse]
96 [label="24:CtVirtualElement@setValue" shape=ellipse]
97 [label="24:CtExecutableReferenceImpl@createArg()" shape=ellipse]
98 [label="24:CtVirtualElement@createArg" shape=ellipse]
99 [label="24:CtVariableReadImpl@cmd" shape=ellipse]
100 [label="24:CtInvocationImpl@cmd.createArg()" shape=ellipse]
101 [label="24:CtFieldReadImpl@storepass" shape=ellipse]
102 [label="24:CtInvocationImpl@cmd.createArg().setValue(storepass)" shape=ellipse]
103 [label="22:CtBlockImpl@\{
    cmd.createArg().setValue(\"-storepass\");
    cmd.createArg().setValue(storepass);
\}" shape=ellipse]
104 [label="22:CtIfImpl@if (null != storepass) \{
    cmd.createArg().setValue(\"-storepass\");
    cmd.createArg().setValue(storepass);
\}" shape=ellipse]
105 [label="26:CtLiteralImpl@null" shape=ellipse]
106 [label="26:CtFieldReadImpl@storetype" shape=ellipse]
107 [label="26:CtBinaryOperatorImpl@null != storetype" shape=ellipse]
108 [label="27:CtExecutableReferenceImpl@setValue(java.lang.String)" shape=ellipse]
109 [label="27:CtVirtualElement@setValue" shape=ellipse]
110 [label="27:CtExecutableReferenceImpl@createArg()" shape=ellipse]
111 [label="27:CtVirtualElement@createArg" shape=ellipse]
112 [label="27:CtVariableReadImpl@cmd" shape=ellipse]
113 [label="27:CtInvocationImpl@cmd.createArg()" shape=ellipse]
114 [label="27:CtLiteralImpl@\"-storetype\"" shape=ellipse]
115 [label="27:CtInvocationImpl@cmd.createArg().setValue(\"-storetype\")" shape=ellipse]
116 [label="28:CtExecutableReferenceImpl@setValue()" shape=ellipse]
117 [label="28:CtVirtualElement@setValue" shape=ellipse]
118 [label="28:CtExecutableReferenceImpl@createArg()" shape=ellipse]
119 [label="28:CtVirtualElement@createArg" shape=ellipse]
120 [label="28:CtVariableReadImpl@cmd" shape=ellipse]
121 [label="28:CtInvocationImpl@cmd.createArg()" shape=ellipse]
122 [label="28:CtFieldReadImpl@storetype" shape=ellipse]
123 [label="28:CtInvocationImpl@cmd.createArg().setValue(storetype)" shape=ellipse]
124 [label="26:CtBlockImpl@\{
    cmd.createArg().setValue(\"-storetype\");
    cmd.createArg().setValue(storetype);
\}" shape=ellipse]
125 [label="26:CtIfImpl@if (null != storetype) \{
    cmd.createArg().setValue(\"-storetype\");
    cmd.createArg().setValue(storetype);
\}" shape=ellipse]
126 [label="30:CtLiteralImpl@null" shape=ellipse]
127 [label="30:CtFieldReadImpl@keypass" shape=ellipse]
128 [label="30:CtBinaryOperatorImpl@null != keypass" shape=ellipse]
129 [label="31:CtExecutableReferenceImpl@setValue(java.lang.String)" shape=ellipse]
130 [label="31:CtVirtualElement@setValue" shape=ellipse]
131 [label="31:CtExecutableReferenceImpl@createArg()" shape=ellipse]
132 [label="31:CtVirtualElement@createArg" shape=ellipse]
133 [label="31:CtVariableReadImpl@cmd" shape=ellipse]
134 [label="31:CtInvocationImpl@cmd.createArg()" shape=ellipse]
135 [label="31:CtLiteralImpl@\"-keypass\"" shape=ellipse]
136 [label="31:CtInvocationImpl@cmd.createArg().setValue(\"-keypass\")" shape=ellipse]
137 [label="32:CtExecutableReferenceImpl@setValue()" shape=ellipse]
138 [label="32:CtVirtualElement@setValue" shape=ellipse]
139 [label="32:CtExecutableReferenceImpl@createArg()" shape=ellipse]
140 [label="32:CtVirtualElement@createArg" shape=ellipse]
141 [label="32:CtVariableReadImpl@cmd" shape=ellipse]
142 [label="32:CtInvocationImpl@cmd.createArg()" shape=ellipse]
143 [label="32:CtFieldReadImpl@keypass" shape=ellipse]
144 [label="32:CtInvocationImpl@cmd.createArg().setValue(keypass)" shape=ellipse]
145 [label="30:CtBlockImpl@\{
    cmd.createArg().setValue(\"-keypass\");
    cmd.createArg().setValue(keypass);
\}" shape=ellipse]
146 [label="30:CtIfImpl@if (null != keypass) \{
    cmd.createArg().setValue(\"-keypass\");
    cmd.createArg().setValue(keypass);
\}" shape=ellipse]
147 [label="34:CtLiteralImpl@null" shape=ellipse]
148 [label="34:CtFieldReadImpl@sigfile" shape=ellipse]
149 [label="34:CtBinaryOperatorImpl@null != sigfile" shape=ellipse]
150 [label="35:CtExecutableReferenceImpl@setValue(java.lang.String)" shape=ellipse]
151 [label="35:CtVirtualElement@setValue" shape=ellipse]
152 [label="35:CtExecutableReferenceImpl@createArg()" shape=ellipse]
153 [label="35:CtVirtualElement@createArg" shape=ellipse]
154 [label="35:CtVariableReadImpl@cmd" shape=ellipse]
155 [label="35:CtInvocationImpl@cmd.createArg()" shape=ellipse]
156 [label="35:CtLiteralImpl@\"-sigfile\"" shape=ellipse]
157 [label="35:CtInvocationImpl@cmd.createArg().setValue(\"-sigfile\")" shape=ellipse]
158 [label="36:CtExecutableReferenceImpl@setValue()" shape=ellipse]
159 [label="36:CtVirtualElement@setValue" shape=ellipse]
160 [label="36:CtExecutableReferenceImpl@createArg()" shape=ellipse]
161 [label="36:CtVirtualElement@createArg" shape=ellipse]
162 [label="36:CtVariableReadImpl@cmd" shape=ellipse]
163 [label="36:CtInvocationImpl@cmd.createArg()" shape=ellipse]
164 [label="36:CtExecutableReferenceImpl@toString()" shape=ellipse]
165 [label="36:CtVirtualElement@toString" shape=ellipse]
166 [label="36:CtFieldReadImpl@sigfile" shape=ellipse]
167 [label="36:CtInvocationImpl@sigfile.toString()" shape=ellipse]
168 [label="36:CtInvocationImpl@cmd.createArg().setValue(sigfile.toString())" shape=ellipse]
169 [label="34:CtBlockImpl@\{
    cmd.createArg().setValue(\"-sigfile\");
    cmd.createArg().setValue(sigfile.toString());
\}" shape=ellipse]
170 [label="34:CtIfImpl@if (null != sigfile) \{
    cmd.createArg().setValue(\"-sigfile\");
    cmd.createArg().setValue(sigfile.toString());
\}" shape=ellipse]
171 [label="38:CtLiteralImpl@null" shape=ellipse]
172 [label="38:CtVariableReadImpl@jarTarget" shape=ellipse]
173 [label="38:CtBinaryOperatorImpl@null != jarTarget" shape=ellipse]
174 [label="39:CtExecutableReferenceImpl@setValue(java.lang.String)" shape=ellipse]
175 [label="39:CtVirtualElement@setValue" shape=ellipse]
176 [label="39:CtExecutableReferenceImpl@createArg()" shape=ellipse]
177 [label="39:CtVirtualElement@createArg" shape=ellipse]
178 [label="39:CtVariableReadImpl@cmd" shape=ellipse]
179 [label="39:CtInvocationImpl@cmd.createArg()" shape=ellipse]
180 [label="39:CtLiteralImpl@\"-signedjar\"" shape=ellipse]
181 [label="39:CtInvocationImpl@cmd.createArg().setValue(\"-signedjar\")" shape=ellipse]
182 [label="40:CtExecutableReferenceImpl@setValue()" shape=ellipse]
183 [label="40:CtVirtualElement@setValue" shape=ellipse]
184 [label="40:CtExecutableReferenceImpl@createArg()" shape=ellipse]
185 [label="40:CtVirtualElement@createArg" shape=ellipse]
186 [label="40:CtVariableReadImpl@cmd" shape=ellipse]
187 [label="40:CtInvocationImpl@cmd.createArg()" shape=ellipse]
188 [label="40:CtExecutableReferenceImpl@toString()" shape=ellipse]
189 [label="40:CtVirtualElement@toString" shape=ellipse]
190 [label="40:CtVariableReadImpl@jarTarget" shape=ellipse]
191 [label="40:CtInvocationImpl@jarTarget.toString()" shape=ellipse]
192 [label="40:CtInvocationImpl@cmd.createArg().setValue(jarTarget.toString())" shape=ellipse]
193 [label="38:CtBlockImpl@\{
    cmd.createArg().setValue(\"-signedjar\");
    cmd.createArg().setValue(jarTarget.toString());
\}" shape=ellipse]
194 [label="38:CtIfImpl@if (null != jarTarget) \{
    cmd.createArg().setValue(\"-signedjar\");
    cmd.createArg().setValue(jarTarget.toString());
\}" shape=ellipse]
195 [label="42:CtFieldReadImpl@verbose" shape=ellipse]
196 [label="43:CtExecutableReferenceImpl@setValue(java.lang.String)" shape=ellipse]
197 [label="43:CtVirtualElement@setValue" shape=ellipse]
198 [label="43:CtExecutableReferenceImpl@createArg()" shape=ellipse]
199 [label="43:CtVirtualElement@createArg" shape=ellipse]
200 [label="43:CtVariableReadImpl@cmd" shape=ellipse]
201 [label="43:CtInvocationImpl@cmd.createArg()" shape=ellipse]
202 [label="43:CtLiteralImpl@\"-verbose\"" shape=ellipse]
203 [label="43:CtInvocationImpl@cmd.createArg().setValue(\"-verbose\")" shape=ellipse]
204 [label="42:CtBlockImpl@\{
    cmd.createArg().setValue(\"-verbose\");
\}" shape=ellipse]
205 [label="42:CtIfImpl@if (verbose) \{
    cmd.createArg().setValue(\"-verbose\");
\}" shape=ellipse]
206 [label="45:CtFieldReadImpl@internalsf" shape=ellipse]
207 [label="46:CtExecutableReferenceImpl@setValue(java.lang.String)" shape=ellipse]
208 [label="46:CtVirtualElement@setValue" shape=ellipse]
209 [label="46:CtExecutableReferenceImpl@createArg()" shape=ellipse]
210 [label="46:CtVirtualElement@createArg" shape=ellipse]
211 [label="46:CtVariableReadImpl@cmd" shape=ellipse]
212 [label="46:CtInvocationImpl@cmd.createArg()" shape=ellipse]
213 [label="46:CtLiteralImpl@\"-internalsf\"" shape=ellipse]
214 [label="46:CtInvocationImpl@cmd.createArg().setValue(\"-internalsf\")" shape=ellipse]
215 [label="45:CtBlockImpl@\{
    cmd.createArg().setValue(\"-internalsf\");
\}" shape=ellipse]
216 [label="45:CtIfImpl@if (internalsf) \{
    cmd.createArg().setValue(\"-internalsf\");
\}" shape=ellipse]
217 [label="48:CtFieldReadImpl@sectionsonly" shape=ellipse]
218 [label="49:CtExecutableReferenceImpl@setValue(java.lang.String)" shape=ellipse]
219 [label="49:CtVirtualElement@setValue" shape=ellipse]
220 [label="49:CtExecutableReferenceImpl@createArg()" shape=ellipse]
221 [label="49:CtVirtualElement@createArg" shape=ellipse]
222 [label="49:CtVariableReadImpl@cmd" shape=ellipse]
223 [label="49:CtInvocationImpl@cmd.createArg()" shape=ellipse]
224 [label="49:CtLiteralImpl@\"-sectionsonly\"" shape=ellipse]
225 [label="49:CtInvocationImpl@cmd.createArg().setValue(\"-sectionsonly\")" shape=ellipse]
226 [label="48:CtBlockImpl@\{
    cmd.createArg().setValue(\"-sectionsonly\");
\}" shape=ellipse]
227 [label="48:CtIfImpl@if (sectionsonly) \{
    cmd.createArg().setValue(\"-sectionsonly\");
\}" shape=ellipse]
228 [label="51:CtExecutableReferenceImpl@setValue()" shape=ellipse]
229 [label="51:CtVirtualElement@setValue" shape=ellipse]
230 [label="51:CtExecutableReferenceImpl@createArg()" shape=ellipse]
231 [label="51:CtVirtualElement@createArg" shape=ellipse]
232 [label="51:CtVariableReadImpl@cmd" shape=ellipse]
233 [label="51:CtInvocationImpl@cmd.createArg()" shape=ellipse]
234 [label="51:CtExecutableReferenceImpl@toString()" shape=ellipse]
235 [label="51:CtVirtualElement@toString" shape=ellipse]
236 [label="51:CtVariableReadImpl@jarSource" shape=ellipse]
237 [label="51:CtInvocationImpl@jarSource.toString()" shape=ellipse]
238 [label="51:CtInvocationImpl@cmd.createArg().setValue(jarSource.toString())" shape=ellipse]
239 [label="52:CtExecutableReferenceImpl@setValue()" shape=ellipse]
240 [label="52:CtVirtualElement@setValue" shape=ellipse]
241 [label="52:CtExecutableReferenceImpl@createArg()" shape=ellipse]
242 [label="52:CtVirtualElement@createArg" shape=ellipse]
243 [label="52:CtVariableReadImpl@cmd" shape=ellipse]
244 [label="52:CtInvocationImpl@cmd.createArg()" shape=ellipse]
245 [label="52:CtFieldReadImpl@alias" shape=ellipse]
246 [label="52:CtInvocationImpl@cmd.createArg().setValue(alias)" shape=ellipse]
247 [label="53:CtExecutableReferenceImpl@log(<unknown>)" shape=ellipse]
248 [label="53:CtVirtualElement@log" shape=ellipse]
249 [label="53:CtLiteralImpl@\"Signing Jar : \"" shape=ellipse]
250 [label="53:CtExecutableReferenceImpl@getAbsolutePath()" shape=ellipse]
251 [label="53:CtVirtualElement@getAbsolutePath" shape=ellipse]
252 [label="53:CtVariableReadImpl@jarSource" shape=ellipse]
253 [label="53:CtInvocationImpl@jarSource.getAbsolutePath()" shape=ellipse]
254 [label="53:CtBinaryOperatorImpl@\"Signing Jar : \" + jarSource.getAbsolutePath()" shape=ellipse]
255 [label="53:CtInvocationImpl@log(\"Signing Jar : \" + jarSource.getAbsolutePath())" shape=ellipse]
256 [label="54:CtExecutableReferenceImpl@setFailonerror(boolean)" shape=ellipse]
257 [label="54:CtVirtualElement@setFailonerror" shape=ellipse]
258 [label="54:CtVariableReadImpl@cmd" shape=ellipse]
259 [label="54:CtLiteralImpl@true" shape=ellipse]
260 [label="54:CtInvocationImpl@cmd.setFailonerror(true)" shape=ellipse]
261 [label="55:CtExecutableReferenceImpl@setTaskName()" shape=ellipse]
262 [label="55:CtVirtualElement@setTaskName" shape=ellipse]
263 [label="55:CtVariableReadImpl@cmd" shape=ellipse]
264 [label="55:CtExecutableReferenceImpl@getTaskName()" shape=ellipse]
265 [label="55:CtVirtualElement@getTaskName" shape=ellipse]
266 [label="55:CtInvocationImpl@getTaskName()" shape=ellipse]
267 [label="55:CtInvocationImpl@cmd.setTaskName(getTaskName())" shape=ellipse]
268 [label="56:CtExecutableReferenceImpl@execute()" shape=ellipse]
269 [label="56:CtVirtualElement@execute" shape=ellipse]
270 [label="56:CtVariableReadImpl@cmd" shape=ellipse]
271 [label="56:CtInvocationImpl@cmd.execute()" shape=ellipse]
272 [label="2:CtBlockImpl@\{
    if (JavaEnvUtils.isJavaVersion(JAVA_1_1)) \{
        throw new BuildException(\"The signjar task is only available on \" + \"JDK versions 1.2 or greater\");
    \}
    if (null == alias) \{
        throw new BuildException(\"alias attribute must be set\");
    \}
    if (null == storepass) \{
        throw new BuildException(\"storepass attribute must be set\");
    \}
    if (isUpToDate(jarSource, jarTarget)) \{
        return;
    \}
    final ExecTask cmd = ((ExecTask) (project.createTask(\"exec\")));
    cmd.setExecutable(\"jarsigner\");
    if (null != keystore) \{
        cmd.createArg().setValue(\"-keystore\");
        cmd.createArg().setValue(keystore.toString());
    \}
    if (null != storepass) \{
        cmd.createArg().setValue(\"-storepass\");
        cmd.createArg().setValue(storepass);
    \}
    if (null != storetype) \{
        cmd.createArg().setValue(\"-storetype\");
        cmd.createArg().setValue(storetype);
    \}
    if (null != keypass) \{
        cmd.createArg().setValue(\"-keypass\");
        cmd.createArg().setValue(keypass);
    \}
    if (null != sigfile) \{
        cmd.createArg().setValue(\"-sigfile\");
        cmd.createArg().setValue(sigfile.toString());
    \}
    if (null != jarTarget) \{
        cmd.createArg().setValue(\"-signedjar\");
        cmd.createArg().setValue(jarTarget.toString());
    \}
    if (verbose) \{
        cmd.createArg().setValue(\"-verbose\");
    \}
    if (internalsf) \{
        cmd.createArg().setValue(\"-internalsf\");
    \}
    if (sectionsonly) \{
        cmd.createArg().setValue(\"-sectionsonly\");
    \}
    cmd.createArg().setValue(jarSource.toString());
    cmd.createArg().setValue(alias);
    log(\"Signing Jar : \" + jarSource.getAbsolutePath());
    cmd.setFailonerror(true);
    cmd.setTaskName(getTaskName());
    cmd.execute();
\}" shape=ellipse]
273 [label="2:CtMethodImpl@private void doOneJar(File jarSource, File jarTarget) throws BuildException \{
    if (JavaEnvUtils.isJavaVersion(JAVA_1_1)) \{
        throw new BuildException(\"The signjar task is only available on \" + \"JDK versions 1.2 or greater\");
    \}
    if (null == alias) \{
        throw new BuildException(\"alias attribute must be set\");
    \}
    if (null == storepass) \{
        throw new BuildException(\"storepass attribute must be set\");
    \}
    if (isUpToDate(jarSource, jarTarget)) \{
        return;
    \}
    final ExecTask cmd = ((ExecTask) (project.createTask(\"exec\")));
    cmd.setExecutable(\"jarsigner\");
    if (null != keystore) \{
        cmd.createArg().setValue(\"-keystore\");
        cmd.createArg().setValue(keystore.toString());
    \}
    if (null != storepass) \{
        cmd.createArg().setValue(\"-storepass\");
        cmd.createArg().setValue(storepass);
    \}
    if (null != storetype) \{
        cmd.createArg().setValue(\"-storetype\");
        cmd.createArg().setValue(storetype);
    \}
    if (null != keypass) \{
        cmd.createArg().setValue(\"-keypass\");
        cmd.createArg().setValue(keypass);
    \}
    if (null != sigfile) \{
        cmd.createArg().setValue(\"-sigfile\");
        cmd.createArg().setValue(sigfile.toString());
    \}
    if (null != jarTarget) \{
        cmd.createArg().setValue(\"-signedjar\");
        cmd.createArg().setValue(jarTarget.toString());
    \}
    if (verbose) \{
        cmd.createArg().setValue(\"-verbose\");
    \}
    if (internalsf) \{
        cmd.createArg().setValue(\"-internalsf\");
    \}
    if (sectionsonly) \{
        cmd.createArg().setValue(\"-sectionsonly\");
    \}
    cmd.createArg().setValue(jarSource.toString());
    cmd.createArg().setValue(alias);
    log(\"Signing Jar : \" + jarSource.getAbsolutePath());
    cmd.setFailonerror(true);
    cmd.setTaskName(getTaskName());
    cmd.execute();
\}" shape=ellipse]
274 [label="16:Delete@DELETE" shape=ellipse]
275 [label="16:Insert@INSERT" shape=ellipse]
276 [label="16:CtInvocationImpl@getProject()" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
11 -> 8 [label="AST"];
11 -> 9 [label="AST"];
11 -> 7 [label="AST"];
11 -> 10 [label="AST"];
11 -> 18 [label="Control Dep"];
11 -> 17 [label="Control Dep"];
11 -> 16 [label="Control Dep"];
11 -> 15 [label="Control Dep"];
11 -> 13 [label="Control Dep"];
11 -> 14 [label="Control Dep"];
15 -> 13 [label="AST"];
15 -> 14 [label="AST"];
16 -> 15 [label="AST"];
17 -> 16 [label="AST"];
18 -> 17 [label="AST"];
19 -> 11 [label="AST"];
19 -> 18 [label="AST"];
22 -> 20 [label="AST"];
22 -> 21 [label="AST"];
22 -> 27 [label="Control Dep"];
22 -> 26 [label="Control Dep"];
22 -> 25 [label="Control Dep"];
22 -> 24 [label="Control Dep"];
25 -> 24 [label="AST"];
26 -> 25 [label="AST"];
27 -> 26 [label="AST"];
28 -> 22 [label="AST"];
28 -> 27 [label="AST"];
31 -> 29 [label="AST"];
31 -> 30 [label="AST"];
31 -> 36 [label="Control Dep"];
31 -> 35 [label="Control Dep"];
31 -> 34 [label="Control Dep"];
31 -> 33 [label="Control Dep"];
34 -> 33 [label="AST"];
35 -> 34 [label="AST"];
36 -> 35 [label="AST"];
37 -> 31 [label="AST"];
37 -> 36 [label="AST"];
42 -> 39 [label="AST"];
42 -> 38 [label="AST"];
42 -> 40 [label="AST"];
42 -> 41 [label="AST"];
42 -> 44 [label="Control Dep"];
42 -> 43 [label="Control Dep"];
44 -> 43 [label="AST"];
45 -> 42 [label="AST"];
45 -> 44 [label="AST"];
49 -> 53 [label="Data Dep"];
49 -> 274 [label="Action"];
51 -> 48 [label="AST"];
51 -> 52 [label="AST"];
51 -> 49 [label="AST"];
51 -> 47 [label="AST"];
51 -> 50 [label="AST"];
51 -> 275 [label="Action"];
53 -> 57 [label="Define-Use"];
53 -> 67 [label="Define-Use"];
53 -> 75 [label="Define-Use"];
53 -> 91 [label="Define-Use"];
53 -> 99 [label="Define-Use"];
53 -> 112 [label="Define-Use"];
53 -> 120 [label="Define-Use"];
53 -> 133 [label="Define-Use"];
53 -> 141 [label="Define-Use"];
53 -> 154 [label="Define-Use"];
53 -> 162 [label="Define-Use"];
53 -> 178 [label="Define-Use"];
53 -> 186 [label="Define-Use"];
53 -> 200 [label="Define-Use"];
53 -> 211 [label="Define-Use"];
53 -> 222 [label="Define-Use"];
53 -> 232 [label="Define-Use"];
53 -> 243 [label="Define-Use"];
53 -> 258 [label="Define-Use"];
53 -> 263 [label="Define-Use"];
53 -> 270 [label="Define-Use"];
54 -> 53 [label="AST"];
54 -> 46 [label="AST"];
54 -> 51 [label="AST"];
59 -> 56 [label="AST"];
59 -> 57 [label="AST"];
59 -> 55 [label="AST"];
59 -> 58 [label="AST"];
62 -> 60 [label="AST"];
62 -> 61 [label="AST"];
62 -> 82 [label="Control Dep"];
62 -> 70 [label="Control Dep"];
62 -> 63 [label="Control Dep"];
62 -> 68 [label="Control Dep"];
62 -> 65 [label="Control Dep"];
62 -> 67 [label="Control Dep"];
62 -> 69 [label="Control Dep"];
62 -> 81 [label="Control Dep"];
62 -> 71 [label="Control Dep"];
62 -> 76 [label="Control Dep"];
62 -> 73 [label="Control Dep"];
62 -> 75 [label="Control Dep"];
62 -> 80 [label="Control Dep"];
62 -> 77 [label="Control Dep"];
62 -> 79 [label="Control Dep"];
68 -> 66 [label="AST"];
68 -> 67 [label="AST"];
68 -> 65 [label="AST"];
70 -> 64 [label="AST"];
70 -> 68 [label="AST"];
70 -> 63 [label="AST"];
70 -> 69 [label="AST"];
76 -> 74 [label="AST"];
76 -> 75 [label="AST"];
76 -> 73 [label="AST"];
80 -> 78 [label="AST"];
80 -> 79 [label="AST"];
80 -> 77 [label="AST"];
81 -> 72 [label="AST"];
81 -> 76 [label="AST"];
81 -> 71 [label="AST"];
81 -> 80 [label="AST"];
82 -> 70 [label="AST"];
82 -> 81 [label="AST"];
83 -> 62 [label="AST"];
83 -> 82 [label="AST"];
86 -> 84 [label="AST"];
86 -> 85 [label="AST"];
86 -> 103 [label="Control Dep"];
86 -> 94 [label="Control Dep"];
86 -> 87 [label="Control Dep"];
86 -> 92 [label="Control Dep"];
86 -> 89 [label="Control Dep"];
86 -> 91 [label="Control Dep"];
86 -> 93 [label="Control Dep"];
86 -> 102 [label="Control Dep"];
86 -> 95 [label="Control Dep"];
86 -> 100 [label="Control Dep"];
86 -> 97 [label="Control Dep"];
86 -> 99 [label="Control Dep"];
86 -> 101 [label="Control Dep"];
92 -> 90 [label="AST"];
92 -> 91 [label="AST"];
92 -> 89 [label="AST"];
94 -> 88 [label="AST"];
94 -> 92 [label="AST"];
94 -> 87 [label="AST"];
94 -> 93 [label="AST"];
100 -> 98 [label="AST"];
100 -> 99 [label="AST"];
100 -> 97 [label="AST"];
102 -> 96 [label="AST"];
102 -> 100 [label="AST"];
102 -> 95 [label="AST"];
102 -> 101 [label="AST"];
103 -> 94 [label="AST"];
103 -> 102 [label="AST"];
104 -> 86 [label="AST"];
104 -> 103 [label="AST"];
107 -> 105 [label="AST"];
107 -> 106 [label="AST"];
107 -> 124 [label="Control Dep"];
107 -> 115 [label="Control Dep"];
107 -> 108 [label="Control Dep"];
107 -> 113 [label="Control Dep"];
107 -> 110 [label="Control Dep"];
107 -> 112 [label="Control Dep"];
107 -> 114 [label="Control Dep"];
107 -> 123 [label="Control Dep"];
107 -> 116 [label="Control Dep"];
107 -> 121 [label="Control Dep"];
107 -> 118 [label="Control Dep"];
107 -> 120 [label="Control Dep"];
107 -> 122 [label="Control Dep"];
113 -> 111 [label="AST"];
113 -> 112 [label="AST"];
113 -> 110 [label="AST"];
115 -> 109 [label="AST"];
115 -> 113 [label="AST"];
115 -> 108 [label="AST"];
115 -> 114 [label="AST"];
121 -> 119 [label="AST"];
121 -> 120 [label="AST"];
121 -> 118 [label="AST"];
123 -> 117 [label="AST"];
123 -> 121 [label="AST"];
123 -> 116 [label="AST"];
123 -> 122 [label="AST"];
124 -> 115 [label="AST"];
124 -> 123 [label="AST"];
125 -> 107 [label="AST"];
125 -> 124 [label="AST"];
128 -> 126 [label="AST"];
128 -> 127 [label="AST"];
128 -> 145 [label="Control Dep"];
128 -> 136 [label="Control Dep"];
128 -> 129 [label="Control Dep"];
128 -> 134 [label="Control Dep"];
128 -> 131 [label="Control Dep"];
128 -> 133 [label="Control Dep"];
128 -> 135 [label="Control Dep"];
128 -> 144 [label="Control Dep"];
128 -> 137 [label="Control Dep"];
128 -> 142 [label="Control Dep"];
128 -> 139 [label="Control Dep"];
128 -> 141 [label="Control Dep"];
128 -> 143 [label="Control Dep"];
134 -> 132 [label="AST"];
134 -> 133 [label="AST"];
134 -> 131 [label="AST"];
136 -> 130 [label="AST"];
136 -> 134 [label="AST"];
136 -> 129 [label="AST"];
136 -> 135 [label="AST"];
142 -> 140 [label="AST"];
142 -> 141 [label="AST"];
142 -> 139 [label="AST"];
144 -> 138 [label="AST"];
144 -> 142 [label="AST"];
144 -> 137 [label="AST"];
144 -> 143 [label="AST"];
145 -> 136 [label="AST"];
145 -> 144 [label="AST"];
146 -> 128 [label="AST"];
146 -> 145 [label="AST"];
149 -> 147 [label="AST"];
149 -> 148 [label="AST"];
149 -> 169 [label="Control Dep"];
149 -> 157 [label="Control Dep"];
149 -> 150 [label="Control Dep"];
149 -> 155 [label="Control Dep"];
149 -> 152 [label="Control Dep"];
149 -> 154 [label="Control Dep"];
149 -> 156 [label="Control Dep"];
149 -> 168 [label="Control Dep"];
149 -> 158 [label="Control Dep"];
149 -> 163 [label="Control Dep"];
149 -> 160 [label="Control Dep"];
149 -> 162 [label="Control Dep"];
149 -> 167 [label="Control Dep"];
149 -> 164 [label="Control Dep"];
149 -> 166 [label="Control Dep"];
155 -> 153 [label="AST"];
155 -> 154 [label="AST"];
155 -> 152 [label="AST"];
157 -> 151 [label="AST"];
157 -> 155 [label="AST"];
157 -> 150 [label="AST"];
157 -> 156 [label="AST"];
163 -> 161 [label="AST"];
163 -> 162 [label="AST"];
163 -> 160 [label="AST"];
167 -> 165 [label="AST"];
167 -> 166 [label="AST"];
167 -> 164 [label="AST"];
168 -> 159 [label="AST"];
168 -> 163 [label="AST"];
168 -> 158 [label="AST"];
168 -> 167 [label="AST"];
169 -> 157 [label="AST"];
169 -> 168 [label="AST"];
170 -> 149 [label="AST"];
170 -> 169 [label="AST"];
173 -> 171 [label="AST"];
173 -> 172 [label="AST"];
173 -> 193 [label="Control Dep"];
173 -> 181 [label="Control Dep"];
173 -> 174 [label="Control Dep"];
173 -> 179 [label="Control Dep"];
173 -> 176 [label="Control Dep"];
173 -> 178 [label="Control Dep"];
173 -> 180 [label="Control Dep"];
173 -> 192 [label="Control Dep"];
173 -> 182 [label="Control Dep"];
173 -> 187 [label="Control Dep"];
173 -> 184 [label="Control Dep"];
173 -> 186 [label="Control Dep"];
173 -> 191 [label="Control Dep"];
173 -> 188 [label="Control Dep"];
173 -> 190 [label="Control Dep"];
179 -> 177 [label="AST"];
179 -> 178 [label="AST"];
179 -> 176 [label="AST"];
181 -> 175 [label="AST"];
181 -> 179 [label="AST"];
181 -> 174 [label="AST"];
181 -> 180 [label="AST"];
187 -> 185 [label="AST"];
187 -> 186 [label="AST"];
187 -> 184 [label="AST"];
191 -> 189 [label="AST"];
191 -> 190 [label="AST"];
191 -> 188 [label="AST"];
192 -> 183 [label="AST"];
192 -> 187 [label="AST"];
192 -> 182 [label="AST"];
192 -> 191 [label="AST"];
193 -> 181 [label="AST"];
193 -> 192 [label="AST"];
194 -> 173 [label="AST"];
194 -> 193 [label="AST"];
195 -> 204 [label="Control Dep"];
195 -> 203 [label="Control Dep"];
195 -> 196 [label="Control Dep"];
195 -> 201 [label="Control Dep"];
195 -> 198 [label="Control Dep"];
195 -> 200 [label="Control Dep"];
195 -> 202 [label="Control Dep"];
201 -> 199 [label="AST"];
201 -> 200 [label="AST"];
201 -> 198 [label="AST"];
203 -> 197 [label="AST"];
203 -> 201 [label="AST"];
203 -> 196 [label="AST"];
203 -> 202 [label="AST"];
204 -> 203 [label="AST"];
205 -> 195 [label="AST"];
205 -> 204 [label="AST"];
206 -> 215 [label="Control Dep"];
206 -> 214 [label="Control Dep"];
206 -> 207 [label="Control Dep"];
206 -> 212 [label="Control Dep"];
206 -> 209 [label="Control Dep"];
206 -> 211 [label="Control Dep"];
206 -> 213 [label="Control Dep"];
212 -> 210 [label="AST"];
212 -> 211 [label="AST"];
212 -> 209 [label="AST"];
214 -> 208 [label="AST"];
214 -> 212 [label="AST"];
214 -> 207 [label="AST"];
214 -> 213 [label="AST"];
215 -> 214 [label="AST"];
216 -> 206 [label="AST"];
216 -> 215 [label="AST"];
217 -> 226 [label="Control Dep"];
217 -> 225 [label="Control Dep"];
217 -> 218 [label="Control Dep"];
217 -> 223 [label="Control Dep"];
217 -> 220 [label="Control Dep"];
217 -> 222 [label="Control Dep"];
217 -> 224 [label="Control Dep"];
223 -> 221 [label="AST"];
223 -> 222 [label="AST"];
223 -> 220 [label="AST"];
225 -> 219 [label="AST"];
225 -> 223 [label="AST"];
225 -> 218 [label="AST"];
225 -> 224 [label="AST"];
226 -> 225 [label="AST"];
227 -> 217 [label="AST"];
227 -> 226 [label="AST"];
233 -> 231 [label="AST"];
233 -> 232 [label="AST"];
233 -> 230 [label="AST"];
237 -> 235 [label="AST"];
237 -> 236 [label="AST"];
237 -> 234 [label="AST"];
238 -> 229 [label="AST"];
238 -> 233 [label="AST"];
238 -> 228 [label="AST"];
238 -> 237 [label="AST"];
244 -> 242 [label="AST"];
244 -> 243 [label="AST"];
244 -> 241 [label="AST"];
246 -> 240 [label="AST"];
246 -> 244 [label="AST"];
246 -> 239 [label="AST"];
246 -> 245 [label="AST"];
253 -> 251 [label="AST"];
253 -> 252 [label="AST"];
253 -> 250 [label="AST"];
254 -> 249 [label="AST"];
254 -> 253 [label="AST"];
255 -> 248 [label="AST"];
255 -> 247 [label="AST"];
255 -> 254 [label="AST"];
260 -> 257 [label="AST"];
260 -> 258 [label="AST"];
260 -> 256 [label="AST"];
260 -> 259 [label="AST"];
266 -> 265 [label="AST"];
266 -> 264 [label="AST"];
267 -> 262 [label="AST"];
267 -> 263 [label="AST"];
267 -> 261 [label="AST"];
267 -> 266 [label="AST"];
271 -> 269 [label="AST"];
271 -> 270 [label="AST"];
271 -> 268 [label="AST"];
272 -> 19 [label="AST"];
272 -> 28 [label="AST"];
272 -> 37 [label="AST"];
272 -> 45 [label="AST"];
272 -> 54 [label="AST"];
272 -> 59 [label="AST"];
272 -> 83 [label="AST"];
272 -> 104 [label="AST"];
272 -> 125 [label="AST"];
272 -> 146 [label="AST"];
272 -> 170 [label="AST"];
272 -> 194 [label="AST"];
272 -> 205 [label="AST"];
272 -> 216 [label="AST"];
272 -> 227 [label="AST"];
272 -> 238 [label="AST"];
272 -> 246 [label="AST"];
272 -> 255 [label="AST"];
272 -> 260 [label="AST"];
272 -> 267 [label="AST"];
272 -> 271 [label="AST"];
273 -> 1 [label="AST"];
273 -> 0 [label="AST"];
273 -> 2 [label="AST"];
273 -> 4 [label="AST"];
273 -> 6 [label="AST"];
273 -> 272 [label="AST"];
275 -> 276 [label="Action"];
}