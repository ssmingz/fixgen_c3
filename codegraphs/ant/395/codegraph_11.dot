digraph "getSnapshots#?" {
0 [label="2:CtVirtualElement@File[]" shape=ellipse]
1 [label="2:CtArrayTypeReferenceImpl@File[]" shape=ellipse]
2 [label="2:CtVirtualElement@getSnapshots" shape=ellipse]
3 [label="3:CtTypeReferenceImpl@Vector" shape=ellipse]
4 [label="3:CtTypeReferenceImpl@Vector" shape=ellipse]
5 [label="3:CtConstructorCallImpl@new Vector()" shape=ellipse]
6 [label="3:CtVirtualElement@v" shape=ellipse]
7 [label="3:CtLocalVariableImpl@Vector v = new Vector()" shape=ellipse]
8 [label="4:CtTypeReferenceImpl@int" shape=ellipse]
9 [label="4:CtExecutableReferenceImpl@size()" shape=ellipse]
10 [label="4:CtVirtualElement@size" shape=ellipse]
11 [label="4:CtFieldReadImpl@filesets" shape=ellipse]
12 [label="4:CtInvocationImpl@filesets.size()" shape=ellipse]
13 [label="4:CtVirtualElement@size" shape=ellipse]
14 [label="4:CtLocalVariableImpl@final int size = filesets.size()" shape=ellipse]
15 [label="5:CtTypeReferenceImpl@int" shape=ellipse]
16 [label="5:CtLiteralImpl@0" shape=ellipse]
17 [label="5:CtVirtualElement@i" shape=ellipse]
18 [label="5:CtLocalVariableImpl@int i = 0" shape=ellipse]
19 [label="5:CtVariableReadImpl@i" shape=ellipse]
20 [label="5:CtVariableReadImpl@size" shape=ellipse]
21 [label="5:CtBinaryOperatorImpl@i < size" shape=ellipse]
22 [label="5:CtVariableWriteImpl@i" shape=ellipse]
23 [label="5:CtUnaryOperatorImpl@i++" shape=ellipse]
24 [label="6:CtTypeReferenceImpl@FileSet" shape=ellipse]
25 [label="6:CtExecutableReferenceImpl@elementAt(int)" shape=ellipse]
26 [label="6:CtVirtualElement@elementAt" shape=ellipse]
27 [label="6:CtFieldReadImpl@filesets" shape=ellipse]
28 [label="6:CtVariableReadImpl@i" shape=ellipse]
29 [label="6:CtInvocationImpl@((FileSet) (filesets.elementAt(i)))" shape=ellipse]
30 [label="6:CtTypeReferenceImpl@FileSet" shape=ellipse]
31 [label="6:CtVirtualElement@fs" shape=ellipse]
32 [label="6:CtLocalVariableImpl@FileSet fs = ((FileSet) (filesets.elementAt(i)))" shape=ellipse]
33 [label="7:CtTypeReferenceImpl@DirectoryScanner" shape=ellipse]
34 [label="7:CtExecutableReferenceImpl@getDirectoryScanner()" shape=ellipse]
35 [label="7:CtVirtualElement@getDirectoryScanner" shape=ellipse]
36 [label="7:CtVariableReadImpl@fs" shape=ellipse]
37 [label="7:CtExecutableReferenceImpl@getProject()" shape=ellipse]
38 [label="7:CtVirtualElement@getProject" shape=ellipse]
39 [label="7:CtInvocationImpl@getProject()" shape=ellipse]
40 [label="7:CtInvocationImpl@fs.getDirectoryScanner(getProject())" shape=ellipse]
41 [label="7:CtVirtualElement@ds" shape=ellipse]
42 [label="7:CtLocalVariableImpl@DirectoryScanner ds = fs.getDirectoryScanner(getProject())" shape=ellipse]
43 [label="8:CtExecutableReferenceImpl@scan()" shape=ellipse]
44 [label="8:CtVirtualElement@scan" shape=ellipse]
45 [label="8:CtVariableReadImpl@ds" shape=ellipse]
46 [label="8:CtInvocationImpl@ds.scan()" shape=ellipse]
47 [label="9:CtVirtualElement@String[]" shape=ellipse]
48 [label="9:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
49 [label="9:CtExecutableReferenceImpl@getIncludedFiles()" shape=ellipse]
50 [label="9:CtVirtualElement@getIncludedFiles" shape=ellipse]
51 [label="9:CtVariableReadImpl@ds" shape=ellipse]
52 [label="9:CtInvocationImpl@ds.getIncludedFiles()" shape=ellipse]
53 [label="9:CtVirtualElement@f" shape=ellipse]
54 [label="9:CtLocalVariableImpl@String[] f = ds.getIncludedFiles()" shape=ellipse]
55 [label="10:CtTypeReferenceImpl@int" shape=ellipse]
56 [label="10:CtLiteralImpl@0" shape=ellipse]
57 [label="10:CtVirtualElement@j" shape=ellipse]
58 [label="10:CtLocalVariableImpl@int j = 0" shape=ellipse]
59 [label="10:CtVariableReadImpl@j" shape=ellipse]
60 [label="10:CtVariableReadImpl@f" shape=ellipse]
61 [label="10:CtLocalVariableReferenceImpl@f" shape=ellipse]
62 [label="10:CtFieldReadImpl@f.length" shape=ellipse]
63 [label="10:CtBinaryOperatorImpl@j < f.length" shape=ellipse]
64 [label="10:CtVariableWriteImpl@j" shape=ellipse]
65 [label="10:CtUnaryOperatorImpl@j++" shape=ellipse]
66 [label="11:CtTypeReferenceImpl@String" shape=ellipse]
67 [label="11:CtVariableReadImpl@f" shape=ellipse]
68 [label="11:CtVariableReadImpl@j" shape=ellipse]
69 [label="11:CtArrayReadImpl@f[j]" shape=ellipse]
70 [label="11:CtVirtualElement@pathname" shape=ellipse]
71 [label="11:CtLocalVariableImpl@String pathname = f[j]" shape=ellipse]
72 [label="12:CtTypeReferenceImpl@File" shape=ellipse]
73 [label="12:CtTypeReferenceImpl@File" shape=ellipse]
74 [label="12:CtExecutableReferenceImpl@getBasedir()" shape=ellipse]
75 [label="12:CtVirtualElement@getBasedir" shape=ellipse]
76 [label="12:CtVariableReadImpl@ds" shape=ellipse]
77 [label="12:CtInvocationImpl@ds.getBasedir()" shape=ellipse]
78 [label="12:CtVariableReadImpl@pathname" shape=ellipse]
79 [label="12:CtConstructorCallImpl@new File(ds.getBasedir(), pathname)" shape=ellipse]
80 [label="12:CtVirtualElement@file" shape=ellipse]
81 [label="12:CtLocalVariableImpl@File file = new File(ds.getBasedir(), pathname)" shape=ellipse]
82 [label="13:CtVariableWriteImpl@file" shape=ellipse]
83 [label="13:CtExecutableReferenceImpl@resolveFile()" shape=ellipse]
84 [label="13:CtVirtualElement@resolveFile" shape=ellipse]
85 [label="13:CtFieldReadImpl@project" shape=ellipse]
86 [label="13:CtExecutableReferenceImpl@getPath()" shape=ellipse]
87 [label="13:CtVirtualElement@getPath" shape=ellipse]
88 [label="13:CtVariableReadImpl@file" shape=ellipse]
89 [label="13:CtInvocationImpl@file.getPath()" shape=ellipse]
90 [label="13:CtInvocationImpl@project.resolveFile(file.getPath())" shape=ellipse]
91 [label="13:CtAssignmentImpl@file = project.resolveFile(file.getPath())" shape=ellipse]
92 [label="14:CtExecutableReferenceImpl@addElement(File)" shape=ellipse]
93 [label="14:CtVirtualElement@addElement" shape=ellipse]
94 [label="14:CtVariableReadImpl@v" shape=ellipse]
95 [label="14:CtVariableReadImpl@file" shape=ellipse]
96 [label="14:CtInvocationImpl@v.addElement(file)" shape=ellipse]
97 [label="10:CtBlockImpl@\{
    String pathname = f[j];
    File file = new File(ds.getBasedir(), pathname);
    file = project.resolveFile(file.getPath());
    v.addElement(file);
\}" shape=ellipse]
98 [label="10:CtForImpl@for (int j = 0; j < f.length; j++) \{
    String pathname = f[j];
    File file = new File(ds.getBasedir(), pathname);
    file = project.resolveFile(file.getPath());
    v.addElement(file);
\}" shape=ellipse]
99 [label="5:CtBlockImpl@\{
    FileSet fs = ((FileSet) (filesets.elementAt(i)));
    DirectoryScanner ds = fs.getDirectoryScanner(getProject());
    ds.scan();
    String[] f = ds.getIncludedFiles();
    for (int j = 0; j < f.length; j++) \{
        String pathname = f[j];
        File file = new File(ds.getBasedir(), pathname);
        file = project.resolveFile(file.getPath());
        v.addElement(file);
    \}
\}" shape=ellipse]
100 [label="5:CtForImpl@for (int i = 0; i < size; i++) \{
    FileSet fs = ((FileSet) (filesets.elementAt(i)));
    DirectoryScanner ds = fs.getDirectoryScanner(getProject());
    ds.scan();
    String[] f = ds.getIncludedFiles();
    for (int j = 0; j < f.length; j++) \{
        String pathname = f[j];
        File file = new File(ds.getBasedir(), pathname);
        file = project.resolveFile(file.getPath());
        v.addElement(file);
    \}
\}" shape=ellipse]
101 [label="17:CtVirtualElement@File[]" shape=ellipse]
102 [label="17:CtArrayTypeReferenceImpl@File[]" shape=ellipse]
103 [label="17:CtNewArrayImpl@new File[v.size()]" shape=ellipse]
104 [label="17:CtInvocationImpl@v.size()" shape=ellipse]
105 [label="17:CtVirtualElement@files" shape=ellipse]
106 [label="17:CtLocalVariableImpl@File[] files = new File[v.size()]" shape=ellipse]
107 [label="18:CtExecutableReferenceImpl@copyInto(File[])" shape=ellipse]
108 [label="18:CtVirtualElement@copyInto" shape=ellipse]
109 [label="18:CtVariableReadImpl@v" shape=ellipse]
110 [label="18:CtVariableReadImpl@files" shape=ellipse]
111 [label="18:CtInvocationImpl@v.copyInto(files)" shape=ellipse]
112 [label="19:CtVariableReadImpl@files" shape=ellipse]
113 [label="19:CtReturnImpl@return files" shape=ellipse]
114 [label="2:CtBlockImpl@\{
    Vector v = new Vector();
    final int size = filesets.size();
    for (int i = 0; i < size; i++) \{
        FileSet fs = ((FileSet) (filesets.elementAt(i)));
        DirectoryScanner ds = fs.getDirectoryScanner(getProject());
        ds.scan();
        String[] f = ds.getIncludedFiles();
        for (int j = 0; j < f.length; j++) \{
            String pathname = f[j];
            File file = new File(ds.getBasedir(), pathname);
            file = project.resolveFile(file.getPath());
            v.addElement(file);
        \}
    \}
    File[] files = new File[v.size()];
    v.copyInto(files);
    return files;
\}" shape=ellipse]
115 [label="2:CtMethodImpl@protected File[] getSnapshots() \{
    Vector v = new Vector();
    final int size = filesets.size();
    for (int i = 0; i < size; i++) \{
        FileSet fs = ((FileSet) (filesets.elementAt(i)));
        DirectoryScanner ds = fs.getDirectoryScanner(getProject());
        ds.scan();
        String[] f = ds.getIncludedFiles();
        for (int j = 0; j < f.length; j++) \{
            String pathname = f[j];
            File file = new File(ds.getBasedir(), pathname);
            file = project.resolveFile(file.getPath());
            v.addElement(file);
        \}
    \}
    File[] files = new File[v.size()];
    v.copyInto(files);
    return files;
\}" shape=ellipse]
116 [label="13:Delete@DELETE" shape=ellipse]
117 [label="13:Insert@INSERT" shape=ellipse]
118 [label="13:CtInvocationImpl@getProject()" shape=ellipse]
1 -> 0 [label="AST"];
6 -> 94 [label="Define-Use"];
6 -> 109 [label="Define-Use"];
7 -> 6 [label="AST"];
7 -> 3 [label="AST"];
7 -> 5 [label="AST"];
11 -> 13 [label="Data Dep"];
12 -> 10 [label="AST"];
12 -> 11 [label="AST"];
12 -> 9 [label="AST"];
13 -> 20 [label="Define-Use"];
14 -> 13 [label="AST"];
14 -> 8 [label="AST"];
14 -> 12 [label="AST"];
17 -> 19 [label="Define-Use"];
18 -> 17 [label="AST"];
18 -> 15 [label="AST"];
18 -> 16 [label="AST"];
21 -> 19 [label="AST"];
21 -> 20 [label="AST"];
21 -> 99 [label="Control Dep"];
21 -> 32 [label="Control Dep"];
21 -> 29 [label="Control Dep"];
21 -> 25 [label="Control Dep"];
21 -> 27 [label="Control Dep"];
21 -> 28 [label="Control Dep"];
21 -> 42 [label="Control Dep"];
21 -> 40 [label="Control Dep"];
21 -> 34 [label="Control Dep"];
21 -> 36 [label="Control Dep"];
21 -> 39 [label="Control Dep"];
21 -> 37 [label="Control Dep"];
21 -> 46 [label="Control Dep"];
21 -> 43 [label="Control Dep"];
21 -> 45 [label="Control Dep"];
21 -> 54 [label="Control Dep"];
21 -> 48 [label="Control Dep"];
21 -> 52 [label="Control Dep"];
21 -> 49 [label="Control Dep"];
21 -> 51 [label="Control Dep"];
21 -> 98 [label="Control Dep"];
21 -> 58 [label="Control Dep"];
21 -> 56 [label="Control Dep"];
21 -> 63 [label="Control Dep"];
21 -> 59 [label="Control Dep"];
21 -> 62 [label="Control Dep"];
21 -> 60 [label="Control Dep"];
21 -> 65 [label="Control Dep"];
21 -> 64 [label="Control Dep"];
22 -> 28 [label="Define-Use"];
23 -> 22 [label="AST"];
27 -> 31 [label="Data Dep"];
28 -> 31 [label="Data Dep"];
29 -> 26 [label="AST"];
29 -> 30 [label="AST"];
29 -> 27 [label="AST"];
29 -> 25 [label="AST"];
29 -> 28 [label="AST"];
31 -> 36 [label="Define-Use"];
32 -> 31 [label="AST"];
32 -> 24 [label="AST"];
32 -> 29 [label="AST"];
36 -> 41 [label="Data Dep"];
39 -> 38 [label="AST"];
39 -> 37 [label="AST"];
40 -> 35 [label="AST"];
40 -> 36 [label="AST"];
40 -> 34 [label="AST"];
40 -> 39 [label="AST"];
41 -> 45 [label="Define-Use"];
41 -> 51 [label="Define-Use"];
41 -> 76 [label="Define-Use"];
42 -> 41 [label="AST"];
42 -> 33 [label="AST"];
42 -> 40 [label="AST"];
46 -> 44 [label="AST"];
46 -> 45 [label="AST"];
46 -> 43 [label="AST"];
48 -> 47 [label="AST"];
51 -> 53 [label="Data Dep"];
52 -> 50 [label="AST"];
52 -> 51 [label="AST"];
52 -> 49 [label="AST"];
53 -> 60 [label="Define-Use"];
53 -> 67 [label="Define-Use"];
53 -> 69 [label="Define-Use"];
54 -> 53 [label="AST"];
54 -> 48 [label="AST"];
54 -> 52 [label="AST"];
57 -> 59 [label="Define-Use"];
58 -> 57 [label="AST"];
58 -> 55 [label="AST"];
58 -> 56 [label="AST"];
60 -> 61 [label="AST"];
62 -> 60 [label="AST"];
63 -> 59 [label="AST"];
63 -> 62 [label="AST"];
63 -> 97 [label="Control Dep"];
63 -> 71 [label="Control Dep"];
63 -> 69 [label="Control Dep"];
63 -> 67 [label="Control Dep"];
63 -> 68 [label="Control Dep"];
63 -> 81 [label="Control Dep"];
63 -> 79 [label="Control Dep"];
63 -> 77 [label="Control Dep"];
63 -> 74 [label="Control Dep"];
63 -> 76 [label="Control Dep"];
63 -> 78 [label="Control Dep"];
63 -> 91 [label="Control Dep"];
63 -> 82 [label="Control Dep"];
63 -> 90 [label="Control Dep"];
63 -> 83 [label="Control Dep"];
63 -> 85 [label="Control Dep"];
63 -> 89 [label="Control Dep"];
63 -> 86 [label="Control Dep"];
63 -> 88 [label="Control Dep"];
63 -> 96 [label="Control Dep"];
63 -> 92 [label="Control Dep"];
63 -> 94 [label="Control Dep"];
63 -> 95 [label="Control Dep"];
64 -> 68 [label="Define-Use"];
65 -> 64 [label="AST"];
69 -> 67 [label="AST"];
69 -> 68 [label="AST"];
69 -> 70 [label="Data Dep"];
70 -> 78 [label="Define-Use"];
71 -> 70 [label="AST"];
71 -> 66 [label="AST"];
71 -> 69 [label="AST"];
76 -> 80 [label="Data Dep"];
77 -> 75 [label="AST"];
77 -> 76 [label="AST"];
77 -> 74 [label="AST"];
78 -> 80 [label="Data Dep"];
79 -> 77 [label="AST"];
79 -> 78 [label="AST"];
81 -> 80 [label="AST"];
81 -> 72 [label="AST"];
81 -> 79 [label="AST"];
82 -> 95 [label="Define-Use"];
85 -> 82 [label="Data Dep"];
85 -> 116 [label="Action"];
88 -> 82 [label="Data Dep"];
89 -> 87 [label="AST"];
89 -> 88 [label="AST"];
89 -> 86 [label="AST"];
90 -> 84 [label="AST"];
90 -> 85 [label="AST"];
90 -> 83 [label="AST"];
90 -> 89 [label="AST"];
90 -> 117 [label="Action"];
91 -> 82 [label="AST"];
91 -> 90 [label="AST"];
96 -> 93 [label="AST"];
96 -> 94 [label="AST"];
96 -> 92 [label="AST"];
96 -> 95 [label="AST"];
97 -> 71 [label="AST"];
97 -> 81 [label="AST"];
97 -> 91 [label="AST"];
97 -> 96 [label="AST"];
98 -> 58 [label="AST"];
98 -> 63 [label="AST"];
98 -> 65 [label="AST"];
98 -> 97 [label="AST"];
99 -> 32 [label="AST"];
99 -> 42 [label="AST"];
99 -> 46 [label="AST"];
99 -> 54 [label="AST"];
99 -> 98 [label="AST"];
100 -> 18 [label="AST"];
100 -> 21 [label="AST"];
100 -> 23 [label="AST"];
100 -> 99 [label="AST"];
102 -> 101 [label="AST"];
103 -> 104 [label="AST"];
105 -> 110 [label="Define-Use"];
105 -> 112 [label="Define-Use"];
106 -> 105 [label="AST"];
106 -> 102 [label="AST"];
106 -> 103 [label="AST"];
111 -> 108 [label="AST"];
111 -> 109 [label="AST"];
111 -> 107 [label="AST"];
111 -> 110 [label="AST"];
113 -> 112 [label="AST"];
114 -> 7 [label="AST"];
114 -> 14 [label="AST"];
114 -> 100 [label="AST"];
114 -> 106 [label="AST"];
114 -> 111 [label="AST"];
114 -> 113 [label="AST"];
115 -> 2 [label="AST"];
115 -> 1 [label="AST"];
115 -> 114 [label="AST"];
117 -> 118 [label="Action"];
}