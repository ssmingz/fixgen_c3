digraph "execute#?" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@execute" shape=ellipse]
2 [label="2:CtTypeReferenceImpl@BuildException" shape=ellipse]
3 [label="3:CtExecutableReferenceImpl@countConditions()" shape=ellipse]
4 [label="3:CtVirtualElement@countConditions" shape=ellipse]
5 [label="3:CtInvocationImpl@countConditions()" shape=ellipse]
6 [label="3:CtLiteralImpl@1" shape=ellipse]
7 [label="3:CtBinaryOperatorImpl@countConditions() > 1" shape=ellipse]
8 [label="4:CtTypeReferenceImpl@BuildException" shape=ellipse]
9 [label="4:CtLiteralImpl@\"You must not nest more than one \"" shape=ellipse]
10 [label="4:CtLiteralImpl@\"condition into <waitfor>\"" shape=ellipse]
11 [label="4:CtBinaryOperatorImpl@\"You must not nest more than one \" + \"condition into <waitfor>\"" shape=ellipse]
12 [label="4:CtConstructorCallImpl@new BuildException(\"You must not nest more than one \" + \"condition into <waitfor>\")" shape=ellipse]
13 [label="4:CtThrowImpl@throw new BuildException(\"You must not nest more than one \" + \"condition into <waitfor>\")" shape=ellipse]
14 [label="3:CtBlockImpl@\{
    throw new BuildException(\"You must not nest more than one \" + \"condition into <waitfor>\");
\}" shape=ellipse]
15 [label="3:CtIfImpl@if (countConditions() > 1) \{
    throw new BuildException(\"You must not nest more than one \" + \"condition into <waitfor>\");
\}" shape=ellipse]
16 [label="6:CtExecutableReferenceImpl@countConditions()" shape=ellipse]
17 [label="6:CtVirtualElement@countConditions" shape=ellipse]
18 [label="6:CtInvocationImpl@countConditions()" shape=ellipse]
19 [label="6:CtLiteralImpl@1" shape=ellipse]
20 [label="6:CtBinaryOperatorImpl@countConditions() < 1" shape=ellipse]
21 [label="7:CtTypeReferenceImpl@BuildException" shape=ellipse]
22 [label="7:CtLiteralImpl@\"You must nest a condition into \"" shape=ellipse]
23 [label="7:CtLiteralImpl@\"<waitfor>\"" shape=ellipse]
24 [label="7:CtBinaryOperatorImpl@\"You must nest a condition into \" + \"<waitfor>\"" shape=ellipse]
25 [label="7:CtConstructorCallImpl@new BuildException(\"You must nest a condition into \" + \"<waitfor>\")" shape=ellipse]
26 [label="7:CtThrowImpl@throw new BuildException(\"You must nest a condition into \" + \"<waitfor>\")" shape=ellipse]
27 [label="6:CtBlockImpl@\{
    throw new BuildException(\"You must nest a condition into \" + \"<waitfor>\");
\}" shape=ellipse]
28 [label="6:CtIfImpl@if (countConditions() < 1) \{
    throw new BuildException(\"You must nest a condition into \" + \"<waitfor>\");
\}" shape=ellipse]
29 [label="9:CtTypeReferenceImpl@Condition" shape=ellipse]
30 [label="9:CtExecutableReferenceImpl@nextElement()" shape=ellipse]
31 [label="9:CtVirtualElement@nextElement" shape=ellipse]
32 [label="9:CtExecutableReferenceImpl@getConditions()" shape=ellipse]
33 [label="9:CtVirtualElement@getConditions" shape=ellipse]
34 [label="9:CtInvocationImpl@getConditions()" shape=ellipse]
35 [label="9:CtInvocationImpl@((Condition) (getConditions().nextElement()))" shape=ellipse]
36 [label="9:CtTypeReferenceImpl@Condition" shape=ellipse]
37 [label="9:CtVirtualElement@c" shape=ellipse]
38 [label="9:CtLocalVariableImpl@Condition c = ((Condition) (getConditions().nextElement()))" shape=ellipse]
39 [label="10:CtTypeReferenceImpl@long" shape=ellipse]
40 [label="10:CtFieldReadImpl@maxWaitMillis" shape=ellipse]
41 [label="10:CtVirtualElement@savedMaxWaitMillis" shape=ellipse]
42 [label="10:CtLocalVariableImpl@long savedMaxWaitMillis = maxWaitMillis" shape=ellipse]
43 [label="11:CtTypeReferenceImpl@long" shape=ellipse]
44 [label="11:CtFieldReadImpl@checkEveryMillis" shape=ellipse]
45 [label="11:CtVirtualElement@savedCheckEveryMillis" shape=ellipse]
46 [label="11:CtLocalVariableImpl@long savedCheckEveryMillis = checkEveryMillis" shape=ellipse]
47 [label="13:CtFieldWriteImpl@maxWaitMillis" shape=ellipse]
48 [label="13:CtFieldReadImpl@maxWaitMultiplier" shape=ellipse]
49 [label="13:CtOperatorAssignmentImpl@maxWaitMillis *= maxWaitMultiplier" shape=ellipse]
50 [label="14:CtFieldWriteImpl@checkEveryMillis" shape=ellipse]
51 [label="14:CtFieldReadImpl@checkEveryMultiplier" shape=ellipse]
52 [label="14:CtOperatorAssignmentImpl@checkEveryMillis *= checkEveryMultiplier" shape=ellipse]
53 [label="15:CtTypeReferenceImpl@long" shape=ellipse]
54 [label="15:CtExecutableReferenceImpl@currentTimeMillis()" shape=ellipse]
55 [label="15:CtVirtualElement@currentTimeMillis" shape=ellipse]
56 [label="15:CtTypeAccessImpl@System" shape=ellipse]
57 [label="15:CtInvocationImpl@System.currentTimeMillis()" shape=ellipse]
58 [label="15:CtVirtualElement@start" shape=ellipse]
59 [label="15:CtLocalVariableImpl@long start = System.currentTimeMillis()" shape=ellipse]
60 [label="16:CtTypeReferenceImpl@long" shape=ellipse]
61 [label="16:CtVariableReadImpl@start" shape=ellipse]
62 [label="16:CtFieldReadImpl@maxWaitMillis" shape=ellipse]
63 [label="16:CtBinaryOperatorImpl@start + maxWaitMillis" shape=ellipse]
64 [label="16:CtVirtualElement@end" shape=ellipse]
65 [label="16:CtLocalVariableImpl@long end = start + maxWaitMillis" shape=ellipse]
66 [label="17:CtExecutableReferenceImpl@currentTimeMillis()" shape=ellipse]
67 [label="17:CtVirtualElement@currentTimeMillis" shape=ellipse]
68 [label="17:CtTypeAccessImpl@System" shape=ellipse]
69 [label="17:CtInvocationImpl@System.currentTimeMillis()" shape=ellipse]
70 [label="17:CtVariableReadImpl@end" shape=ellipse]
71 [label="17:CtBinaryOperatorImpl@System.currentTimeMillis() < end" shape=ellipse]
72 [label="18:CtExecutableReferenceImpl@eval()" shape=ellipse]
73 [label="18:CtVirtualElement@eval" shape=ellipse]
74 [label="18:CtVariableReadImpl@c" shape=ellipse]
75 [label="18:CtInvocationImpl@c.eval()" shape=ellipse]
76 [label="19:CtReturnImpl@return" shape=ellipse]
77 [label="18:CtBlockImpl@\{
    return;
\}" shape=ellipse]
78 [label="18:CtIfImpl@if (c.eval()) \{
    return;
\}" shape=ellipse]
79 [label="22:CtExecutableReferenceImpl@sleep(long)" shape=ellipse]
80 [label="22:CtVirtualElement@sleep" shape=ellipse]
81 [label="22:CtTypeAccessImpl@Thread" shape=ellipse]
82 [label="22:CtFieldReadImpl@checkEveryMillis" shape=ellipse]
83 [label="22:CtInvocationImpl@Thread.sleep(checkEveryMillis)" shape=ellipse]
84 [label="21:CtBlockImpl@\{
    Thread.sleep(checkEveryMillis);
\}" shape=ellipse]
85 [label="23:CtVirtualElement@e" shape=ellipse]
86 [label="23:CtTypeReferenceImpl@InterruptedException" shape=ellipse]
87 [label="23:CtCatchVariableImpl@InterruptedException e" shape=ellipse]
88 [label="23:CtBlockImpl@\{
\}" shape=ellipse]
89 [label="23:CtCatchImpl@ catch (InterruptedException e) \{
\}" shape=ellipse]
90 [label="21:CtTryImpl@try \{
    Thread.sleep(checkEveryMillis);
\} catch (InterruptedException e) \{
\}" shape=ellipse]
91 [label="17:CtBlockImpl@\{
    if (c.eval()) \{
        return;
    \}
    try \{
        Thread.sleep(checkEveryMillis);
    \} catch (InterruptedException e) \{
    \}
\}" shape=ellipse]
92 [label="17:CtWhileImpl@while (System.currentTimeMillis() < end) \{
    if (c.eval()) \{
        return;
    \}
    try \{
        Thread.sleep(checkEveryMillis);
    \} catch (InterruptedException e) \{
    \}
\} " shape=ellipse]
93 [label="26:CtFieldReadImpl@timeoutProperty" shape=ellipse]
94 [label="26:CtLiteralImpl@null" shape=ellipse]
95 [label="26:CtBinaryOperatorImpl@timeoutProperty != null" shape=ellipse]
96 [label="27:CtExecutableReferenceImpl@setNewProperty(java.lang.String)" shape=ellipse]
97 [label="27:CtVirtualElement@setNewProperty" shape=ellipse]
98 [label="27:CtFieldReadImpl@project" shape=ellipse]
99 [label="27:CtFieldReadImpl@timeoutProperty" shape=ellipse]
100 [label="27:CtLiteralImpl@\"true\"" shape=ellipse]
101 [label="27:CtInvocationImpl@project.setNewProperty(timeoutProperty, \"true\")" shape=ellipse]
102 [label="26:CtBlockImpl@\{
    project.setNewProperty(timeoutProperty, \"true\");
\}" shape=ellipse]
103 [label="26:CtIfImpl@if (timeoutProperty != null) \{
    project.setNewProperty(timeoutProperty, \"true\");
\}" shape=ellipse]
104 [label="12:CtBlockImpl@\{
    maxWaitMillis *= maxWaitMultiplier;
    checkEveryMillis *= checkEveryMultiplier;
    long start = System.currentTimeMillis();
    long end = start + maxWaitMillis;
    while (System.currentTimeMillis() < end) \{
        if (c.eval()) \{
            return;
        \}
        try \{
            Thread.sleep(checkEveryMillis);
        \} catch (InterruptedException e) \{
        \}
    \} 
    if (timeoutProperty != null) \{
        project.setNewProperty(timeoutProperty, \"true\");
    \}
\}" shape=ellipse]
105 [label="30:CtFieldWriteImpl@maxWaitMillis" shape=ellipse]
106 [label="30:CtVariableReadImpl@savedMaxWaitMillis" shape=ellipse]
107 [label="30:CtAssignmentImpl@maxWaitMillis = savedMaxWaitMillis" shape=ellipse]
108 [label="31:CtFieldWriteImpl@checkEveryMillis" shape=ellipse]
109 [label="31:CtVariableReadImpl@savedCheckEveryMillis" shape=ellipse]
110 [label="31:CtAssignmentImpl@checkEveryMillis = savedCheckEveryMillis" shape=ellipse]
111 [label="29:CtBlockImpl@\{
    maxWaitMillis = savedMaxWaitMillis;
    checkEveryMillis = savedCheckEveryMillis;
\}" shape=ellipse]
112 [label="12:CtTryImpl@try \{
    maxWaitMillis *= maxWaitMultiplier;
    checkEveryMillis *= checkEveryMultiplier;
    long start = System.currentTimeMillis();
    long end = start + maxWaitMillis;
    while (System.currentTimeMillis() < end) \{
        if (c.eval()) \{
            return;
        \}
        try \{
            Thread.sleep(checkEveryMillis);
        \} catch (InterruptedException e) \{
        \}
    \} 
    if (timeoutProperty != null) \{
        project.setNewProperty(timeoutProperty, \"true\");
    \}
\} finally \{
    maxWaitMillis = savedMaxWaitMillis;
    checkEveryMillis = savedCheckEveryMillis;
\}" shape=ellipse]
113 [label="2:CtBlockImpl@\{
    if (countConditions() > 1) \{
        throw new BuildException(\"You must not nest more than one \" + \"condition into <waitfor>\");
    \}
    if (countConditions() < 1) \{
        throw new BuildException(\"You must nest a condition into \" + \"<waitfor>\");
    \}
    Condition c = ((Condition) (getConditions().nextElement()));
    long savedMaxWaitMillis = maxWaitMillis;
    long savedCheckEveryMillis = checkEveryMillis;
    try \{
        maxWaitMillis *= maxWaitMultiplier;
        checkEveryMillis *= checkEveryMultiplier;
        long start = System.currentTimeMillis();
        long end = start + maxWaitMillis;
        while (System.currentTimeMillis() < end) \{
            if (c.eval()) \{
                return;
            \}
            try \{
                Thread.sleep(checkEveryMillis);
            \} catch (InterruptedException e) \{
            \}
        \} 
        if (timeoutProperty != null) \{
            project.setNewProperty(timeoutProperty, \"true\");
        \}
    \} finally \{
        maxWaitMillis = savedMaxWaitMillis;
        checkEveryMillis = savedCheckEveryMillis;
    \}
\}" shape=ellipse]
114 [label="2:CtMethodImpl@public void execute() throws BuildException \{
    if (countConditions() > 1) \{
        throw new BuildException(\"You must not nest more than one \" + \"condition into <waitfor>\");
    \}
    if (countConditions() < 1) \{
        throw new BuildException(\"You must nest a condition into \" + \"<waitfor>\");
    \}
    Condition c = ((Condition) (getConditions().nextElement()));
    long savedMaxWaitMillis = maxWaitMillis;
    long savedCheckEveryMillis = checkEveryMillis;
    try \{
        maxWaitMillis *= maxWaitMultiplier;
        checkEveryMillis *= checkEveryMultiplier;
        long start = System.currentTimeMillis();
        long end = start + maxWaitMillis;
        while (System.currentTimeMillis() < end) \{
            if (c.eval()) \{
                return;
            \}
            try \{
                Thread.sleep(checkEveryMillis);
            \} catch (InterruptedException e) \{
            \}
        \} 
        if (timeoutProperty != null) \{
            project.setNewProperty(timeoutProperty, \"true\");
        \}
    \} finally \{
        maxWaitMillis = savedMaxWaitMillis;
        checkEveryMillis = savedCheckEveryMillis;
    \}
\}" shape=ellipse]
115 [label="27:Delete@DELETE" shape=ellipse]
116 [label="27:Insert@INSERT" shape=ellipse]
117 [label="27:CtInvocationImpl@getProject()" shape=ellipse]
5 -> 4 [label="AST"];
5 -> 3 [label="AST"];
7 -> 5 [label="AST"];
7 -> 6 [label="AST"];
7 -> 14 [label="Control Dep"];
7 -> 13 [label="Control Dep"];
7 -> 12 [label="Control Dep"];
7 -> 11 [label="Control Dep"];
7 -> 9 [label="Control Dep"];
7 -> 10 [label="Control Dep"];
11 -> 9 [label="AST"];
11 -> 10 [label="AST"];
12 -> 11 [label="AST"];
13 -> 12 [label="AST"];
14 -> 13 [label="AST"];
15 -> 7 [label="AST"];
15 -> 14 [label="AST"];
18 -> 17 [label="AST"];
18 -> 16 [label="AST"];
20 -> 18 [label="AST"];
20 -> 19 [label="AST"];
20 -> 27 [label="Control Dep"];
20 -> 26 [label="Control Dep"];
20 -> 25 [label="Control Dep"];
20 -> 24 [label="Control Dep"];
20 -> 22 [label="Control Dep"];
20 -> 23 [label="Control Dep"];
24 -> 22 [label="AST"];
24 -> 23 [label="AST"];
25 -> 24 [label="AST"];
26 -> 25 [label="AST"];
27 -> 26 [label="AST"];
28 -> 20 [label="AST"];
28 -> 27 [label="AST"];
34 -> 33 [label="AST"];
34 -> 32 [label="AST"];
35 -> 31 [label="AST"];
35 -> 36 [label="AST"];
35 -> 34 [label="AST"];
35 -> 30 [label="AST"];
37 -> 74 [label="Define-Use"];
38 -> 37 [label="AST"];
38 -> 29 [label="AST"];
38 -> 35 [label="AST"];
40 -> 41 [label="Data Dep"];
41 -> 106 [label="Define-Use"];
42 -> 41 [label="AST"];
42 -> 39 [label="AST"];
42 -> 40 [label="AST"];
44 -> 45 [label="Data Dep"];
45 -> 109 [label="Define-Use"];
46 -> 45 [label="AST"];
46 -> 43 [label="AST"];
46 -> 44 [label="AST"];
47 -> 62 [label="Define-Use"];
48 -> 47 [label="Data Dep"];
49 -> 47 [label="AST"];
49 -> 48 [label="AST"];
50 -> 82 [label="Define-Use"];
51 -> 50 [label="Data Dep"];
52 -> 50 [label="AST"];
52 -> 51 [label="AST"];
57 -> 55 [label="AST"];
57 -> 56 [label="AST"];
57 -> 54 [label="AST"];
58 -> 61 [label="Define-Use"];
59 -> 58 [label="AST"];
59 -> 53 [label="AST"];
59 -> 57 [label="AST"];
61 -> 64 [label="Data Dep"];
62 -> 64 [label="Data Dep"];
63 -> 61 [label="AST"];
63 -> 62 [label="AST"];
64 -> 70 [label="Define-Use"];
65 -> 64 [label="AST"];
65 -> 60 [label="AST"];
65 -> 63 [label="AST"];
69 -> 67 [label="AST"];
69 -> 68 [label="AST"];
69 -> 66 [label="AST"];
71 -> 69 [label="AST"];
71 -> 70 [label="AST"];
71 -> 91 [label="Control Dep"];
71 -> 78 [label="Control Dep"];
71 -> 75 [label="Control Dep"];
71 -> 72 [label="Control Dep"];
71 -> 74 [label="Control Dep"];
71 -> 90 [label="Control Dep"];
71 -> 84 [label="Control Dep"];
71 -> 83 [label="Control Dep"];
71 -> 79 [label="Control Dep"];
71 -> 81 [label="Control Dep"];
71 -> 82 [label="Control Dep"];
71 -> 89 [label="Control Dep"];
71 -> 87 [label="Control Dep"];
75 -> 73 [label="AST"];
75 -> 74 [label="AST"];
75 -> 72 [label="AST"];
75 -> 77 [label="Control Dep"];
75 -> 76 [label="Control Dep"];
77 -> 76 [label="AST"];
78 -> 75 [label="AST"];
78 -> 77 [label="AST"];
83 -> 80 [label="AST"];
83 -> 81 [label="AST"];
83 -> 79 [label="AST"];
83 -> 82 [label="AST"];
84 -> 83 [label="AST"];
87 -> 85 [label="AST"];
87 -> 86 [label="AST"];
87 -> 88 [label="Control Dep"];
89 -> 87 [label="AST"];
89 -> 88 [label="AST"];
90 -> 84 [label="AST"];
90 -> 89 [label="AST"];
91 -> 78 [label="AST"];
91 -> 90 [label="AST"];
92 -> 71 [label="AST"];
92 -> 91 [label="AST"];
95 -> 93 [label="AST"];
95 -> 94 [label="AST"];
95 -> 102 [label="Control Dep"];
95 -> 101 [label="Control Dep"];
95 -> 96 [label="Control Dep"];
95 -> 98 [label="Control Dep"];
95 -> 99 [label="Control Dep"];
95 -> 100 [label="Control Dep"];
98 -> 115 [label="Action"];
101 -> 97 [label="AST"];
101 -> 98 [label="AST"];
101 -> 96 [label="AST"];
101 -> 99 [label="AST"];
101 -> 100 [label="AST"];
101 -> 116 [label="Action"];
102 -> 101 [label="AST"];
103 -> 95 [label="AST"];
103 -> 102 [label="AST"];
104 -> 49 [label="AST"];
104 -> 52 [label="AST"];
104 -> 59 [label="AST"];
104 -> 65 [label="AST"];
104 -> 92 [label="AST"];
104 -> 103 [label="AST"];
106 -> 105 [label="Data Dep"];
107 -> 105 [label="AST"];
107 -> 106 [label="AST"];
109 -> 108 [label="Data Dep"];
110 -> 108 [label="AST"];
110 -> 109 [label="AST"];
111 -> 107 [label="AST"];
111 -> 110 [label="AST"];
112 -> 104 [label="AST"];
112 -> 111 [label="AST"];
113 -> 15 [label="AST"];
113 -> 28 [label="AST"];
113 -> 38 [label="AST"];
113 -> 42 [label="AST"];
113 -> 46 [label="AST"];
113 -> 112 [label="AST"];
114 -> 1 [label="AST"];
114 -> 0 [label="AST"];
114 -> 2 [label="AST"];
114 -> 113 [label="AST"];
116 -> 117 [label="Action"];
}