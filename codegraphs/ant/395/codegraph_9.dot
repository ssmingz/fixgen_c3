digraph "execute#?" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@execute" shape=ellipse]
2 [label="2:CtTypeReferenceImpl@BuildException" shape=ellipse]
3 [label="3:CtFieldReadImpl@srcDir" shape=ellipse]
4 [label="3:CtLiteralImpl@null" shape=ellipse]
5 [label="3:CtBinaryOperatorImpl@srcDir == null" shape=ellipse]
6 [label="4:CtFieldWriteImpl@srcDir" shape=ellipse]
7 [label="4:CtExecutableReferenceImpl@resolveFile(java.lang.String)" shape=ellipse]
8 [label="4:CtVirtualElement@resolveFile" shape=ellipse]
9 [label="4:CtFieldReadImpl@project" shape=ellipse]
10 [label="4:CtLiteralImpl@\".\"" shape=ellipse]
11 [label="4:CtInvocationImpl@project.resolveFile(\".\")" shape=ellipse]
12 [label="4:CtAssignmentImpl@srcDir = project.resolveFile(\".\")" shape=ellipse]
13 [label="3:CtBlockImpl@\{
    srcDir = project.resolveFile(\".\");
\}" shape=ellipse]
14 [label="3:CtIfImpl@if (srcDir == null) \{
    srcDir = project.resolveFile(\".\");
\}" shape=ellipse]
15 [label="6:CtTypeReferenceImpl@DirectoryScanner" shape=ellipse]
16 [label="6:CtExecutableReferenceImpl@getDirectoryScanner()" shape=ellipse]
17 [label="6:CtVirtualElement@getDirectoryScanner" shape=ellipse]
18 [label="6:CtSuperAccessImpl@super" shape=ellipse]
19 [label="6:CtFieldReadImpl@srcDir" shape=ellipse]
20 [label="6:CtInvocationImpl@super.getDirectoryScanner(srcDir)" shape=ellipse]
21 [label="6:CtVirtualElement@scanner" shape=ellipse]
22 [label="6:CtLocalVariableImpl@DirectoryScanner scanner = super.getDirectoryScanner(srcDir)" shape=ellipse]
23 [label="7:CtVirtualElement@String[]" shape=ellipse]
24 [label="7:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
25 [label="7:CtExecutableReferenceImpl@getIncludedFiles()" shape=ellipse]
26 [label="7:CtVirtualElement@getIncludedFiles" shape=ellipse]
27 [label="7:CtVariableReadImpl@scanner" shape=ellipse]
28 [label="7:CtInvocationImpl@scanner.getIncludedFiles()" shape=ellipse]
29 [label="7:CtVirtualElement@dependencies" shape=ellipse]
30 [label="7:CtLocalVariableImpl@String[] dependencies = scanner.getIncludedFiles()" shape=ellipse]
31 [label="8:CtExecutableReferenceImpl@log(java.lang.String)" shape=ellipse]
32 [label="8:CtVirtualElement@log" shape=ellipse]
33 [label="8:CtLiteralImpl@\"assembling \"" shape=ellipse]
34 [label="8:CtVariableReadImpl@dependencies" shape=ellipse]
35 [label="8:CtLocalVariableReferenceImpl@dependencies" shape=ellipse]
36 [label="8:CtFieldReadImpl@dependencies.length" shape=ellipse]
37 [label="8:CtBinaryOperatorImpl@(\"assembling \" + dependencies.length)" shape=ellipse]
38 [label="8:CtLiteralImpl@\" file\"" shape=ellipse]
39 [label="8:CtBinaryOperatorImpl@((\"assembling \" + dependencies.length) + \" file\")" shape=ellipse]
40 [label="8:CtVariableReadImpl@dependencies" shape=ellipse]
41 [label="8:CtLocalVariableReferenceImpl@dependencies" shape=ellipse]
42 [label="8:CtFieldReadImpl@dependencies.length" shape=ellipse]
43 [label="8:CtLiteralImpl@1" shape=ellipse]
44 [label="8:CtBinaryOperatorImpl@dependencies.length == 1" shape=ellipse]
45 [label="8:CtLiteralImpl@\"\"" shape=ellipse]
46 [label="8:CtLiteralImpl@\"s\"" shape=ellipse]
47 [label="8:CtConditionalImpl@(dependencies.length == 1 ? \"\" : \"s\")" shape=ellipse]
48 [label="8:CtBinaryOperatorImpl@((\"assembling \" + dependencies.length) + \" file\") + (dependencies.length == 1 ? \"\" : \"s\")" shape=ellipse]
49 [label="8:CtInvocationImpl@log(((\"assembling \" + dependencies.length) + \" file\") + (dependencies.length == 1 ? \"\" : \"s\"))" shape=ellipse]
50 [label="9:CtTypeReferenceImpl@String" shape=ellipse]
51 [label="9:CtExecutableReferenceImpl@toString()" shape=ellipse]
52 [label="9:CtVirtualElement@toString" shape=ellipse]
53 [label="9:CtExecutableReferenceImpl@getBasedir()" shape=ellipse]
54 [label="9:CtVirtualElement@getBasedir" shape=ellipse]
55 [label="9:CtVariableReadImpl@scanner" shape=ellipse]
56 [label="9:CtInvocationImpl@scanner.getBasedir()" shape=ellipse]
57 [label="9:CtInvocationImpl@scanner.getBasedir().toString()" shape=ellipse]
58 [label="9:CtVirtualElement@baseDir" shape=ellipse]
59 [label="9:CtLocalVariableImpl@String baseDir = scanner.getBasedir().toString()" shape=ellipse]
60 [label="10:CtTypeReferenceImpl@int" shape=ellipse]
61 [label="10:CtLiteralImpl@0" shape=ellipse]
62 [label="10:CtVirtualElement@i" shape=ellipse]
63 [label="10:CtLocalVariableImpl@int i = 0" shape=ellipse]
64 [label="10:CtVariableReadImpl@i" shape=ellipse]
65 [label="10:CtVariableReadImpl@dependencies" shape=ellipse]
66 [label="10:CtLocalVariableReferenceImpl@dependencies" shape=ellipse]
67 [label="10:CtFieldReadImpl@dependencies.length" shape=ellipse]
68 [label="10:CtBinaryOperatorImpl@i < dependencies.length" shape=ellipse]
69 [label="10:CtVariableWriteImpl@i" shape=ellipse]
70 [label="10:CtUnaryOperatorImpl@i++" shape=ellipse]
71 [label="11:CtTypeReferenceImpl@String" shape=ellipse]
72 [label="11:CtVariableReadImpl@dependencies" shape=ellipse]
73 [label="11:CtVariableReadImpl@i" shape=ellipse]
74 [label="11:CtArrayReadImpl@dependencies[i]" shape=ellipse]
75 [label="11:CtVirtualElement@targetFile" shape=ellipse]
76 [label="11:CtLocalVariableImpl@String targetFile = dependencies[i]" shape=ellipse]
77 [label="12:CtVariableWriteImpl@targetFile" shape=ellipse]
78 [label="12:CtVariableReadImpl@baseDir" shape=ellipse]
79 [label="12:CtFieldReadImpl@File.separator" shape=ellipse]
80 [label="12:CtBinaryOperatorImpl@(baseDir + File.separator)" shape=ellipse]
81 [label="12:CtVariableReadImpl@targetFile" shape=ellipse]
82 [label="12:CtBinaryOperatorImpl@(baseDir + File.separator) + targetFile" shape=ellipse]
83 [label="12:CtAssignmentImpl@targetFile = (baseDir + File.separator) + targetFile" shape=ellipse]
84 [label="13:CtExecutableReferenceImpl@executeOneFile(java.lang.String)" shape=ellipse]
85 [label="13:CtVirtualElement@executeOneFile" shape=ellipse]
86 [label="13:CtVariableReadImpl@targetFile" shape=ellipse]
87 [label="13:CtInvocationImpl@executeOneFile(targetFile)" shape=ellipse]
88 [label="10:CtBlockImpl@\{
    String targetFile = dependencies[i];
    targetFile = (baseDir + File.separator) + targetFile;
    executeOneFile(targetFile);
\}" shape=ellipse]
89 [label="10:CtForImpl@for (int i = 0; i < dependencies.length; i++) \{
    String targetFile = dependencies[i];
    targetFile = (baseDir + File.separator) + targetFile;
    executeOneFile(targetFile);
\}" shape=ellipse]
90 [label="2:CtBlockImpl@\{
    if (srcDir == null) \{
        srcDir = project.resolveFile(\".\");
    \}
    DirectoryScanner scanner = super.getDirectoryScanner(srcDir);
    String[] dependencies = scanner.getIncludedFiles();
    log(((\"assembling \" + dependencies.length) + \" file\") + (dependencies.length == 1 ? \"\" : \"s\"));
    String baseDir = scanner.getBasedir().toString();
    for (int i = 0; i < dependencies.length; i++) \{
        String targetFile = dependencies[i];
        targetFile = (baseDir + File.separator) + targetFile;
        executeOneFile(targetFile);
    \}
\}" shape=ellipse]
91 [label="2:CtMethodImpl@public void execute() throws BuildException \{
    if (srcDir == null) \{
        srcDir = project.resolveFile(\".\");
    \}
    DirectoryScanner scanner = super.getDirectoryScanner(srcDir);
    String[] dependencies = scanner.getIncludedFiles();
    log(((\"assembling \" + dependencies.length) + \" file\") + (dependencies.length == 1 ? \"\" : \"s\"));
    String baseDir = scanner.getBasedir().toString();
    for (int i = 0; i < dependencies.length; i++) \{
        String targetFile = dependencies[i];
        targetFile = (baseDir + File.separator) + targetFile;
        executeOneFile(targetFile);
    \}
\}" shape=ellipse]
92 [label="4:Delete@DELETE" shape=ellipse]
93 [label="4:Insert@INSERT" shape=ellipse]
94 [label="4:CtInvocationImpl@getProject()" shape=ellipse]
5 -> 3 [label="AST"];
5 -> 4 [label="AST"];
5 -> 13 [label="Control Dep"];
5 -> 12 [label="Control Dep"];
5 -> 6 [label="Control Dep"];
5 -> 11 [label="Control Dep"];
5 -> 7 [label="Control Dep"];
5 -> 9 [label="Control Dep"];
5 -> 10 [label="Control Dep"];
6 -> 19 [label="Define-Use"];
9 -> 6 [label="Data Dep"];
9 -> 92 [label="Action"];
11 -> 8 [label="AST"];
11 -> 9 [label="AST"];
11 -> 7 [label="AST"];
11 -> 10 [label="AST"];
11 -> 93 [label="Action"];
12 -> 6 [label="AST"];
12 -> 11 [label="AST"];
13 -> 12 [label="AST"];
14 -> 5 [label="AST"];
14 -> 13 [label="AST"];
18 -> 21 [label="Data Dep"];
19 -> 21 [label="Data Dep"];
20 -> 17 [label="AST"];
20 -> 18 [label="AST"];
20 -> 16 [label="AST"];
20 -> 19 [label="AST"];
21 -> 27 [label="Define-Use"];
21 -> 55 [label="Define-Use"];
22 -> 21 [label="AST"];
22 -> 15 [label="AST"];
22 -> 20 [label="AST"];
24 -> 23 [label="AST"];
27 -> 29 [label="Data Dep"];
28 -> 26 [label="AST"];
28 -> 27 [label="AST"];
28 -> 25 [label="AST"];
29 -> 34 [label="Define-Use"];
29 -> 40 [label="Define-Use"];
29 -> 65 [label="Define-Use"];
29 -> 72 [label="Define-Use"];
29 -> 74 [label="Define-Use"];
30 -> 29 [label="AST"];
30 -> 24 [label="AST"];
30 -> 28 [label="AST"];
34 -> 35 [label="AST"];
36 -> 34 [label="AST"];
37 -> 33 [label="AST"];
37 -> 36 [label="AST"];
39 -> 37 [label="AST"];
39 -> 38 [label="AST"];
40 -> 41 [label="AST"];
42 -> 40 [label="AST"];
44 -> 42 [label="AST"];
44 -> 43 [label="AST"];
44 -> 45 [label="Control Dep"];
44 -> 46 [label="Control Dep"];
47 -> 44 [label="AST"];
47 -> 45 [label="AST"];
47 -> 46 [label="AST"];
48 -> 39 [label="AST"];
48 -> 47 [label="AST"];
49 -> 32 [label="AST"];
49 -> 31 [label="AST"];
49 -> 48 [label="AST"];
55 -> 58 [label="Data Dep"];
56 -> 54 [label="AST"];
56 -> 55 [label="AST"];
56 -> 53 [label="AST"];
57 -> 52 [label="AST"];
57 -> 56 [label="AST"];
57 -> 51 [label="AST"];
58 -> 78 [label="Define-Use"];
59 -> 58 [label="AST"];
59 -> 50 [label="AST"];
59 -> 57 [label="AST"];
62 -> 64 [label="Define-Use"];
63 -> 62 [label="AST"];
63 -> 60 [label="AST"];
63 -> 61 [label="AST"];
65 -> 66 [label="AST"];
67 -> 65 [label="AST"];
68 -> 64 [label="AST"];
68 -> 67 [label="AST"];
68 -> 88 [label="Control Dep"];
68 -> 76 [label="Control Dep"];
68 -> 74 [label="Control Dep"];
68 -> 72 [label="Control Dep"];
68 -> 73 [label="Control Dep"];
68 -> 83 [label="Control Dep"];
68 -> 77 [label="Control Dep"];
68 -> 82 [label="Control Dep"];
68 -> 80 [label="Control Dep"];
68 -> 78 [label="Control Dep"];
68 -> 79 [label="Control Dep"];
68 -> 81 [label="Control Dep"];
68 -> 87 [label="Control Dep"];
68 -> 84 [label="Control Dep"];
68 -> 86 [label="Control Dep"];
69 -> 73 [label="Define-Use"];
70 -> 69 [label="AST"];
74 -> 72 [label="AST"];
74 -> 73 [label="AST"];
74 -> 75 [label="Data Dep"];
76 -> 75 [label="AST"];
76 -> 71 [label="AST"];
76 -> 74 [label="AST"];
77 -> 86 [label="Define-Use"];
78 -> 77 [label="Data Dep"];
79 -> 77 [label="Data Dep"];
80 -> 78 [label="AST"];
80 -> 79 [label="AST"];
81 -> 77 [label="Data Dep"];
82 -> 80 [label="AST"];
82 -> 81 [label="AST"];
83 -> 77 [label="AST"];
83 -> 82 [label="AST"];
87 -> 85 [label="AST"];
87 -> 84 [label="AST"];
87 -> 86 [label="AST"];
88 -> 76 [label="AST"];
88 -> 83 [label="AST"];
88 -> 87 [label="AST"];
89 -> 63 [label="AST"];
89 -> 68 [label="AST"];
89 -> 70 [label="AST"];
89 -> 88 [label="AST"];
90 -> 14 [label="AST"];
90 -> 22 [label="AST"];
90 -> 30 [label="AST"];
90 -> 49 [label="AST"];
90 -> 59 [label="AST"];
90 -> 89 [label="AST"];
91 -> 1 [label="AST"];
91 -> 0 [label="AST"];
91 -> 2 [label="AST"];
91 -> 90 [label="AST"];
93 -> 94 [label="Action"];
}