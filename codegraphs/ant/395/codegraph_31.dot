digraph "copyReference#?,String,String" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@copyReference" shape=ellipse]
2 [label="2:CtParameterImpl@String oldKey" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
4 [label="2:CtParameterImpl@String newKey" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
6 [label="3:CtTypeReferenceImpl@Object" shape=ellipse]
7 [label="3:CtExecutableReferenceImpl@getReference(java.lang.String)" shape=ellipse]
8 [label="3:CtVirtualElement@getReference" shape=ellipse]
9 [label="3:CtFieldReadImpl@project" shape=ellipse]
10 [label="3:CtVariableReadImpl@oldKey" shape=ellipse]
11 [label="3:CtInvocationImpl@project.getReference(oldKey)" shape=ellipse]
12 [label="3:CtVirtualElement@orig" shape=ellipse]
13 [label="3:CtLocalVariableImpl@Object orig = project.getReference(oldKey)" shape=ellipse]
14 [label="4:CtTypeReferenceImpl@Class" shape=ellipse]
15 [label="4:CtExecutableReferenceImpl@getClass()" shape=ellipse]
16 [label="4:CtVirtualElement@getClass" shape=ellipse]
17 [label="4:CtVariableReadImpl@orig" shape=ellipse]
18 [label="4:CtInvocationImpl@orig.getClass()" shape=ellipse]
19 [label="4:CtVirtualElement@c" shape=ellipse]
20 [label="4:CtLocalVariableImpl@Class c = orig.getClass()" shape=ellipse]
21 [label="5:CtTypeReferenceImpl@Object" shape=ellipse]
22 [label="5:CtVariableReadImpl@orig" shape=ellipse]
23 [label="5:CtVirtualElement@copy" shape=ellipse]
24 [label="5:CtLocalVariableImpl@Object copy = orig" shape=ellipse]
25 [label="7:CtTypeReferenceImpl@Method" shape=ellipse]
26 [label="7:CtExecutableReferenceImpl@getMethod(java.lang.String,java.lang.Class[])" shape=ellipse]
27 [label="7:CtVirtualElement@getMethod" shape=ellipse]
28 [label="7:CtVariableReadImpl@c" shape=ellipse]
29 [label="7:CtLiteralImpl@\"clone\"" shape=ellipse]
30 [label="7:CtNewArrayImpl@new Class[0]" shape=ellipse]
31 [label="7:CtLiteralImpl@0" shape=ellipse]
32 [label="7:CtInvocationImpl@c.getMethod(\"clone\", new Class[0])" shape=ellipse]
33 [label="7:CtVirtualElement@cloneM" shape=ellipse]
34 [label="7:CtLocalVariableImpl@Method cloneM = c.getMethod(\"clone\", new Class[0])" shape=ellipse]
35 [label="8:CtVariableReadImpl@cloneM" shape=ellipse]
36 [label="8:CtLiteralImpl@null" shape=ellipse]
37 [label="8:CtBinaryOperatorImpl@cloneM != null" shape=ellipse]
38 [label="9:CtVariableWriteImpl@copy" shape=ellipse]
39 [label="9:CtExecutableReferenceImpl@invoke(java.lang.Object,java.lang.Object[])" shape=ellipse]
40 [label="9:CtVirtualElement@invoke" shape=ellipse]
41 [label="9:CtVariableReadImpl@cloneM" shape=ellipse]
42 [label="9:CtVariableReadImpl@orig" shape=ellipse]
43 [label="9:CtNewArrayImpl@new Object[0]" shape=ellipse]
44 [label="9:CtLiteralImpl@0" shape=ellipse]
45 [label="9:CtInvocationImpl@cloneM.invoke(orig, new Object[0])" shape=ellipse]
46 [label="9:CtAssignmentImpl@copy = cloneM.invoke(orig, new Object[0])" shape=ellipse]
47 [label="8:CtBlockImpl@\{
    copy = cloneM.invoke(orig, new Object[0]);
\}" shape=ellipse]
48 [label="8:CtIfImpl@if (cloneM != null) \{
    copy = cloneM.invoke(orig, new Object[0]);
\}" shape=ellipse]
49 [label="6:CtBlockImpl@\{
    Method cloneM = c.getMethod(\"clone\", new Class[0]);
    if (cloneM != null) \{
        copy = cloneM.invoke(orig, new Object[0]);
    \}
\}" shape=ellipse]
50 [label="11:CtVirtualElement@e" shape=ellipse]
51 [label="11:CtTypeReferenceImpl@Exception" shape=ellipse]
52 [label="11:CtCatchVariableImpl@Exception e" shape=ellipse]
53 [label="11:CtBlockImpl@\{
\}" shape=ellipse]
54 [label="11:CtCatchImpl@ catch (Exception e) \{
\}" shape=ellipse]
55 [label="6:CtTryImpl@try \{
    Method cloneM = c.getMethod(\"clone\", new Class[0]);
    if (cloneM != null) \{
        copy = cloneM.invoke(orig, new Object[0]);
    \}
\} catch (Exception e) \{
\}" shape=ellipse]
56 [label="13:CtVariableReadImpl@copy" shape=ellipse]
57 [label="13:CtTypeAccessImpl@ProjectComponent" shape=ellipse]
58 [label="13:CtTypeReferenceImpl@ProjectComponent" shape=ellipse]
59 [label="13:CtBinaryOperatorImpl@copy instanceof ProjectComponent" shape=ellipse]
60 [label="14:CtExecutableReferenceImpl@setProject()" shape=ellipse]
61 [label="14:CtVirtualElement@setProject" shape=ellipse]
62 [label="14:CtVariableReadImpl@((ProjectComponent) (copy))" shape=ellipse]
63 [label="14:CtTypeReferenceImpl@ProjectComponent" shape=ellipse]
64 [label="14:CtFieldReadImpl@newProject" shape=ellipse]
65 [label="14:CtInvocationImpl@((ProjectComponent) (copy)).setProject(newProject)" shape=ellipse]
66 [label="13:CtBlockImpl@\{
    ((ProjectComponent) (copy)).setProject(newProject);
\}" shape=ellipse]
67 [label="17:CtTypeReferenceImpl@Method" shape=ellipse]
68 [label="17:CtExecutableReferenceImpl@getMethod(java.lang.String,java.lang.Class[])" shape=ellipse]
69 [label="17:CtVirtualElement@getMethod" shape=ellipse]
70 [label="17:CtVariableReadImpl@c" shape=ellipse]
71 [label="17:CtLiteralImpl@\"setProject\"" shape=ellipse]
72 [label="17:CtNewArrayImpl@new Class[]\{ Project.class \}" shape=ellipse]
73 [label="17:CtFieldReadImpl@Project.class" shape=ellipse]
74 [label="17:CtInvocationImpl@c.getMethod(\"setProject\", new Class[]\{ Project.class \})" shape=ellipse]
75 [label="17:CtVirtualElement@setProjectM" shape=ellipse]
76 [label="17:CtLocalVariableImpl@Method setProjectM = c.getMethod(\"setProject\", new Class[]\{ Project.class \})" shape=ellipse]
77 [label="18:CtVariableReadImpl@setProjectM" shape=ellipse]
78 [label="18:CtLiteralImpl@null" shape=ellipse]
79 [label="18:CtBinaryOperatorImpl@setProjectM != null" shape=ellipse]
80 [label="19:CtExecutableReferenceImpl@invoke(java.lang.Object,java.lang.Object[])" shape=ellipse]
81 [label="19:CtVirtualElement@invoke" shape=ellipse]
82 [label="19:CtVariableReadImpl@setProjectM" shape=ellipse]
83 [label="19:CtVariableReadImpl@copy" shape=ellipse]
84 [label="19:CtNewArrayImpl@new Object[]\{ newProject \}" shape=ellipse]
85 [label="19:CtFieldReadImpl@newProject" shape=ellipse]
86 [label="19:CtInvocationImpl@setProjectM.invoke(copy, new Object[]\{ newProject \})" shape=ellipse]
87 [label="18:CtBlockImpl@\{
    setProjectM.invoke(copy, new Object[]\{ newProject \});
\}" shape=ellipse]
88 [label="18:CtIfImpl@if (setProjectM != null) \{
    setProjectM.invoke(copy, new Object[]\{ newProject \});
\}" shape=ellipse]
89 [label="16:CtBlockImpl@\{
    Method setProjectM = c.getMethod(\"setProject\", new Class[]\{ Project.class \});
    if (setProjectM != null) \{
        setProjectM.invoke(copy, new Object[]\{ newProject \});
    \}
\}" shape=ellipse]
90 [label="21:CtVirtualElement@e" shape=ellipse]
91 [label="21:CtTypeReferenceImpl@NoSuchMethodException" shape=ellipse]
92 [label="21:CtCatchVariableImpl@NoSuchMethodException e" shape=ellipse]
93 [label="21:CtBlockImpl@\{
\}" shape=ellipse]
94 [label="21:CtCatchImpl@ catch (NoSuchMethodException e) \{
\}" shape=ellipse]
95 [label="22:CtVirtualElement@e2" shape=ellipse]
96 [label="22:CtTypeReferenceImpl@Exception" shape=ellipse]
97 [label="22:CtCatchVariableImpl@Exception e2" shape=ellipse]
98 [label="23:CtTypeReferenceImpl@String" shape=ellipse]
99 [label="23:CtLiteralImpl@\"Error setting new project instance for \"" shape=ellipse]
100 [label="23:CtLiteralImpl@\"reference with id \"" shape=ellipse]
101 [label="23:CtBinaryOperatorImpl@(\"Error setting new project instance for \" + \"reference with id \")" shape=ellipse]
102 [label="23:CtVariableReadImpl@oldKey" shape=ellipse]
103 [label="23:CtBinaryOperatorImpl@(\"Error setting new project instance for \" + \"reference with id \") + oldKey" shape=ellipse]
104 [label="23:CtVirtualElement@msg" shape=ellipse]
105 [label="23:CtLocalVariableImpl@String msg = (\"Error setting new project instance for \" + \"reference with id \") + oldKey" shape=ellipse]
106 [label="24:CtTypeReferenceImpl@BuildException" shape=ellipse]
107 [label="24:CtVariableReadImpl@msg" shape=ellipse]
108 [label="24:CtVariableReadImpl@e2" shape=ellipse]
109 [label="24:CtFieldReadImpl@location" shape=ellipse]
110 [label="24:CtConstructorCallImpl@new BuildException(msg, e2, location)" shape=ellipse]
111 [label="24:CtThrowImpl@throw new BuildException(msg, e2, location)" shape=ellipse]
112 [label="22:CtBlockImpl@\{
    String msg = (\"Error setting new project instance for \" + \"reference with id \") + oldKey;
    throw new BuildException(msg, e2, location);
\}" shape=ellipse]
113 [label="22:CtCatchImpl@ catch (Exception e2) \{
    String msg = (\"Error setting new project instance for \" + \"reference with id \") + oldKey;
    throw new BuildException(msg, e2, location);
\}" shape=ellipse]
114 [label="16:CtTryImpl@try \{
    Method setProjectM = c.getMethod(\"setProject\", new Class[]\{ Project.class \});
    if (setProjectM != null) \{
        setProjectM.invoke(copy, new Object[]\{ newProject \});
    \}
\} catch (NoSuchMethodException e) \{
\} catch (Exception e2) \{
    String msg = (\"Error setting new project instance for \" + \"reference with id \") + oldKey;
    throw new BuildException(msg, e2, location);
\}" shape=ellipse]
115 [label="15:CtBlockImpl@\{
    try \{
        Method setProjectM = c.getMethod(\"setProject\", new Class[]\{ Project.class \});
        if (setProjectM != null) \{
            setProjectM.invoke(copy, new Object[]\{ newProject \});
        \}
    \} catch (NoSuchMethodException e) \{
    \} catch (Exception e2) \{
        String msg = (\"Error setting new project instance for \" + \"reference with id \") + oldKey;
        throw new BuildException(msg, e2, location);
    \}
\}" shape=ellipse]
116 [label="13:CtIfImpl@if (copy instanceof ProjectComponent) \{
    ((ProjectComponent) (copy)).setProject(newProject);
\} else \{
    try \{
        Method setProjectM = c.getMethod(\"setProject\", new Class[]\{ Project.class \});
        if (setProjectM != null) \{
            setProjectM.invoke(copy, new Object[]\{ newProject \});
        \}
    \} catch (NoSuchMethodException e) \{
    \} catch (Exception e2) \{
        String msg = (\"Error setting new project instance for \" + \"reference with id \") + oldKey;
        throw new BuildException(msg, e2, location);
    \}
\}" shape=ellipse]
117 [label="27:CtExecutableReferenceImpl@addReference(java.lang.String,java.lang.Object)" shape=ellipse]
118 [label="27:CtVirtualElement@addReference" shape=ellipse]
119 [label="27:CtFieldReadImpl@newProject" shape=ellipse]
120 [label="27:CtVariableReadImpl@newKey" shape=ellipse]
121 [label="27:CtVariableReadImpl@copy" shape=ellipse]
122 [label="27:CtInvocationImpl@newProject.addReference(newKey, copy)" shape=ellipse]
123 [label="2:CtBlockImpl@\{
    Object orig = project.getReference(oldKey);
    Class c = orig.getClass();
    Object copy = orig;
    try \{
        Method cloneM = c.getMethod(\"clone\", new Class[0]);
        if (cloneM != null) \{
            copy = cloneM.invoke(orig, new Object[0]);
        \}
    \} catch (Exception e) \{
    \}
    if (copy instanceof ProjectComponent) \{
        ((ProjectComponent) (copy)).setProject(newProject);
    \} else \{
        try \{
            Method setProjectM = c.getMethod(\"setProject\", new Class[]\{ Project.class \});
            if (setProjectM != null) \{
                setProjectM.invoke(copy, new Object[]\{ newProject \});
            \}
        \} catch (NoSuchMethodException e) \{
        \} catch (Exception e2) \{
            String msg = (\"Error setting new project instance for \" + \"reference with id \") + oldKey;
            throw new BuildException(msg, e2, location);
        \}
    \}
    newProject.addReference(newKey, copy);
\}" shape=ellipse]
124 [label="2:CtMethodImpl@private void copyReference(String oldKey, String newKey) \{
    Object orig = project.getReference(oldKey);
    Class c = orig.getClass();
    Object copy = orig;
    try \{
        Method cloneM = c.getMethod(\"clone\", new Class[0]);
        if (cloneM != null) \{
            copy = cloneM.invoke(orig, new Object[0]);
        \}
    \} catch (Exception e) \{
    \}
    if (copy instanceof ProjectComponent) \{
        ((ProjectComponent) (copy)).setProject(newProject);
    \} else \{
        try \{
            Method setProjectM = c.getMethod(\"setProject\", new Class[]\{ Project.class \});
            if (setProjectM != null) \{
                setProjectM.invoke(copy, new Object[]\{ newProject \});
            \}
        \} catch (NoSuchMethodException e) \{
        \} catch (Exception e2) \{
            String msg = (\"Error setting new project instance for \" + \"reference with id \") + oldKey;
            throw new BuildException(msg, e2, location);
        \}
    \}
    newProject.addReference(newKey, copy);
\}" shape=ellipse]
125 [label="3:Delete@DELETE" shape=ellipse]
126 [label="3:Insert@INSERT" shape=ellipse]
127 [label="3:CtInvocationImpl@getProject()" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
9 -> 12 [label="Data Dep"];
9 -> 125 [label="Action"];
10 -> 12 [label="Data Dep"];
11 -> 8 [label="AST"];
11 -> 9 [label="AST"];
11 -> 7 [label="AST"];
11 -> 10 [label="AST"];
11 -> 126 [label="Action"];
12 -> 17 [label="Define-Use"];
12 -> 22 [label="Define-Use"];
12 -> 42 [label="Define-Use"];
13 -> 12 [label="AST"];
13 -> 6 [label="AST"];
13 -> 11 [label="AST"];
17 -> 19 [label="Data Dep"];
18 -> 16 [label="AST"];
18 -> 17 [label="AST"];
18 -> 15 [label="AST"];
19 -> 28 [label="Define-Use"];
19 -> 70 [label="Define-Use"];
20 -> 19 [label="AST"];
20 -> 14 [label="AST"];
20 -> 18 [label="AST"];
22 -> 23 [label="Data Dep"];
23 -> 56 [label="Define-Use"];
23 -> 62 [label="Define-Use"];
23 -> 83 [label="Define-Use"];
23 -> 121 [label="Define-Use"];
24 -> 23 [label="AST"];
24 -> 21 [label="AST"];
24 -> 22 [label="AST"];
28 -> 33 [label="Data Dep"];
30 -> 31 [label="AST"];
32 -> 27 [label="AST"];
32 -> 28 [label="AST"];
32 -> 26 [label="AST"];
32 -> 29 [label="AST"];
32 -> 30 [label="AST"];
33 -> 35 [label="Define-Use"];
33 -> 41 [label="Define-Use"];
34 -> 33 [label="AST"];
34 -> 25 [label="AST"];
34 -> 32 [label="AST"];
37 -> 35 [label="AST"];
37 -> 36 [label="AST"];
37 -> 47 [label="Control Dep"];
37 -> 46 [label="Control Dep"];
37 -> 38 [label="Control Dep"];
37 -> 45 [label="Control Dep"];
37 -> 39 [label="Control Dep"];
37 -> 41 [label="Control Dep"];
37 -> 42 [label="Control Dep"];
37 -> 43 [label="Control Dep"];
38 -> 56 [label="Define-Use"];
38 -> 62 [label="Define-Use"];
38 -> 83 [label="Define-Use"];
38 -> 121 [label="Define-Use"];
41 -> 38 [label="Data Dep"];
42 -> 38 [label="Data Dep"];
43 -> 44 [label="AST"];
45 -> 40 [label="AST"];
45 -> 41 [label="AST"];
45 -> 39 [label="AST"];
45 -> 42 [label="AST"];
45 -> 43 [label="AST"];
46 -> 38 [label="AST"];
46 -> 45 [label="AST"];
47 -> 46 [label="AST"];
48 -> 37 [label="AST"];
48 -> 47 [label="AST"];
49 -> 34 [label="AST"];
49 -> 48 [label="AST"];
52 -> 50 [label="AST"];
52 -> 51 [label="AST"];
52 -> 53 [label="Control Dep"];
54 -> 52 [label="AST"];
54 -> 53 [label="AST"];
55 -> 49 [label="AST"];
55 -> 54 [label="AST"];
57 -> 58 [label="AST"];
59 -> 56 [label="AST"];
59 -> 57 [label="AST"];
59 -> 66 [label="Control Dep"];
59 -> 65 [label="Control Dep"];
59 -> 60 [label="Control Dep"];
59 -> 62 [label="Control Dep"];
59 -> 64 [label="Control Dep"];
59 -> 115 [label="Control Dep"];
59 -> 114 [label="Control Dep"];
59 -> 89 [label="Control Dep"];
59 -> 76 [label="Control Dep"];
59 -> 74 [label="Control Dep"];
59 -> 68 [label="Control Dep"];
59 -> 70 [label="Control Dep"];
59 -> 71 [label="Control Dep"];
59 -> 72 [label="Control Dep"];
59 -> 88 [label="Control Dep"];
59 -> 79 [label="Control Dep"];
59 -> 77 [label="Control Dep"];
59 -> 78 [label="Control Dep"];
59 -> 94 [label="Control Dep"];
59 -> 92 [label="Control Dep"];
59 -> 113 [label="Control Dep"];
59 -> 97 [label="Control Dep"];
62 -> 63 [label="AST"];
65 -> 61 [label="AST"];
65 -> 62 [label="AST"];
65 -> 60 [label="AST"];
65 -> 64 [label="AST"];
66 -> 65 [label="AST"];
70 -> 75 [label="Data Dep"];
72 -> 73 [label="AST"];
73 -> 75 [label="Data Dep"];
74 -> 69 [label="AST"];
74 -> 70 [label="AST"];
74 -> 68 [label="AST"];
74 -> 71 [label="AST"];
74 -> 72 [label="AST"];
75 -> 77 [label="Define-Use"];
75 -> 82 [label="Define-Use"];
76 -> 75 [label="AST"];
76 -> 67 [label="AST"];
76 -> 74 [label="AST"];
79 -> 77 [label="AST"];
79 -> 78 [label="AST"];
79 -> 87 [label="Control Dep"];
79 -> 86 [label="Control Dep"];
79 -> 80 [label="Control Dep"];
79 -> 82 [label="Control Dep"];
79 -> 83 [label="Control Dep"];
79 -> 84 [label="Control Dep"];
84 -> 85 [label="AST"];
86 -> 81 [label="AST"];
86 -> 82 [label="AST"];
86 -> 80 [label="AST"];
86 -> 83 [label="AST"];
86 -> 84 [label="AST"];
87 -> 86 [label="AST"];
88 -> 79 [label="AST"];
88 -> 87 [label="AST"];
89 -> 76 [label="AST"];
89 -> 88 [label="AST"];
92 -> 90 [label="AST"];
92 -> 91 [label="AST"];
92 -> 93 [label="Control Dep"];
94 -> 92 [label="AST"];
94 -> 93 [label="AST"];
95 -> 108 [label="Define-Use"];
97 -> 95 [label="AST"];
97 -> 96 [label="AST"];
97 -> 112 [label="Control Dep"];
97 -> 105 [label="Control Dep"];
97 -> 103 [label="Control Dep"];
97 -> 101 [label="Control Dep"];
97 -> 99 [label="Control Dep"];
97 -> 100 [label="Control Dep"];
97 -> 102 [label="Control Dep"];
97 -> 111 [label="Control Dep"];
97 -> 110 [label="Control Dep"];
97 -> 107 [label="Control Dep"];
97 -> 108 [label="Control Dep"];
97 -> 109 [label="Control Dep"];
101 -> 99 [label="AST"];
101 -> 100 [label="AST"];
102 -> 104 [label="Data Dep"];
103 -> 101 [label="AST"];
103 -> 102 [label="AST"];
104 -> 107 [label="Define-Use"];
105 -> 104 [label="AST"];
105 -> 98 [label="AST"];
105 -> 103 [label="AST"];
110 -> 107 [label="AST"];
110 -> 108 [label="AST"];
110 -> 109 [label="AST"];
111 -> 110 [label="AST"];
112 -> 105 [label="AST"];
112 -> 111 [label="AST"];
113 -> 97 [label="AST"];
113 -> 112 [label="AST"];
114 -> 89 [label="AST"];
114 -> 94 [label="AST"];
114 -> 113 [label="AST"];
115 -> 114 [label="AST"];
116 -> 59 [label="AST"];
116 -> 66 [label="AST"];
116 -> 115 [label="AST"];
122 -> 118 [label="AST"];
122 -> 119 [label="AST"];
122 -> 117 [label="AST"];
122 -> 120 [label="AST"];
122 -> 121 [label="AST"];
123 -> 13 [label="AST"];
123 -> 20 [label="AST"];
123 -> 24 [label="AST"];
123 -> 55 [label="AST"];
123 -> 116 [label="AST"];
123 -> 122 [label="AST"];
124 -> 1 [label="AST"];
124 -> 0 [label="AST"];
124 -> 2 [label="AST"];
124 -> 4 [label="AST"];
124 -> 123 [label="AST"];
126 -> 127 [label="Action"];
}