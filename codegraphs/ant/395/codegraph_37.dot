digraph "execute#?" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@execute" shape=ellipse]
2 [label="2:CtTypeReferenceImpl@BuildException" shape=ellipse]
3 [label="3:CtExecutableReferenceImpl@log(java.lang.String)" shape=ellipse]
4 [label="3:CtVirtualElement@log" shape=ellipse]
5 [label="3:CtLiteralImpl@\"DEPRECATED - The copyfile task is deprecated.  Use copy instead.\"" shape=ellipse]
6 [label="3:CtInvocationImpl@log(\"DEPRECATED - The copyfile task is deprecated.  Use copy instead.\")" shape=ellipse]
7 [label="4:CtFieldReadImpl@srcFile" shape=ellipse]
8 [label="4:CtLiteralImpl@null" shape=ellipse]
9 [label="4:CtBinaryOperatorImpl@srcFile == null" shape=ellipse]
10 [label="5:CtTypeReferenceImpl@BuildException" shape=ellipse]
11 [label="5:CtLiteralImpl@\"The src attribute must be present.\"" shape=ellipse]
12 [label="5:CtFieldReadImpl@location" shape=ellipse]
13 [label="5:CtConstructorCallImpl@new BuildException(\"The src attribute must be present.\", location)" shape=ellipse]
14 [label="5:CtThrowImpl@throw new BuildException(\"The src attribute must be present.\", location)" shape=ellipse]
15 [label="4:CtBlockImpl@\{
    throw new BuildException(\"The src attribute must be present.\", location);
\}" shape=ellipse]
16 [label="4:CtIfImpl@if (srcFile == null) \{
    throw new BuildException(\"The src attribute must be present.\", location);
\}" shape=ellipse]
17 [label="7:CtExecutableReferenceImpl@exists()" shape=ellipse]
18 [label="7:CtVirtualElement@exists" shape=ellipse]
19 [label="7:CtFieldReadImpl@srcFile" shape=ellipse]
20 [label="7:CtInvocationImpl@srcFile.exists()" shape=ellipse]
21 [label="7:CtUnaryOperatorImpl@!srcFile.exists()" shape=ellipse]
22 [label="8:CtTypeReferenceImpl@BuildException" shape=ellipse]
23 [label="8:CtLiteralImpl@\"src \"" shape=ellipse]
24 [label="8:CtExecutableReferenceImpl@toString()" shape=ellipse]
25 [label="8:CtVirtualElement@toString" shape=ellipse]
26 [label="8:CtFieldReadImpl@srcFile" shape=ellipse]
27 [label="8:CtInvocationImpl@srcFile.toString()" shape=ellipse]
28 [label="8:CtBinaryOperatorImpl@(\"src \" + srcFile.toString())" shape=ellipse]
29 [label="8:CtLiteralImpl@\" does not exist.\"" shape=ellipse]
30 [label="8:CtBinaryOperatorImpl@(\"src \" + srcFile.toString()) + \" does not exist.\"" shape=ellipse]
31 [label="8:CtFieldReadImpl@location" shape=ellipse]
32 [label="8:CtConstructorCallImpl@new BuildException((\"src \" + srcFile.toString()) + \" does not exist.\", location)" shape=ellipse]
33 [label="8:CtThrowImpl@throw new BuildException((\"src \" + srcFile.toString()) + \" does not exist.\", location)" shape=ellipse]
34 [label="7:CtBlockImpl@\{
    throw new BuildException((\"src \" + srcFile.toString()) + \" does not exist.\", location);
\}" shape=ellipse]
35 [label="7:CtIfImpl@if (!srcFile.exists()) \{
    throw new BuildException((\"src \" + srcFile.toString()) + \" does not exist.\", location);
\}" shape=ellipse]
36 [label="10:CtFieldReadImpl@destFile" shape=ellipse]
37 [label="10:CtLiteralImpl@null" shape=ellipse]
38 [label="10:CtBinaryOperatorImpl@destFile == null" shape=ellipse]
39 [label="11:CtTypeReferenceImpl@BuildException" shape=ellipse]
40 [label="11:CtLiteralImpl@\"The dest attribute must be present.\"" shape=ellipse]
41 [label="11:CtFieldReadImpl@location" shape=ellipse]
42 [label="11:CtConstructorCallImpl@new BuildException(\"The dest attribute must be present.\", location)" shape=ellipse]
43 [label="11:CtThrowImpl@throw new BuildException(\"The dest attribute must be present.\", location)" shape=ellipse]
44 [label="10:CtBlockImpl@\{
    throw new BuildException(\"The dest attribute must be present.\", location);
\}" shape=ellipse]
45 [label="10:CtIfImpl@if (destFile == null) \{
    throw new BuildException(\"The dest attribute must be present.\", location);
\}" shape=ellipse]
46 [label="13:CtExecutableReferenceImpl@equals()" shape=ellipse]
47 [label="13:CtVirtualElement@equals" shape=ellipse]
48 [label="13:CtFieldReadImpl@srcFile" shape=ellipse]
49 [label="13:CtFieldReadImpl@destFile" shape=ellipse]
50 [label="13:CtInvocationImpl@srcFile.equals(destFile)" shape=ellipse]
51 [label="14:CtExecutableReferenceImpl@log(java.lang.String,<unknown>)" shape=ellipse]
52 [label="14:CtVirtualElement@log" shape=ellipse]
53 [label="14:CtLiteralImpl@\"Warning: src == dest\"" shape=ellipse]
54 [label="14:CtTypeAccessImpl@MSG_WARN" shape=ellipse]
55 [label="14:CtInvocationImpl@log(\"Warning: src == dest\", MSG_WARN)" shape=ellipse]
56 [label="13:CtBlockImpl@\{
    log(\"Warning: src == dest\", MSG_WARN);
\}" shape=ellipse]
57 [label="13:CtIfImpl@if (srcFile.equals(destFile)) \{
    log(\"Warning: src == dest\", MSG_WARN);
\}" shape=ellipse]
58 [label="16:CtFieldReadImpl@forceOverwrite" shape=ellipse]
59 [label="16:CtExecutableReferenceImpl@lastModified()" shape=ellipse]
60 [label="16:CtVirtualElement@lastModified" shape=ellipse]
61 [label="16:CtFieldReadImpl@srcFile" shape=ellipse]
62 [label="16:CtInvocationImpl@srcFile.lastModified()" shape=ellipse]
63 [label="16:CtExecutableReferenceImpl@lastModified()" shape=ellipse]
64 [label="16:CtVirtualElement@lastModified" shape=ellipse]
65 [label="16:CtFieldReadImpl@destFile" shape=ellipse]
66 [label="16:CtInvocationImpl@destFile.lastModified()" shape=ellipse]
67 [label="16:CtBinaryOperatorImpl@(srcFile.lastModified() > destFile.lastModified())" shape=ellipse]
68 [label="16:CtBinaryOperatorImpl@forceOverwrite || (srcFile.lastModified() > destFile.lastModified())" shape=ellipse]
69 [label="18:CtExecutableReferenceImpl@copyFile()" shape=ellipse]
70 [label="18:CtVirtualElement@copyFile" shape=ellipse]
71 [label="18:CtFieldReadImpl@project" shape=ellipse]
72 [label="18:CtFieldReadImpl@srcFile" shape=ellipse]
73 [label="18:CtFieldReadImpl@destFile" shape=ellipse]
74 [label="18:CtFieldReadImpl@filtering" shape=ellipse]
75 [label="18:CtFieldReadImpl@forceOverwrite" shape=ellipse]
76 [label="18:CtInvocationImpl@project.copyFile(srcFile, destFile, filtering, forceOverwrite)" shape=ellipse]
77 [label="17:CtBlockImpl@\{
    project.copyFile(srcFile, destFile, filtering, forceOverwrite);
\}" shape=ellipse]
78 [label="19:CtVirtualElement@ioe" shape=ellipse]
79 [label="19:CtTypeReferenceImpl@IOException" shape=ellipse]
80 [label="19:CtCatchVariableImpl@IOException ioe" shape=ellipse]
81 [label="20:CtTypeReferenceImpl@String" shape=ellipse]
82 [label="21:CtLiteralImpl@\"Error copying file: \"" shape=ellipse]
83 [label="21:CtExecutableReferenceImpl@getAbsolutePath()" shape=ellipse]
84 [label="21:CtVirtualElement@getAbsolutePath" shape=ellipse]
85 [label="21:CtFieldReadImpl@srcFile" shape=ellipse]
86 [label="21:CtInvocationImpl@srcFile.getAbsolutePath()" shape=ellipse]
87 [label="21:CtBinaryOperatorImpl@(\"Error copying file: \" + srcFile.getAbsolutePath())" shape=ellipse]
88 [label="21:CtLiteralImpl@\" due to \"" shape=ellipse]
89 [label="21:CtBinaryOperatorImpl@((\"Error copying file: \" + srcFile.getAbsolutePath()) + \" due to \")" shape=ellipse]
90 [label="21:CtExecutableReferenceImpl@getMessage()" shape=ellipse]
91 [label="21:CtVirtualElement@getMessage" shape=ellipse]
92 [label="21:CtVariableReadImpl@ioe" shape=ellipse]
93 [label="21:CtInvocationImpl@ioe.getMessage()" shape=ellipse]
94 [label="21:CtBinaryOperatorImpl@((\"Error copying file: \" + srcFile.getAbsolutePath()) + \" due to \") + ioe.getMessage()" shape=ellipse]
95 [label="20:CtVirtualElement@msg" shape=ellipse]
96 [label="20:CtLocalVariableImpl@String msg = ((\"Error copying file: \" + srcFile.getAbsolutePath()) + \" due to \") + ioe.getMessage()" shape=ellipse]
97 [label="22:CtTypeReferenceImpl@BuildException" shape=ellipse]
98 [label="22:CtVariableReadImpl@msg" shape=ellipse]
99 [label="22:CtConstructorCallImpl@new BuildException(msg)" shape=ellipse]
100 [label="22:CtThrowImpl@throw new BuildException(msg)" shape=ellipse]
101 [label="19:CtBlockImpl@\{
    String msg = ((\"Error copying file: \" + srcFile.getAbsolutePath()) + \" due to \") + ioe.getMessage();
    throw new BuildException(msg);
\}" shape=ellipse]
102 [label="19:CtCatchImpl@ catch (IOException ioe) \{
    String msg = ((\"Error copying file: \" + srcFile.getAbsolutePath()) + \" due to \") + ioe.getMessage();
    throw new BuildException(msg);
\}" shape=ellipse]
103 [label="17:CtTryImpl@try \{
    project.copyFile(srcFile, destFile, filtering, forceOverwrite);
\} catch (IOException ioe) \{
    String msg = ((\"Error copying file: \" + srcFile.getAbsolutePath()) + \" due to \") + ioe.getMessage();
    throw new BuildException(msg);
\}" shape=ellipse]
104 [label="16:CtBlockImpl@\{
    try \{
        project.copyFile(srcFile, destFile, filtering, forceOverwrite);
    \} catch (IOException ioe) \{
        String msg = ((\"Error copying file: \" + srcFile.getAbsolutePath()) + \" due to \") + ioe.getMessage();
        throw new BuildException(msg);
    \}
\}" shape=ellipse]
105 [label="16:CtIfImpl@if (forceOverwrite || (srcFile.lastModified() > destFile.lastModified())) \{
    try \{
        project.copyFile(srcFile, destFile, filtering, forceOverwrite);
    \} catch (IOException ioe) \{
        String msg = ((\"Error copying file: \" + srcFile.getAbsolutePath()) + \" due to \") + ioe.getMessage();
        throw new BuildException(msg);
    \}
\}" shape=ellipse]
106 [label="2:CtBlockImpl@\{
    log(\"DEPRECATED - The copyfile task is deprecated.  Use copy instead.\");
    if (srcFile == null) \{
        throw new BuildException(\"The src attribute must be present.\", location);
    \}
    if (!srcFile.exists()) \{
        throw new BuildException((\"src \" + srcFile.toString()) + \" does not exist.\", location);
    \}
    if (destFile == null) \{
        throw new BuildException(\"The dest attribute must be present.\", location);
    \}
    if (srcFile.equals(destFile)) \{
        log(\"Warning: src == dest\", MSG_WARN);
    \}
    if (forceOverwrite || (srcFile.lastModified() > destFile.lastModified())) \{
        try \{
            project.copyFile(srcFile, destFile, filtering, forceOverwrite);
        \} catch (IOException ioe) \{
            String msg = ((\"Error copying file: \" + srcFile.getAbsolutePath()) + \" due to \") + ioe.getMessage();
            throw new BuildException(msg);
        \}
    \}
\}" shape=ellipse]
107 [label="2:CtMethodImpl@public void execute() throws BuildException \{
    log(\"DEPRECATED - The copyfile task is deprecated.  Use copy instead.\");
    if (srcFile == null) \{
        throw new BuildException(\"The src attribute must be present.\", location);
    \}
    if (!srcFile.exists()) \{
        throw new BuildException((\"src \" + srcFile.toString()) + \" does not exist.\", location);
    \}
    if (destFile == null) \{
        throw new BuildException(\"The dest attribute must be present.\", location);
    \}
    if (srcFile.equals(destFile)) \{
        log(\"Warning: src == dest\", MSG_WARN);
    \}
    if (forceOverwrite || (srcFile.lastModified() > destFile.lastModified())) \{
        try \{
            project.copyFile(srcFile, destFile, filtering, forceOverwrite);
        \} catch (IOException ioe) \{
            String msg = ((\"Error copying file: \" + srcFile.getAbsolutePath()) + \" due to \") + ioe.getMessage();
            throw new BuildException(msg);
        \}
    \}
\}" shape=ellipse]
108 [label="18:Delete@DELETE" shape=ellipse]
109 [label="18:Insert@INSERT" shape=ellipse]
110 [label="18:CtInvocationImpl@getProject()" shape=ellipse]
6 -> 4 [label="AST"];
6 -> 3 [label="AST"];
6 -> 5 [label="AST"];
9 -> 7 [label="AST"];
9 -> 8 [label="AST"];
9 -> 15 [label="Control Dep"];
9 -> 14 [label="Control Dep"];
9 -> 13 [label="Control Dep"];
9 -> 11 [label="Control Dep"];
9 -> 12 [label="Control Dep"];
13 -> 11 [label="AST"];
13 -> 12 [label="AST"];
14 -> 13 [label="AST"];
15 -> 14 [label="AST"];
16 -> 9 [label="AST"];
16 -> 15 [label="AST"];
20 -> 18 [label="AST"];
20 -> 19 [label="AST"];
20 -> 17 [label="AST"];
21 -> 20 [label="AST"];
21 -> 34 [label="Control Dep"];
21 -> 33 [label="Control Dep"];
21 -> 32 [label="Control Dep"];
21 -> 30 [label="Control Dep"];
21 -> 28 [label="Control Dep"];
21 -> 23 [label="Control Dep"];
21 -> 27 [label="Control Dep"];
21 -> 24 [label="Control Dep"];
21 -> 26 [label="Control Dep"];
21 -> 29 [label="Control Dep"];
21 -> 31 [label="Control Dep"];
27 -> 25 [label="AST"];
27 -> 26 [label="AST"];
27 -> 24 [label="AST"];
28 -> 23 [label="AST"];
28 -> 27 [label="AST"];
30 -> 28 [label="AST"];
30 -> 29 [label="AST"];
32 -> 30 [label="AST"];
32 -> 31 [label="AST"];
33 -> 32 [label="AST"];
34 -> 33 [label="AST"];
35 -> 21 [label="AST"];
35 -> 34 [label="AST"];
38 -> 36 [label="AST"];
38 -> 37 [label="AST"];
38 -> 44 [label="Control Dep"];
38 -> 43 [label="Control Dep"];
38 -> 42 [label="Control Dep"];
38 -> 40 [label="Control Dep"];
38 -> 41 [label="Control Dep"];
42 -> 40 [label="AST"];
42 -> 41 [label="AST"];
43 -> 42 [label="AST"];
44 -> 43 [label="AST"];
45 -> 38 [label="AST"];
45 -> 44 [label="AST"];
50 -> 47 [label="AST"];
50 -> 48 [label="AST"];
50 -> 46 [label="AST"];
50 -> 49 [label="AST"];
50 -> 56 [label="Control Dep"];
50 -> 55 [label="Control Dep"];
50 -> 51 [label="Control Dep"];
50 -> 53 [label="Control Dep"];
50 -> 54 [label="Control Dep"];
55 -> 52 [label="AST"];
55 -> 51 [label="AST"];
55 -> 53 [label="AST"];
55 -> 54 [label="AST"];
56 -> 55 [label="AST"];
57 -> 50 [label="AST"];
57 -> 56 [label="AST"];
62 -> 60 [label="AST"];
62 -> 61 [label="AST"];
62 -> 59 [label="AST"];
66 -> 64 [label="AST"];
66 -> 65 [label="AST"];
66 -> 63 [label="AST"];
67 -> 62 [label="AST"];
67 -> 66 [label="AST"];
68 -> 58 [label="AST"];
68 -> 67 [label="AST"];
68 -> 104 [label="Control Dep"];
68 -> 103 [label="Control Dep"];
68 -> 77 [label="Control Dep"];
68 -> 76 [label="Control Dep"];
68 -> 69 [label="Control Dep"];
68 -> 71 [label="Control Dep"];
68 -> 72 [label="Control Dep"];
68 -> 73 [label="Control Dep"];
68 -> 74 [label="Control Dep"];
68 -> 75 [label="Control Dep"];
68 -> 102 [label="Control Dep"];
68 -> 80 [label="Control Dep"];
71 -> 108 [label="Action"];
76 -> 70 [label="AST"];
76 -> 71 [label="AST"];
76 -> 69 [label="AST"];
76 -> 72 [label="AST"];
76 -> 73 [label="AST"];
76 -> 74 [label="AST"];
76 -> 75 [label="AST"];
76 -> 109 [label="Action"];
77 -> 76 [label="AST"];
78 -> 92 [label="Define-Use"];
80 -> 78 [label="AST"];
80 -> 79 [label="AST"];
80 -> 101 [label="Control Dep"];
80 -> 96 [label="Control Dep"];
80 -> 94 [label="Control Dep"];
80 -> 89 [label="Control Dep"];
80 -> 87 [label="Control Dep"];
80 -> 82 [label="Control Dep"];
80 -> 86 [label="Control Dep"];
80 -> 83 [label="Control Dep"];
80 -> 85 [label="Control Dep"];
80 -> 88 [label="Control Dep"];
80 -> 93 [label="Control Dep"];
80 -> 90 [label="Control Dep"];
80 -> 92 [label="Control Dep"];
80 -> 100 [label="Control Dep"];
80 -> 99 [label="Control Dep"];
80 -> 98 [label="Control Dep"];
85 -> 95 [label="Data Dep"];
86 -> 84 [label="AST"];
86 -> 85 [label="AST"];
86 -> 83 [label="AST"];
87 -> 82 [label="AST"];
87 -> 86 [label="AST"];
89 -> 87 [label="AST"];
89 -> 88 [label="AST"];
92 -> 95 [label="Data Dep"];
93 -> 91 [label="AST"];
93 -> 92 [label="AST"];
93 -> 90 [label="AST"];
94 -> 89 [label="AST"];
94 -> 93 [label="AST"];
95 -> 98 [label="Define-Use"];
96 -> 95 [label="AST"];
96 -> 81 [label="AST"];
96 -> 94 [label="AST"];
99 -> 98 [label="AST"];
100 -> 99 [label="AST"];
101 -> 96 [label="AST"];
101 -> 100 [label="AST"];
102 -> 80 [label="AST"];
102 -> 101 [label="AST"];
103 -> 77 [label="AST"];
103 -> 102 [label="AST"];
104 -> 103 [label="AST"];
105 -> 68 [label="AST"];
105 -> 104 [label="AST"];
106 -> 6 [label="AST"];
106 -> 16 [label="AST"];
106 -> 35 [label="AST"];
106 -> 45 [label="AST"];
106 -> 57 [label="AST"];
106 -> 105 [label="AST"];
107 -> 1 [label="AST"];
107 -> 0 [label="AST"];
107 -> 2 [label="AST"];
107 -> 106 [label="AST"];
109 -> 110 [label="Action"];
}