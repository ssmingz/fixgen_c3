digraph "createFactory#?,String" {
0 [label="2:CtTypeReferenceImpl@MultiSourceTypeFactory" shape=ellipse]
1 [label="2:CtVirtualElement@createFactory" shape=ellipse]
2 [label="2:CtParameterImpl@final String role" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
4 [label="2:CtTypeReferenceImpl@TypeException" shape=ellipse]
5 [label="3:CtTypeReferenceImpl@MultiSourceTypeFactory" shape=ellipse]
6 [label="3:CtExecutableReferenceImpl@get(java.lang.String)" shape=ellipse]
7 [label="3:CtVirtualElement@get" shape=ellipse]
8 [label="3:CtFieldReadImpl@m_roleMap" shape=ellipse]
9 [label="3:CtVariableReadImpl@role" shape=ellipse]
10 [label="3:CtInvocationImpl@((MultiSourceTypeFactory) (m_roleMap.get(role)))" shape=ellipse]
11 [label="3:CtTypeReferenceImpl@MultiSourceTypeFactory" shape=ellipse]
12 [label="3:CtVirtualElement@factory" shape=ellipse]
13 [label="3:CtLocalVariableImpl@MultiSourceTypeFactory factory = ((MultiSourceTypeFactory) (m_roleMap.get(role)))" shape=ellipse]
14 [label="4:CtLiteralImpl@null" shape=ellipse]
15 [label="4:CtVariableReadImpl@factory" shape=ellipse]
16 [label="4:CtBinaryOperatorImpl@null != factory" shape=ellipse]
17 [label="5:CtVariableReadImpl@factory" shape=ellipse]
18 [label="5:CtReturnImpl@return factory" shape=ellipse]
19 [label="4:CtBlockImpl@\{
    return factory;
\}" shape=ellipse]
20 [label="4:CtIfImpl@if (null != factory) \{
    return factory;
\}" shape=ellipse]
21 [label="7:CtTypeReferenceImpl@MultiSourceTypeFactory" shape=ellipse]
22 [label="7:CtExecutableReferenceImpl@getParentTypedFactory(java.lang.String)" shape=ellipse]
23 [label="7:CtVirtualElement@getParentTypedFactory" shape=ellipse]
24 [label="7:CtVariableReadImpl@role" shape=ellipse]
25 [label="7:CtInvocationImpl@getParentTypedFactory(role)" shape=ellipse]
26 [label="7:CtVirtualElement@parentFactory" shape=ellipse]
27 [label="7:CtLocalVariableImpl@final MultiSourceTypeFactory parentFactory = getParentTypedFactory(role)" shape=ellipse]
28 [label="8:CtLiteralImpl@null" shape=ellipse]
29 [label="8:CtVariableReadImpl@parentFactory" shape=ellipse]
30 [label="8:CtBinaryOperatorImpl@null != parentFactory" shape=ellipse]
31 [label="9:CtVariableWriteImpl@factory" shape=ellipse]
32 [label="9:CtTypeReferenceImpl@MultiSourceTypeFactory" shape=ellipse]
33 [label="9:CtVariableReadImpl@parentFactory" shape=ellipse]
34 [label="9:CtConstructorCallImpl@new MultiSourceTypeFactory(parentFactory)" shape=ellipse]
35 [label="9:CtAssignmentImpl@factory = new MultiSourceTypeFactory(parentFactory)" shape=ellipse]
36 [label="8:CtBlockImpl@\{
    factory = new MultiSourceTypeFactory(parentFactory);
\}" shape=ellipse]
37 [label="8:CtIfImpl@if (null != parentFactory) \{
    factory = new MultiSourceTypeFactory(parentFactory);
\}" shape=ellipse]
38 [label="11:CtLiteralImpl@null" shape=ellipse]
39 [label="11:CtVariableReadImpl@factory" shape=ellipse]
40 [label="11:CtBinaryOperatorImpl@null == factory" shape=ellipse]
41 [label="13:CtTypeReferenceImpl@Class" shape=ellipse]
42 [label="13:CtExecutableReferenceImpl@forName(java.lang.String)" shape=ellipse]
43 [label="13:CtVirtualElement@forName" shape=ellipse]
44 [label="13:CtTypeAccessImpl@Class" shape=ellipse]
45 [label="13:CtVariableReadImpl@role" shape=ellipse]
46 [label="13:CtInvocationImpl@Class.forName(role)" shape=ellipse]
47 [label="13:CtVirtualElement@clazz" shape=ellipse]
48 [label="13:CtLocalVariableImpl@final Class clazz = Class.forName(role)" shape=ellipse]
49 [label="14:CtVariableWriteImpl@factory" shape=ellipse]
50 [label="14:CtTypeReferenceImpl@MultiSourceTypeFactory" shape=ellipse]
51 [label="14:CtVariableReadImpl@clazz" shape=ellipse]
52 [label="14:CtConstructorCallImpl@new MultiSourceTypeFactory(clazz)" shape=ellipse]
53 [label="14:CtAssignmentImpl@factory = new MultiSourceTypeFactory(clazz)" shape=ellipse]
54 [label="12:CtBlockImpl@\{
    final Class clazz = Class.forName(role);
    factory = new MultiSourceTypeFactory(clazz);
\}" shape=ellipse]
55 [label="15:CtVirtualElement@e" shape=ellipse]
56 [label="15:CtTypeReferenceImpl@Exception" shape=ellipse]
57 [label="15:CtCatchVariableImpl@final Exception e" shape=ellipse]
58 [label="16:CtTypeReferenceImpl@TypeException" shape=ellipse]
59 [label="17:CtLiteralImpl@\"Role '\"" shape=ellipse]
60 [label="17:CtVariableReadImpl@role" shape=ellipse]
61 [label="17:CtBinaryOperatorImpl@(\"Role '\" + role)" shape=ellipse]
62 [label="17:CtLiteralImpl@\"' does not specify \"" shape=ellipse]
63 [label="17:CtBinaryOperatorImpl@((\"Role '\" + role) + \"' does not specify \")" shape=ellipse]
64 [label="17:CtLiteralImpl@\"accessible work interface\"" shape=ellipse]
65 [label="17:CtBinaryOperatorImpl@((\"Role '\" + role) + \"' does not specify \") + \"accessible work interface\"" shape=ellipse]
66 [label="16:CtConstructorCallImpl@new TypeException(((\"Role '\" + role) + \"' does not specify \") + \"accessible work interface\")" shape=ellipse]
67 [label="16:CtThrowImpl@throw new TypeException(((\"Role '\" + role) + \"' does not specify \") + \"accessible work interface\")" shape=ellipse]
68 [label="15:CtBlockImpl@\{
    throw new TypeException(((\"Role '\" + role) + \"' does not specify \") + \"accessible work interface\");
\}" shape=ellipse]
69 [label="15:CtCatchImpl@ catch (final Exception e) \{
    throw new TypeException(((\"Role '\" + role) + \"' does not specify \") + \"accessible work interface\");
\}" shape=ellipse]
70 [label="12:CtTryImpl@try \{
    final Class clazz = Class.forName(role);
    factory = new MultiSourceTypeFactory(clazz);
\} catch (final Exception e) \{
    throw new TypeException(((\"Role '\" + role) + \"' does not specify \") + \"accessible work interface\");
\}" shape=ellipse]
71 [label="11:CtBlockImpl@\{
    try \{
        final Class clazz = Class.forName(role);
        factory = new MultiSourceTypeFactory(clazz);
    \} catch (final Exception e) \{
        throw new TypeException(((\"Role '\" + role) + \"' does not specify \") + \"accessible work interface\");
    \}
\}" shape=ellipse]
72 [label="11:CtIfImpl@if (null == factory) \{
    try \{
        final Class clazz = Class.forName(role);
        factory = new MultiSourceTypeFactory(clazz);
    \} catch (final Exception e) \{
        throw new TypeException(((\"Role '\" + role) + \"' does not specify \") + \"accessible work interface\");
    \}
\}" shape=ellipse]
73 [label="20:CtExecutableReferenceImpl@put(java.lang.String,MultiSourceTypeFactory)" shape=ellipse]
74 [label="20:CtVirtualElement@put" shape=ellipse]
75 [label="20:CtFieldReadImpl@m_roleMap" shape=ellipse]
76 [label="20:CtVariableReadImpl@role" shape=ellipse]
77 [label="20:CtVariableReadImpl@factory" shape=ellipse]
78 [label="20:CtInvocationImpl@m_roleMap.put(role, factory)" shape=ellipse]
79 [label="21:CtVariableReadImpl@factory" shape=ellipse]
80 [label="21:CtReturnImpl@return factory" shape=ellipse]
81 [label="2:CtBlockImpl@\{
    MultiSourceTypeFactory factory = ((MultiSourceTypeFactory) (m_roleMap.get(role)));
    if (null != factory) \{
        return factory;
    \}
    final MultiSourceTypeFactory parentFactory = getParentTypedFactory(role);
    if (null != parentFactory) \{
        factory = new MultiSourceTypeFactory(parentFactory);
    \}
    if (null == factory) \{
        try \{
            final Class clazz = Class.forName(role);
            factory = new MultiSourceTypeFactory(clazz);
        \} catch (final Exception e) \{
            throw new TypeException(((\"Role '\" + role) + \"' does not specify \") + \"accessible work interface\");
        \}
    \}
    m_roleMap.put(role, factory);
    return factory;
\}" shape=ellipse]
82 [label="2:CtMethodImpl@private MultiSourceTypeFactory createFactory(final String role) throws TypeException \{
    MultiSourceTypeFactory factory = ((MultiSourceTypeFactory) (m_roleMap.get(role)));
    if (null != factory) \{
        return factory;
    \}
    final MultiSourceTypeFactory parentFactory = getParentTypedFactory(role);
    if (null != parentFactory) \{
        factory = new MultiSourceTypeFactory(parentFactory);
    \}
    if (null == factory) \{
        try \{
            final Class clazz = Class.forName(role);
            factory = new MultiSourceTypeFactory(clazz);
        \} catch (final Exception e) \{
            throw new TypeException(((\"Role '\" + role) + \"' does not specify \") + \"accessible work interface\");
        \}
    \}
    m_roleMap.put(role, factory);
    return factory;
\}" shape=ellipse]
83 [label="17:Update@UPDATE" shape=ellipse]
84 [label="17:CtVariableReadImpl@message" shape=ellipse]
85 [label="17:Delete@DELETE" shape=ellipse]
86 [label="16:Insert@INSERT" shape=ellipse]
87 [label="16:CtLocalVariableImpl@final String message = REZ.getString(\"no-work-interface.error\", role)" shape=ellipse]
88 [label="17:Move@MOVE" shape=ellipse]
2 -> 3 [label="AST"];
8 -> 12 [label="Data Dep"];
9 -> 12 [label="Data Dep"];
10 -> 7 [label="AST"];
10 -> 11 [label="AST"];
10 -> 8 [label="AST"];
10 -> 6 [label="AST"];
10 -> 9 [label="AST"];
12 -> 15 [label="Define-Use"];
12 -> 17 [label="Define-Use"];
12 -> 39 [label="Define-Use"];
13 -> 12 [label="AST"];
13 -> 5 [label="AST"];
13 -> 10 [label="AST"];
16 -> 14 [label="AST"];
16 -> 15 [label="AST"];
16 -> 19 [label="Control Dep"];
16 -> 18 [label="Control Dep"];
16 -> 17 [label="Control Dep"];
18 -> 17 [label="AST"];
19 -> 18 [label="AST"];
20 -> 16 [label="AST"];
20 -> 19 [label="AST"];
24 -> 26 [label="Data Dep"];
25 -> 23 [label="AST"];
25 -> 22 [label="AST"];
25 -> 24 [label="AST"];
26 -> 29 [label="Define-Use"];
26 -> 33 [label="Define-Use"];
27 -> 26 [label="AST"];
27 -> 21 [label="AST"];
27 -> 25 [label="AST"];
30 -> 28 [label="AST"];
30 -> 29 [label="AST"];
30 -> 36 [label="Control Dep"];
30 -> 35 [label="Control Dep"];
30 -> 31 [label="Control Dep"];
30 -> 34 [label="Control Dep"];
30 -> 33 [label="Control Dep"];
31 -> 39 [label="Define-Use"];
33 -> 31 [label="Data Dep"];
34 -> 33 [label="AST"];
35 -> 31 [label="AST"];
35 -> 34 [label="AST"];
36 -> 35 [label="AST"];
37 -> 30 [label="AST"];
37 -> 36 [label="AST"];
40 -> 38 [label="AST"];
40 -> 39 [label="AST"];
40 -> 71 [label="Control Dep"];
40 -> 70 [label="Control Dep"];
40 -> 54 [label="Control Dep"];
40 -> 48 [label="Control Dep"];
40 -> 46 [label="Control Dep"];
40 -> 42 [label="Control Dep"];
40 -> 44 [label="Control Dep"];
40 -> 45 [label="Control Dep"];
40 -> 53 [label="Control Dep"];
40 -> 49 [label="Control Dep"];
40 -> 52 [label="Control Dep"];
40 -> 51 [label="Control Dep"];
40 -> 69 [label="Control Dep"];
40 -> 57 [label="Control Dep"];
45 -> 47 [label="Data Dep"];
46 -> 43 [label="AST"];
46 -> 44 [label="AST"];
46 -> 42 [label="AST"];
46 -> 45 [label="AST"];
47 -> 51 [label="Define-Use"];
48 -> 47 [label="AST"];
48 -> 41 [label="AST"];
48 -> 46 [label="AST"];
49 -> 77 [label="Define-Use"];
49 -> 79 [label="Define-Use"];
51 -> 49 [label="Data Dep"];
52 -> 51 [label="AST"];
53 -> 49 [label="AST"];
53 -> 52 [label="AST"];
54 -> 48 [label="AST"];
54 -> 53 [label="AST"];
57 -> 55 [label="AST"];
57 -> 56 [label="AST"];
57 -> 68 [label="Control Dep"];
57 -> 67 [label="Control Dep"];
57 -> 66 [label="Control Dep"];
57 -> 65 [label="Control Dep"];
57 -> 63 [label="Control Dep"];
57 -> 61 [label="Control Dep"];
57 -> 59 [label="Control Dep"];
57 -> 60 [label="Control Dep"];
57 -> 62 [label="Control Dep"];
57 -> 64 [label="Control Dep"];
60 -> 83 [label="Action"];
60 -> 88 [label="Action"];
61 -> 59 [label="AST"];
61 -> 60 [label="AST"];
63 -> 61 [label="AST"];
63 -> 62 [label="AST"];
65 -> 63 [label="AST"];
65 -> 64 [label="AST"];
65 -> 85 [label="Action"];
66 -> 65 [label="AST"];
67 -> 66 [label="AST"];
68 -> 67 [label="AST"];
69 -> 57 [label="AST"];
69 -> 68 [label="AST"];
69 -> 86 [label="Action"];
70 -> 54 [label="AST"];
70 -> 69 [label="AST"];
71 -> 70 [label="AST"];
72 -> 40 [label="AST"];
72 -> 71 [label="AST"];
78 -> 74 [label="AST"];
78 -> 75 [label="AST"];
78 -> 73 [label="AST"];
78 -> 76 [label="AST"];
78 -> 77 [label="AST"];
80 -> 79 [label="AST"];
81 -> 13 [label="AST"];
81 -> 20 [label="AST"];
81 -> 27 [label="AST"];
81 -> 37 [label="AST"];
81 -> 72 [label="AST"];
81 -> 78 [label="AST"];
81 -> 80 [label="AST"];
82 -> 1 [label="AST"];
82 -> 0 [label="AST"];
82 -> 2 [label="AST"];
82 -> 4 [label="AST"];
82 -> 81 [label="AST"];
83 -> 84 [label="Action"];
86 -> 87 [label="Action"];
88 -> 66 [label="Action"];
}