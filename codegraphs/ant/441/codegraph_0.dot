digraph "testEndTestFired#?" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@testEndTestFired" shape=ellipse]
2 [label="3:CtExecutableReferenceImpl@setProperty(java.lang.String,java.lang.String)" shape=ellipse]
3 [label="3:CtVirtualElement@setProperty" shape=ellipse]
4 [label="3:CtExecutableReferenceImpl@getProject()" shape=ellipse]
5 [label="3:CtVirtualElement@getProject" shape=ellipse]
6 [label="3:CtInvocationImpl@getProject()" shape=ellipse]
7 [label="3:CtLiteralImpl@\"enableEvents\"" shape=ellipse]
8 [label="3:CtLiteralImpl@\"true\"" shape=ellipse]
9 [label="3:CtInvocationImpl@getProject().setProperty(\"enableEvents\", \"true\")" shape=ellipse]
10 [label="4:CtExecutableReferenceImpl@executeTarget(<unknown>)" shape=ellipse]
11 [label="4:CtVirtualElement@executeTarget" shape=ellipse]
12 [label="4:CtTypeAccessImpl@PASS_TEST_TARGET" shape=ellipse]
13 [label="4:CtInvocationImpl@executeTarget(PASS_TEST_TARGET)" shape=ellipse]
14 [label="5:CtExecutableReferenceImpl@assertTrue(java.lang.String,<unknown>)" shape=ellipse]
15 [label="5:CtVirtualElement@assertTrue" shape=ellipse]
16 [label="6:CtLiteralImpl@\"expecting test ended message\"" shape=ellipse]
17 [label="7:CtExecutableReferenceImpl@hasEventMessage(<unknown>)" shape=ellipse]
18 [label="7:CtVirtualElement@hasEventMessage" shape=ellipse]
19 [label="7:CtFieldReadImpl@JUnitTask.TESTLISTENER_PREFIX" shape=ellipse]
20 [label="7:CtLiteralImpl@\"endTest(\"" shape=ellipse]
21 [label="7:CtBinaryOperatorImpl@(JUnitTask.TESTLISTENER_PREFIX + \"endTest(\")" shape=ellipse]
22 [label="7:CtFieldReadImpl@PASS_TEST" shape=ellipse]
23 [label="7:CtBinaryOperatorImpl@((JUnitTask.TESTLISTENER_PREFIX + \"endTest(\") + PASS_TEST)" shape=ellipse]
24 [label="7:CtLiteralImpl@\")\"" shape=ellipse]
25 [label="7:CtBinaryOperatorImpl@((JUnitTask.TESTLISTENER_PREFIX + \"endTest(\") + PASS_TEST) + \")\"" shape=ellipse]
26 [label="7:CtInvocationImpl@hasEventMessage(((JUnitTask.TESTLISTENER_PREFIX + \"endTest(\") + PASS_TEST) + \")\")" shape=ellipse]
27 [label="5:CtInvocationImpl@assertTrue(\"expecting test ended message\", hasEventMessage(((JUnitTask.TESTLISTENER_PREFIX + \"endTest(\") + PASS_TEST) + \")\"))" shape=ellipse]
28 [label="2:CtBlockImpl@\{
    getProject().setProperty(\"enableEvents\", \"true\");
    executeTarget(PASS_TEST_TARGET);
    assertTrue(\"expecting test ended message\", hasEventMessage(((JUnitTask.TESTLISTENER_PREFIX + \"endTest(\") + PASS_TEST) + \")\"));
\}" shape=ellipse]
29 [label="2:CtMethodImpl@public void testEndTestFired() \{
    getProject().setProperty(\"enableEvents\", \"true\");
    executeTarget(PASS_TEST_TARGET);
    assertTrue(\"expecting test ended message\", hasEventMessage(((JUnitTask.TESTLISTENER_PREFIX + \"endTest(\") + PASS_TEST) + \")\"));
\}" shape=ellipse]
30 [label="7:Update@UPDATE" shape=ellipse]
31 [label="6:CtInvocationImpl@assertContains(\"expecting test ended message\", ((JUnitTask.TESTLISTENER_PREFIX + \"endTest(\") + PASS_TEST) + \")\", buildRule.getFullLog())" shape=ellipse]
32 [label="5:Delete@DELETE" shape=ellipse]
33 [label="2:Insert@INSERT" shape=ellipse]
34 [label="2:CtAnnotationImpl@@Test" shape=ellipse]
35 [label="5:Insert@INSERT" shape=ellipse]
36 [label="5:CtFieldReadImpl@buildRule" shape=ellipse]
37 [label="4:Insert@INSERT" shape=ellipse]
38 [label="4:CtFieldReadImpl@buildRule" shape=ellipse]
39 [label="7:Move@MOVE" shape=ellipse]
6 -> 5 [label="AST"];
6 -> 4 [label="AST"];
6 -> 37 [label="Action"];
9 -> 3 [label="AST"];
9 -> 6 [label="AST"];
9 -> 2 [label="AST"];
9 -> 7 [label="AST"];
9 -> 8 [label="AST"];
13 -> 11 [label="AST"];
13 -> 10 [label="AST"];
13 -> 12 [label="AST"];
13 -> 35 [label="Action"];
21 -> 19 [label="AST"];
21 -> 20 [label="AST"];
23 -> 21 [label="AST"];
23 -> 22 [label="AST"];
25 -> 23 [label="AST"];
25 -> 24 [label="AST"];
26 -> 18 [label="AST"];
26 -> 17 [label="AST"];
26 -> 25 [label="AST"];
26 -> 30 [label="Action"];
26 -> 39 [label="Action"];
27 -> 15 [label="AST"];
27 -> 14 [label="AST"];
27 -> 16 [label="AST"];
27 -> 26 [label="AST"];
27 -> 32 [label="Action"];
28 -> 9 [label="AST"];
28 -> 13 [label="AST"];
28 -> 27 [label="AST"];
29 -> 1 [label="AST"];
29 -> 0 [label="AST"];
29 -> 28 [label="AST"];
29 -> 33 [label="Action"];
30 -> 31 [label="Action"];
33 -> 34 [label="Action"];
35 -> 36 [label="Action"];
37 -> 38 [label="Action"];
39 -> 29 [label="Action"];
}