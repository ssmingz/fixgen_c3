digraph "Pattern" {
0 [label="testEndTestFired#?#7:UPDATE
testStartTestFired#?#7:UPDATE" shape=ellipse]
1 [label="testEndTestFired#?#7:hasEventMessage(((JUnitTask.TESTLISTENER_PREFIX + \"endTest(\") + PASS_TEST) + \")\")
testStartTestFired#?#7:hasEventMessage(((JUnitTask.TESTLISTENER_PREFIX + \"startTest(\") + PASS_TEST) + \")\")" shape=ellipse]
2 [label="testEndTestFired#?#5:assertTrue(\"expecting test ended message\", hasEventMessage(((JUnitTask.TESTLISTENER_PREFIX + \"endTest(\") + PASS_TEST) + \")\"))
testStartTestFired#?#5:assertTrue(\"expecting test started message\", hasEventMessage(((JUnitTask.TESTLISTENER_PREFIX + \"startTest(\") + PASS_TEST) + \")\"))" shape=ellipse]
3 [label="testEndTestFired#?#2:\{
    getProject().setProperty(\"enableEvents\", \"true\");
    executeTarget(PASS_TEST_TARGET);
    assertTrue(\"expecting test ended message\", hasEventMessage(((JUnitTask.TESTLISTENER_PREFIX + \"endTest(\") + PASS_TEST) + \")\"));
\}
testStartTestFired#?#2:\{
    getProject().setProperty(\"enableEvents\", \"true\");
    executeTarget(PASS_TEST_TARGET);
    assertTrue(\"expecting test started message\", hasEventMessage(((JUnitTask.TESTLISTENER_PREFIX + \"startTest(\") + PASS_TEST) + \")\"));
\}" shape=ellipse]
4 [label="testEndTestFired#?#5:assertTrue
testStartTestFired#?#5:assertTrue" shape=ellipse]
5 [label="testEndTestFired#?#-1:
testStartTestFired#?#-1:" shape=ellipse]
6 [label="testEndTestFired#?#5:assertTrue(java.lang.String,<unknown>)
testStartTestFired#?#5:assertTrue(java.lang.String,<unknown>)" shape=ellipse]
7 [label="testEndTestFired#?#6:\"expecting test ended message\"
testStartTestFired#?#6:\"expecting test started message\"" shape=ellipse]
8 [label="testEndTestFired#?#5:DELETE
testStartTestFired#?#5:DELETE" shape=ellipse]
9 [label="testEndTestFired#?#7:hasEventMessage
testStartTestFired#?#7:hasEventMessage" shape=ellipse]
10 [label="testEndTestFired#?#-1:
testStartTestFired#?#-1:" shape=ellipse]
11 [label="testEndTestFired#?#-1:PlaceHold
testStartTestFired#?#-1:PlaceHold" shape=ellipse]
12 [label="testEndTestFired#?#-1:PlaceHold
testStartTestFired#?#-1:PlaceHold" shape=ellipse]
13 [label="testEndTestFired#?#7:hasEventMessage(<unknown>)
testStartTestFired#?#7:hasEventMessage(<unknown>)" shape=ellipse]
14 [label="testEndTestFired#?#-1:null
testStartTestFired#?#-1:null" shape=ellipse]
15 [label="testEndTestFired#?#7:((JUnitTask.TESTLISTENER_PREFIX + \"endTest(\") + PASS_TEST) + \")\"
testStartTestFired#?#7:((JUnitTask.TESTLISTENER_PREFIX + \"startTest(\") + PASS_TEST) + \")\"" shape=ellipse]
16 [label="testEndTestFired#?#7:((JUnitTask.TESTLISTENER_PREFIX + \"endTest(\") + PASS_TEST)
testStartTestFired#?#7:((JUnitTask.TESTLISTENER_PREFIX + \"startTest(\") + PASS_TEST)" shape=ellipse]
17 [label="testEndTestFired#?#7:\")\"
testStartTestFired#?#7:\")\"" shape=ellipse]
18 [label="testEndTestFired#?#7:MOVE
testStartTestFired#?#7:MOVE" shape=ellipse]
19 [label="testEndTestFired#?#2:public void testEndTestFired() \{
    getProject().setProperty(\"enableEvents\", \"true\");
    executeTarget(PASS_TEST_TARGET);
    assertTrue(\"expecting test ended message\", hasEventMessage(((JUnitTask.TESTLISTENER_PREFIX + \"endTest(\") + PASS_TEST) + \")\"));
\}
testStartTestFired#?#2:public void testStartTestFired() \{
    getProject().setProperty(\"enableEvents\", \"true\");
    executeTarget(PASS_TEST_TARGET);
    assertTrue(\"expecting test started message\", hasEventMessage(((JUnitTask.TESTLISTENER_PREFIX + \"startTest(\") + PASS_TEST) + \")\"));
\}" shape=ellipse]
20 [label="testEndTestFired#?#6:assertContains(\"expecting test ended message\", ((JUnitTask.TESTLISTENER_PREFIX + \"endTest(\") + PASS_TEST) + \")\", buildRule.getFullLog())
testStartTestFired#?#6:assertContains(\"expecting test started message\", ((JUnitTask.TESTLISTENER_PREFIX + \"startTest(\") + PASS_TEST) + \")\", buildRule.getFullLog())" shape=ellipse]
0 -> 20 [label="Action:2"];
1 -> 0 [label="Action:2"];
1 -> 9 [label="AST:2"];
1 -> 10 [label="AST:2"];
1 -> 13 [label="AST:2"];
1 -> 15 [label="AST:2"];
1 -> 18 [label="Action:2"];
2 -> 1 [label="AST:2"];
2 -> 4 [label="AST:2"];
2 -> 5 [label="AST:2"];
2 -> 6 [label="AST:2"];
2 -> 7 [label="AST:2"];
2 -> 8 [label="Action:2"];
3 -> 2 [label="AST:2"];
10 -> 11 [label="AST:2"];
10 -> 12 [label="AST:2"];
13 -> 14 [label="AST:2"];
15 -> 16 [label="AST:2"];
15 -> 17 [label="AST:2"];
18 -> 19 [label="Action:2"];
19 -> 3 [label="AST:2"];
}