digraph "Pattern" {
0 [label="testEndTestFired#?#5:INSERT
testStartTestFired#?#5:INSERT" shape=ellipse]
1 [label="testEndTestFired#?#4:executeTarget(PASS_TEST_TARGET)
testStartTestFired#?#4:executeTarget(PASS_TEST_TARGET)" shape=ellipse]
2 [label="testEndTestFired#?#2:\{
    getProject().setProperty(\"enableEvents\", \"true\");
    executeTarget(PASS_TEST_TARGET);
    assertTrue(\"expecting test ended message\", hasEventMessage(((JUnitTask.TESTLISTENER_PREFIX + \"endTest(\") + PASS_TEST) + \")\"));
\}
testStartTestFired#?#2:\{
    getProject().setProperty(\"enableEvents\", \"true\");
    executeTarget(PASS_TEST_TARGET);
    assertTrue(\"expecting test started message\", hasEventMessage(((JUnitTask.TESTLISTENER_PREFIX + \"startTest(\") + PASS_TEST) + \")\"));
\}" shape=ellipse]
3 [label="testEndTestFired#?#2:public void testEndTestFired() \{
    getProject().setProperty(\"enableEvents\", \"true\");
    executeTarget(PASS_TEST_TARGET);
    assertTrue(\"expecting test ended message\", hasEventMessage(((JUnitTask.TESTLISTENER_PREFIX + \"endTest(\") + PASS_TEST) + \")\"));
\}
testStartTestFired#?#2:public void testStartTestFired() \{
    getProject().setProperty(\"enableEvents\", \"true\");
    executeTarget(PASS_TEST_TARGET);
    assertTrue(\"expecting test started message\", hasEventMessage(((JUnitTask.TESTLISTENER_PREFIX + \"startTest(\") + PASS_TEST) + \")\"));
\}" shape=ellipse]
4 [label="testEndTestFired#?#3:getProject().setProperty(\"enableEvents\", \"true\")
testStartTestFired#?#3:getProject().setProperty(\"enableEvents\", \"true\")" shape=ellipse]
5 [label="testEndTestFired#?#5:assertTrue(\"expecting test ended message\", hasEventMessage(((JUnitTask.TESTLISTENER_PREFIX + \"endTest(\") + PASS_TEST) + \")\"))
testStartTestFired#?#5:assertTrue(\"expecting test started message\", hasEventMessage(((JUnitTask.TESTLISTENER_PREFIX + \"startTest(\") + PASS_TEST) + \")\"))" shape=ellipse]
6 [label="testEndTestFired#?#4:executeTarget
testStartTestFired#?#4:executeTarget" shape=ellipse]
7 [label="testEndTestFired#?#-1:
testStartTestFired#?#-1:" shape=ellipse]
8 [label="testEndTestFired#?#-1:PlaceHold
testStartTestFired#?#-1:PlaceHold" shape=ellipse]
9 [label="testEndTestFired#?#-1:PlaceHold
testStartTestFired#?#-1:PlaceHold" shape=ellipse]
10 [label="testEndTestFired#?#4:executeTarget(<unknown>)
testStartTestFired#?#4:executeTarget(<unknown>)" shape=ellipse]
11 [label="testEndTestFired#?#-1:null
testStartTestFired#?#-1:null" shape=ellipse]
12 [label="testEndTestFired#?#4:PASS_TEST_TARGET
testStartTestFired#?#4:PASS_TEST_TARGET" shape=ellipse]
13 [label="testEndTestFired#?#-1:PASS_TEST_TARGET
testStartTestFired#?#-1:PASS_TEST_TARGET" shape=ellipse]
14 [label="testEndTestFired#?#5:buildRule
testStartTestFired#?#5:buildRule" shape=ellipse]
0 -> 14 [label="Action:2"];
1 -> 0 [label="Action:2"];
1 -> 6 [label="AST:2"];
1 -> 7 [label="AST:2"];
1 -> 10 [label="AST:2"];
1 -> 12 [label="AST:2"];
2 -> 1 [label="AST:2"];
2 -> 4 [label="AST:2"];
2 -> 5 [label="AST:2"];
3 -> 2 [label="AST:2"];
7 -> 8 [label="AST:2"];
7 -> 9 [label="AST:2"];
10 -> 11 [label="AST:2"];
12 -> 13 [label="AST:2"];
}