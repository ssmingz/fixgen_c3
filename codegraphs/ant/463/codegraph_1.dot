digraph "setAttribute#?,Project,Object,String,String" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@setAttribute" shape=ellipse]
2 [label="2:CtParameterImpl@Project p" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@Project" shape=ellipse]
4 [label="2:CtParameterImpl@Object element" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@Object" shape=ellipse]
6 [label="2:CtParameterImpl@String attributeName" shape=ellipse]
7 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
8 [label="2:CtParameterImpl@String value" shape=ellipse]
9 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
10 [label="3:CtTypeReferenceImpl@BuildException" shape=ellipse]
11 [label="4:CtTypeReferenceImpl@AttributeSetter" shape=ellipse]
12 [label="4:CtExecutableReferenceImpl@get(java.lang.String)" shape=ellipse]
13 [label="4:CtVirtualElement@get" shape=ellipse]
14 [label="4:CtFieldReadImpl@attributeSetters" shape=ellipse]
15 [label="4:CtVariableReadImpl@attributeName" shape=ellipse]
16 [label="4:CtInvocationImpl@((AttributeSetter) (attributeSetters.get(attributeName)))" shape=ellipse]
17 [label="4:CtTypeReferenceImpl@AttributeSetter" shape=ellipse]
18 [label="4:CtVirtualElement@as" shape=ellipse]
19 [label="4:CtLocalVariableImpl@AttributeSetter as = ((AttributeSetter) (attributeSetters.get(attributeName)))" shape=ellipse]
20 [label="5:CtVariableReadImpl@as" shape=ellipse]
21 [label="5:CtLiteralImpl@null" shape=ellipse]
22 [label="5:CtBinaryOperatorImpl@as == null" shape=ellipse]
23 [label="6:CtTypeReferenceImpl@String" shape=ellipse]
24 [label="7:CtLiteralImpl@\"Class \"" shape=ellipse]
25 [label="7:CtExecutableReferenceImpl@getClass()" shape=ellipse]
26 [label="7:CtVirtualElement@getClass" shape=ellipse]
27 [label="7:CtVariableReadImpl@element" shape=ellipse]
28 [label="7:CtInvocationImpl@element.getClass()" shape=ellipse]
29 [label="7:CtBinaryOperatorImpl@(\"Class \" + element.getClass())" shape=ellipse]
30 [label="7:CtLiteralImpl@\" doesn\'t support the \\"\"" shape=ellipse]
31 [label="7:CtBinaryOperatorImpl@((\"Class \" + element.getClass()) + \" doesn\'t support the \\"\")" shape=ellipse]
32 [label="7:CtVariableReadImpl@attributeName" shape=ellipse]
33 [label="7:CtBinaryOperatorImpl@(((\"Class \" + element.getClass()) + \" doesn\'t support the \\"\") + attributeName)" shape=ellipse]
34 [label="8:CtLiteralImpl@\"\\" attribute\"" shape=ellipse]
35 [label="7:CtBinaryOperatorImpl@(((\"Class \" + element.getClass()) + \" doesn\'t support the \\"\") + attributeName) + \"\\" attribute\"" shape=ellipse]
36 [label="6:CtVirtualElement@msg" shape=ellipse]
37 [label="6:CtLocalVariableImpl@String msg = (((\"Class \" + element.getClass()) + \" doesn\'t support the \\"\") + attributeName) + \"\\" attribute\"" shape=ellipse]
38 [label="9:CtTypeReferenceImpl@BuildException" shape=ellipse]
39 [label="9:CtVariableReadImpl@msg" shape=ellipse]
40 [label="9:CtConstructorCallImpl@new BuildException(msg)" shape=ellipse]
41 [label="9:CtThrowImpl@throw new BuildException(msg)" shape=ellipse]
42 [label="5:CtBlockImpl@\{
    String msg = (((\"Class \" + element.getClass()) + \" doesn\'t support the \\"\") + attributeName) + \"\\" attribute\";
    throw new BuildException(msg);
\}" shape=ellipse]
43 [label="5:CtIfImpl@if (as == null) \{
    String msg = (((\"Class \" + element.getClass()) + \" doesn\'t support the \\"\") + attributeName) + \"\\" attribute\";
    throw new BuildException(msg);
\}" shape=ellipse]
44 [label="12:CtExecutableReferenceImpl@set(Project,java.lang.Object,java.lang.String)" shape=ellipse]
45 [label="12:CtVirtualElement@set" shape=ellipse]
46 [label="12:CtVariableReadImpl@as" shape=ellipse]
47 [label="12:CtVariableReadImpl@p" shape=ellipse]
48 [label="12:CtVariableReadImpl@element" shape=ellipse]
49 [label="12:CtVariableReadImpl@value" shape=ellipse]
50 [label="12:CtInvocationImpl@as.set(p, element, value)" shape=ellipse]
51 [label="11:CtBlockImpl@\{
    as.set(p, element, value);
\}" shape=ellipse]
52 [label="13:CtVirtualElement@ie" shape=ellipse]
53 [label="13:CtTypeReferenceImpl@IllegalAccessException" shape=ellipse]
54 [label="13:CtCatchVariableImpl@IllegalAccessException ie" shape=ellipse]
55 [label="14:CtTypeReferenceImpl@BuildException" shape=ellipse]
56 [label="14:CtVariableReadImpl@ie" shape=ellipse]
57 [label="14:CtConstructorCallImpl@new BuildException(ie)" shape=ellipse]
58 [label="14:CtThrowImpl@throw new BuildException(ie)" shape=ellipse]
59 [label="13:CtBlockImpl@\{
    throw new BuildException(ie);
\}" shape=ellipse]
60 [label="13:CtCatchImpl@ catch (IllegalAccessException ie) \{
    throw new BuildException(ie);
\}" shape=ellipse]
61 [label="15:CtVirtualElement@ite" shape=ellipse]
62 [label="15:CtTypeReferenceImpl@InvocationTargetException" shape=ellipse]
63 [label="15:CtCatchVariableImpl@InvocationTargetException ite" shape=ellipse]
64 [label="16:CtTypeReferenceImpl@Throwable" shape=ellipse]
65 [label="16:CtExecutableReferenceImpl@getTargetException()" shape=ellipse]
66 [label="16:CtVirtualElement@getTargetException" shape=ellipse]
67 [label="16:CtVariableReadImpl@ite" shape=ellipse]
68 [label="16:CtInvocationImpl@ite.getTargetException()" shape=ellipse]
69 [label="16:CtVirtualElement@t" shape=ellipse]
70 [label="16:CtLocalVariableImpl@Throwable t = ite.getTargetException()" shape=ellipse]
71 [label="17:CtVariableReadImpl@t" shape=ellipse]
72 [label="17:CtTypeAccessImpl@BuildException" shape=ellipse]
73 [label="17:CtTypeReferenceImpl@BuildException" shape=ellipse]
74 [label="17:CtBinaryOperatorImpl@t instanceof BuildException" shape=ellipse]
75 [label="18:CtVariableReadImpl@((BuildException) (t))" shape=ellipse]
76 [label="18:CtTypeReferenceImpl@BuildException" shape=ellipse]
77 [label="18:CtThrowImpl@throw ((BuildException) (t))" shape=ellipse]
78 [label="17:CtBlockImpl@\{
    throw ((BuildException) (t));
\}" shape=ellipse]
79 [label="17:CtIfImpl@if (t instanceof BuildException) \{
    throw ((BuildException) (t));
\}" shape=ellipse]
80 [label="20:CtTypeReferenceImpl@BuildException" shape=ellipse]
81 [label="20:CtVariableReadImpl@t" shape=ellipse]
82 [label="20:CtConstructorCallImpl@new BuildException(t)" shape=ellipse]
83 [label="20:CtThrowImpl@throw new BuildException(t)" shape=ellipse]
84 [label="15:CtBlockImpl@\{
    Throwable t = ite.getTargetException();
    if (t instanceof BuildException) \{
        throw ((BuildException) (t));
    \}
    throw new BuildException(t);
\}" shape=ellipse]
85 [label="15:CtCatchImpl@ catch (InvocationTargetException ite) \{
    Throwable t = ite.getTargetException();
    if (t instanceof BuildException) \{
        throw ((BuildException) (t));
    \}
    throw new BuildException(t);
\}" shape=ellipse]
86 [label="11:CtTryImpl@try \{
    as.set(p, element, value);
\} catch (IllegalAccessException ie) \{
    throw new BuildException(ie);
\} catch (InvocationTargetException ite) \{
    Throwable t = ite.getTargetException();
    if (t instanceof BuildException) \{
        throw ((BuildException) (t));
    \}
    throw new BuildException(t);
\}" shape=ellipse]
87 [label="3:CtBlockImpl@\{
    AttributeSetter as = ((AttributeSetter) (attributeSetters.get(attributeName)));
    if (as == null) \{
        String msg = (((\"Class \" + element.getClass()) + \" doesn\'t support the \\"\") + attributeName) + \"\\" attribute\";
        throw new BuildException(msg);
    \}
    try \{
        as.set(p, element, value);
    \} catch (IllegalAccessException ie) \{
        throw new BuildException(ie);
    \} catch (InvocationTargetException ite) \{
        Throwable t = ite.getTargetException();
        if (t instanceof BuildException) \{
            throw ((BuildException) (t));
        \}
        throw new BuildException(t);
    \}
\}" shape=ellipse]
88 [label="2:CtMethodImpl@public void setAttribute(Project p, Object element, String attributeName, String value) throws BuildException \{
    AttributeSetter as = ((AttributeSetter) (attributeSetters.get(attributeName)));
    if (as == null) \{
        String msg = (((\"Class \" + element.getClass()) + \" doesn\'t support the \\"\") + attributeName) + \"\\" attribute\";
        throw new BuildException(msg);
    \}
    try \{
        as.set(p, element, value);
    \} catch (IllegalAccessException ie) \{
        throw new BuildException(ie);
    \} catch (InvocationTargetException ite) \{
        Throwable t = ite.getTargetException();
        if (t instanceof BuildException) \{
            throw ((BuildException) (t));
        \}
        throw new BuildException(t);
    \}
\}" shape=ellipse]
89 [label="7:Insert@INSERT" shape=ellipse]
90 [label="7:CtInvocationImpl@element.getClass().getName()" shape=ellipse]
91 [label="7:Move@MOVE" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
6 -> 7 [label="AST"];
8 -> 9 [label="AST"];
14 -> 18 [label="Data Dep"];
15 -> 18 [label="Data Dep"];
16 -> 13 [label="AST"];
16 -> 17 [label="AST"];
16 -> 14 [label="AST"];
16 -> 12 [label="AST"];
16 -> 15 [label="AST"];
18 -> 20 [label="Define-Use"];
18 -> 46 [label="Define-Use"];
19 -> 18 [label="AST"];
19 -> 11 [label="AST"];
19 -> 16 [label="AST"];
22 -> 20 [label="AST"];
22 -> 21 [label="AST"];
22 -> 42 [label="Control Dep"];
22 -> 37 [label="Control Dep"];
22 -> 35 [label="Control Dep"];
22 -> 33 [label="Control Dep"];
22 -> 31 [label="Control Dep"];
22 -> 29 [label="Control Dep"];
22 -> 24 [label="Control Dep"];
22 -> 28 [label="Control Dep"];
22 -> 25 [label="Control Dep"];
22 -> 27 [label="Control Dep"];
22 -> 30 [label="Control Dep"];
22 -> 32 [label="Control Dep"];
22 -> 34 [label="Control Dep"];
22 -> 41 [label="Control Dep"];
22 -> 40 [label="Control Dep"];
22 -> 39 [label="Control Dep"];
27 -> 36 [label="Data Dep"];
28 -> 26 [label="AST"];
28 -> 27 [label="AST"];
28 -> 25 [label="AST"];
28 -> 91 [label="Action"];
29 -> 24 [label="AST"];
29 -> 28 [label="AST"];
29 -> 89 [label="Action"];
31 -> 29 [label="AST"];
31 -> 30 [label="AST"];
32 -> 36 [label="Data Dep"];
33 -> 31 [label="AST"];
33 -> 32 [label="AST"];
35 -> 33 [label="AST"];
35 -> 34 [label="AST"];
36 -> 39 [label="Define-Use"];
37 -> 36 [label="AST"];
37 -> 23 [label="AST"];
37 -> 35 [label="AST"];
40 -> 39 [label="AST"];
41 -> 40 [label="AST"];
42 -> 37 [label="AST"];
42 -> 41 [label="AST"];
43 -> 22 [label="AST"];
43 -> 42 [label="AST"];
50 -> 45 [label="AST"];
50 -> 46 [label="AST"];
50 -> 44 [label="AST"];
50 -> 47 [label="AST"];
50 -> 48 [label="AST"];
50 -> 49 [label="AST"];
51 -> 50 [label="AST"];
52 -> 56 [label="Define-Use"];
54 -> 52 [label="AST"];
54 -> 53 [label="AST"];
54 -> 59 [label="Control Dep"];
54 -> 58 [label="Control Dep"];
54 -> 57 [label="Control Dep"];
54 -> 56 [label="Control Dep"];
57 -> 56 [label="AST"];
58 -> 57 [label="AST"];
59 -> 58 [label="AST"];
60 -> 54 [label="AST"];
60 -> 59 [label="AST"];
61 -> 67 [label="Define-Use"];
63 -> 61 [label="AST"];
63 -> 62 [label="AST"];
63 -> 84 [label="Control Dep"];
63 -> 70 [label="Control Dep"];
63 -> 68 [label="Control Dep"];
63 -> 65 [label="Control Dep"];
63 -> 67 [label="Control Dep"];
63 -> 79 [label="Control Dep"];
63 -> 74 [label="Control Dep"];
63 -> 71 [label="Control Dep"];
63 -> 72 [label="Control Dep"];
63 -> 83 [label="Control Dep"];
63 -> 82 [label="Control Dep"];
63 -> 81 [label="Control Dep"];
67 -> 69 [label="Data Dep"];
68 -> 66 [label="AST"];
68 -> 67 [label="AST"];
68 -> 65 [label="AST"];
69 -> 71 [label="Define-Use"];
69 -> 75 [label="Define-Use"];
69 -> 81 [label="Define-Use"];
70 -> 69 [label="AST"];
70 -> 64 [label="AST"];
70 -> 68 [label="AST"];
72 -> 73 [label="AST"];
74 -> 71 [label="AST"];
74 -> 72 [label="AST"];
74 -> 78 [label="Control Dep"];
74 -> 77 [label="Control Dep"];
74 -> 75 [label="Control Dep"];
75 -> 76 [label="AST"];
77 -> 75 [label="AST"];
78 -> 77 [label="AST"];
79 -> 74 [label="AST"];
79 -> 78 [label="AST"];
82 -> 81 [label="AST"];
83 -> 82 [label="AST"];
84 -> 70 [label="AST"];
84 -> 79 [label="AST"];
84 -> 83 [label="AST"];
85 -> 63 [label="AST"];
85 -> 84 [label="AST"];
86 -> 51 [label="AST"];
86 -> 60 [label="AST"];
86 -> 85 [label="AST"];
87 -> 19 [label="AST"];
87 -> 43 [label="AST"];
87 -> 86 [label="AST"];
88 -> 1 [label="AST"];
88 -> 0 [label="AST"];
88 -> 2 [label="AST"];
88 -> 4 [label="AST"];
88 -> 6 [label="AST"];
88 -> 8 [label="AST"];
88 -> 10 [label="AST"];
88 -> 87 [label="AST"];
89 -> 90 [label="Action"];
91 -> 90 [label="Action"];
}