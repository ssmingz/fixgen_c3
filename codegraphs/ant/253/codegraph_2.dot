digraph "testNonImmediateBasedir#?" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@testNonImmediateBasedir" shape=ellipse]
2 [label="3:CtTypeReferenceImpl@FileResource" shape=ellipse]
3 [label="3:CtTypeReferenceImpl@FileResource" shape=ellipse]
4 [label="3:CtConstructorCallImpl@new FileResource()" shape=ellipse]
5 [label="3:CtVirtualElement@f" shape=ellipse]
6 [label="3:CtLocalVariableImpl@FileResource f = new FileResource()" shape=ellipse]
7 [label="4:CtExecutableReferenceImpl@setBaseDir()" shape=ellipse]
8 [label="4:CtVirtualElement@setBaseDir" shape=ellipse]
9 [label="4:CtVariableReadImpl@f" shape=ellipse]
10 [label="4:CtFieldReadImpl@root" shape=ellipse]
11 [label="4:CtInvocationImpl@f.setBaseDir(root)" shape=ellipse]
12 [label="5:CtExecutableReferenceImpl@setName(java.lang.String)" shape=ellipse]
13 [label="5:CtVirtualElement@setName" shape=ellipse]
14 [label="5:CtVariableReadImpl@f" shape=ellipse]
15 [label="5:CtLiteralImpl@\"foo/bar\"" shape=ellipse]
16 [label="5:CtInvocationImpl@f.setName(\"foo/bar\")" shape=ellipse]
17 [label="6:CtExecutableReferenceImpl@assertEquals(File,<unknown>)" shape=ellipse]
18 [label="6:CtVirtualElement@assertEquals" shape=ellipse]
19 [label="6:CtTypeReferenceImpl@File" shape=ellipse]
20 [label="6:CtFieldReadImpl@root" shape=ellipse]
21 [label="6:CtLiteralImpl@\"foo/bar\"" shape=ellipse]
22 [label="6:CtConstructorCallImpl@new File(root, \"foo/bar\")" shape=ellipse]
23 [label="6:CtExecutableReferenceImpl@getFile()" shape=ellipse]
24 [label="6:CtVirtualElement@getFile" shape=ellipse]
25 [label="6:CtVariableReadImpl@f" shape=ellipse]
26 [label="6:CtInvocationImpl@f.getFile()" shape=ellipse]
27 [label="6:CtInvocationImpl@assertEquals(new File(root, \"foo/bar\"), f.getFile())" shape=ellipse]
28 [label="7:CtExecutableReferenceImpl@assertEquals(<unknown>,<unknown>)" shape=ellipse]
29 [label="7:CtVirtualElement@assertEquals" shape=ellipse]
30 [label="7:CtFieldReadImpl@root" shape=ellipse]
31 [label="7:CtExecutableReferenceImpl@getBaseDir()" shape=ellipse]
32 [label="7:CtVirtualElement@getBaseDir" shape=ellipse]
33 [label="7:CtVariableReadImpl@f" shape=ellipse]
34 [label="7:CtInvocationImpl@f.getBaseDir()" shape=ellipse]
35 [label="7:CtInvocationImpl@assertEquals(root, f.getBaseDir())" shape=ellipse]
36 [label="8:CtExecutableReferenceImpl@assertEquals(java.lang.String,<unknown>)" shape=ellipse]
37 [label="8:CtVirtualElement@assertEquals" shape=ellipse]
38 [label="8:CtLiteralImpl@\"foo/bar\"" shape=ellipse]
39 [label="8:CtExecutableReferenceImpl@replace(char)" shape=ellipse]
40 [label="8:CtVirtualElement@replace" shape=ellipse]
41 [label="8:CtExecutableReferenceImpl@getName()" shape=ellipse]
42 [label="8:CtVirtualElement@getName" shape=ellipse]
43 [label="8:CtVariableReadImpl@f" shape=ellipse]
44 [label="8:CtInvocationImpl@f.getName()" shape=ellipse]
45 [label="8:CtLiteralImpl@'/'" shape=ellipse]
46 [label="8:CtTypeAccessImpl@separatorChar" shape=ellipse]
47 [label="8:CtInvocationImpl@f.getName().replace('/', separatorChar)" shape=ellipse]
48 [label="8:CtInvocationImpl@assertEquals(\"foo/bar\", f.getName().replace('/', separatorChar))" shape=ellipse]
49 [label="2:CtBlockImpl@\{
    FileResource f = new FileResource();
    f.setBaseDir(root);
    f.setName(\"foo/bar\");
    assertEquals(new File(root, \"foo/bar\"), f.getFile());
    assertEquals(root, f.getBaseDir());
    assertEquals(\"foo/bar\", f.getName().replace('/', separatorChar));
\}" shape=ellipse]
50 [label="2:CtMethodImpl@public void testNonImmediateBasedir() \{
    FileResource f = new FileResource();
    f.setBaseDir(root);
    f.setName(\"foo/bar\");
    assertEquals(new File(root, \"foo/bar\"), f.getFile());
    assertEquals(root, f.getBaseDir());
    assertEquals(\"foo/bar\", f.getName().replace('/', separatorChar));
\}" shape=ellipse]
51 [label="8:Delete@DELETE" shape=ellipse]
52 [label="8:Insert@INSERT" shape=ellipse]
53 [label="8:CtTypeAccessImpl@separatorChar" shape=ellipse]
5 -> 9 [label="Define-Use"];
5 -> 14 [label="Define-Use"];
5 -> 25 [label="Define-Use"];
5 -> 33 [label="Define-Use"];
5 -> 43 [label="Define-Use"];
6 -> 5 [label="AST"];
6 -> 2 [label="AST"];
6 -> 4 [label="AST"];
11 -> 8 [label="AST"];
11 -> 9 [label="AST"];
11 -> 7 [label="AST"];
11 -> 10 [label="AST"];
16 -> 13 [label="AST"];
16 -> 14 [label="AST"];
16 -> 12 [label="AST"];
16 -> 15 [label="AST"];
22 -> 20 [label="AST"];
22 -> 21 [label="AST"];
26 -> 24 [label="AST"];
26 -> 25 [label="AST"];
26 -> 23 [label="AST"];
27 -> 18 [label="AST"];
27 -> 17 [label="AST"];
27 -> 22 [label="AST"];
27 -> 26 [label="AST"];
34 -> 32 [label="AST"];
34 -> 33 [label="AST"];
34 -> 31 [label="AST"];
35 -> 29 [label="AST"];
35 -> 28 [label="AST"];
35 -> 30 [label="AST"];
35 -> 34 [label="AST"];
44 -> 42 [label="AST"];
44 -> 43 [label="AST"];
44 -> 41 [label="AST"];
46 -> 51 [label="Action"];
47 -> 40 [label="AST"];
47 -> 44 [label="AST"];
47 -> 39 [label="AST"];
47 -> 45 [label="AST"];
47 -> 46 [label="AST"];
47 -> 52 [label="Action"];
48 -> 37 [label="AST"];
48 -> 36 [label="AST"];
48 -> 38 [label="AST"];
48 -> 47 [label="AST"];
49 -> 6 [label="AST"];
49 -> 11 [label="AST"];
49 -> 16 [label="AST"];
49 -> 27 [label="AST"];
49 -> 35 [label="AST"];
49 -> 48 [label="AST"];
50 -> 1 [label="AST"];
50 -> 0 [label="AST"];
50 -> 49 [label="AST"];
52 -> 53 [label="Action"];
}