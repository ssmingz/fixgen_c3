digraph "Pattern" {
0 [label="execute#?#6:UPDATE
doReplace#?,File,int#22:UPDATE" shape=ellipse]
1 [label="execute#?#6:getContext().warn(file)
doReplace#?,File,int#22:getContext().warn(message)" shape=ellipse]
2 [label="execute#?#4:i < files.length" shape=ellipse]
3 [label="execute#?#4:for (int i = 0; i < files.length; i++) \{
    final String file = files[i];
    getContext().warn(file);
\}" shape=ellipse]
4 [label="execute#?#-1:boolean
doReplace#?,File,int#22:getContext()" shape=ellipse]
5 [label="execute#?#4:i
doReplace#?,File,int#12:PrintWriter pw = new PrintWriter(bw)" shape=ellipse]
6 [label="execute#?#4:files.length
doReplace#?,File,int#13:boolean changes = false" shape=ellipse]
7 [label="execute#?#4:\{
    final String file = files[i];
    getContext().warn(file);
\}" shape=ellipse]
8 [label="execute#?#5:final String file = files[i]
doReplace#?,File,int#8:r = new FileReader(f)" shape=ellipse]
9 [label="execute#?#5:files[i]" shape=ellipse]
10 [label="execute#?#5:files
doReplace#?,File,int#14:message" shape=ellipse]
11 [label="execute#?#5:i
doReplace#?,File,int#11:BufferedWriter bw = new BufferedWriter(w)" shape=ellipse]
12 [label="execute#?#6:warn(java.lang.String)
doReplace#?,File,int#22:warn(java.lang.String)" shape=ellipse]
13 [label="execute#?#6:getContext()" shape=ellipse]
14 [label="execute#?#6:getContext()" shape=ellipse]
15 [label="execute#?#-1:
doReplace#?,File,int#-1:" shape=ellipse]
16 [label="execute#?#-1:PlaceHold" shape=ellipse]
17 [label="execute#?#6:file" shape=ellipse]
18 [label="execute#?#6:warn
doReplace#?,File,int#22:warn" shape=ellipse]
19 [label="execute#?#6:getContext().info(file)
doReplace#?,File,int#22:getContext().info(message)" shape=ellipse]
20 [label="doReplace#?,File,int#55:if (changes) \{
    f.delete();
    temp.renameTo(f);
\} else \{
    temp.delete();
\}" shape=ellipse]
21 [label="doReplace#?,File,int#-1:String" shape=ellipse]
22 [label="doReplace#?,File,int#7:\{
    r = new FileReader(f);
    w = new FileWriter(temp);
    BufferedReader br = new BufferedReader(r);
    BufferedWriter bw = new BufferedWriter(w);
    PrintWriter pw = new PrintWriter(bw);
    boolean changes = false;
    final String message = ((((((((\"Replacing pattern '\" + regex.getPattern()) + \"' with '\") + subs.getExpression()) + \"' in '\") + f.getPath()) + \"'\") + (byline ? \" by line\" : \"\")) + (flags.length() > 0 ? (\" with flags: '\" + flags) + \"'\" : \"\")) + \".\";
    getContext().warn(message);
    if (byline) \{
        LineNumberReader lnr = new LineNumberReader(br);
        String line = null;
        while ((line = lnr.readLine()) != null) \{
            String res = doReplace(regex, subs, line, options);
            if (!res.equals(line)) \{
                changes = true;
            \}
            pw.println(res);
        \} 
        pw.flush();
    \} else \{
        int flen = ((int) (f.length()));
        char tmpBuf[] = new char[flen];
        int numread = 0;
        int totread = 0;
        while ((numread != (-1)) && (totread < flen)) \{
            numread = br.read(tmpBuf, totread, flen);
            totread += numread;
        \} 
        String buf = new String(tmpBuf);
        String res = doReplace(regex, subs, buf, options);
        if (!res.equals(buf)) \{
            changes = true;
        \}
        pw.println(res);
        pw.flush();
    \}
    r.close();
    r = null;
    w.close();
    w = null;
    if (changes) \{
        f.delete();
        temp.renameTo(f);
    \} else \{
        temp.delete();
    \}
\}" shape=ellipse]
23 [label="doReplace#?,File,int#53:w.close()" shape=ellipse]
24 [label="doReplace#?,File,int#51:r.close()" shape=ellipse]
25 [label="doReplace#?,File,int#22:getContext()" shape=ellipse]
26 [label="doReplace#?,File,int#7:try \{
    r = new FileReader(f);
    w = new FileWriter(temp);
    BufferedReader br = new BufferedReader(r);
    BufferedWriter bw = new BufferedWriter(w);
    PrintWriter pw = new PrintWriter(bw);
    boolean changes = false;
    final String message = ((((((((\"Replacing pattern '\" + regex.getPattern()) + \"' with '\") + subs.getExpression()) + \"' in '\") + f.getPath()) + \"'\") + (byline ? \" by line\" : \"\")) + (flags.length() > 0 ? (\" with flags: '\" + flags) + \"'\" : \"\")) + \".\";
    getContext().warn(message);
    if (byline) \{
        LineNumberReader lnr = new LineNumberReader(br);
        String line = null;
        while ((line = lnr.readLine()) != null) \{
            String res = doReplace(regex, subs, line, options);
            if (!res.equals(line)) \{
                changes = true;
            \}
            pw.println(res);
        \} 
        pw.flush();
    \} else \{
        int flen = ((int) (f.length()));
        char tmpBuf[] = new char[flen];
        int numread = 0;
        int totread = 0;
        while ((numread != (-1)) && (totread < flen)) \{
            numread = br.read(tmpBuf, totread, flen);
            totread += numread;
        \} 
        String buf = new String(tmpBuf);
        String res = doReplace(regex, subs, buf, options);
        if (!res.equals(buf)) \{
            changes = true;
        \}
        pw.println(res);
        pw.flush();
    \}
    r.close();
    r = null;
    w.close();
    w = null;
    if (changes) \{
        f.delete();
        temp.renameTo(f);
    \} else \{
        temp.delete();
    \}
\} finally \{
    try \{
        if (r != null) \{
            r.close();
        \}
    \} catch (Exception e) \{
    \}
    try \{
        if (w != null) \{
            r.close();
        \}
    \} catch (Exception e) \{
    \}
\}" shape=ellipse]
27 [label="doReplace#?,File,int#52:r = null" shape=ellipse]
28 [label="doReplace#?,File,int#23:if (byline) \{
    LineNumberReader lnr = new LineNumberReader(br);
    String line = null;
    while ((line = lnr.readLine()) != null) \{
        String res = doReplace(regex, subs, line, options);
        if (!res.equals(line)) \{
            changes = true;
        \}
        pw.println(res);
    \} 
    pw.flush();
\} else \{
    int flen = ((int) (f.length()));
    char tmpBuf[] = new char[flen];
    int numread = 0;
    int totread = 0;
    while ((numread != (-1)) && (totread < flen)) \{
        numread = br.read(tmpBuf, totread, flen);
        totread += numread;
    \} 
    String buf = new String(tmpBuf);
    String res = doReplace(regex, subs, buf, options);
    if (!res.equals(buf)) \{
        changes = true;
    \}
    pw.println(res);
    pw.flush();
\}" shape=ellipse]
29 [label="doReplace#?,File,int#54:w = null" shape=ellipse]
30 [label="doReplace#?,File,int#10:BufferedReader br = new BufferedReader(r)" shape=ellipse]
31 [label="doReplace#?,File,int#22:getContext" shape=ellipse]
32 [label="doReplace#?,File,int#-1:message" shape=ellipse]
33 [label="doReplace#?,File,int#9:w = new FileWriter(temp)" shape=ellipse]
34 [label="doReplace#?,File,int#14:final String message = ((((((((\"Replacing pattern '\" + regex.getPattern()) + \"' with '\") + subs.getExpression()) + \"' in '\") + f.getPath()) + \"'\") + (byline ? \" by line\" : \"\")) + (flags.length() > 0 ? (\" with flags: '\" + flags) + \"'\" : \"\")) + \".\"" shape=ellipse]
35 [label="doReplace#?,File,int#22:message" shape=ellipse]
0 -> 19 [label="Action:2"];
1 -> 0 [label="Action:2"];
1 -> 18 [label="AST:2"];
1 -> 13 [label="AST:1"];
1 -> 12 [label="AST:2"];
1 -> 17 [label="AST:1"];
1 -> 25 [label="AST:1"];
1 -> 35 [label="AST:1"];
2 -> 1 [label="Control Dep:1"];
2 -> 4 [label="AST:1"];
2 -> 5 [label="AST:1"];
2 -> 6 [label="AST:1"];
2 -> 7 [label="Control Dep:1"];
2 -> 8 [label="Control Dep:1"];
2 -> 9 [label="Control Dep:1"];
2 -> 10 [label="Control Dep:1"];
2 -> 11 [label="Control Dep:1"];
2 -> 12 [label="Control Dep:1"];
2 -> 13 [label="Control Dep:1"];
2 -> 14 [label="Control Dep:1"];
2 -> 15 [label="Control Dep:1"];
2 -> 16 [label="Control Dep:1"];
2 -> 17 [label="Control Dep:1"];
3 -> 2 [label="AST:1"];
3 -> 7 [label="AST:1"];
7 -> 1 [label="AST:1"];
7 -> 8 [label="AST:1"];
8 -> 9 [label="AST:1"];
9 -> 10 [label="AST:1"];
9 -> 11 [label="AST:1"];
10 -> 35 [label="Define Use:1"];
12 -> 21 [label="AST:1"];
13 -> 15 [label="AST:1"];
13 -> 14 [label="AST:1"];
15 -> 16 [label="AST:1"];
22 -> 20 [label="AST:1"];
22 -> 8 [label="AST:1"];
22 -> 33 [label="AST:1"];
22 -> 30 [label="AST:1"];
22 -> 11 [label="AST:1"];
22 -> 5 [label="AST:1"];
22 -> 6 [label="AST:1"];
22 -> 34 [label="AST:1"];
22 -> 1 [label="AST:1"];
22 -> 28 [label="AST:1"];
22 -> 24 [label="AST:1"];
22 -> 27 [label="AST:1"];
22 -> 23 [label="AST:1"];
22 -> 29 [label="AST:1"];
25 -> 31 [label="AST:1"];
25 -> 15 [label="AST:1"];
25 -> 4 [label="AST:1"];
26 -> 22 [label="AST:1"];
34 -> 10 [label="AST:1"];
35 -> 32 [label="AST:1"];
}