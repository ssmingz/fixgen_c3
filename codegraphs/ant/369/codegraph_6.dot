digraph "execute#?" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@execute" shape=ellipse]
2 [label="2:CtTypeReferenceImpl@BuildException" shape=ellipse]
3 [label="3:CtTypeReferenceImpl@File" shape=ellipse]
4 [label="3:CtFieldReadImpl@baseDir" shape=ellipse]
5 [label="3:CtVirtualElement@savedBaseDir" shape=ellipse]
6 [label="3:CtLocalVariableImpl@File savedBaseDir = baseDir" shape=ellipse]
7 [label="4:CtTypeReferenceImpl@DirectoryScanner" shape=ellipse]
8 [label="4:CtVirtualElement@scanner" shape=ellipse]
9 [label="4:CtLocalVariableImpl@DirectoryScanner scanner" shape=ellipse]
10 [label="5:CtVirtualElement@String[]" shape=ellipse]
11 [label="5:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
12 [label="5:CtVirtualElement@list" shape=ellipse]
13 [label="5:CtLocalVariableImpl@String[] list" shape=ellipse]
14 [label="6:CtVirtualElement@String[]" shape=ellipse]
15 [label="6:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
16 [label="6:CtVirtualElement@dirs" shape=ellipse]
17 [label="6:CtLocalVariableImpl@String[] dirs" shape=ellipse]
18 [label="7:CtFieldReadImpl@xslFile" shape=ellipse]
19 [label="7:CtLiteralImpl@null" shape=ellipse]
20 [label="7:CtBinaryOperatorImpl@xslFile == null" shape=ellipse]
21 [label="8:CtTypeReferenceImpl@BuildException" shape=ellipse]
22 [label="8:CtLiteralImpl@\"no stylesheet specified\"" shape=ellipse]
23 [label="8:CtFieldReadImpl@location" shape=ellipse]
24 [label="8:CtConstructorCallImpl@new BuildException(\"no stylesheet specified\", location)" shape=ellipse]
25 [label="8:CtThrowImpl@throw new BuildException(\"no stylesheet specified\", location)" shape=ellipse]
26 [label="7:CtBlockImpl@\{
    throw new BuildException(\"no stylesheet specified\", location);
\}" shape=ellipse]
27 [label="7:CtIfImpl@if (xslFile == null) \{
    throw new BuildException(\"no stylesheet specified\", location);
\}" shape=ellipse]
28 [label="11:CtFieldReadImpl@baseDir" shape=ellipse]
29 [label="11:CtLiteralImpl@null" shape=ellipse]
30 [label="11:CtBinaryOperatorImpl@baseDir == null" shape=ellipse]
31 [label="12:CtFieldWriteImpl@baseDir" shape=ellipse]
32 [label="12:CtExecutableReferenceImpl@resolveFile(java.lang.String)" shape=ellipse]
33 [label="12:CtVirtualElement@resolveFile" shape=ellipse]
34 [label="12:CtExecutableReferenceImpl@getProject()" shape=ellipse]
35 [label="12:CtVirtualElement@getProject" shape=ellipse]
36 [label="12:CtInvocationImpl@getProject()" shape=ellipse]
37 [label="12:CtLiteralImpl@\".\"" shape=ellipse]
38 [label="12:CtInvocationImpl@getProject().resolveFile(\".\")" shape=ellipse]
39 [label="12:CtAssignmentImpl@baseDir = getProject().resolveFile(\".\")" shape=ellipse]
40 [label="11:CtBlockImpl@\{
    baseDir = getProject().resolveFile(\".\");
\}" shape=ellipse]
41 [label="11:CtIfImpl@if (baseDir == null) \{
    baseDir = getProject().resolveFile(\".\");
\}" shape=ellipse]
42 [label="14:CtFieldWriteImpl@liaison" shape=ellipse]
43 [label="14:CtExecutableReferenceImpl@getLiaison()" shape=ellipse]
44 [label="14:CtVirtualElement@getLiaison" shape=ellipse]
45 [label="14:CtInvocationImpl@getLiaison()" shape=ellipse]
46 [label="14:CtAssignmentImpl@liaison = getLiaison()" shape=ellipse]
47 [label="15:CtFieldReadImpl@liaison" shape=ellipse]
48 [label="15:CtTypeAccessImpl@XSLTLoggerAware" shape=ellipse]
49 [label="15:CtTypeReferenceImpl@XSLTLoggerAware" shape=ellipse]
50 [label="15:CtBinaryOperatorImpl@liaison instanceof XSLTLoggerAware" shape=ellipse]
51 [label="16:CtExecutableReferenceImpl@setLogger(PlaceHold)" shape=ellipse]
52 [label="16:CtVirtualElement@setLogger" shape=ellipse]
53 [label="16:CtFieldReadImpl@((XSLTLoggerAware) (liaison))" shape=ellipse]
54 [label="16:CtTypeReferenceImpl@XSLTLoggerAware" shape=ellipse]
55 [label="16:CtThisAccessImpl@this" shape=ellipse]
56 [label="16:CtInvocationImpl@((XSLTLoggerAware) (liaison)).setLogger(this)" shape=ellipse]
57 [label="15:CtBlockImpl@\{
    ((XSLTLoggerAware) (liaison)).setLogger(this);
\}" shape=ellipse]
58 [label="15:CtIfImpl@if (liaison instanceof XSLTLoggerAware) \{
    ((XSLTLoggerAware) (liaison)).setLogger(this);
\}" shape=ellipse]
59 [label="18:CtExecutableReferenceImpl@log(<unknown>,<unknown>)" shape=ellipse]
60 [label="18:CtVirtualElement@log" shape=ellipse]
61 [label="18:CtLiteralImpl@\"Using \"" shape=ellipse]
62 [label="18:CtExecutableReferenceImpl@toString()" shape=ellipse]
63 [label="18:CtVirtualElement@toString" shape=ellipse]
64 [label="18:CtExecutableReferenceImpl@getClass()" shape=ellipse]
65 [label="18:CtVirtualElement@getClass" shape=ellipse]
66 [label="18:CtFieldReadImpl@liaison" shape=ellipse]
67 [label="18:CtInvocationImpl@liaison.getClass()" shape=ellipse]
68 [label="18:CtInvocationImpl@liaison.getClass().toString()" shape=ellipse]
69 [label="18:CtBinaryOperatorImpl@\"Using \" + liaison.getClass().toString()" shape=ellipse]
70 [label="18:CtTypeAccessImpl@MSG_VERBOSE" shape=ellipse]
71 [label="18:CtInvocationImpl@log(\"Using \" + liaison.getClass().toString(), MSG_VERBOSE)" shape=ellipse]
72 [label="19:CtTypeReferenceImpl@File" shape=ellipse]
73 [label="19:CtExecutableReferenceImpl@resolveFile()" shape=ellipse]
74 [label="19:CtVirtualElement@resolveFile" shape=ellipse]
75 [label="19:CtExecutableReferenceImpl@getProject()" shape=ellipse]
76 [label="19:CtVirtualElement@getProject" shape=ellipse]
77 [label="19:CtInvocationImpl@getProject()" shape=ellipse]
78 [label="19:CtFieldReadImpl@xslFile" shape=ellipse]
79 [label="19:CtInvocationImpl@getProject().resolveFile(xslFile)" shape=ellipse]
80 [label="19:CtVirtualElement@stylesheet" shape=ellipse]
81 [label="19:CtLocalVariableImpl@File stylesheet = getProject().resolveFile(xslFile)" shape=ellipse]
82 [label="20:CtExecutableReferenceImpl@exists()" shape=ellipse]
83 [label="20:CtVirtualElement@exists" shape=ellipse]
84 [label="20:CtVariableReadImpl@stylesheet" shape=ellipse]
85 [label="20:CtInvocationImpl@stylesheet.exists()" shape=ellipse]
86 [label="20:CtUnaryOperatorImpl@!stylesheet.exists()" shape=ellipse]
87 [label="21:CtVariableWriteImpl@stylesheet" shape=ellipse]
88 [label="21:CtExecutableReferenceImpl@resolveFile()" shape=ellipse]
89 [label="21:CtVirtualElement@resolveFile" shape=ellipse]
90 [label="21:CtFieldReadImpl@fileUtils" shape=ellipse]
91 [label="21:CtFieldReadImpl@baseDir" shape=ellipse]
92 [label="21:CtFieldReadImpl@xslFile" shape=ellipse]
93 [label="21:CtInvocationImpl@fileUtils.resolveFile(baseDir, xslFile)" shape=ellipse]
94 [label="21:CtAssignmentImpl@stylesheet = fileUtils.resolveFile(baseDir, xslFile)" shape=ellipse]
95 [label="22:CtExecutableReferenceImpl@exists()" shape=ellipse]
96 [label="22:CtVirtualElement@exists" shape=ellipse]
97 [label="22:CtVariableReadImpl@stylesheet" shape=ellipse]
98 [label="22:CtInvocationImpl@stylesheet.exists()" shape=ellipse]
99 [label="23:CtExecutableReferenceImpl@log(java.lang.String)" shape=ellipse]
100 [label="23:CtVirtualElement@log" shape=ellipse]
101 [label="23:CtLiteralImpl@\"DEPRECATED - the style attribute should be relative \"" shape=ellipse]
102 [label="23:CtLiteralImpl@\"to the project\'s\"" shape=ellipse]
103 [label="23:CtBinaryOperatorImpl@\"DEPRECATED - the style attribute should be relative \" + \"to the project\'s\"" shape=ellipse]
104 [label="23:CtInvocationImpl@log(\"DEPRECATED - the style attribute should be relative \" + \"to the project\'s\")" shape=ellipse]
105 [label="24:CtExecutableReferenceImpl@log(java.lang.String)" shape=ellipse]
106 [label="24:CtVirtualElement@log" shape=ellipse]
107 [label="24:CtLiteralImpl@\"             basedir, not the tasks\'s basedir.\"" shape=ellipse]
108 [label="24:CtInvocationImpl@log(\"             basedir, not the tasks\'s basedir.\")" shape=ellipse]
109 [label="22:CtBlockImpl@\{
    log(\"DEPRECATED - the style attribute should be relative \" + \"to the project\'s\");
    log(\"             basedir, not the tasks\'s basedir.\");
\}" shape=ellipse]
110 [label="22:CtIfImpl@if (stylesheet.exists()) \{
    log(\"DEPRECATED - the style attribute should be relative \" + \"to the project\'s\");
    log(\"             basedir, not the tasks\'s basedir.\");
\}" shape=ellipse]
111 [label="20:CtBlockImpl@\{
    stylesheet = fileUtils.resolveFile(baseDir, xslFile);
    if (stylesheet.exists()) \{
        log(\"DEPRECATED - the style attribute should be relative \" + \"to the project\'s\");
        log(\"             basedir, not the tasks\'s basedir.\");
    \}
\}" shape=ellipse]
112 [label="20:CtIfImpl@if (!stylesheet.exists()) \{
    stylesheet = fileUtils.resolveFile(baseDir, xslFile);
    if (stylesheet.exists()) \{
        log(\"DEPRECATED - the style attribute should be relative \" + \"to the project\'s\");
        log(\"             basedir, not the tasks\'s basedir.\");
    \}
\}" shape=ellipse]
113 [label="27:CtFieldReadImpl@inFile" shape=ellipse]
114 [label="27:CtLiteralImpl@null" shape=ellipse]
115 [label="27:CtBinaryOperatorImpl@(inFile != null)" shape=ellipse]
116 [label="27:CtFieldReadImpl@outFile" shape=ellipse]
117 [label="27:CtLiteralImpl@null" shape=ellipse]
118 [label="27:CtBinaryOperatorImpl@(outFile != null)" shape=ellipse]
119 [label="27:CtBinaryOperatorImpl@(inFile != null) && (outFile != null)" shape=ellipse]
120 [label="28:CtExecutableReferenceImpl@process(<unknown>,<unknown>,<unknown>)" shape=ellipse]
121 [label="28:CtVirtualElement@process" shape=ellipse]
122 [label="28:CtFieldReadImpl@inFile" shape=ellipse]
123 [label="28:CtFieldReadImpl@outFile" shape=ellipse]
124 [label="28:CtVariableReadImpl@stylesheet" shape=ellipse]
125 [label="28:CtInvocationImpl@process(inFile, outFile, stylesheet)" shape=ellipse]
126 [label="29:CtReturnImpl@return" shape=ellipse]
127 [label="27:CtBlockImpl@\{
    process(inFile, outFile, stylesheet);
    return;
\}" shape=ellipse]
128 [label="27:CtIfImpl@if ((inFile != null) && (outFile != null)) \{
    process(inFile, outFile, stylesheet);
    return;
\}" shape=ellipse]
129 [label="31:CtFieldReadImpl@destDir" shape=ellipse]
130 [label="31:CtLiteralImpl@null" shape=ellipse]
131 [label="31:CtBinaryOperatorImpl@destDir == null" shape=ellipse]
132 [label="32:CtTypeReferenceImpl@String" shape=ellipse]
133 [label="32:CtLiteralImpl@\"destdir attributes must be set!\"" shape=ellipse]
134 [label="32:CtVirtualElement@msg" shape=ellipse]
135 [label="32:CtLocalVariableImpl@String msg = \"destdir attributes must be set!\"" shape=ellipse]
136 [label="33:CtTypeReferenceImpl@BuildException" shape=ellipse]
137 [label="33:CtVariableReadImpl@msg" shape=ellipse]
138 [label="33:CtConstructorCallImpl@new BuildException(msg)" shape=ellipse]
139 [label="33:CtThrowImpl@throw new BuildException(msg)" shape=ellipse]
140 [label="31:CtBlockImpl@\{
    String msg = \"destdir attributes must be set!\";
    throw new BuildException(msg);
\}" shape=ellipse]
141 [label="31:CtIfImpl@if (destDir == null) \{
    String msg = \"destdir attributes must be set!\";
    throw new BuildException(msg);
\}" shape=ellipse]
142 [label="35:CtVariableWriteImpl@scanner" shape=ellipse]
143 [label="35:CtExecutableReferenceImpl@getDirectoryScanner(<unknown>)" shape=ellipse]
144 [label="35:CtVirtualElement@getDirectoryScanner" shape=ellipse]
145 [label="35:CtFieldReadImpl@baseDir" shape=ellipse]
146 [label="35:CtInvocationImpl@getDirectoryScanner(baseDir)" shape=ellipse]
147 [label="35:CtAssignmentImpl@scanner = getDirectoryScanner(baseDir)" shape=ellipse]
148 [label="36:CtExecutableReferenceImpl@log(<unknown>,<unknown>)" shape=ellipse]
149 [label="36:CtVirtualElement@log" shape=ellipse]
150 [label="36:CtLiteralImpl@\"Transforming into \"" shape=ellipse]
151 [label="36:CtFieldReadImpl@destDir" shape=ellipse]
152 [label="36:CtBinaryOperatorImpl@\"Transforming into \" + destDir" shape=ellipse]
153 [label="36:CtTypeAccessImpl@MSG_INFO" shape=ellipse]
154 [label="36:CtInvocationImpl@log(\"Transforming into \" + destDir, MSG_INFO)" shape=ellipse]
155 [label="37:CtVariableWriteImpl@list" shape=ellipse]
156 [label="37:CtExecutableReferenceImpl@getIncludedFiles()" shape=ellipse]
157 [label="37:CtVirtualElement@getIncludedFiles" shape=ellipse]
158 [label="37:CtVariableReadImpl@scanner" shape=ellipse]
159 [label="37:CtInvocationImpl@scanner.getIncludedFiles()" shape=ellipse]
160 [label="37:CtAssignmentImpl@list = scanner.getIncludedFiles()" shape=ellipse]
161 [label="38:CtTypeReferenceImpl@int" shape=ellipse]
162 [label="38:CtLiteralImpl@0" shape=ellipse]
163 [label="38:CtVirtualElement@i" shape=ellipse]
164 [label="38:CtLocalVariableImpl@int i = 0" shape=ellipse]
165 [label="38:CtVariableReadImpl@i" shape=ellipse]
166 [label="38:CtVariableReadImpl@list" shape=ellipse]
167 [label="38:CtLocalVariableReferenceImpl@list" shape=ellipse]
168 [label="38:CtFieldReadImpl@list.length" shape=ellipse]
169 [label="38:CtBinaryOperatorImpl@i < list.length" shape=ellipse]
170 [label="38:CtVariableWriteImpl@i" shape=ellipse]
171 [label="38:CtUnaryOperatorImpl@++i" shape=ellipse]
172 [label="39:CtExecutableReferenceImpl@process(<unknown>,java.lang.String,<unknown>,<unknown>)" shape=ellipse]
173 [label="39:CtVirtualElement@process" shape=ellipse]
174 [label="39:CtFieldReadImpl@baseDir" shape=ellipse]
175 [label="39:CtVariableReadImpl@list" shape=ellipse]
176 [label="39:CtVariableReadImpl@i" shape=ellipse]
177 [label="39:CtArrayReadImpl@list[i]" shape=ellipse]
178 [label="39:CtFieldReadImpl@destDir" shape=ellipse]
179 [label="39:CtVariableReadImpl@stylesheet" shape=ellipse]
180 [label="39:CtInvocationImpl@process(baseDir, list[i], destDir, stylesheet)" shape=ellipse]
181 [label="38:CtBlockImpl@\{
    process(baseDir, list[i], destDir, stylesheet);
\}" shape=ellipse]
182 [label="38:CtForImpl@for (int i = 0; i < list.length; ++i) \{
    process(baseDir, list[i], destDir, stylesheet);
\}" shape=ellipse]
183 [label="41:CtFieldReadImpl@performDirectoryScan" shape=ellipse]
184 [label="42:CtVariableWriteImpl@dirs" shape=ellipse]
185 [label="42:CtExecutableReferenceImpl@getIncludedDirectories()" shape=ellipse]
186 [label="42:CtVirtualElement@getIncludedDirectories" shape=ellipse]
187 [label="42:CtVariableReadImpl@scanner" shape=ellipse]
188 [label="42:CtInvocationImpl@scanner.getIncludedDirectories()" shape=ellipse]
189 [label="42:CtAssignmentImpl@dirs = scanner.getIncludedDirectories()" shape=ellipse]
190 [label="43:CtTypeReferenceImpl@int" shape=ellipse]
191 [label="43:CtLiteralImpl@0" shape=ellipse]
192 [label="43:CtVirtualElement@j" shape=ellipse]
193 [label="43:CtLocalVariableImpl@int j = 0" shape=ellipse]
194 [label="43:CtVariableReadImpl@j" shape=ellipse]
195 [label="43:CtVariableReadImpl@dirs" shape=ellipse]
196 [label="43:CtLocalVariableReferenceImpl@dirs" shape=ellipse]
197 [label="43:CtFieldReadImpl@dirs.length" shape=ellipse]
198 [label="43:CtBinaryOperatorImpl@j < dirs.length" shape=ellipse]
199 [label="43:CtVariableWriteImpl@j" shape=ellipse]
200 [label="43:CtUnaryOperatorImpl@++j" shape=ellipse]
201 [label="44:CtVariableWriteImpl@list" shape=ellipse]
202 [label="44:CtExecutableReferenceImpl@list()" shape=ellipse]
203 [label="44:CtVirtualElement@list" shape=ellipse]
204 [label="44:CtTypeReferenceImpl@File" shape=ellipse]
205 [label="44:CtFieldReadImpl@baseDir" shape=ellipse]
206 [label="44:CtVariableReadImpl@dirs" shape=ellipse]
207 [label="44:CtVariableReadImpl@j" shape=ellipse]
208 [label="44:CtArrayReadImpl@dirs[j]" shape=ellipse]
209 [label="44:CtConstructorCallImpl@new File(baseDir, dirs[j])" shape=ellipse]
210 [label="44:CtInvocationImpl@new File(baseDir, dirs[j]).list()" shape=ellipse]
211 [label="44:CtAssignmentImpl@list = new File(baseDir, dirs[j]).list()" shape=ellipse]
212 [label="45:CtTypeReferenceImpl@int" shape=ellipse]
213 [label="45:CtLiteralImpl@0" shape=ellipse]
214 [label="45:CtVirtualElement@i" shape=ellipse]
215 [label="45:CtLocalVariableImpl@int i = 0" shape=ellipse]
216 [label="45:CtVariableReadImpl@i" shape=ellipse]
217 [label="45:CtVariableReadImpl@list" shape=ellipse]
218 [label="45:CtLocalVariableReferenceImpl@list" shape=ellipse]
219 [label="45:CtFieldReadImpl@list.length" shape=ellipse]
220 [label="45:CtBinaryOperatorImpl@i < list.length" shape=ellipse]
221 [label="45:CtVariableWriteImpl@i" shape=ellipse]
222 [label="45:CtUnaryOperatorImpl@++i" shape=ellipse]
223 [label="46:CtExecutableReferenceImpl@process(<unknown>,java.lang.String,<unknown>,<unknown>)" shape=ellipse]
224 [label="46:CtVirtualElement@process" shape=ellipse]
225 [label="46:CtFieldReadImpl@baseDir" shape=ellipse]
226 [label="46:CtVariableReadImpl@list" shape=ellipse]
227 [label="46:CtVariableReadImpl@i" shape=ellipse]
228 [label="46:CtArrayReadImpl@list[i]" shape=ellipse]
229 [label="46:CtFieldReadImpl@destDir" shape=ellipse]
230 [label="46:CtVariableReadImpl@stylesheet" shape=ellipse]
231 [label="46:CtInvocationImpl@process(baseDir, list[i], destDir, stylesheet)" shape=ellipse]
232 [label="45:CtBlockImpl@\{
    process(baseDir, list[i], destDir, stylesheet);
\}" shape=ellipse]
233 [label="45:CtForImpl@for (int i = 0; i < list.length; ++i) \{
    process(baseDir, list[i], destDir, stylesheet);
\}" shape=ellipse]
234 [label="43:CtBlockImpl@\{
    list = new File(baseDir, dirs[j]).list();
    for (int i = 0; i < list.length; ++i) \{
        process(baseDir, list[i], destDir, stylesheet);
    \}
\}" shape=ellipse]
235 [label="43:CtForImpl@for (int j = 0; j < dirs.length; ++j) \{
    list = new File(baseDir, dirs[j]).list();
    for (int i = 0; i < list.length; ++i) \{
        process(baseDir, list[i], destDir, stylesheet);
    \}
\}" shape=ellipse]
236 [label="41:CtBlockImpl@\{
    dirs = scanner.getIncludedDirectories();
    for (int j = 0; j < dirs.length; ++j) \{
        list = new File(baseDir, dirs[j]).list();
        for (int i = 0; i < list.length; ++i) \{
            process(baseDir, list[i], destDir, stylesheet);
        \}
    \}
\}" shape=ellipse]
237 [label="41:CtIfImpl@if (performDirectoryScan) \{
    dirs = scanner.getIncludedDirectories();
    for (int j = 0; j < dirs.length; ++j) \{
        list = new File(baseDir, dirs[j]).list();
        for (int i = 0; i < list.length; ++i) \{
            process(baseDir, list[i], destDir, stylesheet);
        \}
    \}
\}" shape=ellipse]
238 [label="10:CtBlockImpl@\{
    if (baseDir == null) \{
        baseDir = getProject().resolveFile(\".\");
    \}
    liaison = getLiaison();
    if (liaison instanceof XSLTLoggerAware) \{
        ((XSLTLoggerAware) (liaison)).setLogger(this);
    \}
    log(\"Using \" + liaison.getClass().toString(), MSG_VERBOSE);
    File stylesheet = getProject().resolveFile(xslFile);
    if (!stylesheet.exists()) \{
        stylesheet = fileUtils.resolveFile(baseDir, xslFile);
        if (stylesheet.exists()) \{
            log(\"DEPRECATED - the style attribute should be relative \" + \"to the project\'s\");
            log(\"             basedir, not the tasks\'s basedir.\");
        \}
    \}
    if ((inFile != null) && (outFile != null)) \{
        process(inFile, outFile, stylesheet);
        return;
    \}
    if (destDir == null) \{
        String msg = \"destdir attributes must be set!\";
        throw new BuildException(msg);
    \}
    scanner = getDirectoryScanner(baseDir);
    log(\"Transforming into \" + destDir, MSG_INFO);
    list = scanner.getIncludedFiles();
    for (int i = 0; i < list.length; ++i) \{
        process(baseDir, list[i], destDir, stylesheet);
    \}
    if (performDirectoryScan) \{
        dirs = scanner.getIncludedDirectories();
        for (int j = 0; j < dirs.length; ++j) \{
            list = new File(baseDir, dirs[j]).list();
            for (int i = 0; i < list.length; ++i) \{
                process(baseDir, list[i], destDir, stylesheet);
            \}
        \}
    \}
\}" shape=ellipse]
239 [label="51:CtFieldWriteImpl@liaison" shape=ellipse]
240 [label="51:CtLiteralImpl@null" shape=ellipse]
241 [label="51:CtAssignmentImpl@liaison = null" shape=ellipse]
242 [label="52:CtFieldWriteImpl@stylesheetLoaded" shape=ellipse]
243 [label="52:CtLiteralImpl@false" shape=ellipse]
244 [label="52:CtAssignmentImpl@stylesheetLoaded = false" shape=ellipse]
245 [label="53:CtFieldWriteImpl@baseDir" shape=ellipse]
246 [label="53:CtVariableReadImpl@savedBaseDir" shape=ellipse]
247 [label="53:CtAssignmentImpl@baseDir = savedBaseDir" shape=ellipse]
248 [label="50:CtBlockImpl@\{
    liaison = null;
    stylesheetLoaded = false;
    baseDir = savedBaseDir;
\}" shape=ellipse]
249 [label="10:CtTryImpl@try \{
    if (baseDir == null) \{
        baseDir = getProject().resolveFile(\".\");
    \}
    liaison = getLiaison();
    if (liaison instanceof XSLTLoggerAware) \{
        ((XSLTLoggerAware) (liaison)).setLogger(this);
    \}
    log(\"Using \" + liaison.getClass().toString(), MSG_VERBOSE);
    File stylesheet = getProject().resolveFile(xslFile);
    if (!stylesheet.exists()) \{
        stylesheet = fileUtils.resolveFile(baseDir, xslFile);
        if (stylesheet.exists()) \{
            log(\"DEPRECATED - the style attribute should be relative \" + \"to the project\'s\");
            log(\"             basedir, not the tasks\'s basedir.\");
        \}
    \}
    if ((inFile != null) && (outFile != null)) \{
        process(inFile, outFile, stylesheet);
        return;
    \}
    if (destDir == null) \{
        String msg = \"destdir attributes must be set!\";
        throw new BuildException(msg);
    \}
    scanner = getDirectoryScanner(baseDir);
    log(\"Transforming into \" + destDir, MSG_INFO);
    list = scanner.getIncludedFiles();
    for (int i = 0; i < list.length; ++i) \{
        process(baseDir, list[i], destDir, stylesheet);
    \}
    if (performDirectoryScan) \{
        dirs = scanner.getIncludedDirectories();
        for (int j = 0; j < dirs.length; ++j) \{
            list = new File(baseDir, dirs[j]).list();
            for (int i = 0; i < list.length; ++i) \{
                process(baseDir, list[i], destDir, stylesheet);
            \}
        \}
    \}
\} finally \{
    liaison = null;
    stylesheetLoaded = false;
    baseDir = savedBaseDir;
\}" shape=ellipse]
250 [label="2:CtBlockImpl@\{
    File savedBaseDir = baseDir;
    DirectoryScanner scanner;
    String[] list;
    String[] dirs;
    if (xslFile == null) \{
        throw new BuildException(\"no stylesheet specified\", location);
    \}
    try \{
        if (baseDir == null) \{
            baseDir = getProject().resolveFile(\".\");
        \}
        liaison = getLiaison();
        if (liaison instanceof XSLTLoggerAware) \{
            ((XSLTLoggerAware) (liaison)).setLogger(this);
        \}
        log(\"Using \" + liaison.getClass().toString(), MSG_VERBOSE);
        File stylesheet = getProject().resolveFile(xslFile);
        if (!stylesheet.exists()) \{
            stylesheet = fileUtils.resolveFile(baseDir, xslFile);
            if (stylesheet.exists()) \{
                log(\"DEPRECATED - the style attribute should be relative \" + \"to the project\'s\");
                log(\"             basedir, not the tasks\'s basedir.\");
            \}
        \}
        if ((inFile != null) && (outFile != null)) \{
            process(inFile, outFile, stylesheet);
            return;
        \}
        if (destDir == null) \{
            String msg = \"destdir attributes must be set!\";
            throw new BuildException(msg);
        \}
        scanner = getDirectoryScanner(baseDir);
        log(\"Transforming into \" + destDir, MSG_INFO);
        list = scanner.getIncludedFiles();
        for (int i = 0; i < list.length; ++i) \{
            process(baseDir, list[i], destDir, stylesheet);
        \}
        if (performDirectoryScan) \{
            dirs = scanner.getIncludedDirectories();
            for (int j = 0; j < dirs.length; ++j) \{
                list = new File(baseDir, dirs[j]).list();
                for (int i = 0; i < list.length; ++i) \{
                    process(baseDir, list[i], destDir, stylesheet);
                \}
            \}
        \}
    \} finally \{
        liaison = null;
        stylesheetLoaded = false;
        baseDir = savedBaseDir;
    \}
\}" shape=ellipse]
251 [label="2:CtMethodImpl@public void execute() throws BuildException \{
    File savedBaseDir = baseDir;
    DirectoryScanner scanner;
    String[] list;
    String[] dirs;
    if (xslFile == null) \{
        throw new BuildException(\"no stylesheet specified\", location);
    \}
    try \{
        if (baseDir == null) \{
            baseDir = getProject().resolveFile(\".\");
        \}
        liaison = getLiaison();
        if (liaison instanceof XSLTLoggerAware) \{
            ((XSLTLoggerAware) (liaison)).setLogger(this);
        \}
        log(\"Using \" + liaison.getClass().toString(), MSG_VERBOSE);
        File stylesheet = getProject().resolveFile(xslFile);
        if (!stylesheet.exists()) \{
            stylesheet = fileUtils.resolveFile(baseDir, xslFile);
            if (stylesheet.exists()) \{
                log(\"DEPRECATED - the style attribute should be relative \" + \"to the project\'s\");
                log(\"             basedir, not the tasks\'s basedir.\");
            \}
        \}
        if ((inFile != null) && (outFile != null)) \{
            process(inFile, outFile, stylesheet);
            return;
        \}
        if (destDir == null) \{
            String msg = \"destdir attributes must be set!\";
            throw new BuildException(msg);
        \}
        scanner = getDirectoryScanner(baseDir);
        log(\"Transforming into \" + destDir, MSG_INFO);
        list = scanner.getIncludedFiles();
        for (int i = 0; i < list.length; ++i) \{
            process(baseDir, list[i], destDir, stylesheet);
        \}
        if (performDirectoryScan) \{
            dirs = scanner.getIncludedDirectories();
            for (int j = 0; j < dirs.length; ++j) \{
                list = new File(baseDir, dirs[j]).list();
                for (int i = 0; i < list.length; ++i) \{
                    process(baseDir, list[i], destDir, stylesheet);
                \}
            \}
        \}
    \} finally \{
        liaison = null;
        stylesheetLoaded = false;
        baseDir = savedBaseDir;
    \}
\}" shape=ellipse]
252 [label="8:Delete@DELETE" shape=ellipse]
253 [label="8:Insert@INSERT" shape=ellipse]
254 [label="8:CtInvocationImpl@getLocation()" shape=ellipse]
4 -> 5 [label="Data Dep"];
5 -> 246 [label="Define-Use"];
6 -> 5 [label="AST"];
6 -> 3 [label="AST"];
6 -> 4 [label="AST"];
9 -> 8 [label="AST"];
9 -> 7 [label="AST"];
11 -> 10 [label="AST"];
13 -> 12 [label="AST"];
13 -> 11 [label="AST"];
15 -> 14 [label="AST"];
16 -> 195 [label="Define-Use"];
16 -> 206 [label="Define-Use"];
16 -> 208 [label="Define-Use"];
17 -> 16 [label="AST"];
17 -> 15 [label="AST"];
20 -> 18 [label="AST"];
20 -> 19 [label="AST"];
20 -> 26 [label="Control Dep"];
20 -> 25 [label="Control Dep"];
20 -> 24 [label="Control Dep"];
20 -> 22 [label="Control Dep"];
20 -> 23 [label="Control Dep"];
23 -> 252 [label="Action"];
24 -> 22 [label="AST"];
24 -> 23 [label="AST"];
24 -> 253 [label="Action"];
25 -> 24 [label="AST"];
26 -> 25 [label="AST"];
27 -> 20 [label="AST"];
27 -> 26 [label="AST"];
30 -> 28 [label="AST"];
30 -> 29 [label="AST"];
30 -> 40 [label="Control Dep"];
30 -> 39 [label="Control Dep"];
30 -> 31 [label="Control Dep"];
30 -> 38 [label="Control Dep"];
30 -> 32 [label="Control Dep"];
30 -> 36 [label="Control Dep"];
30 -> 34 [label="Control Dep"];
30 -> 37 [label="Control Dep"];
31 -> 91 [label="Define-Use"];
31 -> 145 [label="Define-Use"];
31 -> 174 [label="Define-Use"];
31 -> 205 [label="Define-Use"];
31 -> 225 [label="Define-Use"];
36 -> 35 [label="AST"];
36 -> 34 [label="AST"];
38 -> 33 [label="AST"];
38 -> 36 [label="AST"];
38 -> 32 [label="AST"];
38 -> 37 [label="AST"];
39 -> 31 [label="AST"];
39 -> 38 [label="AST"];
40 -> 39 [label="AST"];
41 -> 30 [label="AST"];
41 -> 40 [label="AST"];
42 -> 47 [label="Define-Use"];
42 -> 53 [label="Define-Use"];
42 -> 66 [label="Define-Use"];
45 -> 44 [label="AST"];
45 -> 43 [label="AST"];
46 -> 42 [label="AST"];
46 -> 45 [label="AST"];
48 -> 49 [label="AST"];
50 -> 47 [label="AST"];
50 -> 48 [label="AST"];
50 -> 57 [label="Control Dep"];
50 -> 56 [label="Control Dep"];
50 -> 51 [label="Control Dep"];
50 -> 53 [label="Control Dep"];
50 -> 55 [label="Control Dep"];
53 -> 54 [label="AST"];
56 -> 52 [label="AST"];
56 -> 53 [label="AST"];
56 -> 51 [label="AST"];
56 -> 55 [label="AST"];
57 -> 56 [label="AST"];
58 -> 50 [label="AST"];
58 -> 57 [label="AST"];
67 -> 65 [label="AST"];
67 -> 66 [label="AST"];
67 -> 64 [label="AST"];
68 -> 63 [label="AST"];
68 -> 67 [label="AST"];
68 -> 62 [label="AST"];
69 -> 61 [label="AST"];
69 -> 68 [label="AST"];
71 -> 60 [label="AST"];
71 -> 59 [label="AST"];
71 -> 69 [label="AST"];
71 -> 70 [label="AST"];
77 -> 76 [label="AST"];
77 -> 75 [label="AST"];
78 -> 80 [label="Data Dep"];
79 -> 74 [label="AST"];
79 -> 77 [label="AST"];
79 -> 73 [label="AST"];
79 -> 78 [label="AST"];
80 -> 84 [label="Define-Use"];
80 -> 97 [label="Define-Use"];
80 -> 124 [label="Define-Use"];
80 -> 179 [label="Define-Use"];
80 -> 230 [label="Define-Use"];
81 -> 80 [label="AST"];
81 -> 72 [label="AST"];
81 -> 79 [label="AST"];
85 -> 83 [label="AST"];
85 -> 84 [label="AST"];
85 -> 82 [label="AST"];
86 -> 85 [label="AST"];
86 -> 111 [label="Control Dep"];
86 -> 94 [label="Control Dep"];
86 -> 87 [label="Control Dep"];
86 -> 93 [label="Control Dep"];
86 -> 88 [label="Control Dep"];
86 -> 90 [label="Control Dep"];
86 -> 91 [label="Control Dep"];
86 -> 92 [label="Control Dep"];
86 -> 110 [label="Control Dep"];
86 -> 98 [label="Control Dep"];
86 -> 95 [label="Control Dep"];
86 -> 97 [label="Control Dep"];
87 -> 97 [label="Define-Use"];
87 -> 124 [label="Define-Use"];
87 -> 179 [label="Define-Use"];
87 -> 230 [label="Define-Use"];
90 -> 87 [label="Data Dep"];
91 -> 87 [label="Data Dep"];
92 -> 87 [label="Data Dep"];
93 -> 89 [label="AST"];
93 -> 90 [label="AST"];
93 -> 88 [label="AST"];
93 -> 91 [label="AST"];
93 -> 92 [label="AST"];
94 -> 87 [label="AST"];
94 -> 93 [label="AST"];
98 -> 96 [label="AST"];
98 -> 97 [label="AST"];
98 -> 95 [label="AST"];
98 -> 109 [label="Control Dep"];
98 -> 104 [label="Control Dep"];
98 -> 99 [label="Control Dep"];
98 -> 103 [label="Control Dep"];
98 -> 101 [label="Control Dep"];
98 -> 102 [label="Control Dep"];
98 -> 108 [label="Control Dep"];
98 -> 105 [label="Control Dep"];
98 -> 107 [label="Control Dep"];
103 -> 101 [label="AST"];
103 -> 102 [label="AST"];
104 -> 100 [label="AST"];
104 -> 99 [label="AST"];
104 -> 103 [label="AST"];
108 -> 106 [label="AST"];
108 -> 105 [label="AST"];
108 -> 107 [label="AST"];
109 -> 104 [label="AST"];
109 -> 108 [label="AST"];
110 -> 98 [label="AST"];
110 -> 109 [label="AST"];
111 -> 94 [label="AST"];
111 -> 110 [label="AST"];
112 -> 86 [label="AST"];
112 -> 111 [label="AST"];
115 -> 113 [label="AST"];
115 -> 114 [label="AST"];
118 -> 116 [label="AST"];
118 -> 117 [label="AST"];
119 -> 115 [label="AST"];
119 -> 118 [label="AST"];
119 -> 127 [label="Control Dep"];
119 -> 125 [label="Control Dep"];
119 -> 120 [label="Control Dep"];
119 -> 122 [label="Control Dep"];
119 -> 123 [label="Control Dep"];
119 -> 124 [label="Control Dep"];
119 -> 126 [label="Control Dep"];
125 -> 121 [label="AST"];
125 -> 120 [label="AST"];
125 -> 122 [label="AST"];
125 -> 123 [label="AST"];
125 -> 124 [label="AST"];
127 -> 125 [label="AST"];
127 -> 126 [label="AST"];
128 -> 119 [label="AST"];
128 -> 127 [label="AST"];
131 -> 129 [label="AST"];
131 -> 130 [label="AST"];
131 -> 140 [label="Control Dep"];
131 -> 135 [label="Control Dep"];
131 -> 133 [label="Control Dep"];
131 -> 139 [label="Control Dep"];
131 -> 138 [label="Control Dep"];
131 -> 137 [label="Control Dep"];
134 -> 137 [label="Define-Use"];
135 -> 134 [label="AST"];
135 -> 132 [label="AST"];
135 -> 133 [label="AST"];
138 -> 137 [label="AST"];
139 -> 138 [label="AST"];
140 -> 135 [label="AST"];
140 -> 139 [label="AST"];
141 -> 131 [label="AST"];
141 -> 140 [label="AST"];
142 -> 158 [label="Define-Use"];
142 -> 187 [label="Define-Use"];
145 -> 142 [label="Data Dep"];
146 -> 144 [label="AST"];
146 -> 143 [label="AST"];
146 -> 145 [label="AST"];
147 -> 142 [label="AST"];
147 -> 146 [label="AST"];
152 -> 150 [label="AST"];
152 -> 151 [label="AST"];
154 -> 149 [label="AST"];
154 -> 148 [label="AST"];
154 -> 152 [label="AST"];
154 -> 153 [label="AST"];
155 -> 166 [label="Define-Use"];
155 -> 175 [label="Define-Use"];
155 -> 177 [label="Define-Use"];
158 -> 155 [label="Data Dep"];
159 -> 157 [label="AST"];
159 -> 158 [label="AST"];
159 -> 156 [label="AST"];
160 -> 155 [label="AST"];
160 -> 159 [label="AST"];
163 -> 165 [label="Define-Use"];
164 -> 163 [label="AST"];
164 -> 161 [label="AST"];
164 -> 162 [label="AST"];
166 -> 167 [label="AST"];
168 -> 166 [label="AST"];
169 -> 165 [label="AST"];
169 -> 168 [label="AST"];
169 -> 181 [label="Control Dep"];
169 -> 180 [label="Control Dep"];
169 -> 172 [label="Control Dep"];
169 -> 174 [label="Control Dep"];
169 -> 177 [label="Control Dep"];
169 -> 175 [label="Control Dep"];
169 -> 176 [label="Control Dep"];
169 -> 178 [label="Control Dep"];
169 -> 179 [label="Control Dep"];
170 -> 176 [label="Define-Use"];
171 -> 170 [label="AST"];
177 -> 175 [label="AST"];
177 -> 176 [label="AST"];
180 -> 173 [label="AST"];
180 -> 172 [label="AST"];
180 -> 174 [label="AST"];
180 -> 177 [label="AST"];
180 -> 178 [label="AST"];
180 -> 179 [label="AST"];
181 -> 180 [label="AST"];
182 -> 164 [label="AST"];
182 -> 169 [label="AST"];
182 -> 171 [label="AST"];
182 -> 181 [label="AST"];
183 -> 236 [label="Control Dep"];
183 -> 189 [label="Control Dep"];
183 -> 184 [label="Control Dep"];
183 -> 188 [label="Control Dep"];
183 -> 185 [label="Control Dep"];
183 -> 187 [label="Control Dep"];
183 -> 235 [label="Control Dep"];
183 -> 193 [label="Control Dep"];
183 -> 191 [label="Control Dep"];
183 -> 198 [label="Control Dep"];
183 -> 194 [label="Control Dep"];
183 -> 197 [label="Control Dep"];
183 -> 195 [label="Control Dep"];
183 -> 200 [label="Control Dep"];
183 -> 199 [label="Control Dep"];
184 -> 195 [label="Define-Use"];
184 -> 206 [label="Define-Use"];
184 -> 208 [label="Define-Use"];
187 -> 184 [label="Data Dep"];
188 -> 186 [label="AST"];
188 -> 187 [label="AST"];
188 -> 185 [label="AST"];
189 -> 184 [label="AST"];
189 -> 188 [label="AST"];
192 -> 194 [label="Define-Use"];
192 -> 207 [label="Define-Use"];
193 -> 192 [label="AST"];
193 -> 190 [label="AST"];
193 -> 191 [label="AST"];
195 -> 196 [label="AST"];
197 -> 195 [label="AST"];
198 -> 194 [label="AST"];
198 -> 197 [label="AST"];
198 -> 234 [label="Control Dep"];
198 -> 211 [label="Control Dep"];
198 -> 201 [label="Control Dep"];
198 -> 210 [label="Control Dep"];
198 -> 202 [label="Control Dep"];
198 -> 209 [label="Control Dep"];
198 -> 205 [label="Control Dep"];
198 -> 208 [label="Control Dep"];
198 -> 206 [label="Control Dep"];
198 -> 207 [label="Control Dep"];
198 -> 233 [label="Control Dep"];
198 -> 215 [label="Control Dep"];
198 -> 213 [label="Control Dep"];
198 -> 220 [label="Control Dep"];
198 -> 216 [label="Control Dep"];
198 -> 219 [label="Control Dep"];
198 -> 217 [label="Control Dep"];
198 -> 222 [label="Control Dep"];
198 -> 221 [label="Control Dep"];
199 -> 207 [label="Define-Use"];
200 -> 199 [label="AST"];
201 -> 217 [label="Define-Use"];
201 -> 226 [label="Define-Use"];
201 -> 228 [label="Define-Use"];
205 -> 201 [label="Data Dep"];
208 -> 206 [label="AST"];
208 -> 207 [label="AST"];
208 -> 201 [label="Data Dep"];
209 -> 205 [label="AST"];
209 -> 208 [label="AST"];
210 -> 203 [label="AST"];
210 -> 209 [label="AST"];
210 -> 202 [label="AST"];
211 -> 201 [label="AST"];
211 -> 210 [label="AST"];
214 -> 216 [label="Define-Use"];
215 -> 214 [label="AST"];
215 -> 212 [label="AST"];
215 -> 213 [label="AST"];
217 -> 218 [label="AST"];
219 -> 217 [label="AST"];
220 -> 216 [label="AST"];
220 -> 219 [label="AST"];
220 -> 232 [label="Control Dep"];
220 -> 231 [label="Control Dep"];
220 -> 223 [label="Control Dep"];
220 -> 225 [label="Control Dep"];
220 -> 228 [label="Control Dep"];
220 -> 226 [label="Control Dep"];
220 -> 227 [label="Control Dep"];
220 -> 229 [label="Control Dep"];
220 -> 230 [label="Control Dep"];
221 -> 227 [label="Define-Use"];
222 -> 221 [label="AST"];
228 -> 226 [label="AST"];
228 -> 227 [label="AST"];
231 -> 224 [label="AST"];
231 -> 223 [label="AST"];
231 -> 225 [label="AST"];
231 -> 228 [label="AST"];
231 -> 229 [label="AST"];
231 -> 230 [label="AST"];
232 -> 231 [label="AST"];
233 -> 215 [label="AST"];
233 -> 220 [label="AST"];
233 -> 222 [label="AST"];
233 -> 232 [label="AST"];
234 -> 211 [label="AST"];
234 -> 233 [label="AST"];
235 -> 193 [label="AST"];
235 -> 198 [label="AST"];
235 -> 200 [label="AST"];
235 -> 234 [label="AST"];
236 -> 189 [label="AST"];
236 -> 235 [label="AST"];
237 -> 183 [label="AST"];
237 -> 236 [label="AST"];
238 -> 41 [label="AST"];
238 -> 46 [label="AST"];
238 -> 58 [label="AST"];
238 -> 71 [label="AST"];
238 -> 81 [label="AST"];
238 -> 112 [label="AST"];
238 -> 128 [label="AST"];
238 -> 141 [label="AST"];
238 -> 147 [label="AST"];
238 -> 154 [label="AST"];
238 -> 160 [label="AST"];
238 -> 182 [label="AST"];
238 -> 237 [label="AST"];
241 -> 239 [label="AST"];
241 -> 240 [label="AST"];
244 -> 242 [label="AST"];
244 -> 243 [label="AST"];
246 -> 245 [label="Data Dep"];
247 -> 245 [label="AST"];
247 -> 246 [label="AST"];
248 -> 241 [label="AST"];
248 -> 244 [label="AST"];
248 -> 247 [label="AST"];
249 -> 238 [label="AST"];
249 -> 248 [label="AST"];
250 -> 6 [label="AST"];
250 -> 9 [label="AST"];
250 -> 13 [label="AST"];
250 -> 17 [label="AST"];
250 -> 27 [label="AST"];
250 -> 249 [label="AST"];
251 -> 1 [label="AST"];
251 -> 0 [label="AST"];
251 -> 2 [label="AST"];
251 -> 250 [label="AST"];
253 -> 254 [label="Action"];
}