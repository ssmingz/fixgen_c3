digraph "execute#?" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@execute" shape=ellipse]
2 [label="2:CtTypeReferenceImpl@BuildException" shape=ellipse]
3 [label="3:CtFieldReadImpl@property" shape=ellipse]
4 [label="3:CtLiteralImpl@null" shape=ellipse]
5 [label="3:CtBinaryOperatorImpl@property == null" shape=ellipse]
6 [label="4:CtTypeReferenceImpl@BuildException" shape=ellipse]
7 [label="4:CtLiteralImpl@\"property attribute is required\"" shape=ellipse]
8 [label="4:CtFieldReadImpl@location" shape=ellipse]
9 [label="4:CtConstructorCallImpl@new BuildException(\"property attribute is required\", location)" shape=ellipse]
10 [label="4:CtThrowImpl@throw new BuildException(\"property attribute is required\", location)" shape=ellipse]
11 [label="3:CtBlockImpl@\{
    throw new BuildException(\"property attribute is required\", location);
\}" shape=ellipse]
12 [label="3:CtIfImpl@if (property == null) \{
    throw new BuildException(\"property attribute is required\", location);
\}" shape=ellipse]
13 [label="6:CtFieldWriteImpl@isTask" shape=ellipse]
14 [label="6:CtLiteralImpl@true" shape=ellipse]
15 [label="6:CtAssignmentImpl@isTask = true" shape=ellipse]
16 [label="8:CtExecutableReferenceImpl@eval()" shape=ellipse]
17 [label="8:CtVirtualElement@eval" shape=ellipse]
18 [label="8:CtInvocationImpl@eval()" shape=ellipse]
19 [label="9:CtLiteralImpl@null" shape=ellipse]
20 [label="9:CtExecutableReferenceImpl@getProperty()" shape=ellipse]
21 [label="9:CtVirtualElement@getProperty" shape=ellipse]
22 [label="9:CtExecutableReferenceImpl@getProject()" shape=ellipse]
23 [label="9:CtVirtualElement@getProject" shape=ellipse]
24 [label="9:CtInvocationImpl@getProject()" shape=ellipse]
25 [label="9:CtFieldReadImpl@property" shape=ellipse]
26 [label="9:CtInvocationImpl@getProject().getProperty(property)" shape=ellipse]
27 [label="9:CtBinaryOperatorImpl@null != getProject().getProperty(property)" shape=ellipse]
28 [label="10:CtExecutableReferenceImpl@log(<unknown>)" shape=ellipse]
29 [label="10:CtVirtualElement@log" shape=ellipse]
30 [label="11:CtLiteralImpl@\"DEPRECATED - <available> used to override an existing\"" shape=ellipse]
31 [label="11:CtLiteralImpl@\" property.\"" shape=ellipse]
32 [label="11:CtBinaryOperatorImpl@(\"DEPRECATED - <available> used to override an existing\" + \" property.\")" shape=ellipse]
33 [label="12:CtFieldReadImpl@StringUtils.LINE_SEP" shape=ellipse]
34 [label="11:CtBinaryOperatorImpl@((\"DEPRECATED - <available> used to override an existing\" + \" property.\") + StringUtils.LINE_SEP)" shape=ellipse]
35 [label="13:CtLiteralImpl@\"  Build file should not reuse the same property\"" shape=ellipse]
36 [label="11:CtBinaryOperatorImpl@(((\"DEPRECATED - <available> used to override an existing\" + \" property.\") + StringUtils.LINE_SEP) + \"  Build file should not reuse the same property\")" shape=ellipse]
37 [label="14:CtLiteralImpl@\" name for different values.\"" shape=ellipse]
38 [label="11:CtBinaryOperatorImpl@(((\"DEPRECATED - <available> used to override an existing\" + \" property.\") + StringUtils.LINE_SEP) + \"  Build file should not reuse the same property\") + \" name for different values.\"" shape=ellipse]
39 [label="10:CtInvocationImpl@log((((\"DEPRECATED - <available> used to override an existing\" + \" property.\") + StringUtils.LINE_SEP) + \"  Build file should not reuse the same property\") + \" name for different values.\")" shape=ellipse]
40 [label="9:CtBlockImpl@\{
    log((((\"DEPRECATED - <available> used to override an existing\" + \" property.\") + StringUtils.LINE_SEP) + \"  Build file should not reuse the same property\") + \" name for different values.\");
\}" shape=ellipse]
41 [label="9:CtIfImpl@if (null != getProject().getProperty(property)) \{
    log((((\"DEPRECATED - <available> used to override an existing\" + \" property.\") + StringUtils.LINE_SEP) + \"  Build file should not reuse the same property\") + \" name for different values.\");
\}" shape=ellipse]
42 [label="16:CtExecutableReferenceImpl@setProperty()" shape=ellipse]
43 [label="16:CtVirtualElement@setProperty" shape=ellipse]
44 [label="16:CtExecutableReferenceImpl@getProject()" shape=ellipse]
45 [label="16:CtVirtualElement@getProject" shape=ellipse]
46 [label="16:CtInvocationImpl@getProject()" shape=ellipse]
47 [label="16:CtFieldReadImpl@property" shape=ellipse]
48 [label="16:CtFieldReadImpl@value" shape=ellipse]
49 [label="16:CtInvocationImpl@getProject().setProperty(property, value)" shape=ellipse]
50 [label="8:CtBlockImpl@\{
    if (null != getProject().getProperty(property)) \{
        log((((\"DEPRECATED - <available> used to override an existing\" + \" property.\") + StringUtils.LINE_SEP) + \"  Build file should not reuse the same property\") + \" name for different values.\");
    \}
    getProject().setProperty(property, value);
\}" shape=ellipse]
51 [label="8:CtIfImpl@if (eval()) \{
    if (null != getProject().getProperty(property)) \{
        log((((\"DEPRECATED - <available> used to override an existing\" + \" property.\") + StringUtils.LINE_SEP) + \"  Build file should not reuse the same property\") + \" name for different values.\");
    \}
    getProject().setProperty(property, value);
\}" shape=ellipse]
52 [label="7:CtBlockImpl@\{
    if (eval()) \{
        if (null != getProject().getProperty(property)) \{
            log((((\"DEPRECATED - <available> used to override an existing\" + \" property.\") + StringUtils.LINE_SEP) + \"  Build file should not reuse the same property\") + \" name for different values.\");
        \}
        getProject().setProperty(property, value);
    \}
\}" shape=ellipse]
53 [label="19:CtFieldWriteImpl@isTask" shape=ellipse]
54 [label="19:CtLiteralImpl@false" shape=ellipse]
55 [label="19:CtAssignmentImpl@isTask = false" shape=ellipse]
56 [label="18:CtBlockImpl@\{
    isTask = false;
\}" shape=ellipse]
57 [label="7:CtTryImpl@try \{
    if (eval()) \{
        if (null != getProject().getProperty(property)) \{
            log((((\"DEPRECATED - <available> used to override an existing\" + \" property.\") + StringUtils.LINE_SEP) + \"  Build file should not reuse the same property\") + \" name for different values.\");
        \}
        getProject().setProperty(property, value);
    \}
\} finally \{
    isTask = false;
\}" shape=ellipse]
58 [label="2:CtBlockImpl@\{
    if (property == null) \{
        throw new BuildException(\"property attribute is required\", location);
    \}
    isTask = true;
    try \{
        if (eval()) \{
            if (null != getProject().getProperty(property)) \{
                log((((\"DEPRECATED - <available> used to override an existing\" + \" property.\") + StringUtils.LINE_SEP) + \"  Build file should not reuse the same property\") + \" name for different values.\");
            \}
            getProject().setProperty(property, value);
        \}
    \} finally \{
        isTask = false;
    \}
\}" shape=ellipse]
59 [label="2:CtMethodImpl@public void execute() throws BuildException \{
    if (property == null) \{
        throw new BuildException(\"property attribute is required\", location);
    \}
    isTask = true;
    try \{
        if (eval()) \{
            if (null != getProject().getProperty(property)) \{
                log((((\"DEPRECATED - <available> used to override an existing\" + \" property.\") + StringUtils.LINE_SEP) + \"  Build file should not reuse the same property\") + \" name for different values.\");
            \}
            getProject().setProperty(property, value);
        \}
    \} finally \{
        isTask = false;
    \}
\}" shape=ellipse]
60 [label="4:Delete@DELETE" shape=ellipse]
61 [label="4:Insert@INSERT" shape=ellipse]
62 [label="4:CtInvocationImpl@getLocation()" shape=ellipse]
5 -> 3 [label="AST"];
5 -> 4 [label="AST"];
5 -> 11 [label="Control Dep"];
5 -> 10 [label="Control Dep"];
5 -> 9 [label="Control Dep"];
5 -> 7 [label="Control Dep"];
5 -> 8 [label="Control Dep"];
8 -> 60 [label="Action"];
9 -> 7 [label="AST"];
9 -> 8 [label="AST"];
9 -> 61 [label="Action"];
10 -> 9 [label="AST"];
11 -> 10 [label="AST"];
12 -> 5 [label="AST"];
12 -> 11 [label="AST"];
15 -> 13 [label="AST"];
15 -> 14 [label="AST"];
18 -> 17 [label="AST"];
18 -> 16 [label="AST"];
18 -> 50 [label="Control Dep"];
18 -> 41 [label="Control Dep"];
18 -> 27 [label="Control Dep"];
18 -> 19 [label="Control Dep"];
18 -> 26 [label="Control Dep"];
18 -> 20 [label="Control Dep"];
18 -> 24 [label="Control Dep"];
18 -> 22 [label="Control Dep"];
18 -> 25 [label="Control Dep"];
18 -> 49 [label="Control Dep"];
18 -> 42 [label="Control Dep"];
18 -> 46 [label="Control Dep"];
18 -> 44 [label="Control Dep"];
18 -> 47 [label="Control Dep"];
18 -> 48 [label="Control Dep"];
24 -> 23 [label="AST"];
24 -> 22 [label="AST"];
26 -> 21 [label="AST"];
26 -> 24 [label="AST"];
26 -> 20 [label="AST"];
26 -> 25 [label="AST"];
27 -> 19 [label="AST"];
27 -> 26 [label="AST"];
27 -> 40 [label="Control Dep"];
27 -> 39 [label="Control Dep"];
27 -> 28 [label="Control Dep"];
27 -> 38 [label="Control Dep"];
27 -> 36 [label="Control Dep"];
27 -> 34 [label="Control Dep"];
27 -> 32 [label="Control Dep"];
27 -> 30 [label="Control Dep"];
27 -> 31 [label="Control Dep"];
27 -> 33 [label="Control Dep"];
27 -> 35 [label="Control Dep"];
27 -> 37 [label="Control Dep"];
32 -> 30 [label="AST"];
32 -> 31 [label="AST"];
34 -> 32 [label="AST"];
34 -> 33 [label="AST"];
36 -> 34 [label="AST"];
36 -> 35 [label="AST"];
38 -> 36 [label="AST"];
38 -> 37 [label="AST"];
39 -> 29 [label="AST"];
39 -> 28 [label="AST"];
39 -> 38 [label="AST"];
40 -> 39 [label="AST"];
41 -> 27 [label="AST"];
41 -> 40 [label="AST"];
46 -> 45 [label="AST"];
46 -> 44 [label="AST"];
49 -> 43 [label="AST"];
49 -> 46 [label="AST"];
49 -> 42 [label="AST"];
49 -> 47 [label="AST"];
49 -> 48 [label="AST"];
50 -> 41 [label="AST"];
50 -> 49 [label="AST"];
51 -> 18 [label="AST"];
51 -> 50 [label="AST"];
52 -> 51 [label="AST"];
55 -> 53 [label="AST"];
55 -> 54 [label="AST"];
56 -> 55 [label="AST"];
57 -> 52 [label="AST"];
57 -> 56 [label="AST"];
58 -> 12 [label="AST"];
58 -> 15 [label="AST"];
58 -> 57 [label="AST"];
59 -> 1 [label="AST"];
59 -> 0 [label="AST"];
59 -> 2 [label="AST"];
59 -> 58 [label="AST"];
61 -> 62 [label="Action"];
}