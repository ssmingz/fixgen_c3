digraph "setNotOverrideLocalProperties#?,LocalProperties" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@setNotOverrideLocalProperties" shape=ellipse]
2 [label="2:CtParameterImpl@LocalProperties localProperties" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@LocalProperties" shape=ellipse]
4 [label="3:CtVariableReadImpl@localProperties" shape=ellipse]
5 [label="3:CtLiteralImpl@null" shape=ellipse]
6 [label="3:CtBinaryOperatorImpl@localProperties == null" shape=ellipse]
7 [label="4:CtVariableWriteImpl@localProperties" shape=ellipse]
8 [label="4:CtTypeReferenceImpl@LocalPropertyStack" shape=ellipse]
9 [label="4:CtConstructorCallImpl@new LocalPropertyStack()" shape=ellipse]
10 [label="4:CtAssignmentImpl@localProperties = new LocalPropertyStack()" shape=ellipse]
11 [label="3:CtBlockImpl@\{
    localProperties = new LocalPropertyStack();
\}" shape=ellipse]
12 [label="3:CtIfImpl@if (localProperties == null) \{
    localProperties = new LocalPropertyStack();
\}" shape=ellipse]
13 [label="6:CtTypeReferenceImpl@LocalPropertyStack" shape=ellipse]
14 [label="6:CtVariableReadImpl@((LocalPropertyStack) (localProperties))" shape=ellipse]
15 [label="6:CtTypeReferenceImpl@LocalPropertyStack" shape=ellipse]
16 [label="6:CtVirtualElement@s" shape=ellipse]
17 [label="6:CtLocalVariableImpl@LocalPropertyStack s = ((LocalPropertyStack) (localProperties))" shape=ellipse]
18 [label="7:CtTypeReferenceImpl@Iterator" shape=ellipse]
19 [label="7:CtExecutableReferenceImpl@iterator()" shape=ellipse]
20 [label="7:CtVirtualElement@iterator" shape=ellipse]
21 [label="7:CtExecutableReferenceImpl@entrySet()" shape=ellipse]
22 [label="7:CtVirtualElement@entrySet" shape=ellipse]
23 [label="7:CtVariableReadImpl@s" shape=ellipse]
24 [label="7:CtLocalVariableReferenceImpl@s" shape=ellipse]
25 [label="7:CtFieldReadImpl@s.props" shape=ellipse]
26 [label="7:CtInvocationImpl@s.props.entrySet()" shape=ellipse]
27 [label="7:CtInvocationImpl@s.props.entrySet().iterator()" shape=ellipse]
28 [label="7:CtVirtualElement@i" shape=ellipse]
29 [label="7:CtLocalVariableImpl@Iterator i = s.props.entrySet().iterator()" shape=ellipse]
30 [label="7:CtExecutableReferenceImpl@hasNext()" shape=ellipse]
31 [label="7:CtVirtualElement@hasNext" shape=ellipse]
32 [label="7:CtVariableReadImpl@i" shape=ellipse]
33 [label="7:CtInvocationImpl@i.hasNext()" shape=ellipse]
34 [label="8:CtTypeReferenceImpl@Map.Entry" shape=ellipse]
35 [label="8:CtTypeReferenceImpl@Map" shape=ellipse]
36 [label="8:CtExecutableReferenceImpl@next()" shape=ellipse]
37 [label="8:CtVirtualElement@next" shape=ellipse]
38 [label="8:CtVariableReadImpl@i" shape=ellipse]
39 [label="8:CtInvocationImpl@((Map.Entry) (i.next()))" shape=ellipse]
40 [label="8:CtTypeReferenceImpl@Map.Entry" shape=ellipse]
41 [label="8:CtVirtualElement@entry" shape=ellipse]
42 [label="8:CtLocalVariableImpl@Map.Entry entry = ((Map.Entry) (i.next()))" shape=ellipse]
43 [label="9:CtExecutableReferenceImpl@get()" shape=ellipse]
44 [label="9:CtVirtualElement@get" shape=ellipse]
45 [label="9:CtFieldReadImpl@userProperties" shape=ellipse]
46 [label="9:CtExecutableReferenceImpl@getKey()" shape=ellipse]
47 [label="9:CtVirtualElement@getKey" shape=ellipse]
48 [label="9:CtVariableReadImpl@entry" shape=ellipse]
49 [label="9:CtInvocationImpl@entry.getKey()" shape=ellipse]
50 [label="9:CtInvocationImpl@userProperties.get(entry.getKey())" shape=ellipse]
51 [label="9:CtLiteralImpl@null" shape=ellipse]
52 [label="9:CtBinaryOperatorImpl@userProperties.get(entry.getKey()) != null" shape=ellipse]
53 [label="10:CtExecutableReferenceImpl@remove()" shape=ellipse]
54 [label="10:CtVirtualElement@remove" shape=ellipse]
55 [label="10:CtVariableReadImpl@i" shape=ellipse]
56 [label="10:CtInvocationImpl@i.remove()" shape=ellipse]
57 [label="9:CtBlockImpl@\{
    i.remove();
\}" shape=ellipse]
58 [label="9:CtIfImpl@if (userProperties.get(entry.getKey()) != null) \{
    i.remove();
\}" shape=ellipse]
59 [label="7:CtBlockImpl@\{
    Map.Entry entry = ((Map.Entry) (i.next()));
    if (userProperties.get(entry.getKey()) != null) \{
        i.remove();
    \}
\}" shape=ellipse]
60 [label="7:CtForImpl@for (Iterator i = s.props.entrySet().iterator(); i.hasNext();) \{
    Map.Entry entry = ((Map.Entry) (i.next()));
    if (userProperties.get(entry.getKey()) != null) \{
        i.remove();
    \}
\}" shape=ellipse]
61 [label="13:CtExecutableReferenceImpl@set(LocalProperties)" shape=ellipse]
62 [label="13:CtVirtualElement@set" shape=ellipse]
63 [label="13:CtFieldReadImpl@threadLocalProperties" shape=ellipse]
64 [label="13:CtVariableReadImpl@localProperties" shape=ellipse]
65 [label="13:CtInvocationImpl@threadLocalProperties.set(localProperties)" shape=ellipse]
66 [label="2:CtBlockImpl@\{
    if (localProperties == null) \{
        localProperties = new LocalPropertyStack();
    \}
    LocalPropertyStack s = ((LocalPropertyStack) (localProperties));
    for (Iterator i = s.props.entrySet().iterator(); i.hasNext();) \{
        Map.Entry entry = ((Map.Entry) (i.next()));
        if (userProperties.get(entry.getKey()) != null) \{
            i.remove();
        \}
    \}
    threadLocalProperties.set(localProperties);
\}" shape=ellipse]
67 [label="2:CtMethodImpl@public void setNotOverrideLocalProperties(LocalProperties localProperties) \{
    if (localProperties == null) \{
        localProperties = new LocalPropertyStack();
    \}
    LocalPropertyStack s = ((LocalPropertyStack) (localProperties));
    for (Iterator i = s.props.entrySet().iterator(); i.hasNext();) \{
        Map.Entry entry = ((Map.Entry) (i.next()));
        if (userProperties.get(entry.getKey()) != null) \{
            i.remove();
        \}
    \}
    threadLocalProperties.set(localProperties);
\}" shape=ellipse]
68 [label="4:Update@UPDATE" shape=ellipse]
69 [label="4:CtConstructorCallImpl@new LocalPropertyStack(null)" shape=ellipse]
2 -> 3 [label="AST"];
6 -> 4 [label="AST"];
6 -> 5 [label="AST"];
6 -> 11 [label="Control Dep"];
6 -> 10 [label="Control Dep"];
6 -> 7 [label="Control Dep"];
6 -> 9 [label="Control Dep"];
7 -> 14 [label="Define-Use"];
7 -> 64 [label="Define-Use"];
9 -> 68 [label="Action"];
10 -> 7 [label="AST"];
10 -> 9 [label="AST"];
11 -> 10 [label="AST"];
12 -> 6 [label="AST"];
12 -> 11 [label="AST"];
14 -> 15 [label="AST"];
14 -> 16 [label="Data Dep"];
16 -> 23 [label="Define-Use"];
17 -> 16 [label="AST"];
17 -> 13 [label="AST"];
17 -> 14 [label="AST"];
23 -> 24 [label="AST"];
25 -> 23 [label="AST"];
25 -> 28 [label="Data Dep"];
26 -> 22 [label="AST"];
26 -> 25 [label="AST"];
26 -> 21 [label="AST"];
27 -> 20 [label="AST"];
27 -> 26 [label="AST"];
27 -> 19 [label="AST"];
28 -> 32 [label="Define-Use"];
28 -> 38 [label="Define-Use"];
28 -> 55 [label="Define-Use"];
29 -> 28 [label="AST"];
29 -> 18 [label="AST"];
29 -> 27 [label="AST"];
33 -> 31 [label="AST"];
33 -> 32 [label="AST"];
33 -> 30 [label="AST"];
33 -> 59 [label="Control Dep"];
33 -> 42 [label="Control Dep"];
33 -> 39 [label="Control Dep"];
33 -> 36 [label="Control Dep"];
33 -> 38 [label="Control Dep"];
33 -> 58 [label="Control Dep"];
33 -> 52 [label="Control Dep"];
33 -> 50 [label="Control Dep"];
33 -> 43 [label="Control Dep"];
33 -> 45 [label="Control Dep"];
33 -> 49 [label="Control Dep"];
33 -> 46 [label="Control Dep"];
33 -> 48 [label="Control Dep"];
33 -> 51 [label="Control Dep"];
34 -> 35 [label="AST"];
38 -> 41 [label="Data Dep"];
39 -> 37 [label="AST"];
39 -> 40 [label="AST"];
39 -> 38 [label="AST"];
39 -> 36 [label="AST"];
41 -> 48 [label="Define-Use"];
42 -> 41 [label="AST"];
42 -> 34 [label="AST"];
42 -> 39 [label="AST"];
49 -> 47 [label="AST"];
49 -> 48 [label="AST"];
49 -> 46 [label="AST"];
50 -> 44 [label="AST"];
50 -> 45 [label="AST"];
50 -> 43 [label="AST"];
50 -> 49 [label="AST"];
52 -> 50 [label="AST"];
52 -> 51 [label="AST"];
52 -> 57 [label="Control Dep"];
52 -> 56 [label="Control Dep"];
52 -> 53 [label="Control Dep"];
52 -> 55 [label="Control Dep"];
56 -> 54 [label="AST"];
56 -> 55 [label="AST"];
56 -> 53 [label="AST"];
57 -> 56 [label="AST"];
58 -> 52 [label="AST"];
58 -> 57 [label="AST"];
59 -> 42 [label="AST"];
59 -> 58 [label="AST"];
60 -> 29 [label="AST"];
60 -> 33 [label="AST"];
60 -> 59 [label="AST"];
65 -> 62 [label="AST"];
65 -> 63 [label="AST"];
65 -> 61 [label="AST"];
65 -> 64 [label="AST"];
66 -> 12 [label="AST"];
66 -> 17 [label="AST"];
66 -> 60 [label="AST"];
66 -> 65 [label="AST"];
67 -> 1 [label="AST"];
67 -> 0 [label="AST"];
67 -> 2 [label="AST"];
67 -> 66 [label="AST"];
68 -> 69 [label="Action"];
}