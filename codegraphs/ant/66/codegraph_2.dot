digraph "targetFinished#?,BuildEvent" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@targetFinished" shape=ellipse]
2 [label="2:CtParameterImpl@BuildEvent event" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@BuildEvent" shape=ellipse]
4 [label="3:CtTypeReferenceImpl@long" shape=ellipse]
5 [label="3:CtExecutableReferenceImpl@currentTimeMillis()" shape=ellipse]
6 [label="3:CtVirtualElement@currentTimeMillis" shape=ellipse]
7 [label="3:CtTypeAccessImpl@System" shape=ellipse]
8 [label="3:CtInvocationImpl@System.currentTimeMillis()" shape=ellipse]
9 [label="3:CtFieldReadImpl@targetStartTime" shape=ellipse]
10 [label="3:CtBinaryOperatorImpl@System.currentTimeMillis() - targetStartTime" shape=ellipse]
11 [label="3:CtVirtualElement@totalTime" shape=ellipse]
12 [label="3:CtLocalVariableImpl@long totalTime = System.currentTimeMillis() - targetStartTime" shape=ellipse]
13 [label="4:CtExecutableReferenceImpl@setAttribute()" shape=ellipse]
14 [label="4:CtVirtualElement@setAttribute" shape=ellipse]
15 [label="4:CtFieldReadImpl@targetElement" shape=ellipse]
16 [label="4:CtTypeAccessImpl@TIME_ATTR" shape=ellipse]
17 [label="4:CtExecutableReferenceImpl@formatTime(long)" shape=ellipse]
18 [label="4:CtVirtualElement@formatTime" shape=ellipse]
19 [label="4:CtVariableReadImpl@totalTime" shape=ellipse]
20 [label="4:CtInvocationImpl@formatTime(totalTime)" shape=ellipse]
21 [label="4:CtInvocationImpl@targetElement.setAttribute(TIME_ATTR, formatTime(totalTime))" shape=ellipse]
22 [label="5:CtFieldReadImpl@taskElement" shape=ellipse]
23 [label="5:CtLiteralImpl@null" shape=ellipse]
24 [label="5:CtBinaryOperatorImpl@taskElement == null" shape=ellipse]
25 [label="6:CtExecutableReferenceImpl@appendChild()" shape=ellipse]
26 [label="6:CtVirtualElement@appendChild" shape=ellipse]
27 [label="6:CtFieldReadImpl@buildElement" shape=ellipse]
28 [label="6:CtFieldReadImpl@targetElement" shape=ellipse]
29 [label="6:CtInvocationImpl@buildElement.appendChild(targetElement)" shape=ellipse]
30 [label="5:CtBlockImpl@\{
    buildElement.appendChild(targetElement);
\}" shape=ellipse]
31 [label="8:CtExecutableReferenceImpl@appendChild()" shape=ellipse]
32 [label="8:CtVirtualElement@appendChild" shape=ellipse]
33 [label="8:CtFieldReadImpl@taskElement" shape=ellipse]
34 [label="8:CtFieldReadImpl@targetElement" shape=ellipse]
35 [label="8:CtInvocationImpl@taskElement.appendChild(targetElement)" shape=ellipse]
36 [label="7:CtBlockImpl@\{
    taskElement.appendChild(targetElement);
\}" shape=ellipse]
37 [label="5:CtIfImpl@if (taskElement == null) \{
    buildElement.appendChild(targetElement);
\} else \{
    taskElement.appendChild(targetElement);
\}" shape=ellipse]
38 [label="10:CtFieldWriteImpl@targetElement" shape=ellipse]
39 [label="10:CtLiteralImpl@null" shape=ellipse]
40 [label="10:CtAssignmentImpl@targetElement = null" shape=ellipse]
41 [label="11:CtExecutableReferenceImpl@isEmpty()" shape=ellipse]
42 [label="11:CtVirtualElement@isEmpty" shape=ellipse]
43 [label="11:CtFieldReadImpl@targetStack" shape=ellipse]
44 [label="11:CtInvocationImpl@targetStack.isEmpty()" shape=ellipse]
45 [label="11:CtUnaryOperatorImpl@!targetStack.isEmpty()" shape=ellipse]
46 [label="12:CtFieldWriteImpl@targetStartTime" shape=ellipse]
47 [label="12:CtExecutableReferenceImpl@longValue()" shape=ellipse]
48 [label="12:CtVirtualElement@longValue" shape=ellipse]
49 [label="12:CtExecutableReferenceImpl@pop()" shape=ellipse]
50 [label="12:CtVirtualElement@pop" shape=ellipse]
51 [label="12:CtFieldReadImpl@targetTimeStack" shape=ellipse]
52 [label="12:CtInvocationImpl@((Long) (targetTimeStack.pop()))" shape=ellipse]
53 [label="12:CtTypeReferenceImpl@Long" shape=ellipse]
54 [label="12:CtInvocationImpl@((Long) (targetTimeStack.pop())).longValue()" shape=ellipse]
55 [label="12:CtAssignmentImpl@targetStartTime = ((Long) (targetTimeStack.pop())).longValue()" shape=ellipse]
56 [label="13:CtFieldWriteImpl@targetElement" shape=ellipse]
57 [label="13:CtExecutableReferenceImpl@pop()" shape=ellipse]
58 [label="13:CtVirtualElement@pop" shape=ellipse]
59 [label="13:CtFieldReadImpl@targetStack" shape=ellipse]
60 [label="13:CtInvocationImpl@((Element) (targetStack.pop()))" shape=ellipse]
61 [label="13:CtTypeReferenceImpl@Element" shape=ellipse]
62 [label="13:CtAssignmentImpl@targetElement = ((Element) (targetStack.pop()))" shape=ellipse]
63 [label="11:CtBlockImpl@\{
    targetStartTime = ((Long) (targetTimeStack.pop())).longValue();
    targetElement = ((Element) (targetStack.pop()));
\}" shape=ellipse]
64 [label="11:CtIfImpl@if (!targetStack.isEmpty()) \{
    targetStartTime = ((Long) (targetTimeStack.pop())).longValue();
    targetElement = ((Element) (targetStack.pop()));
\}" shape=ellipse]
65 [label="2:CtBlockImpl@\{
    long totalTime = System.currentTimeMillis() - targetStartTime;
    targetElement.setAttribute(TIME_ATTR, formatTime(totalTime));
    if (taskElement == null) \{
        buildElement.appendChild(targetElement);
    \} else \{
        taskElement.appendChild(targetElement);
    \}
    targetElement = null;
    if (!targetStack.isEmpty()) \{
        targetStartTime = ((Long) (targetTimeStack.pop())).longValue();
        targetElement = ((Element) (targetStack.pop()));
    \}
\}" shape=ellipse]
66 [label="2:CtMethodImpl@public void targetFinished(BuildEvent event) \{
    long totalTime = System.currentTimeMillis() - targetStartTime;
    targetElement.setAttribute(TIME_ATTR, formatTime(totalTime));
    if (taskElement == null) \{
        buildElement.appendChild(targetElement);
    \} else \{
        taskElement.appendChild(targetElement);
    \}
    targetElement = null;
    if (!targetStack.isEmpty()) \{
        targetStartTime = ((Long) (targetTimeStack.pop())).longValue();
        targetElement = ((Element) (targetStack.pop()));
    \}
\}" shape=ellipse]
67 [label="4:CtTypeAccessImpl@DefaultLogger" shape=ellipse]
2 -> 3 [label="AST"];
8 -> 6 [label="AST"];
8 -> 7 [label="AST"];
8 -> 5 [label="AST"];
9 -> 11 [label="Data Dep"];
10 -> 8 [label="AST"];
10 -> 9 [label="AST"];
11 -> 19 [label="Define-Use"];
12 -> 11 [label="AST"];
12 -> 4 [label="AST"];
12 -> 10 [label="AST"];
20 -> 18 [label="AST"];
20 -> 17 [label="AST"];
20 -> 19 [label="AST"];
21 -> 14 [label="AST"];
21 -> 15 [label="AST"];
21 -> 13 [label="AST"];
21 -> 16 [label="AST"];
21 -> 20 [label="AST"];
24 -> 22 [label="AST"];
24 -> 23 [label="AST"];
24 -> 30 [label="Control Dep"];
24 -> 29 [label="Control Dep"];
24 -> 25 [label="Control Dep"];
24 -> 27 [label="Control Dep"];
24 -> 28 [label="Control Dep"];
24 -> 36 [label="Control Dep"];
24 -> 35 [label="Control Dep"];
24 -> 31 [label="Control Dep"];
24 -> 33 [label="Control Dep"];
24 -> 34 [label="Control Dep"];
29 -> 26 [label="AST"];
29 -> 27 [label="AST"];
29 -> 25 [label="AST"];
29 -> 28 [label="AST"];
30 -> 29 [label="AST"];
35 -> 32 [label="AST"];
35 -> 33 [label="AST"];
35 -> 31 [label="AST"];
35 -> 34 [label="AST"];
36 -> 35 [label="AST"];
37 -> 24 [label="AST"];
37 -> 30 [label="AST"];
37 -> 36 [label="AST"];
40 -> 38 [label="AST"];
40 -> 39 [label="AST"];
44 -> 42 [label="AST"];
44 -> 43 [label="AST"];
44 -> 41 [label="AST"];
45 -> 44 [label="AST"];
45 -> 63 [label="Control Dep"];
45 -> 55 [label="Control Dep"];
45 -> 46 [label="Control Dep"];
45 -> 54 [label="Control Dep"];
45 -> 47 [label="Control Dep"];
45 -> 52 [label="Control Dep"];
45 -> 49 [label="Control Dep"];
45 -> 51 [label="Control Dep"];
45 -> 62 [label="Control Dep"];
45 -> 56 [label="Control Dep"];
45 -> 60 [label="Control Dep"];
45 -> 57 [label="Control Dep"];
45 -> 59 [label="Control Dep"];
51 -> 46 [label="Data Dep"];
52 -> 50 [label="AST"];
52 -> 53 [label="AST"];
52 -> 51 [label="AST"];
52 -> 49 [label="AST"];
54 -> 48 [label="AST"];
54 -> 52 [label="AST"];
54 -> 47 [label="AST"];
55 -> 46 [label="AST"];
55 -> 54 [label="AST"];
59 -> 56 [label="Data Dep"];
60 -> 58 [label="AST"];
60 -> 61 [label="AST"];
60 -> 59 [label="AST"];
60 -> 57 [label="AST"];
62 -> 56 [label="AST"];
62 -> 60 [label="AST"];
63 -> 55 [label="AST"];
63 -> 62 [label="AST"];
64 -> 45 [label="AST"];
64 -> 63 [label="AST"];
65 -> 12 [label="AST"];
65 -> 21 [label="AST"];
65 -> 37 [label="AST"];
65 -> 40 [label="AST"];
65 -> 64 [label="AST"];
66 -> 1 [label="AST"];
66 -> 0 [label="AST"];
66 -> 2 [label="AST"];
66 -> 65 [label="AST"];
}