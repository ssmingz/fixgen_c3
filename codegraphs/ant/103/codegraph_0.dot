digraph "writeToFile#?,String,boolean,File" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@writeToFile" shape=ellipse]
2 [label="2:CtParameterImpl@String from" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
4 [label="2:CtParameterImpl@boolean append" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@boolean" shape=ellipse]
6 [label="2:CtParameterImpl@File to" shape=ellipse]
7 [label="2:CtTypeReferenceImpl@File" shape=ellipse]
8 [label="2:CtTypeReferenceImpl@IOException" shape=ellipse]
9 [label="3:CtTypeReferenceImpl@FileWriter" shape=ellipse]
10 [label="3:CtLiteralImpl@null" shape=ellipse]
11 [label="3:CtVirtualElement@out" shape=ellipse]
12 [label="3:CtLocalVariableImpl@FileWriter out = null" shape=ellipse]
13 [label="5:CtVariableWriteImpl@out" shape=ellipse]
14 [label="5:CtTypeReferenceImpl@FileWriter" shape=ellipse]
15 [label="5:CtExecutableReferenceImpl@getAbsolutePath()" shape=ellipse]
16 [label="5:CtVirtualElement@getAbsolutePath" shape=ellipse]
17 [label="5:CtVariableReadImpl@to" shape=ellipse]
18 [label="5:CtInvocationImpl@to.getAbsolutePath()" shape=ellipse]
19 [label="5:CtVariableReadImpl@append" shape=ellipse]
20 [label="5:CtConstructorCallImpl@new FileWriter(to.getAbsolutePath(), append)" shape=ellipse]
21 [label="5:CtAssignmentImpl@out = new FileWriter(to.getAbsolutePath(), append)" shape=ellipse]
22 [label="6:CtTypeReferenceImpl@StringReader" shape=ellipse]
23 [label="6:CtTypeReferenceImpl@StringReader" shape=ellipse]
24 [label="6:CtVariableReadImpl@from" shape=ellipse]
25 [label="6:CtConstructorCallImpl@new StringReader(from)" shape=ellipse]
26 [label="6:CtVirtualElement@in" shape=ellipse]
27 [label="6:CtLocalVariableImpl@StringReader in = new StringReader(from)" shape=ellipse]
28 [label="7:CtVirtualElement@char[]" shape=ellipse]
29 [label="7:CtArrayTypeReferenceImpl@char[]" shape=ellipse]
30 [label="7:CtNewArrayImpl@new char[8192]" shape=ellipse]
31 [label="7:CtLiteralImpl@8192" shape=ellipse]
32 [label="7:CtVirtualElement@buffer" shape=ellipse]
33 [label="7:CtLocalVariableImpl@char[] buffer = new char[8192]" shape=ellipse]
34 [label="8:CtTypeReferenceImpl@int" shape=ellipse]
35 [label="8:CtVirtualElement@bytesRead" shape=ellipse]
36 [label="8:CtLocalVariableImpl@int bytesRead" shape=ellipse]
37 [label="9:CtLiteralImpl@true" shape=ellipse]
38 [label="10:CtVariableWriteImpl@bytesRead" shape=ellipse]
39 [label="10:CtExecutableReferenceImpl@read(char[])" shape=ellipse]
40 [label="10:CtVirtualElement@read" shape=ellipse]
41 [label="10:CtVariableReadImpl@in" shape=ellipse]
42 [label="10:CtVariableReadImpl@buffer" shape=ellipse]
43 [label="10:CtInvocationImpl@in.read(buffer)" shape=ellipse]
44 [label="10:CtAssignmentImpl@bytesRead = in.read(buffer)" shape=ellipse]
45 [label="11:CtVariableReadImpl@bytesRead" shape=ellipse]
46 [label="11:CtLiteralImpl@1" shape=ellipse]
47 [label="11:CtUnaryOperatorImpl@(-1)" shape=ellipse]
48 [label="11:CtBinaryOperatorImpl@bytesRead == (-1)" shape=ellipse]
49 [label="12:CtBreakImpl@break" shape=ellipse]
50 [label="11:CtBlockImpl@\{
    break;
\}" shape=ellipse]
51 [label="11:CtIfImpl@if (bytesRead == (-1)) \{
    break;
\}" shape=ellipse]
52 [label="14:CtExecutableReferenceImpl@write(char[],int,int)" shape=ellipse]
53 [label="14:CtVirtualElement@write" shape=ellipse]
54 [label="14:CtVariableReadImpl@out" shape=ellipse]
55 [label="14:CtVariableReadImpl@buffer" shape=ellipse]
56 [label="14:CtLiteralImpl@0" shape=ellipse]
57 [label="14:CtVariableReadImpl@bytesRead" shape=ellipse]
58 [label="14:CtInvocationImpl@out.write(buffer, 0, bytesRead)" shape=ellipse]
59 [label="9:CtBlockImpl@\{
    bytesRead = in.read(buffer);
    if (bytesRead == (-1)) \{
        break;
    \}
    out.write(buffer, 0, bytesRead);
\}" shape=ellipse]
60 [label="9:CtWhileImpl@while (true) \{
    bytesRead = in.read(buffer);
    if (bytesRead == (-1)) \{
        break;
    \}
    out.write(buffer, 0, bytesRead);
\} " shape=ellipse]
61 [label="16:CtExecutableReferenceImpl@flush()" shape=ellipse]
62 [label="16:CtVirtualElement@flush" shape=ellipse]
63 [label="16:CtVariableReadImpl@out" shape=ellipse]
64 [label="16:CtInvocationImpl@out.flush()" shape=ellipse]
65 [label="4:CtBlockImpl@\{
    out = new FileWriter(to.getAbsolutePath(), append);
    StringReader in = new StringReader(from);
    char[] buffer = new char[8192];
    int bytesRead;
    while (true) \{
        bytesRead = in.read(buffer);
        if (bytesRead == (-1)) \{
            break;
        \}
        out.write(buffer, 0, bytesRead);
    \} 
    out.flush();
\}" shape=ellipse]
66 [label="18:CtVariableReadImpl@out" shape=ellipse]
67 [label="18:CtLiteralImpl@null" shape=ellipse]
68 [label="18:CtBinaryOperatorImpl@out != null" shape=ellipse]
69 [label="19:CtExecutableReferenceImpl@close()" shape=ellipse]
70 [label="19:CtVirtualElement@close" shape=ellipse]
71 [label="19:CtVariableReadImpl@out" shape=ellipse]
72 [label="19:CtInvocationImpl@out.close()" shape=ellipse]
73 [label="18:CtBlockImpl@\{
    out.close();
\}" shape=ellipse]
74 [label="18:CtIfImpl@if (out != null) \{
    out.close();
\}" shape=ellipse]
75 [label="17:CtBlockImpl@\{
    if (out != null) \{
        out.close();
    \}
\}" shape=ellipse]
76 [label="4:CtTryImpl@try \{
    out = new FileWriter(to.getAbsolutePath(), append);
    StringReader in = new StringReader(from);
    char[] buffer = new char[8192];
    int bytesRead;
    while (true) \{
        bytesRead = in.read(buffer);
        if (bytesRead == (-1)) \{
            break;
        \}
        out.write(buffer, 0, bytesRead);
    \} 
    out.flush();
\} finally \{
    if (out != null) \{
        out.close();
    \}
\}" shape=ellipse]
77 [label="2:CtBlockImpl@\{
    FileWriter out = null;
    try \{
        out = new FileWriter(to.getAbsolutePath(), append);
        StringReader in = new StringReader(from);
        char[] buffer = new char[8192];
        int bytesRead;
        while (true) \{
            bytesRead = in.read(buffer);
            if (bytesRead == (-1)) \{
                break;
            \}
            out.write(buffer, 0, bytesRead);
        \} 
        out.flush();
    \} finally \{
        if (out != null) \{
            out.close();
        \}
    \}
\}" shape=ellipse]
78 [label="2:CtMethodImpl@private void writeToFile(String from, boolean append, File to) throws IOException \{
    FileWriter out = null;
    try \{
        out = new FileWriter(to.getAbsolutePath(), append);
        StringReader in = new StringReader(from);
        char[] buffer = new char[8192];
        int bytesRead;
        while (true) \{
            bytesRead = in.read(buffer);
            if (bytesRead == (-1)) \{
                break;
            \}
            out.write(buffer, 0, bytesRead);
        \} 
        out.flush();
    \} finally \{
        if (out != null) \{
            out.close();
        \}
    \}
\}" shape=ellipse]
79 [label="7:Delete@DELETE" shape=ellipse]
80 [label="7:Insert@INSERT" shape=ellipse]
81 [label="7:CtFieldReadImpl@BUFFER_SIZE" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
6 -> 7 [label="AST"];
12 -> 11 [label="AST"];
12 -> 9 [label="AST"];
12 -> 10 [label="AST"];
13 -> 54 [label="Define-Use"];
13 -> 63 [label="Define-Use"];
13 -> 66 [label="Define-Use"];
13 -> 71 [label="Define-Use"];
17 -> 13 [label="Data Dep"];
18 -> 16 [label="AST"];
18 -> 17 [label="AST"];
18 -> 15 [label="AST"];
19 -> 13 [label="Data Dep"];
20 -> 18 [label="AST"];
20 -> 19 [label="AST"];
21 -> 13 [label="AST"];
21 -> 20 [label="AST"];
24 -> 26 [label="Data Dep"];
25 -> 24 [label="AST"];
26 -> 41 [label="Define-Use"];
27 -> 26 [label="AST"];
27 -> 22 [label="AST"];
27 -> 25 [label="AST"];
29 -> 28 [label="AST"];
30 -> 31 [label="AST"];
30 -> 80 [label="Action"];
31 -> 79 [label="Action"];
32 -> 42 [label="Define-Use"];
32 -> 55 [label="Define-Use"];
33 -> 32 [label="AST"];
33 -> 29 [label="AST"];
33 -> 30 [label="AST"];
36 -> 35 [label="AST"];
36 -> 34 [label="AST"];
37 -> 59 [label="Control Dep"];
37 -> 44 [label="Control Dep"];
37 -> 38 [label="Control Dep"];
37 -> 43 [label="Control Dep"];
37 -> 39 [label="Control Dep"];
37 -> 41 [label="Control Dep"];
37 -> 42 [label="Control Dep"];
37 -> 51 [label="Control Dep"];
37 -> 48 [label="Control Dep"];
37 -> 45 [label="Control Dep"];
37 -> 47 [label="Control Dep"];
37 -> 46 [label="Control Dep"];
37 -> 58 [label="Control Dep"];
37 -> 52 [label="Control Dep"];
37 -> 54 [label="Control Dep"];
37 -> 55 [label="Control Dep"];
37 -> 56 [label="Control Dep"];
37 -> 57 [label="Control Dep"];
38 -> 45 [label="Define-Use"];
38 -> 57 [label="Define-Use"];
41 -> 38 [label="Data Dep"];
42 -> 38 [label="Data Dep"];
43 -> 40 [label="AST"];
43 -> 41 [label="AST"];
43 -> 39 [label="AST"];
43 -> 42 [label="AST"];
44 -> 38 [label="AST"];
44 -> 43 [label="AST"];
47 -> 46 [label="AST"];
48 -> 45 [label="AST"];
48 -> 47 [label="AST"];
48 -> 50 [label="Control Dep"];
48 -> 49 [label="Control Dep"];
50 -> 49 [label="AST"];
51 -> 48 [label="AST"];
51 -> 50 [label="AST"];
58 -> 53 [label="AST"];
58 -> 54 [label="AST"];
58 -> 52 [label="AST"];
58 -> 55 [label="AST"];
58 -> 56 [label="AST"];
58 -> 57 [label="AST"];
59 -> 44 [label="AST"];
59 -> 51 [label="AST"];
59 -> 58 [label="AST"];
60 -> 37 [label="AST"];
60 -> 59 [label="AST"];
64 -> 62 [label="AST"];
64 -> 63 [label="AST"];
64 -> 61 [label="AST"];
65 -> 21 [label="AST"];
65 -> 27 [label="AST"];
65 -> 33 [label="AST"];
65 -> 36 [label="AST"];
65 -> 60 [label="AST"];
65 -> 64 [label="AST"];
68 -> 66 [label="AST"];
68 -> 67 [label="AST"];
68 -> 73 [label="Control Dep"];
68 -> 72 [label="Control Dep"];
68 -> 69 [label="Control Dep"];
68 -> 71 [label="Control Dep"];
72 -> 70 [label="AST"];
72 -> 71 [label="AST"];
72 -> 69 [label="AST"];
73 -> 72 [label="AST"];
74 -> 68 [label="AST"];
74 -> 73 [label="AST"];
75 -> 74 [label="AST"];
76 -> 65 [label="AST"];
76 -> 75 [label="AST"];
77 -> 12 [label="AST"];
77 -> 76 [label="AST"];
78 -> 1 [label="AST"];
78 -> 0 [label="AST"];
78 -> 2 [label="AST"];
78 -> 4 [label="AST"];
78 -> 6 [label="AST"];
78 -> 8 [label="AST"];
78 -> 77 [label="AST"];
80 -> 81 [label="Action"];
}