digraph "run#?,Commandline" {
0 [label="2:CtTypeReferenceImpl@int" shape=ellipse]
1 [label="2:CtVirtualElement@run" shape=ellipse]
2 [label="2:CtParameterImpl@Commandline cmd" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@Commandline" shape=ellipse]
4 [label="2:CtTypeReferenceImpl@TaskException" shape=ellipse]
5 [label="4:CtTypeReferenceImpl@Execute" shape=ellipse]
6 [label="4:CtTypeReferenceImpl@Execute" shape=ellipse]
7 [label="4:CtTypeReferenceImpl@LogStreamHandler" shape=ellipse]
8 [label="4:CtThisAccessImpl@this" shape=ellipse]
9 [label="4:CtFieldReadImpl@Project.MSG_INFO" shape=ellipse]
10 [label="4:CtFieldReadImpl@Project.MSG_WARN" shape=ellipse]
11 [label="4:CtConstructorCallImpl@new LogStreamHandler(this, Project.MSG_INFO, Project.MSG_WARN)" shape=ellipse]
12 [label="4:CtConstructorCallImpl@new Execute(new LogStreamHandler(this, Project.MSG_INFO, Project.MSG_WARN))" shape=ellipse]
13 [label="4:CtVirtualElement@exe" shape=ellipse]
14 [label="4:CtLocalVariableImpl@Execute exe = new Execute(new LogStreamHandler(this, Project.MSG_INFO, Project.MSG_WARN))" shape=ellipse]
15 [label="5:CtFieldReadImpl@m_serverPath" shape=ellipse]
16 [label="5:CtLiteralImpl@null" shape=ellipse]
17 [label="5:CtBinaryOperatorImpl@m_serverPath != null" shape=ellipse]
18 [label="6:CtVirtualElement@String[]" shape=ellipse]
19 [label="6:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
20 [label="6:CtExecutableReferenceImpl@getEnvironment()" shape=ellipse]
21 [label="6:CtVirtualElement@getEnvironment" shape=ellipse]
22 [label="6:CtVariableReadImpl@exe" shape=ellipse]
23 [label="6:CtInvocationImpl@exe.getEnvironment()" shape=ellipse]
24 [label="6:CtVirtualElement@env" shape=ellipse]
25 [label="6:CtLocalVariableImpl@String[] env = exe.getEnvironment()" shape=ellipse]
26 [label="7:CtVariableReadImpl@env" shape=ellipse]
27 [label="7:CtLiteralImpl@null" shape=ellipse]
28 [label="7:CtBinaryOperatorImpl@env == null" shape=ellipse]
29 [label="8:CtVariableWriteImpl@env" shape=ellipse]
30 [label="8:CtNewArrayImpl@new String[0]" shape=ellipse]
31 [label="8:CtLiteralImpl@0" shape=ellipse]
32 [label="8:CtAssignmentImpl@env = new String[0]" shape=ellipse]
33 [label="7:CtBlockImpl@\{
    env = new String[0];
\}" shape=ellipse]
34 [label="7:CtIfImpl@if (env == null) \{
    env = new String[0];
\}" shape=ellipse]
35 [label="10:CtVirtualElement@String[]" shape=ellipse]
36 [label="10:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
37 [label="10:CtNewArrayImpl@new String[env.length + 1]" shape=ellipse]
38 [label="10:CtBinaryOperatorImpl@env.length + 1" shape=ellipse]
39 [label="10:CtVirtualElement@newEnv" shape=ellipse]
40 [label="10:CtLocalVariableImpl@String[] newEnv = new String[env.length + 1]" shape=ellipse]
41 [label="11:CtTypeReferenceImpl@int" shape=ellipse]
42 [label="11:CtLiteralImpl@0" shape=ellipse]
43 [label="11:CtVirtualElement@i" shape=ellipse]
44 [label="11:CtLocalVariableImpl@int i = 0" shape=ellipse]
45 [label="11:CtVariableReadImpl@i" shape=ellipse]
46 [label="11:CtVariableReadImpl@env" shape=ellipse]
47 [label="11:CtLocalVariableReferenceImpl@env" shape=ellipse]
48 [label="11:CtFieldReadImpl@env.length" shape=ellipse]
49 [label="11:CtBinaryOperatorImpl@i < env.length" shape=ellipse]
50 [label="11:CtVariableWriteImpl@i" shape=ellipse]
51 [label="11:CtUnaryOperatorImpl@i++" shape=ellipse]
52 [label="12:CtVariableReadImpl@newEnv" shape=ellipse]
53 [label="12:CtVariableReadImpl@i" shape=ellipse]
54 [label="12:CtArrayWriteImpl@newEnv[i]" shape=ellipse]
55 [label="12:CtVariableReadImpl@env" shape=ellipse]
56 [label="12:CtVariableReadImpl@i" shape=ellipse]
57 [label="12:CtArrayReadImpl@env[i]" shape=ellipse]
58 [label="12:CtAssignmentImpl@newEnv[i] = env[i]" shape=ellipse]
59 [label="11:CtBlockImpl@\{
    newEnv[i] = env[i];
\}" shape=ellipse]
60 [label="11:CtForImpl@for (int i = 0; i < env.length; i++) \{
    newEnv[i] = env[i];
\}" shape=ellipse]
61 [label="14:CtVariableReadImpl@newEnv" shape=ellipse]
62 [label="14:CtVariableReadImpl@env" shape=ellipse]
63 [label="14:CtLocalVariableReferenceImpl@env" shape=ellipse]
64 [label="14:CtFieldReadImpl@env.length" shape=ellipse]
65 [label="14:CtArrayWriteImpl@newEnv[env.length]" shape=ellipse]
66 [label="14:CtLiteralImpl@\"SSDIR=\"" shape=ellipse]
67 [label="14:CtFieldReadImpl@m_serverPath" shape=ellipse]
68 [label="14:CtBinaryOperatorImpl@\"SSDIR=\" + m_serverPath" shape=ellipse]
69 [label="14:CtAssignmentImpl@newEnv[env.length] = \"SSDIR=\" + m_serverPath" shape=ellipse]
70 [label="15:CtExecutableReferenceImpl@setEnvironment(java.lang.String[])" shape=ellipse]
71 [label="15:CtVirtualElement@setEnvironment" shape=ellipse]
72 [label="15:CtVariableReadImpl@exe" shape=ellipse]
73 [label="15:CtVariableReadImpl@newEnv" shape=ellipse]
74 [label="15:CtInvocationImpl@exe.setEnvironment(newEnv)" shape=ellipse]
75 [label="5:CtBlockImpl@\{
    String[] env = exe.getEnvironment();
    if (env == null) \{
        env = new String[0];
    \}
    String[] newEnv = new String[env.length + 1];
    for (int i = 0; i < env.length; i++) \{
        newEnv[i] = env[i];
    \}
    newEnv[env.length] = \"SSDIR=\" + m_serverPath;
    exe.setEnvironment(newEnv);
\}" shape=ellipse]
76 [label="5:CtIfImpl@if (m_serverPath != null) \{
    String[] env = exe.getEnvironment();
    if (env == null) \{
        env = new String[0];
    \}
    String[] newEnv = new String[env.length + 1];
    for (int i = 0; i < env.length; i++) \{
        newEnv[i] = env[i];
    \}
    newEnv[env.length] = \"SSDIR=\" + m_serverPath;
    exe.setEnvironment(newEnv);
\}" shape=ellipse]
77 [label="17:CtExecutableReferenceImpl@setAntRun()" shape=ellipse]
78 [label="17:CtVirtualElement@setAntRun" shape=ellipse]
79 [label="17:CtVariableReadImpl@exe" shape=ellipse]
80 [label="17:CtFieldReadImpl@project" shape=ellipse]
81 [label="17:CtInvocationImpl@exe.setAntRun(project)" shape=ellipse]
82 [label="18:CtExecutableReferenceImpl@setWorkingDirectory()" shape=ellipse]
83 [label="18:CtVirtualElement@setWorkingDirectory" shape=ellipse]
84 [label="18:CtVariableReadImpl@exe" shape=ellipse]
85 [label="18:CtExecutableReferenceImpl@getBaseDir()" shape=ellipse]
86 [label="18:CtVirtualElement@getBaseDir" shape=ellipse]
87 [label="18:CtFieldReadImpl@project" shape=ellipse]
88 [label="18:CtInvocationImpl@project.getBaseDir()" shape=ellipse]
89 [label="18:CtInvocationImpl@exe.setWorkingDirectory(project.getBaseDir())" shape=ellipse]
90 [label="19:CtExecutableReferenceImpl@setCommandline()" shape=ellipse]
91 [label="19:CtVirtualElement@setCommandline" shape=ellipse]
92 [label="19:CtVariableReadImpl@exe" shape=ellipse]
93 [label="19:CtExecutableReferenceImpl@getCommandline()" shape=ellipse]
94 [label="19:CtVirtualElement@getCommandline" shape=ellipse]
95 [label="19:CtVariableReadImpl@cmd" shape=ellipse]
96 [label="19:CtInvocationImpl@cmd.getCommandline()" shape=ellipse]
97 [label="19:CtInvocationImpl@exe.setCommandline(cmd.getCommandline())" shape=ellipse]
98 [label="20:CtExecutableReferenceImpl@execute()" shape=ellipse]
99 [label="20:CtVirtualElement@execute" shape=ellipse]
100 [label="20:CtVariableReadImpl@exe" shape=ellipse]
101 [label="20:CtInvocationImpl@exe.execute()" shape=ellipse]
102 [label="20:CtReturnImpl@return exe.execute()" shape=ellipse]
103 [label="3:CtBlockImpl@\{
    Execute exe = new Execute(new LogStreamHandler(this, Project.MSG_INFO, Project.MSG_WARN));
    if (m_serverPath != null) \{
        String[] env = exe.getEnvironment();
        if (env == null) \{
            env = new String[0];
        \}
        String[] newEnv = new String[env.length + 1];
        for (int i = 0; i < env.length; i++) \{
            newEnv[i] = env[i];
        \}
        newEnv[env.length] = \"SSDIR=\" + m_serverPath;
        exe.setEnvironment(newEnv);
    \}
    exe.setAntRun(project);
    exe.setWorkingDirectory(project.getBaseDir());
    exe.setCommandline(cmd.getCommandline());
    return exe.execute();
\}" shape=ellipse]
104 [label="21:CtVirtualElement@e" shape=ellipse]
105 [label="21:CtTypeReferenceImpl@IOException" shape=ellipse]
106 [label="21:CtCatchVariableImpl@IOException e" shape=ellipse]
107 [label="22:CtTypeReferenceImpl@TaskException" shape=ellipse]
108 [label="22:CtLiteralImpl@\"Error\"" shape=ellipse]
109 [label="22:CtVariableReadImpl@e" shape=ellipse]
110 [label="22:CtConstructorCallImpl@new TaskException(\"Error\", e)" shape=ellipse]
111 [label="22:CtThrowImpl@throw new TaskException(\"Error\", e)" shape=ellipse]
112 [label="21:CtBlockImpl@\{
    throw new TaskException(\"Error\", e);
\}" shape=ellipse]
113 [label="21:CtCatchImpl@ catch (IOException e) \{
    throw new TaskException(\"Error\", e);
\}" shape=ellipse]
114 [label="3:CtTryImpl@try \{
    Execute exe = new Execute(new LogStreamHandler(this, Project.MSG_INFO, Project.MSG_WARN));
    if (m_serverPath != null) \{
        String[] env = exe.getEnvironment();
        if (env == null) \{
            env = new String[0];
        \}
        String[] newEnv = new String[env.length + 1];
        for (int i = 0; i < env.length; i++) \{
            newEnv[i] = env[i];
        \}
        newEnv[env.length] = \"SSDIR=\" + m_serverPath;
        exe.setEnvironment(newEnv);
    \}
    exe.setAntRun(project);
    exe.setWorkingDirectory(project.getBaseDir());
    exe.setCommandline(cmd.getCommandline());
    return exe.execute();
\} catch (IOException e) \{
    throw new TaskException(\"Error\", e);
\}" shape=ellipse]
115 [label="2:CtBlockImpl@\{
    try \{
        Execute exe = new Execute(new LogStreamHandler(this, Project.MSG_INFO, Project.MSG_WARN));
        if (m_serverPath != null) \{
            String[] env = exe.getEnvironment();
            if (env == null) \{
                env = new String[0];
            \}
            String[] newEnv = new String[env.length + 1];
            for (int i = 0; i < env.length; i++) \{
                newEnv[i] = env[i];
            \}
            newEnv[env.length] = \"SSDIR=\" + m_serverPath;
            exe.setEnvironment(newEnv);
        \}
        exe.setAntRun(project);
        exe.setWorkingDirectory(project.getBaseDir());
        exe.setCommandline(cmd.getCommandline());
        return exe.execute();
    \} catch (IOException e) \{
        throw new TaskException(\"Error\", e);
    \}
\}" shape=ellipse]
116 [label="2:CtMethodImpl@protected int run(Commandline cmd) throws TaskException \{
    try \{
        Execute exe = new Execute(new LogStreamHandler(this, Project.MSG_INFO, Project.MSG_WARN));
        if (m_serverPath != null) \{
            String[] env = exe.getEnvironment();
            if (env == null) \{
                env = new String[0];
            \}
            String[] newEnv = new String[env.length + 1];
            for (int i = 0; i < env.length; i++) \{
                newEnv[i] = env[i];
            \}
            newEnv[env.length] = \"SSDIR=\" + m_serverPath;
            exe.setEnvironment(newEnv);
        \}
        exe.setAntRun(project);
        exe.setWorkingDirectory(project.getBaseDir());
        exe.setCommandline(cmd.getCommandline());
        return exe.execute();
    \} catch (IOException e) \{
        throw new TaskException(\"Error\", e);
    \}
\}" shape=ellipse]
117 [label="18:Update@UPDATE" shape=ellipse]
118 [label="18:CtInvocationImpl@getBaseDirectory()" shape=ellipse]
2 -> 3 [label="AST"];
8 -> 13 [label="Data Dep"];
9 -> 13 [label="Data Dep"];
10 -> 13 [label="Data Dep"];
11 -> 8 [label="AST"];
11 -> 9 [label="AST"];
11 -> 10 [label="AST"];
12 -> 11 [label="AST"];
13 -> 22 [label="Define-Use"];
13 -> 72 [label="Define-Use"];
13 -> 79 [label="Define-Use"];
13 -> 84 [label="Define-Use"];
13 -> 92 [label="Define-Use"];
13 -> 100 [label="Define-Use"];
14 -> 13 [label="AST"];
14 -> 5 [label="AST"];
14 -> 12 [label="AST"];
17 -> 15 [label="AST"];
17 -> 16 [label="AST"];
17 -> 75 [label="Control Dep"];
17 -> 25 [label="Control Dep"];
17 -> 19 [label="Control Dep"];
17 -> 23 [label="Control Dep"];
17 -> 20 [label="Control Dep"];
17 -> 22 [label="Control Dep"];
17 -> 34 [label="Control Dep"];
17 -> 28 [label="Control Dep"];
17 -> 26 [label="Control Dep"];
17 -> 27 [label="Control Dep"];
17 -> 40 [label="Control Dep"];
17 -> 36 [label="Control Dep"];
17 -> 37 [label="Control Dep"];
17 -> 60 [label="Control Dep"];
17 -> 44 [label="Control Dep"];
17 -> 42 [label="Control Dep"];
17 -> 49 [label="Control Dep"];
17 -> 45 [label="Control Dep"];
17 -> 48 [label="Control Dep"];
17 -> 46 [label="Control Dep"];
17 -> 51 [label="Control Dep"];
17 -> 50 [label="Control Dep"];
17 -> 69 [label="Control Dep"];
17 -> 65 [label="Control Dep"];
17 -> 61 [label="Control Dep"];
17 -> 64 [label="Control Dep"];
17 -> 62 [label="Control Dep"];
17 -> 68 [label="Control Dep"];
17 -> 66 [label="Control Dep"];
17 -> 67 [label="Control Dep"];
17 -> 74 [label="Control Dep"];
17 -> 70 [label="Control Dep"];
17 -> 72 [label="Control Dep"];
17 -> 73 [label="Control Dep"];
19 -> 18 [label="AST"];
22 -> 24 [label="Data Dep"];
23 -> 21 [label="AST"];
23 -> 22 [label="AST"];
23 -> 20 [label="AST"];
24 -> 26 [label="Define-Use"];
24 -> 46 [label="Define-Use"];
24 -> 55 [label="Define-Use"];
24 -> 57 [label="Define-Use"];
24 -> 62 [label="Define-Use"];
25 -> 24 [label="AST"];
25 -> 19 [label="AST"];
25 -> 23 [label="AST"];
28 -> 26 [label="AST"];
28 -> 27 [label="AST"];
28 -> 33 [label="Control Dep"];
28 -> 32 [label="Control Dep"];
28 -> 29 [label="Control Dep"];
28 -> 30 [label="Control Dep"];
29 -> 46 [label="Define-Use"];
29 -> 55 [label="Define-Use"];
29 -> 57 [label="Define-Use"];
29 -> 62 [label="Define-Use"];
30 -> 31 [label="AST"];
32 -> 29 [label="AST"];
32 -> 30 [label="AST"];
33 -> 32 [label="AST"];
34 -> 28 [label="AST"];
34 -> 33 [label="AST"];
36 -> 35 [label="AST"];
37 -> 38 [label="AST"];
39 -> 52 [label="Define-Use"];
39 -> 61 [label="Define-Use"];
39 -> 73 [label="Define-Use"];
40 -> 39 [label="AST"];
40 -> 36 [label="AST"];
40 -> 37 [label="AST"];
43 -> 45 [label="Define-Use"];
43 -> 53 [label="Define-Use"];
43 -> 56 [label="Define-Use"];
44 -> 43 [label="AST"];
44 -> 41 [label="AST"];
44 -> 42 [label="AST"];
46 -> 47 [label="AST"];
48 -> 46 [label="AST"];
49 -> 45 [label="AST"];
49 -> 48 [label="AST"];
49 -> 59 [label="Control Dep"];
49 -> 58 [label="Control Dep"];
49 -> 54 [label="Control Dep"];
49 -> 52 [label="Control Dep"];
49 -> 53 [label="Control Dep"];
49 -> 57 [label="Control Dep"];
49 -> 55 [label="Control Dep"];
49 -> 56 [label="Control Dep"];
50 -> 53 [label="Define-Use"];
50 -> 56 [label="Define-Use"];
51 -> 50 [label="AST"];
54 -> 52 [label="AST"];
54 -> 53 [label="AST"];
55 -> 54 [label="Data Dep"];
56 -> 54 [label="Data Dep"];
57 -> 55 [label="AST"];
57 -> 56 [label="AST"];
57 -> 54 [label="Data Dep"];
58 -> 54 [label="AST"];
58 -> 57 [label="AST"];
59 -> 58 [label="AST"];
60 -> 44 [label="AST"];
60 -> 49 [label="AST"];
60 -> 51 [label="AST"];
60 -> 59 [label="AST"];
62 -> 63 [label="AST"];
64 -> 62 [label="AST"];
65 -> 61 [label="AST"];
65 -> 64 [label="AST"];
67 -> 65 [label="Data Dep"];
68 -> 66 [label="AST"];
68 -> 67 [label="AST"];
69 -> 65 [label="AST"];
69 -> 68 [label="AST"];
74 -> 71 [label="AST"];
74 -> 72 [label="AST"];
74 -> 70 [label="AST"];
74 -> 73 [label="AST"];
75 -> 25 [label="AST"];
75 -> 34 [label="AST"];
75 -> 40 [label="AST"];
75 -> 60 [label="AST"];
75 -> 69 [label="AST"];
75 -> 74 [label="AST"];
76 -> 17 [label="AST"];
76 -> 75 [label="AST"];
81 -> 78 [label="AST"];
81 -> 79 [label="AST"];
81 -> 77 [label="AST"];
81 -> 80 [label="AST"];
88 -> 86 [label="AST"];
88 -> 87 [label="AST"];
88 -> 85 [label="AST"];
88 -> 117 [label="Action"];
89 -> 83 [label="AST"];
89 -> 84 [label="AST"];
89 -> 82 [label="AST"];
89 -> 88 [label="AST"];
96 -> 94 [label="AST"];
96 -> 95 [label="AST"];
96 -> 93 [label="AST"];
97 -> 91 [label="AST"];
97 -> 92 [label="AST"];
97 -> 90 [label="AST"];
97 -> 96 [label="AST"];
101 -> 99 [label="AST"];
101 -> 100 [label="AST"];
101 -> 98 [label="AST"];
102 -> 101 [label="AST"];
103 -> 14 [label="AST"];
103 -> 76 [label="AST"];
103 -> 81 [label="AST"];
103 -> 89 [label="AST"];
103 -> 97 [label="AST"];
103 -> 102 [label="AST"];
104 -> 109 [label="Define-Use"];
106 -> 104 [label="AST"];
106 -> 105 [label="AST"];
106 -> 112 [label="Control Dep"];
106 -> 111 [label="Control Dep"];
106 -> 110 [label="Control Dep"];
106 -> 108 [label="Control Dep"];
106 -> 109 [label="Control Dep"];
110 -> 108 [label="AST"];
110 -> 109 [label="AST"];
111 -> 110 [label="AST"];
112 -> 111 [label="AST"];
113 -> 106 [label="AST"];
113 -> 112 [label="AST"];
114 -> 103 [label="AST"];
114 -> 113 [label="AST"];
115 -> 114 [label="AST"];
116 -> 1 [label="AST"];
116 -> 0 [label="AST"];
116 -> 2 [label="AST"];
116 -> 4 [label="AST"];
116 -> 115 [label="AST"];
117 -> 118 [label="Action"];
}