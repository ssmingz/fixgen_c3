digraph "prepareExec#?" {
0 [label="2:CtTypeReferenceImpl@Execute" shape=ellipse]
1 [label="2:CtVirtualElement@prepareExec" shape=ellipse]
2 [label="2:CtTypeReferenceImpl@TaskException" shape=ellipse]
3 [label="3:CtFieldReadImpl@dir" shape=ellipse]
4 [label="3:CtLiteralImpl@null" shape=ellipse]
5 [label="3:CtBinaryOperatorImpl@dir == null" shape=ellipse]
6 [label="4:CtFieldWriteImpl@dir" shape=ellipse]
7 [label="4:CtExecutableReferenceImpl@getBaseDir()" shape=ellipse]
8 [label="4:CtVirtualElement@getBaseDir" shape=ellipse]
9 [label="4:CtFieldReadImpl@project" shape=ellipse]
10 [label="4:CtInvocationImpl@project.getBaseDir()" shape=ellipse]
11 [label="4:CtAssignmentImpl@dir = project.getBaseDir()" shape=ellipse]
12 [label="3:CtBlockImpl@\{
    dir = project.getBaseDir();
\}" shape=ellipse]
13 [label="3:CtIfImpl@if (dir == null) \{
    dir = project.getBaseDir();
\}" shape=ellipse]
14 [label="6:CtExecutableReferenceImpl@log(<unknown>,<unknown>)" shape=ellipse]
15 [label="6:CtVirtualElement@log" shape=ellipse]
16 [label="6:CtExecutableReferenceImpl@toString()" shape=ellipse]
17 [label="6:CtVirtualElement@toString" shape=ellipse]
18 [label="6:CtFieldReadImpl@cmdl" shape=ellipse]
19 [label="6:CtInvocationImpl@cmdl.toString()" shape=ellipse]
20 [label="6:CtTypeAccessImpl@MSG_VERBOSE" shape=ellipse]
21 [label="6:CtInvocationImpl@log(cmdl.toString(), MSG_VERBOSE)" shape=ellipse]
22 [label="7:CtTypeReferenceImpl@Execute" shape=ellipse]
23 [label="7:CtTypeReferenceImpl@Execute" shape=ellipse]
24 [label="7:CtExecutableReferenceImpl@createHandler()" shape=ellipse]
25 [label="7:CtVirtualElement@createHandler" shape=ellipse]
26 [label="7:CtInvocationImpl@createHandler()" shape=ellipse]
27 [label="7:CtExecutableReferenceImpl@createWatchdog()" shape=ellipse]
28 [label="7:CtVirtualElement@createWatchdog" shape=ellipse]
29 [label="7:CtInvocationImpl@createWatchdog()" shape=ellipse]
30 [label="7:CtConstructorCallImpl@new Execute(createHandler(), createWatchdog())" shape=ellipse]
31 [label="7:CtVirtualElement@exe" shape=ellipse]
32 [label="7:CtLocalVariableImpl@Execute exe = new Execute(createHandler(), createWatchdog())" shape=ellipse]
33 [label="8:CtExecutableReferenceImpl@setAntRun()" shape=ellipse]
34 [label="8:CtVirtualElement@setAntRun" shape=ellipse]
35 [label="8:CtVariableReadImpl@exe" shape=ellipse]
36 [label="8:CtFieldReadImpl@project" shape=ellipse]
37 [label="8:CtInvocationImpl@exe.setAntRun(project)" shape=ellipse]
38 [label="9:CtExecutableReferenceImpl@setWorkingDirectory()" shape=ellipse]
39 [label="9:CtVirtualElement@setWorkingDirectory" shape=ellipse]
40 [label="9:CtVariableReadImpl@exe" shape=ellipse]
41 [label="9:CtFieldReadImpl@dir" shape=ellipse]
42 [label="9:CtInvocationImpl@exe.setWorkingDirectory(dir)" shape=ellipse]
43 [label="10:CtExecutableReferenceImpl@setVMLauncher()" shape=ellipse]
44 [label="10:CtVirtualElement@setVMLauncher" shape=ellipse]
45 [label="10:CtVariableReadImpl@exe" shape=ellipse]
46 [label="10:CtFieldReadImpl@vmLauncher" shape=ellipse]
47 [label="10:CtInvocationImpl@exe.setVMLauncher(vmLauncher)" shape=ellipse]
48 [label="11:CtVirtualElement@String[]" shape=ellipse]
49 [label="11:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
50 [label="11:CtExecutableReferenceImpl@getVariables()" shape=ellipse]
51 [label="11:CtVirtualElement@getVariables" shape=ellipse]
52 [label="11:CtFieldReadImpl@env" shape=ellipse]
53 [label="11:CtInvocationImpl@env.getVariables()" shape=ellipse]
54 [label="11:CtVirtualElement@environment" shape=ellipse]
55 [label="11:CtLocalVariableImpl@String[] environment = env.getVariables()" shape=ellipse]
56 [label="12:CtVariableReadImpl@environment" shape=ellipse]
57 [label="12:CtLiteralImpl@null" shape=ellipse]
58 [label="12:CtBinaryOperatorImpl@environment != null" shape=ellipse]
59 [label="13:CtTypeReferenceImpl@int" shape=ellipse]
60 [label="13:CtLiteralImpl@0" shape=ellipse]
61 [label="13:CtVirtualElement@i" shape=ellipse]
62 [label="13:CtLocalVariableImpl@int i = 0" shape=ellipse]
63 [label="13:CtVariableReadImpl@i" shape=ellipse]
64 [label="13:CtVariableReadImpl@environment" shape=ellipse]
65 [label="13:CtLocalVariableReferenceImpl@environment" shape=ellipse]
66 [label="13:CtFieldReadImpl@environment.length" shape=ellipse]
67 [label="13:CtBinaryOperatorImpl@i < environment.length" shape=ellipse]
68 [label="13:CtVariableWriteImpl@i" shape=ellipse]
69 [label="13:CtUnaryOperatorImpl@i++" shape=ellipse]
70 [label="14:CtExecutableReferenceImpl@log(java.lang.String,<unknown>)" shape=ellipse]
71 [label="14:CtVirtualElement@log" shape=ellipse]
72 [label="14:CtLiteralImpl@\"Setting environment variable: \"" shape=ellipse]
73 [label="14:CtVariableReadImpl@environment" shape=ellipse]
74 [label="14:CtVariableReadImpl@i" shape=ellipse]
75 [label="14:CtArrayReadImpl@environment[i]" shape=ellipse]
76 [label="14:CtBinaryOperatorImpl@\"Setting environment variable: \" + environment[i]" shape=ellipse]
77 [label="14:CtTypeAccessImpl@MSG_VERBOSE" shape=ellipse]
78 [label="14:CtInvocationImpl@log(\"Setting environment variable: \" + environment[i], MSG_VERBOSE)" shape=ellipse]
79 [label="13:CtBlockImpl@\{
    log(\"Setting environment variable: \" + environment[i], MSG_VERBOSE);
\}" shape=ellipse]
80 [label="13:CtForImpl@for (int i = 0; i < environment.length; i++) \{
    log(\"Setting environment variable: \" + environment[i], MSG_VERBOSE);
\}" shape=ellipse]
81 [label="12:CtBlockImpl@\{
    for (int i = 0; i < environment.length; i++) \{
        log(\"Setting environment variable: \" + environment[i], MSG_VERBOSE);
    \}
\}" shape=ellipse]
82 [label="12:CtIfImpl@if (environment != null) \{
    for (int i = 0; i < environment.length; i++) \{
        log(\"Setting environment variable: \" + environment[i], MSG_VERBOSE);
    \}
\}" shape=ellipse]
83 [label="17:CtExecutableReferenceImpl@setNewenvironment()" shape=ellipse]
84 [label="17:CtVirtualElement@setNewenvironment" shape=ellipse]
85 [label="17:CtVariableReadImpl@exe" shape=ellipse]
86 [label="17:CtFieldReadImpl@newEnvironment" shape=ellipse]
87 [label="17:CtInvocationImpl@exe.setNewenvironment(newEnvironment)" shape=ellipse]
88 [label="18:CtExecutableReferenceImpl@setEnvironment(java.lang.String[])" shape=ellipse]
89 [label="18:CtVirtualElement@setEnvironment" shape=ellipse]
90 [label="18:CtVariableReadImpl@exe" shape=ellipse]
91 [label="18:CtVariableReadImpl@environment" shape=ellipse]
92 [label="18:CtInvocationImpl@exe.setEnvironment(environment)" shape=ellipse]
93 [label="19:CtVariableReadImpl@exe" shape=ellipse]
94 [label="19:CtReturnImpl@return exe" shape=ellipse]
95 [label="2:CtBlockImpl@\{
    if (dir == null) \{
        dir = project.getBaseDir();
    \}
    log(cmdl.toString(), MSG_VERBOSE);
    Execute exe = new Execute(createHandler(), createWatchdog());
    exe.setAntRun(project);
    exe.setWorkingDirectory(dir);
    exe.setVMLauncher(vmLauncher);
    String[] environment = env.getVariables();
    if (environment != null) \{
        for (int i = 0; i < environment.length; i++) \{
            log(\"Setting environment variable: \" + environment[i], MSG_VERBOSE);
        \}
    \}
    exe.setNewenvironment(newEnvironment);
    exe.setEnvironment(environment);
    return exe;
\}" shape=ellipse]
96 [label="2:CtMethodImpl@protected Execute prepareExec() throws TaskException \{
    if (dir == null) \{
        dir = project.getBaseDir();
    \}
    log(cmdl.toString(), MSG_VERBOSE);
    Execute exe = new Execute(createHandler(), createWatchdog());
    exe.setAntRun(project);
    exe.setWorkingDirectory(dir);
    exe.setVMLauncher(vmLauncher);
    String[] environment = env.getVariables();
    if (environment != null) \{
        for (int i = 0; i < environment.length; i++) \{
            log(\"Setting environment variable: \" + environment[i], MSG_VERBOSE);
        \}
    \}
    exe.setNewenvironment(newEnvironment);
    exe.setEnvironment(environment);
    return exe;
\}" shape=ellipse]
97 [label="4:Update@UPDATE" shape=ellipse]
98 [label="4:CtInvocationImpl@getBaseDirectory()" shape=ellipse]
5 -> 3 [label="AST"];
5 -> 4 [label="AST"];
5 -> 12 [label="Control Dep"];
5 -> 11 [label="Control Dep"];
5 -> 6 [label="Control Dep"];
5 -> 10 [label="Control Dep"];
5 -> 7 [label="Control Dep"];
5 -> 9 [label="Control Dep"];
6 -> 41 [label="Define-Use"];
9 -> 6 [label="Data Dep"];
10 -> 8 [label="AST"];
10 -> 9 [label="AST"];
10 -> 7 [label="AST"];
10 -> 97 [label="Action"];
11 -> 6 [label="AST"];
11 -> 10 [label="AST"];
12 -> 11 [label="AST"];
13 -> 5 [label="AST"];
13 -> 12 [label="AST"];
19 -> 17 [label="AST"];
19 -> 18 [label="AST"];
19 -> 16 [label="AST"];
21 -> 15 [label="AST"];
21 -> 14 [label="AST"];
21 -> 19 [label="AST"];
21 -> 20 [label="AST"];
26 -> 25 [label="AST"];
26 -> 24 [label="AST"];
29 -> 28 [label="AST"];
29 -> 27 [label="AST"];
30 -> 26 [label="AST"];
30 -> 29 [label="AST"];
31 -> 35 [label="Define-Use"];
31 -> 40 [label="Define-Use"];
31 -> 45 [label="Define-Use"];
31 -> 85 [label="Define-Use"];
31 -> 90 [label="Define-Use"];
31 -> 93 [label="Define-Use"];
32 -> 31 [label="AST"];
32 -> 22 [label="AST"];
32 -> 30 [label="AST"];
37 -> 34 [label="AST"];
37 -> 35 [label="AST"];
37 -> 33 [label="AST"];
37 -> 36 [label="AST"];
42 -> 39 [label="AST"];
42 -> 40 [label="AST"];
42 -> 38 [label="AST"];
42 -> 41 [label="AST"];
47 -> 44 [label="AST"];
47 -> 45 [label="AST"];
47 -> 43 [label="AST"];
47 -> 46 [label="AST"];
49 -> 48 [label="AST"];
52 -> 54 [label="Data Dep"];
53 -> 51 [label="AST"];
53 -> 52 [label="AST"];
53 -> 50 [label="AST"];
54 -> 56 [label="Define-Use"];
54 -> 64 [label="Define-Use"];
54 -> 73 [label="Define-Use"];
54 -> 75 [label="Define-Use"];
54 -> 91 [label="Define-Use"];
55 -> 54 [label="AST"];
55 -> 49 [label="AST"];
55 -> 53 [label="AST"];
58 -> 56 [label="AST"];
58 -> 57 [label="AST"];
58 -> 81 [label="Control Dep"];
58 -> 80 [label="Control Dep"];
58 -> 62 [label="Control Dep"];
58 -> 60 [label="Control Dep"];
58 -> 67 [label="Control Dep"];
58 -> 63 [label="Control Dep"];
58 -> 66 [label="Control Dep"];
58 -> 64 [label="Control Dep"];
58 -> 69 [label="Control Dep"];
58 -> 68 [label="Control Dep"];
61 -> 63 [label="Define-Use"];
61 -> 74 [label="Define-Use"];
62 -> 61 [label="AST"];
62 -> 59 [label="AST"];
62 -> 60 [label="AST"];
64 -> 65 [label="AST"];
66 -> 64 [label="AST"];
67 -> 63 [label="AST"];
67 -> 66 [label="AST"];
67 -> 79 [label="Control Dep"];
67 -> 78 [label="Control Dep"];
67 -> 70 [label="Control Dep"];
67 -> 76 [label="Control Dep"];
67 -> 72 [label="Control Dep"];
67 -> 75 [label="Control Dep"];
67 -> 73 [label="Control Dep"];
67 -> 74 [label="Control Dep"];
67 -> 77 [label="Control Dep"];
68 -> 74 [label="Define-Use"];
69 -> 68 [label="AST"];
75 -> 73 [label="AST"];
75 -> 74 [label="AST"];
76 -> 72 [label="AST"];
76 -> 75 [label="AST"];
78 -> 71 [label="AST"];
78 -> 70 [label="AST"];
78 -> 76 [label="AST"];
78 -> 77 [label="AST"];
79 -> 78 [label="AST"];
80 -> 62 [label="AST"];
80 -> 67 [label="AST"];
80 -> 69 [label="AST"];
80 -> 79 [label="AST"];
81 -> 80 [label="AST"];
82 -> 58 [label="AST"];
82 -> 81 [label="AST"];
87 -> 84 [label="AST"];
87 -> 85 [label="AST"];
87 -> 83 [label="AST"];
87 -> 86 [label="AST"];
92 -> 89 [label="AST"];
92 -> 90 [label="AST"];
92 -> 88 [label="AST"];
92 -> 91 [label="AST"];
94 -> 93 [label="AST"];
95 -> 13 [label="AST"];
95 -> 21 [label="AST"];
95 -> 32 [label="AST"];
95 -> 37 [label="AST"];
95 -> 42 [label="AST"];
95 -> 47 [label="AST"];
95 -> 55 [label="AST"];
95 -> 82 [label="AST"];
95 -> 87 [label="AST"];
95 -> 92 [label="AST"];
95 -> 94 [label="AST"];
96 -> 1 [label="AST"];
96 -> 0 [label="AST"];
96 -> 2 [label="AST"];
96 -> 95 [label="AST"];
97 -> 98 [label="Action"];
}