digraph "loadClass#?,String" {
0 [label="2:CtTypeReferenceImpl@Class" shape=ellipse]
1 [label="2:CtVirtualElement@loadClass" shape=ellipse]
2 [label="2:CtParameterImpl@String classname" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
4 [label="2:CtTypeReferenceImpl@Exception" shape=ellipse]
5 [label="3:CtFieldReadImpl@m_classpath" shape=ellipse]
6 [label="3:CtLiteralImpl@null" shape=ellipse]
7 [label="3:CtBinaryOperatorImpl@m_classpath == null" shape=ellipse]
8 [label="4:CtExecutableReferenceImpl@forName(java.lang.String)" shape=ellipse]
9 [label="4:CtVirtualElement@forName" shape=ellipse]
10 [label="4:CtTypeAccessImpl@Class" shape=ellipse]
11 [label="4:CtVariableReadImpl@classname" shape=ellipse]
12 [label="4:CtInvocationImpl@Class.forName(classname)" shape=ellipse]
13 [label="4:CtReturnImpl@return Class.forName(classname)" shape=ellipse]
14 [label="3:CtBlockImpl@\{
    return Class.forName(classname);
\}" shape=ellipse]
15 [label="6:CtTypeReferenceImpl@AntClassLoader" shape=ellipse]
16 [label="6:CtTypeReferenceImpl@AntClassLoader" shape=ellipse]
17 [label="6:CtFieldReadImpl@project" shape=ellipse]
18 [label="6:CtFieldReadImpl@m_classpath" shape=ellipse]
19 [label="6:CtConstructorCallImpl@new AntClassLoader(project, m_classpath)" shape=ellipse]
20 [label="6:CtVirtualElement@al" shape=ellipse]
21 [label="6:CtLocalVariableImpl@AntClassLoader al = new AntClassLoader(project, m_classpath)" shape=ellipse]
22 [label="7:CtTypeReferenceImpl@Class" shape=ellipse]
23 [label="7:CtExecutableReferenceImpl@loadClass(java.lang.String)" shape=ellipse]
24 [label="7:CtVirtualElement@loadClass" shape=ellipse]
25 [label="7:CtVariableReadImpl@al" shape=ellipse]
26 [label="7:CtVariableReadImpl@classname" shape=ellipse]
27 [label="7:CtInvocationImpl@al.loadClass(classname)" shape=ellipse]
28 [label="7:CtVirtualElement@c" shape=ellipse]
29 [label="7:CtLocalVariableImpl@Class c = al.loadClass(classname)" shape=ellipse]
30 [label="8:CtExecutableReferenceImpl@initializeClass(java.lang.Class)" shape=ellipse]
31 [label="8:CtVirtualElement@initializeClass" shape=ellipse]
32 [label="8:CtTypeAccessImpl@AntClassLoader" shape=ellipse]
33 [label="8:CtVariableReadImpl@c" shape=ellipse]
34 [label="8:CtInvocationImpl@AntClassLoader.initializeClass(c)" shape=ellipse]
35 [label="9:CtVariableReadImpl@c" shape=ellipse]
36 [label="9:CtReturnImpl@return c" shape=ellipse]
37 [label="5:CtBlockImpl@\{
    AntClassLoader al = new AntClassLoader(project, m_classpath);
    Class c = al.loadClass(classname);
    AntClassLoader.initializeClass(c);
    return c;
\}" shape=ellipse]
38 [label="3:CtIfImpl@if (m_classpath == null) \{
    return Class.forName(classname);
\} else \{
    AntClassLoader al = new AntClassLoader(project, m_classpath);
    Class c = al.loadClass(classname);
    AntClassLoader.initializeClass(c);
    return c;
\}" shape=ellipse]
39 [label="2:CtBlockImpl@\{
    if (m_classpath == null) \{
        return Class.forName(classname);
    \} else \{
        AntClassLoader al = new AntClassLoader(project, m_classpath);
        Class c = al.loadClass(classname);
        AntClassLoader.initializeClass(c);
        return c;
    \}
\}" shape=ellipse]
40 [label="2:CtMethodImpl@private Class loadClass(String classname) throws Exception \{
    if (m_classpath == null) \{
        return Class.forName(classname);
    \} else \{
        AntClassLoader al = new AntClassLoader(project, m_classpath);
        Class c = al.loadClass(classname);
        AntClassLoader.initializeClass(c);
        return c;
    \}
\}" shape=ellipse]
41 [label="6:Delete@DELETE" shape=ellipse]
42 [label="6:Insert@INSERT" shape=ellipse]
43 [label="6:CtInvocationImpl@getProject()" shape=ellipse]
2 -> 3 [label="AST"];
7 -> 5 [label="AST"];
7 -> 6 [label="AST"];
7 -> 14 [label="Control Dep"];
7 -> 13 [label="Control Dep"];
7 -> 12 [label="Control Dep"];
7 -> 8 [label="Control Dep"];
7 -> 10 [label="Control Dep"];
7 -> 11 [label="Control Dep"];
7 -> 37 [label="Control Dep"];
7 -> 21 [label="Control Dep"];
7 -> 19 [label="Control Dep"];
7 -> 17 [label="Control Dep"];
7 -> 18 [label="Control Dep"];
7 -> 29 [label="Control Dep"];
7 -> 27 [label="Control Dep"];
7 -> 23 [label="Control Dep"];
7 -> 25 [label="Control Dep"];
7 -> 26 [label="Control Dep"];
7 -> 34 [label="Control Dep"];
7 -> 30 [label="Control Dep"];
7 -> 32 [label="Control Dep"];
7 -> 33 [label="Control Dep"];
7 -> 36 [label="Control Dep"];
7 -> 35 [label="Control Dep"];
12 -> 9 [label="AST"];
12 -> 10 [label="AST"];
12 -> 8 [label="AST"];
12 -> 11 [label="AST"];
13 -> 12 [label="AST"];
14 -> 13 [label="AST"];
17 -> 20 [label="Data Dep"];
17 -> 41 [label="Action"];
18 -> 20 [label="Data Dep"];
19 -> 17 [label="AST"];
19 -> 18 [label="AST"];
19 -> 42 [label="Action"];
20 -> 25 [label="Define-Use"];
21 -> 20 [label="AST"];
21 -> 15 [label="AST"];
21 -> 19 [label="AST"];
25 -> 28 [label="Data Dep"];
26 -> 28 [label="Data Dep"];
27 -> 24 [label="AST"];
27 -> 25 [label="AST"];
27 -> 23 [label="AST"];
27 -> 26 [label="AST"];
28 -> 33 [label="Define-Use"];
28 -> 35 [label="Define-Use"];
29 -> 28 [label="AST"];
29 -> 22 [label="AST"];
29 -> 27 [label="AST"];
34 -> 31 [label="AST"];
34 -> 32 [label="AST"];
34 -> 30 [label="AST"];
34 -> 33 [label="AST"];
36 -> 35 [label="AST"];
37 -> 21 [label="AST"];
37 -> 29 [label="AST"];
37 -> 34 [label="AST"];
37 -> 36 [label="AST"];
38 -> 7 [label="AST"];
38 -> 14 [label="AST"];
38 -> 37 [label="AST"];
39 -> 38 [label="AST"];
40 -> 1 [label="AST"];
40 -> 0 [label="AST"];
40 -> 2 [label="AST"];
40 -> 4 [label="AST"];
40 -> 39 [label="AST"];
42 -> 43 [label="Action"];
}