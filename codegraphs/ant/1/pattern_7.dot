digraph "Pattern" {
0 [label="testTail#?#2:INSERT
testTailSkip#?#2:INSERT
testTailLines#?#2:INSERT
testTailLinesSkip#?#2:INSERT
testHead#?#2:INSERT
testHeadSkip#?#2:INSERT" shape=ellipse]
1 [label="testTail#?#2:public void testTail() throws IOException \{
    executeTarget(\"testTail\");
    File expected = FILE_UTILS.resolveFile(getProject().getBaseDir(), \"expected/head-tail.tail.test\");
    File result = new File(getProject().getProperty(\"output\") + \"/head-tail.tail.test\");
    assertTrue(\"testTail: Result not like expected\", FILE_UTILS.contentEquals(expected, result));
\}
testTailSkip#?#2:public void testTailSkip() throws IOException \{
    executeTarget(\"testTailSkip\");
    File expected = FILE_UTILS.resolveFile(getProject().getBaseDir(), \"expected/head-tail.tailSkip.test\");
    File result = new File(getProject().getProperty(\"output\") + \"/head-tail.tailSkip.test\");
    assertTrue(\"testTailSkip: Result not like expected\", FILE_UTILS.contentEquals(expected, result));
\}
testTailLines#?#2:public void testTailLines() throws IOException \{
    executeTarget(\"testTailLines\");
    File expected = FILE_UTILS.resolveFile(getProject().getBaseDir(), \"expected/head-tail.tailLines.test\");
    File result = new File(getProject().getProperty(\"output\") + \"/head-tail.tailLines.test\");
    assertTrue(\"testTailLines: Result not like expected\", FILE_UTILS.contentEquals(expected, result));
\}
testTailLinesSkip#?#2:public void testTailLinesSkip() throws IOException \{
    executeTarget(\"testTailLinesSkip\");
    File expected = FILE_UTILS.resolveFile(getProject().getBaseDir(), \"expected/head-tail.tailLinesSkip.test\");
    File result = new File(getProject().getProperty(\"output\") + \"/head-tail.tailLinesSkip.test\");
    assertTrue(\"testTailLinesSkip: Result not like expected\", FILE_UTILS.contentEquals(expected, result));
\}
testHead#?#2:public void testHead() throws IOException \{
    executeTarget(\"testHead\");
    File expected = FILE_UTILS.resolveFile(getProject().getBaseDir(), \"expected/head-tail.head.test\");
    File result = new File(getProject().getProperty(\"output\") + \"/head-tail.head.test\");
    assertTrue(\"testHead: Result not like expected\", FILE_UTILS.contentEquals(expected, result));
\}
testHeadSkip#?#2:public void testHeadSkip() throws IOException \{
    executeTarget(\"testHeadSkip\");
    File expected = FILE_UTILS.resolveFile(getProject().getBaseDir(), \"expected/head-tail.headSkip.test\");
    File result = new File(getProject().getProperty(\"output\") + \"/head-tail.headSkip.test\");
    assertTrue(\"testHeadSkip: Result not like expected\", FILE_UTILS.contentEquals(expected, result));
\}" shape=ellipse]
2 [label="testTail#?#2:testTail
testTailSkip#?#2:testTailSkip
testTailLines#?#2:testTailLines
testTailLinesSkip#?#2:testTailLinesSkip
testHead#?#2:testHead
testHeadSkip#?#2:testHeadSkip" shape=ellipse]
3 [label="testTail#?#2:void
testTailSkip#?#2:void
testTailLines#?#2:void
testTailLinesSkip#?#2:void
testHead#?#2:void
testHeadSkip#?#2:void" shape=ellipse]
4 [label="testTail#?#2:IOException
testTailSkip#?#2:IOException
testTailLines#?#2:IOException
testTailLinesSkip#?#2:IOException
testHead#?#2:IOException
testHeadSkip#?#2:IOException" shape=ellipse]
5 [label="testTail#?#-1:
testTailSkip#?#-1:
testTailLines#?#-1:
testTailLinesSkip#?#-1:
testHead#?#-1:
testHeadSkip#?#-1:" shape=ellipse]
6 [label="testTail#?#2:\{
    executeTarget(\"testTail\");
    File expected = FILE_UTILS.resolveFile(getProject().getBaseDir(), \"expected/head-tail.tail.test\");
    File result = new File(getProject().getProperty(\"output\") + \"/head-tail.tail.test\");
    assertTrue(\"testTail: Result not like expected\", FILE_UTILS.contentEquals(expected, result));
\}
testTailSkip#?#2:\{
    executeTarget(\"testTailSkip\");
    File expected = FILE_UTILS.resolveFile(getProject().getBaseDir(), \"expected/head-tail.tailSkip.test\");
    File result = new File(getProject().getProperty(\"output\") + \"/head-tail.tailSkip.test\");
    assertTrue(\"testTailSkip: Result not like expected\", FILE_UTILS.contentEquals(expected, result));
\}
testTailLines#?#2:\{
    executeTarget(\"testTailLines\");
    File expected = FILE_UTILS.resolveFile(getProject().getBaseDir(), \"expected/head-tail.tailLines.test\");
    File result = new File(getProject().getProperty(\"output\") + \"/head-tail.tailLines.test\");
    assertTrue(\"testTailLines: Result not like expected\", FILE_UTILS.contentEquals(expected, result));
\}
testTailLinesSkip#?#2:\{
    executeTarget(\"testTailLinesSkip\");
    File expected = FILE_UTILS.resolveFile(getProject().getBaseDir(), \"expected/head-tail.tailLinesSkip.test\");
    File result = new File(getProject().getProperty(\"output\") + \"/head-tail.tailLinesSkip.test\");
    assertTrue(\"testTailLinesSkip: Result not like expected\", FILE_UTILS.contentEquals(expected, result));
\}
testHead#?#2:\{
    executeTarget(\"testHead\");
    File expected = FILE_UTILS.resolveFile(getProject().getBaseDir(), \"expected/head-tail.head.test\");
    File result = new File(getProject().getProperty(\"output\") + \"/head-tail.head.test\");
    assertTrue(\"testHead: Result not like expected\", FILE_UTILS.contentEquals(expected, result));
\}
testHeadSkip#?#2:\{
    executeTarget(\"testHeadSkip\");
    File expected = FILE_UTILS.resolveFile(getProject().getBaseDir(), \"expected/head-tail.headSkip.test\");
    File result = new File(getProject().getProperty(\"output\") + \"/head-tail.headSkip.test\");
    assertTrue(\"testHeadSkip: Result not like expected\", FILE_UTILS.contentEquals(expected, result));
\}" shape=ellipse]
7 [label="testTail#?#3:executeTarget(\"testTail\")
testTailSkip#?#3:executeTarget(\"testTailSkip\")
testTailLines#?#3:executeTarget(\"testTailLines\")
testTailLinesSkip#?#3:executeTarget(\"testTailLinesSkip\")
testHead#?#3:executeTarget(\"testHead\")
testHeadSkip#?#3:executeTarget(\"testHeadSkip\")" shape=ellipse]
8 [label="testTail#?#4:File expected = FILE_UTILS.resolveFile(getProject().getBaseDir(), \"expected/head-tail.tail.test\")
testTailSkip#?#4:File expected = FILE_UTILS.resolveFile(getProject().getBaseDir(), \"expected/head-tail.tailSkip.test\")
testTailLines#?#4:File expected = FILE_UTILS.resolveFile(getProject().getBaseDir(), \"expected/head-tail.tailLines.test\")
testTailLinesSkip#?#4:File expected = FILE_UTILS.resolveFile(getProject().getBaseDir(), \"expected/head-tail.tailLinesSkip.test\")
testHead#?#4:File expected = FILE_UTILS.resolveFile(getProject().getBaseDir(), \"expected/head-tail.head.test\")
testHeadSkip#?#4:File expected = FILE_UTILS.resolveFile(getProject().getBaseDir(), \"expected/head-tail.headSkip.test\")" shape=ellipse]
9 [label="testTail#?#6:File result = new File(getProject().getProperty(\"output\") + \"/head-tail.tail.test\")
testTailSkip#?#6:File result = new File(getProject().getProperty(\"output\") + \"/head-tail.tailSkip.test\")
testTailLines#?#6:File result = new File(getProject().getProperty(\"output\") + \"/head-tail.tailLines.test\")
testTailLinesSkip#?#6:File result = new File(getProject().getProperty(\"output\") + \"/head-tail.tailLinesSkip.test\")
testHead#?#6:File result = new File(getProject().getProperty(\"output\") + \"/head-tail.head.test\")
testHeadSkip#?#6:File result = new File(getProject().getProperty(\"output\") + \"/head-tail.headSkip.test\")" shape=ellipse]
10 [label="testTail#?#7:assertTrue(\"testTail: Result not like expected\", FILE_UTILS.contentEquals(expected, result))
testTailSkip#?#7:assertTrue(\"testTailSkip: Result not like expected\", FILE_UTILS.contentEquals(expected, result))
testTailLines#?#7:assertTrue(\"testTailLines: Result not like expected\", FILE_UTILS.contentEquals(expected, result))
testTailLinesSkip#?#7:assertTrue(\"testTailLinesSkip: Result not like expected\", FILE_UTILS.contentEquals(expected, result))
testHead#?#7:assertTrue(\"testHead: Result not like expected\", FILE_UTILS.contentEquals(expected, result))
testHeadSkip#?#7:assertTrue(\"testHeadSkip: Result not like expected\", FILE_UTILS.contentEquals(expected, result))" shape=ellipse]
11 [label="testTail#?#2:public
testTailSkip#?#2:public
testTailLines#?#2:public
testTailLinesSkip#?#2:public
testHead#?#2:public
testHeadSkip#?#2:public" shape=ellipse]
12 [label="testTail#?#2:VE: ThrownTypes_testTail
testTailSkip#?#2:VE: ThrownTypes_testTailSkip
testTailLines#?#2:VE: ThrownTypes_testTailLines
testTailLinesSkip#?#2:VE: ThrownTypes_testTailLinesSkip
testHead#?#2:VE: ThrownTypes_testHead
testHeadSkip#?#2:VE: ThrownTypes_testHeadSkip" shape=ellipse]
13 [label="testTail#?#2:VE: Modifiers_Method
testTailSkip#?#2:VE: Modifiers_Method
testTailLines#?#2:VE: Modifiers_Method
testTailLinesSkip#?#2:VE: Modifiers_Method
testHead#?#2:VE: Modifiers_Method
testHeadSkip#?#2:VE: Modifiers_Method" shape=ellipse]
14 [label="testTail#?#2:@Test
testTailSkip#?#2:@Test
testTailLines#?#2:@Test
testTailLinesSkip#?#2:@Test
testHead#?#2:@Test
testHeadSkip#?#2:@Test" shape=ellipse]
0 -> 14 [label="Action:6"];
1 -> 0 [label="Action:6"];
1 -> 2 [label="AST:6"];
1 -> 3 [label="AST:6"];
1 -> 4 [label="AST:6"];
1 -> 6 [label="AST:6"];
1 -> 11 [label="AST:6"];
1 -> 12 [label="AST:6"];
1 -> 13 [label="AST:6"];
4 -> 5 [label="AST:6"];
6 -> 7 [label="AST:6"];
6 -> 8 [label="AST:6"];
6 -> 9 [label="AST:6"];
6 -> 10 [label="AST:6"];
}