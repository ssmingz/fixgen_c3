digraph "execute#?" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@execute" shape=ellipse]
2 [label="2:CtTypeReferenceImpl@BuildException" shape=ellipse]
3 [label="3:CtFieldReadImpl@usedMatchingTask" shape=ellipse]
4 [label="4:CtExecutableReferenceImpl@log(java.lang.String)" shape=ellipse]
5 [label="4:CtVirtualElement@log" shape=ellipse]
6 [label="5:CtLiteralImpl@\"DEPRECATED - Use of the implicit FileSet is deprecated.  Use a nested fileset element\"" shape=ellipse]
7 [label="6:CtLiteralImpl@\" instead.\"" shape=ellipse]
8 [label="5:CtBinaryOperatorImpl@\"DEPRECATED - Use of the implicit FileSet is deprecated.  Use a nested fileset element\" + \" instead.\"" shape=ellipse]
9 [label="4:CtInvocationImpl@log(\"DEPRECATED - Use of the implicit FileSet is deprecated.  Use a nested fileset element\" + \" instead.\")" shape=ellipse]
10 [label="3:CtBlockImpl@\{
    log(\"DEPRECATED - Use of the implicit FileSet is deprecated.  Use a nested fileset element\" + \" instead.\");
\}" shape=ellipse]
11 [label="3:CtIfImpl@if (usedMatchingTask) \{
    log(\"DEPRECATED - Use of the implicit FileSet is deprecated.  Use a nested fileset element\" + \" instead.\");
\}" shape=ellipse]
12 [label="8:CtFieldReadImpl@file" shape=ellipse]
13 [label="8:CtLiteralImpl@null" shape=ellipse]
14 [label="8:CtBinaryOperatorImpl@(file == null)" shape=ellipse]
15 [label="8:CtFieldReadImpl@dir" shape=ellipse]
16 [label="8:CtLiteralImpl@null" shape=ellipse]
17 [label="8:CtBinaryOperatorImpl@(dir == null)" shape=ellipse]
18 [label="8:CtBinaryOperatorImpl@((file == null) && (dir == null))" shape=ellipse]
19 [label="8:CtExecutableReferenceImpl@size()" shape=ellipse]
20 [label="8:CtVirtualElement@size" shape=ellipse]
21 [label="8:CtFieldReadImpl@filesets" shape=ellipse]
22 [label="8:CtInvocationImpl@filesets.size()" shape=ellipse]
23 [label="8:CtLiteralImpl@0" shape=ellipse]
24 [label="8:CtBinaryOperatorImpl@(filesets.size() == 0)" shape=ellipse]
25 [label="8:CtBinaryOperatorImpl@((file == null) && (dir == null)) && (filesets.size() == 0)" shape=ellipse]
26 [label="9:CtTypeReferenceImpl@BuildException" shape=ellipse]
27 [label="10:CtLiteralImpl@\"At least one of the file or dir attributes, or a fileset element, must be set.\"" shape=ellipse]
28 [label="9:CtConstructorCallImpl@new BuildException(\"At least one of the file or dir attributes, or a fileset element, must be set.\")" shape=ellipse]
29 [label="9:CtThrowImpl@throw new BuildException(\"At least one of the file or dir attributes, or a fileset element, must be set.\")" shape=ellipse]
30 [label="8:CtBlockImpl@\{
    throw new BuildException(\"At least one of the file or dir attributes, or a fileset element, must be set.\");
\}" shape=ellipse]
31 [label="8:CtIfImpl@if (((file == null) && (dir == null)) && (filesets.size() == 0)) \{
    throw new BuildException(\"At least one of the file or dir attributes, or a fileset element, must be set.\");
\}" shape=ellipse]
32 [label="12:CtFieldReadImpl@file" shape=ellipse]
33 [label="12:CtLiteralImpl@null" shape=ellipse]
34 [label="12:CtBinaryOperatorImpl@file != null" shape=ellipse]
35 [label="13:CtExecutableReferenceImpl@exists()" shape=ellipse]
36 [label="13:CtVirtualElement@exists" shape=ellipse]
37 [label="13:CtFieldReadImpl@file" shape=ellipse]
38 [label="13:CtInvocationImpl@file.exists()" shape=ellipse]
39 [label="14:CtExecutableReferenceImpl@isDirectory()" shape=ellipse]
40 [label="14:CtVirtualElement@isDirectory" shape=ellipse]
41 [label="14:CtFieldReadImpl@file" shape=ellipse]
42 [label="14:CtInvocationImpl@file.isDirectory()" shape=ellipse]
43 [label="15:CtExecutableReferenceImpl@log(<unknown>)" shape=ellipse]
44 [label="15:CtVirtualElement@log" shape=ellipse]
45 [label="16:CtLiteralImpl@\"Directory \"" shape=ellipse]
46 [label="16:CtExecutableReferenceImpl@getAbsolutePath()" shape=ellipse]
47 [label="16:CtVirtualElement@getAbsolutePath" shape=ellipse]
48 [label="16:CtFieldReadImpl@file" shape=ellipse]
49 [label="16:CtInvocationImpl@file.getAbsolutePath()" shape=ellipse]
50 [label="16:CtBinaryOperatorImpl@(\"Directory \" + file.getAbsolutePath())" shape=ellipse]
51 [label="17:CtLiteralImpl@\" cannot be removed using the file attribute.  Use dir instead.\"" shape=ellipse]
52 [label="16:CtBinaryOperatorImpl@(\"Directory \" + file.getAbsolutePath()) + \" cannot be removed using the file attribute.  Use dir instead.\"" shape=ellipse]
53 [label="15:CtInvocationImpl@log((\"Directory \" + file.getAbsolutePath()) + \" cannot be removed using the file attribute.  Use dir instead.\")" shape=ellipse]
54 [label="14:CtBlockImpl@\{
    log((\"Directory \" + file.getAbsolutePath()) + \" cannot be removed using the file attribute.  Use dir instead.\");
\}" shape=ellipse]
55 [label="19:CtExecutableReferenceImpl@log(<unknown>)" shape=ellipse]
56 [label="19:CtVirtualElement@log" shape=ellipse]
57 [label="19:CtLiteralImpl@\"Deleting: \"" shape=ellipse]
58 [label="19:CtExecutableReferenceImpl@getAbsolutePath()" shape=ellipse]
59 [label="19:CtVirtualElement@getAbsolutePath" shape=ellipse]
60 [label="19:CtFieldReadImpl@file" shape=ellipse]
61 [label="19:CtInvocationImpl@file.getAbsolutePath()" shape=ellipse]
62 [label="19:CtBinaryOperatorImpl@\"Deleting: \" + file.getAbsolutePath()" shape=ellipse]
63 [label="19:CtInvocationImpl@log(\"Deleting: \" + file.getAbsolutePath())" shape=ellipse]
64 [label="20:CtExecutableReferenceImpl@delete()" shape=ellipse]
65 [label="20:CtVirtualElement@delete" shape=ellipse]
66 [label="20:CtFieldReadImpl@file" shape=ellipse]
67 [label="20:CtInvocationImpl@file.delete()" shape=ellipse]
68 [label="20:CtUnaryOperatorImpl@!file.delete()" shape=ellipse]
69 [label="21:CtTypeReferenceImpl@BuildException" shape=ellipse]
70 [label="21:CtLiteralImpl@\"Unable to delete file \"" shape=ellipse]
71 [label="21:CtExecutableReferenceImpl@getAbsolutePath()" shape=ellipse]
72 [label="21:CtVirtualElement@getAbsolutePath" shape=ellipse]
73 [label="21:CtFieldReadImpl@file" shape=ellipse]
74 [label="21:CtInvocationImpl@file.getAbsolutePath()" shape=ellipse]
75 [label="21:CtBinaryOperatorImpl@\"Unable to delete file \" + file.getAbsolutePath()" shape=ellipse]
76 [label="21:CtConstructorCallImpl@new BuildException(\"Unable to delete file \" + file.getAbsolutePath())" shape=ellipse]
77 [label="21:CtThrowImpl@throw new BuildException(\"Unable to delete file \" + file.getAbsolutePath())" shape=ellipse]
78 [label="20:CtBlockImpl@\{
    throw new BuildException(\"Unable to delete file \" + file.getAbsolutePath());
\}" shape=ellipse]
79 [label="20:CtIfImpl@if (!file.delete()) \{
    throw new BuildException(\"Unable to delete file \" + file.getAbsolutePath());
\}" shape=ellipse]
80 [label="18:CtBlockImpl@\{
    log(\"Deleting: \" + file.getAbsolutePath());
    if (!file.delete()) \{
        throw new BuildException(\"Unable to delete file \" + file.getAbsolutePath());
    \}
\}" shape=ellipse]
81 [label="14:CtIfImpl@if (file.isDirectory()) \{
    log((\"Directory \" + file.getAbsolutePath()) + \" cannot be removed using the file attribute.  Use dir instead.\");
\} else \{
    log(\"Deleting: \" + file.getAbsolutePath());
    if (!file.delete()) \{
        throw new BuildException(\"Unable to delete file \" + file.getAbsolutePath());
    \}
\}" shape=ellipse]
82 [label="13:CtBlockImpl@\{
    if (file.isDirectory()) \{
        log((\"Directory \" + file.getAbsolutePath()) + \" cannot be removed using the file attribute.  Use dir instead.\");
    \} else \{
        log(\"Deleting: \" + file.getAbsolutePath());
        if (!file.delete()) \{
            throw new BuildException(\"Unable to delete file \" + file.getAbsolutePath());
        \}
    \}
\}" shape=ellipse]
83 [label="25:CtExecutableReferenceImpl@log(<unknown>)" shape=ellipse]
84 [label="25:CtVirtualElement@log" shape=ellipse]
85 [label="25:CtLiteralImpl@\"Could not find file \"" shape=ellipse]
86 [label="25:CtExecutableReferenceImpl@getAbsolutePath()" shape=ellipse]
87 [label="25:CtVirtualElement@getAbsolutePath" shape=ellipse]
88 [label="25:CtFieldReadImpl@file" shape=ellipse]
89 [label="25:CtInvocationImpl@file.getAbsolutePath()" shape=ellipse]
90 [label="25:CtBinaryOperatorImpl@(\"Could not find file \" + file.getAbsolutePath())" shape=ellipse]
91 [label="25:CtLiteralImpl@\" to delete.\"" shape=ellipse]
92 [label="25:CtBinaryOperatorImpl@(\"Could not find file \" + file.getAbsolutePath()) + \" to delete.\"" shape=ellipse]
93 [label="25:CtInvocationImpl@log((\"Could not find file \" + file.getAbsolutePath()) + \" to delete.\")" shape=ellipse]
94 [label="24:CtBlockImpl@\{
    log((\"Could not find file \" + file.getAbsolutePath()) + \" to delete.\");
\}" shape=ellipse]
95 [label="13:CtIfImpl@if (file.exists()) \{
    if (file.isDirectory()) \{
        log((\"Directory \" + file.getAbsolutePath()) + \" cannot be removed using the file attribute.  Use dir instead.\");
    \} else \{
        log(\"Deleting: \" + file.getAbsolutePath());
        if (!file.delete()) \{
            throw new BuildException(\"Unable to delete file \" + file.getAbsolutePath());
        \}
    \}
\} else \{
    log((\"Could not find file \" + file.getAbsolutePath()) + \" to delete.\");
\}" shape=ellipse]
96 [label="12:CtBlockImpl@\{
    if (file.exists()) \{
        if (file.isDirectory()) \{
            log((\"Directory \" + file.getAbsolutePath()) + \" cannot be removed using the file attribute.  Use dir instead.\");
        \} else \{
            log(\"Deleting: \" + file.getAbsolutePath());
            if (!file.delete()) \{
                throw new BuildException(\"Unable to delete file \" + file.getAbsolutePath());
            \}
        \}
    \} else \{
        log((\"Could not find file \" + file.getAbsolutePath()) + \" to delete.\");
    \}
\}" shape=ellipse]
97 [label="12:CtIfImpl@if (file != null) \{
    if (file.exists()) \{
        if (file.isDirectory()) \{
            log((\"Directory \" + file.getAbsolutePath()) + \" cannot be removed using the file attribute.  Use dir instead.\");
        \} else \{
            log(\"Deleting: \" + file.getAbsolutePath());
            if (!file.delete()) \{
                throw new BuildException(\"Unable to delete file \" + file.getAbsolutePath());
            \}
        \}
    \} else \{
        log((\"Could not find file \" + file.getAbsolutePath()) + \" to delete.\");
    \}
\}" shape=ellipse]
98 [label="28:CtFieldReadImpl@dir" shape=ellipse]
99 [label="28:CtLiteralImpl@null" shape=ellipse]
100 [label="28:CtBinaryOperatorImpl@(dir != null)" shape=ellipse]
101 [label="28:CtExecutableReferenceImpl@exists()" shape=ellipse]
102 [label="28:CtVirtualElement@exists" shape=ellipse]
103 [label="28:CtFieldReadImpl@dir" shape=ellipse]
104 [label="28:CtInvocationImpl@dir.exists()" shape=ellipse]
105 [label="28:CtBinaryOperatorImpl@((dir != null) && dir.exists())" shape=ellipse]
106 [label="28:CtExecutableReferenceImpl@isDirectory()" shape=ellipse]
107 [label="28:CtVirtualElement@isDirectory" shape=ellipse]
108 [label="28:CtFieldReadImpl@dir" shape=ellipse]
109 [label="28:CtInvocationImpl@dir.isDirectory()" shape=ellipse]
110 [label="28:CtBinaryOperatorImpl@(((dir != null) && dir.exists()) && dir.isDirectory())" shape=ellipse]
111 [label="28:CtFieldReadImpl@usedMatchingTask" shape=ellipse]
112 [label="28:CtUnaryOperatorImpl@(!usedMatchingTask)" shape=ellipse]
113 [label="28:CtBinaryOperatorImpl@(((dir != null) && dir.exists()) && dir.isDirectory()) && (!usedMatchingTask)" shape=ellipse]
114 [label="29:CtExecutableReferenceImpl@log(<unknown>)" shape=ellipse]
115 [label="29:CtVirtualElement@log" shape=ellipse]
116 [label="29:CtLiteralImpl@\"Deleting directory \"" shape=ellipse]
117 [label="29:CtExecutableReferenceImpl@getAbsolutePath()" shape=ellipse]
118 [label="29:CtVirtualElement@getAbsolutePath" shape=ellipse]
119 [label="29:CtFieldReadImpl@dir" shape=ellipse]
120 [label="29:CtInvocationImpl@dir.getAbsolutePath()" shape=ellipse]
121 [label="29:CtBinaryOperatorImpl@\"Deleting directory \" + dir.getAbsolutePath()" shape=ellipse]
122 [label="29:CtInvocationImpl@log(\"Deleting directory \" + dir.getAbsolutePath())" shape=ellipse]
123 [label="30:CtExecutableReferenceImpl@removeDir(<unknown>)" shape=ellipse]
124 [label="30:CtVirtualElement@removeDir" shape=ellipse]
125 [label="30:CtFieldReadImpl@dir" shape=ellipse]
126 [label="30:CtInvocationImpl@removeDir(dir)" shape=ellipse]
127 [label="28:CtBlockImpl@\{
    log(\"Deleting directory \" + dir.getAbsolutePath());
    removeDir(dir);
\}" shape=ellipse]
128 [label="28:CtIfImpl@if ((((dir != null) && dir.exists()) && dir.isDirectory()) && (!usedMatchingTask)) \{
    log(\"Deleting directory \" + dir.getAbsolutePath());
    removeDir(dir);
\}" shape=ellipse]
129 [label="32:CtTypeReferenceImpl@int" shape=ellipse]
130 [label="32:CtLiteralImpl@0" shape=ellipse]
131 [label="32:CtVirtualElement@i" shape=ellipse]
132 [label="32:CtLocalVariableImpl@int i = 0" shape=ellipse]
133 [label="32:CtVariableReadImpl@i" shape=ellipse]
134 [label="32:CtExecutableReferenceImpl@size()" shape=ellipse]
135 [label="32:CtVirtualElement@size" shape=ellipse]
136 [label="32:CtFieldReadImpl@filesets" shape=ellipse]
137 [label="32:CtInvocationImpl@filesets.size()" shape=ellipse]
138 [label="32:CtBinaryOperatorImpl@i < filesets.size()" shape=ellipse]
139 [label="32:CtVariableWriteImpl@i" shape=ellipse]
140 [label="32:CtUnaryOperatorImpl@i++" shape=ellipse]
141 [label="33:CtTypeReferenceImpl@FileSet" shape=ellipse]
142 [label="33:CtExecutableReferenceImpl@elementAt(int)" shape=ellipse]
143 [label="33:CtVirtualElement@elementAt" shape=ellipse]
144 [label="33:CtFieldReadImpl@filesets" shape=ellipse]
145 [label="33:CtVariableReadImpl@i" shape=ellipse]
146 [label="33:CtInvocationImpl@((FileSet) (filesets.elementAt(i)))" shape=ellipse]
147 [label="33:CtTypeReferenceImpl@FileSet" shape=ellipse]
148 [label="33:CtVirtualElement@fs" shape=ellipse]
149 [label="33:CtLocalVariableImpl@FileSet fs = ((FileSet) (filesets.elementAt(i)))" shape=ellipse]
150 [label="34:CtTypeReferenceImpl@DirectoryScanner" shape=ellipse]
151 [label="34:CtExecutableReferenceImpl@getDirectoryScanner()" shape=ellipse]
152 [label="34:CtVirtualElement@getDirectoryScanner" shape=ellipse]
153 [label="34:CtVariableReadImpl@fs" shape=ellipse]
154 [label="34:CtFieldReadImpl@project" shape=ellipse]
155 [label="34:CtInvocationImpl@fs.getDirectoryScanner(project)" shape=ellipse]
156 [label="34:CtVirtualElement@ds" shape=ellipse]
157 [label="34:CtLocalVariableImpl@DirectoryScanner ds = fs.getDirectoryScanner(project)" shape=ellipse]
158 [label="35:CtVirtualElement@String[]" shape=ellipse]
159 [label="35:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
160 [label="35:CtExecutableReferenceImpl@getIncludedFiles()" shape=ellipse]
161 [label="35:CtVirtualElement@getIncludedFiles" shape=ellipse]
162 [label="35:CtVariableReadImpl@ds" shape=ellipse]
163 [label="35:CtInvocationImpl@ds.getIncludedFiles()" shape=ellipse]
164 [label="35:CtVirtualElement@files" shape=ellipse]
165 [label="35:CtLocalVariableImpl@String[] files = ds.getIncludedFiles()" shape=ellipse]
166 [label="36:CtExecutableReferenceImpl@removeFiles(<unknown>,java.lang.String[])" shape=ellipse]
167 [label="36:CtVirtualElement@removeFiles" shape=ellipse]
168 [label="36:CtExecutableReferenceImpl@getDir()" shape=ellipse]
169 [label="36:CtVirtualElement@getDir" shape=ellipse]
170 [label="36:CtVariableReadImpl@fs" shape=ellipse]
171 [label="36:CtFieldReadImpl@project" shape=ellipse]
172 [label="36:CtInvocationImpl@fs.getDir(project)" shape=ellipse]
173 [label="36:CtVariableReadImpl@files" shape=ellipse]
174 [label="36:CtInvocationImpl@removeFiles(fs.getDir(project), files)" shape=ellipse]
175 [label="32:CtBlockImpl@\{
    FileSet fs = ((FileSet) (filesets.elementAt(i)));
    DirectoryScanner ds = fs.getDirectoryScanner(project);
    String[] files = ds.getIncludedFiles();
    removeFiles(fs.getDir(project), files);
\}" shape=ellipse]
176 [label="32:CtForImpl@for (int i = 0; i < filesets.size(); i++) \{
    FileSet fs = ((FileSet) (filesets.elementAt(i)));
    DirectoryScanner ds = fs.getDirectoryScanner(project);
    String[] files = ds.getIncludedFiles();
    removeFiles(fs.getDir(project), files);
\}" shape=ellipse]
177 [label="38:CtFieldReadImpl@usedMatchingTask" shape=ellipse]
178 [label="38:CtFieldReadImpl@dir" shape=ellipse]
179 [label="38:CtLiteralImpl@null" shape=ellipse]
180 [label="38:CtBinaryOperatorImpl@(dir != null)" shape=ellipse]
181 [label="38:CtBinaryOperatorImpl@usedMatchingTask && (dir != null)" shape=ellipse]
182 [label="39:CtTypeReferenceImpl@DirectoryScanner" shape=ellipse]
183 [label="39:CtExecutableReferenceImpl@getDirectoryScanner()" shape=ellipse]
184 [label="39:CtVirtualElement@getDirectoryScanner" shape=ellipse]
185 [label="39:CtSuperAccessImpl@super" shape=ellipse]
186 [label="39:CtFieldReadImpl@dir" shape=ellipse]
187 [label="39:CtInvocationImpl@super.getDirectoryScanner(dir)" shape=ellipse]
188 [label="39:CtVirtualElement@ds" shape=ellipse]
189 [label="39:CtLocalVariableImpl@DirectoryScanner ds = super.getDirectoryScanner(dir)" shape=ellipse]
190 [label="40:CtVirtualElement@String[]" shape=ellipse]
191 [label="40:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
192 [label="40:CtExecutableReferenceImpl@getIncludedFiles()" shape=ellipse]
193 [label="40:CtVirtualElement@getIncludedFiles" shape=ellipse]
194 [label="40:CtVariableReadImpl@ds" shape=ellipse]
195 [label="40:CtInvocationImpl@ds.getIncludedFiles()" shape=ellipse]
196 [label="40:CtVirtualElement@files" shape=ellipse]
197 [label="40:CtLocalVariableImpl@String[] files = ds.getIncludedFiles()" shape=ellipse]
198 [label="41:CtExecutableReferenceImpl@removeFiles(<unknown>,java.lang.String[])" shape=ellipse]
199 [label="41:CtVirtualElement@removeFiles" shape=ellipse]
200 [label="41:CtFieldReadImpl@dir" shape=ellipse]
201 [label="41:CtVariableReadImpl@files" shape=ellipse]
202 [label="41:CtInvocationImpl@removeFiles(dir, files)" shape=ellipse]
203 [label="38:CtBlockImpl@\{
    DirectoryScanner ds = super.getDirectoryScanner(dir);
    String[] files = ds.getIncludedFiles();
    removeFiles(dir, files);
\}" shape=ellipse]
204 [label="38:CtIfImpl@if (usedMatchingTask && (dir != null)) \{
    DirectoryScanner ds = super.getDirectoryScanner(dir);
    String[] files = ds.getIncludedFiles();
    removeFiles(dir, files);
\}" shape=ellipse]
205 [label="2:CtBlockImpl@\{
    if (usedMatchingTask) \{
        log(\"DEPRECATED - Use of the implicit FileSet is deprecated.  Use a nested fileset element\" + \" instead.\");
    \}
    if (((file == null) && (dir == null)) && (filesets.size() == 0)) \{
        throw new BuildException(\"At least one of the file or dir attributes, or a fileset element, must be set.\");
    \}
    if (file != null) \{
        if (file.exists()) \{
            if (file.isDirectory()) \{
                log((\"Directory \" + file.getAbsolutePath()) + \" cannot be removed using the file attribute.  Use dir instead.\");
            \} else \{
                log(\"Deleting: \" + file.getAbsolutePath());
                if (!file.delete()) \{
                    throw new BuildException(\"Unable to delete file \" + file.getAbsolutePath());
                \}
            \}
        \} else \{
            log((\"Could not find file \" + file.getAbsolutePath()) + \" to delete.\");
        \}
    \}
    if ((((dir != null) && dir.exists()) && dir.isDirectory()) && (!usedMatchingTask)) \{
        log(\"Deleting directory \" + dir.getAbsolutePath());
        removeDir(dir);
    \}
    for (int i = 0; i < filesets.size(); i++) \{
        FileSet fs = ((FileSet) (filesets.elementAt(i)));
        DirectoryScanner ds = fs.getDirectoryScanner(project);
        String[] files = ds.getIncludedFiles();
        removeFiles(fs.getDir(project), files);
    \}
    if (usedMatchingTask && (dir != null)) \{
        DirectoryScanner ds = super.getDirectoryScanner(dir);
        String[] files = ds.getIncludedFiles();
        removeFiles(dir, files);
    \}
\}" shape=ellipse]
206 [label="2:CtMethodImpl@public void execute() throws BuildException \{
    if (usedMatchingTask) \{
        log(\"DEPRECATED - Use of the implicit FileSet is deprecated.  Use a nested fileset element\" + \" instead.\");
    \}
    if (((file == null) && (dir == null)) && (filesets.size() == 0)) \{
        throw new BuildException(\"At least one of the file or dir attributes, or a fileset element, must be set.\");
    \}
    if (file != null) \{
        if (file.exists()) \{
            if (file.isDirectory()) \{
                log((\"Directory \" + file.getAbsolutePath()) + \" cannot be removed using the file attribute.  Use dir instead.\");
            \} else \{
                log(\"Deleting: \" + file.getAbsolutePath());
                if (!file.delete()) \{
                    throw new BuildException(\"Unable to delete file \" + file.getAbsolutePath());
                \}
            \}
        \} else \{
            log((\"Could not find file \" + file.getAbsolutePath()) + \" to delete.\");
        \}
    \}
    if ((((dir != null) && dir.exists()) && dir.isDirectory()) && (!usedMatchingTask)) \{
        log(\"Deleting directory \" + dir.getAbsolutePath());
        removeDir(dir);
    \}
    for (int i = 0; i < filesets.size(); i++) \{
        FileSet fs = ((FileSet) (filesets.elementAt(i)));
        DirectoryScanner ds = fs.getDirectoryScanner(project);
        String[] files = ds.getIncludedFiles();
        removeFiles(fs.getDir(project), files);
    \}
    if (usedMatchingTask && (dir != null)) \{
        DirectoryScanner ds = super.getDirectoryScanner(dir);
        String[] files = ds.getIncludedFiles();
        removeFiles(dir, files);
    \}
\}" shape=ellipse]
207 [label="20:Insert@INSERT" shape=ellipse]
208 [label="20:CtBinaryOperatorImpl@(!quiet) && (!file.delete())" shape=ellipse]
209 [label="20:Move@MOVE" shape=ellipse]
3 -> 10 [label="Control Dep"];
3 -> 9 [label="Control Dep"];
3 -> 4 [label="Control Dep"];
3 -> 8 [label="Control Dep"];
3 -> 6 [label="Control Dep"];
3 -> 7 [label="Control Dep"];
8 -> 6 [label="AST"];
8 -> 7 [label="AST"];
9 -> 5 [label="AST"];
9 -> 4 [label="AST"];
9 -> 8 [label="AST"];
10 -> 9 [label="AST"];
11 -> 3 [label="AST"];
11 -> 10 [label="AST"];
14 -> 12 [label="AST"];
14 -> 13 [label="AST"];
17 -> 15 [label="AST"];
17 -> 16 [label="AST"];
18 -> 14 [label="AST"];
18 -> 17 [label="AST"];
22 -> 20 [label="AST"];
22 -> 21 [label="AST"];
22 -> 19 [label="AST"];
24 -> 22 [label="AST"];
24 -> 23 [label="AST"];
25 -> 18 [label="AST"];
25 -> 24 [label="AST"];
25 -> 30 [label="Control Dep"];
25 -> 29 [label="Control Dep"];
25 -> 28 [label="Control Dep"];
25 -> 27 [label="Control Dep"];
28 -> 27 [label="AST"];
29 -> 28 [label="AST"];
30 -> 29 [label="AST"];
31 -> 25 [label="AST"];
31 -> 30 [label="AST"];
34 -> 32 [label="AST"];
34 -> 33 [label="AST"];
34 -> 96 [label="Control Dep"];
34 -> 95 [label="Control Dep"];
34 -> 38 [label="Control Dep"];
34 -> 35 [label="Control Dep"];
34 -> 37 [label="Control Dep"];
38 -> 36 [label="AST"];
38 -> 37 [label="AST"];
38 -> 35 [label="AST"];
38 -> 82 [label="Control Dep"];
38 -> 81 [label="Control Dep"];
38 -> 42 [label="Control Dep"];
38 -> 39 [label="Control Dep"];
38 -> 41 [label="Control Dep"];
38 -> 94 [label="Control Dep"];
38 -> 93 [label="Control Dep"];
38 -> 83 [label="Control Dep"];
38 -> 92 [label="Control Dep"];
38 -> 90 [label="Control Dep"];
38 -> 85 [label="Control Dep"];
38 -> 89 [label="Control Dep"];
38 -> 86 [label="Control Dep"];
38 -> 88 [label="Control Dep"];
38 -> 91 [label="Control Dep"];
42 -> 40 [label="AST"];
42 -> 41 [label="AST"];
42 -> 39 [label="AST"];
42 -> 54 [label="Control Dep"];
42 -> 53 [label="Control Dep"];
42 -> 43 [label="Control Dep"];
42 -> 52 [label="Control Dep"];
42 -> 50 [label="Control Dep"];
42 -> 45 [label="Control Dep"];
42 -> 49 [label="Control Dep"];
42 -> 46 [label="Control Dep"];
42 -> 48 [label="Control Dep"];
42 -> 51 [label="Control Dep"];
42 -> 80 [label="Control Dep"];
42 -> 63 [label="Control Dep"];
42 -> 55 [label="Control Dep"];
42 -> 62 [label="Control Dep"];
42 -> 57 [label="Control Dep"];
42 -> 61 [label="Control Dep"];
42 -> 58 [label="Control Dep"];
42 -> 60 [label="Control Dep"];
42 -> 79 [label="Control Dep"];
42 -> 68 [label="Control Dep"];
42 -> 67 [label="Control Dep"];
42 -> 64 [label="Control Dep"];
42 -> 66 [label="Control Dep"];
49 -> 47 [label="AST"];
49 -> 48 [label="AST"];
49 -> 46 [label="AST"];
50 -> 45 [label="AST"];
50 -> 49 [label="AST"];
52 -> 50 [label="AST"];
52 -> 51 [label="AST"];
53 -> 44 [label="AST"];
53 -> 43 [label="AST"];
53 -> 52 [label="AST"];
54 -> 53 [label="AST"];
61 -> 59 [label="AST"];
61 -> 60 [label="AST"];
61 -> 58 [label="AST"];
62 -> 57 [label="AST"];
62 -> 61 [label="AST"];
63 -> 56 [label="AST"];
63 -> 55 [label="AST"];
63 -> 62 [label="AST"];
67 -> 65 [label="AST"];
67 -> 66 [label="AST"];
67 -> 64 [label="AST"];
68 -> 67 [label="AST"];
68 -> 78 [label="Control Dep"];
68 -> 77 [label="Control Dep"];
68 -> 76 [label="Control Dep"];
68 -> 75 [label="Control Dep"];
68 -> 70 [label="Control Dep"];
68 -> 74 [label="Control Dep"];
68 -> 71 [label="Control Dep"];
68 -> 73 [label="Control Dep"];
68 -> 209 [label="Action"];
74 -> 72 [label="AST"];
74 -> 73 [label="AST"];
74 -> 71 [label="AST"];
75 -> 70 [label="AST"];
75 -> 74 [label="AST"];
76 -> 75 [label="AST"];
77 -> 76 [label="AST"];
78 -> 77 [label="AST"];
79 -> 68 [label="AST"];
79 -> 78 [label="AST"];
79 -> 207 [label="Action"];
80 -> 63 [label="AST"];
80 -> 79 [label="AST"];
81 -> 42 [label="AST"];
81 -> 54 [label="AST"];
81 -> 80 [label="AST"];
82 -> 81 [label="AST"];
89 -> 87 [label="AST"];
89 -> 88 [label="AST"];
89 -> 86 [label="AST"];
90 -> 85 [label="AST"];
90 -> 89 [label="AST"];
92 -> 90 [label="AST"];
92 -> 91 [label="AST"];
93 -> 84 [label="AST"];
93 -> 83 [label="AST"];
93 -> 92 [label="AST"];
94 -> 93 [label="AST"];
95 -> 38 [label="AST"];
95 -> 82 [label="AST"];
95 -> 94 [label="AST"];
96 -> 95 [label="AST"];
97 -> 34 [label="AST"];
97 -> 96 [label="AST"];
100 -> 98 [label="AST"];
100 -> 99 [label="AST"];
104 -> 102 [label="AST"];
104 -> 103 [label="AST"];
104 -> 101 [label="AST"];
105 -> 100 [label="AST"];
105 -> 104 [label="AST"];
109 -> 107 [label="AST"];
109 -> 108 [label="AST"];
109 -> 106 [label="AST"];
110 -> 105 [label="AST"];
110 -> 109 [label="AST"];
112 -> 111 [label="AST"];
113 -> 110 [label="AST"];
113 -> 112 [label="AST"];
113 -> 127 [label="Control Dep"];
113 -> 122 [label="Control Dep"];
113 -> 114 [label="Control Dep"];
113 -> 121 [label="Control Dep"];
113 -> 116 [label="Control Dep"];
113 -> 120 [label="Control Dep"];
113 -> 117 [label="Control Dep"];
113 -> 119 [label="Control Dep"];
113 -> 126 [label="Control Dep"];
113 -> 123 [label="Control Dep"];
113 -> 125 [label="Control Dep"];
120 -> 118 [label="AST"];
120 -> 119 [label="AST"];
120 -> 117 [label="AST"];
121 -> 116 [label="AST"];
121 -> 120 [label="AST"];
122 -> 115 [label="AST"];
122 -> 114 [label="AST"];
122 -> 121 [label="AST"];
126 -> 124 [label="AST"];
126 -> 123 [label="AST"];
126 -> 125 [label="AST"];
127 -> 122 [label="AST"];
127 -> 126 [label="AST"];
128 -> 113 [label="AST"];
128 -> 127 [label="AST"];
131 -> 133 [label="Define-Use"];
132 -> 131 [label="AST"];
132 -> 129 [label="AST"];
132 -> 130 [label="AST"];
137 -> 135 [label="AST"];
137 -> 136 [label="AST"];
137 -> 134 [label="AST"];
138 -> 133 [label="AST"];
138 -> 137 [label="AST"];
138 -> 175 [label="Control Dep"];
138 -> 149 [label="Control Dep"];
138 -> 146 [label="Control Dep"];
138 -> 142 [label="Control Dep"];
138 -> 144 [label="Control Dep"];
138 -> 145 [label="Control Dep"];
138 -> 157 [label="Control Dep"];
138 -> 155 [label="Control Dep"];
138 -> 151 [label="Control Dep"];
138 -> 153 [label="Control Dep"];
138 -> 154 [label="Control Dep"];
138 -> 165 [label="Control Dep"];
138 -> 159 [label="Control Dep"];
138 -> 163 [label="Control Dep"];
138 -> 160 [label="Control Dep"];
138 -> 162 [label="Control Dep"];
138 -> 174 [label="Control Dep"];
138 -> 166 [label="Control Dep"];
138 -> 172 [label="Control Dep"];
138 -> 168 [label="Control Dep"];
138 -> 170 [label="Control Dep"];
138 -> 171 [label="Control Dep"];
138 -> 173 [label="Control Dep"];
139 -> 145 [label="Define-Use"];
140 -> 139 [label="AST"];
144 -> 148 [label="Data Dep"];
145 -> 148 [label="Data Dep"];
146 -> 143 [label="AST"];
146 -> 147 [label="AST"];
146 -> 144 [label="AST"];
146 -> 142 [label="AST"];
146 -> 145 [label="AST"];
148 -> 153 [label="Define-Use"];
148 -> 170 [label="Define-Use"];
149 -> 148 [label="AST"];
149 -> 141 [label="AST"];
149 -> 146 [label="AST"];
153 -> 156 [label="Data Dep"];
154 -> 156 [label="Data Dep"];
155 -> 152 [label="AST"];
155 -> 153 [label="AST"];
155 -> 151 [label="AST"];
155 -> 154 [label="AST"];
156 -> 162 [label="Define-Use"];
156 -> 194 [label="Define-Use"];
157 -> 156 [label="AST"];
157 -> 150 [label="AST"];
157 -> 155 [label="AST"];
159 -> 158 [label="AST"];
162 -> 164 [label="Data Dep"];
163 -> 161 [label="AST"];
163 -> 162 [label="AST"];
163 -> 160 [label="AST"];
164 -> 173 [label="Define-Use"];
164 -> 201 [label="Define-Use"];
165 -> 164 [label="AST"];
165 -> 159 [label="AST"];
165 -> 163 [label="AST"];
172 -> 169 [label="AST"];
172 -> 170 [label="AST"];
172 -> 168 [label="AST"];
172 -> 171 [label="AST"];
174 -> 167 [label="AST"];
174 -> 166 [label="AST"];
174 -> 172 [label="AST"];
174 -> 173 [label="AST"];
175 -> 149 [label="AST"];
175 -> 157 [label="AST"];
175 -> 165 [label="AST"];
175 -> 174 [label="AST"];
176 -> 132 [label="AST"];
176 -> 138 [label="AST"];
176 -> 140 [label="AST"];
176 -> 175 [label="AST"];
180 -> 178 [label="AST"];
180 -> 179 [label="AST"];
181 -> 177 [label="AST"];
181 -> 180 [label="AST"];
181 -> 203 [label="Control Dep"];
181 -> 189 [label="Control Dep"];
181 -> 187 [label="Control Dep"];
181 -> 183 [label="Control Dep"];
181 -> 185 [label="Control Dep"];
181 -> 186 [label="Control Dep"];
181 -> 197 [label="Control Dep"];
181 -> 191 [label="Control Dep"];
181 -> 195 [label="Control Dep"];
181 -> 192 [label="Control Dep"];
181 -> 194 [label="Control Dep"];
181 -> 202 [label="Control Dep"];
181 -> 198 [label="Control Dep"];
181 -> 200 [label="Control Dep"];
181 -> 201 [label="Control Dep"];
185 -> 188 [label="Data Dep"];
186 -> 188 [label="Data Dep"];
187 -> 184 [label="AST"];
187 -> 185 [label="AST"];
187 -> 183 [label="AST"];
187 -> 186 [label="AST"];
188 -> 194 [label="Define-Use"];
189 -> 188 [label="AST"];
189 -> 182 [label="AST"];
189 -> 187 [label="AST"];
191 -> 190 [label="AST"];
194 -> 196 [label="Data Dep"];
195 -> 193 [label="AST"];
195 -> 194 [label="AST"];
195 -> 192 [label="AST"];
196 -> 201 [label="Define-Use"];
197 -> 196 [label="AST"];
197 -> 191 [label="AST"];
197 -> 195 [label="AST"];
202 -> 199 [label="AST"];
202 -> 198 [label="AST"];
202 -> 200 [label="AST"];
202 -> 201 [label="AST"];
203 -> 189 [label="AST"];
203 -> 197 [label="AST"];
203 -> 202 [label="AST"];
204 -> 181 [label="AST"];
204 -> 203 [label="AST"];
205 -> 11 [label="AST"];
205 -> 31 [label="AST"];
205 -> 97 [label="AST"];
205 -> 128 [label="AST"];
205 -> 176 [label="AST"];
205 -> 204 [label="AST"];
206 -> 1 [label="AST"];
206 -> 0 [label="AST"];
206 -> 2 [label="AST"];
206 -> 205 [label="AST"];
207 -> 208 [label="Action"];
209 -> 208 [label="Action"];
}