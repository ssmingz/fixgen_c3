digraph "Pattern" {
0 [label="testOnErrorIgnore#?#3:UPDATE
testXmlnsFile#?#3:UPDATE
testNsAttributes#?#3:UPDATE
testImplicitOptional#?#3:UPDATE
testOverrideDefault#?#3:UPDATE
testElementOrder#?#3:UPDATE
testXmlns#?#3:UPDATE
testGlobal#?#3:UPDATE
testElementOrder2#?#3:UPDATE
testAntTypeTest#?#3:UPDATE
testDoubleDefault#?#3:UPDATE
test6#?#3:UPDATE" shape=ellipse]
1 [label="testOnErrorIgnore#?#3:expectLog(\"onerror.ignore\", \"\")
testXmlnsFile#?#3:expectLog(\"xmlns.file\", \"MyTask called\")
testNsAttributes#?#3:expectLog(\"ns.attributes\", \"hello world\")
testImplicitOptional#?#3:expectLog(\"implicit.optional\", \"Before implicitAfter implicit\")
testOverrideDefault#?#3:expectLog(\"override.default\", \"value is new\")
testElementOrder#?#3:expectLog(\"element.order\", \"Line 1Line 2\")
testXmlns#?#3:expectLog(\"xmlns\", \"MyTask called\")
testGlobal#?#3:expectLog(\"testGlobal\", \"worked\")
testElementOrder2#?#3:expectLog(\"element.order2\", \"Line 1Line 2Line 3\")
testAntTypeTest#?#3:expectLog(\"antTypeTest\", \"\")
testDoubleDefault#?#3:expectLog(\"doubledefault\", \"attribute is falseattribute is true\")
test6#?#3:expectLog(\"test6\", \"simpletask: worked\")" shape=ellipse]
2 [label="testOnErrorIgnore#?#2:\{
    expectLog(\"onerror.ignore\", \"\");
\}
testXmlnsFile#?#2:\{
    expectLog(\"xmlns.file\", \"MyTask called\");
\}
testNsAttributes#?#2:\{
    expectLog(\"ns.attributes\", \"hello world\");
\}
testImplicitOptional#?#2:\{
    expectLog(\"implicit.optional\", \"Before implicitAfter implicit\");
\}
testOverrideDefault#?#2:\{
    expectLog(\"override.default\", \"value is new\");
\}
testElementOrder#?#2:\{
    expectLog(\"element.order\", \"Line 1Line 2\");
\}
testXmlns#?#2:\{
    expectLog(\"xmlns\", \"MyTask called\");
\}
testGlobal#?#2:\{
    expectLog(\"testGlobal\", \"worked\");
\}
testElementOrder2#?#2:\{
    expectLog(\"element.order2\", \"Line 1Line 2Line 3\");
\}
testAntTypeTest#?#2:\{
    expectLog(\"antTypeTest\", \"\");
\}
testDoubleDefault#?#2:\{
    expectLog(\"doubledefault\", \"attribute is falseattribute is true\");
\}
test6#?#2:\{
    expectLog(\"test6\", \"simpletask: worked\");
\}" shape=ellipse]
3 [label="testOnErrorIgnore#?#2:public void testOnErrorIgnore() \{
    expectLog(\"onerror.ignore\", \"\");
\}
testXmlnsFile#?#2:public void testXmlnsFile() \{
    expectLog(\"xmlns.file\", \"MyTask called\");
\}
testNsAttributes#?#2:public void testNsAttributes() \{
    expectLog(\"ns.attributes\", \"hello world\");
\}
testImplicitOptional#?#2:public void testImplicitOptional() \{
    expectLog(\"implicit.optional\", \"Before implicitAfter implicit\");
\}
testOverrideDefault#?#2:public void testOverrideDefault() \{
    expectLog(\"override.default\", \"value is new\");
\}
testElementOrder#?#2:public void testElementOrder() \{
    expectLog(\"element.order\", \"Line 1Line 2\");
\}
testXmlns#?#2:public void testXmlns() \{
    expectLog(\"xmlns\", \"MyTask called\");
\}
testGlobal#?#2:public void testGlobal() \{
    expectLog(\"testGlobal\", \"worked\");
\}
testElementOrder2#?#2:public void testElementOrder2() \{
    expectLog(\"element.order2\", \"Line 1Line 2Line 3\");
\}
testAntTypeTest#?#2:public void testAntTypeTest() \{
    expectLog(\"antTypeTest\", \"\");
\}
testDoubleDefault#?#2:public void testDoubleDefault() \{
    expectLog(\"doubledefault\", \"attribute is falseattribute is true\");
\}
test6#?#2:public void test6() \{
    expectLog(\"test6\", \"simpletask: worked\");
\}" shape=ellipse]
4 [label="testOnErrorIgnore#?#3:expectLog
testXmlnsFile#?#3:expectLog
testNsAttributes#?#3:expectLog
testImplicitOptional#?#3:expectLog
testOverrideDefault#?#3:expectLog
testElementOrder#?#3:expectLog
testXmlns#?#3:expectLog
testGlobal#?#3:expectLog
testElementOrder2#?#3:expectLog
testAntTypeTest#?#3:expectLog
testDoubleDefault#?#3:expectLog
test6#?#3:expectLog" shape=ellipse]
5 [label="testOnErrorIgnore#?#-1:
testXmlnsFile#?#-1:
testNsAttributes#?#-1:
testImplicitOptional#?#-1:
testOverrideDefault#?#-1:
testElementOrder#?#-1:
testXmlns#?#-1:
testGlobal#?#-1:
testElementOrder2#?#-1:
testAntTypeTest#?#-1:
testDoubleDefault#?#-1:
test6#?#-1:" shape=ellipse]
6 [label="testOnErrorIgnore#?#-1:PlaceHold
testXmlnsFile#?#-1:PlaceHold
testNsAttributes#?#-1:PlaceHold
testImplicitOptional#?#-1:PlaceHold
testOverrideDefault#?#-1:PlaceHold
testElementOrder#?#-1:PlaceHold
testXmlns#?#-1:PlaceHold
testGlobal#?#-1:PlaceHold
testElementOrder2#?#-1:PlaceHold
testAntTypeTest#?#-1:PlaceHold
testDoubleDefault#?#-1:PlaceHold
test6#?#-1:PlaceHold" shape=ellipse]
7 [label="testOnErrorIgnore#?#-1:PlaceHold
testXmlnsFile#?#-1:PlaceHold
testNsAttributes#?#-1:PlaceHold
testImplicitOptional#?#-1:PlaceHold
testOverrideDefault#?#-1:PlaceHold
testElementOrder#?#-1:PlaceHold
testXmlns#?#-1:PlaceHold
testGlobal#?#-1:PlaceHold
testElementOrder2#?#-1:PlaceHold
testAntTypeTest#?#-1:PlaceHold
testDoubleDefault#?#-1:PlaceHold
test6#?#-1:PlaceHold" shape=ellipse]
8 [label="testOnErrorIgnore#?#3:expectLog(java.lang.String,java.lang.String)
testXmlnsFile#?#3:expectLog(java.lang.String,java.lang.String)
testNsAttributes#?#3:expectLog(java.lang.String,java.lang.String)
testImplicitOptional#?#3:expectLog(java.lang.String,java.lang.String)
testOverrideDefault#?#3:expectLog(java.lang.String,java.lang.String)
testElementOrder#?#3:expectLog(java.lang.String,java.lang.String)
testXmlns#?#3:expectLog(java.lang.String,java.lang.String)
testGlobal#?#3:expectLog(java.lang.String,java.lang.String)
testElementOrder2#?#3:expectLog(java.lang.String,java.lang.String)
testAntTypeTest#?#3:expectLog(java.lang.String,java.lang.String)
testDoubleDefault#?#3:expectLog(java.lang.String,java.lang.String)
test6#?#3:expectLog(java.lang.String,java.lang.String)" shape=ellipse]
9 [label="testOnErrorIgnore#?#-1:String
testXmlnsFile#?#-1:String
testNsAttributes#?#-1:String
testImplicitOptional#?#-1:String
testOverrideDefault#?#-1:String
testElementOrder#?#-1:String
testXmlns#?#-1:String
testGlobal#?#-1:String
testElementOrder2#?#-1:String
testAntTypeTest#?#-1:String
testDoubleDefault#?#-1:String
test6#?#-1:String" shape=ellipse]
10 [label="testOnErrorIgnore#?#-1:String
testXmlnsFile#?#-1:String
testNsAttributes#?#-1:String
testImplicitOptional#?#-1:String
testOverrideDefault#?#-1:String
testElementOrder#?#-1:String
testXmlns#?#-1:String
testGlobal#?#-1:String
testElementOrder2#?#-1:String
testAntTypeTest#?#-1:String
testDoubleDefault#?#-1:String
test6#?#-1:String" shape=ellipse]
11 [label="testOnErrorIgnore#?#3:\"onerror.ignore\"
testXmlnsFile#?#3:\"xmlns.file\"
testNsAttributes#?#3:\"ns.attributes\"
testImplicitOptional#?#3:\"implicit.optional\"
testOverrideDefault#?#3:\"override.default\"
testElementOrder#?#3:\"element.order\"
testXmlns#?#3:\"xmlns\"
testGlobal#?#3:\"worked\"
testElementOrder2#?#3:\"element.order2\"
testAntTypeTest#?#3:\"antTypeTest\"
testDoubleDefault#?#3:\"attribute is falseattribute is true\"
test6#?#3:\"simpletask: worked\"" shape=ellipse]
12 [label="testOnErrorIgnore#?#-1:String
testXmlnsFile#?#-1:String
testNsAttributes#?#-1:String
testImplicitOptional#?#-1:String
testOverrideDefault#?#-1:String
testElementOrder#?#-1:String
testXmlns#?#-1:String
testGlobal#?#-1:String
testElementOrder2#?#-1:String
testAntTypeTest#?#-1:String
testDoubleDefault#?#-1:String
test6#?#-1:String" shape=ellipse]
13 [label="testOnErrorIgnore#?#3:\"\"
testXmlnsFile#?#3:\"MyTask called\"
testNsAttributes#?#3:\"hello world\"
testImplicitOptional#?#3:\"Before implicitAfter implicit\"
testOverrideDefault#?#3:\"value is new\"
testElementOrder#?#3:\"Line 1Line 2\"
testXmlns#?#3:\"MyTask called\"
testGlobal#?#3:\"testGlobal\"
testElementOrder2#?#3:\"Line 1Line 2Line 3\"
testAntTypeTest#?#3:\"\"
testDoubleDefault#?#3:\"doubledefault\"
test6#?#3:\"test6\"" shape=ellipse]
14 [label="testOnErrorIgnore#?#-1:String
testXmlnsFile#?#-1:String
testNsAttributes#?#-1:String
testImplicitOptional#?#-1:String
testOverrideDefault#?#-1:String
testElementOrder#?#-1:String
testXmlns#?#-1:String
testGlobal#?#-1:String
testElementOrder2#?#-1:String
testAntTypeTest#?#-1:String
testDoubleDefault#?#-1:String
test6#?#-1:String" shape=ellipse]
15 [label="testOnErrorIgnore#?#5:assertEquals(\"\", buildRule.getLog())
testXmlnsFile#?#5:assertEquals(\"MyTask called\", buildRule.getLog())
testNsAttributes#?#5:assertEquals(\"hello world\", buildRule.getLog())
testImplicitOptional#?#5:assertEquals(\"Before implicitAfter implicit\", buildRule.getLog())
testOverrideDefault#?#5:assertEquals(\"value is new\", buildRule.getLog())
testElementOrder#?#5:assertEquals(\"Line 1Line 2\", buildRule.getLog())
testXmlns#?#5:assertEquals(\"MyTask called\", buildRule.getLog())
testGlobal#?#5:assertEquals(\"worked\", buildRule.getLog())
testElementOrder2#?#5:assertEquals(\"Line 1Line 2Line 3\", buildRule.getLog())
testAntTypeTest#?#5:assertEquals(\"\", buildRule.getLog())
testDoubleDefault#?#5:assertEquals(\"attribute is falseattribute is true\", buildRule.getLog())
test6#?#5:assertEquals(\"simpletask: worked\", buildRule.getLog())" shape=ellipse]
0 -> 15 [label="Action:12"];
1 -> 0 [label="Action:12"];
1 -> 4 [label="AST:12"];
1 -> 5 [label="AST:12"];
1 -> 8 [label="AST:12"];
1 -> 11 [label="AST:12"];
1 -> 13 [label="AST:12"];
2 -> 1 [label="AST:12"];
3 -> 2 [label="AST:12"];
5 -> 6 [label="AST:12"];
5 -> 7 [label="AST:12"];
8 -> 9 [label="AST:12"];
8 -> 10 [label="AST:12"];
11 -> 12 [label="AST:12"];
13 -> 14 [label="AST:12"];
}