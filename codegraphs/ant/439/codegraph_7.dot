digraph "execute#?" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@execute" shape=ellipse]
2 [label="2:CtTypeReferenceImpl@TaskException" shape=ellipse]
3 [label="3:CtTypeReferenceImpl@Method" shape=ellipse]
4 [label="3:CtLiteralImpl@null" shape=ellipse]
5 [label="3:CtVirtualElement@setProjectM" shape=ellipse]
6 [label="3:CtLocalVariableImpl@Method setProjectM = null" shape=ellipse]
7 [label="5:CtTypeReferenceImpl@Class" shape=ellipse]
8 [label="5:CtExecutableReferenceImpl@getClass()" shape=ellipse]
9 [label="5:CtVirtualElement@getClass" shape=ellipse]
10 [label="5:CtFieldReadImpl@proxy" shape=ellipse]
11 [label="5:CtInvocationImpl@proxy.getClass()" shape=ellipse]
12 [label="5:CtVirtualElement@c" shape=ellipse]
13 [label="5:CtLocalVariableImpl@Class c = proxy.getClass()" shape=ellipse]
14 [label="6:CtVariableWriteImpl@setProjectM" shape=ellipse]
15 [label="6:CtExecutableReferenceImpl@getMethod(java.lang.String,java.lang.Class[])" shape=ellipse]
16 [label="6:CtVirtualElement@getMethod" shape=ellipse]
17 [label="6:CtVariableReadImpl@c" shape=ellipse]
18 [label="6:CtLiteralImpl@\"setProject\"" shape=ellipse]
19 [label="6:CtNewArrayImpl@new Class[]\{ Project.class \}" shape=ellipse]
20 [label="6:CtFieldReadImpl@Project.class" shape=ellipse]
21 [label="6:CtInvocationImpl@c.getMethod(\"setProject\", new Class[]\{ Project.class \})" shape=ellipse]
22 [label="6:CtAssignmentImpl@setProjectM = c.getMethod(\"setProject\", new Class[]\{ Project.class \})" shape=ellipse]
23 [label="7:CtVariableReadImpl@setProjectM" shape=ellipse]
24 [label="7:CtLiteralImpl@null" shape=ellipse]
25 [label="7:CtBinaryOperatorImpl@setProjectM != null" shape=ellipse]
26 [label="8:CtExecutableReferenceImpl@invoke(java.lang.Object[])" shape=ellipse]
27 [label="8:CtVirtualElement@invoke" shape=ellipse]
28 [label="8:CtVariableReadImpl@setProjectM" shape=ellipse]
29 [label="8:CtFieldReadImpl@proxy" shape=ellipse]
30 [label="8:CtNewArrayImpl@new Object[]\{ project \}" shape=ellipse]
31 [label="8:CtFieldReadImpl@project" shape=ellipse]
32 [label="8:CtInvocationImpl@setProjectM.invoke(proxy, new Object[]\{ project \})" shape=ellipse]
33 [label="7:CtBlockImpl@\{
    setProjectM.invoke(proxy, new Object[]\{ project \});
\}" shape=ellipse]
34 [label="7:CtIfImpl@if (setProjectM != null) \{
    setProjectM.invoke(proxy, new Object[]\{ project \});
\}" shape=ellipse]
35 [label="4:CtBlockImpl@\{
    Class c = proxy.getClass();
    setProjectM = c.getMethod(\"setProject\", new Class[]\{ Project.class \});
    if (setProjectM != null) \{
        setProjectM.invoke(proxy, new Object[]\{ project \});
    \}
\}" shape=ellipse]
36 [label="10:CtVirtualElement@e" shape=ellipse]
37 [label="10:CtTypeReferenceImpl@NoSuchMethodException" shape=ellipse]
38 [label="10:CtCatchVariableImpl@NoSuchMethodException e" shape=ellipse]
39 [label="10:CtBlockImpl@\{
\}" shape=ellipse]
40 [label="10:CtCatchImpl@ catch (NoSuchMethodException e) \{
\}" shape=ellipse]
41 [label="11:CtVirtualElement@ex" shape=ellipse]
42 [label="11:CtTypeReferenceImpl@Exception" shape=ellipse]
43 [label="11:CtCatchVariableImpl@Exception ex" shape=ellipse]
44 [label="12:CtExecutableReferenceImpl@log(<unknown>,<unknown>)" shape=ellipse]
45 [label="12:CtVirtualElement@log" shape=ellipse]
46 [label="12:CtLiteralImpl@\"Error setting project in \"" shape=ellipse]
47 [label="12:CtExecutableReferenceImpl@getClass()" shape=ellipse]
48 [label="12:CtVirtualElement@getClass" shape=ellipse]
49 [label="12:CtFieldReadImpl@proxy" shape=ellipse]
50 [label="12:CtInvocationImpl@proxy.getClass()" shape=ellipse]
51 [label="12:CtBinaryOperatorImpl@\"Error setting project in \" + proxy.getClass()" shape=ellipse]
52 [label="12:CtTypeAccessImpl@MSG_ERR" shape=ellipse]
53 [label="12:CtInvocationImpl@log(\"Error setting project in \" + proxy.getClass(), MSG_ERR)" shape=ellipse]
54 [label="13:CtTypeReferenceImpl@TaskException" shape=ellipse]
55 [label="13:CtLiteralImpl@\"Error\"" shape=ellipse]
56 [label="13:CtVariableReadImpl@ex" shape=ellipse]
57 [label="13:CtConstructorCallImpl@new TaskException(\"Error\", ex)" shape=ellipse]
58 [label="13:CtThrowImpl@throw new TaskException(\"Error\", ex)" shape=ellipse]
59 [label="11:CtBlockImpl@\{
    log(\"Error setting project in \" + proxy.getClass(), MSG_ERR);
    throw new TaskException(\"Error\", ex);
\}" shape=ellipse]
60 [label="11:CtCatchImpl@ catch (Exception ex) \{
    log(\"Error setting project in \" + proxy.getClass(), MSG_ERR);
    throw new TaskException(\"Error\", ex);
\}" shape=ellipse]
61 [label="4:CtTryImpl@try \{
    Class c = proxy.getClass();
    setProjectM = c.getMethod(\"setProject\", new Class[]\{ Project.class \});
    if (setProjectM != null) \{
        setProjectM.invoke(proxy, new Object[]\{ project \});
    \}
\} catch (NoSuchMethodException e) \{
\} catch (Exception ex) \{
    log(\"Error setting project in \" + proxy.getClass(), MSG_ERR);
    throw new TaskException(\"Error\", ex);
\}" shape=ellipse]
62 [label="15:CtTypeReferenceImpl@Method" shape=ellipse]
63 [label="15:CtLiteralImpl@null" shape=ellipse]
64 [label="15:CtVirtualElement@executeM" shape=ellipse]
65 [label="15:CtLocalVariableImpl@Method executeM = null" shape=ellipse]
66 [label="17:CtTypeReferenceImpl@Class" shape=ellipse]
67 [label="17:CtExecutableReferenceImpl@getClass()" shape=ellipse]
68 [label="17:CtVirtualElement@getClass" shape=ellipse]
69 [label="17:CtFieldReadImpl@proxy" shape=ellipse]
70 [label="17:CtInvocationImpl@proxy.getClass()" shape=ellipse]
71 [label="17:CtVirtualElement@c" shape=ellipse]
72 [label="17:CtLocalVariableImpl@Class c = proxy.getClass()" shape=ellipse]
73 [label="18:CtVariableWriteImpl@executeM" shape=ellipse]
74 [label="18:CtExecutableReferenceImpl@getMethod(java.lang.String,java.lang.Class[])" shape=ellipse]
75 [label="18:CtVirtualElement@getMethod" shape=ellipse]
76 [label="18:CtVariableReadImpl@c" shape=ellipse]
77 [label="18:CtLiteralImpl@\"execute\"" shape=ellipse]
78 [label="18:CtNewArrayImpl@new Class[0]" shape=ellipse]
79 [label="18:CtLiteralImpl@0" shape=ellipse]
80 [label="18:CtInvocationImpl@c.getMethod(\"execute\", new Class[0])" shape=ellipse]
81 [label="18:CtAssignmentImpl@executeM = c.getMethod(\"execute\", new Class[0])" shape=ellipse]
82 [label="19:CtVariableReadImpl@executeM" shape=ellipse]
83 [label="19:CtLiteralImpl@null" shape=ellipse]
84 [label="19:CtBinaryOperatorImpl@executeM == null" shape=ellipse]
85 [label="20:CtExecutableReferenceImpl@log(<unknown>,<unknown>)" shape=ellipse]
86 [label="20:CtVirtualElement@log" shape=ellipse]
87 [label="20:CtLiteralImpl@\"No public execute() in \"" shape=ellipse]
88 [label="20:CtExecutableReferenceImpl@getClass()" shape=ellipse]
89 [label="20:CtVirtualElement@getClass" shape=ellipse]
90 [label="20:CtFieldReadImpl@proxy" shape=ellipse]
91 [label="20:CtInvocationImpl@proxy.getClass()" shape=ellipse]
92 [label="20:CtBinaryOperatorImpl@\"No public execute() in \" + proxy.getClass()" shape=ellipse]
93 [label="20:CtTypeAccessImpl@MSG_ERR" shape=ellipse]
94 [label="20:CtInvocationImpl@log(\"No public execute() in \" + proxy.getClass(), MSG_ERR)" shape=ellipse]
95 [label="21:CtTypeReferenceImpl@TaskException" shape=ellipse]
96 [label="21:CtLiteralImpl@\"No public execute() in \"" shape=ellipse]
97 [label="21:CtExecutableReferenceImpl@getClass()" shape=ellipse]
98 [label="21:CtVirtualElement@getClass" shape=ellipse]
99 [label="21:CtFieldReadImpl@proxy" shape=ellipse]
100 [label="21:CtInvocationImpl@proxy.getClass()" shape=ellipse]
101 [label="21:CtBinaryOperatorImpl@\"No public execute() in \" + proxy.getClass()" shape=ellipse]
102 [label="21:CtConstructorCallImpl@new TaskException(\"No public execute() in \" + proxy.getClass())" shape=ellipse]
103 [label="21:CtThrowImpl@throw new TaskException(\"No public execute() in \" + proxy.getClass())" shape=ellipse]
104 [label="19:CtBlockImpl@\{
    log(\"No public execute() in \" + proxy.getClass(), MSG_ERR);
    throw new TaskException(\"No public execute() in \" + proxy.getClass());
\}" shape=ellipse]
105 [label="19:CtIfImpl@if (executeM == null) \{
    log(\"No public execute() in \" + proxy.getClass(), MSG_ERR);
    throw new TaskException(\"No public execute() in \" + proxy.getClass());
\}" shape=ellipse]
106 [label="23:CtExecutableReferenceImpl@invoke(<unknown>)" shape=ellipse]
107 [label="23:CtVirtualElement@invoke" shape=ellipse]
108 [label="23:CtVariableReadImpl@executeM" shape=ellipse]
109 [label="23:CtFieldReadImpl@proxy" shape=ellipse]
110 [label="23:CtLiteralImpl@null" shape=ellipse]
111 [label="23:CtInvocationImpl@executeM.invoke(proxy, null)" shape=ellipse]
112 [label="24:CtReturnImpl@return" shape=ellipse]
113 [label="16:CtBlockImpl@\{
    Class c = proxy.getClass();
    executeM = c.getMethod(\"execute\", new Class[0]);
    if (executeM == null) \{
        log(\"No public execute() in \" + proxy.getClass(), MSG_ERR);
        throw new TaskException(\"No public execute() in \" + proxy.getClass());
    \}
    executeM.invoke(proxy, null);
    return;
\}" shape=ellipse]
114 [label="25:CtVirtualElement@ex" shape=ellipse]
115 [label="25:CtTypeReferenceImpl@Exception" shape=ellipse]
116 [label="25:CtCatchVariableImpl@Exception ex" shape=ellipse]
117 [label="26:CtExecutableReferenceImpl@log(<unknown>,<unknown>)" shape=ellipse]
118 [label="26:CtVirtualElement@log" shape=ellipse]
119 [label="26:CtLiteralImpl@\"Error in \"" shape=ellipse]
120 [label="26:CtExecutableReferenceImpl@getClass()" shape=ellipse]
121 [label="26:CtVirtualElement@getClass" shape=ellipse]
122 [label="26:CtFieldReadImpl@proxy" shape=ellipse]
123 [label="26:CtInvocationImpl@proxy.getClass()" shape=ellipse]
124 [label="26:CtBinaryOperatorImpl@\"Error in \" + proxy.getClass()" shape=ellipse]
125 [label="26:CtTypeAccessImpl@MSG_ERR" shape=ellipse]
126 [label="26:CtInvocationImpl@log(\"Error in \" + proxy.getClass(), MSG_ERR)" shape=ellipse]
127 [label="27:CtTypeReferenceImpl@TaskException" shape=ellipse]
128 [label="27:CtLiteralImpl@\"Error\"" shape=ellipse]
129 [label="27:CtVariableReadImpl@ex" shape=ellipse]
130 [label="27:CtConstructorCallImpl@new TaskException(\"Error\", ex)" shape=ellipse]
131 [label="27:CtThrowImpl@throw new TaskException(\"Error\", ex)" shape=ellipse]
132 [label="25:CtBlockImpl@\{
    log(\"Error in \" + proxy.getClass(), MSG_ERR);
    throw new TaskException(\"Error\", ex);
\}" shape=ellipse]
133 [label="25:CtCatchImpl@ catch (Exception ex) \{
    log(\"Error in \" + proxy.getClass(), MSG_ERR);
    throw new TaskException(\"Error\", ex);
\}" shape=ellipse]
134 [label="16:CtTryImpl@try \{
    Class c = proxy.getClass();
    executeM = c.getMethod(\"execute\", new Class[0]);
    if (executeM == null) \{
        log(\"No public execute() in \" + proxy.getClass(), MSG_ERR);
        throw new TaskException(\"No public execute() in \" + proxy.getClass());
    \}
    executeM.invoke(proxy, null);
    return;
\} catch (Exception ex) \{
    log(\"Error in \" + proxy.getClass(), MSG_ERR);
    throw new TaskException(\"Error\", ex);
\}" shape=ellipse]
135 [label="2:CtBlockImpl@\{
    Method setProjectM = null;
    try \{
        Class c = proxy.getClass();
        setProjectM = c.getMethod(\"setProject\", new Class[]\{ Project.class \});
        if (setProjectM != null) \{
            setProjectM.invoke(proxy, new Object[]\{ project \});
        \}
    \} catch (NoSuchMethodException e) \{
    \} catch (Exception ex) \{
        log(\"Error setting project in \" + proxy.getClass(), MSG_ERR);
        throw new TaskException(\"Error\", ex);
    \}
    Method executeM = null;
    try \{
        Class c = proxy.getClass();
        executeM = c.getMethod(\"execute\", new Class[0]);
        if (executeM == null) \{
            log(\"No public execute() in \" + proxy.getClass(), MSG_ERR);
            throw new TaskException(\"No public execute() in \" + proxy.getClass());
        \}
        executeM.invoke(proxy, null);
        return;
    \} catch (Exception ex) \{
        log(\"Error in \" + proxy.getClass(), MSG_ERR);
        throw new TaskException(\"Error\", ex);
    \}
\}" shape=ellipse]
136 [label="2:CtMethodImpl@public void execute() throws TaskException \{
    Method setProjectM = null;
    try \{
        Class c = proxy.getClass();
        setProjectM = c.getMethod(\"setProject\", new Class[]\{ Project.class \});
        if (setProjectM != null) \{
            setProjectM.invoke(proxy, new Object[]\{ project \});
        \}
    \} catch (NoSuchMethodException e) \{
    \} catch (Exception ex) \{
        log(\"Error setting project in \" + proxy.getClass(), MSG_ERR);
        throw new TaskException(\"Error\", ex);
    \}
    Method executeM = null;
    try \{
        Class c = proxy.getClass();
        executeM = c.getMethod(\"execute\", new Class[0]);
        if (executeM == null) \{
            log(\"No public execute() in \" + proxy.getClass(), MSG_ERR);
            throw new TaskException(\"No public execute() in \" + proxy.getClass());
        \}
        executeM.invoke(proxy, null);
        return;
    \} catch (Exception ex) \{
        log(\"Error in \" + proxy.getClass(), MSG_ERR);
        throw new TaskException(\"Error\", ex);
    \}
\}" shape=ellipse]
137 [label="8:Delete@DELETE" shape=ellipse]
138 [label="8:Insert@INSERT" shape=ellipse]
139 [label="8:CtInvocationImpl@getProject()" shape=ellipse]
6 -> 5 [label="AST"];
6 -> 3 [label="AST"];
6 -> 4 [label="AST"];
10 -> 12 [label="Data Dep"];
11 -> 9 [label="AST"];
11 -> 10 [label="AST"];
11 -> 8 [label="AST"];
12 -> 17 [label="Define-Use"];
13 -> 12 [label="AST"];
13 -> 7 [label="AST"];
13 -> 11 [label="AST"];
14 -> 23 [label="Define-Use"];
14 -> 28 [label="Define-Use"];
17 -> 14 [label="Data Dep"];
19 -> 20 [label="AST"];
20 -> 14 [label="Data Dep"];
21 -> 16 [label="AST"];
21 -> 17 [label="AST"];
21 -> 15 [label="AST"];
21 -> 18 [label="AST"];
21 -> 19 [label="AST"];
22 -> 14 [label="AST"];
22 -> 21 [label="AST"];
25 -> 23 [label="AST"];
25 -> 24 [label="AST"];
25 -> 33 [label="Control Dep"];
25 -> 32 [label="Control Dep"];
25 -> 26 [label="Control Dep"];
25 -> 28 [label="Control Dep"];
25 -> 29 [label="Control Dep"];
25 -> 30 [label="Control Dep"];
30 -> 31 [label="AST"];
30 -> 138 [label="Action"];
31 -> 137 [label="Action"];
32 -> 27 [label="AST"];
32 -> 28 [label="AST"];
32 -> 26 [label="AST"];
32 -> 29 [label="AST"];
32 -> 30 [label="AST"];
33 -> 32 [label="AST"];
34 -> 25 [label="AST"];
34 -> 33 [label="AST"];
35 -> 13 [label="AST"];
35 -> 22 [label="AST"];
35 -> 34 [label="AST"];
38 -> 36 [label="AST"];
38 -> 37 [label="AST"];
38 -> 39 [label="Control Dep"];
40 -> 38 [label="AST"];
40 -> 39 [label="AST"];
41 -> 56 [label="Define-Use"];
43 -> 41 [label="AST"];
43 -> 42 [label="AST"];
43 -> 59 [label="Control Dep"];
43 -> 53 [label="Control Dep"];
43 -> 44 [label="Control Dep"];
43 -> 51 [label="Control Dep"];
43 -> 46 [label="Control Dep"];
43 -> 50 [label="Control Dep"];
43 -> 47 [label="Control Dep"];
43 -> 49 [label="Control Dep"];
43 -> 52 [label="Control Dep"];
43 -> 58 [label="Control Dep"];
43 -> 57 [label="Control Dep"];
43 -> 55 [label="Control Dep"];
43 -> 56 [label="Control Dep"];
50 -> 48 [label="AST"];
50 -> 49 [label="AST"];
50 -> 47 [label="AST"];
51 -> 46 [label="AST"];
51 -> 50 [label="AST"];
53 -> 45 [label="AST"];
53 -> 44 [label="AST"];
53 -> 51 [label="AST"];
53 -> 52 [label="AST"];
57 -> 55 [label="AST"];
57 -> 56 [label="AST"];
58 -> 57 [label="AST"];
59 -> 53 [label="AST"];
59 -> 58 [label="AST"];
60 -> 43 [label="AST"];
60 -> 59 [label="AST"];
61 -> 35 [label="AST"];
61 -> 40 [label="AST"];
61 -> 60 [label="AST"];
65 -> 64 [label="AST"];
65 -> 62 [label="AST"];
65 -> 63 [label="AST"];
69 -> 71 [label="Data Dep"];
70 -> 68 [label="AST"];
70 -> 69 [label="AST"];
70 -> 67 [label="AST"];
71 -> 76 [label="Define-Use"];
72 -> 71 [label="AST"];
72 -> 66 [label="AST"];
72 -> 70 [label="AST"];
73 -> 82 [label="Define-Use"];
73 -> 108 [label="Define-Use"];
76 -> 73 [label="Data Dep"];
78 -> 79 [label="AST"];
80 -> 75 [label="AST"];
80 -> 76 [label="AST"];
80 -> 74 [label="AST"];
80 -> 77 [label="AST"];
80 -> 78 [label="AST"];
81 -> 73 [label="AST"];
81 -> 80 [label="AST"];
84 -> 82 [label="AST"];
84 -> 83 [label="AST"];
84 -> 104 [label="Control Dep"];
84 -> 94 [label="Control Dep"];
84 -> 85 [label="Control Dep"];
84 -> 92 [label="Control Dep"];
84 -> 87 [label="Control Dep"];
84 -> 91 [label="Control Dep"];
84 -> 88 [label="Control Dep"];
84 -> 90 [label="Control Dep"];
84 -> 93 [label="Control Dep"];
84 -> 103 [label="Control Dep"];
84 -> 102 [label="Control Dep"];
84 -> 101 [label="Control Dep"];
84 -> 96 [label="Control Dep"];
84 -> 100 [label="Control Dep"];
84 -> 97 [label="Control Dep"];
84 -> 99 [label="Control Dep"];
91 -> 89 [label="AST"];
91 -> 90 [label="AST"];
91 -> 88 [label="AST"];
92 -> 87 [label="AST"];
92 -> 91 [label="AST"];
94 -> 86 [label="AST"];
94 -> 85 [label="AST"];
94 -> 92 [label="AST"];
94 -> 93 [label="AST"];
100 -> 98 [label="AST"];
100 -> 99 [label="AST"];
100 -> 97 [label="AST"];
101 -> 96 [label="AST"];
101 -> 100 [label="AST"];
102 -> 101 [label="AST"];
103 -> 102 [label="AST"];
104 -> 94 [label="AST"];
104 -> 103 [label="AST"];
105 -> 84 [label="AST"];
105 -> 104 [label="AST"];
111 -> 107 [label="AST"];
111 -> 108 [label="AST"];
111 -> 106 [label="AST"];
111 -> 109 [label="AST"];
111 -> 110 [label="AST"];
113 -> 72 [label="AST"];
113 -> 81 [label="AST"];
113 -> 105 [label="AST"];
113 -> 111 [label="AST"];
113 -> 112 [label="AST"];
114 -> 129 [label="Define-Use"];
116 -> 114 [label="AST"];
116 -> 115 [label="AST"];
116 -> 132 [label="Control Dep"];
116 -> 126 [label="Control Dep"];
116 -> 117 [label="Control Dep"];
116 -> 124 [label="Control Dep"];
116 -> 119 [label="Control Dep"];
116 -> 123 [label="Control Dep"];
116 -> 120 [label="Control Dep"];
116 -> 122 [label="Control Dep"];
116 -> 125 [label="Control Dep"];
116 -> 131 [label="Control Dep"];
116 -> 130 [label="Control Dep"];
116 -> 128 [label="Control Dep"];
116 -> 129 [label="Control Dep"];
123 -> 121 [label="AST"];
123 -> 122 [label="AST"];
123 -> 120 [label="AST"];
124 -> 119 [label="AST"];
124 -> 123 [label="AST"];
126 -> 118 [label="AST"];
126 -> 117 [label="AST"];
126 -> 124 [label="AST"];
126 -> 125 [label="AST"];
130 -> 128 [label="AST"];
130 -> 129 [label="AST"];
131 -> 130 [label="AST"];
132 -> 126 [label="AST"];
132 -> 131 [label="AST"];
133 -> 116 [label="AST"];
133 -> 132 [label="AST"];
134 -> 113 [label="AST"];
134 -> 133 [label="AST"];
135 -> 6 [label="AST"];
135 -> 61 [label="AST"];
135 -> 65 [label="AST"];
135 -> 134 [label="AST"];
136 -> 1 [label="AST"];
136 -> 0 [label="AST"];
136 -> 2 [label="AST"];
136 -> 135 [label="AST"];
138 -> 139 [label="Action"];
}