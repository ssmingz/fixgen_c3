digraph "execute#?" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@execute" shape=ellipse]
2 [label="2:CtTypeReferenceImpl@BuildException" shape=ellipse]
3 [label="3:CtFieldReadImpl@token" shape=ellipse]
4 [label="3:CtLiteralImpl@null" shape=ellipse]
5 [label="3:CtBinaryOperatorImpl@token == null" shape=ellipse]
6 [label="4:CtTypeReferenceImpl@BuildException" shape=ellipse]
7 [label="4:CtLiteralImpl@\"replace token must not be null\"" shape=ellipse]
8 [label="4:CtFieldReadImpl@location" shape=ellipse]
9 [label="4:CtConstructorCallImpl@new BuildException(\"replace token must not be null\", location)" shape=ellipse]
10 [label="4:CtThrowImpl@throw new BuildException(\"replace token must not be null\", location)" shape=ellipse]
11 [label="3:CtBlockImpl@\{
    throw new BuildException(\"replace token must not be null\", location);
\}" shape=ellipse]
12 [label="3:CtIfImpl@if (token == null) \{
    throw new BuildException(\"replace token must not be null\", location);
\}" shape=ellipse]
13 [label="6:CtFieldReadImpl@src" shape=ellipse]
14 [label="6:CtLiteralImpl@null" shape=ellipse]
15 [label="6:CtBinaryOperatorImpl@(src == null)" shape=ellipse]
16 [label="6:CtFieldReadImpl@dir" shape=ellipse]
17 [label="6:CtLiteralImpl@null" shape=ellipse]
18 [label="6:CtBinaryOperatorImpl@(dir == null)" shape=ellipse]
19 [label="6:CtBinaryOperatorImpl@(src == null) && (dir == null)" shape=ellipse]
20 [label="7:CtTypeReferenceImpl@BuildException" shape=ellipse]
21 [label="7:CtLiteralImpl@\"Either the file or the dir attribute must be specified\"" shape=ellipse]
22 [label="7:CtFieldReadImpl@location" shape=ellipse]
23 [label="7:CtConstructorCallImpl@new BuildException(\"Either the file or the dir attribute must be specified\", location)" shape=ellipse]
24 [label="7:CtThrowImpl@throw new BuildException(\"Either the file or the dir attribute must be specified\", location)" shape=ellipse]
25 [label="6:CtBlockImpl@\{
    throw new BuildException(\"Either the file or the dir attribute must be specified\", location);
\}" shape=ellipse]
26 [label="6:CtIfImpl@if ((src == null) && (dir == null)) \{
    throw new BuildException(\"Either the file or the dir attribute must be specified\", location);
\}" shape=ellipse]
27 [label="9:CtExecutableReferenceImpl@log(<unknown>)" shape=ellipse]
28 [label="9:CtVirtualElement@log" shape=ellipse]
29 [label="9:CtLiteralImpl@\"Replacing \"" shape=ellipse]
30 [label="9:CtExecutableReferenceImpl@getText()" shape=ellipse]
31 [label="9:CtVirtualElement@getText" shape=ellipse]
32 [label="9:CtFieldReadImpl@token" shape=ellipse]
33 [label="9:CtInvocationImpl@token.getText()" shape=ellipse]
34 [label="9:CtBinaryOperatorImpl@(\"Replacing \" + token.getText())" shape=ellipse]
35 [label="9:CtLiteralImpl@\" --> \"" shape=ellipse]
36 [label="9:CtBinaryOperatorImpl@((\"Replacing \" + token.getText()) + \" --> \")" shape=ellipse]
37 [label="9:CtExecutableReferenceImpl@getText()" shape=ellipse]
38 [label="9:CtVirtualElement@getText" shape=ellipse]
39 [label="9:CtFieldReadImpl@value" shape=ellipse]
40 [label="9:CtInvocationImpl@value.getText()" shape=ellipse]
41 [label="9:CtBinaryOperatorImpl@((\"Replacing \" + token.getText()) + \" --> \") + value.getText()" shape=ellipse]
42 [label="9:CtInvocationImpl@log(((\"Replacing \" + token.getText()) + \" --> \") + value.getText())" shape=ellipse]
43 [label="10:CtFieldReadImpl@src" shape=ellipse]
44 [label="10:CtLiteralImpl@null" shape=ellipse]
45 [label="10:CtBinaryOperatorImpl@src != null" shape=ellipse]
46 [label="11:CtExecutableReferenceImpl@processFile(<unknown>)" shape=ellipse]
47 [label="11:CtVirtualElement@processFile" shape=ellipse]
48 [label="11:CtFieldReadImpl@src" shape=ellipse]
49 [label="11:CtInvocationImpl@processFile(src)" shape=ellipse]
50 [label="10:CtBlockImpl@\{
    processFile(src);
\}" shape=ellipse]
51 [label="10:CtIfImpl@if (src != null) \{
    processFile(src);
\}" shape=ellipse]
52 [label="13:CtFieldReadImpl@dir" shape=ellipse]
53 [label="13:CtLiteralImpl@null" shape=ellipse]
54 [label="13:CtBinaryOperatorImpl@dir != null" shape=ellipse]
55 [label="14:CtTypeReferenceImpl@DirectoryScanner" shape=ellipse]
56 [label="14:CtExecutableReferenceImpl@getDirectoryScanner()" shape=ellipse]
57 [label="14:CtVirtualElement@getDirectoryScanner" shape=ellipse]
58 [label="14:CtSuperAccessImpl@super" shape=ellipse]
59 [label="14:CtFieldReadImpl@dir" shape=ellipse]
60 [label="14:CtInvocationImpl@super.getDirectoryScanner(dir)" shape=ellipse]
61 [label="14:CtVirtualElement@ds" shape=ellipse]
62 [label="14:CtLocalVariableImpl@DirectoryScanner ds = super.getDirectoryScanner(dir)" shape=ellipse]
63 [label="15:CtVirtualElement@String[]" shape=ellipse]
64 [label="15:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
65 [label="15:CtExecutableReferenceImpl@getIncludedFiles()" shape=ellipse]
66 [label="15:CtVirtualElement@getIncludedFiles" shape=ellipse]
67 [label="15:CtVariableReadImpl@ds" shape=ellipse]
68 [label="15:CtInvocationImpl@ds.getIncludedFiles()" shape=ellipse]
69 [label="15:CtVirtualElement@srcs" shape=ellipse]
70 [label="15:CtLocalVariableImpl@String[] srcs = ds.getIncludedFiles()" shape=ellipse]
71 [label="16:CtTypeReferenceImpl@int" shape=ellipse]
72 [label="16:CtLiteralImpl@0" shape=ellipse]
73 [label="16:CtVirtualElement@i" shape=ellipse]
74 [label="16:CtLocalVariableImpl@int i = 0" shape=ellipse]
75 [label="16:CtVariableReadImpl@i" shape=ellipse]
76 [label="16:CtVariableReadImpl@srcs" shape=ellipse]
77 [label="16:CtLocalVariableReferenceImpl@srcs" shape=ellipse]
78 [label="16:CtFieldReadImpl@srcs.length" shape=ellipse]
79 [label="16:CtBinaryOperatorImpl@i < srcs.length" shape=ellipse]
80 [label="16:CtVariableWriteImpl@i" shape=ellipse]
81 [label="16:CtUnaryOperatorImpl@i++" shape=ellipse]
82 [label="17:CtTypeReferenceImpl@File" shape=ellipse]
83 [label="17:CtTypeReferenceImpl@File" shape=ellipse]
84 [label="17:CtFieldReadImpl@dir" shape=ellipse]
85 [label="17:CtVariableReadImpl@srcs" shape=ellipse]
86 [label="17:CtVariableReadImpl@i" shape=ellipse]
87 [label="17:CtArrayReadImpl@srcs[i]" shape=ellipse]
88 [label="17:CtConstructorCallImpl@new File(dir, srcs[i])" shape=ellipse]
89 [label="17:CtVirtualElement@file" shape=ellipse]
90 [label="17:CtLocalVariableImpl@File file = new File(dir, srcs[i])" shape=ellipse]
91 [label="18:CtExecutableReferenceImpl@processFile(<unknown>)" shape=ellipse]
92 [label="18:CtVirtualElement@processFile" shape=ellipse]
93 [label="18:CtVariableReadImpl@file" shape=ellipse]
94 [label="18:CtInvocationImpl@processFile(file)" shape=ellipse]
95 [label="16:CtBlockImpl@\{
    File file = new File(dir, srcs[i]);
    processFile(file);
\}" shape=ellipse]
96 [label="16:CtForImpl@for (int i = 0; i < srcs.length; i++) \{
    File file = new File(dir, srcs[i]);
    processFile(file);
\}" shape=ellipse]
97 [label="13:CtBlockImpl@\{
    DirectoryScanner ds = super.getDirectoryScanner(dir);
    String[] srcs = ds.getIncludedFiles();
    for (int i = 0; i < srcs.length; i++) \{
        File file = new File(dir, srcs[i]);
        processFile(file);
    \}
\}" shape=ellipse]
98 [label="13:CtIfImpl@if (dir != null) \{
    DirectoryScanner ds = super.getDirectoryScanner(dir);
    String[] srcs = ds.getIncludedFiles();
    for (int i = 0; i < srcs.length; i++) \{
        File file = new File(dir, srcs[i]);
        processFile(file);
    \}
\}" shape=ellipse]
99 [label="2:CtBlockImpl@\{
    if (token == null) \{
        throw new BuildException(\"replace token must not be null\", location);
    \}
    if ((src == null) && (dir == null)) \{
        throw new BuildException(\"Either the file or the dir attribute must be specified\", location);
    \}
    log(((\"Replacing \" + token.getText()) + \" --> \") + value.getText());
    if (src != null) \{
        processFile(src);
    \}
    if (dir != null) \{
        DirectoryScanner ds = super.getDirectoryScanner(dir);
        String[] srcs = ds.getIncludedFiles();
        for (int i = 0; i < srcs.length; i++) \{
            File file = new File(dir, srcs[i]);
            processFile(file);
        \}
    \}
\}" shape=ellipse]
100 [label="2:CtMethodImpl@public void execute() throws BuildException \{
    if (token == null) \{
        throw new BuildException(\"replace token must not be null\", location);
    \}
    if ((src == null) && (dir == null)) \{
        throw new BuildException(\"Either the file or the dir attribute must be specified\", location);
    \}
    log(((\"Replacing \" + token.getText()) + \" --> \") + value.getText());
    if (src != null) \{
        processFile(src);
    \}
    if (dir != null) \{
        DirectoryScanner ds = super.getDirectoryScanner(dir);
        String[] srcs = ds.getIncludedFiles();
        for (int i = 0; i < srcs.length; i++) \{
            File file = new File(dir, srcs[i]);
            processFile(file);
        \}
    \}
\}" shape=ellipse]
101 [label="6:Insert@INSERT" shape=ellipse]
102 [label="6:CtIfImpl@if (token.getText().equals(\"\")) \{
    throw new BuildException(\"replace token must not be empty\", location);
\}" shape=ellipse]
5 -> 3 [label="AST"];
5 -> 4 [label="AST"];
5 -> 11 [label="Control Dep"];
5 -> 10 [label="Control Dep"];
5 -> 9 [label="Control Dep"];
5 -> 7 [label="Control Dep"];
5 -> 8 [label="Control Dep"];
9 -> 7 [label="AST"];
9 -> 8 [label="AST"];
10 -> 9 [label="AST"];
11 -> 10 [label="AST"];
12 -> 5 [label="AST"];
12 -> 11 [label="AST"];
15 -> 13 [label="AST"];
15 -> 14 [label="AST"];
18 -> 16 [label="AST"];
18 -> 17 [label="AST"];
19 -> 15 [label="AST"];
19 -> 18 [label="AST"];
19 -> 25 [label="Control Dep"];
19 -> 24 [label="Control Dep"];
19 -> 23 [label="Control Dep"];
19 -> 21 [label="Control Dep"];
19 -> 22 [label="Control Dep"];
23 -> 21 [label="AST"];
23 -> 22 [label="AST"];
24 -> 23 [label="AST"];
25 -> 24 [label="AST"];
26 -> 19 [label="AST"];
26 -> 25 [label="AST"];
33 -> 31 [label="AST"];
33 -> 32 [label="AST"];
33 -> 30 [label="AST"];
34 -> 29 [label="AST"];
34 -> 33 [label="AST"];
36 -> 34 [label="AST"];
36 -> 35 [label="AST"];
40 -> 38 [label="AST"];
40 -> 39 [label="AST"];
40 -> 37 [label="AST"];
41 -> 36 [label="AST"];
41 -> 40 [label="AST"];
42 -> 28 [label="AST"];
42 -> 27 [label="AST"];
42 -> 41 [label="AST"];
45 -> 43 [label="AST"];
45 -> 44 [label="AST"];
45 -> 50 [label="Control Dep"];
45 -> 49 [label="Control Dep"];
45 -> 46 [label="Control Dep"];
45 -> 48 [label="Control Dep"];
49 -> 47 [label="AST"];
49 -> 46 [label="AST"];
49 -> 48 [label="AST"];
50 -> 49 [label="AST"];
51 -> 45 [label="AST"];
51 -> 50 [label="AST"];
54 -> 52 [label="AST"];
54 -> 53 [label="AST"];
54 -> 97 [label="Control Dep"];
54 -> 62 [label="Control Dep"];
54 -> 60 [label="Control Dep"];
54 -> 56 [label="Control Dep"];
54 -> 58 [label="Control Dep"];
54 -> 59 [label="Control Dep"];
54 -> 70 [label="Control Dep"];
54 -> 64 [label="Control Dep"];
54 -> 68 [label="Control Dep"];
54 -> 65 [label="Control Dep"];
54 -> 67 [label="Control Dep"];
54 -> 96 [label="Control Dep"];
54 -> 74 [label="Control Dep"];
54 -> 72 [label="Control Dep"];
54 -> 79 [label="Control Dep"];
54 -> 75 [label="Control Dep"];
54 -> 78 [label="Control Dep"];
54 -> 76 [label="Control Dep"];
54 -> 81 [label="Control Dep"];
54 -> 80 [label="Control Dep"];
58 -> 61 [label="Data Dep"];
59 -> 61 [label="Data Dep"];
60 -> 57 [label="AST"];
60 -> 58 [label="AST"];
60 -> 56 [label="AST"];
60 -> 59 [label="AST"];
61 -> 67 [label="Define-Use"];
62 -> 61 [label="AST"];
62 -> 55 [label="AST"];
62 -> 60 [label="AST"];
64 -> 63 [label="AST"];
67 -> 69 [label="Data Dep"];
68 -> 66 [label="AST"];
68 -> 67 [label="AST"];
68 -> 65 [label="AST"];
69 -> 76 [label="Define-Use"];
69 -> 85 [label="Define-Use"];
69 -> 87 [label="Define-Use"];
70 -> 69 [label="AST"];
70 -> 64 [label="AST"];
70 -> 68 [label="AST"];
73 -> 75 [label="Define-Use"];
73 -> 86 [label="Define-Use"];
74 -> 73 [label="AST"];
74 -> 71 [label="AST"];
74 -> 72 [label="AST"];
76 -> 77 [label="AST"];
78 -> 76 [label="AST"];
79 -> 75 [label="AST"];
79 -> 78 [label="AST"];
79 -> 95 [label="Control Dep"];
79 -> 90 [label="Control Dep"];
79 -> 88 [label="Control Dep"];
79 -> 84 [label="Control Dep"];
79 -> 87 [label="Control Dep"];
79 -> 85 [label="Control Dep"];
79 -> 86 [label="Control Dep"];
79 -> 94 [label="Control Dep"];
79 -> 91 [label="Control Dep"];
79 -> 93 [label="Control Dep"];
80 -> 86 [label="Define-Use"];
81 -> 80 [label="AST"];
84 -> 89 [label="Data Dep"];
87 -> 85 [label="AST"];
87 -> 86 [label="AST"];
87 -> 89 [label="Data Dep"];
88 -> 84 [label="AST"];
88 -> 87 [label="AST"];
89 -> 93 [label="Define-Use"];
90 -> 89 [label="AST"];
90 -> 82 [label="AST"];
90 -> 88 [label="AST"];
94 -> 92 [label="AST"];
94 -> 91 [label="AST"];
94 -> 93 [label="AST"];
95 -> 90 [label="AST"];
95 -> 94 [label="AST"];
96 -> 74 [label="AST"];
96 -> 79 [label="AST"];
96 -> 81 [label="AST"];
96 -> 95 [label="AST"];
97 -> 62 [label="AST"];
97 -> 70 [label="AST"];
97 -> 96 [label="AST"];
98 -> 54 [label="AST"];
98 -> 97 [label="AST"];
99 -> 12 [label="AST"];
99 -> 26 [label="AST"];
99 -> 42 [label="AST"];
99 -> 51 [label="AST"];
99 -> 98 [label="AST"];
100 -> 1 [label="AST"];
100 -> 0 [label="AST"];
100 -> 2 [label="AST"];
100 -> 99 [label="AST"];
100 -> 101 [label="Action"];
101 -> 102 [label="Action"];
}