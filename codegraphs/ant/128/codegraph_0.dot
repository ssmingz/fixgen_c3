digraph "validate#?" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@validate" shape=ellipse]
2 [label="2:CtTypeReferenceImpl@BuildException" shape=ellipse]
3 [label="3:CtFieldReadImpl@token" shape=ellipse]
4 [label="3:CtLiteralImpl@null" shape=ellipse]
5 [label="3:CtBinaryOperatorImpl@token == null" shape=ellipse]
6 [label="4:CtTypeReferenceImpl@String" shape=ellipse]
7 [label="4:CtLiteralImpl@\"token is a mandatory attribute \"" shape=ellipse]
8 [label="4:CtLiteralImpl@\"of replacefilter.\"" shape=ellipse]
9 [label="4:CtBinaryOperatorImpl@\"token is a mandatory attribute \" + \"of replacefilter.\"" shape=ellipse]
10 [label="4:CtVirtualElement@message" shape=ellipse]
11 [label="4:CtLocalVariableImpl@String message = \"token is a mandatory attribute \" + \"of replacefilter.\"" shape=ellipse]
12 [label="5:CtTypeReferenceImpl@BuildException" shape=ellipse]
13 [label="5:CtVariableReadImpl@message" shape=ellipse]
14 [label="5:CtConstructorCallImpl@new BuildException(message)" shape=ellipse]
15 [label="5:CtThrowImpl@throw new BuildException(message)" shape=ellipse]
16 [label="3:CtBlockImpl@\{
    String message = \"token is a mandatory attribute \" + \"of replacefilter.\";
    throw new BuildException(message);
\}" shape=ellipse]
17 [label="3:CtIfImpl@if (token == null) \{
    String message = \"token is a mandatory attribute \" + \"of replacefilter.\";
    throw new BuildException(message);
\}" shape=ellipse]
18 [label="7:CtFieldReadImpl@value" shape=ellipse]
19 [label="7:CtLiteralImpl@null" shape=ellipse]
20 [label="7:CtBinaryOperatorImpl@(value != null)" shape=ellipse]
21 [label="7:CtFieldReadImpl@property" shape=ellipse]
22 [label="7:CtLiteralImpl@null" shape=ellipse]
23 [label="7:CtBinaryOperatorImpl@(property != null)" shape=ellipse]
24 [label="7:CtBinaryOperatorImpl@(value != null) && (property != null)" shape=ellipse]
25 [label="8:CtTypeReferenceImpl@String" shape=ellipse]
26 [label="9:CtLiteralImpl@\"Either value or property \"" shape=ellipse]
27 [label="9:CtLiteralImpl@\"can be specified, but a replacefilter \"" shape=ellipse]
28 [label="9:CtBinaryOperatorImpl@(\"Either value or property \" + \"can be specified, but a replacefilter \")" shape=ellipse]
29 [label="10:CtLiteralImpl@\"element cannot have both.\"" shape=ellipse]
30 [label="9:CtBinaryOperatorImpl@(\"Either value or property \" + \"can be specified, but a replacefilter \") + \"element cannot have both.\"" shape=ellipse]
31 [label="8:CtVirtualElement@message" shape=ellipse]
32 [label="8:CtLocalVariableImpl@String message = (\"Either value or property \" + \"can be specified, but a replacefilter \") + \"element cannot have both.\"" shape=ellipse]
33 [label="11:CtTypeReferenceImpl@BuildException" shape=ellipse]
34 [label="11:CtVariableReadImpl@message" shape=ellipse]
35 [label="11:CtConstructorCallImpl@new BuildException(message)" shape=ellipse]
36 [label="11:CtThrowImpl@throw new BuildException(message)" shape=ellipse]
37 [label="7:CtBlockImpl@\{
    String message = (\"Either value or property \" + \"can be specified, but a replacefilter \") + \"element cannot have both.\";
    throw new BuildException(message);
\}" shape=ellipse]
38 [label="7:CtIfImpl@if ((value != null) && (property != null)) \{
    String message = (\"Either value or property \" + \"can be specified, but a replacefilter \") + \"element cannot have both.\";
    throw new BuildException(message);
\}" shape=ellipse]
39 [label="13:CtFieldReadImpl@property" shape=ellipse]
40 [label="13:CtLiteralImpl@null" shape=ellipse]
41 [label="13:CtBinaryOperatorImpl@property != null" shape=ellipse]
42 [label="14:CtFieldReadImpl@propertyFile" shape=ellipse]
43 [label="14:CtLiteralImpl@null" shape=ellipse]
44 [label="14:CtBinaryOperatorImpl@propertyFile == null" shape=ellipse]
45 [label="15:CtTypeReferenceImpl@String" shape=ellipse]
46 [label="16:CtLiteralImpl@\"The replacefilter's property attribute \"" shape=ellipse]
47 [label="16:CtLiteralImpl@\"can only be used with the replacetask's \"" shape=ellipse]
48 [label="16:CtBinaryOperatorImpl@(\"The replacefilter's property attribute \" + \"can only be used with the replacetask's \")" shape=ellipse]
49 [label="17:CtLiteralImpl@\"propertyFile attribute.\"" shape=ellipse]
50 [label="16:CtBinaryOperatorImpl@(\"The replacefilter's property attribute \" + \"can only be used with the replacetask's \") + \"propertyFile attribute.\"" shape=ellipse]
51 [label="15:CtVirtualElement@message" shape=ellipse]
52 [label="15:CtLocalVariableImpl@String message = (\"The replacefilter's property attribute \" + \"can only be used with the replacetask's \") + \"propertyFile attribute.\"" shape=ellipse]
53 [label="18:CtTypeReferenceImpl@BuildException" shape=ellipse]
54 [label="18:CtVariableReadImpl@message" shape=ellipse]
55 [label="18:CtConstructorCallImpl@new BuildException(message)" shape=ellipse]
56 [label="18:CtThrowImpl@throw new BuildException(message)" shape=ellipse]
57 [label="14:CtBlockImpl@\{
    String message = (\"The replacefilter's property attribute \" + \"can only be used with the replacetask's \") + \"propertyFile attribute.\";
    throw new BuildException(message);
\}" shape=ellipse]
58 [label="14:CtIfImpl@if (propertyFile == null) \{
    String message = (\"The replacefilter's property attribute \" + \"can only be used with the replacetask's \") + \"propertyFile attribute.\";
    throw new BuildException(message);
\}" shape=ellipse]
59 [label="20:CtFieldReadImpl@properties" shape=ellipse]
60 [label="20:CtLiteralImpl@null" shape=ellipse]
61 [label="20:CtBinaryOperatorImpl@(properties == null)" shape=ellipse]
62 [label="20:CtExecutableReferenceImpl@getProperty()" shape=ellipse]
63 [label="20:CtVirtualElement@getProperty" shape=ellipse]
64 [label="20:CtFieldReadImpl@properties" shape=ellipse]
65 [label="20:CtFieldReadImpl@property" shape=ellipse]
66 [label="20:CtInvocationImpl@properties.getProperty(property)" shape=ellipse]
67 [label="20:CtLiteralImpl@null" shape=ellipse]
68 [label="20:CtBinaryOperatorImpl@(properties.getProperty(property) == null)" shape=ellipse]
69 [label="20:CtBinaryOperatorImpl@(properties == null) || (properties.getProperty(property) == null)" shape=ellipse]
70 [label="21:CtTypeReferenceImpl@String" shape=ellipse]
71 [label="22:CtLiteralImpl@\"property \\"\"" shape=ellipse]
72 [label="22:CtFieldReadImpl@property" shape=ellipse]
73 [label="22:CtBinaryOperatorImpl@(\"property \\"\" + property)" shape=ellipse]
74 [label="22:CtLiteralImpl@\"\\" was not found in \"" shape=ellipse]
75 [label="22:CtBinaryOperatorImpl@((\"property \\"\" + property) + \"\\" was not found in \")" shape=ellipse]
76 [label="22:CtExecutableReferenceImpl@getPath()" shape=ellipse]
77 [label="22:CtVirtualElement@getPath" shape=ellipse]
78 [label="22:CtFieldReadImpl@propertyFile" shape=ellipse]
79 [label="22:CtInvocationImpl@propertyFile.getPath()" shape=ellipse]
80 [label="22:CtBinaryOperatorImpl@((\"property \\"\" + property) + \"\\" was not found in \") + propertyFile.getPath()" shape=ellipse]
81 [label="21:CtVirtualElement@message" shape=ellipse]
82 [label="21:CtLocalVariableImpl@String message = ((\"property \\"\" + property) + \"\\" was not found in \") + propertyFile.getPath()" shape=ellipse]
83 [label="23:CtTypeReferenceImpl@BuildException" shape=ellipse]
84 [label="23:CtVariableReadImpl@message" shape=ellipse]
85 [label="23:CtConstructorCallImpl@new BuildException(message)" shape=ellipse]
86 [label="23:CtThrowImpl@throw new BuildException(message)" shape=ellipse]
87 [label="20:CtBlockImpl@\{
    String message = ((\"property \\"\" + property) + \"\\" was not found in \") + propertyFile.getPath();
    throw new BuildException(message);
\}" shape=ellipse]
88 [label="20:CtIfImpl@if ((properties == null) || (properties.getProperty(property) == null)) \{
    String message = ((\"property \\"\" + property) + \"\\" was not found in \") + propertyFile.getPath();
    throw new BuildException(message);
\}" shape=ellipse]
89 [label="13:CtBlockImpl@\{
    if (propertyFile == null) \{
        String message = (\"The replacefilter's property attribute \" + \"can only be used with the replacetask's \") + \"propertyFile attribute.\";
        throw new BuildException(message);
    \}
    if ((properties == null) || (properties.getProperty(property) == null)) \{
        String message = ((\"property \\"\" + property) + \"\\" was not found in \") + propertyFile.getPath();
        throw new BuildException(message);
    \}
\}" shape=ellipse]
90 [label="13:CtIfImpl@if (property != null) \{
    if (propertyFile == null) \{
        String message = (\"The replacefilter's property attribute \" + \"can only be used with the replacetask's \") + \"propertyFile attribute.\";
        throw new BuildException(message);
    \}
    if ((properties == null) || (properties.getProperty(property) == null)) \{
        String message = ((\"property \\"\" + property) + \"\\" was not found in \") + propertyFile.getPath();
        throw new BuildException(message);
    \}
\}" shape=ellipse]
91 [label="2:CtBlockImpl@\{
    if (token == null) \{
        String message = \"token is a mandatory attribute \" + \"of replacefilter.\";
        throw new BuildException(message);
    \}
    if ((value != null) && (property != null)) \{
        String message = (\"Either value or property \" + \"can be specified, but a replacefilter \") + \"element cannot have both.\";
        throw new BuildException(message);
    \}
    if (property != null) \{
        if (propertyFile == null) \{
            String message = (\"The replacefilter's property attribute \" + \"can only be used with the replacetask's \") + \"propertyFile attribute.\";
            throw new BuildException(message);
        \}
        if ((properties == null) || (properties.getProperty(property) == null)) \{
            String message = ((\"property \\"\" + property) + \"\\" was not found in \") + propertyFile.getPath();
            throw new BuildException(message);
        \}
    \}
\}" shape=ellipse]
92 [label="2:CtMethodImpl@public void validate() throws BuildException \{
    if (token == null) \{
        String message = \"token is a mandatory attribute \" + \"of replacefilter.\";
        throw new BuildException(message);
    \}
    if ((value != null) && (property != null)) \{
        String message = (\"Either value or property \" + \"can be specified, but a replacefilter \") + \"element cannot have both.\";
        throw new BuildException(message);
    \}
    if (property != null) \{
        if (propertyFile == null) \{
            String message = (\"The replacefilter's property attribute \" + \"can only be used with the replacetask's \") + \"propertyFile attribute.\";
            throw new BuildException(message);
        \}
        if ((properties == null) || (properties.getProperty(property) == null)) \{
            String message = ((\"property \\"\" + property) + \"\\" was not found in \") + propertyFile.getPath();
            throw new BuildException(message);
        \}
    \}
\}" shape=ellipse]
93 [label="7:Insert@INSERT" shape=ellipse]
94 [label="7:CtIfImpl@if (\"\".equals(token)) \{
    String message = \"The token attribute must not be an empty string.\";
    throw new BuildException(message);
\}" shape=ellipse]
5 -> 3 [label="AST"];
5 -> 4 [label="AST"];
5 -> 16 [label="Control Dep"];
5 -> 11 [label="Control Dep"];
5 -> 9 [label="Control Dep"];
5 -> 7 [label="Control Dep"];
5 -> 8 [label="Control Dep"];
5 -> 15 [label="Control Dep"];
5 -> 14 [label="Control Dep"];
5 -> 13 [label="Control Dep"];
9 -> 7 [label="AST"];
9 -> 8 [label="AST"];
10 -> 13 [label="Define-Use"];
10 -> 34 [label="Define-Use"];
10 -> 54 [label="Define-Use"];
10 -> 84 [label="Define-Use"];
11 -> 10 [label="AST"];
11 -> 6 [label="AST"];
11 -> 9 [label="AST"];
14 -> 13 [label="AST"];
15 -> 14 [label="AST"];
16 -> 11 [label="AST"];
16 -> 15 [label="AST"];
17 -> 5 [label="AST"];
17 -> 16 [label="AST"];
20 -> 18 [label="AST"];
20 -> 19 [label="AST"];
23 -> 21 [label="AST"];
23 -> 22 [label="AST"];
24 -> 20 [label="AST"];
24 -> 23 [label="AST"];
24 -> 37 [label="Control Dep"];
24 -> 32 [label="Control Dep"];
24 -> 30 [label="Control Dep"];
24 -> 28 [label="Control Dep"];
24 -> 26 [label="Control Dep"];
24 -> 27 [label="Control Dep"];
24 -> 29 [label="Control Dep"];
24 -> 36 [label="Control Dep"];
24 -> 35 [label="Control Dep"];
24 -> 34 [label="Control Dep"];
28 -> 26 [label="AST"];
28 -> 27 [label="AST"];
30 -> 28 [label="AST"];
30 -> 29 [label="AST"];
31 -> 34 [label="Define-Use"];
31 -> 54 [label="Define-Use"];
31 -> 84 [label="Define-Use"];
32 -> 31 [label="AST"];
32 -> 25 [label="AST"];
32 -> 30 [label="AST"];
35 -> 34 [label="AST"];
36 -> 35 [label="AST"];
37 -> 32 [label="AST"];
37 -> 36 [label="AST"];
38 -> 24 [label="AST"];
38 -> 37 [label="AST"];
41 -> 39 [label="AST"];
41 -> 40 [label="AST"];
41 -> 89 [label="Control Dep"];
41 -> 58 [label="Control Dep"];
41 -> 44 [label="Control Dep"];
41 -> 42 [label="Control Dep"];
41 -> 43 [label="Control Dep"];
41 -> 88 [label="Control Dep"];
41 -> 69 [label="Control Dep"];
41 -> 61 [label="Control Dep"];
41 -> 59 [label="Control Dep"];
41 -> 60 [label="Control Dep"];
41 -> 68 [label="Control Dep"];
41 -> 66 [label="Control Dep"];
41 -> 62 [label="Control Dep"];
41 -> 64 [label="Control Dep"];
41 -> 65 [label="Control Dep"];
41 -> 67 [label="Control Dep"];
44 -> 42 [label="AST"];
44 -> 43 [label="AST"];
44 -> 57 [label="Control Dep"];
44 -> 52 [label="Control Dep"];
44 -> 50 [label="Control Dep"];
44 -> 48 [label="Control Dep"];
44 -> 46 [label="Control Dep"];
44 -> 47 [label="Control Dep"];
44 -> 49 [label="Control Dep"];
44 -> 56 [label="Control Dep"];
44 -> 55 [label="Control Dep"];
44 -> 54 [label="Control Dep"];
48 -> 46 [label="AST"];
48 -> 47 [label="AST"];
50 -> 48 [label="AST"];
50 -> 49 [label="AST"];
51 -> 54 [label="Define-Use"];
51 -> 84 [label="Define-Use"];
52 -> 51 [label="AST"];
52 -> 45 [label="AST"];
52 -> 50 [label="AST"];
55 -> 54 [label="AST"];
56 -> 55 [label="AST"];
57 -> 52 [label="AST"];
57 -> 56 [label="AST"];
58 -> 44 [label="AST"];
58 -> 57 [label="AST"];
61 -> 59 [label="AST"];
61 -> 60 [label="AST"];
66 -> 63 [label="AST"];
66 -> 64 [label="AST"];
66 -> 62 [label="AST"];
66 -> 65 [label="AST"];
68 -> 66 [label="AST"];
68 -> 67 [label="AST"];
69 -> 61 [label="AST"];
69 -> 68 [label="AST"];
69 -> 87 [label="Control Dep"];
69 -> 82 [label="Control Dep"];
69 -> 80 [label="Control Dep"];
69 -> 75 [label="Control Dep"];
69 -> 73 [label="Control Dep"];
69 -> 71 [label="Control Dep"];
69 -> 72 [label="Control Dep"];
69 -> 74 [label="Control Dep"];
69 -> 79 [label="Control Dep"];
69 -> 76 [label="Control Dep"];
69 -> 78 [label="Control Dep"];
69 -> 86 [label="Control Dep"];
69 -> 85 [label="Control Dep"];
69 -> 84 [label="Control Dep"];
72 -> 81 [label="Data Dep"];
73 -> 71 [label="AST"];
73 -> 72 [label="AST"];
75 -> 73 [label="AST"];
75 -> 74 [label="AST"];
78 -> 81 [label="Data Dep"];
79 -> 77 [label="AST"];
79 -> 78 [label="AST"];
79 -> 76 [label="AST"];
80 -> 75 [label="AST"];
80 -> 79 [label="AST"];
81 -> 84 [label="Define-Use"];
82 -> 81 [label="AST"];
82 -> 70 [label="AST"];
82 -> 80 [label="AST"];
85 -> 84 [label="AST"];
86 -> 85 [label="AST"];
87 -> 82 [label="AST"];
87 -> 86 [label="AST"];
88 -> 69 [label="AST"];
88 -> 87 [label="AST"];
89 -> 58 [label="AST"];
89 -> 88 [label="AST"];
90 -> 41 [label="AST"];
90 -> 89 [label="AST"];
91 -> 17 [label="AST"];
91 -> 38 [label="AST"];
91 -> 90 [label="AST"];
92 -> 1 [label="AST"];
92 -> 0 [label="AST"];
92 -> 2 [label="AST"];
92 -> 91 [label="AST"];
92 -> 93 [label="Action"];
93 -> 94 [label="Action"];
}