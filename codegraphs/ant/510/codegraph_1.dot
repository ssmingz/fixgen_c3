digraph "eval#?" {
0 [label="2:CtTypeReferenceImpl@boolean" shape=ellipse]
1 [label="2:CtVirtualElement@eval" shape=ellipse]
2 [label="3:CtExecutableReferenceImpl@size()" shape=ellipse]
3 [label="3:CtVirtualElement@size" shape=ellipse]
4 [label="3:CtFieldReadImpl@sourceFileSets" shape=ellipse]
5 [label="3:CtInvocationImpl@sourceFileSets.size()" shape=ellipse]
6 [label="3:CtLiteralImpl@0" shape=ellipse]
7 [label="3:CtBinaryOperatorImpl@(sourceFileSets.size() == 0)" shape=ellipse]
8 [label="3:CtExecutableReferenceImpl@size()" shape=ellipse]
9 [label="3:CtVirtualElement@size" shape=ellipse]
10 [label="3:CtFieldReadImpl@sourceResources" shape=ellipse]
11 [label="3:CtInvocationImpl@sourceResources.size()" shape=ellipse]
12 [label="3:CtLiteralImpl@0" shape=ellipse]
13 [label="3:CtBinaryOperatorImpl@(sourceResources.size() == 0)" shape=ellipse]
14 [label="3:CtBinaryOperatorImpl@((sourceFileSets.size() == 0) && (sourceResources.size() == 0))" shape=ellipse]
15 [label="3:CtFieldReadImpl@sourceFile" shape=ellipse]
16 [label="3:CtLiteralImpl@null" shape=ellipse]
17 [label="3:CtBinaryOperatorImpl@(sourceFile == null)" shape=ellipse]
18 [label="3:CtBinaryOperatorImpl@((sourceFileSets.size() == 0) && (sourceResources.size() == 0)) && (sourceFile == null)" shape=ellipse]
19 [label="4:CtTypeReferenceImpl@BuildException" shape=ellipse]
20 [label="5:CtLiteralImpl@\"At least one srcfile or a nested \"" shape=ellipse]
21 [label="5:CtLiteralImpl@\"<srcfiles> or <srcresources> element \"" shape=ellipse]
22 [label="5:CtBinaryOperatorImpl@(\"At least one srcfile or a nested \" + \"<srcfiles> or <srcresources> element \")" shape=ellipse]
23 [label="6:CtLiteralImpl@\"must be set.\"" shape=ellipse]
24 [label="5:CtBinaryOperatorImpl@(\"At least one srcfile or a nested \" + \"<srcfiles> or <srcresources> element \") + \"must be set.\"" shape=ellipse]
25 [label="4:CtConstructorCallImpl@new BuildException((\"At least one srcfile or a nested \" + \"<srcfiles> or <srcresources> element \") + \"must be set.\")" shape=ellipse]
26 [label="4:CtThrowImpl@throw new BuildException((\"At least one srcfile or a nested \" + \"<srcfiles> or <srcresources> element \") + \"must be set.\")" shape=ellipse]
27 [label="3:CtBlockImpl@\{
    throw new BuildException((\"At least one srcfile or a nested \" + \"<srcfiles> or <srcresources> element \") + \"must be set.\");
\}" shape=ellipse]
28 [label="3:CtIfImpl@if (((sourceFileSets.size() == 0) && (sourceResources.size() == 0)) && (sourceFile == null)) \{
    throw new BuildException((\"At least one srcfile or a nested \" + \"<srcfiles> or <srcresources> element \") + \"must be set.\");
\}" shape=ellipse]
29 [label="8:CtExecutableReferenceImpl@size()" shape=ellipse]
30 [label="8:CtVirtualElement@size" shape=ellipse]
31 [label="8:CtFieldReadImpl@sourceFileSets" shape=ellipse]
32 [label="8:CtInvocationImpl@sourceFileSets.size()" shape=ellipse]
33 [label="8:CtLiteralImpl@0" shape=ellipse]
34 [label="8:CtBinaryOperatorImpl@(sourceFileSets.size() > 0)" shape=ellipse]
35 [label="8:CtExecutableReferenceImpl@size()" shape=ellipse]
36 [label="8:CtVirtualElement@size" shape=ellipse]
37 [label="8:CtFieldReadImpl@sourceResources" shape=ellipse]
38 [label="8:CtInvocationImpl@sourceResources.size()" shape=ellipse]
39 [label="8:CtLiteralImpl@0" shape=ellipse]
40 [label="8:CtBinaryOperatorImpl@(sourceResources.size() > 0)" shape=ellipse]
41 [label="8:CtBinaryOperatorImpl@((sourceFileSets.size() > 0) || (sourceResources.size() > 0))" shape=ellipse]
42 [label="8:CtFieldReadImpl@sourceFile" shape=ellipse]
43 [label="8:CtLiteralImpl@null" shape=ellipse]
44 [label="8:CtBinaryOperatorImpl@(sourceFile != null)" shape=ellipse]
45 [label="8:CtBinaryOperatorImpl@((sourceFileSets.size() > 0) || (sourceResources.size() > 0)) && (sourceFile != null)" shape=ellipse]
46 [label="9:CtTypeReferenceImpl@BuildException" shape=ellipse]
47 [label="10:CtLiteralImpl@\"Cannot specify both the srcfile \"" shape=ellipse]
48 [label="10:CtLiteralImpl@\"attribute and a nested <srcfiles> \"" shape=ellipse]
49 [label="10:CtBinaryOperatorImpl@(\"Cannot specify both the srcfile \" + \"attribute and a nested <srcfiles> \")" shape=ellipse]
50 [label="11:CtLiteralImpl@\"or <srcresources> element.\"" shape=ellipse]
51 [label="10:CtBinaryOperatorImpl@(\"Cannot specify both the srcfile \" + \"attribute and a nested <srcfiles> \") + \"or <srcresources> element.\"" shape=ellipse]
52 [label="9:CtConstructorCallImpl@new BuildException((\"Cannot specify both the srcfile \" + \"attribute and a nested <srcfiles> \") + \"or <srcresources> element.\")" shape=ellipse]
53 [label="9:CtThrowImpl@throw new BuildException((\"Cannot specify both the srcfile \" + \"attribute and a nested <srcfiles> \") + \"or <srcresources> element.\")" shape=ellipse]
54 [label="8:CtBlockImpl@\{
    throw new BuildException((\"Cannot specify both the srcfile \" + \"attribute and a nested <srcfiles> \") + \"or <srcresources> element.\");
\}" shape=ellipse]
55 [label="8:CtIfImpl@if (((sourceFileSets.size() > 0) || (sourceResources.size() > 0)) && (sourceFile != null)) \{
    throw new BuildException((\"Cannot specify both the srcfile \" + \"attribute and a nested <srcfiles> \") + \"or <srcresources> element.\");
\}" shape=ellipse]
56 [label="13:CtFieldReadImpl@targetFile" shape=ellipse]
57 [label="13:CtLiteralImpl@null" shape=ellipse]
58 [label="13:CtBinaryOperatorImpl@(targetFile == null)" shape=ellipse]
59 [label="13:CtFieldReadImpl@mapperElement" shape=ellipse]
60 [label="13:CtLiteralImpl@null" shape=ellipse]
61 [label="13:CtBinaryOperatorImpl@(mapperElement == null)" shape=ellipse]
62 [label="13:CtBinaryOperatorImpl@(targetFile == null) && (mapperElement == null)" shape=ellipse]
63 [label="14:CtTypeReferenceImpl@BuildException" shape=ellipse]
64 [label="15:CtLiteralImpl@\"The targetfile attribute or a nested \"" shape=ellipse]
65 [label="15:CtLiteralImpl@\"mapper element must be set.\"" shape=ellipse]
66 [label="15:CtBinaryOperatorImpl@\"The targetfile attribute or a nested \" + \"mapper element must be set.\"" shape=ellipse]
67 [label="14:CtConstructorCallImpl@new BuildException(\"The targetfile attribute or a nested \" + \"mapper element must be set.\")" shape=ellipse]
68 [label="14:CtThrowImpl@throw new BuildException(\"The targetfile attribute or a nested \" + \"mapper element must be set.\")" shape=ellipse]
69 [label="13:CtBlockImpl@\{
    throw new BuildException(\"The targetfile attribute or a nested \" + \"mapper element must be set.\");
\}" shape=ellipse]
70 [label="13:CtIfImpl@if ((targetFile == null) && (mapperElement == null)) \{
    throw new BuildException(\"The targetfile attribute or a nested \" + \"mapper element must be set.\");
\}" shape=ellipse]
71 [label="17:CtFieldReadImpl@targetFile" shape=ellipse]
72 [label="17:CtLiteralImpl@null" shape=ellipse]
73 [label="17:CtBinaryOperatorImpl@(targetFile != null)" shape=ellipse]
74 [label="17:CtExecutableReferenceImpl@exists()" shape=ellipse]
75 [label="17:CtVirtualElement@exists" shape=ellipse]
76 [label="17:CtFieldReadImpl@targetFile" shape=ellipse]
77 [label="17:CtInvocationImpl@targetFile.exists()" shape=ellipse]
78 [label="17:CtUnaryOperatorImpl@(!targetFile.exists())" shape=ellipse]
79 [label="17:CtBinaryOperatorImpl@(targetFile != null) && (!targetFile.exists())" shape=ellipse]
80 [label="18:CtExecutableReferenceImpl@log(<unknown>,<unknown>)" shape=ellipse]
81 [label="18:CtVirtualElement@log" shape=ellipse]
82 [label="18:CtLiteralImpl@\"The targetfile \\"\"" shape=ellipse]
83 [label="18:CtExecutableReferenceImpl@getAbsolutePath()" shape=ellipse]
84 [label="18:CtVirtualElement@getAbsolutePath" shape=ellipse]
85 [label="18:CtFieldReadImpl@targetFile" shape=ellipse]
86 [label="18:CtInvocationImpl@targetFile.getAbsolutePath()" shape=ellipse]
87 [label="18:CtBinaryOperatorImpl@(\"The targetfile \\"\" + targetFile.getAbsolutePath())" shape=ellipse]
88 [label="18:CtLiteralImpl@\"\\" does not exist.\"" shape=ellipse]
89 [label="18:CtBinaryOperatorImpl@(\"The targetfile \\"\" + targetFile.getAbsolutePath()) + \"\\" does not exist.\"" shape=ellipse]
90 [label="18:CtTypeAccessImpl@MSG_VERBOSE" shape=ellipse]
91 [label="18:CtInvocationImpl@log((\"The targetfile \\"\" + targetFile.getAbsolutePath()) + \"\\" does not exist.\", MSG_VERBOSE)" shape=ellipse]
92 [label="19:CtLiteralImpl@false" shape=ellipse]
93 [label="19:CtReturnImpl@return false" shape=ellipse]
94 [label="17:CtBlockImpl@\{
    log((\"The targetfile \\"\" + targetFile.getAbsolutePath()) + \"\\" does not exist.\", MSG_VERBOSE);
    return false;
\}" shape=ellipse]
95 [label="17:CtIfImpl@if ((targetFile != null) && (!targetFile.exists())) \{
    log((\"The targetfile \\"\" + targetFile.getAbsolutePath()) + \"\\" does not exist.\", MSG_VERBOSE);
    return false;
\}" shape=ellipse]
96 [label="21:CtFieldReadImpl@sourceFile" shape=ellipse]
97 [label="21:CtLiteralImpl@null" shape=ellipse]
98 [label="21:CtBinaryOperatorImpl@(sourceFile != null)" shape=ellipse]
99 [label="21:CtExecutableReferenceImpl@exists()" shape=ellipse]
100 [label="21:CtVirtualElement@exists" shape=ellipse]
101 [label="21:CtFieldReadImpl@sourceFile" shape=ellipse]
102 [label="21:CtInvocationImpl@sourceFile.exists()" shape=ellipse]
103 [label="21:CtUnaryOperatorImpl@(!sourceFile.exists())" shape=ellipse]
104 [label="21:CtBinaryOperatorImpl@(sourceFile != null) && (!sourceFile.exists())" shape=ellipse]
105 [label="22:CtTypeReferenceImpl@BuildException" shape=ellipse]
106 [label="22:CtExecutableReferenceImpl@getAbsolutePath()" shape=ellipse]
107 [label="22:CtVirtualElement@getAbsolutePath" shape=ellipse]
108 [label="22:CtFieldReadImpl@sourceFile" shape=ellipse]
109 [label="22:CtInvocationImpl@sourceFile.getAbsolutePath()" shape=ellipse]
110 [label="22:CtLiteralImpl@\" not found.\"" shape=ellipse]
111 [label="22:CtBinaryOperatorImpl@sourceFile.getAbsolutePath() + \" not found.\"" shape=ellipse]
112 [label="22:CtConstructorCallImpl@new BuildException(sourceFile.getAbsolutePath() + \" not found.\")" shape=ellipse]
113 [label="22:CtThrowImpl@throw new BuildException(sourceFile.getAbsolutePath() + \" not found.\")" shape=ellipse]
114 [label="21:CtBlockImpl@\{
    throw new BuildException(sourceFile.getAbsolutePath() + \" not found.\");
\}" shape=ellipse]
115 [label="21:CtIfImpl@if ((sourceFile != null) && (!sourceFile.exists())) \{
    throw new BuildException(sourceFile.getAbsolutePath() + \" not found.\");
\}" shape=ellipse]
116 [label="24:CtTypeReferenceImpl@boolean" shape=ellipse]
117 [label="24:CtLiteralImpl@true" shape=ellipse]
118 [label="24:CtVirtualElement@upToDate" shape=ellipse]
119 [label="24:CtLocalVariableImpl@boolean upToDate = true" shape=ellipse]
120 [label="25:CtFieldReadImpl@sourceFile" shape=ellipse]
121 [label="25:CtLiteralImpl@null" shape=ellipse]
122 [label="25:CtBinaryOperatorImpl@sourceFile != null" shape=ellipse]
123 [label="26:CtFieldReadImpl@mapperElement" shape=ellipse]
124 [label="26:CtLiteralImpl@null" shape=ellipse]
125 [label="26:CtBinaryOperatorImpl@mapperElement == null" shape=ellipse]
126 [label="27:CtVariableWriteImpl@upToDate" shape=ellipse]
127 [label="27:CtVariableReadImpl@upToDate" shape=ellipse]
128 [label="27:CtExecutableReferenceImpl@lastModified()" shape=ellipse]
129 [label="27:CtVirtualElement@lastModified" shape=ellipse]
130 [label="27:CtFieldReadImpl@targetFile" shape=ellipse]
131 [label="27:CtInvocationImpl@targetFile.lastModified()" shape=ellipse]
132 [label="27:CtExecutableReferenceImpl@lastModified()" shape=ellipse]
133 [label="27:CtVirtualElement@lastModified" shape=ellipse]
134 [label="27:CtFieldReadImpl@sourceFile" shape=ellipse]
135 [label="27:CtInvocationImpl@sourceFile.lastModified()" shape=ellipse]
136 [label="27:CtBinaryOperatorImpl@(targetFile.lastModified() >= sourceFile.lastModified())" shape=ellipse]
137 [label="27:CtBinaryOperatorImpl@upToDate && (targetFile.lastModified() >= sourceFile.lastModified())" shape=ellipse]
138 [label="27:CtAssignmentImpl@upToDate = upToDate && (targetFile.lastModified() >= sourceFile.lastModified())" shape=ellipse]
139 [label="26:CtBlockImpl@\{
    upToDate = upToDate && (targetFile.lastModified() >= sourceFile.lastModified());
\}" shape=ellipse]
140 [label="29:CtTypeReferenceImpl@SourceFileScanner" shape=ellipse]
141 [label="29:CtTypeReferenceImpl@SourceFileScanner" shape=ellipse]
142 [label="29:CtThisAccessImpl@this" shape=ellipse]
143 [label="29:CtConstructorCallImpl@new SourceFileScanner(this)" shape=ellipse]
144 [label="29:CtVirtualElement@sfs" shape=ellipse]
145 [label="29:CtLocalVariableImpl@SourceFileScanner sfs = new SourceFileScanner(this)" shape=ellipse]
146 [label="30:CtVariableWriteImpl@upToDate" shape=ellipse]
147 [label="31:CtVariableReadImpl@upToDate" shape=ellipse]
148 [label="32:CtExecutableReferenceImpl@restrict(java.lang.String[],<unknown>,<unknown>)" shape=ellipse]
149 [label="32:CtVirtualElement@restrict" shape=ellipse]
150 [label="32:CtVariableReadImpl@sfs" shape=ellipse]
151 [label="33:CtNewArrayImpl@new String[]\{ sourceFile.getAbsolutePath() \}" shape=ellipse]
152 [label="33:CtInvocationImpl@sourceFile.getAbsolutePath()" shape=ellipse]
153 [label="34:CtLiteralImpl@null" shape=ellipse]
154 [label="35:CtLiteralImpl@null" shape=ellipse]
155 [label="36:CtExecutableReferenceImpl@getImplementation()" shape=ellipse]
156 [label="36:CtVirtualElement@getImplementation" shape=ellipse]
157 [label="36:CtFieldReadImpl@mapperElement" shape=ellipse]
158 [label="36:CtInvocationImpl@mapperElement.getImplementation()" shape=ellipse]
159 [label="32:CtInvocationImpl@sfs.restrict(new String[]\{ sourceFile.getAbsolutePath() \}, null, null, mapperElement.getImplementation())" shape=ellipse]
160 [label="32:CtFieldReadImpl@sfs.restrict(new String[]\{ sourceFile.getAbsolutePath() \}, null, null, mapperElement.getImplementation()).length" shape=ellipse]
161 [label="38:CtLiteralImpl@0" shape=ellipse]
162 [label="32:CtBinaryOperatorImpl@(sfs.restrict(new String[]\{ sourceFile.getAbsolutePath() \}, null, null, mapperElement.getImplementation()).length == 0)" shape=ellipse]
163 [label="31:CtBinaryOperatorImpl@upToDate && (sfs.restrict(new String[]\{ sourceFile.getAbsolutePath() \}, null, null, mapperElement.getImplementation()).length == 0)" shape=ellipse]
164 [label="30:CtAssignmentImpl@upToDate = upToDate && (sfs.restrict(new String[]\{ sourceFile.getAbsolutePath() \}, null, null, mapperElement.getImplementation()).length == 0)" shape=ellipse]
165 [label="28:CtBlockImpl@\{
    SourceFileScanner sfs = new SourceFileScanner(this);
    upToDate = upToDate && (sfs.restrict(new String[]\{ sourceFile.getAbsolutePath() \}, null, null, mapperElement.getImplementation()).length == 0);
\}" shape=ellipse]
166 [label="26:CtIfImpl@if (mapperElement == null) \{
    upToDate = upToDate && (targetFile.lastModified() >= sourceFile.lastModified());
\} else \{
    SourceFileScanner sfs = new SourceFileScanner(this);
    upToDate = upToDate && (sfs.restrict(new String[]\{ sourceFile.getAbsolutePath() \}, null, null, mapperElement.getImplementation()).length == 0);
\}" shape=ellipse]
167 [label="25:CtBlockImpl@\{
    if (mapperElement == null) \{
        upToDate = upToDate && (targetFile.lastModified() >= sourceFile.lastModified());
    \} else \{
        SourceFileScanner sfs = new SourceFileScanner(this);
        upToDate = upToDate && (sfs.restrict(new String[]\{ sourceFile.getAbsolutePath() \}, null, null, mapperElement.getImplementation()).length == 0);
    \}
\}" shape=ellipse]
168 [label="25:CtIfImpl@if (sourceFile != null) \{
    if (mapperElement == null) \{
        upToDate = upToDate && (targetFile.lastModified() >= sourceFile.lastModified());
    \} else \{
        SourceFileScanner sfs = new SourceFileScanner(this);
        upToDate = upToDate && (sfs.restrict(new String[]\{ sourceFile.getAbsolutePath() \}, null, null, mapperElement.getImplementation()).length == 0);
    \}
\}" shape=ellipse]
169 [label="41:CtTypeReferenceImpl@Enumeration" shape=ellipse]
170 [label="41:CtExecutableReferenceImpl@elements()" shape=ellipse]
171 [label="41:CtVirtualElement@elements" shape=ellipse]
172 [label="41:CtFieldReadImpl@sourceFileSets" shape=ellipse]
173 [label="41:CtInvocationImpl@sourceFileSets.elements()" shape=ellipse]
174 [label="41:CtVirtualElement@e" shape=ellipse]
175 [label="41:CtLocalVariableImpl@Enumeration e = sourceFileSets.elements()" shape=ellipse]
176 [label="42:CtVariableReadImpl@upToDate" shape=ellipse]
177 [label="42:CtExecutableReferenceImpl@hasMoreElements()" shape=ellipse]
178 [label="42:CtVirtualElement@hasMoreElements" shape=ellipse]
179 [label="42:CtVariableReadImpl@e" shape=ellipse]
180 [label="42:CtInvocationImpl@e.hasMoreElements()" shape=ellipse]
181 [label="42:CtBinaryOperatorImpl@upToDate && e.hasMoreElements()" shape=ellipse]
182 [label="43:CtTypeReferenceImpl@FileSet" shape=ellipse]
183 [label="43:CtExecutableReferenceImpl@nextElement()" shape=ellipse]
184 [label="43:CtVirtualElement@nextElement" shape=ellipse]
185 [label="43:CtVariableReadImpl@e" shape=ellipse]
186 [label="43:CtInvocationImpl@((FileSet) (e.nextElement()))" shape=ellipse]
187 [label="43:CtTypeReferenceImpl@FileSet" shape=ellipse]
188 [label="43:CtVirtualElement@fs" shape=ellipse]
189 [label="43:CtLocalVariableImpl@FileSet fs = ((FileSet) (e.nextElement()))" shape=ellipse]
190 [label="44:CtTypeReferenceImpl@DirectoryScanner" shape=ellipse]
191 [label="44:CtExecutableReferenceImpl@getDirectoryScanner()" shape=ellipse]
192 [label="44:CtVirtualElement@getDirectoryScanner" shape=ellipse]
193 [label="44:CtVariableReadImpl@fs" shape=ellipse]
194 [label="44:CtExecutableReferenceImpl@getProject()" shape=ellipse]
195 [label="44:CtVirtualElement@getProject" shape=ellipse]
196 [label="44:CtInvocationImpl@getProject()" shape=ellipse]
197 [label="44:CtInvocationImpl@fs.getDirectoryScanner(getProject())" shape=ellipse]
198 [label="44:CtVirtualElement@ds" shape=ellipse]
199 [label="44:CtLocalVariableImpl@DirectoryScanner ds = fs.getDirectoryScanner(getProject())" shape=ellipse]
200 [label="45:CtVariableWriteImpl@upToDate" shape=ellipse]
201 [label="45:CtVariableReadImpl@upToDate" shape=ellipse]
202 [label="45:CtExecutableReferenceImpl@scanDir(<unknown>,<unknown>)" shape=ellipse]
203 [label="45:CtVirtualElement@scanDir" shape=ellipse]
204 [label="45:CtExecutableReferenceImpl@getDir()" shape=ellipse]
205 [label="45:CtVirtualElement@getDir" shape=ellipse]
206 [label="45:CtVariableReadImpl@fs" shape=ellipse]
207 [label="45:CtExecutableReferenceImpl@getProject()" shape=ellipse]
208 [label="45:CtVirtualElement@getProject" shape=ellipse]
209 [label="45:CtInvocationImpl@getProject()" shape=ellipse]
210 [label="45:CtInvocationImpl@fs.getDir(getProject())" shape=ellipse]
211 [label="45:CtExecutableReferenceImpl@getIncludedFiles()" shape=ellipse]
212 [label="45:CtVirtualElement@getIncludedFiles" shape=ellipse]
213 [label="45:CtVariableReadImpl@ds" shape=ellipse]
214 [label="45:CtInvocationImpl@ds.getIncludedFiles()" shape=ellipse]
215 [label="45:CtInvocationImpl@scanDir(fs.getDir(getProject()), ds.getIncludedFiles())" shape=ellipse]
216 [label="45:CtBinaryOperatorImpl@upToDate && scanDir(fs.getDir(getProject()), ds.getIncludedFiles())" shape=ellipse]
217 [label="45:CtAssignmentImpl@upToDate = upToDate && scanDir(fs.getDir(getProject()), ds.getIncludedFiles())" shape=ellipse]
218 [label="42:CtBlockImpl@\{
    FileSet fs = ((FileSet) (e.nextElement()));
    DirectoryScanner ds = fs.getDirectoryScanner(getProject());
    upToDate = upToDate && scanDir(fs.getDir(getProject()), ds.getIncludedFiles());
\}" shape=ellipse]
219 [label="42:CtWhileImpl@while (upToDate && e.hasMoreElements()) \{
    FileSet fs = ((FileSet) (e.nextElement()));
    DirectoryScanner ds = fs.getDirectoryScanner(getProject());
    upToDate = upToDate && scanDir(fs.getDir(getProject()), ds.getIncludedFiles());
\} " shape=ellipse]
220 [label="47:CtVariableReadImpl@upToDate" shape=ellipse]
221 [label="48:CtVirtualElement@Resource[]" shape=ellipse]
222 [label="48:CtArrayTypeReferenceImpl@Resource[]" shape=ellipse]
223 [label="48:CtExecutableReferenceImpl@listResources()" shape=ellipse]
224 [label="48:CtVirtualElement@listResources" shape=ellipse]
225 [label="48:CtFieldReadImpl@sourceResources" shape=ellipse]
226 [label="48:CtInvocationImpl@sourceResources.listResources()" shape=ellipse]
227 [label="48:CtVirtualElement@r" shape=ellipse]
228 [label="48:CtLocalVariableImpl@Resource[] r = sourceResources.listResources()" shape=ellipse]
229 [label="49:CtVariableWriteImpl@upToDate" shape=ellipse]
230 [label="50:CtVariableReadImpl@upToDate" shape=ellipse]
231 [label="51:CtExecutableReferenceImpl@selectOutOfDateSources(PlaceHold,Resource[])" shape=ellipse]
232 [label="51:CtVirtualElement@selectOutOfDateSources" shape=ellipse]
233 [label="51:CtTypeAccessImpl@ResourceUtils" shape=ellipse]
234 [label="51:CtThisAccessImpl@this" shape=ellipse]
235 [label="51:CtVariableReadImpl@r" shape=ellipse]
236 [label="51:CtExecutableReferenceImpl@getMapper()" shape=ellipse]
237 [label="51:CtVirtualElement@getMapper" shape=ellipse]
238 [label="51:CtInvocationImpl@getMapper()" shape=ellipse]
239 [label="51:CtExecutableReferenceImpl@getProject()" shape=ellipse]
240 [label="51:CtVirtualElement@getProject" shape=ellipse]
241 [label="51:CtInvocationImpl@getProject()" shape=ellipse]
242 [label="51:CtInvocationImpl@ResourceUtils.selectOutOfDateSources(this, r, getMapper(), getProject())" shape=ellipse]
243 [label="51:CtFieldReadImpl@ResourceUtils.selectOutOfDateSources(this, r, getMapper(), getProject()).length" shape=ellipse]
244 [label="52:CtLiteralImpl@0" shape=ellipse]
245 [label="51:CtBinaryOperatorImpl@(ResourceUtils.selectOutOfDateSources(this, r, getMapper(), getProject()).length == 0)" shape=ellipse]
246 [label="50:CtBinaryOperatorImpl@upToDate && (ResourceUtils.selectOutOfDateSources(this, r, getMapper(), getProject()).length == 0)" shape=ellipse]
247 [label="49:CtAssignmentImpl@upToDate = upToDate && (ResourceUtils.selectOutOfDateSources(this, r, getMapper(), getProject()).length == 0)" shape=ellipse]
248 [label="47:CtBlockImpl@\{
    Resource[] r = sourceResources.listResources();
    upToDate = upToDate && (ResourceUtils.selectOutOfDateSources(this, r, getMapper(), getProject()).length == 0);
\}" shape=ellipse]
249 [label="47:CtIfImpl@if (upToDate) \{
    Resource[] r = sourceResources.listResources();
    upToDate = upToDate && (ResourceUtils.selectOutOfDateSources(this, r, getMapper(), getProject()).length == 0);
\}" shape=ellipse]
250 [label="54:CtVariableReadImpl@upToDate" shape=ellipse]
251 [label="54:CtReturnImpl@return upToDate" shape=ellipse]
252 [label="2:CtBlockImpl@\{
    if (((sourceFileSets.size() == 0) && (sourceResources.size() == 0)) && (sourceFile == null)) \{
        throw new BuildException((\"At least one srcfile or a nested \" + \"<srcfiles> or <srcresources> element \") + \"must be set.\");
    \}
    if (((sourceFileSets.size() > 0) || (sourceResources.size() > 0)) && (sourceFile != null)) \{
        throw new BuildException((\"Cannot specify both the srcfile \" + \"attribute and a nested <srcfiles> \") + \"or <srcresources> element.\");
    \}
    if ((targetFile == null) && (mapperElement == null)) \{
        throw new BuildException(\"The targetfile attribute or a nested \" + \"mapper element must be set.\");
    \}
    if ((targetFile != null) && (!targetFile.exists())) \{
        log((\"The targetfile \\"\" + targetFile.getAbsolutePath()) + \"\\" does not exist.\", MSG_VERBOSE);
        return false;
    \}
    if ((sourceFile != null) && (!sourceFile.exists())) \{
        throw new BuildException(sourceFile.getAbsolutePath() + \" not found.\");
    \}
    boolean upToDate = true;
    if (sourceFile != null) \{
        if (mapperElement == null) \{
            upToDate = upToDate && (targetFile.lastModified() >= sourceFile.lastModified());
        \} else \{
            SourceFileScanner sfs = new SourceFileScanner(this);
            upToDate = upToDate && (sfs.restrict(new String[]\{ sourceFile.getAbsolutePath() \}, null, null, mapperElement.getImplementation()).length == 0);
        \}
    \}
    Enumeration e = sourceFileSets.elements();
    while (upToDate && e.hasMoreElements()) \{
        FileSet fs = ((FileSet) (e.nextElement()));
        DirectoryScanner ds = fs.getDirectoryScanner(getProject());
        upToDate = upToDate && scanDir(fs.getDir(getProject()), ds.getIncludedFiles());
    \} 
    if (upToDate) \{
        Resource[] r = sourceResources.listResources();
        upToDate = upToDate && (ResourceUtils.selectOutOfDateSources(this, r, getMapper(), getProject()).length == 0);
    \}
    return upToDate;
\}" shape=ellipse]
253 [label="2:CtMethodImpl@public boolean eval() \{
    if (((sourceFileSets.size() == 0) && (sourceResources.size() == 0)) && (sourceFile == null)) \{
        throw new BuildException((\"At least one srcfile or a nested \" + \"<srcfiles> or <srcresources> element \") + \"must be set.\");
    \}
    if (((sourceFileSets.size() > 0) || (sourceResources.size() > 0)) && (sourceFile != null)) \{
        throw new BuildException((\"Cannot specify both the srcfile \" + \"attribute and a nested <srcfiles> \") + \"or <srcresources> element.\");
    \}
    if ((targetFile == null) && (mapperElement == null)) \{
        throw new BuildException(\"The targetfile attribute or a nested \" + \"mapper element must be set.\");
    \}
    if ((targetFile != null) && (!targetFile.exists())) \{
        log((\"The targetfile \\"\" + targetFile.getAbsolutePath()) + \"\\" does not exist.\", MSG_VERBOSE);
        return false;
    \}
    if ((sourceFile != null) && (!sourceFile.exists())) \{
        throw new BuildException(sourceFile.getAbsolutePath() + \" not found.\");
    \}
    boolean upToDate = true;
    if (sourceFile != null) \{
        if (mapperElement == null) \{
            upToDate = upToDate && (targetFile.lastModified() >= sourceFile.lastModified());
        \} else \{
            SourceFileScanner sfs = new SourceFileScanner(this);
            upToDate = upToDate && (sfs.restrict(new String[]\{ sourceFile.getAbsolutePath() \}, null, null, mapperElement.getImplementation()).length == 0);
        \}
    \}
    Enumeration e = sourceFileSets.elements();
    while (upToDate && e.hasMoreElements()) \{
        FileSet fs = ((FileSet) (e.nextElement()));
        DirectoryScanner ds = fs.getDirectoryScanner(getProject());
        upToDate = upToDate && scanDir(fs.getDir(getProject()), ds.getIncludedFiles());
    \} 
    if (upToDate) \{
        Resource[] r = sourceResources.listResources();
        upToDate = upToDate && (ResourceUtils.selectOutOfDateSources(this, r, getMapper(), getProject()).length == 0);
    \}
    return upToDate;
\}" shape=ellipse]
254 [label="51:Update@UPDATE" shape=ellipse]
255 [label="51:CtInvocationImpl@ResourceUtils.selectOutOfDateResources(this, r, getMapper(), getProject(), null)" shape=ellipse]
5 -> 3 [label="AST"];
5 -> 4 [label="AST"];
5 -> 2 [label="AST"];
7 -> 5 [label="AST"];
7 -> 6 [label="AST"];
11 -> 9 [label="AST"];
11 -> 10 [label="AST"];
11 -> 8 [label="AST"];
13 -> 11 [label="AST"];
13 -> 12 [label="AST"];
14 -> 7 [label="AST"];
14 -> 13 [label="AST"];
17 -> 15 [label="AST"];
17 -> 16 [label="AST"];
18 -> 14 [label="AST"];
18 -> 17 [label="AST"];
18 -> 27 [label="Control Dep"];
18 -> 26 [label="Control Dep"];
18 -> 25 [label="Control Dep"];
18 -> 24 [label="Control Dep"];
18 -> 22 [label="Control Dep"];
18 -> 20 [label="Control Dep"];
18 -> 21 [label="Control Dep"];
18 -> 23 [label="Control Dep"];
22 -> 20 [label="AST"];
22 -> 21 [label="AST"];
24 -> 22 [label="AST"];
24 -> 23 [label="AST"];
25 -> 24 [label="AST"];
26 -> 25 [label="AST"];
27 -> 26 [label="AST"];
28 -> 18 [label="AST"];
28 -> 27 [label="AST"];
32 -> 30 [label="AST"];
32 -> 31 [label="AST"];
32 -> 29 [label="AST"];
34 -> 32 [label="AST"];
34 -> 33 [label="AST"];
38 -> 36 [label="AST"];
38 -> 37 [label="AST"];
38 -> 35 [label="AST"];
40 -> 38 [label="AST"];
40 -> 39 [label="AST"];
41 -> 34 [label="AST"];
41 -> 40 [label="AST"];
44 -> 42 [label="AST"];
44 -> 43 [label="AST"];
45 -> 41 [label="AST"];
45 -> 44 [label="AST"];
45 -> 54 [label="Control Dep"];
45 -> 53 [label="Control Dep"];
45 -> 52 [label="Control Dep"];
45 -> 51 [label="Control Dep"];
45 -> 49 [label="Control Dep"];
45 -> 47 [label="Control Dep"];
45 -> 48 [label="Control Dep"];
45 -> 50 [label="Control Dep"];
49 -> 47 [label="AST"];
49 -> 48 [label="AST"];
51 -> 49 [label="AST"];
51 -> 50 [label="AST"];
52 -> 51 [label="AST"];
53 -> 52 [label="AST"];
54 -> 53 [label="AST"];
55 -> 45 [label="AST"];
55 -> 54 [label="AST"];
58 -> 56 [label="AST"];
58 -> 57 [label="AST"];
61 -> 59 [label="AST"];
61 -> 60 [label="AST"];
62 -> 58 [label="AST"];
62 -> 61 [label="AST"];
62 -> 69 [label="Control Dep"];
62 -> 68 [label="Control Dep"];
62 -> 67 [label="Control Dep"];
62 -> 66 [label="Control Dep"];
62 -> 64 [label="Control Dep"];
62 -> 65 [label="Control Dep"];
66 -> 64 [label="AST"];
66 -> 65 [label="AST"];
67 -> 66 [label="AST"];
68 -> 67 [label="AST"];
69 -> 68 [label="AST"];
70 -> 62 [label="AST"];
70 -> 69 [label="AST"];
73 -> 71 [label="AST"];
73 -> 72 [label="AST"];
77 -> 75 [label="AST"];
77 -> 76 [label="AST"];
77 -> 74 [label="AST"];
78 -> 77 [label="AST"];
79 -> 73 [label="AST"];
79 -> 78 [label="AST"];
79 -> 94 [label="Control Dep"];
79 -> 91 [label="Control Dep"];
79 -> 80 [label="Control Dep"];
79 -> 89 [label="Control Dep"];
79 -> 87 [label="Control Dep"];
79 -> 82 [label="Control Dep"];
79 -> 86 [label="Control Dep"];
79 -> 83 [label="Control Dep"];
79 -> 85 [label="Control Dep"];
79 -> 88 [label="Control Dep"];
79 -> 90 [label="Control Dep"];
79 -> 93 [label="Control Dep"];
79 -> 92 [label="Control Dep"];
86 -> 84 [label="AST"];
86 -> 85 [label="AST"];
86 -> 83 [label="AST"];
87 -> 82 [label="AST"];
87 -> 86 [label="AST"];
89 -> 87 [label="AST"];
89 -> 88 [label="AST"];
91 -> 81 [label="AST"];
91 -> 80 [label="AST"];
91 -> 89 [label="AST"];
91 -> 90 [label="AST"];
93 -> 92 [label="AST"];
94 -> 91 [label="AST"];
94 -> 93 [label="AST"];
95 -> 79 [label="AST"];
95 -> 94 [label="AST"];
98 -> 96 [label="AST"];
98 -> 97 [label="AST"];
102 -> 100 [label="AST"];
102 -> 101 [label="AST"];
102 -> 99 [label="AST"];
103 -> 102 [label="AST"];
104 -> 98 [label="AST"];
104 -> 103 [label="AST"];
104 -> 114 [label="Control Dep"];
104 -> 113 [label="Control Dep"];
104 -> 112 [label="Control Dep"];
104 -> 111 [label="Control Dep"];
104 -> 109 [label="Control Dep"];
104 -> 106 [label="Control Dep"];
104 -> 108 [label="Control Dep"];
104 -> 110 [label="Control Dep"];
109 -> 107 [label="AST"];
109 -> 108 [label="AST"];
109 -> 106 [label="AST"];
111 -> 109 [label="AST"];
111 -> 110 [label="AST"];
112 -> 111 [label="AST"];
113 -> 112 [label="AST"];
114 -> 113 [label="AST"];
115 -> 104 [label="AST"];
115 -> 114 [label="AST"];
118 -> 127 [label="Define-Use"];
118 -> 147 [label="Define-Use"];
118 -> 176 [label="Define-Use"];
119 -> 118 [label="AST"];
119 -> 116 [label="AST"];
119 -> 117 [label="AST"];
122 -> 120 [label="AST"];
122 -> 121 [label="AST"];
122 -> 167 [label="Control Dep"];
122 -> 166 [label="Control Dep"];
122 -> 125 [label="Control Dep"];
122 -> 123 [label="Control Dep"];
122 -> 124 [label="Control Dep"];
125 -> 123 [label="AST"];
125 -> 124 [label="AST"];
125 -> 139 [label="Control Dep"];
125 -> 138 [label="Control Dep"];
125 -> 126 [label="Control Dep"];
125 -> 137 [label="Control Dep"];
125 -> 127 [label="Control Dep"];
125 -> 136 [label="Control Dep"];
125 -> 131 [label="Control Dep"];
125 -> 128 [label="Control Dep"];
125 -> 130 [label="Control Dep"];
125 -> 135 [label="Control Dep"];
125 -> 132 [label="Control Dep"];
125 -> 134 [label="Control Dep"];
125 -> 165 [label="Control Dep"];
125 -> 145 [label="Control Dep"];
125 -> 143 [label="Control Dep"];
125 -> 142 [label="Control Dep"];
125 -> 164 [label="Control Dep"];
125 -> 146 [label="Control Dep"];
125 -> 163 [label="Control Dep"];
125 -> 147 [label="Control Dep"];
125 -> 162 [label="Control Dep"];
125 -> 160 [label="Control Dep"];
125 -> 159 [label="Control Dep"];
125 -> 148 [label="Control Dep"];
125 -> 150 [label="Control Dep"];
125 -> 151 [label="Control Dep"];
125 -> 153 [label="Control Dep"];
125 -> 154 [label="Control Dep"];
125 -> 158 [label="Control Dep"];
125 -> 155 [label="Control Dep"];
125 -> 157 [label="Control Dep"];
125 -> 161 [label="Control Dep"];
126 -> 147 [label="Define-Use"];
126 -> 176 [label="Define-Use"];
127 -> 126 [label="Data Dep"];
130 -> 126 [label="Data Dep"];
131 -> 129 [label="AST"];
131 -> 130 [label="AST"];
131 -> 128 [label="AST"];
134 -> 126 [label="Data Dep"];
135 -> 133 [label="AST"];
135 -> 134 [label="AST"];
135 -> 132 [label="AST"];
136 -> 131 [label="AST"];
136 -> 135 [label="AST"];
137 -> 127 [label="AST"];
137 -> 136 [label="AST"];
138 -> 126 [label="AST"];
138 -> 137 [label="AST"];
139 -> 138 [label="AST"];
142 -> 144 [label="Data Dep"];
143 -> 142 [label="AST"];
144 -> 150 [label="Define-Use"];
145 -> 144 [label="AST"];
145 -> 140 [label="AST"];
145 -> 143 [label="AST"];
146 -> 176 [label="Define-Use"];
147 -> 146 [label="Data Dep"];
151 -> 152 [label="AST"];
158 -> 156 [label="AST"];
158 -> 157 [label="AST"];
158 -> 155 [label="AST"];
159 -> 149 [label="AST"];
159 -> 150 [label="AST"];
159 -> 148 [label="AST"];
159 -> 151 [label="AST"];
159 -> 153 [label="AST"];
159 -> 154 [label="AST"];
159 -> 158 [label="AST"];
160 -> 159 [label="AST"];
160 -> 146 [label="Data Dep"];
162 -> 160 [label="AST"];
162 -> 161 [label="AST"];
163 -> 147 [label="AST"];
163 -> 162 [label="AST"];
164 -> 146 [label="AST"];
164 -> 163 [label="AST"];
165 -> 145 [label="AST"];
165 -> 164 [label="AST"];
166 -> 125 [label="AST"];
166 -> 139 [label="AST"];
166 -> 165 [label="AST"];
167 -> 166 [label="AST"];
168 -> 122 [label="AST"];
168 -> 167 [label="AST"];
172 -> 174 [label="Data Dep"];
173 -> 171 [label="AST"];
173 -> 172 [label="AST"];
173 -> 170 [label="AST"];
174 -> 179 [label="Define-Use"];
174 -> 185 [label="Define-Use"];
175 -> 174 [label="AST"];
175 -> 169 [label="AST"];
175 -> 173 [label="AST"];
180 -> 178 [label="AST"];
180 -> 179 [label="AST"];
180 -> 177 [label="AST"];
181 -> 176 [label="AST"];
181 -> 180 [label="AST"];
181 -> 218 [label="Control Dep"];
181 -> 189 [label="Control Dep"];
181 -> 186 [label="Control Dep"];
181 -> 183 [label="Control Dep"];
181 -> 185 [label="Control Dep"];
181 -> 199 [label="Control Dep"];
181 -> 197 [label="Control Dep"];
181 -> 191 [label="Control Dep"];
181 -> 193 [label="Control Dep"];
181 -> 196 [label="Control Dep"];
181 -> 194 [label="Control Dep"];
181 -> 217 [label="Control Dep"];
181 -> 200 [label="Control Dep"];
181 -> 216 [label="Control Dep"];
181 -> 201 [label="Control Dep"];
181 -> 215 [label="Control Dep"];
181 -> 202 [label="Control Dep"];
181 -> 210 [label="Control Dep"];
181 -> 204 [label="Control Dep"];
181 -> 206 [label="Control Dep"];
181 -> 209 [label="Control Dep"];
181 -> 207 [label="Control Dep"];
181 -> 214 [label="Control Dep"];
181 -> 211 [label="Control Dep"];
181 -> 213 [label="Control Dep"];
185 -> 188 [label="Data Dep"];
186 -> 184 [label="AST"];
186 -> 187 [label="AST"];
186 -> 185 [label="AST"];
186 -> 183 [label="AST"];
188 -> 193 [label="Define-Use"];
188 -> 206 [label="Define-Use"];
189 -> 188 [label="AST"];
189 -> 182 [label="AST"];
189 -> 186 [label="AST"];
193 -> 198 [label="Data Dep"];
196 -> 195 [label="AST"];
196 -> 194 [label="AST"];
197 -> 192 [label="AST"];
197 -> 193 [label="AST"];
197 -> 191 [label="AST"];
197 -> 196 [label="AST"];
198 -> 213 [label="Define-Use"];
199 -> 198 [label="AST"];
199 -> 190 [label="AST"];
199 -> 197 [label="AST"];
200 -> 220 [label="Define-Use"];
200 -> 230 [label="Define-Use"];
200 -> 250 [label="Define-Use"];
201 -> 200 [label="Data Dep"];
206 -> 200 [label="Data Dep"];
209 -> 208 [label="AST"];
209 -> 207 [label="AST"];
210 -> 205 [label="AST"];
210 -> 206 [label="AST"];
210 -> 204 [label="AST"];
210 -> 209 [label="AST"];
213 -> 200 [label="Data Dep"];
214 -> 212 [label="AST"];
214 -> 213 [label="AST"];
214 -> 211 [label="AST"];
215 -> 203 [label="AST"];
215 -> 202 [label="AST"];
215 -> 210 [label="AST"];
215 -> 214 [label="AST"];
216 -> 201 [label="AST"];
216 -> 215 [label="AST"];
217 -> 200 [label="AST"];
217 -> 216 [label="AST"];
218 -> 189 [label="AST"];
218 -> 199 [label="AST"];
218 -> 217 [label="AST"];
219 -> 181 [label="AST"];
219 -> 218 [label="AST"];
220 -> 248 [label="Control Dep"];
220 -> 228 [label="Control Dep"];
220 -> 222 [label="Control Dep"];
220 -> 226 [label="Control Dep"];
220 -> 223 [label="Control Dep"];
220 -> 225 [label="Control Dep"];
220 -> 247 [label="Control Dep"];
220 -> 229 [label="Control Dep"];
220 -> 246 [label="Control Dep"];
220 -> 230 [label="Control Dep"];
220 -> 245 [label="Control Dep"];
220 -> 243 [label="Control Dep"];
220 -> 242 [label="Control Dep"];
220 -> 231 [label="Control Dep"];
220 -> 233 [label="Control Dep"];
220 -> 234 [label="Control Dep"];
220 -> 235 [label="Control Dep"];
220 -> 238 [label="Control Dep"];
220 -> 236 [label="Control Dep"];
220 -> 241 [label="Control Dep"];
220 -> 239 [label="Control Dep"];
220 -> 244 [label="Control Dep"];
222 -> 221 [label="AST"];
225 -> 227 [label="Data Dep"];
226 -> 224 [label="AST"];
226 -> 225 [label="AST"];
226 -> 223 [label="AST"];
227 -> 235 [label="Define-Use"];
228 -> 227 [label="AST"];
228 -> 222 [label="AST"];
228 -> 226 [label="AST"];
229 -> 250 [label="Define-Use"];
230 -> 229 [label="Data Dep"];
238 -> 237 [label="AST"];
238 -> 236 [label="AST"];
241 -> 240 [label="AST"];
241 -> 239 [label="AST"];
242 -> 232 [label="AST"];
242 -> 233 [label="AST"];
242 -> 231 [label="AST"];
242 -> 234 [label="AST"];
242 -> 235 [label="AST"];
242 -> 238 [label="AST"];
242 -> 241 [label="AST"];
242 -> 254 [label="Action"];
243 -> 242 [label="AST"];
243 -> 229 [label="Data Dep"];
245 -> 243 [label="AST"];
245 -> 244 [label="AST"];
246 -> 230 [label="AST"];
246 -> 245 [label="AST"];
247 -> 229 [label="AST"];
247 -> 246 [label="AST"];
248 -> 228 [label="AST"];
248 -> 247 [label="AST"];
249 -> 220 [label="AST"];
249 -> 248 [label="AST"];
251 -> 250 [label="AST"];
252 -> 28 [label="AST"];
252 -> 55 [label="AST"];
252 -> 70 [label="AST"];
252 -> 95 [label="AST"];
252 -> 115 [label="AST"];
252 -> 119 [label="AST"];
252 -> 168 [label="AST"];
252 -> 175 [label="AST"];
252 -> 219 [label="AST"];
252 -> 249 [label="AST"];
252 -> 251 [label="AST"];
253 -> 1 [label="AST"];
253 -> 0 [label="AST"];
253 -> 252 [label="AST"];
254 -> 255 [label="Action"];
}