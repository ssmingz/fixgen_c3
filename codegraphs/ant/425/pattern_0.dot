digraph "Pattern" {
0 [label="executeAsForked#?,CommandlineJava#31:UPDATE
execute0#?#5:UPDATE
execute#?#10:UPDATE
execute#?#40:UPDATE" shape=ellipse]
1 [label="executeAsForked#?,CommandlineJava#31:log(\"Executing: \" + commandline.toString(), MSG_VERBOSE)
execute0#?#5:log(cmdl.toString(), MSG_VERBOSE)
execute#?#10:log(\"Forking \" + commandline.toString(), MSG_VERBOSE)
execute#?#40:log(cmdl.toString(), MSG_VERBOSE)" shape=ellipse]
2 [label="executeAsForked#?,CommandlineJava#2:\{
    createClasspath();
    if (getClasspath().toString().length() > 0) \{
        createJvmarg(commandline).setValue(\"-classpath\");
        createJvmarg(commandline).setValue(getClasspath().toString());
    \}
    if (getOutputFile() != null) \{
        commandline.createArgument().setValue(\"-file\");
        commandline.createArgument().setValue(_outputFile.getPath());
    \}
    PathTokenizer sourcesPath = new PathTokenizer(getSourcespath().toString());
    while (sourcesPath.hasMoreTokens()) \{
        File f = new File(sourcesPath.nextToken());
        if ((!f.exists()) || (!f.isDirectory())) \{
            throw new TaskException((\"\\"\" + f.getPath()) + \"\\" does not represent a valid directory. JDepend would fail.\");
        \}
        commandline.createArgument().setValue(f.getPath());
    \} 
    final Execute exe = new Execute();
    exe.setOutput(new LogOutputStream(this, Project.MSG_INFO));
    exe.setError(new LogOutputStream(this, Project.MSG_WARN));
    exe.setCommandline(commandline.getCommandline());
    if (getDir() != null) \{
        exe.setWorkingDirectory(getDir());
    \}
    if (getOutputFile() != null) \{
        getLogger().info(\"Output to be stored in \" + getOutputFile().getPath());
    \}
    log(\"Executing: \" + commandline.toString(), MSG_VERBOSE);
    try \{
        return exe.execute();
    \} catch (IOException e) \{
        throw new TaskException(\"Process fork failed.\", e);
    \}
\}
execute0#?#2:\{
    final Execute exe = new Execute();
    setupStreamHandler(exe);
    log(cmdl.toString(), MSG_VERBOSE);
    exe.setCommandline(cmdl.getCommandline());
    try \{
        if (exe.execute() != 0) \{
            throw new TaskException(\"Metamata task failed.\");
        \}
    \} catch (IOException e) \{
        throw new TaskException(\"Failed to launch Metamata task: \" + e);
    \}
\}
execute#?#9:\{
    log(\"Forking \" + commandline.toString(), MSG_VERBOSE);
    int err = run(commandline.getCommandline());
    if (err == 1) \{
        throw new TaskException(\"ANTLR returned: \" + err);
    \}
\}
execute#?#2:\{
    Enumeration iter = optionalAttrs.keys();
    while (iter.hasMoreElements()) \{
        String name = ((String) (iter.nextElement()));
        Object value = optionalAttrs.get(name);
        cmdl.createArgument().setValue(((\"-\" + name) + \":\") + value.toString());
    \} 
    if ((target == null) || (!target.isFile())) \{
        throw new TaskException(\"Invalid target: \" + target);
    \}
    if (outputDirectory == null) \{
        outputDirectory = new File(target.getParent());
    \}
    if (!outputDirectory.isDirectory()) \{
        throw new TaskException((\"'outputdirectory' \" + outputDirectory) + \" is not a directory.\");
    \}
    cmdl.createArgument().setValue(\"-OUTPUT_DIRECTORY:\" + outputDirectory.getAbsolutePath().replace('\\', '/'));
    String targetName = target.getName();
    final File javaFile = new File(outputDirectory, targetName.substring(0, targetName.indexOf(\".jjt\")) + \".jj\");
    if (javaFile.exists() && (target.lastModified() < javaFile.lastModified())) \{
        getLogger().info((\"Target is already built - skipping (\" + target) + \")\");
        return;
    \}
    cmdl.createArgument().setValue(target.getAbsolutePath());
    if ((javaccHome == null) || (!javaccHome.isDirectory())) \{
        throw new TaskException(\"Javacchome not set.\");
    \}
    final Path classpath = cmdl.createClasspath(getProject());
    classpath.createPathElement().setPath(javaccHome.getAbsolutePath() + \"/JavaCC.zip\");
    classpath.addJavaRuntime();
    final Argument arg = cmdl.createVmArgument();
    arg.setValue(\"-mx140M\");
    arg.setValue(\"-Dinstall.root=\" + javaccHome.getAbsolutePath());
    final Execute exe = new Execute();
    exe.setOutput(new LogOutputStream(this, Project.MSG_INFO));
    exe.setError(new LogOutputStream(this, Project.MSG_INFO));
    log(cmdl.toString(), MSG_VERBOSE);
    exe.setCommandline(cmdl.getCommandline());
    try \{
        if (exe.execute() != 0) \{
            throw new TaskException(\"JJTree failed.\");
        \}
    \} catch (IOException e) \{
        throw new TaskException(\"Failed to launch JJTree: \" + e);
    \}
\}" shape=ellipse]
3 [label="executeAsForked#?,CommandlineJava#2:public int executeAsForked(CommandlineJava commandline) throws TaskException \{
    createClasspath();
    if (getClasspath().toString().length() > 0) \{
        createJvmarg(commandline).setValue(\"-classpath\");
        createJvmarg(commandline).setValue(getClasspath().toString());
    \}
    if (getOutputFile() != null) \{
        commandline.createArgument().setValue(\"-file\");
        commandline.createArgument().setValue(_outputFile.getPath());
    \}
    PathTokenizer sourcesPath = new PathTokenizer(getSourcespath().toString());
    while (sourcesPath.hasMoreTokens()) \{
        File f = new File(sourcesPath.nextToken());
        if ((!f.exists()) || (!f.isDirectory())) \{
            throw new TaskException((\"\\"\" + f.getPath()) + \"\\" does not represent a valid directory. JDepend would fail.\");
        \}
        commandline.createArgument().setValue(f.getPath());
    \} 
    final Execute exe = new Execute();
    exe.setOutput(new LogOutputStream(this, Project.MSG_INFO));
    exe.setError(new LogOutputStream(this, Project.MSG_WARN));
    exe.setCommandline(commandline.getCommandline());
    if (getDir() != null) \{
        exe.setWorkingDirectory(getDir());
    \}
    if (getOutputFile() != null) \{
        getLogger().info(\"Output to be stored in \" + getOutputFile().getPath());
    \}
    log(\"Executing: \" + commandline.toString(), MSG_VERBOSE);
    try \{
        return exe.execute();
    \} catch (IOException e) \{
        throw new TaskException(\"Process fork failed.\", e);
    \}
\}
execute0#?#2:protected void execute0() throws TaskException \{
    final Execute exe = new Execute();
    setupStreamHandler(exe);
    log(cmdl.toString(), MSG_VERBOSE);
    exe.setCommandline(cmdl.getCommandline());
    try \{
        if (exe.execute() != 0) \{
            throw new TaskException(\"Metamata task failed.\");
        \}
    \} catch (IOException e) \{
        throw new TaskException(\"Failed to launch Metamata task: \" + e);
    \}
\}
execute#?#2:public void execute() throws TaskException \{
    Enumeration iter = optionalAttrs.keys();
    while (iter.hasMoreElements()) \{
        String name = ((String) (iter.nextElement()));
        Object value = optionalAttrs.get(name);
        cmdl.createArgument().setValue(((\"-\" + name) + \":\") + value.toString());
    \} 
    if ((target == null) || (!target.isFile())) \{
        throw new TaskException(\"Invalid target: \" + target);
    \}
    if (outputDirectory == null) \{
        outputDirectory = new File(target.getParent());
    \}
    if (!outputDirectory.isDirectory()) \{
        throw new TaskException((\"'outputdirectory' \" + outputDirectory) + \" is not a directory.\");
    \}
    cmdl.createArgument().setValue(\"-OUTPUT_DIRECTORY:\" + outputDirectory.getAbsolutePath().replace('\\', '/'));
    String targetName = target.getName();
    final File javaFile = new File(outputDirectory, targetName.substring(0, targetName.indexOf(\".jjt\")) + \".jj\");
    if (javaFile.exists() && (target.lastModified() < javaFile.lastModified())) \{
        getLogger().info((\"Target is already built - skipping (\" + target) + \")\");
        return;
    \}
    cmdl.createArgument().setValue(target.getAbsolutePath());
    if ((javaccHome == null) || (!javaccHome.isDirectory())) \{
        throw new TaskException(\"Javacchome not set.\");
    \}
    final Path classpath = cmdl.createClasspath(getProject());
    classpath.createPathElement().setPath(javaccHome.getAbsolutePath() + \"/JavaCC.zip\");
    classpath.addJavaRuntime();
    final Argument arg = cmdl.createVmArgument();
    arg.setValue(\"-mx140M\");
    arg.setValue(\"-Dinstall.root=\" + javaccHome.getAbsolutePath());
    final Execute exe = new Execute();
    exe.setOutput(new LogOutputStream(this, Project.MSG_INFO));
    exe.setError(new LogOutputStream(this, Project.MSG_INFO));
    log(cmdl.toString(), MSG_VERBOSE);
    exe.setCommandline(cmdl.getCommandline());
    try \{
        if (exe.execute() != 0) \{
            throw new TaskException(\"JJTree failed.\");
        \}
    \} catch (IOException e) \{
        throw new TaskException(\"Failed to launch JJTree: \" + e);
    \}
\}" shape=ellipse]
4 [label="executeAsForked#?,CommandlineJava#3:createClasspath()
execute0#?#4:setupStreamHandler(exe)
execute#?#33:classpath.addJavaRuntime()" shape=ellipse]
5 [label="executeAsForked#?,CommandlineJava#4:if (getClasspath().toString().length() > 0) \{
    createJvmarg(commandline).setValue(\"-classpath\");
    createJvmarg(commandline).setValue(getClasspath().toString());
\}
execute0#?#7:try \{
    if (exe.execute() != 0) \{
        throw new TaskException(\"Metamata task failed.\");
    \}
\} catch (IOException e) \{
    throw new TaskException(\"Failed to launch Metamata task: \" + e);
\}
execute#?#11:int err = run(commandline.getCommandline())
execute#?#31:final Path classpath = cmdl.createClasspath(getProject())" shape=ellipse]
6 [label="executeAsForked#?,CommandlineJava#8:if (getOutputFile() != null) \{
    commandline.createArgument().setValue(\"-file\");
    commandline.createArgument().setValue(_outputFile.getPath());
\}
execute0#?#3:final Execute exe = new Execute()
execute#?#12:if (err == 1) \{
    throw new TaskException(\"ANTLR returned: \" + err);
\}
execute#?#12:if (outputDirectory == null) \{
    outputDirectory = new File(target.getParent());
\}" shape=ellipse]
7 [label="executeAsForked#?,CommandlineJava#12:PathTokenizer sourcesPath = new PathTokenizer(getSourcespath().toString())
execute#?#3:Enumeration iter = optionalAttrs.keys()" shape=ellipse]
8 [label="executeAsForked#?,CommandlineJava#13:while (sourcesPath.hasMoreTokens()) \{
    File f = new File(sourcesPath.nextToken());
    if ((!f.exists()) || (!f.isDirectory())) \{
        throw new TaskException((\"\\"\" + f.getPath()) + \"\\" does not represent a valid directory. JDepend would fail.\");
    \}
    commandline.createArgument().setValue(f.getPath());
\} 
execute#?#4:while (iter.hasMoreElements()) \{
    String name = ((String) (iter.nextElement()));
    Object value = optionalAttrs.get(name);
    cmdl.createArgument().setValue(((\"-\" + name) + \":\") + value.toString());
\} " shape=ellipse]
9 [label="executeAsForked#?,CommandlineJava#21:final Execute exe = new Execute()
execute#?#37:final Execute exe = new Execute()" shape=ellipse]
10 [label="executeAsForked#?,CommandlineJava#22:exe.setOutput(new LogOutputStream(this, Project.MSG_INFO))
execute0#?#6:exe.setCommandline(cmdl.getCommandline())
execute#?#38:exe.setOutput(new LogOutputStream(this, Project.MSG_INFO))" shape=ellipse]
11 [label="executeAsForked#?,CommandlineJava#23:exe.setError(new LogOutputStream(this, Project.MSG_WARN))
execute#?#39:exe.setError(new LogOutputStream(this, Project.MSG_INFO))" shape=ellipse]
12 [label="executeAsForked#?,CommandlineJava#24:exe.setCommandline(commandline.getCommandline())
execute#?#41:exe.setCommandline(cmdl.getCommandline())" shape=ellipse]
13 [label="executeAsForked#?,CommandlineJava#25:if (getDir() != null) \{
    exe.setWorkingDirectory(getDir());
\}
execute#?#28:if ((javaccHome == null) || (!javaccHome.isDirectory())) \{
    throw new TaskException(\"Javacchome not set.\");
\}" shape=ellipse]
14 [label="executeAsForked#?,CommandlineJava#28:if (getOutputFile() != null) \{
    getLogger().info(\"Output to be stored in \" + getOutputFile().getPath());
\}
execute#?#9:if ((target == null) || (!target.isFile())) \{
    throw new TaskException(\"Invalid target: \" + target);
\}" shape=ellipse]
15 [label="executeAsForked#?,CommandlineJava#32:try \{
    return exe.execute();
\} catch (IOException e) \{
    throw new TaskException(\"Process fork failed.\", e);
\}
execute#?#42:try \{
    if (exe.execute() != 0) \{
        throw new TaskException(\"JJTree failed.\");
    \}
\} catch (IOException e) \{
    throw new TaskException(\"Failed to launch JJTree: \" + e);
\}" shape=ellipse]
16 [label="executeAsForked#?,CommandlineJava#31:log
execute0#?#5:log
execute#?#10:log
execute#?#40:log" shape=ellipse]
17 [label="executeAsForked#?,CommandlineJava#-1:
execute0#?#-1:
execute#?#-1:
execute#?#-1:" shape=ellipse]
18 [label="executeAsForked#?,CommandlineJava#-1:PlaceHold
execute0#?#-1:PlaceHold
execute#?#-1:PlaceHold" shape=ellipse]
19 [label="executeAsForked#?,CommandlineJava#-1:PlaceHold
execute0#?#-1:PlaceHold
execute#?#-1:PlaceHold
execute#?#-1:PlaceHold" shape=ellipse]
20 [label="executeAsForked#?,CommandlineJava#31:log(<unknown>,<unknown>)
execute0#?#5:log(<unknown>,<unknown>)
execute#?#10:log(<unknown>,<unknown>)
execute#?#40:log(<unknown>,<unknown>)" shape=ellipse]
21 [label="executeAsForked#?,CommandlineJava#-1:null
execute0#?#-1:null
execute#?#-1:null" shape=ellipse]
22 [label="executeAsForked#?,CommandlineJava#-1:null
execute0#?#-1:null
execute#?#-1:null" shape=ellipse]
23 [label="executeAsForked#?,CommandlineJava#31:\"Executing: \" + commandline.toString()
execute#?#10:\"Forking \" + commandline.toString()" shape=ellipse]
24 [label="executeAsForked#?,CommandlineJava#31:\"Executing: \"
execute0#?#5:cmdl
execute#?#10:\"Forking \"
execute#?#40:cmdl" shape=ellipse]
25 [label="executeAsForked#?,CommandlineJava#31:commandline.toString()
execute#?#10:commandline.toString()" shape=ellipse]
26 [label="executeAsForked#?,CommandlineJava#31:MSG_VERBOSE
execute0#?#5:MSG_VERBOSE
execute#?#10:MSG_VERBOSE
execute#?#40:MSG_VERBOSE" shape=ellipse]
27 [label="executeAsForked#?,CommandlineJava#-1:MSG_VERBOSE
execute0#?#-1:MSG_VERBOSE
execute#?#-1:MSG_VERBOSE" shape=ellipse]
28 [label="executeAsForked#?,CommandlineJava#31:getLogger().debug(\"Executing: \" + commandline.toString())
execute0#?#5:getLogger().debug(cmdl.toString())
execute#?#10:getLogger().debug(\"Forking \" + commandline.toString())
execute#?#40:getLogger().debug(cmdl.toString())" shape=ellipse]
29 [label="execute0#?#5:toString
execute#?#40:toString" shape=ellipse]
30 [label="execute0#?#5:cmdl.toString()
execute#?#11:commandline.getCommandline()" shape=ellipse]
31 [label="execute0#?#5:toString()
execute#?#11:getCommandline()
execute#?#40:toString()" shape=ellipse]
32 [label="execute#?#-1:" shape=ellipse]
33 [label="execute#?#17:exe.setJavaCommand(commandline.getJavaCommand())" shape=ellipse]
34 [label="execute#?#18:getClasspath()" shape=ellipse]
35 [label="execute#?#-1:" shape=ellipse]
36 [label="execute#?#18:setClasspath()" shape=ellipse]
37 [label="execute#?#11:run(commandline.getCommandline())" shape=ellipse]
38 [label="execute#?#19:getProject()" shape=ellipse]
39 [label="execute#?#12:err" shape=ellipse]
40 [label="execute#?#18:exe" shape=ellipse]
41 [label="execute#?#11:run(<unknown>)" shape=ellipse]
42 [label="execute#?#16:ExecuteJava exe = new ExecuteJava()" shape=ellipse]
43 [label="execute#?#-1:fork" shape=ellipse]
44 [label="execute#?#10:commandline" shape=ellipse]
45 [label="execute#?#17:getJavaCommand()" shape=ellipse]
46 [label="execute#?#9:fork" shape=ellipse]
47 [label="execute#?#12:err == 1" shape=ellipse]
48 [label="execute#?#-1:ExecuteJava()" shape=ellipse]
49 [label="execute#?#12:1" shape=ellipse]
50 [label="execute#?#19:exe.execute(getProject())" shape=ellipse]
51 [label="execute#?#17:commandline.getJavaCommand()" shape=ellipse]
52 [label="execute#?#10:toString()" shape=ellipse]
53 [label="execute#?#15:\{
    ExecuteJava exe = new ExecuteJava();
    exe.setJavaCommand(commandline.getJavaCommand());
    exe.setClasspath(commandline.getClasspath());
    exe.execute(getProject());
\}" shape=ellipse]
54 [label="execute#?#17:exe" shape=ellipse]
55 [label="execute#?#19:exe" shape=ellipse]
56 [label="execute#?#-1:PlaceHold" shape=ellipse]
57 [label="execute#?#18:commandline" shape=ellipse]
58 [label="execute#?#17:setJavaCommand()" shape=ellipse]
59 [label="execute#?#-1:PlaceHold" shape=ellipse]
60 [label="execute#?#19:execute()" shape=ellipse]
61 [label="execute#?#9:if (fork) \{
    log(\"Forking \" + commandline.toString(), MSG_VERBOSE);
    int err = run(commandline.getCommandline());
    if (err == 1) \{
        throw new TaskException(\"ANTLR returned: \" + err);
    \}
\} else \{
    ExecuteJava exe = new ExecuteJava();
    exe.setJavaCommand(commandline.getJavaCommand());
    exe.setClasspath(commandline.getClasspath());
    exe.execute(getProject());
\}" shape=ellipse]
62 [label="execute#?#16:new ExecuteJava()" shape=ellipse]
63 [label="execute#?#18:exe.setClasspath(commandline.getClasspath())" shape=ellipse]
64 [label="execute#?#19:getProject()" shape=ellipse]
65 [label="execute#?#11:commandline" shape=ellipse]
66 [label="execute#?#17:commandline" shape=ellipse]
67 [label="execute#?#5:target.lastModified() > getGeneratedFile().lastModified()" shape=ellipse]
68 [label="execute#?#18:commandline.getClasspath()" shape=ellipse]
69 [label="execute#?#23:if (javaFile.exists() && (target.lastModified() < javaFile.lastModified())) \{
    getLogger().info((\"Target is already built - skipping (\" + target) + \")\");
    return;
\}" shape=ellipse]
70 [label="execute#?#20:String targetName = target.getName()" shape=ellipse]
71 [label="execute#?#36:arg.setValue(\"-Dinstall.root=\" + javaccHome.getAbsolutePath())" shape=ellipse]
72 [label="execute#?#40:cmdl.toString()" shape=ellipse]
73 [label="execute#?#15:if (!outputDirectory.isDirectory()) \{
    throw new TaskException((\"'outputdirectory' \" + outputDirectory) + \" is not a directory.\");
\}" shape=ellipse]
74 [label="execute#?#18:cmdl.createArgument().setValue(\"-OUTPUT_DIRECTORY:\" + outputDirectory.getAbsolutePath().replace('\\', '/'))" shape=ellipse]
75 [label="execute#?#34:final Argument arg = cmdl.createVmArgument()" shape=ellipse]
76 [label="execute#?#35:arg.setValue(\"-mx140M\")" shape=ellipse]
77 [label="execute#?#27:cmdl.createArgument().setValue(target.getAbsolutePath())" shape=ellipse]
78 [label="execute#?#32:classpath.createPathElement().setPath(javaccHome.getAbsolutePath() + \"/JavaCC.zip\")" shape=ellipse]
79 [label="execute#?#21:final File javaFile = new File(outputDirectory, targetName.substring(0, targetName.indexOf(\".jjt\")) + \".jj\")" shape=ellipse]
0 -> 28 [label="Action:4"];
1 -> 0 [label="Action:4"];
1 -> 16 [label="AST:4"];
1 -> 17 [label="AST:4"];
1 -> 20 [label="AST:4"];
1 -> 23 [label="AST:2"];
1 -> 26 [label="AST:4"];
1 -> 30 [label="AST:1"];
1 -> 72 [label="AST:1"];
2 -> 1 [label="AST:4"];
2 -> 4 [label="AST:3"];
2 -> 5 [label="AST:4"];
2 -> 6 [label="AST:4"];
2 -> 7 [label="AST:2"];
2 -> 8 [label="AST:2"];
2 -> 9 [label="AST:2"];
2 -> 10 [label="AST:3"];
2 -> 11 [label="AST:2"];
2 -> 12 [label="AST:2"];
2 -> 13 [label="AST:2"];
2 -> 14 [label="AST:2"];
2 -> 15 [label="AST:2"];
2 -> 69 [label="AST:1"];
2 -> 70 [label="AST:1"];
2 -> 71 [label="AST:1"];
2 -> 73 [label="AST:1"];
2 -> 74 [label="AST:1"];
2 -> 75 [label="AST:1"];
2 -> 76 [label="AST:1"];
2 -> 77 [label="AST:1"];
2 -> 78 [label="AST:1"];
2 -> 79 [label="AST:1"];
3 -> 2 [label="AST:3"];
5 -> 37 [label="AST:1"];
6 -> 47 [label="AST:1"];
17 -> 18 [label="AST:3"];
17 -> 19 [label="AST:4"];
20 -> 21 [label="AST:3"];
20 -> 22 [label="AST:3"];
23 -> 24 [label="AST:2"];
23 -> 25 [label="AST:2"];
25 -> 44 [label="AST:1"];
25 -> 52 [label="AST:1"];
26 -> 27 [label="AST:3"];
30 -> 29 [label="AST:1"];
30 -> 24 [label="AST:1"];
30 -> 31 [label="AST:2"];
30 -> 65 [label="AST:1"];
32 -> 59 [label="AST:1"];
33 -> 54 [label="AST:1"];
33 -> 58 [label="AST:1"];
33 -> 51 [label="AST:1"];
35 -> 56 [label="AST:1"];
37 -> 35 [label="AST:1"];
37 -> 41 [label="AST:1"];
37 -> 30 [label="AST:1"];
38 -> 32 [label="AST:1"];
38 -> 64 [label="AST:1"];
42 -> 62 [label="AST:1"];
46 -> 32 [label="Control Dep:1"];
46 -> 33 [label="Control Dep:1"];
46 -> 34 [label="Control Dep:1"];
46 -> 35 [label="Control Dep:1"];
46 -> 36 [label="Control Dep:1"];
46 -> 37 [label="Control Dep:1"];
46 -> 38 [label="Control Dep:1"];
46 -> 39 [label="Control Dep:1"];
46 -> 40 [label="Control Dep:1"];
46 -> 41 [label="Control Dep:1"];
46 -> 42 [label="Control Dep:1"];
46 -> 43 [label="AST:1"];
46 -> 44 [label="Control Dep:1"];
46 -> 45 [label="Control Dep:1"];
46 -> 2 [label="Control Dep:1"];
46 -> 1 [label="Control Dep:1"];
46 -> 20 [label="Control Dep:1"];
46 -> 17 [label="Control Dep:1"];
46 -> 19 [label="Control Dep:1"];
46 -> 23 [label="Control Dep:1"];
46 -> 24 [label="Control Dep:1"];
46 -> 25 [label="Control Dep:1"];
46 -> 52 [label="Control Dep:1"];
46 -> 26 [label="Control Dep:1"];
46 -> 5 [label="Control Dep:1"];
46 -> 56 [label="Control Dep:1"];
46 -> 30 [label="Control Dep:1"];
46 -> 31 [label="Control Dep:1"];
46 -> 65 [label="Control Dep:1"];
46 -> 6 [label="Control Dep:1"];
46 -> 47 [label="Control Dep:1"];
46 -> 49 [label="Control Dep:1"];
46 -> 53 [label="Control Dep:1"];
46 -> 62 [label="Control Dep:1"];
46 -> 48 [label="Control Dep:1"];
46 -> 58 [label="Control Dep:1"];
46 -> 54 [label="Control Dep:1"];
46 -> 51 [label="Control Dep:1"];
46 -> 66 [label="Control Dep:1"];
46 -> 63 [label="Control Dep:1"];
46 -> 68 [label="Control Dep:1"];
46 -> 57 [label="Control Dep:1"];
46 -> 50 [label="Control Dep:1"];
46 -> 60 [label="Control Dep:1"];
46 -> 55 [label="Control Dep:1"];
46 -> 64 [label="Control Dep:1"];
46 -> 59 [label="Control Dep:1"];
47 -> 39 [label="AST:1"];
47 -> 49 [label="AST:1"];
50 -> 38 [label="AST:1"];
50 -> 55 [label="AST:1"];
50 -> 60 [label="AST:1"];
51 -> 45 [label="AST:1"];
51 -> 66 [label="AST:1"];
53 -> 33 [label="AST:1"];
53 -> 42 [label="AST:1"];
53 -> 50 [label="AST:1"];
53 -> 63 [label="AST:1"];
61 -> 46 [label="AST:1"];
61 -> 53 [label="AST:1"];
61 -> 2 [label="AST:1"];
62 -> 48 [label="AST:1"];
63 -> 36 [label="AST:1"];
63 -> 40 [label="AST:1"];
63 -> 68 [label="AST:1"];
67 -> 46 [label="Control Dep:1"];
67 -> 61 [label="Control Dep:1"];
68 -> 34 [label="AST:1"];
68 -> 57 [label="AST:1"];
72 -> 29 [label="AST:1"];
72 -> 24 [label="AST:1"];
72 -> 31 [label="AST:1"];
}