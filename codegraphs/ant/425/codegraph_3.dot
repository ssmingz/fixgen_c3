digraph "execute#?" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@execute" shape=ellipse]
2 [label="2:CtTypeReferenceImpl@TaskException" shape=ellipse]
3 [label="3:CtExecutableReferenceImpl@addClasspathEntry(java.lang.String)" shape=ellipse]
4 [label="3:CtVirtualElement@addClasspathEntry" shape=ellipse]
5 [label="3:CtLiteralImpl@\"/antlr/Tool.class\"" shape=ellipse]
6 [label="3:CtInvocationImpl@addClasspathEntry(\"/antlr/Tool.class\")" shape=ellipse]
7 [label="4:CtExecutableReferenceImpl@validateAttributes()" shape=ellipse]
8 [label="4:CtVirtualElement@validateAttributes" shape=ellipse]
9 [label="4:CtInvocationImpl@validateAttributes()" shape=ellipse]
10 [label="5:CtExecutableReferenceImpl@lastModified()" shape=ellipse]
11 [label="5:CtVirtualElement@lastModified" shape=ellipse]
12 [label="5:CtFieldReadImpl@target" shape=ellipse]
13 [label="5:CtInvocationImpl@target.lastModified()" shape=ellipse]
14 [label="5:CtExecutableReferenceImpl@lastModified()" shape=ellipse]
15 [label="5:CtVirtualElement@lastModified" shape=ellipse]
16 [label="5:CtExecutableReferenceImpl@getGeneratedFile()" shape=ellipse]
17 [label="5:CtVirtualElement@getGeneratedFile" shape=ellipse]
18 [label="5:CtInvocationImpl@getGeneratedFile()" shape=ellipse]
19 [label="5:CtInvocationImpl@getGeneratedFile().lastModified()" shape=ellipse]
20 [label="5:CtBinaryOperatorImpl@target.lastModified() > getGeneratedFile().lastModified()" shape=ellipse]
21 [label="6:CtExecutableReferenceImpl@setValue(java.lang.String)" shape=ellipse]
22 [label="6:CtVirtualElement@setValue" shape=ellipse]
23 [label="6:CtExecutableReferenceImpl@createArgument()" shape=ellipse]
24 [label="6:CtVirtualElement@createArgument" shape=ellipse]
25 [label="6:CtFieldReadImpl@commandline" shape=ellipse]
26 [label="6:CtInvocationImpl@commandline.createArgument()" shape=ellipse]
27 [label="6:CtLiteralImpl@\"-o\"" shape=ellipse]
28 [label="6:CtInvocationImpl@commandline.createArgument().setValue(\"-o\")" shape=ellipse]
29 [label="7:CtExecutableReferenceImpl@setValue()" shape=ellipse]
30 [label="7:CtVirtualElement@setValue" shape=ellipse]
31 [label="7:CtExecutableReferenceImpl@createArgument()" shape=ellipse]
32 [label="7:CtVirtualElement@createArgument" shape=ellipse]
33 [label="7:CtFieldReadImpl@commandline" shape=ellipse]
34 [label="7:CtInvocationImpl@commandline.createArgument()" shape=ellipse]
35 [label="7:CtExecutableReferenceImpl@toString()" shape=ellipse]
36 [label="7:CtVirtualElement@toString" shape=ellipse]
37 [label="7:CtFieldReadImpl@outputDirectory" shape=ellipse]
38 [label="7:CtInvocationImpl@outputDirectory.toString()" shape=ellipse]
39 [label="7:CtInvocationImpl@commandline.createArgument().setValue(outputDirectory.toString())" shape=ellipse]
40 [label="8:CtExecutableReferenceImpl@setValue()" shape=ellipse]
41 [label="8:CtVirtualElement@setValue" shape=ellipse]
42 [label="8:CtExecutableReferenceImpl@createArgument()" shape=ellipse]
43 [label="8:CtVirtualElement@createArgument" shape=ellipse]
44 [label="8:CtFieldReadImpl@commandline" shape=ellipse]
45 [label="8:CtInvocationImpl@commandline.createArgument()" shape=ellipse]
46 [label="8:CtExecutableReferenceImpl@toString()" shape=ellipse]
47 [label="8:CtVirtualElement@toString" shape=ellipse]
48 [label="8:CtFieldReadImpl@target" shape=ellipse]
49 [label="8:CtInvocationImpl@target.toString()" shape=ellipse]
50 [label="8:CtInvocationImpl@commandline.createArgument().setValue(target.toString())" shape=ellipse]
51 [label="9:CtFieldReadImpl@fork" shape=ellipse]
52 [label="10:CtExecutableReferenceImpl@log(<unknown>,<unknown>)" shape=ellipse]
53 [label="10:CtVirtualElement@log" shape=ellipse]
54 [label="10:CtLiteralImpl@\"Forking \"" shape=ellipse]
55 [label="10:CtExecutableReferenceImpl@toString()" shape=ellipse]
56 [label="10:CtVirtualElement@toString" shape=ellipse]
57 [label="10:CtFieldReadImpl@commandline" shape=ellipse]
58 [label="10:CtInvocationImpl@commandline.toString()" shape=ellipse]
59 [label="10:CtBinaryOperatorImpl@\"Forking \" + commandline.toString()" shape=ellipse]
60 [label="10:CtTypeAccessImpl@MSG_VERBOSE" shape=ellipse]
61 [label="10:CtInvocationImpl@log(\"Forking \" + commandline.toString(), MSG_VERBOSE)" shape=ellipse]
62 [label="11:CtTypeReferenceImpl@int" shape=ellipse]
63 [label="11:CtExecutableReferenceImpl@run(<unknown>)" shape=ellipse]
64 [label="11:CtVirtualElement@run" shape=ellipse]
65 [label="11:CtExecutableReferenceImpl@getCommandline()" shape=ellipse]
66 [label="11:CtVirtualElement@getCommandline" shape=ellipse]
67 [label="11:CtFieldReadImpl@commandline" shape=ellipse]
68 [label="11:CtInvocationImpl@commandline.getCommandline()" shape=ellipse]
69 [label="11:CtInvocationImpl@run(commandline.getCommandline())" shape=ellipse]
70 [label="11:CtVirtualElement@err" shape=ellipse]
71 [label="11:CtLocalVariableImpl@int err = run(commandline.getCommandline())" shape=ellipse]
72 [label="12:CtVariableReadImpl@err" shape=ellipse]
73 [label="12:CtLiteralImpl@1" shape=ellipse]
74 [label="12:CtBinaryOperatorImpl@err == 1" shape=ellipse]
75 [label="13:CtTypeReferenceImpl@TaskException" shape=ellipse]
76 [label="13:CtLiteralImpl@\"ANTLR returned: \"" shape=ellipse]
77 [label="13:CtVariableReadImpl@err" shape=ellipse]
78 [label="13:CtBinaryOperatorImpl@\"ANTLR returned: \" + err" shape=ellipse]
79 [label="13:CtConstructorCallImpl@new TaskException(\"ANTLR returned: \" + err)" shape=ellipse]
80 [label="13:CtThrowImpl@throw new TaskException(\"ANTLR returned: \" + err)" shape=ellipse]
81 [label="12:CtBlockImpl@\{
    throw new TaskException(\"ANTLR returned: \" + err);
\}" shape=ellipse]
82 [label="12:CtIfImpl@if (err == 1) \{
    throw new TaskException(\"ANTLR returned: \" + err);
\}" shape=ellipse]
83 [label="9:CtBlockImpl@\{
    log(\"Forking \" + commandline.toString(), MSG_VERBOSE);
    int err = run(commandline.getCommandline());
    if (err == 1) \{
        throw new TaskException(\"ANTLR returned: \" + err);
    \}
\}" shape=ellipse]
84 [label="16:CtTypeReferenceImpl@ExecuteJava" shape=ellipse]
85 [label="16:CtTypeReferenceImpl@ExecuteJava" shape=ellipse]
86 [label="16:CtConstructorCallImpl@new ExecuteJava()" shape=ellipse]
87 [label="16:CtVirtualElement@exe" shape=ellipse]
88 [label="16:CtLocalVariableImpl@ExecuteJava exe = new ExecuteJava()" shape=ellipse]
89 [label="17:CtExecutableReferenceImpl@setJavaCommand()" shape=ellipse]
90 [label="17:CtVirtualElement@setJavaCommand" shape=ellipse]
91 [label="17:CtVariableReadImpl@exe" shape=ellipse]
92 [label="17:CtExecutableReferenceImpl@getJavaCommand()" shape=ellipse]
93 [label="17:CtVirtualElement@getJavaCommand" shape=ellipse]
94 [label="17:CtFieldReadImpl@commandline" shape=ellipse]
95 [label="17:CtInvocationImpl@commandline.getJavaCommand()" shape=ellipse]
96 [label="17:CtInvocationImpl@exe.setJavaCommand(commandline.getJavaCommand())" shape=ellipse]
97 [label="18:CtExecutableReferenceImpl@setClasspath()" shape=ellipse]
98 [label="18:CtVirtualElement@setClasspath" shape=ellipse]
99 [label="18:CtVariableReadImpl@exe" shape=ellipse]
100 [label="18:CtExecutableReferenceImpl@getClasspath()" shape=ellipse]
101 [label="18:CtVirtualElement@getClasspath" shape=ellipse]
102 [label="18:CtFieldReadImpl@commandline" shape=ellipse]
103 [label="18:CtInvocationImpl@commandline.getClasspath()" shape=ellipse]
104 [label="18:CtInvocationImpl@exe.setClasspath(commandline.getClasspath())" shape=ellipse]
105 [label="19:CtExecutableReferenceImpl@execute()" shape=ellipse]
106 [label="19:CtVirtualElement@execute" shape=ellipse]
107 [label="19:CtVariableReadImpl@exe" shape=ellipse]
108 [label="19:CtExecutableReferenceImpl@getProject()" shape=ellipse]
109 [label="19:CtVirtualElement@getProject" shape=ellipse]
110 [label="19:CtInvocationImpl@getProject()" shape=ellipse]
111 [label="19:CtInvocationImpl@exe.execute(getProject())" shape=ellipse]
112 [label="15:CtBlockImpl@\{
    ExecuteJava exe = new ExecuteJava();
    exe.setJavaCommand(commandline.getJavaCommand());
    exe.setClasspath(commandline.getClasspath());
    exe.execute(getProject());
\}" shape=ellipse]
113 [label="9:CtIfImpl@if (fork) \{
    log(\"Forking \" + commandline.toString(), MSG_VERBOSE);
    int err = run(commandline.getCommandline());
    if (err == 1) \{
        throw new TaskException(\"ANTLR returned: \" + err);
    \}
\} else \{
    ExecuteJava exe = new ExecuteJava();
    exe.setJavaCommand(commandline.getJavaCommand());
    exe.setClasspath(commandline.getClasspath());
    exe.execute(getProject());
\}" shape=ellipse]
114 [label="5:CtBlockImpl@\{
    commandline.createArgument().setValue(\"-o\");
    commandline.createArgument().setValue(outputDirectory.toString());
    commandline.createArgument().setValue(target.toString());
    if (fork) \{
        log(\"Forking \" + commandline.toString(), MSG_VERBOSE);
        int err = run(commandline.getCommandline());
        if (err == 1) \{
            throw new TaskException(\"ANTLR returned: \" + err);
        \}
    \} else \{
        ExecuteJava exe = new ExecuteJava();
        exe.setJavaCommand(commandline.getJavaCommand());
        exe.setClasspath(commandline.getClasspath());
        exe.execute(getProject());
    \}
\}" shape=ellipse]
115 [label="5:CtIfImpl@if (target.lastModified() > getGeneratedFile().lastModified()) \{
    commandline.createArgument().setValue(\"-o\");
    commandline.createArgument().setValue(outputDirectory.toString());
    commandline.createArgument().setValue(target.toString());
    if (fork) \{
        log(\"Forking \" + commandline.toString(), MSG_VERBOSE);
        int err = run(commandline.getCommandline());
        if (err == 1) \{
            throw new TaskException(\"ANTLR returned: \" + err);
        \}
    \} else \{
        ExecuteJava exe = new ExecuteJava();
        exe.setJavaCommand(commandline.getJavaCommand());
        exe.setClasspath(commandline.getClasspath());
        exe.execute(getProject());
    \}
\}" shape=ellipse]
116 [label="2:CtBlockImpl@\{
    addClasspathEntry(\"/antlr/Tool.class\");
    validateAttributes();
    if (target.lastModified() > getGeneratedFile().lastModified()) \{
        commandline.createArgument().setValue(\"-o\");
        commandline.createArgument().setValue(outputDirectory.toString());
        commandline.createArgument().setValue(target.toString());
        if (fork) \{
            log(\"Forking \" + commandline.toString(), MSG_VERBOSE);
            int err = run(commandline.getCommandline());
            if (err == 1) \{
                throw new TaskException(\"ANTLR returned: \" + err);
            \}
        \} else \{
            ExecuteJava exe = new ExecuteJava();
            exe.setJavaCommand(commandline.getJavaCommand());
            exe.setClasspath(commandline.getClasspath());
            exe.execute(getProject());
        \}
    \}
\}" shape=ellipse]
117 [label="2:CtMethodImpl@public void execute() throws TaskException \{
    addClasspathEntry(\"/antlr/Tool.class\");
    validateAttributes();
    if (target.lastModified() > getGeneratedFile().lastModified()) \{
        commandline.createArgument().setValue(\"-o\");
        commandline.createArgument().setValue(outputDirectory.toString());
        commandline.createArgument().setValue(target.toString());
        if (fork) \{
            log(\"Forking \" + commandline.toString(), MSG_VERBOSE);
            int err = run(commandline.getCommandline());
            if (err == 1) \{
                throw new TaskException(\"ANTLR returned: \" + err);
            \}
        \} else \{
            ExecuteJava exe = new ExecuteJava();
            exe.setJavaCommand(commandline.getJavaCommand());
            exe.setClasspath(commandline.getClasspath());
            exe.execute(getProject());
        \}
    \}
\}" shape=ellipse]
118 [label="10:Update@UPDATE" shape=ellipse]
119 [label="10:CtInvocationImpl@getLogger().debug(\"Forking \" + commandline.toString())" shape=ellipse]
6 -> 4 [label="AST"];
6 -> 3 [label="AST"];
6 -> 5 [label="AST"];
9 -> 8 [label="AST"];
9 -> 7 [label="AST"];
13 -> 11 [label="AST"];
13 -> 12 [label="AST"];
13 -> 10 [label="AST"];
18 -> 17 [label="AST"];
18 -> 16 [label="AST"];
19 -> 15 [label="AST"];
19 -> 18 [label="AST"];
19 -> 14 [label="AST"];
20 -> 13 [label="AST"];
20 -> 19 [label="AST"];
20 -> 114 [label="Control Dep"];
20 -> 28 [label="Control Dep"];
20 -> 21 [label="Control Dep"];
20 -> 26 [label="Control Dep"];
20 -> 23 [label="Control Dep"];
20 -> 25 [label="Control Dep"];
20 -> 27 [label="Control Dep"];
20 -> 39 [label="Control Dep"];
20 -> 29 [label="Control Dep"];
20 -> 34 [label="Control Dep"];
20 -> 31 [label="Control Dep"];
20 -> 33 [label="Control Dep"];
20 -> 38 [label="Control Dep"];
20 -> 35 [label="Control Dep"];
20 -> 37 [label="Control Dep"];
20 -> 50 [label="Control Dep"];
20 -> 40 [label="Control Dep"];
20 -> 45 [label="Control Dep"];
20 -> 42 [label="Control Dep"];
20 -> 44 [label="Control Dep"];
20 -> 49 [label="Control Dep"];
20 -> 46 [label="Control Dep"];
20 -> 48 [label="Control Dep"];
20 -> 113 [label="Control Dep"];
20 -> 51 [label="Control Dep"];
26 -> 24 [label="AST"];
26 -> 25 [label="AST"];
26 -> 23 [label="AST"];
28 -> 22 [label="AST"];
28 -> 26 [label="AST"];
28 -> 21 [label="AST"];
28 -> 27 [label="AST"];
34 -> 32 [label="AST"];
34 -> 33 [label="AST"];
34 -> 31 [label="AST"];
38 -> 36 [label="AST"];
38 -> 37 [label="AST"];
38 -> 35 [label="AST"];
39 -> 30 [label="AST"];
39 -> 34 [label="AST"];
39 -> 29 [label="AST"];
39 -> 38 [label="AST"];
45 -> 43 [label="AST"];
45 -> 44 [label="AST"];
45 -> 42 [label="AST"];
49 -> 47 [label="AST"];
49 -> 48 [label="AST"];
49 -> 46 [label="AST"];
50 -> 41 [label="AST"];
50 -> 45 [label="AST"];
50 -> 40 [label="AST"];
50 -> 49 [label="AST"];
51 -> 83 [label="Control Dep"];
51 -> 61 [label="Control Dep"];
51 -> 52 [label="Control Dep"];
51 -> 59 [label="Control Dep"];
51 -> 54 [label="Control Dep"];
51 -> 58 [label="Control Dep"];
51 -> 55 [label="Control Dep"];
51 -> 57 [label="Control Dep"];
51 -> 60 [label="Control Dep"];
51 -> 71 [label="Control Dep"];
51 -> 69 [label="Control Dep"];
51 -> 63 [label="Control Dep"];
51 -> 68 [label="Control Dep"];
51 -> 65 [label="Control Dep"];
51 -> 67 [label="Control Dep"];
51 -> 82 [label="Control Dep"];
51 -> 74 [label="Control Dep"];
51 -> 72 [label="Control Dep"];
51 -> 73 [label="Control Dep"];
51 -> 112 [label="Control Dep"];
51 -> 88 [label="Control Dep"];
51 -> 86 [label="Control Dep"];
51 -> 96 [label="Control Dep"];
51 -> 89 [label="Control Dep"];
51 -> 91 [label="Control Dep"];
51 -> 95 [label="Control Dep"];
51 -> 92 [label="Control Dep"];
51 -> 94 [label="Control Dep"];
51 -> 104 [label="Control Dep"];
51 -> 97 [label="Control Dep"];
51 -> 99 [label="Control Dep"];
51 -> 103 [label="Control Dep"];
51 -> 100 [label="Control Dep"];
51 -> 102 [label="Control Dep"];
51 -> 111 [label="Control Dep"];
51 -> 105 [label="Control Dep"];
51 -> 107 [label="Control Dep"];
51 -> 110 [label="Control Dep"];
51 -> 108 [label="Control Dep"];
58 -> 56 [label="AST"];
58 -> 57 [label="AST"];
58 -> 55 [label="AST"];
59 -> 54 [label="AST"];
59 -> 58 [label="AST"];
61 -> 53 [label="AST"];
61 -> 52 [label="AST"];
61 -> 59 [label="AST"];
61 -> 60 [label="AST"];
61 -> 118 [label="Action"];
67 -> 70 [label="Data Dep"];
68 -> 66 [label="AST"];
68 -> 67 [label="AST"];
68 -> 65 [label="AST"];
69 -> 64 [label="AST"];
69 -> 63 [label="AST"];
69 -> 68 [label="AST"];
70 -> 72 [label="Define-Use"];
70 -> 77 [label="Define-Use"];
71 -> 70 [label="AST"];
71 -> 62 [label="AST"];
71 -> 69 [label="AST"];
74 -> 72 [label="AST"];
74 -> 73 [label="AST"];
74 -> 81 [label="Control Dep"];
74 -> 80 [label="Control Dep"];
74 -> 79 [label="Control Dep"];
74 -> 78 [label="Control Dep"];
74 -> 76 [label="Control Dep"];
74 -> 77 [label="Control Dep"];
78 -> 76 [label="AST"];
78 -> 77 [label="AST"];
79 -> 78 [label="AST"];
80 -> 79 [label="AST"];
81 -> 80 [label="AST"];
82 -> 74 [label="AST"];
82 -> 81 [label="AST"];
83 -> 61 [label="AST"];
83 -> 71 [label="AST"];
83 -> 82 [label="AST"];
87 -> 91 [label="Define-Use"];
87 -> 99 [label="Define-Use"];
87 -> 107 [label="Define-Use"];
88 -> 87 [label="AST"];
88 -> 84 [label="AST"];
88 -> 86 [label="AST"];
95 -> 93 [label="AST"];
95 -> 94 [label="AST"];
95 -> 92 [label="AST"];
96 -> 90 [label="AST"];
96 -> 91 [label="AST"];
96 -> 89 [label="AST"];
96 -> 95 [label="AST"];
103 -> 101 [label="AST"];
103 -> 102 [label="AST"];
103 -> 100 [label="AST"];
104 -> 98 [label="AST"];
104 -> 99 [label="AST"];
104 -> 97 [label="AST"];
104 -> 103 [label="AST"];
110 -> 109 [label="AST"];
110 -> 108 [label="AST"];
111 -> 106 [label="AST"];
111 -> 107 [label="AST"];
111 -> 105 [label="AST"];
111 -> 110 [label="AST"];
112 -> 88 [label="AST"];
112 -> 96 [label="AST"];
112 -> 104 [label="AST"];
112 -> 111 [label="AST"];
113 -> 51 [label="AST"];
113 -> 83 [label="AST"];
113 -> 112 [label="AST"];
114 -> 28 [label="AST"];
114 -> 39 [label="AST"];
114 -> 50 [label="AST"];
114 -> 113 [label="AST"];
115 -> 20 [label="AST"];
115 -> 114 [label="AST"];
116 -> 6 [label="AST"];
116 -> 9 [label="AST"];
116 -> 115 [label="AST"];
117 -> 1 [label="AST"];
117 -> 0 [label="AST"];
117 -> 2 [label="AST"];
117 -> 116 [label="AST"];
118 -> 119 [label="Action"];
}