digraph "getInputStream#?" {
0 [label="2:CtTypeReferenceImpl@InputStream" shape=ellipse]
1 [label="2:CtVirtualElement@getInputStream" shape=ellipse]
2 [label="2:CtTypeReferenceImpl@IOException" shape=ellipse]
3 [label="3:CtExecutableReferenceImpl@isReference()" shape=ellipse]
4 [label="3:CtVirtualElement@isReference" shape=ellipse]
5 [label="3:CtInvocationImpl@isReference()" shape=ellipse]
6 [label="4:CtExecutableReferenceImpl@getInputStream()" shape=ellipse]
7 [label="4:CtVirtualElement@getInputStream" shape=ellipse]
8 [label="4:CtExecutableReferenceImpl@getCheckedRef()" shape=ellipse]
9 [label="4:CtVirtualElement@getCheckedRef" shape=ellipse]
10 [label="4:CtInvocationImpl@((Resource) (getCheckedRef()))" shape=ellipse]
11 [label="4:CtTypeReferenceImpl@Resource" shape=ellipse]
12 [label="4:CtInvocationImpl@((Resource) (getCheckedRef())).getInputStream()" shape=ellipse]
13 [label="4:CtReturnImpl@return ((Resource) (getCheckedRef())).getInputStream()" shape=ellipse]
14 [label="3:CtBlockImpl@\{
    return ((Resource) (getCheckedRef())).getInputStream();
\}" shape=ellipse]
15 [label="3:CtIfImpl@if (isReference()) \{
    return ((Resource) (getCheckedRef())).getInputStream();
\}" shape=ellipse]
16 [label="6:CtExecutableReferenceImpl@dieOnCircularReference()" shape=ellipse]
17 [label="6:CtVirtualElement@dieOnCircularReference" shape=ellipse]
18 [label="6:CtInvocationImpl@dieOnCircularReference()" shape=ellipse]
19 [label="7:CtTypeReferenceImpl@ClassLoader" shape=ellipse]
20 [label="7:CtLiteralImpl@null" shape=ellipse]
21 [label="7:CtVirtualElement@cl" shape=ellipse]
22 [label="7:CtLocalVariableImpl@ClassLoader cl = null" shape=ellipse]
23 [label="8:CtFieldReadImpl@loader" shape=ellipse]
24 [label="8:CtLiteralImpl@null" shape=ellipse]
25 [label="8:CtBinaryOperatorImpl@loader != null" shape=ellipse]
26 [label="9:CtVariableWriteImpl@cl" shape=ellipse]
27 [label="9:CtExecutableReferenceImpl@getReferencedObject()" shape=ellipse]
28 [label="9:CtVirtualElement@getReferencedObject" shape=ellipse]
29 [label="9:CtFieldReadImpl@loader" shape=ellipse]
30 [label="9:CtInvocationImpl@((ClassLoader) (loader.getReferencedObject()))" shape=ellipse]
31 [label="9:CtTypeReferenceImpl@ClassLoader" shape=ellipse]
32 [label="9:CtAssignmentImpl@cl = ((ClassLoader) (loader.getReferencedObject()))" shape=ellipse]
33 [label="8:CtBlockImpl@\{
    cl = ((ClassLoader) (loader.getReferencedObject()));
\}" shape=ellipse]
34 [label="8:CtIfImpl@if (loader != null) \{
    cl = ((ClassLoader) (loader.getReferencedObject()));
\}" shape=ellipse]
35 [label="11:CtVariableReadImpl@cl" shape=ellipse]
36 [label="11:CtLiteralImpl@null" shape=ellipse]
37 [label="11:CtBinaryOperatorImpl@cl == null" shape=ellipse]
38 [label="12:CtExecutableReferenceImpl@getClasspath()" shape=ellipse]
39 [label="12:CtVirtualElement@getClasspath" shape=ellipse]
40 [label="12:CtInvocationImpl@getClasspath()" shape=ellipse]
41 [label="12:CtLiteralImpl@null" shape=ellipse]
42 [label="12:CtBinaryOperatorImpl@getClasspath() != null" shape=ellipse]
43 [label="13:CtTypeReferenceImpl@Path" shape=ellipse]
44 [label="13:CtExecutableReferenceImpl@concatSystemClasspath()" shape=ellipse]
45 [label="13:CtVirtualElement@concatSystemClasspath" shape=ellipse]
46 [label="13:CtExecutableReferenceImpl@getClasspath()" shape=ellipse]
47 [label="13:CtVirtualElement@getClasspath" shape=ellipse]
48 [label="13:CtInvocationImpl@getClasspath()" shape=ellipse]
49 [label="13:CtInvocationImpl@getClasspath().concatSystemClasspath()" shape=ellipse]
50 [label="13:CtVirtualElement@p" shape=ellipse]
51 [label="13:CtLocalVariableImpl@Path p = getClasspath().concatSystemClasspath()" shape=ellipse]
52 [label="14:CtFieldReadImpl@parentFirst" shape=ellipse]
53 [label="15:CtVariableWriteImpl@cl" shape=ellipse]
54 [label="15:CtExecutableReferenceImpl@createClassLoader(Path)" shape=ellipse]
55 [label="15:CtVirtualElement@createClassLoader" shape=ellipse]
56 [label="15:CtExecutableReferenceImpl@getProject()" shape=ellipse]
57 [label="15:CtVirtualElement@getProject" shape=ellipse]
58 [label="15:CtInvocationImpl@getProject()" shape=ellipse]
59 [label="15:CtVariableReadImpl@p" shape=ellipse]
60 [label="15:CtInvocationImpl@getProject().createClassLoader(p)" shape=ellipse]
61 [label="15:CtAssignmentImpl@cl = getProject().createClassLoader(p)" shape=ellipse]
62 [label="14:CtBlockImpl@\{
    cl = getProject().createClassLoader(p);
\}" shape=ellipse]
63 [label="17:CtVariableWriteImpl@cl" shape=ellipse]
64 [label="18:CtExecutableReferenceImpl@newAntClassLoader(Path,boolean)" shape=ellipse]
65 [label="18:CtVirtualElement@newAntClassLoader" shape=ellipse]
66 [label="18:CtTypeAccessImpl@AntClassLoader" shape=ellipse]
67 [label="19:CtExecutableReferenceImpl@getCoreLoader()" shape=ellipse]
68 [label="19:CtVirtualElement@getCoreLoader" shape=ellipse]
69 [label="19:CtExecutableReferenceImpl@getProject()" shape=ellipse]
70 [label="19:CtVirtualElement@getProject" shape=ellipse]
71 [label="19:CtInvocationImpl@getProject()" shape=ellipse]
72 [label="19:CtInvocationImpl@getProject().getCoreLoader()" shape=ellipse]
73 [label="19:CtExecutableReferenceImpl@getProject()" shape=ellipse]
74 [label="19:CtVirtualElement@getProject" shape=ellipse]
75 [label="19:CtInvocationImpl@getProject()" shape=ellipse]
76 [label="19:CtVariableReadImpl@p" shape=ellipse]
77 [label="19:CtLiteralImpl@false" shape=ellipse]
78 [label="18:CtInvocationImpl@AntClassLoader.newAntClassLoader(getProject().getCoreLoader(), getProject(), p, false)" shape=ellipse]
79 [label="17:CtAssignmentImpl@cl = AntClassLoader.newAntClassLoader(getProject().getCoreLoader(), getProject(), p, false)" shape=ellipse]
80 [label="16:CtBlockImpl@\{
    cl = AntClassLoader.newAntClassLoader(getProject().getCoreLoader(), getProject(), p, false);
\}" shape=ellipse]
81 [label="14:CtIfImpl@if (parentFirst) \{
    cl = getProject().createClassLoader(p);
\} else \{
    cl = AntClassLoader.newAntClassLoader(getProject().getCoreLoader(), getProject(), p, false);
\}" shape=ellipse]
82 [label="12:CtBlockImpl@\{
    Path p = getClasspath().concatSystemClasspath();
    if (parentFirst) \{
        cl = getProject().createClassLoader(p);
    \} else \{
        cl = AntClassLoader.newAntClassLoader(getProject().getCoreLoader(), getProject(), p, false);
    \}
\}" shape=ellipse]
83 [label="22:CtVariableWriteImpl@cl" shape=ellipse]
84 [label="22:CtExecutableReferenceImpl@getClassLoader()" shape=ellipse]
85 [label="22:CtVirtualElement@getClassLoader" shape=ellipse]
86 [label="22:CtFieldReadImpl@JavaResource.class" shape=ellipse]
87 [label="22:CtInvocationImpl@JavaResource.class.getClassLoader()" shape=ellipse]
88 [label="22:CtAssignmentImpl@cl = JavaResource.class.getClassLoader()" shape=ellipse]
89 [label="21:CtBlockImpl@\{
    cl = JavaResource.class.getClassLoader();
\}" shape=ellipse]
90 [label="12:CtIfImpl@if (getClasspath() != null) \{
    Path p = getClasspath().concatSystemClasspath();
    if (parentFirst) \{
        cl = getProject().createClassLoader(p);
    \} else \{
        cl = AntClassLoader.newAntClassLoader(getProject().getCoreLoader(), getProject(), p, false);
    \}
\} else \{
    cl = JavaResource.class.getClassLoader();
\}" shape=ellipse]
91 [label="24:CtFieldReadImpl@loader" shape=ellipse]
92 [label="24:CtLiteralImpl@null" shape=ellipse]
93 [label="24:CtBinaryOperatorImpl@(loader != null)" shape=ellipse]
94 [label="24:CtVariableReadImpl@cl" shape=ellipse]
95 [label="24:CtLiteralImpl@null" shape=ellipse]
96 [label="24:CtBinaryOperatorImpl@(cl != null)" shape=ellipse]
97 [label="24:CtBinaryOperatorImpl@(loader != null) && (cl != null)" shape=ellipse]
98 [label="25:CtExecutableReferenceImpl@addReference(java.lang.ClassLoader)" shape=ellipse]
99 [label="25:CtVirtualElement@addReference" shape=ellipse]
100 [label="25:CtExecutableReferenceImpl@getProject()" shape=ellipse]
101 [label="25:CtVirtualElement@getProject" shape=ellipse]
102 [label="25:CtInvocationImpl@getProject()" shape=ellipse]
103 [label="25:CtExecutableReferenceImpl@getRefId()" shape=ellipse]
104 [label="25:CtVirtualElement@getRefId" shape=ellipse]
105 [label="25:CtFieldReadImpl@loader" shape=ellipse]
106 [label="25:CtInvocationImpl@loader.getRefId()" shape=ellipse]
107 [label="25:CtVariableReadImpl@cl" shape=ellipse]
108 [label="25:CtInvocationImpl@getProject().addReference(loader.getRefId(), cl)" shape=ellipse]
109 [label="24:CtBlockImpl@\{
    getProject().addReference(loader.getRefId(), cl);
\}" shape=ellipse]
110 [label="24:CtIfImpl@if ((loader != null) && (cl != null)) \{
    getProject().addReference(loader.getRefId(), cl);
\}" shape=ellipse]
111 [label="11:CtBlockImpl@\{
    if (getClasspath() != null) \{
        Path p = getClasspath().concatSystemClasspath();
        if (parentFirst) \{
            cl = getProject().createClassLoader(p);
        \} else \{
            cl = AntClassLoader.newAntClassLoader(getProject().getCoreLoader(), getProject(), p, false);
        \}
    \} else \{
        cl = JavaResource.class.getClassLoader();
    \}
    if ((loader != null) && (cl != null)) \{
        getProject().addReference(loader.getRefId(), cl);
    \}
\}" shape=ellipse]
112 [label="11:CtIfImpl@if (cl == null) \{
    if (getClasspath() != null) \{
        Path p = getClasspath().concatSystemClasspath();
        if (parentFirst) \{
            cl = getProject().createClassLoader(p);
        \} else \{
            cl = AntClassLoader.newAntClassLoader(getProject().getCoreLoader(), getProject(), p, false);
        \}
    \} else \{
        cl = JavaResource.class.getClassLoader();
    \}
    if ((loader != null) && (cl != null)) \{
        getProject().addReference(loader.getRefId(), cl);
    \}
\}" shape=ellipse]
113 [label="28:CtExecutableReferenceImpl@openInputStream(java.lang.ClassLoader)" shape=ellipse]
114 [label="28:CtVirtualElement@openInputStream" shape=ellipse]
115 [label="28:CtVariableReadImpl@cl" shape=ellipse]
116 [label="28:CtInvocationImpl@openInputStream(cl)" shape=ellipse]
117 [label="28:CtReturnImpl@return openInputStream(cl)" shape=ellipse]
118 [label="2:CtBlockImpl@\{
    if (isReference()) \{
        return ((Resource) (getCheckedRef())).getInputStream();
    \}
    dieOnCircularReference();
    ClassLoader cl = null;
    if (loader != null) \{
        cl = ((ClassLoader) (loader.getReferencedObject()));
    \}
    if (cl == null) \{
        if (getClasspath() != null) \{
            Path p = getClasspath().concatSystemClasspath();
            if (parentFirst) \{
                cl = getProject().createClassLoader(p);
            \} else \{
                cl = AntClassLoader.newAntClassLoader(getProject().getCoreLoader(), getProject(), p, false);
            \}
        \} else \{
            cl = JavaResource.class.getClassLoader();
        \}
        if ((loader != null) && (cl != null)) \{
            getProject().addReference(loader.getRefId(), cl);
        \}
    \}
    return openInputStream(cl);
\}" shape=ellipse]
119 [label="2:CtMethodImpl@public InputStream getInputStream() throws IOException \{
    if (isReference()) \{
        return ((Resource) (getCheckedRef())).getInputStream();
    \}
    dieOnCircularReference();
    ClassLoader cl = null;
    if (loader != null) \{
        cl = ((ClassLoader) (loader.getReferencedObject()));
    \}
    if (cl == null) \{
        if (getClasspath() != null) \{
            Path p = getClasspath().concatSystemClasspath();
            if (parentFirst) \{
                cl = getProject().createClassLoader(p);
            \} else \{
                cl = AntClassLoader.newAntClassLoader(getProject().getCoreLoader(), getProject(), p, false);
            \}
        \} else \{
            cl = JavaResource.class.getClassLoader();
        \}
        if ((loader != null) && (cl != null)) \{
            getProject().addReference(loader.getRefId(), cl);
        \}
    \}
    return openInputStream(cl);
\}" shape=ellipse]
120 [label="13:Insert@INSERT" shape=ellipse]
121 [label="13:CtLiteralImpl@\"ignore\"" shape=ellipse]
5 -> 4 [label="AST"];
5 -> 3 [label="AST"];
5 -> 14 [label="Control Dep"];
5 -> 13 [label="Control Dep"];
5 -> 12 [label="Control Dep"];
5 -> 6 [label="Control Dep"];
5 -> 10 [label="Control Dep"];
5 -> 8 [label="Control Dep"];
10 -> 9 [label="AST"];
10 -> 11 [label="AST"];
10 -> 8 [label="AST"];
12 -> 7 [label="AST"];
12 -> 10 [label="AST"];
12 -> 6 [label="AST"];
13 -> 12 [label="AST"];
14 -> 13 [label="AST"];
15 -> 5 [label="AST"];
15 -> 14 [label="AST"];
18 -> 17 [label="AST"];
18 -> 16 [label="AST"];
21 -> 35 [label="Define-Use"];
21 -> 94 [label="Define-Use"];
21 -> 107 [label="Define-Use"];
21 -> 115 [label="Define-Use"];
22 -> 21 [label="AST"];
22 -> 19 [label="AST"];
22 -> 20 [label="AST"];
25 -> 23 [label="AST"];
25 -> 24 [label="AST"];
25 -> 33 [label="Control Dep"];
25 -> 32 [label="Control Dep"];
25 -> 26 [label="Control Dep"];
25 -> 30 [label="Control Dep"];
25 -> 27 [label="Control Dep"];
25 -> 29 [label="Control Dep"];
26 -> 35 [label="Define-Use"];
26 -> 94 [label="Define-Use"];
26 -> 107 [label="Define-Use"];
26 -> 115 [label="Define-Use"];
29 -> 26 [label="Data Dep"];
30 -> 28 [label="AST"];
30 -> 31 [label="AST"];
30 -> 29 [label="AST"];
30 -> 27 [label="AST"];
32 -> 26 [label="AST"];
32 -> 30 [label="AST"];
33 -> 32 [label="AST"];
34 -> 25 [label="AST"];
34 -> 33 [label="AST"];
37 -> 35 [label="AST"];
37 -> 36 [label="AST"];
37 -> 111 [label="Control Dep"];
37 -> 90 [label="Control Dep"];
37 -> 42 [label="Control Dep"];
37 -> 40 [label="Control Dep"];
37 -> 38 [label="Control Dep"];
37 -> 41 [label="Control Dep"];
37 -> 110 [label="Control Dep"];
37 -> 97 [label="Control Dep"];
37 -> 93 [label="Control Dep"];
37 -> 91 [label="Control Dep"];
37 -> 92 [label="Control Dep"];
37 -> 96 [label="Control Dep"];
37 -> 94 [label="Control Dep"];
37 -> 95 [label="Control Dep"];
40 -> 39 [label="AST"];
40 -> 38 [label="AST"];
42 -> 40 [label="AST"];
42 -> 41 [label="AST"];
42 -> 82 [label="Control Dep"];
42 -> 51 [label="Control Dep"];
42 -> 49 [label="Control Dep"];
42 -> 44 [label="Control Dep"];
42 -> 48 [label="Control Dep"];
42 -> 46 [label="Control Dep"];
42 -> 81 [label="Control Dep"];
42 -> 52 [label="Control Dep"];
42 -> 89 [label="Control Dep"];
42 -> 88 [label="Control Dep"];
42 -> 83 [label="Control Dep"];
42 -> 87 [label="Control Dep"];
42 -> 84 [label="Control Dep"];
42 -> 86 [label="Control Dep"];
48 -> 47 [label="AST"];
48 -> 46 [label="AST"];
49 -> 45 [label="AST"];
49 -> 48 [label="AST"];
49 -> 44 [label="AST"];
49 -> 120 [label="Action"];
50 -> 59 [label="Define-Use"];
50 -> 76 [label="Define-Use"];
51 -> 50 [label="AST"];
51 -> 43 [label="AST"];
51 -> 49 [label="AST"];
52 -> 62 [label="Control Dep"];
52 -> 61 [label="Control Dep"];
52 -> 53 [label="Control Dep"];
52 -> 60 [label="Control Dep"];
52 -> 54 [label="Control Dep"];
52 -> 58 [label="Control Dep"];
52 -> 56 [label="Control Dep"];
52 -> 59 [label="Control Dep"];
52 -> 80 [label="Control Dep"];
52 -> 79 [label="Control Dep"];
52 -> 63 [label="Control Dep"];
52 -> 78 [label="Control Dep"];
52 -> 64 [label="Control Dep"];
52 -> 66 [label="Control Dep"];
52 -> 72 [label="Control Dep"];
52 -> 67 [label="Control Dep"];
52 -> 71 [label="Control Dep"];
52 -> 69 [label="Control Dep"];
52 -> 75 [label="Control Dep"];
52 -> 73 [label="Control Dep"];
52 -> 76 [label="Control Dep"];
52 -> 77 [label="Control Dep"];
53 -> 94 [label="Define-Use"];
53 -> 107 [label="Define-Use"];
53 -> 115 [label="Define-Use"];
58 -> 57 [label="AST"];
58 -> 56 [label="AST"];
59 -> 53 [label="Data Dep"];
60 -> 55 [label="AST"];
60 -> 58 [label="AST"];
60 -> 54 [label="AST"];
60 -> 59 [label="AST"];
61 -> 53 [label="AST"];
61 -> 60 [label="AST"];
62 -> 61 [label="AST"];
63 -> 94 [label="Define-Use"];
63 -> 107 [label="Define-Use"];
63 -> 115 [label="Define-Use"];
71 -> 70 [label="AST"];
71 -> 69 [label="AST"];
72 -> 68 [label="AST"];
72 -> 71 [label="AST"];
72 -> 67 [label="AST"];
75 -> 74 [label="AST"];
75 -> 73 [label="AST"];
76 -> 63 [label="Data Dep"];
78 -> 65 [label="AST"];
78 -> 66 [label="AST"];
78 -> 64 [label="AST"];
78 -> 72 [label="AST"];
78 -> 75 [label="AST"];
78 -> 76 [label="AST"];
78 -> 77 [label="AST"];
79 -> 63 [label="AST"];
79 -> 78 [label="AST"];
80 -> 79 [label="AST"];
81 -> 52 [label="AST"];
81 -> 62 [label="AST"];
81 -> 80 [label="AST"];
82 -> 51 [label="AST"];
82 -> 81 [label="AST"];
83 -> 94 [label="Define-Use"];
83 -> 107 [label="Define-Use"];
83 -> 115 [label="Define-Use"];
86 -> 83 [label="Data Dep"];
87 -> 85 [label="AST"];
87 -> 86 [label="AST"];
87 -> 84 [label="AST"];
88 -> 83 [label="AST"];
88 -> 87 [label="AST"];
89 -> 88 [label="AST"];
90 -> 42 [label="AST"];
90 -> 82 [label="AST"];
90 -> 89 [label="AST"];
93 -> 91 [label="AST"];
93 -> 92 [label="AST"];
96 -> 94 [label="AST"];
96 -> 95 [label="AST"];
97 -> 93 [label="AST"];
97 -> 96 [label="AST"];
97 -> 109 [label="Control Dep"];
97 -> 108 [label="Control Dep"];
97 -> 98 [label="Control Dep"];
97 -> 102 [label="Control Dep"];
97 -> 100 [label="Control Dep"];
97 -> 106 [label="Control Dep"];
97 -> 103 [label="Control Dep"];
97 -> 105 [label="Control Dep"];
97 -> 107 [label="Control Dep"];
102 -> 101 [label="AST"];
102 -> 100 [label="AST"];
106 -> 104 [label="AST"];
106 -> 105 [label="AST"];
106 -> 103 [label="AST"];
108 -> 99 [label="AST"];
108 -> 102 [label="AST"];
108 -> 98 [label="AST"];
108 -> 106 [label="AST"];
108 -> 107 [label="AST"];
109 -> 108 [label="AST"];
110 -> 97 [label="AST"];
110 -> 109 [label="AST"];
111 -> 90 [label="AST"];
111 -> 110 [label="AST"];
112 -> 37 [label="AST"];
112 -> 111 [label="AST"];
116 -> 114 [label="AST"];
116 -> 113 [label="AST"];
116 -> 115 [label="AST"];
117 -> 116 [label="AST"];
118 -> 15 [label="AST"];
118 -> 18 [label="AST"];
118 -> 22 [label="AST"];
118 -> 34 [label="AST"];
118 -> 112 [label="AST"];
118 -> 117 [label="AST"];
119 -> 1 [label="AST"];
119 -> 0 [label="AST"];
119 -> 2 [label="AST"];
119 -> 118 [label="AST"];
120 -> 121 [label="Action"];
}