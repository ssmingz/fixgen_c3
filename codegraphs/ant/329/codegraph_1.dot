digraph "delFile#?,FTPClient,String" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@delFile" shape=ellipse]
2 [label="2:CtParameterImpl@FTPClient ftp" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@FTPClient" shape=ellipse]
4 [label="2:CtParameterImpl@String filename" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
6 [label="2:CtTypeReferenceImpl@IOException" shape=ellipse]
7 [label="2:CtTypeReferenceImpl@TaskException" shape=ellipse]
8 [label="3:CtFieldReadImpl@verbose" shape=ellipse]
9 [label="4:CtExecutableReferenceImpl@info(java.lang.String)" shape=ellipse]
10 [label="4:CtVirtualElement@info" shape=ellipse]
11 [label="4:CtExecutableReferenceImpl@getLogger()" shape=ellipse]
12 [label="4:CtVirtualElement@getLogger" shape=ellipse]
13 [label="4:CtInvocationImpl@getLogger()" shape=ellipse]
14 [label="4:CtLiteralImpl@\"deleting \"" shape=ellipse]
15 [label="4:CtVariableReadImpl@filename" shape=ellipse]
16 [label="4:CtBinaryOperatorImpl@\"deleting \" + filename" shape=ellipse]
17 [label="4:CtInvocationImpl@getLogger().info(\"deleting \" + filename)" shape=ellipse]
18 [label="3:CtBlockImpl@\{
    getLogger().info(\"deleting \" + filename);
\}" shape=ellipse]
19 [label="3:CtIfImpl@if (verbose) \{
    getLogger().info(\"deleting \" + filename);
\}" shape=ellipse]
20 [label="6:CtExecutableReferenceImpl@deleteFile()" shape=ellipse]
21 [label="6:CtVirtualElement@deleteFile" shape=ellipse]
22 [label="6:CtVariableReadImpl@ftp" shape=ellipse]
23 [label="6:CtExecutableReferenceImpl@resolveFile(java.lang.String)" shape=ellipse]
24 [label="6:CtVirtualElement@resolveFile" shape=ellipse]
25 [label="6:CtVariableReadImpl@filename" shape=ellipse]
26 [label="6:CtInvocationImpl@resolveFile(filename)" shape=ellipse]
27 [label="6:CtInvocationImpl@ftp.deleteFile(resolveFile(filename))" shape=ellipse]
28 [label="6:CtUnaryOperatorImpl@!ftp.deleteFile(resolveFile(filename))" shape=ellipse]
29 [label="7:CtTypeReferenceImpl@String" shape=ellipse]
30 [label="7:CtLiteralImpl@\"could not delete file: \"" shape=ellipse]
31 [label="7:CtExecutableReferenceImpl@getReplyString()" shape=ellipse]
32 [label="7:CtVirtualElement@getReplyString" shape=ellipse]
33 [label="7:CtVariableReadImpl@ftp" shape=ellipse]
34 [label="7:CtInvocationImpl@ftp.getReplyString()" shape=ellipse]
35 [label="7:CtBinaryOperatorImpl@\"could not delete file: \" + ftp.getReplyString()" shape=ellipse]
36 [label="7:CtVirtualElement@s" shape=ellipse]
37 [label="7:CtLocalVariableImpl@String s = \"could not delete file: \" + ftp.getReplyString()" shape=ellipse]
38 [label="8:CtFieldReadImpl@skipFailedTransfers" shape=ellipse]
39 [label="8:CtLiteralImpl@true" shape=ellipse]
40 [label="8:CtBinaryOperatorImpl@skipFailedTransfers == true" shape=ellipse]
41 [label="9:CtExecutableReferenceImpl@log(java.lang.String,<unknown>)" shape=ellipse]
42 [label="9:CtVirtualElement@log" shape=ellipse]
43 [label="9:CtVariableReadImpl@s" shape=ellipse]
44 [label="9:CtTypeAccessImpl@MSG_WARN" shape=ellipse]
45 [label="9:CtInvocationImpl@log(s, MSG_WARN)" shape=ellipse]
46 [label="10:CtFieldWriteImpl@skipped" shape=ellipse]
47 [label="10:CtUnaryOperatorImpl@skipped++" shape=ellipse]
48 [label="8:CtBlockImpl@\{
    log(s, MSG_WARN);
    skipped++;
\}" shape=ellipse]
49 [label="12:CtTypeReferenceImpl@TaskException" shape=ellipse]
50 [label="12:CtVariableReadImpl@s" shape=ellipse]
51 [label="12:CtConstructorCallImpl@new TaskException(s)" shape=ellipse]
52 [label="12:CtThrowImpl@throw new TaskException(s)" shape=ellipse]
53 [label="11:CtBlockImpl@\{
    throw new TaskException(s);
\}" shape=ellipse]
54 [label="8:CtIfImpl@if (skipFailedTransfers == true) \{
    log(s, MSG_WARN);
    skipped++;
\} else \{
    throw new TaskException(s);
\}" shape=ellipse]
55 [label="6:CtBlockImpl@\{
    String s = \"could not delete file: \" + ftp.getReplyString();
    if (skipFailedTransfers == true) \{
        log(s, MSG_WARN);
        skipped++;
    \} else \{
        throw new TaskException(s);
    \}
\}" shape=ellipse]
56 [label="15:CtExecutableReferenceImpl@log(<unknown>,<unknown>)" shape=ellipse]
57 [label="15:CtVirtualElement@log" shape=ellipse]
58 [label="15:CtLiteralImpl@\"File \"" shape=ellipse]
59 [label="15:CtVariableReadImpl@filename" shape=ellipse]
60 [label="15:CtBinaryOperatorImpl@(\"File \" + filename)" shape=ellipse]
61 [label="15:CtLiteralImpl@\" deleted from \"" shape=ellipse]
62 [label="15:CtBinaryOperatorImpl@((\"File \" + filename) + \" deleted from \")" shape=ellipse]
63 [label="15:CtFieldReadImpl@server" shape=ellipse]
64 [label="15:CtBinaryOperatorImpl@((\"File \" + filename) + \" deleted from \") + server" shape=ellipse]
65 [label="15:CtTypeAccessImpl@MSG_VERBOSE" shape=ellipse]
66 [label="15:CtInvocationImpl@log(((\"File \" + filename) + \" deleted from \") + server, MSG_VERBOSE)" shape=ellipse]
67 [label="16:CtFieldWriteImpl@transferred" shape=ellipse]
68 [label="16:CtUnaryOperatorImpl@transferred++" shape=ellipse]
69 [label="14:CtBlockImpl@\{
    log(((\"File \" + filename) + \" deleted from \") + server, MSG_VERBOSE);
    transferred++;
\}" shape=ellipse]
70 [label="6:CtIfImpl@if (!ftp.deleteFile(resolveFile(filename))) \{
    String s = \"could not delete file: \" + ftp.getReplyString();
    if (skipFailedTransfers == true) \{
        log(s, MSG_WARN);
        skipped++;
    \} else \{
        throw new TaskException(s);
    \}
\} else \{
    log(((\"File \" + filename) + \" deleted from \") + server, MSG_VERBOSE);
    transferred++;
\}" shape=ellipse]
71 [label="2:CtBlockImpl@\{
    if (verbose) \{
        getLogger().info(\"deleting \" + filename);
    \}
    if (!ftp.deleteFile(resolveFile(filename))) \{
        String s = \"could not delete file: \" + ftp.getReplyString();
        if (skipFailedTransfers == true) \{
            log(s, MSG_WARN);
            skipped++;
        \} else \{
            throw new TaskException(s);
        \}
    \} else \{
        log(((\"File \" + filename) + \" deleted from \") + server, MSG_VERBOSE);
        transferred++;
    \}
\}" shape=ellipse]
72 [label="2:CtMethodImpl@protected void delFile(FTPClient ftp, String filename) throws IOException, TaskException \{
    if (verbose) \{
        getLogger().info(\"deleting \" + filename);
    \}
    if (!ftp.deleteFile(resolveFile(filename))) \{
        String s = \"could not delete file: \" + ftp.getReplyString();
        if (skipFailedTransfers == true) \{
            log(s, MSG_WARN);
            skipped++;
        \} else \{
            throw new TaskException(s);
        \}
    \} else \{
        log(((\"File \" + filename) + \" deleted from \") + server, MSG_VERBOSE);
        transferred++;
    \}
\}" shape=ellipse]
73 [label="15:Update@UPDATE" shape=ellipse]
74 [label="15:CtInvocationImpl@getLogger().debug(((\"File \" + filename) + \" deleted from \") + server)" shape=ellipse]
75 [label="9:Update@UPDATE" shape=ellipse]
76 [label="9:CtInvocationImpl@getLogger().warn(s)" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
8 -> 18 [label="Control Dep"];
8 -> 17 [label="Control Dep"];
8 -> 9 [label="Control Dep"];
8 -> 13 [label="Control Dep"];
8 -> 11 [label="Control Dep"];
8 -> 16 [label="Control Dep"];
8 -> 14 [label="Control Dep"];
8 -> 15 [label="Control Dep"];
13 -> 12 [label="AST"];
13 -> 11 [label="AST"];
16 -> 14 [label="AST"];
16 -> 15 [label="AST"];
17 -> 10 [label="AST"];
17 -> 13 [label="AST"];
17 -> 9 [label="AST"];
17 -> 16 [label="AST"];
18 -> 17 [label="AST"];
19 -> 8 [label="AST"];
19 -> 18 [label="AST"];
26 -> 24 [label="AST"];
26 -> 23 [label="AST"];
26 -> 25 [label="AST"];
27 -> 21 [label="AST"];
27 -> 22 [label="AST"];
27 -> 20 [label="AST"];
27 -> 26 [label="AST"];
28 -> 27 [label="AST"];
28 -> 55 [label="Control Dep"];
28 -> 37 [label="Control Dep"];
28 -> 35 [label="Control Dep"];
28 -> 30 [label="Control Dep"];
28 -> 34 [label="Control Dep"];
28 -> 31 [label="Control Dep"];
28 -> 33 [label="Control Dep"];
28 -> 54 [label="Control Dep"];
28 -> 40 [label="Control Dep"];
28 -> 38 [label="Control Dep"];
28 -> 39 [label="Control Dep"];
28 -> 69 [label="Control Dep"];
28 -> 66 [label="Control Dep"];
28 -> 56 [label="Control Dep"];
28 -> 64 [label="Control Dep"];
28 -> 62 [label="Control Dep"];
28 -> 60 [label="Control Dep"];
28 -> 58 [label="Control Dep"];
28 -> 59 [label="Control Dep"];
28 -> 61 [label="Control Dep"];
28 -> 63 [label="Control Dep"];
28 -> 65 [label="Control Dep"];
28 -> 68 [label="Control Dep"];
28 -> 67 [label="Control Dep"];
33 -> 36 [label="Data Dep"];
34 -> 32 [label="AST"];
34 -> 33 [label="AST"];
34 -> 31 [label="AST"];
35 -> 30 [label="AST"];
35 -> 34 [label="AST"];
36 -> 43 [label="Define-Use"];
36 -> 50 [label="Define-Use"];
37 -> 36 [label="AST"];
37 -> 29 [label="AST"];
37 -> 35 [label="AST"];
40 -> 38 [label="AST"];
40 -> 39 [label="AST"];
40 -> 48 [label="Control Dep"];
40 -> 45 [label="Control Dep"];
40 -> 41 [label="Control Dep"];
40 -> 43 [label="Control Dep"];
40 -> 44 [label="Control Dep"];
40 -> 47 [label="Control Dep"];
40 -> 46 [label="Control Dep"];
40 -> 53 [label="Control Dep"];
40 -> 52 [label="Control Dep"];
40 -> 51 [label="Control Dep"];
40 -> 50 [label="Control Dep"];
45 -> 42 [label="AST"];
45 -> 41 [label="AST"];
45 -> 43 [label="AST"];
45 -> 44 [label="AST"];
45 -> 75 [label="Action"];
47 -> 46 [label="AST"];
48 -> 45 [label="AST"];
48 -> 47 [label="AST"];
51 -> 50 [label="AST"];
52 -> 51 [label="AST"];
53 -> 52 [label="AST"];
54 -> 40 [label="AST"];
54 -> 48 [label="AST"];
54 -> 53 [label="AST"];
55 -> 37 [label="AST"];
55 -> 54 [label="AST"];
60 -> 58 [label="AST"];
60 -> 59 [label="AST"];
62 -> 60 [label="AST"];
62 -> 61 [label="AST"];
64 -> 62 [label="AST"];
64 -> 63 [label="AST"];
66 -> 57 [label="AST"];
66 -> 56 [label="AST"];
66 -> 64 [label="AST"];
66 -> 65 [label="AST"];
66 -> 73 [label="Action"];
68 -> 67 [label="AST"];
69 -> 66 [label="AST"];
69 -> 68 [label="AST"];
70 -> 28 [label="AST"];
70 -> 55 [label="AST"];
70 -> 69 [label="AST"];
71 -> 19 [label="AST"];
71 -> 70 [label="AST"];
72 -> 1 [label="AST"];
72 -> 0 [label="AST"];
72 -> 2 [label="AST"];
72 -> 4 [label="AST"];
72 -> 6 [label="AST"];
72 -> 7 [label="AST"];
72 -> 71 [label="AST"];
73 -> 74 [label="Action"];
75 -> 76 [label="Action"];
}