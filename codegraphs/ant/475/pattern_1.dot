digraph "Pattern" {
0 [label="getProcEnvironment#?#21:INSERT
reset#?#15:INSERT" shape=ellipse]
1 [label="getProcEnvironment#?#21:String lineSep = System.getProperty(\"line.separator\")
reset#?#15:eolString = System.getProperty(\"line.separator\")" shape=ellipse]
2 [label="getProcEnvironment#?#7:\{
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    Execute exe = new Execute(new PumpStreamHandler(out));
    exe.setCommandline(getProcEnvCommand());
    exe.setNewenvironment(true);
    int retval = exe.execute();
    if (retval != 0) \{
    \}
    BufferedReader in = new BufferedReader(new StringReader(toString(out)));
    if (Os.isFamily(\"openvms\")) \{
        procEnvironment = addVMSLogicals(procEnvironment, in);
        return procEnvironment;
    \}
    String var = null;
    String line;
    String lineSep = System.getProperty(\"line.separator\");
    while ((line = in.readLine()) != null) \{
        if (line.indexOf('=') == (-1)) \{
            if (var == null) \{
                var = lineSep + line;
            \} else \{
                var += lineSep + line;
            \}
        \} else \{
            if (var != null) \{
                procEnvironment.addElement(var);
            \}
            var = line;
        \}
    \} 
    if (var != null) \{
        procEnvironment.addElement(var);
    \}
\}
reset#?#2:\{
    append = false;
    forceOverwrite = true;
    destinationFile = null;
    encoding = null;
    outputEncoding = null;
    fixLastLine = false;
    filterChains = null;
    footer = null;
    header = null;
    binary = false;
    outputWriter = null;
    textBuffer = null;
    eolString = System.getProperty(\"line.separator\");
    rc = null;
\}" shape=ellipse]
3 [label="getProcEnvironment#?#7:try \{
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    Execute exe = new Execute(new PumpStreamHandler(out));
    exe.setCommandline(getProcEnvCommand());
    exe.setNewenvironment(true);
    int retval = exe.execute();
    if (retval != 0) \{
    \}
    BufferedReader in = new BufferedReader(new StringReader(toString(out)));
    if (Os.isFamily(\"openvms\")) \{
        procEnvironment = addVMSLogicals(procEnvironment, in);
        return procEnvironment;
    \}
    String var = null;
    String line;
    String lineSep = System.getProperty(\"line.separator\");
    while ((line = in.readLine()) != null) \{
        if (line.indexOf('=') == (-1)) \{
            if (var == null) \{
                var = lineSep + line;
            \} else \{
                var += lineSep + line;
            \}
        \} else \{
            if (var != null) \{
                procEnvironment.addElement(var);
            \}
            var = line;
        \}
    \} 
    if (var != null) \{
        procEnvironment.addElement(var);
    \}
\} catch (IOException exc) \{
    exc.printStackTrace();
\}" shape=ellipse]
4 [label="getProcEnvironment#?#8:ByteArrayOutputStream out = new ByteArrayOutputStream()
reset#?#13:outputWriter = null" shape=ellipse]
5 [label="getProcEnvironment#?#9:Execute exe = new Execute(new PumpStreamHandler(out))
reset#?#7:outputEncoding = null" shape=ellipse]
6 [label="getProcEnvironment#?#10:exe.setCommandline(getProcEnvCommand())" shape=ellipse]
7 [label="getProcEnvironment#?#11:exe.setNewenvironment(true)" shape=ellipse]
8 [label="getProcEnvironment#?#12:int retval = exe.execute()
reset#?#14:textBuffer = null" shape=ellipse]
9 [label="getProcEnvironment#?#13:if (retval != 0) \{
\}
reset#?#9:filterChains = null" shape=ellipse]
10 [label="getProcEnvironment#?#14:BufferedReader in = new BufferedReader(new StringReader(toString(out)))
reset#?#10:footer = null" shape=ellipse]
11 [label="getProcEnvironment#?#15:if (Os.isFamily(\"openvms\")) \{
    procEnvironment = addVMSLogicals(procEnvironment, in);
    return procEnvironment;
\}
reset#?#5:destinationFile = null" shape=ellipse]
12 [label="getProcEnvironment#?#19:String var = null
reset#?#16:rc = null" shape=ellipse]
13 [label="getProcEnvironment#?#20:String line
reset#?#6:encoding = null" shape=ellipse]
14 [label="getProcEnvironment#?#22:while ((line = in.readLine()) != null) \{
    if (line.indexOf('=') == (-1)) \{
        if (var == null) \{
            var = lineSep + line;
        \} else \{
            var += lineSep + line;
        \}
    \} else \{
        if (var != null) \{
            procEnvironment.addElement(var);
        \}
        var = line;
    \}
\} " shape=ellipse]
15 [label="getProcEnvironment#?#36:if (var != null) \{
    procEnvironment.addElement(var);
\}
reset#?#4:forceOverwrite = true" shape=ellipse]
16 [label="getProcEnvironment#?#21:lineSep
reset#?#15:eolString" shape=ellipse]
17 [label="getProcEnvironment#?#25:lineSep" shape=ellipse]
18 [label="getProcEnvironment#?#27:lineSep" shape=ellipse]
19 [label="getProcEnvironment#?#21:String" shape=ellipse]
20 [label="getProcEnvironment#?#-1:java.lang
reset#?#15:getProperty(java.lang.String)" shape=ellipse]
21 [label="getProcEnvironment#?#21:System.getProperty(\"line.separator\")" shape=ellipse]
22 [label="getProcEnvironment#?#21:getProperty
reset#?#15:getProperty" shape=ellipse]
23 [label="getProcEnvironment#?#21:System
reset#?#15:System" shape=ellipse]
24 [label="getProcEnvironment#?#21:getProperty(java.lang.String)" shape=ellipse]
25 [label="getProcEnvironment#?#21:\"line.separator\"
reset#?#15:\"line.separator\"" shape=ellipse]
26 [label="getProcEnvironment#?#21:DELETE
reset#?#15:DELETE" shape=ellipse]
27 [label="getProcEnvironment#?#21:StringUtils.LINE_SEP
reset#?#15:StringUtils.LINE_SEP" shape=ellipse]
28 [label="getProcEnvironment#?#21:MOVE
reset#?#15:MOVE" shape=ellipse]
29 [label="getProcEnvironment#?#21:lineSep" shape=ellipse]
30 [label="reset#?#15:System.getProperty(\"line.separator\")" shape=ellipse]
31 [label="reset#?#8:fixLastLine = false" shape=ellipse]
32 [label="reset#?#3:append = false" shape=ellipse]
33 [label="reset#?#-1:eolString" shape=ellipse]
34 [label="reset#?#2:public void reset() \{
    append = false;
    forceOverwrite = true;
    destinationFile = null;
    encoding = null;
    outputEncoding = null;
    fixLastLine = false;
    filterChains = null;
    footer = null;
    header = null;
    binary = false;
    outputWriter = null;
    textBuffer = null;
    eolString = System.getProperty(\"line.separator\");
    rc = null;
\}" shape=ellipse]
35 [label="reset#?#12:binary = false" shape=ellipse]
36 [label="reset#?#11:header = null" shape=ellipse]
0 -> 27 [label="Action:2"];
1 -> 0 [label="Action:2"];
1 -> 16 [label="AST:2"];
1 -> 19 [label="AST:1"];
1 -> 21 [label="AST:1"];
1 -> 30 [label="AST:1"];
2 -> 1 [label="AST:2"];
2 -> 4 [label="AST:2"];
2 -> 5 [label="AST:2"];
2 -> 6 [label="AST:1"];
2 -> 7 [label="AST:1"];
2 -> 8 [label="AST:2"];
2 -> 9 [label="AST:2"];
2 -> 10 [label="AST:2"];
2 -> 11 [label="AST:2"];
2 -> 12 [label="AST:2"];
2 -> 13 [label="AST:2"];
2 -> 14 [label="AST:1"];
2 -> 15 [label="AST:2"];
2 -> 31 [label="AST:1"];
2 -> 32 [label="AST:1"];
2 -> 35 [label="AST:1"];
2 -> 36 [label="AST:1"];
3 -> 2 [label="AST:1"];
16 -> 17 [label="Define Use:1"];
16 -> 18 [label="Define Use:1"];
16 -> 33 [label="AST:1"];
19 -> 20 [label="AST:1"];
21 -> 22 [label="AST:1"];
21 -> 23 [label="AST:1"];
21 -> 24 [label="AST:1"];
21 -> 25 [label="AST:1"];
21 -> 26 [label="Action:1"];
23 -> 28 [label="Action:2"];
27 -> 29 [label="Data Dep:1"];
28 -> 27 [label="Action:2"];
30 -> 22 [label="AST:1"];
30 -> 23 [label="AST:1"];
30 -> 20 [label="AST:1"];
30 -> 25 [label="AST:1"];
30 -> 26 [label="Action:1"];
34 -> 2 [label="AST:1"];
}