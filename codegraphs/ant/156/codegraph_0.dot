digraph "doExecute#?" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@doExecute" shape=ellipse]
2 [label="2:CtTypeReferenceImpl@TaskException" shape=ellipse]
3 [label="3:CtTypeReferenceImpl@String" shape=ellipse]
4 [label="3:CtExecutableReferenceImpl@getAbsolutePath()" shape=ellipse]
5 [label="3:CtVirtualElement@getAbsolutePath" shape=ellipse]
6 [label="3:CtFieldReadImpl@m_target" shape=ellipse]
7 [label="3:CtInvocationImpl@m_target.getAbsolutePath()" shape=ellipse]
8 [label="3:CtVirtualElement@pathname" shape=ellipse]
9 [label="3:CtLocalVariableImpl@String pathname = m_target.getAbsolutePath()" shape=ellipse]
10 [label="4:CtTypeReferenceImpl@int" shape=ellipse]
11 [label="4:CtExecutableReferenceImpl@length()" shape=ellipse]
12 [label="4:CtVirtualElement@length" shape=ellipse]
13 [label="4:CtVariableReadImpl@pathname" shape=ellipse]
14 [label="4:CtInvocationImpl@pathname.length()" shape=ellipse]
15 [label="4:CtExecutableReferenceImpl@length()" shape=ellipse]
16 [label="4:CtVirtualElement@length" shape=ellipse]
17 [label="4:CtLiteralImpl@\".jj\"" shape=ellipse]
18 [label="4:CtInvocationImpl@\".jj\".length()" shape=ellipse]
19 [label="4:CtBinaryOperatorImpl@pathname.length() - \".jj\".length()" shape=ellipse]
20 [label="4:CtVirtualElement@pos" shape=ellipse]
21 [label="4:CtLocalVariableImpl@int pos = pathname.length() - \".jj\".length()" shape=ellipse]
22 [label="5:CtVariableWriteImpl@pathname" shape=ellipse]
23 [label="5:CtExecutableReferenceImpl@substring(int,int)" shape=ellipse]
24 [label="5:CtVirtualElement@substring" shape=ellipse]
25 [label="5:CtVariableReadImpl@pathname" shape=ellipse]
26 [label="5:CtLiteralImpl@0" shape=ellipse]
27 [label="5:CtVariableReadImpl@pos" shape=ellipse]
28 [label="5:CtInvocationImpl@pathname.substring(0, pos)" shape=ellipse]
29 [label="5:CtLiteralImpl@\".java\"" shape=ellipse]
30 [label="5:CtBinaryOperatorImpl@pathname.substring(0, pos) + \".java\"" shape=ellipse]
31 [label="5:CtAssignmentImpl@pathname = pathname.substring(0, pos) + \".java\"" shape=ellipse]
32 [label="6:CtTypeReferenceImpl@File" shape=ellipse]
33 [label="6:CtTypeReferenceImpl@File" shape=ellipse]
34 [label="6:CtVariableReadImpl@pathname" shape=ellipse]
35 [label="6:CtConstructorCallImpl@new File(pathname)" shape=ellipse]
36 [label="6:CtVirtualElement@javaFile" shape=ellipse]
37 [label="6:CtLocalVariableImpl@File javaFile = new File(pathname)" shape=ellipse]
38 [label="7:CtExecutableReferenceImpl@exists()" shape=ellipse]
39 [label="7:CtVirtualElement@exists" shape=ellipse]
40 [label="7:CtVariableReadImpl@javaFile" shape=ellipse]
41 [label="7:CtInvocationImpl@javaFile.exists()" shape=ellipse]
42 [label="7:CtExecutableReferenceImpl@lastModified()" shape=ellipse]
43 [label="7:CtVirtualElement@lastModified" shape=ellipse]
44 [label="7:CtFieldReadImpl@m_target" shape=ellipse]
45 [label="7:CtInvocationImpl@m_target.lastModified()" shape=ellipse]
46 [label="7:CtExecutableReferenceImpl@lastModified()" shape=ellipse]
47 [label="7:CtVirtualElement@lastModified" shape=ellipse]
48 [label="7:CtVariableReadImpl@javaFile" shape=ellipse]
49 [label="7:CtInvocationImpl@javaFile.lastModified()" shape=ellipse]
50 [label="7:CtBinaryOperatorImpl@(m_target.lastModified() < javaFile.lastModified())" shape=ellipse]
51 [label="7:CtBinaryOperatorImpl@javaFile.exists() && (m_target.lastModified() < javaFile.lastModified())" shape=ellipse]
52 [label="8:CtExecutableReferenceImpl@info()" shape=ellipse]
53 [label="8:CtVirtualElement@info" shape=ellipse]
54 [label="8:CtExecutableReferenceImpl@getContext()" shape=ellipse]
55 [label="8:CtVirtualElement@getContext" shape=ellipse]
56 [label="8:CtInvocationImpl@getContext()" shape=ellipse]
57 [label="8:CtLiteralImpl@\"Target is already build - skipping (\"" shape=ellipse]
58 [label="8:CtFieldReadImpl@m_target" shape=ellipse]
59 [label="8:CtBinaryOperatorImpl@(\"Target is already build - skipping (\" + m_target)" shape=ellipse]
60 [label="8:CtLiteralImpl@\")\"" shape=ellipse]
61 [label="8:CtBinaryOperatorImpl@(\"Target is already build - skipping (\" + m_target) + \")\"" shape=ellipse]
62 [label="8:CtInvocationImpl@getContext().info((\"Target is already build - skipping (\" + m_target) + \")\")" shape=ellipse]
63 [label="9:CtReturnImpl@return" shape=ellipse]
64 [label="7:CtBlockImpl@\{
    getContext().info((\"Target is already build - skipping (\" + m_target) + \")\");
    return;
\}" shape=ellipse]
65 [label="7:CtIfImpl@if (javaFile.exists() && (m_target.lastModified() < javaFile.lastModified())) \{
    getContext().info((\"Target is already build - skipping (\" + m_target) + \")\");
    return;
\}" shape=ellipse]
66 [label="11:CtExecutableReferenceImpl@setClassName(java.lang.String)" shape=ellipse]
67 [label="11:CtVirtualElement@setClassName" shape=ellipse]
68 [label="11:CtFieldReadImpl@m_exe" shape=ellipse]
69 [label="11:CtLiteralImpl@\"com.metamata.jj.MParse\"" shape=ellipse]
70 [label="11:CtInvocationImpl@m_exe.setClassName(\"com.metamata.jj.MParse\")" shape=ellipse]
71 [label="12:CtExecutableReferenceImpl@executeForked()" shape=ellipse]
72 [label="12:CtVirtualElement@executeForked" shape=ellipse]
73 [label="12:CtFieldReadImpl@m_exe" shape=ellipse]
74 [label="12:CtExecutableReferenceImpl@getContext()" shape=ellipse]
75 [label="12:CtVirtualElement@getContext" shape=ellipse]
76 [label="12:CtInvocationImpl@getContext()" shape=ellipse]
77 [label="12:CtInvocationImpl@m_exe.executeForked(getContext())" shape=ellipse]
78 [label="2:CtBlockImpl@\{
    String pathname = m_target.getAbsolutePath();
    int pos = pathname.length() - \".jj\".length();
    pathname = pathname.substring(0, pos) + \".java\";
    File javaFile = new File(pathname);
    if (javaFile.exists() && (m_target.lastModified() < javaFile.lastModified())) \{
        getContext().info((\"Target is already build - skipping (\" + m_target) + \")\");
        return;
    \}
    m_exe.setClassName(\"com.metamata.jj.MParse\");
    m_exe.executeForked(getContext());
\}" shape=ellipse]
79 [label="2:CtMethodImpl@protected void doExecute() throws TaskException \{
    String pathname = m_target.getAbsolutePath();
    int pos = pathname.length() - \".jj\".length();
    pathname = pathname.substring(0, pos) + \".java\";
    File javaFile = new File(pathname);
    if (javaFile.exists() && (m_target.lastModified() < javaFile.lastModified())) \{
        getContext().info((\"Target is already build - skipping (\" + m_target) + \")\");
        return;
    \}
    m_exe.setClassName(\"com.metamata.jj.MParse\");
    m_exe.executeForked(getContext());
\}" shape=ellipse]
80 [label="8:Update@UPDATE" shape=ellipse]
81 [label="8:CtInvocationImpl@getContext().verbose((\"Target is already build - skipping (\" + m_target) + \")\")" shape=ellipse]
6 -> 8 [label="Data Dep"];
7 -> 5 [label="AST"];
7 -> 6 [label="AST"];
7 -> 4 [label="AST"];
8 -> 13 [label="Define-Use"];
9 -> 8 [label="AST"];
9 -> 3 [label="AST"];
9 -> 7 [label="AST"];
13 -> 20 [label="Data Dep"];
14 -> 12 [label="AST"];
14 -> 13 [label="AST"];
14 -> 11 [label="AST"];
18 -> 16 [label="AST"];
18 -> 17 [label="AST"];
18 -> 15 [label="AST"];
19 -> 14 [label="AST"];
19 -> 18 [label="AST"];
20 -> 27 [label="Define-Use"];
21 -> 20 [label="AST"];
21 -> 10 [label="AST"];
21 -> 19 [label="AST"];
22 -> 34 [label="Define-Use"];
25 -> 22 [label="Data Dep"];
27 -> 22 [label="Data Dep"];
28 -> 24 [label="AST"];
28 -> 25 [label="AST"];
28 -> 23 [label="AST"];
28 -> 26 [label="AST"];
28 -> 27 [label="AST"];
30 -> 28 [label="AST"];
30 -> 29 [label="AST"];
31 -> 22 [label="AST"];
31 -> 30 [label="AST"];
34 -> 36 [label="Data Dep"];
35 -> 34 [label="AST"];
36 -> 40 [label="Define-Use"];
36 -> 48 [label="Define-Use"];
37 -> 36 [label="AST"];
37 -> 32 [label="AST"];
37 -> 35 [label="AST"];
41 -> 39 [label="AST"];
41 -> 40 [label="AST"];
41 -> 38 [label="AST"];
45 -> 43 [label="AST"];
45 -> 44 [label="AST"];
45 -> 42 [label="AST"];
49 -> 47 [label="AST"];
49 -> 48 [label="AST"];
49 -> 46 [label="AST"];
50 -> 45 [label="AST"];
50 -> 49 [label="AST"];
51 -> 41 [label="AST"];
51 -> 50 [label="AST"];
51 -> 64 [label="Control Dep"];
51 -> 62 [label="Control Dep"];
51 -> 52 [label="Control Dep"];
51 -> 56 [label="Control Dep"];
51 -> 54 [label="Control Dep"];
51 -> 61 [label="Control Dep"];
51 -> 59 [label="Control Dep"];
51 -> 57 [label="Control Dep"];
51 -> 58 [label="Control Dep"];
51 -> 60 [label="Control Dep"];
51 -> 63 [label="Control Dep"];
56 -> 55 [label="AST"];
56 -> 54 [label="AST"];
59 -> 57 [label="AST"];
59 -> 58 [label="AST"];
61 -> 59 [label="AST"];
61 -> 60 [label="AST"];
62 -> 53 [label="AST"];
62 -> 56 [label="AST"];
62 -> 52 [label="AST"];
62 -> 61 [label="AST"];
62 -> 80 [label="Action"];
64 -> 62 [label="AST"];
64 -> 63 [label="AST"];
65 -> 51 [label="AST"];
65 -> 64 [label="AST"];
70 -> 67 [label="AST"];
70 -> 68 [label="AST"];
70 -> 66 [label="AST"];
70 -> 69 [label="AST"];
76 -> 75 [label="AST"];
76 -> 74 [label="AST"];
77 -> 72 [label="AST"];
77 -> 73 [label="AST"];
77 -> 71 [label="AST"];
77 -> 76 [label="AST"];
78 -> 9 [label="AST"];
78 -> 21 [label="AST"];
78 -> 31 [label="AST"];
78 -> 37 [label="AST"];
78 -> 65 [label="AST"];
78 -> 70 [label="AST"];
78 -> 77 [label="AST"];
79 -> 1 [label="AST"];
79 -> 0 [label="AST"];
79 -> 2 [label="AST"];
79 -> 78 [label="AST"];
80 -> 81 [label="Action"];
}