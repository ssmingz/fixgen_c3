digraph "getIncludedDirectoryResources#?" {
0 [label="2:CtVirtualElement@Resource[]" shape=ellipse]
1 [label="2:CtArrayTypeReferenceImpl@Resource[]" shape=ellipse]
2 [label="2:CtVirtualElement@getIncludedDirectoryResources" shape=ellipse]
3 [label="3:CtTypeReferenceImpl@Vector" shape=ellipse]
4 [label="3:CtTypeReferenceImpl@Vector" shape=ellipse]
5 [label="3:CtConstructorCallImpl@new Vector()" shape=ellipse]
6 [label="3:CtVirtualElement@myvector" shape=ellipse]
7 [label="3:CtLocalVariableImpl@Vector myvector = new Vector()" shape=ellipse]
8 [label="4:CtExecutableReferenceImpl@scanme()" shape=ellipse]
9 [label="4:CtVirtualElement@scanme" shape=ellipse]
10 [label="4:CtInvocationImpl@scanme()" shape=ellipse]
11 [label="5:CtTypeReferenceImpl@Enumeration" shape=ellipse]
12 [label="5:CtExecutableReferenceImpl@elements()" shape=ellipse]
13 [label="5:CtVirtualElement@elements" shape=ellipse]
14 [label="5:CtFieldReadImpl@myentries" shape=ellipse]
15 [label="5:CtInvocationImpl@myentries.elements()" shape=ellipse]
16 [label="5:CtVirtualElement@e" shape=ellipse]
17 [label="5:CtLocalVariableImpl@Enumeration e = myentries.elements()" shape=ellipse]
18 [label="5:CtExecutableReferenceImpl@hasMoreElements()" shape=ellipse]
19 [label="5:CtVirtualElement@hasMoreElements" shape=ellipse]
20 [label="5:CtVariableReadImpl@e" shape=ellipse]
21 [label="5:CtInvocationImpl@e.hasMoreElements()" shape=ellipse]
22 [label="6:CtTypeReferenceImpl@Resource" shape=ellipse]
23 [label="6:CtExecutableReferenceImpl@nextElement()" shape=ellipse]
24 [label="6:CtVirtualElement@nextElement" shape=ellipse]
25 [label="6:CtVariableReadImpl@e" shape=ellipse]
26 [label="6:CtInvocationImpl@((Resource) (e.nextElement()))" shape=ellipse]
27 [label="6:CtTypeReferenceImpl@Resource" shape=ellipse]
28 [label="6:CtVirtualElement@myresource" shape=ellipse]
29 [label="6:CtLocalVariableImpl@Resource myresource = ((Resource) (e.nextElement()))" shape=ellipse]
30 [label="7:CtExecutableReferenceImpl@isDirectory()" shape=ellipse]
31 [label="7:CtVirtualElement@isDirectory" shape=ellipse]
32 [label="7:CtVariableReadImpl@myresource" shape=ellipse]
33 [label="7:CtInvocationImpl@myresource.isDirectory()" shape=ellipse]
34 [label="7:CtExecutableReferenceImpl@match(<unknown>)" shape=ellipse]
35 [label="7:CtVirtualElement@match" shape=ellipse]
36 [label="7:CtExecutableReferenceImpl@getName()" shape=ellipse]
37 [label="7:CtVirtualElement@getName" shape=ellipse]
38 [label="7:CtVariableReadImpl@myresource" shape=ellipse]
39 [label="7:CtInvocationImpl@myresource.getName()" shape=ellipse]
40 [label="7:CtInvocationImpl@match(myresource.getName())" shape=ellipse]
41 [label="7:CtBinaryOperatorImpl@myresource.isDirectory() && match(myresource.getName())" shape=ellipse]
42 [label="8:CtExecutableReferenceImpl@addElement()" shape=ellipse]
43 [label="8:CtVirtualElement@addElement" shape=ellipse]
44 [label="8:CtVariableReadImpl@myvector" shape=ellipse]
45 [label="8:CtExecutableReferenceImpl@clone()" shape=ellipse]
46 [label="8:CtVirtualElement@clone" shape=ellipse]
47 [label="8:CtVariableReadImpl@myresource" shape=ellipse]
48 [label="8:CtInvocationImpl@myresource.clone()" shape=ellipse]
49 [label="8:CtInvocationImpl@myvector.addElement(myresource.clone())" shape=ellipse]
50 [label="7:CtBlockImpl@\{
    myvector.addElement(myresource.clone());
\}" shape=ellipse]
51 [label="7:CtIfImpl@if (myresource.isDirectory() && match(myresource.getName())) \{
    myvector.addElement(myresource.clone());
\}" shape=ellipse]
52 [label="5:CtBlockImpl@\{
    Resource myresource = ((Resource) (e.nextElement()));
    if (myresource.isDirectory() && match(myresource.getName())) \{
        myvector.addElement(myresource.clone());
    \}
\}" shape=ellipse]
53 [label="5:CtForImpl@for (Enumeration e = myentries.elements(); e.hasMoreElements();) \{
    Resource myresource = ((Resource) (e.nextElement()));
    if (myresource.isDirectory() && match(myresource.getName())) \{
        myvector.addElement(myresource.clone());
    \}
\}" shape=ellipse]
54 [label="11:CtVirtualElement@Resource[]" shape=ellipse]
55 [label="11:CtArrayTypeReferenceImpl@Resource[]" shape=ellipse]
56 [label="11:CtNewArrayImpl@new Resource[myvector.size()]" shape=ellipse]
57 [label="11:CtInvocationImpl@myvector.size()" shape=ellipse]
58 [label="11:CtVirtualElement@resources" shape=ellipse]
59 [label="11:CtLocalVariableImpl@Resource[] resources = new Resource[myvector.size()]" shape=ellipse]
60 [label="12:CtExecutableReferenceImpl@copyInto(Resource[])" shape=ellipse]
61 [label="12:CtVirtualElement@copyInto" shape=ellipse]
62 [label="12:CtVariableReadImpl@myvector" shape=ellipse]
63 [label="12:CtVariableReadImpl@resources" shape=ellipse]
64 [label="12:CtInvocationImpl@myvector.copyInto(resources)" shape=ellipse]
65 [label="13:CtVariableReadImpl@resources" shape=ellipse]
66 [label="13:CtReturnImpl@return resources" shape=ellipse]
67 [label="2:CtBlockImpl@\{
    Vector myvector = new Vector();
    scanme();
    for (Enumeration e = myentries.elements(); e.hasMoreElements();) \{
        Resource myresource = ((Resource) (e.nextElement()));
        if (myresource.isDirectory() && match(myresource.getName())) \{
            myvector.addElement(myresource.clone());
        \}
    \}
    Resource[] resources = new Resource[myvector.size()];
    myvector.copyInto(resources);
    return resources;
\}" shape=ellipse]
68 [label="2:CtMethodImpl@public Resource[] getIncludedDirectoryResources() \{
    Vector myvector = new Vector();
    scanme();
    for (Enumeration e = myentries.elements(); e.hasMoreElements();) \{
        Resource myresource = ((Resource) (e.nextElement()));
        if (myresource.isDirectory() && match(myresource.getName())) \{
            myvector.addElement(myresource.clone());
        \}
    \}
    Resource[] resources = new Resource[myvector.size()];
    myvector.copyInto(resources);
    return resources;
\}" shape=ellipse]
69 [label="3:Insert@INSERT" shape=ellipse]
70 [label="3:CtIfImpl@if (srcFile != null) \{
    Vector myvector = new Vector();
    scanme();
    for (Enumeration e = myentries.elements(); e.hasMoreElements();) \{
        Resource myresource = ((Resource) (e.nextElement()));
        if (myresource.isDirectory() && match(myresource.getName())) \{
            myvector.addElement(myresource.clone());
        \}
    \}
    Resource[] resources = new Resource[myvector.size()];
    myvector.copyInto(resources);
    return resources;
\} else \{
    return super.getIncludedDirectoryResources();
\}" shape=ellipse]
71 [label="3:Move@MOVE" shape=ellipse]
72 [label="4:Move@MOVE" shape=ellipse]
73 [label="5:Move@MOVE" shape=ellipse]
74 [label="11:Move@MOVE" shape=ellipse]
75 [label="12:Move@MOVE" shape=ellipse]
76 [label="13:Move@MOVE" shape=ellipse]
1 -> 0 [label="AST"];
6 -> 44 [label="Define-Use"];
6 -> 62 [label="Define-Use"];
7 -> 6 [label="AST"];
7 -> 3 [label="AST"];
7 -> 5 [label="AST"];
7 -> 71 [label="Action"];
10 -> 9 [label="AST"];
10 -> 8 [label="AST"];
10 -> 72 [label="Action"];
14 -> 16 [label="Data Dep"];
15 -> 13 [label="AST"];
15 -> 14 [label="AST"];
15 -> 12 [label="AST"];
16 -> 20 [label="Define-Use"];
16 -> 25 [label="Define-Use"];
17 -> 16 [label="AST"];
17 -> 11 [label="AST"];
17 -> 15 [label="AST"];
21 -> 19 [label="AST"];
21 -> 20 [label="AST"];
21 -> 18 [label="AST"];
21 -> 52 [label="Control Dep"];
21 -> 29 [label="Control Dep"];
21 -> 26 [label="Control Dep"];
21 -> 23 [label="Control Dep"];
21 -> 25 [label="Control Dep"];
21 -> 51 [label="Control Dep"];
21 -> 41 [label="Control Dep"];
21 -> 33 [label="Control Dep"];
21 -> 30 [label="Control Dep"];
21 -> 32 [label="Control Dep"];
21 -> 40 [label="Control Dep"];
21 -> 34 [label="Control Dep"];
21 -> 39 [label="Control Dep"];
21 -> 36 [label="Control Dep"];
21 -> 38 [label="Control Dep"];
25 -> 28 [label="Data Dep"];
26 -> 24 [label="AST"];
26 -> 27 [label="AST"];
26 -> 25 [label="AST"];
26 -> 23 [label="AST"];
28 -> 32 [label="Define-Use"];
28 -> 38 [label="Define-Use"];
28 -> 47 [label="Define-Use"];
29 -> 28 [label="AST"];
29 -> 22 [label="AST"];
29 -> 26 [label="AST"];
33 -> 31 [label="AST"];
33 -> 32 [label="AST"];
33 -> 30 [label="AST"];
39 -> 37 [label="AST"];
39 -> 38 [label="AST"];
39 -> 36 [label="AST"];
40 -> 35 [label="AST"];
40 -> 34 [label="AST"];
40 -> 39 [label="AST"];
41 -> 33 [label="AST"];
41 -> 40 [label="AST"];
41 -> 50 [label="Control Dep"];
41 -> 49 [label="Control Dep"];
41 -> 42 [label="Control Dep"];
41 -> 44 [label="Control Dep"];
41 -> 48 [label="Control Dep"];
41 -> 45 [label="Control Dep"];
41 -> 47 [label="Control Dep"];
48 -> 46 [label="AST"];
48 -> 47 [label="AST"];
48 -> 45 [label="AST"];
49 -> 43 [label="AST"];
49 -> 44 [label="AST"];
49 -> 42 [label="AST"];
49 -> 48 [label="AST"];
50 -> 49 [label="AST"];
51 -> 41 [label="AST"];
51 -> 50 [label="AST"];
52 -> 29 [label="AST"];
52 -> 51 [label="AST"];
53 -> 17 [label="AST"];
53 -> 21 [label="AST"];
53 -> 52 [label="AST"];
53 -> 73 [label="Action"];
55 -> 54 [label="AST"];
56 -> 57 [label="AST"];
58 -> 63 [label="Define-Use"];
58 -> 65 [label="Define-Use"];
59 -> 58 [label="AST"];
59 -> 55 [label="AST"];
59 -> 56 [label="AST"];
59 -> 74 [label="Action"];
64 -> 61 [label="AST"];
64 -> 62 [label="AST"];
64 -> 60 [label="AST"];
64 -> 63 [label="AST"];
64 -> 75 [label="Action"];
66 -> 65 [label="AST"];
66 -> 76 [label="Action"];
67 -> 7 [label="AST"];
67 -> 10 [label="AST"];
67 -> 53 [label="AST"];
67 -> 59 [label="AST"];
67 -> 64 [label="AST"];
67 -> 66 [label="AST"];
68 -> 2 [label="AST"];
68 -> 1 [label="AST"];
68 -> 67 [label="AST"];
68 -> 69 [label="Action"];
69 -> 70 [label="Action"];
}