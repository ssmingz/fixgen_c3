digraph "spawn#?" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@spawn" shape=ellipse]
2 [label="2:CtTypeReferenceImpl@IOException" shape=ellipse]
3 [label="3:CtTypeReferenceImpl@Process" shape=ellipse]
4 [label="4:CtExecutableReferenceImpl@launch(<unknown>,<unknown>,<unknown>,<unknown>,<unknown>)" shape=ellipse]
5 [label="4:CtVirtualElement@launch" shape=ellipse]
6 [label="4:CtFieldReadImpl@project" shape=ellipse]
7 [label="4:CtExecutableReferenceImpl@getCommandline()" shape=ellipse]
8 [label="4:CtVirtualElement@getCommandline" shape=ellipse]
9 [label="4:CtInvocationImpl@getCommandline()" shape=ellipse]
10 [label="4:CtExecutableReferenceImpl@getEnvironment()" shape=ellipse]
11 [label="4:CtVirtualElement@getEnvironment" shape=ellipse]
12 [label="4:CtInvocationImpl@getEnvironment()" shape=ellipse]
13 [label="4:CtFieldReadImpl@workingDirectory" shape=ellipse]
14 [label="4:CtFieldReadImpl@useVMLauncher" shape=ellipse]
15 [label="4:CtInvocationImpl@launch(project, getCommandline(), getEnvironment(), workingDirectory, useVMLauncher)" shape=ellipse]
16 [label="3:CtVirtualElement@process" shape=ellipse]
17 [label="3:CtLocalVariableImpl@final Process process = launch(project, getCommandline(), getEnvironment(), workingDirectory, useVMLauncher)" shape=ellipse]
18 [label="5:CtExecutableReferenceImpl@isFamily(java.lang.String)" shape=ellipse]
19 [label="5:CtVirtualElement@isFamily" shape=ellipse]
20 [label="5:CtTypeAccessImpl@Os" shape=ellipse]
21 [label="5:CtLiteralImpl@\"windows\"" shape=ellipse]
22 [label="5:CtInvocationImpl@Os.isFamily(\"windows\")" shape=ellipse]
23 [label="7:CtExecutableReferenceImpl@sleep(long)" shape=ellipse]
24 [label="7:CtVirtualElement@sleep" shape=ellipse]
25 [label="7:CtTypeAccessImpl@Thread" shape=ellipse]
26 [label="7:CtLiteralImpl@1000" shape=ellipse]
27 [label="7:CtInvocationImpl@Thread.sleep(1000)" shape=ellipse]
28 [label="6:CtBlockImpl@\{
    Thread.sleep(1000);
\}" shape=ellipse]
29 [label="8:CtVirtualElement@e" shape=ellipse]
30 [label="8:CtTypeReferenceImpl@InterruptedException" shape=ellipse]
31 [label="8:CtCatchVariableImpl@InterruptedException e" shape=ellipse]
32 [label="9:CtExecutableReferenceImpl@log(java.lang.String)" shape=ellipse]
33 [label="9:CtVirtualElement@log" shape=ellipse]
34 [label="9:CtFieldReadImpl@project" shape=ellipse]
35 [label="9:CtLiteralImpl@\"interruption in the sleep after having spawned a process\"" shape=ellipse]
36 [label="9:CtTypeAccessImpl@MSG_VERBOSE" shape=ellipse]
37 [label="9:CtInvocationImpl@project.log(\"interruption in the sleep after having spawned a process\", MSG_VERBOSE)" shape=ellipse]
38 [label="8:CtBlockImpl@\{
    project.log(\"interruption in the sleep after having spawned a process\", MSG_VERBOSE);
\}" shape=ellipse]
39 [label="8:CtCatchImpl@ catch (InterruptedException e) \{
    project.log(\"interruption in the sleep after having spawned a process\", MSG_VERBOSE);
\}" shape=ellipse]
40 [label="6:CtTryImpl@try \{
    Thread.sleep(1000);
\} catch (InterruptedException e) \{
    project.log(\"interruption in the sleep after having spawned a process\", MSG_VERBOSE);
\}" shape=ellipse]
41 [label="5:CtBlockImpl@\{
    try \{
        Thread.sleep(1000);
    \} catch (InterruptedException e) \{
        project.log(\"interruption in the sleep after having spawned a process\", MSG_VERBOSE);
    \}
\}" shape=ellipse]
42 [label="5:CtIfImpl@if (Os.isFamily(\"windows\")) \{
    try \{
        Thread.sleep(1000);
    \} catch (InterruptedException e) \{
        project.log(\"interruption in the sleep after having spawned a process\", MSG_VERBOSE);
    \}
\}" shape=ellipse]
43 [label="12:CtExecutableReferenceImpl@log(java.lang.String)" shape=ellipse]
44 [label="12:CtVirtualElement@log" shape=ellipse]
45 [label="12:CtFieldReadImpl@project" shape=ellipse]
46 [label="12:CtLiteralImpl@\"spawned process \"" shape=ellipse]
47 [label="12:CtExecutableReferenceImpl@toString()" shape=ellipse]
48 [label="12:CtVirtualElement@toString" shape=ellipse]
49 [label="12:CtVariableReadImpl@process" shape=ellipse]
50 [label="12:CtInvocationImpl@process.toString()" shape=ellipse]
51 [label="12:CtBinaryOperatorImpl@\"spawned process \" + process.toString()" shape=ellipse]
52 [label="12:CtTypeAccessImpl@MSG_VERBOSE" shape=ellipse]
53 [label="12:CtInvocationImpl@project.log(\"spawned process \" + process.toString(), MSG_VERBOSE)" shape=ellipse]
54 [label="2:CtBlockImpl@\{
    final Process process = launch(project, getCommandline(), getEnvironment(), workingDirectory, useVMLauncher);
    if (Os.isFamily(\"windows\")) \{
        try \{
            Thread.sleep(1000);
        \} catch (InterruptedException e) \{
            project.log(\"interruption in the sleep after having spawned a process\", MSG_VERBOSE);
        \}
    \}
    project.log(\"spawned process \" + process.toString(), MSG_VERBOSE);
\}" shape=ellipse]
55 [label="2:CtMethodImpl@public void spawn() throws IOException \{
    final Process process = launch(project, getCommandline(), getEnvironment(), workingDirectory, useVMLauncher);
    if (Os.isFamily(\"windows\")) \{
        try \{
            Thread.sleep(1000);
        \} catch (InterruptedException e) \{
            project.log(\"interruption in the sleep after having spawned a process\", MSG_VERBOSE);
        \}
    \}
    project.log(\"spawned process \" + process.toString(), MSG_VERBOSE);
\}" shape=ellipse]
56 [label="3:Insert@INSERT" shape=ellipse]
57 [label="3:CtIfImpl@if ((workingDirectory != null) && (!workingDirectory.exists())) \{
    throw new BuildException(workingDirectory + \" doesn't exists.\");
\}" shape=ellipse]
6 -> 16 [label="Data Dep"];
9 -> 8 [label="AST"];
9 -> 7 [label="AST"];
12 -> 11 [label="AST"];
12 -> 10 [label="AST"];
13 -> 16 [label="Data Dep"];
14 -> 16 [label="Data Dep"];
15 -> 5 [label="AST"];
15 -> 4 [label="AST"];
15 -> 6 [label="AST"];
15 -> 9 [label="AST"];
15 -> 12 [label="AST"];
15 -> 13 [label="AST"];
15 -> 14 [label="AST"];
16 -> 49 [label="Define-Use"];
17 -> 16 [label="AST"];
17 -> 3 [label="AST"];
17 -> 15 [label="AST"];
22 -> 19 [label="AST"];
22 -> 20 [label="AST"];
22 -> 18 [label="AST"];
22 -> 21 [label="AST"];
22 -> 41 [label="Control Dep"];
22 -> 40 [label="Control Dep"];
22 -> 28 [label="Control Dep"];
22 -> 27 [label="Control Dep"];
22 -> 23 [label="Control Dep"];
22 -> 25 [label="Control Dep"];
22 -> 26 [label="Control Dep"];
22 -> 39 [label="Control Dep"];
22 -> 31 [label="Control Dep"];
27 -> 24 [label="AST"];
27 -> 25 [label="AST"];
27 -> 23 [label="AST"];
27 -> 26 [label="AST"];
28 -> 27 [label="AST"];
31 -> 29 [label="AST"];
31 -> 30 [label="AST"];
31 -> 38 [label="Control Dep"];
31 -> 37 [label="Control Dep"];
31 -> 32 [label="Control Dep"];
31 -> 34 [label="Control Dep"];
31 -> 35 [label="Control Dep"];
31 -> 36 [label="Control Dep"];
37 -> 33 [label="AST"];
37 -> 34 [label="AST"];
37 -> 32 [label="AST"];
37 -> 35 [label="AST"];
37 -> 36 [label="AST"];
38 -> 37 [label="AST"];
39 -> 31 [label="AST"];
39 -> 38 [label="AST"];
40 -> 28 [label="AST"];
40 -> 39 [label="AST"];
41 -> 40 [label="AST"];
42 -> 22 [label="AST"];
42 -> 41 [label="AST"];
50 -> 48 [label="AST"];
50 -> 49 [label="AST"];
50 -> 47 [label="AST"];
51 -> 46 [label="AST"];
51 -> 50 [label="AST"];
53 -> 44 [label="AST"];
53 -> 45 [label="AST"];
53 -> 43 [label="AST"];
53 -> 51 [label="AST"];
53 -> 52 [label="AST"];
54 -> 17 [label="AST"];
54 -> 42 [label="AST"];
54 -> 53 [label="AST"];
55 -> 1 [label="AST"];
55 -> 0 [label="AST"];
55 -> 2 [label="AST"];
55 -> 54 [label="AST"];
55 -> 56 [label="Action"];
56 -> 57 [label="Action"];
}