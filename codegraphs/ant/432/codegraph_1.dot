digraph "execute#?" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@execute" shape=ellipse]
2 [label="3:CtFieldReadImpl@file" shape=ellipse]
3 [label="3:CtLiteralImpl@null" shape=ellipse]
4 [label="3:CtBinaryOperatorImpl@file == null" shape=ellipse]
5 [label="4:CtTypeReferenceImpl@BuildException" shape=ellipse]
6 [label="4:CtLiteralImpl@\"import requires file attribute\"" shape=ellipse]
7 [label="4:CtConstructorCallImpl@new BuildException(\"import requires file attribute\")" shape=ellipse]
8 [label="4:CtThrowImpl@throw new BuildException(\"import requires file attribute\")" shape=ellipse]
9 [label="3:CtBlockImpl@\{
    throw new BuildException(\"import requires file attribute\");
\}" shape=ellipse]
10 [label="3:CtIfImpl@if (file == null) \{
    throw new BuildException(\"import requires file attribute\");
\}" shape=ellipse]
11 [label="6:CtExecutableReferenceImpl@getOwningTarget()" shape=ellipse]
12 [label="6:CtVirtualElement@getOwningTarget" shape=ellipse]
13 [label="6:CtInvocationImpl@getOwningTarget()" shape=ellipse]
14 [label="6:CtLiteralImpl@null" shape=ellipse]
15 [label="6:CtBinaryOperatorImpl@(getOwningTarget() == null)" shape=ellipse]
16 [label="6:CtExecutableReferenceImpl@equals(java.lang.Object)" shape=ellipse]
17 [label="6:CtVirtualElement@equals" shape=ellipse]
18 [label="6:CtLiteralImpl@\"\"" shape=ellipse]
19 [label="6:CtExecutableReferenceImpl@getName()" shape=ellipse]
20 [label="6:CtVirtualElement@getName" shape=ellipse]
21 [label="6:CtExecutableReferenceImpl@getOwningTarget()" shape=ellipse]
22 [label="6:CtVirtualElement@getOwningTarget" shape=ellipse]
23 [label="6:CtInvocationImpl@getOwningTarget()" shape=ellipse]
24 [label="6:CtInvocationImpl@getOwningTarget().getName()" shape=ellipse]
25 [label="6:CtInvocationImpl@\"\".equals(getOwningTarget().getName())" shape=ellipse]
26 [label="6:CtUnaryOperatorImpl@(!\"\".equals(getOwningTarget().getName()))" shape=ellipse]
27 [label="6:CtBinaryOperatorImpl@(getOwningTarget() == null) || (!\"\".equals(getOwningTarget().getName()))" shape=ellipse]
28 [label="7:CtTypeReferenceImpl@BuildException" shape=ellipse]
29 [label="7:CtLiteralImpl@\"import only allowed as a top-level task\"" shape=ellipse]
30 [label="7:CtConstructorCallImpl@new BuildException(\"import only allowed as a top-level task\")" shape=ellipse]
31 [label="7:CtThrowImpl@throw new BuildException(\"import only allowed as a top-level task\")" shape=ellipse]
32 [label="6:CtBlockImpl@\{
    throw new BuildException(\"import only allowed as a top-level task\");
\}" shape=ellipse]
33 [label="6:CtIfImpl@if ((getOwningTarget() == null) || (!\"\".equals(getOwningTarget().getName()))) \{
    throw new BuildException(\"import only allowed as a top-level task\");
\}" shape=ellipse]
34 [label="9:CtTypeReferenceImpl@ProjectHelper" shape=ellipse]
35 [label="9:CtExecutableReferenceImpl@getReference(java.lang.String)" shape=ellipse]
36 [label="9:CtVirtualElement@getReference" shape=ellipse]
37 [label="9:CtExecutableReferenceImpl@getProject()" shape=ellipse]
38 [label="9:CtVirtualElement@getProject" shape=ellipse]
39 [label="9:CtInvocationImpl@getProject()" shape=ellipse]
40 [label="9:CtLiteralImpl@\"ant.projectHelper\"" shape=ellipse]
41 [label="9:CtInvocationImpl@((ProjectHelper) (getProject().getReference(\"ant.projectHelper\")))" shape=ellipse]
42 [label="9:CtTypeReferenceImpl@ProjectHelper" shape=ellipse]
43 [label="9:CtVirtualElement@helper" shape=ellipse]
44 [label="9:CtLocalVariableImpl@ProjectHelper helper = ((ProjectHelper) (getProject().getReference(\"ant.projectHelper\")))" shape=ellipse]
45 [label="10:CtTypeReferenceImpl@Vector" shape=ellipse]
46 [label="10:CtExecutableReferenceImpl@getImportStack()" shape=ellipse]
47 [label="10:CtVirtualElement@getImportStack" shape=ellipse]
48 [label="10:CtVariableReadImpl@helper" shape=ellipse]
49 [label="10:CtInvocationImpl@helper.getImportStack()" shape=ellipse]
50 [label="10:CtVirtualElement@importStack" shape=ellipse]
51 [label="10:CtLocalVariableImpl@Vector importStack = helper.getImportStack()" shape=ellipse]
52 [label="11:CtExecutableReferenceImpl@size()" shape=ellipse]
53 [label="11:CtVirtualElement@size" shape=ellipse]
54 [label="11:CtVariableReadImpl@importStack" shape=ellipse]
55 [label="11:CtInvocationImpl@importStack.size()" shape=ellipse]
56 [label="11:CtLiteralImpl@0" shape=ellipse]
57 [label="11:CtBinaryOperatorImpl@importStack.size() == 0" shape=ellipse]
58 [label="12:CtTypeReferenceImpl@BuildException" shape=ellipse]
59 [label="12:CtLiteralImpl@\"import requires support in ProjectHelper\"" shape=ellipse]
60 [label="12:CtConstructorCallImpl@new BuildException(\"import requires support in ProjectHelper\")" shape=ellipse]
61 [label="12:CtThrowImpl@throw new BuildException(\"import requires support in ProjectHelper\")" shape=ellipse]
62 [label="11:CtBlockImpl@\{
    throw new BuildException(\"import requires support in ProjectHelper\");
\}" shape=ellipse]
63 [label="11:CtIfImpl@if (importStack.size() == 0) \{
    throw new BuildException(\"import requires support in ProjectHelper\");
\}" shape=ellipse]
64 [label="14:CtExecutableReferenceImpl@getLocation()" shape=ellipse]
65 [label="14:CtVirtualElement@getLocation" shape=ellipse]
66 [label="14:CtInvocationImpl@getLocation()" shape=ellipse]
67 [label="14:CtLiteralImpl@null" shape=ellipse]
68 [label="14:CtBinaryOperatorImpl@(getLocation() == null)" shape=ellipse]
69 [label="14:CtExecutableReferenceImpl@getFileName()" shape=ellipse]
70 [label="14:CtVirtualElement@getFileName" shape=ellipse]
71 [label="14:CtExecutableReferenceImpl@getLocation()" shape=ellipse]
72 [label="14:CtVirtualElement@getLocation" shape=ellipse]
73 [label="14:CtInvocationImpl@getLocation()" shape=ellipse]
74 [label="14:CtInvocationImpl@getLocation().getFileName()" shape=ellipse]
75 [label="14:CtLiteralImpl@null" shape=ellipse]
76 [label="14:CtBinaryOperatorImpl@(getLocation().getFileName() == null)" shape=ellipse]
77 [label="14:CtBinaryOperatorImpl@(getLocation() == null) || (getLocation().getFileName() == null)" shape=ellipse]
78 [label="15:CtTypeReferenceImpl@BuildException" shape=ellipse]
79 [label="15:CtLiteralImpl@\"Unable to get location of import task\"" shape=ellipse]
80 [label="15:CtConstructorCallImpl@new BuildException(\"Unable to get location of import task\")" shape=ellipse]
81 [label="15:CtThrowImpl@throw new BuildException(\"Unable to get location of import task\")" shape=ellipse]
82 [label="14:CtBlockImpl@\{
    throw new BuildException(\"Unable to get location of import task\");
\}" shape=ellipse]
83 [label="14:CtIfImpl@if ((getLocation() == null) || (getLocation().getFileName() == null)) \{
    throw new BuildException(\"Unable to get location of import task\");
\}" shape=ellipse]
84 [label="17:CtTypeReferenceImpl@File" shape=ellipse]
85 [label="17:CtTypeReferenceImpl@File" shape=ellipse]
86 [label="17:CtExecutableReferenceImpl@getFileName()" shape=ellipse]
87 [label="17:CtVirtualElement@getFileName" shape=ellipse]
88 [label="17:CtExecutableReferenceImpl@getLocation()" shape=ellipse]
89 [label="17:CtVirtualElement@getLocation" shape=ellipse]
90 [label="17:CtInvocationImpl@getLocation()" shape=ellipse]
91 [label="17:CtInvocationImpl@getLocation().getFileName()" shape=ellipse]
92 [label="17:CtConstructorCallImpl@new File(getLocation().getFileName())" shape=ellipse]
93 [label="17:CtVirtualElement@buildFile" shape=ellipse]
94 [label="17:CtLocalVariableImpl@File buildFile = new File(getLocation().getFileName())" shape=ellipse]
95 [label="18:CtVariableWriteImpl@buildFile" shape=ellipse]
96 [label="18:CtTypeReferenceImpl@File" shape=ellipse]
97 [label="18:CtExecutableReferenceImpl@getAbsolutePath()" shape=ellipse]
98 [label="18:CtVirtualElement@getAbsolutePath" shape=ellipse]
99 [label="18:CtVariableReadImpl@buildFile" shape=ellipse]
100 [label="18:CtInvocationImpl@buildFile.getAbsolutePath()" shape=ellipse]
101 [label="18:CtConstructorCallImpl@new File(buildFile.getAbsolutePath())" shape=ellipse]
102 [label="18:CtAssignmentImpl@buildFile = new File(buildFile.getAbsolutePath())" shape=ellipse]
103 [label="20:CtExecutableReferenceImpl@log()" shape=ellipse]
104 [label="19:CtVirtualElement@log" shape=ellipse]
105 [label="19:CtExecutableReferenceImpl@getProject()" shape=ellipse]
106 [label="19:CtVirtualElement@getProject" shape=ellipse]
107 [label="19:CtInvocationImpl@getProject()" shape=ellipse]
108 [label="20:CtLiteralImpl@\"Importing file \"" shape=ellipse]
109 [label="20:CtFieldReadImpl@file" shape=ellipse]
110 [label="20:CtBinaryOperatorImpl@(\"Importing file \" + file)" shape=ellipse]
111 [label="20:CtLiteralImpl@\" from \"" shape=ellipse]
112 [label="20:CtBinaryOperatorImpl@((\"Importing file \" + file) + \" from \")" shape=ellipse]
113 [label="20:CtExecutableReferenceImpl@getAbsolutePath()" shape=ellipse]
114 [label="20:CtVirtualElement@getAbsolutePath" shape=ellipse]
115 [label="20:CtVariableReadImpl@buildFile" shape=ellipse]
116 [label="20:CtInvocationImpl@buildFile.getAbsolutePath()" shape=ellipse]
117 [label="20:CtBinaryOperatorImpl@((\"Importing file \" + file) + \" from \") + buildFile.getAbsolutePath()" shape=ellipse]
118 [label="20:CtTypeAccessImpl@MSG_VERBOSE" shape=ellipse]
119 [label="19:CtInvocationImpl@getProject().log(((\"Importing file \" + file) + \" from \") + buildFile.getAbsolutePath(), MSG_VERBOSE)" shape=ellipse]
120 [label="21:CtTypeReferenceImpl@File" shape=ellipse]
121 [label="21:CtTypeReferenceImpl@File" shape=ellipse]
122 [label="21:CtExecutableReferenceImpl@getParent()" shape=ellipse]
123 [label="21:CtVirtualElement@getParent" shape=ellipse]
124 [label="21:CtVariableReadImpl@buildFile" shape=ellipse]
125 [label="21:CtInvocationImpl@buildFile.getParent()" shape=ellipse]
126 [label="21:CtConstructorCallImpl@new File(buildFile.getParent())" shape=ellipse]
127 [label="21:CtVirtualElement@buildFileParent" shape=ellipse]
128 [label="21:CtLocalVariableImpl@File buildFileParent = new File(buildFile.getParent())" shape=ellipse]
129 [label="22:CtTypeReferenceImpl@File" shape=ellipse]
130 [label="22:CtExecutableReferenceImpl@resolveFile(File)" shape=ellipse]
131 [label="22:CtVirtualElement@resolveFile" shape=ellipse]
132 [label="22:CtTypeAccessImpl@FILE_UTILS" shape=ellipse]
133 [label="22:CtVariableReadImpl@buildFileParent" shape=ellipse]
134 [label="22:CtFieldReadImpl@file" shape=ellipse]
135 [label="22:CtInvocationImpl@FILE_UTILS.resolveFile(buildFileParent, file)" shape=ellipse]
136 [label="22:CtVirtualElement@importedFile" shape=ellipse]
137 [label="22:CtLocalVariableImpl@File importedFile = FILE_UTILS.resolveFile(buildFileParent, file)" shape=ellipse]
138 [label="23:CtExecutableReferenceImpl@exists()" shape=ellipse]
139 [label="23:CtVirtualElement@exists" shape=ellipse]
140 [label="23:CtVariableReadImpl@importedFile" shape=ellipse]
141 [label="23:CtInvocationImpl@importedFile.exists()" shape=ellipse]
142 [label="23:CtUnaryOperatorImpl@!importedFile.exists()" shape=ellipse]
143 [label="24:CtTypeReferenceImpl@String" shape=ellipse]
144 [label="24:CtLiteralImpl@\"Cannot find \"" shape=ellipse]
145 [label="24:CtFieldReadImpl@file" shape=ellipse]
146 [label="24:CtBinaryOperatorImpl@(\"Cannot find \" + file)" shape=ellipse]
147 [label="24:CtLiteralImpl@\" imported from \"" shape=ellipse]
148 [label="24:CtBinaryOperatorImpl@((\"Cannot find \" + file) + \" imported from \")" shape=ellipse]
149 [label="24:CtExecutableReferenceImpl@getAbsolutePath()" shape=ellipse]
150 [label="24:CtVirtualElement@getAbsolutePath" shape=ellipse]
151 [label="24:CtVariableReadImpl@buildFile" shape=ellipse]
152 [label="24:CtInvocationImpl@buildFile.getAbsolutePath()" shape=ellipse]
153 [label="24:CtBinaryOperatorImpl@((\"Cannot find \" + file) + \" imported from \") + buildFile.getAbsolutePath()" shape=ellipse]
154 [label="24:CtVirtualElement@message" shape=ellipse]
155 [label="24:CtLocalVariableImpl@String message = ((\"Cannot find \" + file) + \" imported from \") + buildFile.getAbsolutePath()" shape=ellipse]
156 [label="25:CtFieldReadImpl@optional" shape=ellipse]
157 [label="26:CtExecutableReferenceImpl@log(java.lang.String)" shape=ellipse]
158 [label="26:CtVirtualElement@log" shape=ellipse]
159 [label="26:CtExecutableReferenceImpl@getProject()" shape=ellipse]
160 [label="26:CtVirtualElement@getProject" shape=ellipse]
161 [label="26:CtInvocationImpl@getProject()" shape=ellipse]
162 [label="26:CtVariableReadImpl@message" shape=ellipse]
163 [label="26:CtTypeAccessImpl@MSG_VERBOSE" shape=ellipse]
164 [label="26:CtInvocationImpl@getProject().log(message, MSG_VERBOSE)" shape=ellipse]
165 [label="27:CtReturnImpl@return" shape=ellipse]
166 [label="25:CtBlockImpl@\{
    getProject().log(message, MSG_VERBOSE);
    return;
\}" shape=ellipse]
167 [label="29:CtTypeReferenceImpl@BuildException" shape=ellipse]
168 [label="29:CtVariableReadImpl@message" shape=ellipse]
169 [label="29:CtConstructorCallImpl@new BuildException(message)" shape=ellipse]
170 [label="29:CtThrowImpl@throw new BuildException(message)" shape=ellipse]
171 [label="28:CtBlockImpl@\{
    throw new BuildException(message);
\}" shape=ellipse]
172 [label="25:CtIfImpl@if (optional) \{
    getProject().log(message, MSG_VERBOSE);
    return;
\} else \{
    throw new BuildException(message);
\}" shape=ellipse]
173 [label="23:CtBlockImpl@\{
    String message = ((\"Cannot find \" + file) + \" imported from \") + buildFile.getAbsolutePath();
    if (optional) \{
        getProject().log(message, MSG_VERBOSE);
        return;
    \} else \{
        throw new BuildException(message);
    \}
\}" shape=ellipse]
174 [label="23:CtIfImpl@if (!importedFile.exists()) \{
    String message = ((\"Cannot find \" + file) + \" imported from \") + buildFile.getAbsolutePath();
    if (optional) \{
        getProject().log(message, MSG_VERBOSE);
        return;
    \} else \{
        throw new BuildException(message);
    \}
\}" shape=ellipse]
175 [label="32:CtVariableWriteImpl@importedFile" shape=ellipse]
176 [label="32:CtTypeReferenceImpl@File" shape=ellipse]
177 [label="32:CtExecutableReferenceImpl@getPath(<unknown>)" shape=ellipse]
178 [label="32:CtVirtualElement@getPath" shape=ellipse]
179 [label="32:CtVariableReadImpl@importedFile" shape=ellipse]
180 [label="32:CtInvocationImpl@getPath(importedFile)" shape=ellipse]
181 [label="32:CtConstructorCallImpl@new File(getPath(importedFile))" shape=ellipse]
182 [label="32:CtAssignmentImpl@importedFile = new File(getPath(importedFile))" shape=ellipse]
183 [label="33:CtExecutableReferenceImpl@contains(File)" shape=ellipse]
184 [label="33:CtVirtualElement@contains" shape=ellipse]
185 [label="33:CtVariableReadImpl@importStack" shape=ellipse]
186 [label="33:CtVariableReadImpl@importedFile" shape=ellipse]
187 [label="33:CtInvocationImpl@importStack.contains(importedFile)" shape=ellipse]
188 [label="34:CtExecutableReferenceImpl@log()" shape=ellipse]
189 [label="34:CtVirtualElement@log" shape=ellipse]
190 [label="34:CtExecutableReferenceImpl@getProject()" shape=ellipse]
191 [label="34:CtVirtualElement@getProject" shape=ellipse]
192 [label="34:CtInvocationImpl@getProject()" shape=ellipse]
193 [label="34:CtLiteralImpl@\"Skipped already imported file:\n   \"" shape=ellipse]
194 [label="34:CtVariableReadImpl@importedFile" shape=ellipse]
195 [label="34:CtBinaryOperatorImpl@(\"Skipped already imported file:\n   \" + importedFile)" shape=ellipse]
196 [label="34:CtLiteralImpl@\"\n\"" shape=ellipse]
197 [label="34:CtBinaryOperatorImpl@(\"Skipped already imported file:\n   \" + importedFile) + \"\n\"" shape=ellipse]
198 [label="34:CtTypeAccessImpl@MSG_WARN" shape=ellipse]
199 [label="34:CtInvocationImpl@getProject().log((\"Skipped already imported file:\n   \" + importedFile) + \"\n\", MSG_WARN)" shape=ellipse]
200 [label="35:CtReturnImpl@return" shape=ellipse]
201 [label="33:CtBlockImpl@\{
    getProject().log((\"Skipped already imported file:\n   \" + importedFile) + \"\n\", MSG_WARN);
    return;
\}" shape=ellipse]
202 [label="33:CtIfImpl@if (importStack.contains(importedFile)) \{
    getProject().log((\"Skipped already imported file:\n   \" + importedFile) + \"\n\", MSG_WARN);
    return;
\}" shape=ellipse]
203 [label="38:CtExecutableReferenceImpl@parse(File)" shape=ellipse]
204 [label="38:CtVirtualElement@parse" shape=ellipse]
205 [label="38:CtVariableReadImpl@helper" shape=ellipse]
206 [label="38:CtExecutableReferenceImpl@getProject()" shape=ellipse]
207 [label="38:CtVirtualElement@getProject" shape=ellipse]
208 [label="38:CtInvocationImpl@getProject()" shape=ellipse]
209 [label="38:CtVariableReadImpl@importedFile" shape=ellipse]
210 [label="38:CtInvocationImpl@helper.parse(getProject(), importedFile)" shape=ellipse]
211 [label="37:CtBlockImpl@\{
    helper.parse(getProject(), importedFile);
\}" shape=ellipse]
212 [label="39:CtVirtualElement@ex" shape=ellipse]
213 [label="39:CtTypeReferenceImpl@BuildException" shape=ellipse]
214 [label="39:CtCatchVariableImpl@BuildException ex" shape=ellipse]
215 [label="40:CtExecutableReferenceImpl@addLocationToBuildException(BuildException)" shape=ellipse]
216 [label="40:CtVirtualElement@addLocationToBuildException" shape=ellipse]
217 [label="40:CtTypeAccessImpl@ProjectHelper" shape=ellipse]
218 [label="40:CtVariableReadImpl@ex" shape=ellipse]
219 [label="40:CtExecutableReferenceImpl@getLocation()" shape=ellipse]
220 [label="40:CtVirtualElement@getLocation" shape=ellipse]
221 [label="40:CtInvocationImpl@getLocation()" shape=ellipse]
222 [label="40:CtInvocationImpl@ProjectHelper.addLocationToBuildException(ex, getLocation())" shape=ellipse]
223 [label="40:CtThrowImpl@throw ProjectHelper.addLocationToBuildException(ex, getLocation())" shape=ellipse]
224 [label="39:CtBlockImpl@\{
    throw ProjectHelper.addLocationToBuildException(ex, getLocation());
\}" shape=ellipse]
225 [label="39:CtCatchImpl@ catch (BuildException ex) \{
    throw ProjectHelper.addLocationToBuildException(ex, getLocation());
\}" shape=ellipse]
226 [label="37:CtTryImpl@try \{
    helper.parse(getProject(), importedFile);
\} catch (BuildException ex) \{
    throw ProjectHelper.addLocationToBuildException(ex, getLocation());
\}" shape=ellipse]
227 [label="2:CtBlockImpl@\{
    if (file == null) \{
        throw new BuildException(\"import requires file attribute\");
    \}
    if ((getOwningTarget() == null) || (!\"\".equals(getOwningTarget().getName()))) \{
        throw new BuildException(\"import only allowed as a top-level task\");
    \}
    ProjectHelper helper = ((ProjectHelper) (getProject().getReference(\"ant.projectHelper\")));
    Vector importStack = helper.getImportStack();
    if (importStack.size() == 0) \{
        throw new BuildException(\"import requires support in ProjectHelper\");
    \}
    if ((getLocation() == null) || (getLocation().getFileName() == null)) \{
        throw new BuildException(\"Unable to get location of import task\");
    \}
    File buildFile = new File(getLocation().getFileName());
    buildFile = new File(buildFile.getAbsolutePath());
    getProject().log(((\"Importing file \" + file) + \" from \") + buildFile.getAbsolutePath(), MSG_VERBOSE);
    File buildFileParent = new File(buildFile.getParent());
    File importedFile = FILE_UTILS.resolveFile(buildFileParent, file);
    if (!importedFile.exists()) \{
        String message = ((\"Cannot find \" + file) + \" imported from \") + buildFile.getAbsolutePath();
        if (optional) \{
            getProject().log(message, MSG_VERBOSE);
            return;
        \} else \{
            throw new BuildException(message);
        \}
    \}
    importedFile = new File(getPath(importedFile));
    if (importStack.contains(importedFile)) \{
        getProject().log((\"Skipped already imported file:\n   \" + importedFile) + \"\n\", MSG_WARN);
        return;
    \}
    try \{
        helper.parse(getProject(), importedFile);
    \} catch (BuildException ex) \{
        throw ProjectHelper.addLocationToBuildException(ex, getLocation());
    \}
\}" shape=ellipse]
228 [label="2:CtMethodImpl@public void execute() \{
    if (file == null) \{
        throw new BuildException(\"import requires file attribute\");
    \}
    if ((getOwningTarget() == null) || (!\"\".equals(getOwningTarget().getName()))) \{
        throw new BuildException(\"import only allowed as a top-level task\");
    \}
    ProjectHelper helper = ((ProjectHelper) (getProject().getReference(\"ant.projectHelper\")));
    Vector importStack = helper.getImportStack();
    if (importStack.size() == 0) \{
        throw new BuildException(\"import requires support in ProjectHelper\");
    \}
    if ((getLocation() == null) || (getLocation().getFileName() == null)) \{
        throw new BuildException(\"Unable to get location of import task\");
    \}
    File buildFile = new File(getLocation().getFileName());
    buildFile = new File(buildFile.getAbsolutePath());
    getProject().log(((\"Importing file \" + file) + \" from \") + buildFile.getAbsolutePath(), MSG_VERBOSE);
    File buildFileParent = new File(buildFile.getParent());
    File importedFile = FILE_UTILS.resolveFile(buildFileParent, file);
    if (!importedFile.exists()) \{
        String message = ((\"Cannot find \" + file) + \" imported from \") + buildFile.getAbsolutePath();
        if (optional) \{
            getProject().log(message, MSG_VERBOSE);
            return;
        \} else \{
            throw new BuildException(message);
        \}
    \}
    importedFile = new File(getPath(importedFile));
    if (importStack.contains(importedFile)) \{
        getProject().log((\"Skipped already imported file:\n   \" + importedFile) + \"\n\", MSG_WARN);
        return;
    \}
    try \{
        helper.parse(getProject(), importedFile);
    \} catch (BuildException ex) \{
        throw ProjectHelper.addLocationToBuildException(ex, getLocation());
    \}
\}" shape=ellipse]
229 [label="34:Update@UPDATE" shape=ellipse]
230 [label="34:CtTypeAccessImpl@MSG_VERBOSE" shape=ellipse]
4 -> 2 [label="AST"];
4 -> 3 [label="AST"];
4 -> 9 [label="Control Dep"];
4 -> 8 [label="Control Dep"];
4 -> 7 [label="Control Dep"];
4 -> 6 [label="Control Dep"];
7 -> 6 [label="AST"];
8 -> 7 [label="AST"];
9 -> 8 [label="AST"];
10 -> 4 [label="AST"];
10 -> 9 [label="AST"];
13 -> 12 [label="AST"];
13 -> 11 [label="AST"];
15 -> 13 [label="AST"];
15 -> 14 [label="AST"];
23 -> 22 [label="AST"];
23 -> 21 [label="AST"];
24 -> 20 [label="AST"];
24 -> 23 [label="AST"];
24 -> 19 [label="AST"];
25 -> 17 [label="AST"];
25 -> 18 [label="AST"];
25 -> 16 [label="AST"];
25 -> 24 [label="AST"];
26 -> 25 [label="AST"];
27 -> 15 [label="AST"];
27 -> 26 [label="AST"];
27 -> 32 [label="Control Dep"];
27 -> 31 [label="Control Dep"];
27 -> 30 [label="Control Dep"];
27 -> 29 [label="Control Dep"];
30 -> 29 [label="AST"];
31 -> 30 [label="AST"];
32 -> 31 [label="AST"];
33 -> 27 [label="AST"];
33 -> 32 [label="AST"];
39 -> 38 [label="AST"];
39 -> 37 [label="AST"];
41 -> 36 [label="AST"];
41 -> 42 [label="AST"];
41 -> 39 [label="AST"];
41 -> 35 [label="AST"];
41 -> 40 [label="AST"];
43 -> 48 [label="Define-Use"];
43 -> 205 [label="Define-Use"];
44 -> 43 [label="AST"];
44 -> 34 [label="AST"];
44 -> 41 [label="AST"];
48 -> 50 [label="Data Dep"];
49 -> 47 [label="AST"];
49 -> 48 [label="AST"];
49 -> 46 [label="AST"];
50 -> 54 [label="Define-Use"];
50 -> 185 [label="Define-Use"];
51 -> 50 [label="AST"];
51 -> 45 [label="AST"];
51 -> 49 [label="AST"];
55 -> 53 [label="AST"];
55 -> 54 [label="AST"];
55 -> 52 [label="AST"];
57 -> 55 [label="AST"];
57 -> 56 [label="AST"];
57 -> 62 [label="Control Dep"];
57 -> 61 [label="Control Dep"];
57 -> 60 [label="Control Dep"];
57 -> 59 [label="Control Dep"];
60 -> 59 [label="AST"];
61 -> 60 [label="AST"];
62 -> 61 [label="AST"];
63 -> 57 [label="AST"];
63 -> 62 [label="AST"];
66 -> 65 [label="AST"];
66 -> 64 [label="AST"];
68 -> 66 [label="AST"];
68 -> 67 [label="AST"];
73 -> 72 [label="AST"];
73 -> 71 [label="AST"];
74 -> 70 [label="AST"];
74 -> 73 [label="AST"];
74 -> 69 [label="AST"];
76 -> 74 [label="AST"];
76 -> 75 [label="AST"];
77 -> 68 [label="AST"];
77 -> 76 [label="AST"];
77 -> 82 [label="Control Dep"];
77 -> 81 [label="Control Dep"];
77 -> 80 [label="Control Dep"];
77 -> 79 [label="Control Dep"];
80 -> 79 [label="AST"];
81 -> 80 [label="AST"];
82 -> 81 [label="AST"];
83 -> 77 [label="AST"];
83 -> 82 [label="AST"];
90 -> 89 [label="AST"];
90 -> 88 [label="AST"];
91 -> 87 [label="AST"];
91 -> 90 [label="AST"];
91 -> 86 [label="AST"];
92 -> 91 [label="AST"];
94 -> 93 [label="AST"];
94 -> 84 [label="AST"];
94 -> 92 [label="AST"];
95 -> 115 [label="Define-Use"];
95 -> 124 [label="Define-Use"];
95 -> 151 [label="Define-Use"];
99 -> 95 [label="Data Dep"];
100 -> 98 [label="AST"];
100 -> 99 [label="AST"];
100 -> 97 [label="AST"];
101 -> 100 [label="AST"];
102 -> 95 [label="AST"];
102 -> 101 [label="AST"];
107 -> 106 [label="AST"];
107 -> 105 [label="AST"];
110 -> 108 [label="AST"];
110 -> 109 [label="AST"];
112 -> 110 [label="AST"];
112 -> 111 [label="AST"];
116 -> 114 [label="AST"];
116 -> 115 [label="AST"];
116 -> 113 [label="AST"];
117 -> 112 [label="AST"];
117 -> 116 [label="AST"];
119 -> 104 [label="AST"];
119 -> 107 [label="AST"];
119 -> 103 [label="AST"];
119 -> 117 [label="AST"];
119 -> 118 [label="AST"];
124 -> 127 [label="Data Dep"];
125 -> 123 [label="AST"];
125 -> 124 [label="AST"];
125 -> 122 [label="AST"];
126 -> 125 [label="AST"];
127 -> 133 [label="Define-Use"];
128 -> 127 [label="AST"];
128 -> 120 [label="AST"];
128 -> 126 [label="AST"];
133 -> 136 [label="Data Dep"];
134 -> 136 [label="Data Dep"];
135 -> 131 [label="AST"];
135 -> 132 [label="AST"];
135 -> 130 [label="AST"];
135 -> 133 [label="AST"];
135 -> 134 [label="AST"];
136 -> 140 [label="Define-Use"];
137 -> 136 [label="AST"];
137 -> 129 [label="AST"];
137 -> 135 [label="AST"];
141 -> 139 [label="AST"];
141 -> 140 [label="AST"];
141 -> 138 [label="AST"];
142 -> 141 [label="AST"];
142 -> 173 [label="Control Dep"];
142 -> 155 [label="Control Dep"];
142 -> 153 [label="Control Dep"];
142 -> 148 [label="Control Dep"];
142 -> 146 [label="Control Dep"];
142 -> 144 [label="Control Dep"];
142 -> 145 [label="Control Dep"];
142 -> 147 [label="Control Dep"];
142 -> 152 [label="Control Dep"];
142 -> 149 [label="Control Dep"];
142 -> 151 [label="Control Dep"];
142 -> 172 [label="Control Dep"];
142 -> 156 [label="Control Dep"];
145 -> 154 [label="Data Dep"];
146 -> 144 [label="AST"];
146 -> 145 [label="AST"];
148 -> 146 [label="AST"];
148 -> 147 [label="AST"];
151 -> 154 [label="Data Dep"];
152 -> 150 [label="AST"];
152 -> 151 [label="AST"];
152 -> 149 [label="AST"];
153 -> 148 [label="AST"];
153 -> 152 [label="AST"];
154 -> 162 [label="Define-Use"];
154 -> 168 [label="Define-Use"];
155 -> 154 [label="AST"];
155 -> 143 [label="AST"];
155 -> 153 [label="AST"];
156 -> 166 [label="Control Dep"];
156 -> 164 [label="Control Dep"];
156 -> 157 [label="Control Dep"];
156 -> 161 [label="Control Dep"];
156 -> 159 [label="Control Dep"];
156 -> 162 [label="Control Dep"];
156 -> 163 [label="Control Dep"];
156 -> 165 [label="Control Dep"];
156 -> 171 [label="Control Dep"];
156 -> 170 [label="Control Dep"];
156 -> 169 [label="Control Dep"];
156 -> 168 [label="Control Dep"];
161 -> 160 [label="AST"];
161 -> 159 [label="AST"];
164 -> 158 [label="AST"];
164 -> 161 [label="AST"];
164 -> 157 [label="AST"];
164 -> 162 [label="AST"];
164 -> 163 [label="AST"];
166 -> 164 [label="AST"];
166 -> 165 [label="AST"];
169 -> 168 [label="AST"];
170 -> 169 [label="AST"];
171 -> 170 [label="AST"];
172 -> 156 [label="AST"];
172 -> 166 [label="AST"];
172 -> 171 [label="AST"];
173 -> 155 [label="AST"];
173 -> 172 [label="AST"];
174 -> 142 [label="AST"];
174 -> 173 [label="AST"];
175 -> 186 [label="Define-Use"];
175 -> 194 [label="Define-Use"];
175 -> 209 [label="Define-Use"];
179 -> 175 [label="Data Dep"];
180 -> 178 [label="AST"];
180 -> 177 [label="AST"];
180 -> 179 [label="AST"];
181 -> 180 [label="AST"];
182 -> 175 [label="AST"];
182 -> 181 [label="AST"];
187 -> 184 [label="AST"];
187 -> 185 [label="AST"];
187 -> 183 [label="AST"];
187 -> 186 [label="AST"];
187 -> 201 [label="Control Dep"];
187 -> 199 [label="Control Dep"];
187 -> 188 [label="Control Dep"];
187 -> 192 [label="Control Dep"];
187 -> 190 [label="Control Dep"];
187 -> 197 [label="Control Dep"];
187 -> 195 [label="Control Dep"];
187 -> 193 [label="Control Dep"];
187 -> 194 [label="Control Dep"];
187 -> 196 [label="Control Dep"];
187 -> 198 [label="Control Dep"];
187 -> 200 [label="Control Dep"];
192 -> 191 [label="AST"];
192 -> 190 [label="AST"];
195 -> 193 [label="AST"];
195 -> 194 [label="AST"];
197 -> 195 [label="AST"];
197 -> 196 [label="AST"];
198 -> 229 [label="Action"];
199 -> 189 [label="AST"];
199 -> 192 [label="AST"];
199 -> 188 [label="AST"];
199 -> 197 [label="AST"];
199 -> 198 [label="AST"];
201 -> 199 [label="AST"];
201 -> 200 [label="AST"];
202 -> 187 [label="AST"];
202 -> 201 [label="AST"];
208 -> 207 [label="AST"];
208 -> 206 [label="AST"];
210 -> 204 [label="AST"];
210 -> 205 [label="AST"];
210 -> 203 [label="AST"];
210 -> 208 [label="AST"];
210 -> 209 [label="AST"];
211 -> 210 [label="AST"];
212 -> 218 [label="Define-Use"];
214 -> 212 [label="AST"];
214 -> 213 [label="AST"];
214 -> 224 [label="Control Dep"];
214 -> 223 [label="Control Dep"];
214 -> 222 [label="Control Dep"];
214 -> 215 [label="Control Dep"];
214 -> 217 [label="Control Dep"];
214 -> 218 [label="Control Dep"];
214 -> 221 [label="Control Dep"];
214 -> 219 [label="Control Dep"];
221 -> 220 [label="AST"];
221 -> 219 [label="AST"];
222 -> 216 [label="AST"];
222 -> 217 [label="AST"];
222 -> 215 [label="AST"];
222 -> 218 [label="AST"];
222 -> 221 [label="AST"];
223 -> 222 [label="AST"];
224 -> 223 [label="AST"];
225 -> 214 [label="AST"];
225 -> 224 [label="AST"];
226 -> 211 [label="AST"];
226 -> 225 [label="AST"];
227 -> 10 [label="AST"];
227 -> 33 [label="AST"];
227 -> 44 [label="AST"];
227 -> 51 [label="AST"];
227 -> 63 [label="AST"];
227 -> 83 [label="AST"];
227 -> 94 [label="AST"];
227 -> 102 [label="AST"];
227 -> 119 [label="AST"];
227 -> 128 [label="AST"];
227 -> 137 [label="AST"];
227 -> 174 [label="AST"];
227 -> 182 [label="AST"];
227 -> 202 [label="AST"];
227 -> 226 [label="AST"];
228 -> 1 [label="AST"];
228 -> 0 [label="AST"];
228 -> 227 [label="AST"];
229 -> 230 [label="Action"];
}