digraph "read#?" {
0 [label="2:CtTypeReferenceImpl@int" shape=ellipse]
1 [label="2:CtVirtualElement@read" shape=ellipse]
2 [label="2:CtTypeReferenceImpl@IOException" shape=ellipse]
3 [label="3:CtTypeReferenceImpl@int" shape=ellipse]
4 [label="3:CtLiteralImpl@1" shape=ellipse]
5 [label="3:CtUnaryOperatorImpl@-1" shape=ellipse]
6 [label="3:CtVirtualElement@ch" shape=ellipse]
7 [label="3:CtLocalVariableImpl@int ch = -1" shape=ellipse]
8 [label="4:CtFieldReadImpl@queuedData" shape=ellipse]
9 [label="4:CtLiteralImpl@null" shape=ellipse]
10 [label="4:CtBinaryOperatorImpl@(queuedData != null)" shape=ellipse]
11 [label="4:CtExecutableReferenceImpl@length()" shape=ellipse]
12 [label="4:CtVirtualElement@length" shape=ellipse]
13 [label="4:CtFieldReadImpl@queuedData" shape=ellipse]
14 [label="4:CtInvocationImpl@queuedData.length()" shape=ellipse]
15 [label="4:CtLiteralImpl@0" shape=ellipse]
16 [label="4:CtBinaryOperatorImpl@(queuedData.length() == 0)" shape=ellipse]
17 [label="4:CtBinaryOperatorImpl@(queuedData != null) && (queuedData.length() == 0)" shape=ellipse]
18 [label="5:CtFieldWriteImpl@queuedData" shape=ellipse]
19 [label="5:CtLiteralImpl@null" shape=ellipse]
20 [label="5:CtAssignmentImpl@queuedData = null" shape=ellipse]
21 [label="4:CtBlockImpl@\{
    queuedData = null;
\}" shape=ellipse]
22 [label="4:CtIfImpl@if ((queuedData != null) && (queuedData.length() == 0)) \{
    queuedData = null;
\}" shape=ellipse]
23 [label="7:CtFieldReadImpl@queuedData" shape=ellipse]
24 [label="7:CtLiteralImpl@null" shape=ellipse]
25 [label="7:CtBinaryOperatorImpl@queuedData != null" shape=ellipse]
26 [label="8:CtVariableWriteImpl@ch" shape=ellipse]
27 [label="8:CtExecutableReferenceImpl@charAt(int)" shape=ellipse]
28 [label="8:CtVirtualElement@charAt" shape=ellipse]
29 [label="8:CtFieldReadImpl@queuedData" shape=ellipse]
30 [label="8:CtLiteralImpl@0" shape=ellipse]
31 [label="8:CtInvocationImpl@queuedData.charAt(0)" shape=ellipse]
32 [label="8:CtAssignmentImpl@ch = queuedData.charAt(0)" shape=ellipse]
33 [label="9:CtFieldWriteImpl@queuedData" shape=ellipse]
34 [label="9:CtExecutableReferenceImpl@substring(int)" shape=ellipse]
35 [label="9:CtVirtualElement@substring" shape=ellipse]
36 [label="9:CtFieldReadImpl@queuedData" shape=ellipse]
37 [label="9:CtLiteralImpl@1" shape=ellipse]
38 [label="9:CtInvocationImpl@queuedData.substring(1)" shape=ellipse]
39 [label="9:CtAssignmentImpl@queuedData = queuedData.substring(1)" shape=ellipse]
40 [label="10:CtExecutableReferenceImpl@length()" shape=ellipse]
41 [label="10:CtVirtualElement@length" shape=ellipse]
42 [label="10:CtFieldReadImpl@queuedData" shape=ellipse]
43 [label="10:CtInvocationImpl@queuedData.length()" shape=ellipse]
44 [label="10:CtLiteralImpl@0" shape=ellipse]
45 [label="10:CtBinaryOperatorImpl@queuedData.length() == 0" shape=ellipse]
46 [label="11:CtFieldWriteImpl@queuedData" shape=ellipse]
47 [label="11:CtLiteralImpl@null" shape=ellipse]
48 [label="11:CtAssignmentImpl@queuedData = null" shape=ellipse]
49 [label="10:CtBlockImpl@\{
    queuedData = null;
\}" shape=ellipse]
50 [label="10:CtIfImpl@if (queuedData.length() == 0) \{
    queuedData = null;
\}" shape=ellipse]
51 [label="7:CtBlockImpl@\{
    ch = queuedData.charAt(0);
    queuedData = queuedData.substring(1);
    if (queuedData.length() == 0) \{
        queuedData = null;
    \}
\}" shape=ellipse]
52 [label="14:CtTypeReferenceImpl@String" shape=ellipse]
53 [label="14:CtExecutableReferenceImpl@readFully()" shape=ellipse]
54 [label="14:CtVirtualElement@readFully" shape=ellipse]
55 [label="14:CtInvocationImpl@readFully()" shape=ellipse]
56 [label="14:CtVirtualElement@clazz" shape=ellipse]
57 [label="14:CtLocalVariableImpl@final String clazz = readFully()" shape=ellipse]
58 [label="15:CtVariableReadImpl@clazz" shape=ellipse]
59 [label="15:CtLiteralImpl@null" shape=ellipse]
60 [label="15:CtBinaryOperatorImpl@(clazz == null)" shape=ellipse]
61 [label="15:CtExecutableReferenceImpl@length()" shape=ellipse]
62 [label="15:CtVirtualElement@length" shape=ellipse]
63 [label="15:CtVariableReadImpl@clazz" shape=ellipse]
64 [label="15:CtInvocationImpl@clazz.length()" shape=ellipse]
65 [label="15:CtLiteralImpl@0" shape=ellipse]
66 [label="15:CtBinaryOperatorImpl@(clazz.length() == 0)" shape=ellipse]
67 [label="15:CtBinaryOperatorImpl@(clazz == null) || (clazz.length() == 0)" shape=ellipse]
68 [label="16:CtVariableWriteImpl@ch" shape=ellipse]
69 [label="16:CtLiteralImpl@1" shape=ellipse]
70 [label="16:CtUnaryOperatorImpl@-1" shape=ellipse]
71 [label="16:CtAssignmentImpl@ch = -1" shape=ellipse]
72 [label="15:CtBlockImpl@\{
    ch = -1;
\}" shape=ellipse]
73 [label="18:CtVirtualElement@byte[]" shape=ellipse]
74 [label="18:CtArrayTypeReferenceImpl@byte[]" shape=ellipse]
75 [label="18:CtExecutableReferenceImpl@getBytes(java.lang.String)" shape=ellipse]
76 [label="18:CtVirtualElement@getBytes" shape=ellipse]
77 [label="18:CtVariableReadImpl@clazz" shape=ellipse]
78 [label="18:CtLiteralImpl@\"ISO-8859-1\"" shape=ellipse]
79 [label="18:CtInvocationImpl@clazz.getBytes(\"ISO-8859-1\")" shape=ellipse]
80 [label="18:CtVirtualElement@bytes" shape=ellipse]
81 [label="18:CtLocalVariableImpl@final byte[] bytes = clazz.getBytes(\"ISO-8859-1\")" shape=ellipse]
82 [label="20:CtTypeReferenceImpl@Class" shape=ellipse]
83 [label="20:CtExecutableReferenceImpl@forName(java.lang.String)" shape=ellipse]
84 [label="20:CtVirtualElement@forName" shape=ellipse]
85 [label="20:CtTypeAccessImpl@Class" shape=ellipse]
86 [label="20:CtTypeAccessImpl@JAVA_CLASS_HELPER" shape=ellipse]
87 [label="20:CtInvocationImpl@Class.forName(JAVA_CLASS_HELPER)" shape=ellipse]
88 [label="20:CtVirtualElement@javaClassHelper" shape=ellipse]
89 [label="20:CtLocalVariableImpl@final Class javaClassHelper = Class.forName(JAVA_CLASS_HELPER)" shape=ellipse]
90 [label="21:CtVariableReadImpl@javaClassHelper" shape=ellipse]
91 [label="21:CtLiteralImpl@null" shape=ellipse]
92 [label="21:CtBinaryOperatorImpl@javaClassHelper != null" shape=ellipse]
93 [label="22:CtVirtualElement@Class[]" shape=ellipse]
94 [label="22:CtArrayTypeReferenceImpl@Class[]" shape=ellipse]
95 [label="22:CtNewArrayImpl@new Class[]\{ byte[].class \}" shape=ellipse]
96 [label="22:CtFieldReadImpl@byte[].class" shape=ellipse]
97 [label="22:CtVirtualElement@params" shape=ellipse]
98 [label="22:CtLocalVariableImpl@final Class[] params = new Class[]\{ byte[].class \}" shape=ellipse]
99 [label="23:CtTypeReferenceImpl@Method" shape=ellipse]
100 [label="23:CtExecutableReferenceImpl@getMethod(java.lang.String,java.lang.Class[])" shape=ellipse]
101 [label="23:CtVirtualElement@getMethod" shape=ellipse]
102 [label="23:CtVariableReadImpl@javaClassHelper" shape=ellipse]
103 [label="23:CtLiteralImpl@\"getConstants\"" shape=ellipse]
104 [label="23:CtVariableReadImpl@params" shape=ellipse]
105 [label="23:CtInvocationImpl@javaClassHelper.getMethod(\"getConstants\", params)" shape=ellipse]
106 [label="23:CtVirtualElement@getConstants" shape=ellipse]
107 [label="23:CtLocalVariableImpl@final Method getConstants = javaClassHelper.getMethod(\"getConstants\", params)" shape=ellipse]
108 [label="24:CtVirtualElement@Object[]" shape=ellipse]
109 [label="24:CtArrayTypeReferenceImpl@Object[]" shape=ellipse]
110 [label="24:CtNewArrayImpl@new Object[]\{ bytes \}" shape=ellipse]
111 [label="24:CtVariableReadImpl@bytes" shape=ellipse]
112 [label="24:CtVirtualElement@args" shape=ellipse]
113 [label="24:CtLocalVariableImpl@final Object[] args = new Object[]\{ bytes \}" shape=ellipse]
114 [label="25:CtTypeReferenceImpl@StringBuffer" shape=ellipse]
115 [label="25:CtExecutableReferenceImpl@invoke(<unknown>,java.lang.Object[])" shape=ellipse]
116 [label="25:CtVirtualElement@invoke" shape=ellipse]
117 [label="25:CtVariableReadImpl@getConstants" shape=ellipse]
118 [label="25:CtLiteralImpl@null" shape=ellipse]
119 [label="25:CtVariableReadImpl@args" shape=ellipse]
120 [label="25:CtInvocationImpl@((StringBuffer) (getConstants.invoke(null, args)))" shape=ellipse]
121 [label="25:CtTypeReferenceImpl@StringBuffer" shape=ellipse]
122 [label="25:CtVirtualElement@sb" shape=ellipse]
123 [label="25:CtLocalVariableImpl@final StringBuffer sb = ((StringBuffer) (getConstants.invoke(null, args)))" shape=ellipse]
124 [label="26:CtExecutableReferenceImpl@length()" shape=ellipse]
125 [label="26:CtVirtualElement@length" shape=ellipse]
126 [label="26:CtVariableReadImpl@sb" shape=ellipse]
127 [label="26:CtInvocationImpl@sb.length()" shape=ellipse]
128 [label="26:CtLiteralImpl@0" shape=ellipse]
129 [label="26:CtBinaryOperatorImpl@sb.length() > 0" shape=ellipse]
130 [label="27:CtFieldWriteImpl@queuedData" shape=ellipse]
131 [label="27:CtExecutableReferenceImpl@toString()" shape=ellipse]
132 [label="27:CtVirtualElement@toString" shape=ellipse]
133 [label="27:CtVariableReadImpl@sb" shape=ellipse]
134 [label="27:CtInvocationImpl@sb.toString()" shape=ellipse]
135 [label="27:CtAssignmentImpl@queuedData = sb.toString()" shape=ellipse]
136 [label="28:CtExecutableReferenceImpl@read()" shape=ellipse]
137 [label="28:CtVirtualElement@read" shape=ellipse]
138 [label="28:CtInvocationImpl@read()" shape=ellipse]
139 [label="28:CtReturnImpl@return read()" shape=ellipse]
140 [label="26:CtBlockImpl@\{
    queuedData = sb.toString();
    return read();
\}" shape=ellipse]
141 [label="26:CtIfImpl@if (sb.length() > 0) \{
    queuedData = sb.toString();
    return read();
\}" shape=ellipse]
142 [label="21:CtBlockImpl@\{
    final Class[] params = new Class[]\{ byte[].class \};
    final Method getConstants = javaClassHelper.getMethod(\"getConstants\", params);
    final Object[] args = new Object[]\{ bytes \};
    final StringBuffer sb = ((StringBuffer) (getConstants.invoke(null, args)));
    if (sb.length() > 0) \{
        queuedData = sb.toString();
        return read();
    \}
\}" shape=ellipse]
143 [label="21:CtIfImpl@if (javaClassHelper != null) \{
    final Class[] params = new Class[]\{ byte[].class \};
    final Method getConstants = javaClassHelper.getMethod(\"getConstants\", params);
    final Object[] args = new Object[]\{ bytes \};
    final StringBuffer sb = ((StringBuffer) (getConstants.invoke(null, args)));
    if (sb.length() > 0) \{
        queuedData = sb.toString();
        return read();
    \}
\}" shape=ellipse]
144 [label="19:CtBlockImpl@\{
    final Class javaClassHelper = Class.forName(JAVA_CLASS_HELPER);
    if (javaClassHelper != null) \{
        final Class[] params = new Class[]\{ byte[].class \};
        final Method getConstants = javaClassHelper.getMethod(\"getConstants\", params);
        final Object[] args = new Object[]\{ bytes \};
        final StringBuffer sb = ((StringBuffer) (getConstants.invoke(null, args)));
        if (sb.length() > 0) \{
            queuedData = sb.toString();
            return read();
        \}
    \}
\}" shape=ellipse]
145 [label="31:CtVirtualElement@ex" shape=ellipse]
146 [label="31:CtTypeReferenceImpl@NoClassDefFoundError" shape=ellipse]
147 [label="31:CtCatchVariableImpl@NoClassDefFoundError ex" shape=ellipse]
148 [label="32:CtVariableReadImpl@ex" shape=ellipse]
149 [label="32:CtThrowImpl@throw ex" shape=ellipse]
150 [label="31:CtBlockImpl@\{
    throw ex;
\}" shape=ellipse]
151 [label="31:CtCatchImpl@ catch (NoClassDefFoundError ex) \{
    throw ex;
\}" shape=ellipse]
152 [label="33:CtVirtualElement@ex" shape=ellipse]
153 [label="33:CtTypeReferenceImpl@RuntimeException" shape=ellipse]
154 [label="33:CtCatchVariableImpl@RuntimeException ex" shape=ellipse]
155 [label="34:CtVariableReadImpl@ex" shape=ellipse]
156 [label="34:CtThrowImpl@throw ex" shape=ellipse]
157 [label="33:CtBlockImpl@\{
    throw ex;
\}" shape=ellipse]
158 [label="33:CtCatchImpl@ catch (RuntimeException ex) \{
    throw ex;
\}" shape=ellipse]
159 [label="35:CtVirtualElement@ex" shape=ellipse]
160 [label="35:CtTypeReferenceImpl@InvocationTargetException" shape=ellipse]
161 [label="35:CtCatchVariableImpl@InvocationTargetException ex" shape=ellipse]
162 [label="36:CtTypeReferenceImpl@Throwable" shape=ellipse]
163 [label="36:CtExecutableReferenceImpl@getTargetException()" shape=ellipse]
164 [label="36:CtVirtualElement@getTargetException" shape=ellipse]
165 [label="36:CtVariableReadImpl@ex" shape=ellipse]
166 [label="36:CtInvocationImpl@ex.getTargetException()" shape=ellipse]
167 [label="36:CtVirtualElement@t" shape=ellipse]
168 [label="36:CtLocalVariableImpl@Throwable t = ex.getTargetException()" shape=ellipse]
169 [label="37:CtVariableReadImpl@t" shape=ellipse]
170 [label="37:CtTypeAccessImpl@NoClassDefFoundError" shape=ellipse]
171 [label="37:CtTypeReferenceImpl@NoClassDefFoundError" shape=ellipse]
172 [label="37:CtBinaryOperatorImpl@t instanceof NoClassDefFoundError" shape=ellipse]
173 [label="38:CtVariableReadImpl@((NoClassDefFoundError) (t))" shape=ellipse]
174 [label="38:CtTypeReferenceImpl@NoClassDefFoundError" shape=ellipse]
175 [label="38:CtThrowImpl@throw ((NoClassDefFoundError) (t))" shape=ellipse]
176 [label="37:CtBlockImpl@\{
    throw ((NoClassDefFoundError) (t));
\}" shape=ellipse]
177 [label="37:CtIfImpl@if (t instanceof NoClassDefFoundError) \{
    throw ((NoClassDefFoundError) (t));
\}" shape=ellipse]
178 [label="40:CtVariableReadImpl@t" shape=ellipse]
179 [label="40:CtTypeAccessImpl@RuntimeException" shape=ellipse]
180 [label="40:CtTypeReferenceImpl@RuntimeException" shape=ellipse]
181 [label="40:CtBinaryOperatorImpl@t instanceof RuntimeException" shape=ellipse]
182 [label="41:CtVariableReadImpl@((RuntimeException) (t))" shape=ellipse]
183 [label="41:CtTypeReferenceImpl@RuntimeException" shape=ellipse]
184 [label="41:CtThrowImpl@throw ((RuntimeException) (t))" shape=ellipse]
185 [label="40:CtBlockImpl@\{
    throw ((RuntimeException) (t));
\}" shape=ellipse]
186 [label="40:CtIfImpl@if (t instanceof RuntimeException) \{
    throw ((RuntimeException) (t));
\}" shape=ellipse]
187 [label="43:CtTypeReferenceImpl@BuildException" shape=ellipse]
188 [label="43:CtVariableReadImpl@t" shape=ellipse]
189 [label="43:CtConstructorCallImpl@new BuildException(t)" shape=ellipse]
190 [label="43:CtThrowImpl@throw new BuildException(t)" shape=ellipse]
191 [label="35:CtBlockImpl@\{
    Throwable t = ex.getTargetException();
    if (t instanceof NoClassDefFoundError) \{
        throw ((NoClassDefFoundError) (t));
    \}
    if (t instanceof RuntimeException) \{
        throw ((RuntimeException) (t));
    \}
    throw new BuildException(t);
\}" shape=ellipse]
192 [label="35:CtCatchImpl@ catch (InvocationTargetException ex) \{
    Throwable t = ex.getTargetException();
    if (t instanceof NoClassDefFoundError) \{
        throw ((NoClassDefFoundError) (t));
    \}
    if (t instanceof RuntimeException) \{
        throw ((RuntimeException) (t));
    \}
    throw new BuildException(t);
\}" shape=ellipse]
193 [label="44:CtVirtualElement@ex" shape=ellipse]
194 [label="44:CtTypeReferenceImpl@Exception" shape=ellipse]
195 [label="44:CtCatchVariableImpl@Exception ex" shape=ellipse]
196 [label="45:CtTypeReferenceImpl@BuildException" shape=ellipse]
197 [label="45:CtVariableReadImpl@ex" shape=ellipse]
198 [label="45:CtConstructorCallImpl@new BuildException(ex)" shape=ellipse]
199 [label="45:CtThrowImpl@throw new BuildException(ex)" shape=ellipse]
200 [label="44:CtBlockImpl@\{
    throw new BuildException(ex);
\}" shape=ellipse]
201 [label="44:CtCatchImpl@ catch (Exception ex) \{
    throw new BuildException(ex);
\}" shape=ellipse]
202 [label="19:CtTryImpl@try \{
    final Class javaClassHelper = Class.forName(JAVA_CLASS_HELPER);
    if (javaClassHelper != null) \{
        final Class[] params = new Class[]\{ byte[].class \};
        final Method getConstants = javaClassHelper.getMethod(\"getConstants\", params);
        final Object[] args = new Object[]\{ bytes \};
        final StringBuffer sb = ((StringBuffer) (getConstants.invoke(null, args)));
        if (sb.length() > 0) \{
            queuedData = sb.toString();
            return read();
        \}
    \}
\} catch (NoClassDefFoundError ex) \{
    throw ex;
\} catch (RuntimeException ex) \{
    throw ex;
\} catch (InvocationTargetException ex) \{
    Throwable t = ex.getTargetException();
    if (t instanceof NoClassDefFoundError) \{
        throw ((NoClassDefFoundError) (t));
    \}
    if (t instanceof RuntimeException) \{
        throw ((RuntimeException) (t));
    \}
    throw new BuildException(t);
\} catch (Exception ex) \{
    throw new BuildException(ex);
\}" shape=ellipse]
203 [label="17:CtBlockImpl@\{
    final byte[] bytes = clazz.getBytes(\"ISO-8859-1\");
    try \{
        final Class javaClassHelper = Class.forName(JAVA_CLASS_HELPER);
        if (javaClassHelper != null) \{
            final Class[] params = new Class[]\{ byte[].class \};
            final Method getConstants = javaClassHelper.getMethod(\"getConstants\", params);
            final Object[] args = new Object[]\{ bytes \};
            final StringBuffer sb = ((StringBuffer) (getConstants.invoke(null, args)));
            if (sb.length() > 0) \{
                queuedData = sb.toString();
                return read();
            \}
        \}
    \} catch (NoClassDefFoundError ex) \{
        throw ex;
    \} catch (RuntimeException ex) \{
        throw ex;
    \} catch (InvocationTargetException ex) \{
        Throwable t = ex.getTargetException();
        if (t instanceof NoClassDefFoundError) \{
            throw ((NoClassDefFoundError) (t));
        \}
        if (t instanceof RuntimeException) \{
            throw ((RuntimeException) (t));
        \}
        throw new BuildException(t);
    \} catch (Exception ex) \{
        throw new BuildException(ex);
    \}
\}" shape=ellipse]
204 [label="15:CtIfImpl@if ((clazz == null) || (clazz.length() == 0)) \{
    ch = -1;
\} else \{
    final byte[] bytes = clazz.getBytes(\"ISO-8859-1\");
    try \{
        final Class javaClassHelper = Class.forName(JAVA_CLASS_HELPER);
        if (javaClassHelper != null) \{
            final Class[] params = new Class[]\{ byte[].class \};
            final Method getConstants = javaClassHelper.getMethod(\"getConstants\", params);
            final Object[] args = new Object[]\{ bytes \};
            final StringBuffer sb = ((StringBuffer) (getConstants.invoke(null, args)));
            if (sb.length() > 0) \{
                queuedData = sb.toString();
                return read();
            \}
        \}
    \} catch (NoClassDefFoundError ex) \{
        throw ex;
    \} catch (RuntimeException ex) \{
        throw ex;
    \} catch (InvocationTargetException ex) \{
        Throwable t = ex.getTargetException();
        if (t instanceof NoClassDefFoundError) \{
            throw ((NoClassDefFoundError) (t));
        \}
        if (t instanceof RuntimeException) \{
            throw ((RuntimeException) (t));
        \}
        throw new BuildException(t);
    \} catch (Exception ex) \{
        throw new BuildException(ex);
    \}
\}" shape=ellipse]
205 [label="13:CtBlockImpl@\{
    final String clazz = readFully();
    if ((clazz == null) || (clazz.length() == 0)) \{
        ch = -1;
    \} else \{
        final byte[] bytes = clazz.getBytes(\"ISO-8859-1\");
        try \{
            final Class javaClassHelper = Class.forName(JAVA_CLASS_HELPER);
            if (javaClassHelper != null) \{
                final Class[] params = new Class[]\{ byte[].class \};
                final Method getConstants = javaClassHelper.getMethod(\"getConstants\", params);
                final Object[] args = new Object[]\{ bytes \};
                final StringBuffer sb = ((StringBuffer) (getConstants.invoke(null, args)));
                if (sb.length() > 0) \{
                    queuedData = sb.toString();
                    return read();
                \}
            \}
        \} catch (NoClassDefFoundError ex) \{
            throw ex;
        \} catch (RuntimeException ex) \{
            throw ex;
        \} catch (InvocationTargetException ex) \{
            Throwable t = ex.getTargetException();
            if (t instanceof NoClassDefFoundError) \{
                throw ((NoClassDefFoundError) (t));
            \}
            if (t instanceof RuntimeException) \{
                throw ((RuntimeException) (t));
            \}
            throw new BuildException(t);
        \} catch (Exception ex) \{
            throw new BuildException(ex);
        \}
    \}
\}" shape=ellipse]
206 [label="7:CtIfImpl@if (queuedData != null) \{
    ch = queuedData.charAt(0);
    queuedData = queuedData.substring(1);
    if (queuedData.length() == 0) \{
        queuedData = null;
    \}
\} else \{
    final String clazz = readFully();
    if ((clazz == null) || (clazz.length() == 0)) \{
        ch = -1;
    \} else \{
        final byte[] bytes = clazz.getBytes(\"ISO-8859-1\");
        try \{
            final Class javaClassHelper = Class.forName(JAVA_CLASS_HELPER);
            if (javaClassHelper != null) \{
                final Class[] params = new Class[]\{ byte[].class \};
                final Method getConstants = javaClassHelper.getMethod(\"getConstants\", params);
                final Object[] args = new Object[]\{ bytes \};
                final StringBuffer sb = ((StringBuffer) (getConstants.invoke(null, args)));
                if (sb.length() > 0) \{
                    queuedData = sb.toString();
                    return read();
                \}
            \}
        \} catch (NoClassDefFoundError ex) \{
            throw ex;
        \} catch (RuntimeException ex) \{
            throw ex;
        \} catch (InvocationTargetException ex) \{
            Throwable t = ex.getTargetException();
            if (t instanceof NoClassDefFoundError) \{
                throw ((NoClassDefFoundError) (t));
            \}
            if (t instanceof RuntimeException) \{
                throw ((RuntimeException) (t));
            \}
            throw new BuildException(t);
        \} catch (Exception ex) \{
            throw new BuildException(ex);
        \}
    \}
\}" shape=ellipse]
207 [label="49:CtVariableReadImpl@ch" shape=ellipse]
208 [label="49:CtReturnImpl@return ch" shape=ellipse]
209 [label="2:CtBlockImpl@\{
    int ch = -1;
    if ((queuedData != null) && (queuedData.length() == 0)) \{
        queuedData = null;
    \}
    if (queuedData != null) \{
        ch = queuedData.charAt(0);
        queuedData = queuedData.substring(1);
        if (queuedData.length() == 0) \{
            queuedData = null;
        \}
    \} else \{
        final String clazz = readFully();
        if ((clazz == null) || (clazz.length() == 0)) \{
            ch = -1;
        \} else \{
            final byte[] bytes = clazz.getBytes(\"ISO-8859-1\");
            try \{
                final Class javaClassHelper = Class.forName(JAVA_CLASS_HELPER);
                if (javaClassHelper != null) \{
                    final Class[] params = new Class[]\{ byte[].class \};
                    final Method getConstants = javaClassHelper.getMethod(\"getConstants\", params);
                    final Object[] args = new Object[]\{ bytes \};
                    final StringBuffer sb = ((StringBuffer) (getConstants.invoke(null, args)));
                    if (sb.length() > 0) \{
                        queuedData = sb.toString();
                        return read();
                    \}
                \}
            \} catch (NoClassDefFoundError ex) \{
                throw ex;
            \} catch (RuntimeException ex) \{
                throw ex;
            \} catch (InvocationTargetException ex) \{
                Throwable t = ex.getTargetException();
                if (t instanceof NoClassDefFoundError) \{
                    throw ((NoClassDefFoundError) (t));
                \}
                if (t instanceof RuntimeException) \{
                    throw ((RuntimeException) (t));
                \}
                throw new BuildException(t);
            \} catch (Exception ex) \{
                throw new BuildException(ex);
            \}
        \}
    \}
    return ch;
\}" shape=ellipse]
210 [label="2:CtMethodImpl@public int read() throws IOException \{
    int ch = -1;
    if ((queuedData != null) && (queuedData.length() == 0)) \{
        queuedData = null;
    \}
    if (queuedData != null) \{
        ch = queuedData.charAt(0);
        queuedData = queuedData.substring(1);
        if (queuedData.length() == 0) \{
            queuedData = null;
        \}
    \} else \{
        final String clazz = readFully();
        if ((clazz == null) || (clazz.length() == 0)) \{
            ch = -1;
        \} else \{
            final byte[] bytes = clazz.getBytes(\"ISO-8859-1\");
            try \{
                final Class javaClassHelper = Class.forName(JAVA_CLASS_HELPER);
                if (javaClassHelper != null) \{
                    final Class[] params = new Class[]\{ byte[].class \};
                    final Method getConstants = javaClassHelper.getMethod(\"getConstants\", params);
                    final Object[] args = new Object[]\{ bytes \};
                    final StringBuffer sb = ((StringBuffer) (getConstants.invoke(null, args)));
                    if (sb.length() > 0) \{
                        queuedData = sb.toString();
                        return read();
                    \}
                \}
            \} catch (NoClassDefFoundError ex) \{
                throw ex;
            \} catch (RuntimeException ex) \{
                throw ex;
            \} catch (InvocationTargetException ex) \{
                Throwable t = ex.getTargetException();
                if (t instanceof NoClassDefFoundError) \{
                    throw ((NoClassDefFoundError) (t));
                \}
                if (t instanceof RuntimeException) \{
                    throw ((RuntimeException) (t));
                \}
                throw new BuildException(t);
            \} catch (Exception ex) \{
                throw new BuildException(ex);
            \}
        \}
    \}
    return ch;
\}" shape=ellipse]
211 [label="18:Delete@DELETE" shape=ellipse]
212 [label="18:Insert@INSERT" shape=ellipse]
213 [label="18:CtTypeAccessImpl@ISO_8859_1" shape=ellipse]
5 -> 4 [label="AST"];
6 -> 207 [label="Define-Use"];
7 -> 6 [label="AST"];
7 -> 3 [label="AST"];
7 -> 5 [label="AST"];
10 -> 8 [label="AST"];
10 -> 9 [label="AST"];
14 -> 12 [label="AST"];
14 -> 13 [label="AST"];
14 -> 11 [label="AST"];
16 -> 14 [label="AST"];
16 -> 15 [label="AST"];
17 -> 10 [label="AST"];
17 -> 16 [label="AST"];
17 -> 21 [label="Control Dep"];
17 -> 20 [label="Control Dep"];
17 -> 18 [label="Control Dep"];
17 -> 19 [label="Control Dep"];
18 -> 23 [label="Define-Use"];
18 -> 29 [label="Define-Use"];
18 -> 36 [label="Define-Use"];
18 -> 42 [label="Define-Use"];
20 -> 18 [label="AST"];
20 -> 19 [label="AST"];
21 -> 20 [label="AST"];
22 -> 17 [label="AST"];
22 -> 21 [label="AST"];
25 -> 23 [label="AST"];
25 -> 24 [label="AST"];
25 -> 51 [label="Control Dep"];
25 -> 32 [label="Control Dep"];
25 -> 26 [label="Control Dep"];
25 -> 31 [label="Control Dep"];
25 -> 27 [label="Control Dep"];
25 -> 29 [label="Control Dep"];
25 -> 30 [label="Control Dep"];
25 -> 39 [label="Control Dep"];
25 -> 33 [label="Control Dep"];
25 -> 38 [label="Control Dep"];
25 -> 34 [label="Control Dep"];
25 -> 36 [label="Control Dep"];
25 -> 37 [label="Control Dep"];
25 -> 50 [label="Control Dep"];
25 -> 45 [label="Control Dep"];
25 -> 43 [label="Control Dep"];
25 -> 40 [label="Control Dep"];
25 -> 42 [label="Control Dep"];
25 -> 44 [label="Control Dep"];
25 -> 205 [label="Control Dep"];
25 -> 57 [label="Control Dep"];
25 -> 55 [label="Control Dep"];
25 -> 53 [label="Control Dep"];
25 -> 204 [label="Control Dep"];
25 -> 67 [label="Control Dep"];
25 -> 60 [label="Control Dep"];
25 -> 58 [label="Control Dep"];
25 -> 59 [label="Control Dep"];
25 -> 66 [label="Control Dep"];
25 -> 64 [label="Control Dep"];
25 -> 61 [label="Control Dep"];
25 -> 63 [label="Control Dep"];
25 -> 65 [label="Control Dep"];
26 -> 207 [label="Define-Use"];
29 -> 26 [label="Data Dep"];
31 -> 28 [label="AST"];
31 -> 29 [label="AST"];
31 -> 27 [label="AST"];
31 -> 30 [label="AST"];
32 -> 26 [label="AST"];
32 -> 31 [label="AST"];
33 -> 42 [label="Define-Use"];
36 -> 33 [label="Data Dep"];
38 -> 35 [label="AST"];
38 -> 36 [label="AST"];
38 -> 34 [label="AST"];
38 -> 37 [label="AST"];
39 -> 33 [label="AST"];
39 -> 38 [label="AST"];
43 -> 41 [label="AST"];
43 -> 42 [label="AST"];
43 -> 40 [label="AST"];
45 -> 43 [label="AST"];
45 -> 44 [label="AST"];
45 -> 49 [label="Control Dep"];
45 -> 48 [label="Control Dep"];
45 -> 46 [label="Control Dep"];
45 -> 47 [label="Control Dep"];
48 -> 46 [label="AST"];
48 -> 47 [label="AST"];
49 -> 48 [label="AST"];
50 -> 45 [label="AST"];
50 -> 49 [label="AST"];
51 -> 32 [label="AST"];
51 -> 39 [label="AST"];
51 -> 50 [label="AST"];
55 -> 54 [label="AST"];
55 -> 53 [label="AST"];
56 -> 58 [label="Define-Use"];
56 -> 63 [label="Define-Use"];
56 -> 77 [label="Define-Use"];
57 -> 56 [label="AST"];
57 -> 52 [label="AST"];
57 -> 55 [label="AST"];
60 -> 58 [label="AST"];
60 -> 59 [label="AST"];
64 -> 62 [label="AST"];
64 -> 63 [label="AST"];
64 -> 61 [label="AST"];
66 -> 64 [label="AST"];
66 -> 65 [label="AST"];
67 -> 60 [label="AST"];
67 -> 66 [label="AST"];
67 -> 72 [label="Control Dep"];
67 -> 71 [label="Control Dep"];
67 -> 68 [label="Control Dep"];
67 -> 70 [label="Control Dep"];
67 -> 69 [label="Control Dep"];
67 -> 203 [label="Control Dep"];
67 -> 81 [label="Control Dep"];
67 -> 74 [label="Control Dep"];
67 -> 79 [label="Control Dep"];
67 -> 75 [label="Control Dep"];
67 -> 77 [label="Control Dep"];
67 -> 78 [label="Control Dep"];
67 -> 202 [label="Control Dep"];
67 -> 144 [label="Control Dep"];
67 -> 89 [label="Control Dep"];
67 -> 87 [label="Control Dep"];
67 -> 83 [label="Control Dep"];
67 -> 85 [label="Control Dep"];
67 -> 86 [label="Control Dep"];
67 -> 143 [label="Control Dep"];
67 -> 92 [label="Control Dep"];
67 -> 90 [label="Control Dep"];
67 -> 91 [label="Control Dep"];
67 -> 151 [label="Control Dep"];
67 -> 147 [label="Control Dep"];
67 -> 158 [label="Control Dep"];
67 -> 154 [label="Control Dep"];
67 -> 192 [label="Control Dep"];
67 -> 161 [label="Control Dep"];
67 -> 201 [label="Control Dep"];
67 -> 195 [label="Control Dep"];
68 -> 207 [label="Define-Use"];
70 -> 69 [label="AST"];
71 -> 68 [label="AST"];
71 -> 70 [label="AST"];
72 -> 71 [label="AST"];
74 -> 73 [label="AST"];
77 -> 80 [label="Data Dep"];
78 -> 211 [label="Action"];
79 -> 76 [label="AST"];
79 -> 77 [label="AST"];
79 -> 75 [label="AST"];
79 -> 78 [label="AST"];
79 -> 212 [label="Action"];
81 -> 80 [label="AST"];
81 -> 74 [label="AST"];
81 -> 79 [label="AST"];
87 -> 84 [label="AST"];
87 -> 85 [label="AST"];
87 -> 83 [label="AST"];
87 -> 86 [label="AST"];
88 -> 90 [label="Define-Use"];
88 -> 102 [label="Define-Use"];
89 -> 88 [label="AST"];
89 -> 82 [label="AST"];
89 -> 87 [label="AST"];
92 -> 90 [label="AST"];
92 -> 91 [label="AST"];
92 -> 142 [label="Control Dep"];
92 -> 98 [label="Control Dep"];
92 -> 94 [label="Control Dep"];
92 -> 95 [label="Control Dep"];
92 -> 107 [label="Control Dep"];
92 -> 105 [label="Control Dep"];
92 -> 100 [label="Control Dep"];
92 -> 102 [label="Control Dep"];
92 -> 103 [label="Control Dep"];
92 -> 104 [label="Control Dep"];
92 -> 113 [label="Control Dep"];
92 -> 109 [label="Control Dep"];
92 -> 110 [label="Control Dep"];
92 -> 123 [label="Control Dep"];
92 -> 120 [label="Control Dep"];
92 -> 115 [label="Control Dep"];
92 -> 117 [label="Control Dep"];
92 -> 118 [label="Control Dep"];
92 -> 119 [label="Control Dep"];
92 -> 141 [label="Control Dep"];
92 -> 129 [label="Control Dep"];
92 -> 127 [label="Control Dep"];
92 -> 124 [label="Control Dep"];
92 -> 126 [label="Control Dep"];
92 -> 128 [label="Control Dep"];
94 -> 93 [label="AST"];
95 -> 96 [label="AST"];
96 -> 97 [label="Data Dep"];
97 -> 104 [label="Define-Use"];
98 -> 97 [label="AST"];
98 -> 94 [label="AST"];
98 -> 95 [label="AST"];
102 -> 106 [label="Data Dep"];
104 -> 106 [label="Data Dep"];
105 -> 101 [label="AST"];
105 -> 102 [label="AST"];
105 -> 100 [label="AST"];
105 -> 103 [label="AST"];
105 -> 104 [label="AST"];
106 -> 117 [label="Define-Use"];
107 -> 106 [label="AST"];
107 -> 99 [label="AST"];
107 -> 105 [label="AST"];
109 -> 108 [label="AST"];
110 -> 111 [label="AST"];
111 -> 112 [label="Data Dep"];
112 -> 119 [label="Define-Use"];
113 -> 112 [label="AST"];
113 -> 109 [label="AST"];
113 -> 110 [label="AST"];
117 -> 122 [label="Data Dep"];
119 -> 122 [label="Data Dep"];
120 -> 116 [label="AST"];
120 -> 121 [label="AST"];
120 -> 117 [label="AST"];
120 -> 115 [label="AST"];
120 -> 118 [label="AST"];
120 -> 119 [label="AST"];
122 -> 126 [label="Define-Use"];
122 -> 133 [label="Define-Use"];
123 -> 122 [label="AST"];
123 -> 114 [label="AST"];
123 -> 120 [label="AST"];
127 -> 125 [label="AST"];
127 -> 126 [label="AST"];
127 -> 124 [label="AST"];
129 -> 127 [label="AST"];
129 -> 128 [label="AST"];
129 -> 140 [label="Control Dep"];
129 -> 135 [label="Control Dep"];
129 -> 130 [label="Control Dep"];
129 -> 134 [label="Control Dep"];
129 -> 131 [label="Control Dep"];
129 -> 133 [label="Control Dep"];
129 -> 139 [label="Control Dep"];
129 -> 138 [label="Control Dep"];
129 -> 136 [label="Control Dep"];
133 -> 130 [label="Data Dep"];
134 -> 132 [label="AST"];
134 -> 133 [label="AST"];
134 -> 131 [label="AST"];
135 -> 130 [label="AST"];
135 -> 134 [label="AST"];
138 -> 137 [label="AST"];
138 -> 136 [label="AST"];
139 -> 138 [label="AST"];
140 -> 135 [label="AST"];
140 -> 139 [label="AST"];
141 -> 129 [label="AST"];
141 -> 140 [label="AST"];
142 -> 98 [label="AST"];
142 -> 107 [label="AST"];
142 -> 113 [label="AST"];
142 -> 123 [label="AST"];
142 -> 141 [label="AST"];
143 -> 92 [label="AST"];
143 -> 142 [label="AST"];
144 -> 89 [label="AST"];
144 -> 143 [label="AST"];
145 -> 148 [label="Define-Use"];
145 -> 155 [label="Define-Use"];
145 -> 165 [label="Define-Use"];
145 -> 197 [label="Define-Use"];
147 -> 145 [label="AST"];
147 -> 146 [label="AST"];
147 -> 150 [label="Control Dep"];
147 -> 149 [label="Control Dep"];
147 -> 148 [label="Control Dep"];
149 -> 148 [label="AST"];
150 -> 149 [label="AST"];
151 -> 147 [label="AST"];
151 -> 150 [label="AST"];
152 -> 155 [label="Define-Use"];
152 -> 165 [label="Define-Use"];
152 -> 197 [label="Define-Use"];
154 -> 152 [label="AST"];
154 -> 153 [label="AST"];
154 -> 157 [label="Control Dep"];
154 -> 156 [label="Control Dep"];
154 -> 155 [label="Control Dep"];
156 -> 155 [label="AST"];
157 -> 156 [label="AST"];
158 -> 154 [label="AST"];
158 -> 157 [label="AST"];
159 -> 165 [label="Define-Use"];
159 -> 197 [label="Define-Use"];
161 -> 159 [label="AST"];
161 -> 160 [label="AST"];
161 -> 191 [label="Control Dep"];
161 -> 168 [label="Control Dep"];
161 -> 166 [label="Control Dep"];
161 -> 163 [label="Control Dep"];
161 -> 165 [label="Control Dep"];
161 -> 177 [label="Control Dep"];
161 -> 172 [label="Control Dep"];
161 -> 169 [label="Control Dep"];
161 -> 170 [label="Control Dep"];
161 -> 186 [label="Control Dep"];
161 -> 181 [label="Control Dep"];
161 -> 178 [label="Control Dep"];
161 -> 179 [label="Control Dep"];
161 -> 190 [label="Control Dep"];
161 -> 189 [label="Control Dep"];
161 -> 188 [label="Control Dep"];
165 -> 167 [label="Data Dep"];
166 -> 164 [label="AST"];
166 -> 165 [label="AST"];
166 -> 163 [label="AST"];
167 -> 169 [label="Define-Use"];
167 -> 173 [label="Define-Use"];
167 -> 178 [label="Define-Use"];
167 -> 182 [label="Define-Use"];
167 -> 188 [label="Define-Use"];
168 -> 167 [label="AST"];
168 -> 162 [label="AST"];
168 -> 166 [label="AST"];
170 -> 171 [label="AST"];
172 -> 169 [label="AST"];
172 -> 170 [label="AST"];
172 -> 176 [label="Control Dep"];
172 -> 175 [label="Control Dep"];
172 -> 173 [label="Control Dep"];
173 -> 174 [label="AST"];
175 -> 173 [label="AST"];
176 -> 175 [label="AST"];
177 -> 172 [label="AST"];
177 -> 176 [label="AST"];
179 -> 180 [label="AST"];
181 -> 178 [label="AST"];
181 -> 179 [label="AST"];
181 -> 185 [label="Control Dep"];
181 -> 184 [label="Control Dep"];
181 -> 182 [label="Control Dep"];
182 -> 183 [label="AST"];
184 -> 182 [label="AST"];
185 -> 184 [label="AST"];
186 -> 181 [label="AST"];
186 -> 185 [label="AST"];
189 -> 188 [label="AST"];
190 -> 189 [label="AST"];
191 -> 168 [label="AST"];
191 -> 177 [label="AST"];
191 -> 186 [label="AST"];
191 -> 190 [label="AST"];
192 -> 161 [label="AST"];
192 -> 191 [label="AST"];
193 -> 197 [label="Define-Use"];
195 -> 193 [label="AST"];
195 -> 194 [label="AST"];
195 -> 200 [label="Control Dep"];
195 -> 199 [label="Control Dep"];
195 -> 198 [label="Control Dep"];
195 -> 197 [label="Control Dep"];
198 -> 197 [label="AST"];
199 -> 198 [label="AST"];
200 -> 199 [label="AST"];
201 -> 195 [label="AST"];
201 -> 200 [label="AST"];
202 -> 144 [label="AST"];
202 -> 151 [label="AST"];
202 -> 158 [label="AST"];
202 -> 192 [label="AST"];
202 -> 201 [label="AST"];
203 -> 81 [label="AST"];
203 -> 202 [label="AST"];
204 -> 67 [label="AST"];
204 -> 72 [label="AST"];
204 -> 203 [label="AST"];
205 -> 57 [label="AST"];
205 -> 204 [label="AST"];
206 -> 25 [label="AST"];
206 -> 51 [label="AST"];
206 -> 205 [label="AST"];
208 -> 207 [label="AST"];
209 -> 7 [label="AST"];
209 -> 22 [label="AST"];
209 -> 206 [label="AST"];
209 -> 208 [label="AST"];
210 -> 1 [label="AST"];
210 -> 0 [label="AST"];
210 -> 2 [label="AST"];
210 -> 209 [label="AST"];
212 -> 213 [label="Action"];
}