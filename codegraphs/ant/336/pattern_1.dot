digraph "Pattern" {
0 [label="read#?#18:INSERT
load#?,InputStream#4:INSERT" shape=ellipse]
1 [label="read#?#18:clazz.getBytes(\"ISO-8859-1\")
load#?,InputStream#4:s.getBytes(\"ISO-8859-1\")" shape=ellipse]
2 [label="read#?#15:(clazz == null) || (clazz.length() == 0)" shape=ellipse]
3 [label="read#?#7:queuedData != null" shape=ellipse]
4 [label="read#?#15:if ((clazz == null) || (clazz.length() == 0)) \{
    ch = -1;
\} else \{
    final byte[] bytes = clazz.getBytes(\"ISO-8859-1\");
    try \{
        final Class javaClassHelper = Class.forName(JAVA_CLASS_HELPER);
        if (javaClassHelper != null) \{
            final Class[] params = new Class[]\{ byte[].class \};
            final Method getConstants = javaClassHelper.getMethod(\"getConstants\", params);
            final Object[] args = new Object[]\{ bytes \};
            final StringBuffer sb = ((StringBuffer) (getConstants.invoke(null, args)));
            if (sb.length() > 0) \{
                queuedData = sb.toString();
                return read();
            \}
        \}
    \} catch (NoClassDefFoundError ex) \{
        throw ex;
    \} catch (RuntimeException ex) \{
        throw ex;
    \} catch (InvocationTargetException ex) \{
        Throwable t = ex.getTargetException();
        if (t instanceof NoClassDefFoundError) \{
            throw ((NoClassDefFoundError) (t));
        \}
        if (t instanceof RuntimeException) \{
            throw ((RuntimeException) (t));
        \}
        throw new BuildException(t);
    \} catch (Exception ex) \{
        throw new BuildException(ex);
    \}
\}" shape=ellipse]
5 [label="read#?#-1:boolean
load#?,InputStream#-1:String" shape=ellipse]
6 [label="read#?#15:(clazz == null)" shape=ellipse]
7 [label="read#?#15:(clazz.length() == 0)" shape=ellipse]
8 [label="read#?#15:\{
    ch = -1;
\}" shape=ellipse]
9 [label="read#?#16:ch = -1" shape=ellipse]
10 [label="read#?#16:ch" shape=ellipse]
11 [label="read#?#16:-1" shape=ellipse]
12 [label="read#?#16:1" shape=ellipse]
13 [label="read#?#17:\{
    final byte[] bytes = clazz.getBytes(\"ISO-8859-1\");
    try \{
        final Class javaClassHelper = Class.forName(JAVA_CLASS_HELPER);
        if (javaClassHelper != null) \{
            final Class[] params = new Class[]\{ byte[].class \};
            final Method getConstants = javaClassHelper.getMethod(\"getConstants\", params);
            final Object[] args = new Object[]\{ bytes \};
            final StringBuffer sb = ((StringBuffer) (getConstants.invoke(null, args)));
            if (sb.length() > 0) \{
                queuedData = sb.toString();
                return read();
            \}
        \}
    \} catch (NoClassDefFoundError ex) \{
        throw ex;
    \} catch (RuntimeException ex) \{
        throw ex;
    \} catch (InvocationTargetException ex) \{
        Throwable t = ex.getTargetException();
        if (t instanceof NoClassDefFoundError) \{
            throw ((NoClassDefFoundError) (t));
        \}
        if (t instanceof RuntimeException) \{
            throw ((RuntimeException) (t));
        \}
        throw new BuildException(t);
    \} catch (Exception ex) \{
        throw new BuildException(ex);
    \}
\}" shape=ellipse]
14 [label="read#?#18:final byte[] bytes = clazz.getBytes(\"ISO-8859-1\")
load#?,InputStream#4:byte[] ba = s.getBytes(\"ISO-8859-1\")" shape=ellipse]
15 [label="read#?#18:byte[]" shape=ellipse]
16 [label="read#?#18:getBytes(java.lang.String)
load#?,InputStream#4:getBytes(java.lang.String)" shape=ellipse]
17 [label="read#?#18:clazz
load#?,InputStream#4:s" shape=ellipse]
18 [label="read#?#18:\"ISO-8859-1\"" shape=ellipse]
19 [label="read#?#19:try \{
    final Class javaClassHelper = Class.forName(JAVA_CLASS_HELPER);
    if (javaClassHelper != null) \{
        final Class[] params = new Class[]\{ byte[].class \};
        final Method getConstants = javaClassHelper.getMethod(\"getConstants\", params);
        final Object[] args = new Object[]\{ bytes \};
        final StringBuffer sb = ((StringBuffer) (getConstants.invoke(null, args)));
        if (sb.length() > 0) \{
            queuedData = sb.toString();
            return read();
        \}
    \}
\} catch (NoClassDefFoundError ex) \{
    throw ex;
\} catch (RuntimeException ex) \{
    throw ex;
\} catch (InvocationTargetException ex) \{
    Throwable t = ex.getTargetException();
    if (t instanceof NoClassDefFoundError) \{
        throw ((NoClassDefFoundError) (t));
    \}
    if (t instanceof RuntimeException) \{
        throw ((RuntimeException) (t));
    \}
    throw new BuildException(t);
\} catch (Exception ex) \{
    throw new BuildException(ex);
\}" shape=ellipse]
20 [label="read#?#19:\{
    final Class javaClassHelper = Class.forName(JAVA_CLASS_HELPER);
    if (javaClassHelper != null) \{
        final Class[] params = new Class[]\{ byte[].class \};
        final Method getConstants = javaClassHelper.getMethod(\"getConstants\", params);
        final Object[] args = new Object[]\{ bytes \};
        final StringBuffer sb = ((StringBuffer) (getConstants.invoke(null, args)));
        if (sb.length() > 0) \{
            queuedData = sb.toString();
            return read();
        \}
    \}
\}" shape=ellipse]
21 [label="read#?#20:final Class javaClassHelper = Class.forName(JAVA_CLASS_HELPER)" shape=ellipse]
22 [label="read#?#20:Class.forName(JAVA_CLASS_HELPER)" shape=ellipse]
23 [label="read#?#20:forName(java.lang.String)" shape=ellipse]
24 [label="read#?#20:Class" shape=ellipse]
25 [label="read#?#20:JAVA_CLASS_HELPER" shape=ellipse]
26 [label="read#?#21:if (javaClassHelper != null) \{
    final Class[] params = new Class[]\{ byte[].class \};
    final Method getConstants = javaClassHelper.getMethod(\"getConstants\", params);
    final Object[] args = new Object[]\{ bytes \};
    final StringBuffer sb = ((StringBuffer) (getConstants.invoke(null, args)));
    if (sb.length() > 0) \{
        queuedData = sb.toString();
        return read();
    \}
\}" shape=ellipse]
27 [label="read#?#21:javaClassHelper != null" shape=ellipse]
28 [label="read#?#21:javaClassHelper" shape=ellipse]
29 [label="read#?#21:null" shape=ellipse]
30 [label="read#?#31: catch (NoClassDefFoundError ex) \{
    throw ex;
\}" shape=ellipse]
31 [label="read#?#31:NoClassDefFoundError ex" shape=ellipse]
32 [label="read#?#33: catch (RuntimeException ex) \{
    throw ex;
\}" shape=ellipse]
33 [label="read#?#33:RuntimeException ex" shape=ellipse]
34 [label="read#?#35: catch (InvocationTargetException ex) \{
    Throwable t = ex.getTargetException();
    if (t instanceof NoClassDefFoundError) \{
        throw ((NoClassDefFoundError) (t));
    \}
    if (t instanceof RuntimeException) \{
        throw ((RuntimeException) (t));
    \}
    throw new BuildException(t);
\}" shape=ellipse]
35 [label="read#?#35:InvocationTargetException ex" shape=ellipse]
36 [label="read#?#44: catch (Exception ex) \{
    throw new BuildException(ex);
\}" shape=ellipse]
37 [label="read#?#44:Exception ex" shape=ellipse]
38 [label="read#?#18:getBytes
load#?,InputStream#4:getBytes" shape=ellipse]
39 [label="read#?#18:ISO_8859_1" shape=ellipse]
40 [label="load#?,InputStream#4:\"ISO-8859-1\"" shape=ellipse]
41 [label="load#?,InputStream#4:DELETE" shape=ellipse]
0 -> 39 [label="Action:1"];
1 -> 0 [label="Action:2"];
1 -> 38 [label="AST:2"];
1 -> 17 [label="AST:2"];
1 -> 16 [label="AST:2"];
1 -> 18 [label="AST:1"];
1 -> 40 [label="AST:1"];
2 -> 1 [label="Control Dep:1"];
2 -> 5 [label="AST:1"];
2 -> 6 [label="AST:1"];
2 -> 7 [label="AST:1"];
2 -> 8 [label="Control Dep:1"];
2 -> 9 [label="Control Dep:1"];
2 -> 10 [label="Control Dep:1"];
2 -> 11 [label="Control Dep:1"];
2 -> 12 [label="Control Dep:1"];
2 -> 13 [label="Control Dep:1"];
2 -> 14 [label="Control Dep:1"];
2 -> 15 [label="Control Dep:1"];
2 -> 16 [label="Control Dep:1"];
2 -> 17 [label="Control Dep:1"];
2 -> 18 [label="Control Dep:1"];
2 -> 19 [label="Control Dep:1"];
2 -> 20 [label="Control Dep:1"];
2 -> 21 [label="Control Dep:1"];
2 -> 22 [label="Control Dep:1"];
2 -> 23 [label="Control Dep:1"];
2 -> 24 [label="Control Dep:1"];
2 -> 25 [label="Control Dep:1"];
2 -> 26 [label="Control Dep:1"];
2 -> 27 [label="Control Dep:1"];
2 -> 28 [label="Control Dep:1"];
2 -> 29 [label="Control Dep:1"];
2 -> 30 [label="Control Dep:1"];
2 -> 31 [label="Control Dep:1"];
2 -> 32 [label="Control Dep:1"];
2 -> 33 [label="Control Dep:1"];
2 -> 34 [label="Control Dep:1"];
2 -> 35 [label="Control Dep:1"];
2 -> 36 [label="Control Dep:1"];
2 -> 37 [label="Control Dep:1"];
3 -> 2 [label="Control Dep:1"];
3 -> 4 [label="Control Dep:1"];
3 -> 6 [label="Control Dep:1"];
3 -> 7 [label="Control Dep:1"];
4 -> 2 [label="AST:1"];
4 -> 8 [label="AST:1"];
4 -> 13 [label="AST:1"];
8 -> 9 [label="AST:1"];
9 -> 10 [label="AST:1"];
9 -> 11 [label="AST:1"];
11 -> 12 [label="AST:1"];
13 -> 14 [label="AST:1"];
13 -> 19 [label="AST:1"];
14 -> 1 [label="AST:2"];
14 -> 15 [label="AST:1"];
19 -> 20 [label="AST:1"];
19 -> 30 [label="AST:1"];
19 -> 32 [label="AST:1"];
19 -> 34 [label="AST:1"];
19 -> 36 [label="AST:1"];
20 -> 21 [label="AST:1"];
20 -> 26 [label="AST:1"];
21 -> 22 [label="AST:1"];
22 -> 24 [label="AST:1"];
22 -> 23 [label="AST:1"];
22 -> 25 [label="AST:1"];
26 -> 27 [label="AST:1"];
27 -> 28 [label="AST:1"];
27 -> 29 [label="AST:1"];
30 -> 31 [label="AST:1"];
32 -> 33 [label="AST:1"];
34 -> 35 [label="AST:1"];
36 -> 37 [label="AST:1"];
40 -> 5 [label="AST:1"];
40 -> 41 [label="Action:1"];
}