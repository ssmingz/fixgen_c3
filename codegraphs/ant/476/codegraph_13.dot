digraph "supportsReflectElement#?,String,String" {
0 [label="2:CtTypeReferenceImpl@boolean" shape=ellipse]
1 [label="2:CtVirtualElement@supportsReflectElement" shape=ellipse]
2 [label="2:CtParameterImpl@String parentUri" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
4 [label="2:CtParameterImpl@String elementName" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
6 [label="3:CtTypeReferenceImpl@String" shape=ellipse]
7 [label="3:CtExecutableReferenceImpl@extractNameFromComponentName(java.lang.String)" shape=ellipse]
8 [label="3:CtVirtualElement@extractNameFromComponentName" shape=ellipse]
9 [label="3:CtTypeAccessImpl@ProjectHelper" shape=ellipse]
10 [label="3:CtVariableReadImpl@elementName" shape=ellipse]
11 [label="3:CtInvocationImpl@ProjectHelper.extractNameFromComponentName(elementName)" shape=ellipse]
12 [label="3:CtVirtualElement@name" shape=ellipse]
13 [label="3:CtLocalVariableImpl@String name = ProjectHelper.extractNameFromComponentName(elementName)" shape=ellipse]
14 [label="4:CtExecutableReferenceImpl@containsKey()" shape=ellipse]
15 [label="4:CtVirtualElement@containsKey" shape=ellipse]
16 [label="4:CtFieldReadImpl@nestedCreators" shape=ellipse]
17 [label="4:CtExecutableReferenceImpl@toLowerCase(java.util.Locale)" shape=ellipse]
18 [label="4:CtVirtualElement@toLowerCase" shape=ellipse]
19 [label="4:CtVariableReadImpl@name" shape=ellipse]
20 [label="4:CtTypeAccessImpl@US" shape=ellipse]
21 [label="4:CtInvocationImpl@name.toLowerCase(US)" shape=ellipse]
22 [label="4:CtInvocationImpl@nestedCreators.containsKey(name.toLowerCase(US))" shape=ellipse]
23 [label="4:CtUnaryOperatorImpl@!nestedCreators.containsKey(name.toLowerCase(US))" shape=ellipse]
24 [label="5:CtLiteralImpl@false" shape=ellipse]
25 [label="5:CtReturnImpl@return false" shape=ellipse]
26 [label="4:CtBlockImpl@\{
    return false;
\}" shape=ellipse]
27 [label="4:CtIfImpl@if (!nestedCreators.containsKey(name.toLowerCase(US))) \{
    return false;
\}" shape=ellipse]
28 [label="7:CtTypeReferenceImpl@String" shape=ellipse]
29 [label="7:CtExecutableReferenceImpl@extractUriFromComponentName(java.lang.String)" shape=ellipse]
30 [label="7:CtVirtualElement@extractUriFromComponentName" shape=ellipse]
31 [label="7:CtTypeAccessImpl@ProjectHelper" shape=ellipse]
32 [label="7:CtVariableReadImpl@elementName" shape=ellipse]
33 [label="7:CtInvocationImpl@ProjectHelper.extractUriFromComponentName(elementName)" shape=ellipse]
34 [label="7:CtVirtualElement@uri" shape=ellipse]
35 [label="7:CtLocalVariableImpl@String uri = ProjectHelper.extractUriFromComponentName(elementName)" shape=ellipse]
36 [label="8:CtExecutableReferenceImpl@equals(java.lang.Object)" shape=ellipse]
37 [label="8:CtVirtualElement@equals" shape=ellipse]
38 [label="8:CtVariableReadImpl@uri" shape=ellipse]
39 [label="8:CtTypeAccessImpl@ANT_CORE_URI" shape=ellipse]
40 [label="8:CtInvocationImpl@uri.equals(ANT_CORE_URI)" shape=ellipse]
41 [label="9:CtVariableWriteImpl@uri" shape=ellipse]
42 [label="9:CtLiteralImpl@\"\"" shape=ellipse]
43 [label="9:CtAssignmentImpl@uri = \"\"" shape=ellipse]
44 [label="8:CtBlockImpl@\{
    uri = \"\";
\}" shape=ellipse]
45 [label="8:CtIfImpl@if (uri.equals(ANT_CORE_URI)) \{
    uri = \"\";
\}" shape=ellipse]
46 [label="11:CtExecutableReferenceImpl@equals(java.lang.Object)" shape=ellipse]
47 [label="11:CtVirtualElement@equals" shape=ellipse]
48 [label="11:CtLiteralImpl@\"\"" shape=ellipse]
49 [label="11:CtVariableReadImpl@uri" shape=ellipse]
50 [label="11:CtInvocationImpl@\"\".equals(uri)" shape=ellipse]
51 [label="12:CtLiteralImpl@true" shape=ellipse]
52 [label="12:CtReturnImpl@return true" shape=ellipse]
53 [label="11:CtBlockImpl@\{
    return true;
\}" shape=ellipse]
54 [label="11:CtIfImpl@if (\"\".equals(uri)) \{
    return true;
\}" shape=ellipse]
55 [label="14:CtExecutableReferenceImpl@equals(java.lang.Object)" shape=ellipse]
56 [label="14:CtVirtualElement@equals" shape=ellipse]
57 [label="14:CtVariableReadImpl@parentUri" shape=ellipse]
58 [label="14:CtTypeAccessImpl@ANT_CORE_URI" shape=ellipse]
59 [label="14:CtInvocationImpl@parentUri.equals(ANT_CORE_URI)" shape=ellipse]
60 [label="15:CtVariableWriteImpl@parentUri" shape=ellipse]
61 [label="15:CtLiteralImpl@\"\"" shape=ellipse]
62 [label="15:CtAssignmentImpl@parentUri = \"\"" shape=ellipse]
63 [label="14:CtBlockImpl@\{
    parentUri = \"\";
\}" shape=ellipse]
64 [label="14:CtIfImpl@if (parentUri.equals(ANT_CORE_URI)) \{
    parentUri = \"\";
\}" shape=ellipse]
65 [label="17:CtExecutableReferenceImpl@equals(java.lang.Object)" shape=ellipse]
66 [label="17:CtVirtualElement@equals" shape=ellipse]
67 [label="17:CtVariableReadImpl@uri" shape=ellipse]
68 [label="17:CtVariableReadImpl@parentUri" shape=ellipse]
69 [label="17:CtInvocationImpl@uri.equals(parentUri)" shape=ellipse]
70 [label="17:CtReturnImpl@return uri.equals(parentUri)" shape=ellipse]
71 [label="2:CtBlockImpl@\{
    String name = ProjectHelper.extractNameFromComponentName(elementName);
    if (!nestedCreators.containsKey(name.toLowerCase(US))) \{
        return false;
    \}
    String uri = ProjectHelper.extractUriFromComponentName(elementName);
    if (uri.equals(ANT_CORE_URI)) \{
        uri = \"\";
    \}
    if (\"\".equals(uri)) \{
        return true;
    \}
    if (parentUri.equals(ANT_CORE_URI)) \{
        parentUri = \"\";
    \}
    return uri.equals(parentUri);
\}" shape=ellipse]
72 [label="2:CtMethodImpl@public boolean supportsReflectElement(String parentUri, String elementName) \{
    String name = ProjectHelper.extractNameFromComponentName(elementName);
    if (!nestedCreators.containsKey(name.toLowerCase(US))) \{
        return false;
    \}
    String uri = ProjectHelper.extractUriFromComponentName(elementName);
    if (uri.equals(ANT_CORE_URI)) \{
        uri = \"\";
    \}
    if (\"\".equals(uri)) \{
        return true;
    \}
    if (parentUri.equals(ANT_CORE_URI)) \{
        parentUri = \"\";
    \}
    return uri.equals(parentUri);
\}" shape=ellipse]
73 [label="4:Update@UPDATE" shape=ellipse]
74 [label="4:CtTypeAccessImpl@ENGLISH" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
10 -> 12 [label="Data Dep"];
11 -> 8 [label="AST"];
11 -> 9 [label="AST"];
11 -> 7 [label="AST"];
11 -> 10 [label="AST"];
12 -> 19 [label="Define-Use"];
13 -> 12 [label="AST"];
13 -> 6 [label="AST"];
13 -> 11 [label="AST"];
20 -> 73 [label="Action"];
21 -> 18 [label="AST"];
21 -> 19 [label="AST"];
21 -> 17 [label="AST"];
21 -> 20 [label="AST"];
22 -> 15 [label="AST"];
22 -> 16 [label="AST"];
22 -> 14 [label="AST"];
22 -> 21 [label="AST"];
23 -> 22 [label="AST"];
23 -> 26 [label="Control Dep"];
23 -> 25 [label="Control Dep"];
23 -> 24 [label="Control Dep"];
25 -> 24 [label="AST"];
26 -> 25 [label="AST"];
27 -> 23 [label="AST"];
27 -> 26 [label="AST"];
32 -> 34 [label="Data Dep"];
33 -> 30 [label="AST"];
33 -> 31 [label="AST"];
33 -> 29 [label="AST"];
33 -> 32 [label="AST"];
34 -> 38 [label="Define-Use"];
34 -> 49 [label="Define-Use"];
34 -> 67 [label="Define-Use"];
35 -> 34 [label="AST"];
35 -> 28 [label="AST"];
35 -> 33 [label="AST"];
40 -> 37 [label="AST"];
40 -> 38 [label="AST"];
40 -> 36 [label="AST"];
40 -> 39 [label="AST"];
40 -> 44 [label="Control Dep"];
40 -> 43 [label="Control Dep"];
40 -> 41 [label="Control Dep"];
40 -> 42 [label="Control Dep"];
41 -> 49 [label="Define-Use"];
41 -> 67 [label="Define-Use"];
43 -> 41 [label="AST"];
43 -> 42 [label="AST"];
44 -> 43 [label="AST"];
45 -> 40 [label="AST"];
45 -> 44 [label="AST"];
50 -> 47 [label="AST"];
50 -> 48 [label="AST"];
50 -> 46 [label="AST"];
50 -> 49 [label="AST"];
50 -> 53 [label="Control Dep"];
50 -> 52 [label="Control Dep"];
50 -> 51 [label="Control Dep"];
52 -> 51 [label="AST"];
53 -> 52 [label="AST"];
54 -> 50 [label="AST"];
54 -> 53 [label="AST"];
59 -> 56 [label="AST"];
59 -> 57 [label="AST"];
59 -> 55 [label="AST"];
59 -> 58 [label="AST"];
59 -> 63 [label="Control Dep"];
59 -> 62 [label="Control Dep"];
59 -> 60 [label="Control Dep"];
59 -> 61 [label="Control Dep"];
60 -> 68 [label="Define-Use"];
62 -> 60 [label="AST"];
62 -> 61 [label="AST"];
63 -> 62 [label="AST"];
64 -> 59 [label="AST"];
64 -> 63 [label="AST"];
69 -> 66 [label="AST"];
69 -> 67 [label="AST"];
69 -> 65 [label="AST"];
69 -> 68 [label="AST"];
70 -> 69 [label="AST"];
71 -> 13 [label="AST"];
71 -> 27 [label="AST"];
71 -> 35 [label="AST"];
71 -> 45 [label="AST"];
71 -> 54 [label="AST"];
71 -> 64 [label="AST"];
71 -> 70 [label="AST"];
72 -> 1 [label="AST"];
72 -> 0 [label="AST"];
72 -> 2 [label="AST"];
72 -> 4 [label="AST"];
72 -> 71 [label="AST"];
73 -> 74 [label="Action"];
}