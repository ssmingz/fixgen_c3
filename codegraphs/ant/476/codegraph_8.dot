digraph "createDynamicElement#?,Object,String,String,String" {
0 [label="2:CtTypeReferenceImpl@Object" shape=ellipse]
1 [label="2:CtVirtualElement@createDynamicElement" shape=ellipse]
2 [label="2:CtParameterImpl@Object parent" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@Object" shape=ellipse]
4 [label="2:CtParameterImpl@String ns" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
6 [label="2:CtParameterImpl@String localName" shape=ellipse]
7 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
8 [label="2:CtParameterImpl@String qName" shape=ellipse]
9 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
10 [label="3:CtTypeReferenceImpl@Object" shape=ellipse]
11 [label="3:CtLiteralImpl@null" shape=ellipse]
12 [label="3:CtVirtualElement@nestedElement" shape=ellipse]
13 [label="3:CtLocalVariableImpl@Object nestedElement = null" shape=ellipse]
14 [label="4:CtVariableReadImpl@parent" shape=ellipse]
15 [label="4:CtTypeAccessImpl@DynamicElementNS" shape=ellipse]
16 [label="4:CtTypeReferenceImpl@DynamicElementNS" shape=ellipse]
17 [label="4:CtBinaryOperatorImpl@parent instanceof DynamicElementNS" shape=ellipse]
18 [label="5:CtTypeReferenceImpl@DynamicElementNS" shape=ellipse]
19 [label="5:CtVariableReadImpl@((DynamicElementNS) (parent))" shape=ellipse]
20 [label="5:CtTypeReferenceImpl@DynamicElementNS" shape=ellipse]
21 [label="5:CtVirtualElement@dc" shape=ellipse]
22 [label="5:CtLocalVariableImpl@DynamicElementNS dc = ((DynamicElementNS) (parent))" shape=ellipse]
23 [label="6:CtVariableWriteImpl@nestedElement" shape=ellipse]
24 [label="6:CtExecutableReferenceImpl@createDynamicElement(java.lang.String,java.lang.String,java.lang.String)" shape=ellipse]
25 [label="6:CtVirtualElement@createDynamicElement" shape=ellipse]
26 [label="6:CtVariableReadImpl@dc" shape=ellipse]
27 [label="6:CtVariableReadImpl@ns" shape=ellipse]
28 [label="6:CtVariableReadImpl@localName" shape=ellipse]
29 [label="6:CtVariableReadImpl@qName" shape=ellipse]
30 [label="6:CtInvocationImpl@dc.createDynamicElement(ns, localName, qName)" shape=ellipse]
31 [label="6:CtAssignmentImpl@nestedElement = dc.createDynamicElement(ns, localName, qName)" shape=ellipse]
32 [label="4:CtBlockImpl@\{
    DynamicElementNS dc = ((DynamicElementNS) (parent));
    nestedElement = dc.createDynamicElement(ns, localName, qName);
\}" shape=ellipse]
33 [label="4:CtIfImpl@if (parent instanceof DynamicElementNS) \{
    DynamicElementNS dc = ((DynamicElementNS) (parent));
    nestedElement = dc.createDynamicElement(ns, localName, qName);
\}" shape=ellipse]
34 [label="8:CtVariableReadImpl@nestedElement" shape=ellipse]
35 [label="8:CtLiteralImpl@null" shape=ellipse]
36 [label="8:CtBinaryOperatorImpl@(nestedElement == null)" shape=ellipse]
37 [label="8:CtVariableReadImpl@parent" shape=ellipse]
38 [label="8:CtTypeAccessImpl@DynamicElement" shape=ellipse]
39 [label="8:CtTypeReferenceImpl@DynamicElement" shape=ellipse]
40 [label="8:CtBinaryOperatorImpl@(parent instanceof DynamicElement)" shape=ellipse]
41 [label="8:CtBinaryOperatorImpl@(nestedElement == null) && (parent instanceof DynamicElement)" shape=ellipse]
42 [label="9:CtTypeReferenceImpl@DynamicElement" shape=ellipse]
43 [label="9:CtVariableReadImpl@((DynamicElement) (parent))" shape=ellipse]
44 [label="9:CtTypeReferenceImpl@DynamicElement" shape=ellipse]
45 [label="9:CtVirtualElement@dc" shape=ellipse]
46 [label="9:CtLocalVariableImpl@DynamicElement dc = ((DynamicElement) (parent))" shape=ellipse]
47 [label="10:CtVariableWriteImpl@nestedElement" shape=ellipse]
48 [label="10:CtExecutableReferenceImpl@createDynamicElement()" shape=ellipse]
49 [label="10:CtVirtualElement@createDynamicElement" shape=ellipse]
50 [label="10:CtVariableReadImpl@dc" shape=ellipse]
51 [label="10:CtExecutableReferenceImpl@toLowerCase(java.util.Locale)" shape=ellipse]
52 [label="10:CtVirtualElement@toLowerCase" shape=ellipse]
53 [label="10:CtVariableReadImpl@localName" shape=ellipse]
54 [label="10:CtTypeAccessImpl@US" shape=ellipse]
55 [label="10:CtInvocationImpl@localName.toLowerCase(US)" shape=ellipse]
56 [label="10:CtInvocationImpl@dc.createDynamicElement(localName.toLowerCase(US))" shape=ellipse]
57 [label="10:CtAssignmentImpl@nestedElement = dc.createDynamicElement(localName.toLowerCase(US))" shape=ellipse]
58 [label="8:CtBlockImpl@\{
    DynamicElement dc = ((DynamicElement) (parent));
    nestedElement = dc.createDynamicElement(localName.toLowerCase(US));
\}" shape=ellipse]
59 [label="8:CtIfImpl@if ((nestedElement == null) && (parent instanceof DynamicElement)) \{
    DynamicElement dc = ((DynamicElement) (parent));
    nestedElement = dc.createDynamicElement(localName.toLowerCase(US));
\}" shape=ellipse]
60 [label="12:CtVariableReadImpl@nestedElement" shape=ellipse]
61 [label="12:CtReturnImpl@return nestedElement" shape=ellipse]
62 [label="2:CtBlockImpl@\{
    Object nestedElement = null;
    if (parent instanceof DynamicElementNS) \{
        DynamicElementNS dc = ((DynamicElementNS) (parent));
        nestedElement = dc.createDynamicElement(ns, localName, qName);
    \}
    if ((nestedElement == null) && (parent instanceof DynamicElement)) \{
        DynamicElement dc = ((DynamicElement) (parent));
        nestedElement = dc.createDynamicElement(localName.toLowerCase(US));
    \}
    return nestedElement;
\}" shape=ellipse]
63 [label="2:CtMethodImpl@private Object createDynamicElement(Object parent, String ns, String localName, String qName) \{
    Object nestedElement = null;
    if (parent instanceof DynamicElementNS) \{
        DynamicElementNS dc = ((DynamicElementNS) (parent));
        nestedElement = dc.createDynamicElement(ns, localName, qName);
    \}
    if ((nestedElement == null) && (parent instanceof DynamicElement)) \{
        DynamicElement dc = ((DynamicElement) (parent));
        nestedElement = dc.createDynamicElement(localName.toLowerCase(US));
    \}
    return nestedElement;
\}" shape=ellipse]
64 [label="10:Update@UPDATE" shape=ellipse]
65 [label="10:CtTypeAccessImpl@ENGLISH" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
6 -> 7 [label="AST"];
8 -> 9 [label="AST"];
12 -> 34 [label="Define-Use"];
12 -> 60 [label="Define-Use"];
13 -> 12 [label="AST"];
13 -> 10 [label="AST"];
13 -> 11 [label="AST"];
15 -> 16 [label="AST"];
17 -> 14 [label="AST"];
17 -> 15 [label="AST"];
17 -> 32 [label="Control Dep"];
17 -> 22 [label="Control Dep"];
17 -> 19 [label="Control Dep"];
17 -> 31 [label="Control Dep"];
17 -> 23 [label="Control Dep"];
17 -> 30 [label="Control Dep"];
17 -> 24 [label="Control Dep"];
17 -> 26 [label="Control Dep"];
17 -> 27 [label="Control Dep"];
17 -> 28 [label="Control Dep"];
17 -> 29 [label="Control Dep"];
19 -> 20 [label="AST"];
19 -> 21 [label="Data Dep"];
21 -> 26 [label="Define-Use"];
21 -> 50 [label="Define-Use"];
22 -> 21 [label="AST"];
22 -> 18 [label="AST"];
22 -> 19 [label="AST"];
23 -> 34 [label="Define-Use"];
23 -> 60 [label="Define-Use"];
26 -> 23 [label="Data Dep"];
27 -> 23 [label="Data Dep"];
28 -> 23 [label="Data Dep"];
29 -> 23 [label="Data Dep"];
30 -> 25 [label="AST"];
30 -> 26 [label="AST"];
30 -> 24 [label="AST"];
30 -> 27 [label="AST"];
30 -> 28 [label="AST"];
30 -> 29 [label="AST"];
31 -> 23 [label="AST"];
31 -> 30 [label="AST"];
32 -> 22 [label="AST"];
32 -> 31 [label="AST"];
33 -> 17 [label="AST"];
33 -> 32 [label="AST"];
36 -> 34 [label="AST"];
36 -> 35 [label="AST"];
38 -> 39 [label="AST"];
40 -> 37 [label="AST"];
40 -> 38 [label="AST"];
41 -> 36 [label="AST"];
41 -> 40 [label="AST"];
41 -> 58 [label="Control Dep"];
41 -> 46 [label="Control Dep"];
41 -> 43 [label="Control Dep"];
41 -> 57 [label="Control Dep"];
41 -> 47 [label="Control Dep"];
41 -> 56 [label="Control Dep"];
41 -> 48 [label="Control Dep"];
41 -> 50 [label="Control Dep"];
41 -> 55 [label="Control Dep"];
41 -> 51 [label="Control Dep"];
41 -> 53 [label="Control Dep"];
41 -> 54 [label="Control Dep"];
43 -> 44 [label="AST"];
43 -> 45 [label="Data Dep"];
45 -> 50 [label="Define-Use"];
46 -> 45 [label="AST"];
46 -> 42 [label="AST"];
46 -> 43 [label="AST"];
47 -> 60 [label="Define-Use"];
50 -> 47 [label="Data Dep"];
53 -> 47 [label="Data Dep"];
54 -> 64 [label="Action"];
55 -> 52 [label="AST"];
55 -> 53 [label="AST"];
55 -> 51 [label="AST"];
55 -> 54 [label="AST"];
56 -> 49 [label="AST"];
56 -> 50 [label="AST"];
56 -> 48 [label="AST"];
56 -> 55 [label="AST"];
57 -> 47 [label="AST"];
57 -> 56 [label="AST"];
58 -> 46 [label="AST"];
58 -> 57 [label="AST"];
59 -> 41 [label="AST"];
59 -> 58 [label="AST"];
61 -> 60 [label="AST"];
62 -> 13 [label="AST"];
62 -> 33 [label="AST"];
62 -> 59 [label="AST"];
62 -> 61 [label="AST"];
63 -> 1 [label="AST"];
63 -> 0 [label="AST"];
63 -> 2 [label="AST"];
63 -> 4 [label="AST"];
63 -> 6 [label="AST"];
63 -> 8 [label="AST"];
63 -> 62 [label="AST"];
64 -> 65 [label="Action"];
}