digraph "setScope#?,String" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@setScope" shape=ellipse]
2 [label="2:CtParameterImpl@String verboseScope" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
4 [label="2:CtTypeReferenceImpl@BuildException" shape=ellipse]
5 [label="3:CtVariableWriteImpl@verboseScope" shape=ellipse]
6 [label="3:CtExecutableReferenceImpl@toLowerCase(java.util.Locale)" shape=ellipse]
7 [label="3:CtVirtualElement@toLowerCase" shape=ellipse]
8 [label="3:CtVariableReadImpl@verboseScope" shape=ellipse]
9 [label="3:CtTypeAccessImpl@US" shape=ellipse]
10 [label="3:CtInvocationImpl@verboseScope.toLowerCase(US)" shape=ellipse]
11 [label="3:CtAssignmentImpl@verboseScope = verboseScope.toLowerCase(US)" shape=ellipse]
12 [label="4:CtVirtualElement@boolean[]" shape=ellipse]
13 [label="4:CtArrayTypeReferenceImpl@boolean[]" shape=ellipse]
14 [label="4:CtNewArrayImpl@new boolean[SCOPE_ELEMENTS.length]" shape=ellipse]
15 [label="4:CtFieldReadImpl@SCOPE_ELEMENTS.length" shape=ellipse]
16 [label="4:CtVirtualElement@elements" shape=ellipse]
17 [label="4:CtLocalVariableImpl@boolean[] elements = new boolean[SCOPE_ELEMENTS.length]" shape=ellipse]
18 [label="5:CtTypeReferenceImpl@boolean" shape=ellipse]
19 [label="5:CtLiteralImpl@false" shape=ellipse]
20 [label="5:CtVirtualElement@gotAll" shape=ellipse]
21 [label="5:CtLocalVariableImpl@boolean gotAll = false" shape=ellipse]
22 [label="6:CtTypeReferenceImpl@boolean" shape=ellipse]
23 [label="6:CtLiteralImpl@false" shape=ellipse]
24 [label="6:CtVirtualElement@gotNotAll" shape=ellipse]
25 [label="6:CtLocalVariableImpl@boolean gotNotAll = false" shape=ellipse]
26 [label="7:CtTypeReferenceImpl@StringTokenizer" shape=ellipse]
27 [label="7:CtTypeReferenceImpl@StringTokenizer" shape=ellipse]
28 [label="7:CtVariableReadImpl@verboseScope" shape=ellipse]
29 [label="7:CtLiteralImpl@\",\"" shape=ellipse]
30 [label="7:CtConstructorCallImpl@new StringTokenizer(verboseScope, \",\")" shape=ellipse]
31 [label="7:CtVirtualElement@tok" shape=ellipse]
32 [label="7:CtLocalVariableImpl@StringTokenizer tok = new StringTokenizer(verboseScope, \",\")" shape=ellipse]
33 [label="8:CtExecutableReferenceImpl@hasMoreTokens()" shape=ellipse]
34 [label="8:CtVirtualElement@hasMoreTokens" shape=ellipse]
35 [label="8:CtVariableReadImpl@tok" shape=ellipse]
36 [label="8:CtInvocationImpl@tok.hasMoreTokens()" shape=ellipse]
37 [label="9:CtTypeReferenceImpl@String" shape=ellipse]
38 [label="9:CtExecutableReferenceImpl@trim()" shape=ellipse]
39 [label="9:CtVirtualElement@trim" shape=ellipse]
40 [label="9:CtExecutableReferenceImpl@nextToken()" shape=ellipse]
41 [label="9:CtVirtualElement@nextToken" shape=ellipse]
42 [label="9:CtVariableReadImpl@tok" shape=ellipse]
43 [label="9:CtInvocationImpl@tok.nextToken()" shape=ellipse]
44 [label="9:CtInvocationImpl@tok.nextToken().trim()" shape=ellipse]
45 [label="9:CtVirtualElement@next" shape=ellipse]
46 [label="9:CtLocalVariableImpl@String next = tok.nextToken().trim()" shape=ellipse]
47 [label="10:CtExecutableReferenceImpl@equals(java.lang.Object)" shape=ellipse]
48 [label="10:CtVirtualElement@equals" shape=ellipse]
49 [label="10:CtVariableReadImpl@next" shape=ellipse]
50 [label="10:CtLiteralImpl@\"all\"" shape=ellipse]
51 [label="10:CtInvocationImpl@next.equals(\"all\")" shape=ellipse]
52 [label="11:CtVariableReadImpl@gotAll" shape=ellipse]
53 [label="12:CtExecutableReferenceImpl@log(java.lang.String)" shape=ellipse]
54 [label="12:CtVirtualElement@log" shape=ellipse]
55 [label="12:CtExecutableReferenceImpl@getProject()" shape=ellipse]
56 [label="12:CtVirtualElement@getProject" shape=ellipse]
57 [label="12:CtInvocationImpl@getProject()" shape=ellipse]
58 [label="12:CtLiteralImpl@\"Repeated tag scope element: all\"" shape=ellipse]
59 [label="12:CtTypeAccessImpl@MSG_VERBOSE" shape=ellipse]
60 [label="12:CtInvocationImpl@getProject().log(\"Repeated tag scope element: all\", MSG_VERBOSE)" shape=ellipse]
61 [label="11:CtBlockImpl@\{
    getProject().log(\"Repeated tag scope element: all\", MSG_VERBOSE);
\}" shape=ellipse]
62 [label="11:CtIfImpl@if (gotAll) \{
    getProject().log(\"Repeated tag scope element: all\", MSG_VERBOSE);
\}" shape=ellipse]
63 [label="14:CtVariableWriteImpl@gotAll" shape=ellipse]
64 [label="14:CtLiteralImpl@true" shape=ellipse]
65 [label="14:CtAssignmentImpl@gotAll = true" shape=ellipse]
66 [label="10:CtBlockImpl@\{
    if (gotAll) \{
        getProject().log(\"Repeated tag scope element: all\", MSG_VERBOSE);
    \}
    gotAll = true;
\}" shape=ellipse]
67 [label="16:CtTypeReferenceImpl@int" shape=ellipse]
68 [label="16:CtVirtualElement@i" shape=ellipse]
69 [label="16:CtLocalVariableImpl@int i" shape=ellipse]
70 [label="17:CtVariableWriteImpl@i" shape=ellipse]
71 [label="17:CtLiteralImpl@0" shape=ellipse]
72 [label="17:CtAssignmentImpl@i = 0" shape=ellipse]
73 [label="17:CtVariableReadImpl@i" shape=ellipse]
74 [label="17:CtFieldReadImpl@SCOPE_ELEMENTS.length" shape=ellipse]
75 [label="17:CtBinaryOperatorImpl@i < SCOPE_ELEMENTS.length" shape=ellipse]
76 [label="17:CtVariableWriteImpl@i" shape=ellipse]
77 [label="17:CtUnaryOperatorImpl@i++" shape=ellipse]
78 [label="18:CtExecutableReferenceImpl@equals(java.lang.Object)" shape=ellipse]
79 [label="18:CtVirtualElement@equals" shape=ellipse]
80 [label="18:CtVariableReadImpl@next" shape=ellipse]
81 [label="18:CtFieldReadImpl@SCOPE_ELEMENTS" shape=ellipse]
82 [label="18:CtVariableReadImpl@i" shape=ellipse]
83 [label="18:CtArrayReadImpl@SCOPE_ELEMENTS[i]" shape=ellipse]
84 [label="18:CtInvocationImpl@next.equals(SCOPE_ELEMENTS[i])" shape=ellipse]
85 [label="19:CtBreakImpl@break" shape=ellipse]
86 [label="18:CtBlockImpl@\{
    break;
\}" shape=ellipse]
87 [label="18:CtIfImpl@if (next.equals(SCOPE_ELEMENTS[i])) \{
    break;
\}" shape=ellipse]
88 [label="17:CtBlockImpl@\{
    if (next.equals(SCOPE_ELEMENTS[i])) \{
        break;
    \}
\}" shape=ellipse]
89 [label="17:CtForImpl@for (i = 0; i < SCOPE_ELEMENTS.length; i++) \{
    if (next.equals(SCOPE_ELEMENTS[i])) \{
        break;
    \}
\}" shape=ellipse]
90 [label="22:CtVariableReadImpl@i" shape=ellipse]
91 [label="22:CtFieldReadImpl@SCOPE_ELEMENTS.length" shape=ellipse]
92 [label="22:CtBinaryOperatorImpl@i == SCOPE_ELEMENTS.length" shape=ellipse]
93 [label="23:CtTypeReferenceImpl@BuildException" shape=ellipse]
94 [label="23:CtLiteralImpl@\"Unrecognised scope element: \"" shape=ellipse]
95 [label="23:CtVariableReadImpl@next" shape=ellipse]
96 [label="23:CtBinaryOperatorImpl@\"Unrecognised scope element: \" + next" shape=ellipse]
97 [label="23:CtConstructorCallImpl@new BuildException(\"Unrecognised scope element: \" + next)" shape=ellipse]
98 [label="23:CtThrowImpl@throw new BuildException(\"Unrecognised scope element: \" + next)" shape=ellipse]
99 [label="22:CtBlockImpl@\{
    throw new BuildException(\"Unrecognised scope element: \" + next);
\}" shape=ellipse]
100 [label="25:CtVariableReadImpl@elements" shape=ellipse]
101 [label="25:CtVariableReadImpl@i" shape=ellipse]
102 [label="25:CtArrayReadImpl@elements[i]" shape=ellipse]
103 [label="26:CtExecutableReferenceImpl@log(java.lang.String)" shape=ellipse]
104 [label="26:CtVirtualElement@log" shape=ellipse]
105 [label="26:CtExecutableReferenceImpl@getProject()" shape=ellipse]
106 [label="26:CtVirtualElement@getProject" shape=ellipse]
107 [label="26:CtInvocationImpl@getProject()" shape=ellipse]
108 [label="26:CtLiteralImpl@\"Repeated tag scope element: \"" shape=ellipse]
109 [label="26:CtVariableReadImpl@next" shape=ellipse]
110 [label="26:CtBinaryOperatorImpl@\"Repeated tag scope element: \" + next" shape=ellipse]
111 [label="26:CtTypeAccessImpl@MSG_VERBOSE" shape=ellipse]
112 [label="26:CtInvocationImpl@getProject().log(\"Repeated tag scope element: \" + next, MSG_VERBOSE)" shape=ellipse]
113 [label="25:CtBlockImpl@\{
    getProject().log(\"Repeated tag scope element: \" + next, MSG_VERBOSE);
\}" shape=ellipse]
114 [label="25:CtIfImpl@if (elements[i]) \{
    getProject().log(\"Repeated tag scope element: \" + next, MSG_VERBOSE);
\}" shape=ellipse]
115 [label="28:CtVariableReadImpl@elements" shape=ellipse]
116 [label="28:CtVariableReadImpl@i" shape=ellipse]
117 [label="28:CtArrayWriteImpl@elements[i]" shape=ellipse]
118 [label="28:CtLiteralImpl@true" shape=ellipse]
119 [label="28:CtAssignmentImpl@elements[i] = true" shape=ellipse]
120 [label="29:CtVariableWriteImpl@gotNotAll" shape=ellipse]
121 [label="29:CtLiteralImpl@true" shape=ellipse]
122 [label="29:CtAssignmentImpl@gotNotAll = true" shape=ellipse]
123 [label="24:CtBlockImpl@\{
    if (elements[i]) \{
        getProject().log(\"Repeated tag scope element: \" + next, MSG_VERBOSE);
    \}
    elements[i] = true;
    gotNotAll = true;
\}" shape=ellipse]
124 [label="22:CtIfImpl@if (i == SCOPE_ELEMENTS.length) \{
    throw new BuildException(\"Unrecognised scope element: \" + next);
\} else \{
    if (elements[i]) \{
        getProject().log(\"Repeated tag scope element: \" + next, MSG_VERBOSE);
    \}
    elements[i] = true;
    gotNotAll = true;
\}" shape=ellipse]
125 [label="15:CtBlockImpl@\{
    int i;
    for (i = 0; i < SCOPE_ELEMENTS.length; i++) \{
        if (next.equals(SCOPE_ELEMENTS[i])) \{
            break;
        \}
    \}
    if (i == SCOPE_ELEMENTS.length) \{
        throw new BuildException(\"Unrecognised scope element: \" + next);
    \} else \{
        if (elements[i]) \{
            getProject().log(\"Repeated tag scope element: \" + next, MSG_VERBOSE);
        \}
        elements[i] = true;
        gotNotAll = true;
    \}
\}" shape=ellipse]
126 [label="10:CtIfImpl@if (next.equals(\"all\")) \{
    if (gotAll) \{
        getProject().log(\"Repeated tag scope element: all\", MSG_VERBOSE);
    \}
    gotAll = true;
\} else \{
    int i;
    for (i = 0; i < SCOPE_ELEMENTS.length; i++) \{
        if (next.equals(SCOPE_ELEMENTS[i])) \{
            break;
        \}
    \}
    if (i == SCOPE_ELEMENTS.length) \{
        throw new BuildException(\"Unrecognised scope element: \" + next);
    \} else \{
        if (elements[i]) \{
            getProject().log(\"Repeated tag scope element: \" + next, MSG_VERBOSE);
        \}
        elements[i] = true;
        gotNotAll = true;
    \}
\}" shape=ellipse]
127 [label="8:CtBlockImpl@\{
    String next = tok.nextToken().trim();
    if (next.equals(\"all\")) \{
        if (gotAll) \{
            getProject().log(\"Repeated tag scope element: all\", MSG_VERBOSE);
        \}
        gotAll = true;
    \} else \{
        int i;
        for (i = 0; i < SCOPE_ELEMENTS.length; i++) \{
            if (next.equals(SCOPE_ELEMENTS[i])) \{
                break;
            \}
        \}
        if (i == SCOPE_ELEMENTS.length) \{
            throw new BuildException(\"Unrecognised scope element: \" + next);
        \} else \{
            if (elements[i]) \{
                getProject().log(\"Repeated tag scope element: \" + next, MSG_VERBOSE);
            \}
            elements[i] = true;
            gotNotAll = true;
        \}
    \}
\}" shape=ellipse]
128 [label="8:CtWhileImpl@while (tok.hasMoreTokens()) \{
    String next = tok.nextToken().trim();
    if (next.equals(\"all\")) \{
        if (gotAll) \{
            getProject().log(\"Repeated tag scope element: all\", MSG_VERBOSE);
        \}
        gotAll = true;
    \} else \{
        int i;
        for (i = 0; i < SCOPE_ELEMENTS.length; i++) \{
            if (next.equals(SCOPE_ELEMENTS[i])) \{
                break;
            \}
        \}
        if (i == SCOPE_ELEMENTS.length) \{
            throw new BuildException(\"Unrecognised scope element: \" + next);
        \} else \{
            if (elements[i]) \{
                getProject().log(\"Repeated tag scope element: \" + next, MSG_VERBOSE);
            \}
            elements[i] = true;
            gotNotAll = true;
        \}
    \}
\} " shape=ellipse]
129 [label="33:CtVariableReadImpl@gotNotAll" shape=ellipse]
130 [label="33:CtVariableReadImpl@gotAll" shape=ellipse]
131 [label="33:CtBinaryOperatorImpl@gotNotAll && gotAll" shape=ellipse]
132 [label="34:CtTypeReferenceImpl@BuildException" shape=ellipse]
133 [label="35:CtLiteralImpl@\"Mixture of \\"all\\" and other scope \"" shape=ellipse]
134 [label="35:CtLiteralImpl@\"elements in tag parameter.\"" shape=ellipse]
135 [label="35:CtBinaryOperatorImpl@\"Mixture of \\"all\\" and other scope \" + \"elements in tag parameter.\"" shape=ellipse]
136 [label="34:CtConstructorCallImpl@new BuildException(\"Mixture of \\"all\\" and other scope \" + \"elements in tag parameter.\")" shape=ellipse]
137 [label="34:CtThrowImpl@throw new BuildException(\"Mixture of \\"all\\" and other scope \" + \"elements in tag parameter.\")" shape=ellipse]
138 [label="33:CtBlockImpl@\{
    throw new BuildException(\"Mixture of \\"all\\" and other scope \" + \"elements in tag parameter.\");
\}" shape=ellipse]
139 [label="33:CtIfImpl@if (gotNotAll && gotAll) \{
    throw new BuildException(\"Mixture of \\"all\\" and other scope \" + \"elements in tag parameter.\");
\}" shape=ellipse]
140 [label="37:CtVariableReadImpl@gotNotAll" shape=ellipse]
141 [label="37:CtUnaryOperatorImpl@(!gotNotAll)" shape=ellipse]
142 [label="37:CtVariableReadImpl@gotAll" shape=ellipse]
143 [label="37:CtUnaryOperatorImpl@(!gotAll)" shape=ellipse]
144 [label="37:CtBinaryOperatorImpl@(!gotNotAll) && (!gotAll)" shape=ellipse]
145 [label="38:CtTypeReferenceImpl@BuildException" shape=ellipse]
146 [label="38:CtLiteralImpl@\"No scope elements specified in tag \"" shape=ellipse]
147 [label="38:CtLiteralImpl@\"parameter.\"" shape=ellipse]
148 [label="38:CtBinaryOperatorImpl@\"No scope elements specified in tag \" + \"parameter.\"" shape=ellipse]
149 [label="38:CtConstructorCallImpl@new BuildException(\"No scope elements specified in tag \" + \"parameter.\")" shape=ellipse]
150 [label="38:CtThrowImpl@throw new BuildException(\"No scope elements specified in tag \" + \"parameter.\")" shape=ellipse]
151 [label="37:CtBlockImpl@\{
    throw new BuildException(\"No scope elements specified in tag \" + \"parameter.\");
\}" shape=ellipse]
152 [label="37:CtIfImpl@if ((!gotNotAll) && (!gotAll)) \{
    throw new BuildException(\"No scope elements specified in tag \" + \"parameter.\");
\}" shape=ellipse]
153 [label="40:CtVariableReadImpl@gotAll" shape=ellipse]
154 [label="41:CtFieldWriteImpl@this.scope" shape=ellipse]
155 [label="41:CtThisAccessImpl@this" shape=ellipse]
156 [label="41:CtLiteralImpl@\"a\"" shape=ellipse]
157 [label="41:CtAssignmentImpl@this.scope = \"a\"" shape=ellipse]
158 [label="40:CtBlockImpl@\{
    this.scope = \"a\";
\}" shape=ellipse]
159 [label="43:CtTypeReferenceImpl@StringBuffer" shape=ellipse]
160 [label="43:CtTypeReferenceImpl@StringBuffer" shape=ellipse]
161 [label="43:CtVariableReadImpl@elements" shape=ellipse]
162 [label="43:CtLocalVariableReferenceImpl@elements" shape=ellipse]
163 [label="43:CtFieldReadImpl@elements.length" shape=ellipse]
164 [label="43:CtConstructorCallImpl@new StringBuffer(elements.length)" shape=ellipse]
165 [label="43:CtVirtualElement@buff" shape=ellipse]
166 [label="43:CtLocalVariableImpl@StringBuffer buff = new StringBuffer(elements.length)" shape=ellipse]
167 [label="44:CtTypeReferenceImpl@int" shape=ellipse]
168 [label="44:CtLiteralImpl@0" shape=ellipse]
169 [label="44:CtVirtualElement@i" shape=ellipse]
170 [label="44:CtLocalVariableImpl@int i = 0" shape=ellipse]
171 [label="44:CtVariableReadImpl@i" shape=ellipse]
172 [label="44:CtVariableReadImpl@elements" shape=ellipse]
173 [label="44:CtLocalVariableReferenceImpl@elements" shape=ellipse]
174 [label="44:CtFieldReadImpl@elements.length" shape=ellipse]
175 [label="44:CtBinaryOperatorImpl@i < elements.length" shape=ellipse]
176 [label="44:CtVariableWriteImpl@i" shape=ellipse]
177 [label="44:CtUnaryOperatorImpl@i++" shape=ellipse]
178 [label="45:CtVariableReadImpl@elements" shape=ellipse]
179 [label="45:CtVariableReadImpl@i" shape=ellipse]
180 [label="45:CtArrayReadImpl@elements[i]" shape=ellipse]
181 [label="46:CtExecutableReferenceImpl@append(java.lang.Object)" shape=ellipse]
182 [label="46:CtVirtualElement@append" shape=ellipse]
183 [label="46:CtVariableReadImpl@buff" shape=ellipse]
184 [label="46:CtExecutableReferenceImpl@charAt(int)" shape=ellipse]
185 [label="46:CtVirtualElement@charAt" shape=ellipse]
186 [label="46:CtFieldReadImpl@SCOPE_ELEMENTS" shape=ellipse]
187 [label="46:CtVariableReadImpl@i" shape=ellipse]
188 [label="46:CtArrayReadImpl@SCOPE_ELEMENTS[i]" shape=ellipse]
189 [label="46:CtLiteralImpl@0" shape=ellipse]
190 [label="46:CtInvocationImpl@SCOPE_ELEMENTS[i].charAt(0)" shape=ellipse]
191 [label="46:CtInvocationImpl@buff.append(SCOPE_ELEMENTS[i].charAt(0))" shape=ellipse]
192 [label="45:CtBlockImpl@\{
    buff.append(SCOPE_ELEMENTS[i].charAt(0));
\}" shape=ellipse]
193 [label="45:CtIfImpl@if (elements[i]) \{
    buff.append(SCOPE_ELEMENTS[i].charAt(0));
\}" shape=ellipse]
194 [label="44:CtBlockImpl@\{
    if (elements[i]) \{
        buff.append(SCOPE_ELEMENTS[i].charAt(0));
    \}
\}" shape=ellipse]
195 [label="44:CtForImpl@for (int i = 0; i < elements.length; i++) \{
    if (elements[i]) \{
        buff.append(SCOPE_ELEMENTS[i].charAt(0));
    \}
\}" shape=ellipse]
196 [label="49:CtFieldWriteImpl@this.scope" shape=ellipse]
197 [label="49:CtThisAccessImpl@this" shape=ellipse]
198 [label="49:CtExecutableReferenceImpl@toString()" shape=ellipse]
199 [label="49:CtVirtualElement@toString" shape=ellipse]
200 [label="49:CtVariableReadImpl@buff" shape=ellipse]
201 [label="49:CtInvocationImpl@buff.toString()" shape=ellipse]
202 [label="49:CtAssignmentImpl@this.scope = buff.toString()" shape=ellipse]
203 [label="42:CtBlockImpl@\{
    StringBuffer buff = new StringBuffer(elements.length);
    for (int i = 0; i < elements.length; i++) \{
        if (elements[i]) \{
            buff.append(SCOPE_ELEMENTS[i].charAt(0));
        \}
    \}
    this.scope = buff.toString();
\}" shape=ellipse]
204 [label="40:CtIfImpl@if (gotAll) \{
    this.scope = \"a\";
\} else \{
    StringBuffer buff = new StringBuffer(elements.length);
    for (int i = 0; i < elements.length; i++) \{
        if (elements[i]) \{
            buff.append(SCOPE_ELEMENTS[i].charAt(0));
        \}
    \}
    this.scope = buff.toString();
\}" shape=ellipse]
205 [label="2:CtBlockImpl@\{
    verboseScope = verboseScope.toLowerCase(US);
    boolean[] elements = new boolean[SCOPE_ELEMENTS.length];
    boolean gotAll = false;
    boolean gotNotAll = false;
    StringTokenizer tok = new StringTokenizer(verboseScope, \",\");
    while (tok.hasMoreTokens()) \{
        String next = tok.nextToken().trim();
        if (next.equals(\"all\")) \{
            if (gotAll) \{
                getProject().log(\"Repeated tag scope element: all\", MSG_VERBOSE);
            \}
            gotAll = true;
        \} else \{
            int i;
            for (i = 0; i < SCOPE_ELEMENTS.length; i++) \{
                if (next.equals(SCOPE_ELEMENTS[i])) \{
                    break;
                \}
            \}
            if (i == SCOPE_ELEMENTS.length) \{
                throw new BuildException(\"Unrecognised scope element: \" + next);
            \} else \{
                if (elements[i]) \{
                    getProject().log(\"Repeated tag scope element: \" + next, MSG_VERBOSE);
                \}
                elements[i] = true;
                gotNotAll = true;
            \}
        \}
    \} 
    if (gotNotAll && gotAll) \{
        throw new BuildException(\"Mixture of \\"all\\" and other scope \" + \"elements in tag parameter.\");
    \}
    if ((!gotNotAll) && (!gotAll)) \{
        throw new BuildException(\"No scope elements specified in tag \" + \"parameter.\");
    \}
    if (gotAll) \{
        this.scope = \"a\";
    \} else \{
        StringBuffer buff = new StringBuffer(elements.length);
        for (int i = 0; i < elements.length; i++) \{
            if (elements[i]) \{
                buff.append(SCOPE_ELEMENTS[i].charAt(0));
            \}
        \}
        this.scope = buff.toString();
    \}
\}" shape=ellipse]
206 [label="2:CtMethodImpl@public void setScope(String verboseScope) throws BuildException \{
    verboseScope = verboseScope.toLowerCase(US);
    boolean[] elements = new boolean[SCOPE_ELEMENTS.length];
    boolean gotAll = false;
    boolean gotNotAll = false;
    StringTokenizer tok = new StringTokenizer(verboseScope, \",\");
    while (tok.hasMoreTokens()) \{
        String next = tok.nextToken().trim();
        if (next.equals(\"all\")) \{
            if (gotAll) \{
                getProject().log(\"Repeated tag scope element: all\", MSG_VERBOSE);
            \}
            gotAll = true;
        \} else \{
            int i;
            for (i = 0; i < SCOPE_ELEMENTS.length; i++) \{
                if (next.equals(SCOPE_ELEMENTS[i])) \{
                    break;
                \}
            \}
            if (i == SCOPE_ELEMENTS.length) \{
                throw new BuildException(\"Unrecognised scope element: \" + next);
            \} else \{
                if (elements[i]) \{
                    getProject().log(\"Repeated tag scope element: \" + next, MSG_VERBOSE);
                \}
                elements[i] = true;
                gotNotAll = true;
            \}
        \}
    \} 
    if (gotNotAll && gotAll) \{
        throw new BuildException(\"Mixture of \\"all\\" and other scope \" + \"elements in tag parameter.\");
    \}
    if ((!gotNotAll) && (!gotAll)) \{
        throw new BuildException(\"No scope elements specified in tag \" + \"parameter.\");
    \}
    if (gotAll) \{
        this.scope = \"a\";
    \} else \{
        StringBuffer buff = new StringBuffer(elements.length);
        for (int i = 0; i < elements.length; i++) \{
            if (elements[i]) \{
                buff.append(SCOPE_ELEMENTS[i].charAt(0));
            \}
        \}
        this.scope = buff.toString();
    \}
\}" shape=ellipse]
207 [label="3:Update@UPDATE" shape=ellipse]
208 [label="3:CtTypeAccessImpl@ENGLISH" shape=ellipse]
2 -> 3 [label="AST"];
5 -> 28 [label="Define-Use"];
8 -> 5 [label="Data Dep"];
9 -> 207 [label="Action"];
10 -> 7 [label="AST"];
10 -> 8 [label="AST"];
10 -> 6 [label="AST"];
10 -> 9 [label="AST"];
11 -> 5 [label="AST"];
11 -> 10 [label="AST"];
13 -> 12 [label="AST"];
14 -> 15 [label="AST"];
15 -> 16 [label="Data Dep"];
16 -> 100 [label="Define-Use"];
16 -> 102 [label="Define-Use"];
16 -> 115 [label="Define-Use"];
16 -> 161 [label="Define-Use"];
16 -> 172 [label="Define-Use"];
16 -> 178 [label="Define-Use"];
16 -> 180 [label="Define-Use"];
17 -> 16 [label="AST"];
17 -> 13 [label="AST"];
17 -> 14 [label="AST"];
20 -> 52 [label="Define-Use"];
20 -> 130 [label="Define-Use"];
20 -> 142 [label="Define-Use"];
20 -> 153 [label="Define-Use"];
21 -> 20 [label="AST"];
21 -> 18 [label="AST"];
21 -> 19 [label="AST"];
24 -> 129 [label="Define-Use"];
24 -> 140 [label="Define-Use"];
25 -> 24 [label="AST"];
25 -> 22 [label="AST"];
25 -> 23 [label="AST"];
28 -> 31 [label="Data Dep"];
30 -> 28 [label="AST"];
30 -> 29 [label="AST"];
31 -> 35 [label="Define-Use"];
31 -> 42 [label="Define-Use"];
32 -> 31 [label="AST"];
32 -> 26 [label="AST"];
32 -> 30 [label="AST"];
36 -> 34 [label="AST"];
36 -> 35 [label="AST"];
36 -> 33 [label="AST"];
36 -> 127 [label="Control Dep"];
36 -> 46 [label="Control Dep"];
36 -> 44 [label="Control Dep"];
36 -> 38 [label="Control Dep"];
36 -> 43 [label="Control Dep"];
36 -> 40 [label="Control Dep"];
36 -> 42 [label="Control Dep"];
36 -> 126 [label="Control Dep"];
36 -> 51 [label="Control Dep"];
36 -> 47 [label="Control Dep"];
36 -> 49 [label="Control Dep"];
36 -> 50 [label="Control Dep"];
42 -> 45 [label="Data Dep"];
43 -> 41 [label="AST"];
43 -> 42 [label="AST"];
43 -> 40 [label="AST"];
44 -> 39 [label="AST"];
44 -> 43 [label="AST"];
44 -> 38 [label="AST"];
45 -> 49 [label="Define-Use"];
45 -> 80 [label="Define-Use"];
45 -> 95 [label="Define-Use"];
45 -> 109 [label="Define-Use"];
46 -> 45 [label="AST"];
46 -> 37 [label="AST"];
46 -> 44 [label="AST"];
51 -> 48 [label="AST"];
51 -> 49 [label="AST"];
51 -> 47 [label="AST"];
51 -> 50 [label="AST"];
51 -> 66 [label="Control Dep"];
51 -> 62 [label="Control Dep"];
51 -> 52 [label="Control Dep"];
51 -> 65 [label="Control Dep"];
51 -> 63 [label="Control Dep"];
51 -> 64 [label="Control Dep"];
51 -> 125 [label="Control Dep"];
51 -> 69 [label="Control Dep"];
51 -> 89 [label="Control Dep"];
51 -> 72 [label="Control Dep"];
51 -> 70 [label="Control Dep"];
51 -> 71 [label="Control Dep"];
51 -> 75 [label="Control Dep"];
51 -> 73 [label="Control Dep"];
51 -> 74 [label="Control Dep"];
51 -> 77 [label="Control Dep"];
51 -> 76 [label="Control Dep"];
51 -> 124 [label="Control Dep"];
51 -> 92 [label="Control Dep"];
51 -> 90 [label="Control Dep"];
51 -> 91 [label="Control Dep"];
52 -> 61 [label="Control Dep"];
52 -> 60 [label="Control Dep"];
52 -> 53 [label="Control Dep"];
52 -> 57 [label="Control Dep"];
52 -> 55 [label="Control Dep"];
52 -> 58 [label="Control Dep"];
52 -> 59 [label="Control Dep"];
57 -> 56 [label="AST"];
57 -> 55 [label="AST"];
60 -> 54 [label="AST"];
60 -> 57 [label="AST"];
60 -> 53 [label="AST"];
60 -> 58 [label="AST"];
60 -> 59 [label="AST"];
61 -> 60 [label="AST"];
62 -> 52 [label="AST"];
62 -> 61 [label="AST"];
63 -> 130 [label="Define-Use"];
63 -> 142 [label="Define-Use"];
63 -> 153 [label="Define-Use"];
65 -> 63 [label="AST"];
65 -> 64 [label="AST"];
66 -> 62 [label="AST"];
66 -> 65 [label="AST"];
68 -> 73 [label="Define-Use"];
68 -> 82 [label="Define-Use"];
68 -> 90 [label="Define-Use"];
68 -> 101 [label="Define-Use"];
68 -> 116 [label="Define-Use"];
68 -> 171 [label="Define-Use"];
68 -> 179 [label="Define-Use"];
68 -> 187 [label="Define-Use"];
69 -> 68 [label="AST"];
69 -> 67 [label="AST"];
70 -> 73 [label="Define-Use"];
70 -> 82 [label="Define-Use"];
70 -> 90 [label="Define-Use"];
70 -> 101 [label="Define-Use"];
70 -> 116 [label="Define-Use"];
70 -> 171 [label="Define-Use"];
70 -> 179 [label="Define-Use"];
70 -> 187 [label="Define-Use"];
72 -> 70 [label="AST"];
72 -> 71 [label="AST"];
75 -> 73 [label="AST"];
75 -> 74 [label="AST"];
75 -> 88 [label="Control Dep"];
75 -> 87 [label="Control Dep"];
75 -> 84 [label="Control Dep"];
75 -> 78 [label="Control Dep"];
75 -> 80 [label="Control Dep"];
75 -> 83 [label="Control Dep"];
75 -> 81 [label="Control Dep"];
75 -> 82 [label="Control Dep"];
76 -> 82 [label="Define-Use"];
76 -> 90 [label="Define-Use"];
76 -> 101 [label="Define-Use"];
76 -> 116 [label="Define-Use"];
76 -> 171 [label="Define-Use"];
76 -> 179 [label="Define-Use"];
76 -> 187 [label="Define-Use"];
77 -> 76 [label="AST"];
83 -> 81 [label="AST"];
83 -> 82 [label="AST"];
84 -> 79 [label="AST"];
84 -> 80 [label="AST"];
84 -> 78 [label="AST"];
84 -> 83 [label="AST"];
84 -> 86 [label="Control Dep"];
84 -> 85 [label="Control Dep"];
86 -> 85 [label="AST"];
87 -> 84 [label="AST"];
87 -> 86 [label="AST"];
88 -> 87 [label="AST"];
89 -> 72 [label="AST"];
89 -> 75 [label="AST"];
89 -> 77 [label="AST"];
89 -> 88 [label="AST"];
92 -> 90 [label="AST"];
92 -> 91 [label="AST"];
92 -> 99 [label="Control Dep"];
92 -> 98 [label="Control Dep"];
92 -> 97 [label="Control Dep"];
92 -> 96 [label="Control Dep"];
92 -> 94 [label="Control Dep"];
92 -> 95 [label="Control Dep"];
92 -> 123 [label="Control Dep"];
92 -> 114 [label="Control Dep"];
92 -> 102 [label="Control Dep"];
92 -> 100 [label="Control Dep"];
92 -> 101 [label="Control Dep"];
92 -> 119 [label="Control Dep"];
92 -> 117 [label="Control Dep"];
92 -> 115 [label="Control Dep"];
92 -> 116 [label="Control Dep"];
92 -> 118 [label="Control Dep"];
92 -> 122 [label="Control Dep"];
92 -> 120 [label="Control Dep"];
92 -> 121 [label="Control Dep"];
96 -> 94 [label="AST"];
96 -> 95 [label="AST"];
97 -> 96 [label="AST"];
98 -> 97 [label="AST"];
99 -> 98 [label="AST"];
102 -> 100 [label="AST"];
102 -> 101 [label="AST"];
102 -> 113 [label="Control Dep"];
102 -> 112 [label="Control Dep"];
102 -> 103 [label="Control Dep"];
102 -> 107 [label="Control Dep"];
102 -> 105 [label="Control Dep"];
102 -> 110 [label="Control Dep"];
102 -> 108 [label="Control Dep"];
102 -> 109 [label="Control Dep"];
102 -> 111 [label="Control Dep"];
107 -> 106 [label="AST"];
107 -> 105 [label="AST"];
110 -> 108 [label="AST"];
110 -> 109 [label="AST"];
112 -> 104 [label="AST"];
112 -> 107 [label="AST"];
112 -> 103 [label="AST"];
112 -> 110 [label="AST"];
112 -> 111 [label="AST"];
113 -> 112 [label="AST"];
114 -> 102 [label="AST"];
114 -> 113 [label="AST"];
117 -> 115 [label="AST"];
117 -> 116 [label="AST"];
119 -> 117 [label="AST"];
119 -> 118 [label="AST"];
120 -> 129 [label="Define-Use"];
120 -> 140 [label="Define-Use"];
122 -> 120 [label="AST"];
122 -> 121 [label="AST"];
123 -> 114 [label="AST"];
123 -> 119 [label="AST"];
123 -> 122 [label="AST"];
124 -> 92 [label="AST"];
124 -> 99 [label="AST"];
124 -> 123 [label="AST"];
125 -> 69 [label="AST"];
125 -> 89 [label="AST"];
125 -> 124 [label="AST"];
126 -> 51 [label="AST"];
126 -> 66 [label="AST"];
126 -> 125 [label="AST"];
127 -> 46 [label="AST"];
127 -> 126 [label="AST"];
128 -> 36 [label="AST"];
128 -> 127 [label="AST"];
131 -> 129 [label="AST"];
131 -> 130 [label="AST"];
131 -> 138 [label="Control Dep"];
131 -> 137 [label="Control Dep"];
131 -> 136 [label="Control Dep"];
131 -> 135 [label="Control Dep"];
131 -> 133 [label="Control Dep"];
131 -> 134 [label="Control Dep"];
135 -> 133 [label="AST"];
135 -> 134 [label="AST"];
136 -> 135 [label="AST"];
137 -> 136 [label="AST"];
138 -> 137 [label="AST"];
139 -> 131 [label="AST"];
139 -> 138 [label="AST"];
141 -> 140 [label="AST"];
143 -> 142 [label="AST"];
144 -> 141 [label="AST"];
144 -> 143 [label="AST"];
144 -> 151 [label="Control Dep"];
144 -> 150 [label="Control Dep"];
144 -> 149 [label="Control Dep"];
144 -> 148 [label="Control Dep"];
144 -> 146 [label="Control Dep"];
144 -> 147 [label="Control Dep"];
148 -> 146 [label="AST"];
148 -> 147 [label="AST"];
149 -> 148 [label="AST"];
150 -> 149 [label="AST"];
151 -> 150 [label="AST"];
152 -> 144 [label="AST"];
152 -> 151 [label="AST"];
153 -> 158 [label="Control Dep"];
153 -> 157 [label="Control Dep"];
153 -> 154 [label="Control Dep"];
153 -> 156 [label="Control Dep"];
153 -> 203 [label="Control Dep"];
153 -> 166 [label="Control Dep"];
153 -> 164 [label="Control Dep"];
153 -> 163 [label="Control Dep"];
153 -> 161 [label="Control Dep"];
153 -> 195 [label="Control Dep"];
153 -> 170 [label="Control Dep"];
153 -> 168 [label="Control Dep"];
153 -> 175 [label="Control Dep"];
153 -> 171 [label="Control Dep"];
153 -> 174 [label="Control Dep"];
153 -> 172 [label="Control Dep"];
153 -> 177 [label="Control Dep"];
153 -> 176 [label="Control Dep"];
153 -> 202 [label="Control Dep"];
153 -> 196 [label="Control Dep"];
153 -> 201 [label="Control Dep"];
153 -> 198 [label="Control Dep"];
153 -> 200 [label="Control Dep"];
154 -> 155 [label="AST"];
157 -> 154 [label="AST"];
157 -> 156 [label="AST"];
158 -> 157 [label="AST"];
161 -> 162 [label="AST"];
163 -> 161 [label="AST"];
163 -> 165 [label="Data Dep"];
164 -> 163 [label="AST"];
165 -> 183 [label="Define-Use"];
165 -> 200 [label="Define-Use"];
166 -> 165 [label="AST"];
166 -> 159 [label="AST"];
166 -> 164 [label="AST"];
169 -> 171 [label="Define-Use"];
169 -> 179 [label="Define-Use"];
169 -> 187 [label="Define-Use"];
170 -> 169 [label="AST"];
170 -> 167 [label="AST"];
170 -> 168 [label="AST"];
172 -> 173 [label="AST"];
174 -> 172 [label="AST"];
175 -> 171 [label="AST"];
175 -> 174 [label="AST"];
175 -> 194 [label="Control Dep"];
175 -> 193 [label="Control Dep"];
175 -> 180 [label="Control Dep"];
175 -> 178 [label="Control Dep"];
175 -> 179 [label="Control Dep"];
176 -> 179 [label="Define-Use"];
176 -> 187 [label="Define-Use"];
177 -> 176 [label="AST"];
180 -> 178 [label="AST"];
180 -> 179 [label="AST"];
180 -> 192 [label="Control Dep"];
180 -> 191 [label="Control Dep"];
180 -> 181 [label="Control Dep"];
180 -> 183 [label="Control Dep"];
180 -> 190 [label="Control Dep"];
180 -> 184 [label="Control Dep"];
180 -> 188 [label="Control Dep"];
180 -> 186 [label="Control Dep"];
180 -> 187 [label="Control Dep"];
180 -> 189 [label="Control Dep"];
188 -> 186 [label="AST"];
188 -> 187 [label="AST"];
190 -> 185 [label="AST"];
190 -> 188 [label="AST"];
190 -> 184 [label="AST"];
190 -> 189 [label="AST"];
191 -> 182 [label="AST"];
191 -> 183 [label="AST"];
191 -> 181 [label="AST"];
191 -> 190 [label="AST"];
192 -> 191 [label="AST"];
193 -> 180 [label="AST"];
193 -> 192 [label="AST"];
194 -> 193 [label="AST"];
195 -> 170 [label="AST"];
195 -> 175 [label="AST"];
195 -> 177 [label="AST"];
195 -> 194 [label="AST"];
196 -> 197 [label="AST"];
200 -> 196 [label="Data Dep"];
201 -> 199 [label="AST"];
201 -> 200 [label="AST"];
201 -> 198 [label="AST"];
202 -> 196 [label="AST"];
202 -> 201 [label="AST"];
203 -> 166 [label="AST"];
203 -> 195 [label="AST"];
203 -> 202 [label="AST"];
204 -> 153 [label="AST"];
204 -> 158 [label="AST"];
204 -> 203 [label="AST"];
205 -> 11 [label="AST"];
205 -> 17 [label="AST"];
205 -> 21 [label="AST"];
205 -> 25 [label="AST"];
205 -> 32 [label="AST"];
205 -> 128 [label="AST"];
205 -> 139 [label="AST"];
205 -> 152 [label="AST"];
205 -> 204 [label="AST"];
206 -> 1 [label="AST"];
206 -> 0 [label="AST"];
206 -> 2 [label="AST"];
206 -> 4 [label="AST"];
206 -> 205 [label="AST"];
207 -> 208 [label="Action"];
}