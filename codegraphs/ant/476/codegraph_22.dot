digraph "processTasks#?" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@processTasks" shape=ellipse]
2 [label="3:CtFieldReadImpl@implicitTag" shape=ellipse]
3 [label="3:CtLiteralImpl@null" shape=ellipse]
4 [label="3:CtBinaryOperatorImpl@implicitTag != null" shape=ellipse]
5 [label="4:CtReturnImpl@return" shape=ellipse]
6 [label="3:CtBlockImpl@\{
    return;
\}" shape=ellipse]
7 [label="3:CtIfImpl@if (implicitTag != null) \{
    return;
\}" shape=ellipse]
8 [label="6:CtTypeReferenceImpl@Iterator" shape=ellipse]
9 [label="6:CtExecutableReferenceImpl@iterator()" shape=ellipse]
10 [label="6:CtVirtualElement@iterator" shape=ellipse]
11 [label="6:CtFieldReadImpl@unknownElements" shape=ellipse]
12 [label="6:CtInvocationImpl@unknownElements.iterator()" shape=ellipse]
13 [label="6:CtVirtualElement@i" shape=ellipse]
14 [label="6:CtLocalVariableImpl@Iterator i = unknownElements.iterator()" shape=ellipse]
15 [label="6:CtExecutableReferenceImpl@hasNext()" shape=ellipse]
16 [label="6:CtVirtualElement@hasNext" shape=ellipse]
17 [label="6:CtVariableReadImpl@i" shape=ellipse]
18 [label="6:CtInvocationImpl@i.hasNext()" shape=ellipse]
19 [label="7:CtTypeReferenceImpl@UnknownElement" shape=ellipse]
20 [label="7:CtExecutableReferenceImpl@next()" shape=ellipse]
21 [label="7:CtVirtualElement@next" shape=ellipse]
22 [label="7:CtVariableReadImpl@i" shape=ellipse]
23 [label="7:CtInvocationImpl@((UnknownElement) (i.next()))" shape=ellipse]
24 [label="7:CtTypeReferenceImpl@UnknownElement" shape=ellipse]
25 [label="7:CtVirtualElement@ue" shape=ellipse]
26 [label="7:CtLocalVariableImpl@UnknownElement ue = ((UnknownElement) (i.next()))" shape=ellipse]
27 [label="8:CtTypeReferenceImpl@String" shape=ellipse]
28 [label="8:CtExecutableReferenceImpl@toLowerCase()" shape=ellipse]
29 [label="8:CtVirtualElement@toLowerCase" shape=ellipse]
30 [label="8:CtExecutableReferenceImpl@extractNameFromComponentName()" shape=ellipse]
31 [label="8:CtVirtualElement@extractNameFromComponentName" shape=ellipse]
32 [label="8:CtTypeAccessImpl@ProjectHelper" shape=ellipse]
33 [label="8:CtExecutableReferenceImpl@getTag()" shape=ellipse]
34 [label="8:CtVirtualElement@getTag" shape=ellipse]
35 [label="8:CtVariableReadImpl@ue" shape=ellipse]
36 [label="8:CtInvocationImpl@ue.getTag()" shape=ellipse]
37 [label="8:CtInvocationImpl@ProjectHelper.extractNameFromComponentName(ue.getTag())" shape=ellipse]
38 [label="8:CtTypeAccessImpl@US" shape=ellipse]
39 [label="8:CtInvocationImpl@ProjectHelper.extractNameFromComponentName(ue.getTag()).toLowerCase(US)" shape=ellipse]
40 [label="8:CtVirtualElement@name" shape=ellipse]
41 [label="8:CtLocalVariableImpl@String name = ProjectHelper.extractNameFromComponentName(ue.getTag()).toLowerCase(US)" shape=ellipse]
42 [label="9:CtExecutableReferenceImpl@get(java.lang.String)" shape=ellipse]
43 [label="9:CtVirtualElement@get" shape=ellipse]
44 [label="9:CtExecutableReferenceImpl@getNsElements()" shape=ellipse]
45 [label="9:CtVirtualElement@getNsElements" shape=ellipse]
46 [label="9:CtInvocationImpl@getNsElements()" shape=ellipse]
47 [label="9:CtVariableReadImpl@name" shape=ellipse]
48 [label="9:CtInvocationImpl@getNsElements().get(name)" shape=ellipse]
49 [label="9:CtLiteralImpl@null" shape=ellipse]
50 [label="9:CtBinaryOperatorImpl@getNsElements().get(name) == null" shape=ellipse]
51 [label="10:CtTypeReferenceImpl@BuildException" shape=ellipse]
52 [label="10:CtLiteralImpl@\"unsupported element \"" shape=ellipse]
53 [label="10:CtVariableReadImpl@name" shape=ellipse]
54 [label="10:CtBinaryOperatorImpl@\"unsupported element \" + name" shape=ellipse]
55 [label="10:CtConstructorCallImpl@new BuildException(\"unsupported element \" + name)" shape=ellipse]
56 [label="10:CtThrowImpl@throw new BuildException(\"unsupported element \" + name)" shape=ellipse]
57 [label="9:CtBlockImpl@\{
    throw new BuildException(\"unsupported element \" + name);
\}" shape=ellipse]
58 [label="9:CtIfImpl@if (getNsElements().get(name) == null) \{
    throw new BuildException(\"unsupported element \" + name);
\}" shape=ellipse]
59 [label="12:CtExecutableReferenceImpl@get(java.lang.String)" shape=ellipse]
60 [label="12:CtVirtualElement@get" shape=ellipse]
61 [label="12:CtFieldReadImpl@presentElements" shape=ellipse]
62 [label="12:CtVariableReadImpl@name" shape=ellipse]
63 [label="12:CtInvocationImpl@presentElements.get(name)" shape=ellipse]
64 [label="12:CtLiteralImpl@null" shape=ellipse]
65 [label="12:CtBinaryOperatorImpl@presentElements.get(name) != null" shape=ellipse]
66 [label="13:CtTypeReferenceImpl@BuildException" shape=ellipse]
67 [label="13:CtLiteralImpl@\"Element \"" shape=ellipse]
68 [label="13:CtVariableReadImpl@name" shape=ellipse]
69 [label="13:CtBinaryOperatorImpl@(\"Element \" + name)" shape=ellipse]
70 [label="13:CtLiteralImpl@\" already present\"" shape=ellipse]
71 [label="13:CtBinaryOperatorImpl@(\"Element \" + name) + \" already present\"" shape=ellipse]
72 [label="13:CtConstructorCallImpl@new BuildException((\"Element \" + name) + \" already present\")" shape=ellipse]
73 [label="13:CtThrowImpl@throw new BuildException((\"Element \" + name) + \" already present\")" shape=ellipse]
74 [label="12:CtBlockImpl@\{
    throw new BuildException((\"Element \" + name) + \" already present\");
\}" shape=ellipse]
75 [label="12:CtIfImpl@if (presentElements.get(name) != null) \{
    throw new BuildException((\"Element \" + name) + \" already present\");
\}" shape=ellipse]
76 [label="15:CtExecutableReferenceImpl@put(java.lang.String,UnknownElement)" shape=ellipse]
77 [label="15:CtVirtualElement@put" shape=ellipse]
78 [label="15:CtFieldReadImpl@presentElements" shape=ellipse]
79 [label="15:CtVariableReadImpl@name" shape=ellipse]
80 [label="15:CtVariableReadImpl@ue" shape=ellipse]
81 [label="15:CtInvocationImpl@presentElements.put(name, ue)" shape=ellipse]
82 [label="6:CtBlockImpl@\{
    UnknownElement ue = ((UnknownElement) (i.next()));
    String name = ProjectHelper.extractNameFromComponentName(ue.getTag()).toLowerCase(US);
    if (getNsElements().get(name) == null) \{
        throw new BuildException(\"unsupported element \" + name);
    \}
    if (presentElements.get(name) != null) \{
        throw new BuildException((\"Element \" + name) + \" already present\");
    \}
    presentElements.put(name, ue);
\}" shape=ellipse]
83 [label="6:CtForImpl@for (Iterator i = unknownElements.iterator(); i.hasNext();) \{
    UnknownElement ue = ((UnknownElement) (i.next()));
    String name = ProjectHelper.extractNameFromComponentName(ue.getTag()).toLowerCase(US);
    if (getNsElements().get(name) == null) \{
        throw new BuildException(\"unsupported element \" + name);
    \}
    if (presentElements.get(name) != null) \{
        throw new BuildException((\"Element \" + name) + \" already present\");
    \}
    presentElements.put(name, ue);
\}" shape=ellipse]
84 [label="2:CtBlockImpl@\{
    if (implicitTag != null) \{
        return;
    \}
    for (Iterator i = unknownElements.iterator(); i.hasNext();) \{
        UnknownElement ue = ((UnknownElement) (i.next()));
        String name = ProjectHelper.extractNameFromComponentName(ue.getTag()).toLowerCase(US);
        if (getNsElements().get(name) == null) \{
            throw new BuildException(\"unsupported element \" + name);
        \}
        if (presentElements.get(name) != null) \{
            throw new BuildException((\"Element \" + name) + \" already present\");
        \}
        presentElements.put(name, ue);
    \}
\}" shape=ellipse]
85 [label="2:CtMethodImpl@private void processTasks() \{
    if (implicitTag != null) \{
        return;
    \}
    for (Iterator i = unknownElements.iterator(); i.hasNext();) \{
        UnknownElement ue = ((UnknownElement) (i.next()));
        String name = ProjectHelper.extractNameFromComponentName(ue.getTag()).toLowerCase(US);
        if (getNsElements().get(name) == null) \{
            throw new BuildException(\"unsupported element \" + name);
        \}
        if (presentElements.get(name) != null) \{
            throw new BuildException((\"Element \" + name) + \" already present\");
        \}
        presentElements.put(name, ue);
    \}
\}" shape=ellipse]
86 [label="8:Update@UPDATE" shape=ellipse]
87 [label="9:CtTypeAccessImpl@ENGLISH" shape=ellipse]
4 -> 2 [label="AST"];
4 -> 3 [label="AST"];
4 -> 6 [label="Control Dep"];
4 -> 5 [label="Control Dep"];
6 -> 5 [label="AST"];
7 -> 4 [label="AST"];
7 -> 6 [label="AST"];
11 -> 13 [label="Data Dep"];
12 -> 10 [label="AST"];
12 -> 11 [label="AST"];
12 -> 9 [label="AST"];
13 -> 17 [label="Define-Use"];
13 -> 22 [label="Define-Use"];
14 -> 13 [label="AST"];
14 -> 8 [label="AST"];
14 -> 12 [label="AST"];
18 -> 16 [label="AST"];
18 -> 17 [label="AST"];
18 -> 15 [label="AST"];
18 -> 82 [label="Control Dep"];
18 -> 26 [label="Control Dep"];
18 -> 23 [label="Control Dep"];
18 -> 20 [label="Control Dep"];
18 -> 22 [label="Control Dep"];
18 -> 41 [label="Control Dep"];
18 -> 39 [label="Control Dep"];
18 -> 28 [label="Control Dep"];
18 -> 37 [label="Control Dep"];
18 -> 30 [label="Control Dep"];
18 -> 32 [label="Control Dep"];
18 -> 36 [label="Control Dep"];
18 -> 33 [label="Control Dep"];
18 -> 35 [label="Control Dep"];
18 -> 38 [label="Control Dep"];
18 -> 58 [label="Control Dep"];
18 -> 50 [label="Control Dep"];
18 -> 48 [label="Control Dep"];
18 -> 42 [label="Control Dep"];
18 -> 46 [label="Control Dep"];
18 -> 44 [label="Control Dep"];
18 -> 47 [label="Control Dep"];
18 -> 49 [label="Control Dep"];
18 -> 75 [label="Control Dep"];
18 -> 65 [label="Control Dep"];
18 -> 63 [label="Control Dep"];
18 -> 59 [label="Control Dep"];
18 -> 61 [label="Control Dep"];
18 -> 62 [label="Control Dep"];
18 -> 64 [label="Control Dep"];
18 -> 81 [label="Control Dep"];
18 -> 76 [label="Control Dep"];
18 -> 78 [label="Control Dep"];
18 -> 79 [label="Control Dep"];
18 -> 80 [label="Control Dep"];
22 -> 25 [label="Data Dep"];
23 -> 21 [label="AST"];
23 -> 24 [label="AST"];
23 -> 22 [label="AST"];
23 -> 20 [label="AST"];
25 -> 35 [label="Define-Use"];
25 -> 80 [label="Define-Use"];
26 -> 25 [label="AST"];
26 -> 19 [label="AST"];
26 -> 23 [label="AST"];
35 -> 40 [label="Data Dep"];
36 -> 34 [label="AST"];
36 -> 35 [label="AST"];
36 -> 33 [label="AST"];
37 -> 31 [label="AST"];
37 -> 32 [label="AST"];
37 -> 30 [label="AST"];
37 -> 36 [label="AST"];
38 -> 86 [label="Action"];
39 -> 29 [label="AST"];
39 -> 37 [label="AST"];
39 -> 28 [label="AST"];
39 -> 38 [label="AST"];
40 -> 47 [label="Define-Use"];
40 -> 53 [label="Define-Use"];
40 -> 62 [label="Define-Use"];
40 -> 68 [label="Define-Use"];
40 -> 79 [label="Define-Use"];
41 -> 40 [label="AST"];
41 -> 27 [label="AST"];
41 -> 39 [label="AST"];
46 -> 45 [label="AST"];
46 -> 44 [label="AST"];
48 -> 43 [label="AST"];
48 -> 46 [label="AST"];
48 -> 42 [label="AST"];
48 -> 47 [label="AST"];
50 -> 48 [label="AST"];
50 -> 49 [label="AST"];
50 -> 57 [label="Control Dep"];
50 -> 56 [label="Control Dep"];
50 -> 55 [label="Control Dep"];
50 -> 54 [label="Control Dep"];
50 -> 52 [label="Control Dep"];
50 -> 53 [label="Control Dep"];
54 -> 52 [label="AST"];
54 -> 53 [label="AST"];
55 -> 54 [label="AST"];
56 -> 55 [label="AST"];
57 -> 56 [label="AST"];
58 -> 50 [label="AST"];
58 -> 57 [label="AST"];
63 -> 60 [label="AST"];
63 -> 61 [label="AST"];
63 -> 59 [label="AST"];
63 -> 62 [label="AST"];
65 -> 63 [label="AST"];
65 -> 64 [label="AST"];
65 -> 74 [label="Control Dep"];
65 -> 73 [label="Control Dep"];
65 -> 72 [label="Control Dep"];
65 -> 71 [label="Control Dep"];
65 -> 69 [label="Control Dep"];
65 -> 67 [label="Control Dep"];
65 -> 68 [label="Control Dep"];
65 -> 70 [label="Control Dep"];
69 -> 67 [label="AST"];
69 -> 68 [label="AST"];
71 -> 69 [label="AST"];
71 -> 70 [label="AST"];
72 -> 71 [label="AST"];
73 -> 72 [label="AST"];
74 -> 73 [label="AST"];
75 -> 65 [label="AST"];
75 -> 74 [label="AST"];
81 -> 77 [label="AST"];
81 -> 78 [label="AST"];
81 -> 76 [label="AST"];
81 -> 79 [label="AST"];
81 -> 80 [label="AST"];
82 -> 26 [label="AST"];
82 -> 41 [label="AST"];
82 -> 58 [label="AST"];
82 -> 75 [label="AST"];
82 -> 81 [label="AST"];
83 -> 14 [label="AST"];
83 -> 18 [label="AST"];
83 -> 82 [label="AST"];
84 -> 7 [label="AST"];
84 -> 83 [label="AST"];
85 -> 1 [label="AST"];
85 -> 0 [label="AST"];
85 -> 84 [label="AST"];
86 -> 87 [label="Action"];
}