digraph "configure#?,Object,AttributeList,Project" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@configure" shape=ellipse]
2 [label="2:CtParameterImpl@Object target" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@Object" shape=ellipse]
4 [label="2:CtParameterImpl@AttributeList attrs" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@AttributeList" shape=ellipse]
6 [label="2:CtParameterImpl@Project project" shape=ellipse]
7 [label="2:CtTypeReferenceImpl@Project" shape=ellipse]
8 [label="3:CtTypeReferenceImpl@BuildException" shape=ellipse]
9 [label="4:CtVariableReadImpl@target" shape=ellipse]
10 [label="4:CtTypeAccessImpl@TypeAdapter" shape=ellipse]
11 [label="4:CtTypeReferenceImpl@TypeAdapter" shape=ellipse]
12 [label="4:CtBinaryOperatorImpl@target instanceof TypeAdapter" shape=ellipse]
13 [label="5:CtVariableWriteImpl@target" shape=ellipse]
14 [label="5:CtExecutableReferenceImpl@getProxy()" shape=ellipse]
15 [label="5:CtVirtualElement@getProxy" shape=ellipse]
16 [label="5:CtVariableReadImpl@((TypeAdapter) (target))" shape=ellipse]
17 [label="5:CtTypeReferenceImpl@TypeAdapter" shape=ellipse]
18 [label="5:CtInvocationImpl@((TypeAdapter) (target)).getProxy()" shape=ellipse]
19 [label="5:CtAssignmentImpl@target = ((TypeAdapter) (target)).getProxy()" shape=ellipse]
20 [label="4:CtBlockImpl@\{
    target = ((TypeAdapter) (target)).getProxy();
\}" shape=ellipse]
21 [label="4:CtIfImpl@if (target instanceof TypeAdapter) \{
    target = ((TypeAdapter) (target)).getProxy();
\}" shape=ellipse]
22 [label="7:CtTypeReferenceImpl@IntrospectionHelper" shape=ellipse]
23 [label="7:CtExecutableReferenceImpl@getHelper(Project,java.lang.Class)" shape=ellipse]
24 [label="7:CtVirtualElement@getHelper" shape=ellipse]
25 [label="7:CtTypeAccessImpl@IntrospectionHelper" shape=ellipse]
26 [label="7:CtVariableReadImpl@project" shape=ellipse]
27 [label="7:CtExecutableReferenceImpl@getClass()" shape=ellipse]
28 [label="7:CtVirtualElement@getClass" shape=ellipse]
29 [label="7:CtVariableReadImpl@target" shape=ellipse]
30 [label="7:CtInvocationImpl@target.getClass()" shape=ellipse]
31 [label="7:CtInvocationImpl@IntrospectionHelper.getHelper(project, target.getClass())" shape=ellipse]
32 [label="7:CtVirtualElement@ih" shape=ellipse]
33 [label="7:CtLocalVariableImpl@IntrospectionHelper ih = IntrospectionHelper.getHelper(project, target.getClass())" shape=ellipse]
34 [label="8:CtTypeReferenceImpl@int" shape=ellipse]
35 [label="8:CtLiteralImpl@0" shape=ellipse]
36 [label="8:CtVirtualElement@i" shape=ellipse]
37 [label="8:CtLocalVariableImpl@int i = 0" shape=ellipse]
38 [label="8:CtExecutableReferenceImpl@getLength()" shape=ellipse]
39 [label="8:CtVirtualElement@getLength" shape=ellipse]
40 [label="8:CtVariableReadImpl@attrs" shape=ellipse]
41 [label="8:CtInvocationImpl@attrs.getLength()" shape=ellipse]
42 [label="8:CtVirtualElement@length" shape=ellipse]
43 [label="8:CtLocalVariableImpl@int length = attrs.getLength()" shape=ellipse]
44 [label="8:CtTypeReferenceImpl@int" shape=ellipse]
45 [label="8:CtVariableReadImpl@i" shape=ellipse]
46 [label="8:CtVariableReadImpl@length" shape=ellipse]
47 [label="8:CtBinaryOperatorImpl@i < length" shape=ellipse]
48 [label="8:CtVariableWriteImpl@i" shape=ellipse]
49 [label="8:CtUnaryOperatorImpl@i++" shape=ellipse]
50 [label="9:CtTypeReferenceImpl@String" shape=ellipse]
51 [label="9:CtExecutableReferenceImpl@replaceProperties(<unknown>,<unknown>,<unknown>)" shape=ellipse]
52 [label="9:CtVirtualElement@replaceProperties" shape=ellipse]
53 [label="9:CtVariableReadImpl@project" shape=ellipse]
54 [label="9:CtExecutableReferenceImpl@getValue(int)" shape=ellipse]
55 [label="9:CtVirtualElement@getValue" shape=ellipse]
56 [label="9:CtVariableReadImpl@attrs" shape=ellipse]
57 [label="9:CtVariableReadImpl@i" shape=ellipse]
58 [label="9:CtInvocationImpl@attrs.getValue(i)" shape=ellipse]
59 [label="9:CtExecutableReferenceImpl@getProperties()" shape=ellipse]
60 [label="9:CtVirtualElement@getProperties" shape=ellipse]
61 [label="9:CtVariableReadImpl@project" shape=ellipse]
62 [label="9:CtInvocationImpl@project.getProperties()" shape=ellipse]
63 [label="9:CtInvocationImpl@replaceProperties(project, attrs.getValue(i), project.getProperties())" shape=ellipse]
64 [label="9:CtVirtualElement@value" shape=ellipse]
65 [label="9:CtLocalVariableImpl@String value = replaceProperties(project, attrs.getValue(i), project.getProperties())" shape=ellipse]
66 [label="11:CtExecutableReferenceImpl@setAttribute(Project,java.lang.Object,java.lang.String)" shape=ellipse]
67 [label="11:CtVirtualElement@setAttribute" shape=ellipse]
68 [label="11:CtVariableReadImpl@ih" shape=ellipse]
69 [label="11:CtVariableReadImpl@project" shape=ellipse]
70 [label="11:CtVariableReadImpl@target" shape=ellipse]
71 [label="11:CtExecutableReferenceImpl@toLowerCase()" shape=ellipse]
72 [label="11:CtVirtualElement@toLowerCase" shape=ellipse]
73 [label="11:CtExecutableReferenceImpl@getName(int)" shape=ellipse]
74 [label="11:CtVirtualElement@getName" shape=ellipse]
75 [label="11:CtVariableReadImpl@attrs" shape=ellipse]
76 [label="11:CtVariableReadImpl@i" shape=ellipse]
77 [label="11:CtInvocationImpl@attrs.getName(i)" shape=ellipse]
78 [label="11:CtTypeAccessImpl@US" shape=ellipse]
79 [label="11:CtInvocationImpl@attrs.getName(i).toLowerCase(US)" shape=ellipse]
80 [label="11:CtVariableReadImpl@value" shape=ellipse]
81 [label="11:CtInvocationImpl@ih.setAttribute(project, target, attrs.getName(i).toLowerCase(US), value)" shape=ellipse]
82 [label="10:CtBlockImpl@\{
    ih.setAttribute(project, target, attrs.getName(i).toLowerCase(US), value);
\}" shape=ellipse]
83 [label="12:CtVirtualElement@be" shape=ellipse]
84 [label="12:CtTypeReferenceImpl@BuildException" shape=ellipse]
85 [label="12:CtCatchVariableImpl@BuildException be" shape=ellipse]
86 [label="13:CtExecutableReferenceImpl@equals(java.lang.String)" shape=ellipse]
87 [label="13:CtVirtualElement@equals" shape=ellipse]
88 [label="13:CtExecutableReferenceImpl@getName(int)" shape=ellipse]
89 [label="13:CtVirtualElement@getName" shape=ellipse]
90 [label="13:CtVariableReadImpl@attrs" shape=ellipse]
91 [label="13:CtVariableReadImpl@i" shape=ellipse]
92 [label="13:CtInvocationImpl@attrs.getName(i)" shape=ellipse]
93 [label="13:CtLiteralImpl@\"id\"" shape=ellipse]
94 [label="13:CtInvocationImpl@attrs.getName(i).equals(\"id\")" shape=ellipse]
95 [label="13:CtUnaryOperatorImpl@!attrs.getName(i).equals(\"id\")" shape=ellipse]
96 [label="14:CtVariableReadImpl@be" shape=ellipse]
97 [label="14:CtThrowImpl@throw be" shape=ellipse]
98 [label="13:CtBlockImpl@\{
    throw be;
\}" shape=ellipse]
99 [label="13:CtIfImpl@if (!attrs.getName(i).equals(\"id\")) \{
    throw be;
\}" shape=ellipse]
100 [label="12:CtBlockImpl@\{
    if (!attrs.getName(i).equals(\"id\")) \{
        throw be;
    \}
\}" shape=ellipse]
101 [label="12:CtCatchImpl@ catch (BuildException be) \{
    if (!attrs.getName(i).equals(\"id\")) \{
        throw be;
    \}
\}" shape=ellipse]
102 [label="10:CtTryImpl@try \{
    ih.setAttribute(project, target, attrs.getName(i).toLowerCase(US), value);
\} catch (BuildException be) \{
    if (!attrs.getName(i).equals(\"id\")) \{
        throw be;
    \}
\}" shape=ellipse]
103 [label="8:CtBlockImpl@\{
    String value = replaceProperties(project, attrs.getValue(i), project.getProperties());
    try \{
        ih.setAttribute(project, target, attrs.getName(i).toLowerCase(US), value);
    \} catch (BuildException be) \{
        if (!attrs.getName(i).equals(\"id\")) \{
            throw be;
        \}
    \}
\}" shape=ellipse]
104 [label="8:CtForImpl@for (int i = 0, length = attrs.getLength(); i < length; i++) \{
    String value = replaceProperties(project, attrs.getValue(i), project.getProperties());
    try \{
        ih.setAttribute(project, target, attrs.getName(i).toLowerCase(US), value);
    \} catch (BuildException be) \{
        if (!attrs.getName(i).equals(\"id\")) \{
            throw be;
        \}
    \}
\}" shape=ellipse]
105 [label="3:CtBlockImpl@\{
    if (target instanceof TypeAdapter) \{
        target = ((TypeAdapter) (target)).getProxy();
    \}
    IntrospectionHelper ih = IntrospectionHelper.getHelper(project, target.getClass());
    for (int i = 0, length = attrs.getLength(); i < length; i++) \{
        String value = replaceProperties(project, attrs.getValue(i), project.getProperties());
        try \{
            ih.setAttribute(project, target, attrs.getName(i).toLowerCase(US), value);
        \} catch (BuildException be) \{
            if (!attrs.getName(i).equals(\"id\")) \{
                throw be;
            \}
        \}
    \}
\}" shape=ellipse]
106 [label="2:CtMethodImpl@public static void configure(Object target, AttributeList attrs, Project project) throws BuildException \{
    if (target instanceof TypeAdapter) \{
        target = ((TypeAdapter) (target)).getProxy();
    \}
    IntrospectionHelper ih = IntrospectionHelper.getHelper(project, target.getClass());
    for (int i = 0, length = attrs.getLength(); i < length; i++) \{
        String value = replaceProperties(project, attrs.getValue(i), project.getProperties());
        try \{
            ih.setAttribute(project, target, attrs.getName(i).toLowerCase(US), value);
        \} catch (BuildException be) \{
            if (!attrs.getName(i).equals(\"id\")) \{
                throw be;
            \}
        \}
    \}
\}" shape=ellipse]
107 [label="11:Update@UPDATE" shape=ellipse]
108 [label="11:CtTypeAccessImpl@ENGLISH" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
6 -> 7 [label="AST"];
10 -> 11 [label="AST"];
12 -> 9 [label="AST"];
12 -> 10 [label="AST"];
12 -> 20 [label="Control Dep"];
12 -> 19 [label="Control Dep"];
12 -> 13 [label="Control Dep"];
12 -> 18 [label="Control Dep"];
12 -> 14 [label="Control Dep"];
12 -> 16 [label="Control Dep"];
13 -> 29 [label="Define-Use"];
13 -> 70 [label="Define-Use"];
16 -> 17 [label="AST"];
16 -> 13 [label="Data Dep"];
18 -> 15 [label="AST"];
18 -> 16 [label="AST"];
18 -> 14 [label="AST"];
19 -> 13 [label="AST"];
19 -> 18 [label="AST"];
20 -> 19 [label="AST"];
21 -> 12 [label="AST"];
21 -> 20 [label="AST"];
26 -> 32 [label="Data Dep"];
29 -> 32 [label="Data Dep"];
30 -> 28 [label="AST"];
30 -> 29 [label="AST"];
30 -> 27 [label="AST"];
31 -> 24 [label="AST"];
31 -> 25 [label="AST"];
31 -> 23 [label="AST"];
31 -> 26 [label="AST"];
31 -> 30 [label="AST"];
32 -> 68 [label="Define-Use"];
33 -> 32 [label="AST"];
33 -> 22 [label="AST"];
33 -> 31 [label="AST"];
36 -> 45 [label="Define-Use"];
37 -> 36 [label="AST"];
37 -> 34 [label="AST"];
37 -> 35 [label="AST"];
40 -> 42 [label="Data Dep"];
41 -> 39 [label="AST"];
41 -> 40 [label="AST"];
41 -> 38 [label="AST"];
42 -> 46 [label="Define-Use"];
43 -> 42 [label="AST"];
43 -> 44 [label="AST"];
43 -> 41 [label="AST"];
47 -> 45 [label="AST"];
47 -> 46 [label="AST"];
47 -> 103 [label="Control Dep"];
47 -> 65 [label="Control Dep"];
47 -> 63 [label="Control Dep"];
47 -> 51 [label="Control Dep"];
47 -> 53 [label="Control Dep"];
47 -> 58 [label="Control Dep"];
47 -> 54 [label="Control Dep"];
47 -> 56 [label="Control Dep"];
47 -> 57 [label="Control Dep"];
47 -> 62 [label="Control Dep"];
47 -> 59 [label="Control Dep"];
47 -> 61 [label="Control Dep"];
47 -> 102 [label="Control Dep"];
47 -> 82 [label="Control Dep"];
47 -> 81 [label="Control Dep"];
47 -> 66 [label="Control Dep"];
47 -> 68 [label="Control Dep"];
47 -> 69 [label="Control Dep"];
47 -> 70 [label="Control Dep"];
47 -> 79 [label="Control Dep"];
47 -> 71 [label="Control Dep"];
47 -> 77 [label="Control Dep"];
47 -> 73 [label="Control Dep"];
47 -> 75 [label="Control Dep"];
47 -> 76 [label="Control Dep"];
47 -> 78 [label="Control Dep"];
47 -> 80 [label="Control Dep"];
47 -> 101 [label="Control Dep"];
47 -> 85 [label="Control Dep"];
48 -> 57 [label="Define-Use"];
48 -> 76 [label="Define-Use"];
48 -> 91 [label="Define-Use"];
49 -> 48 [label="AST"];
53 -> 64 [label="Data Dep"];
56 -> 64 [label="Data Dep"];
57 -> 64 [label="Data Dep"];
58 -> 55 [label="AST"];
58 -> 56 [label="AST"];
58 -> 54 [label="AST"];
58 -> 57 [label="AST"];
61 -> 64 [label="Data Dep"];
62 -> 60 [label="AST"];
62 -> 61 [label="AST"];
62 -> 59 [label="AST"];
63 -> 52 [label="AST"];
63 -> 51 [label="AST"];
63 -> 53 [label="AST"];
63 -> 58 [label="AST"];
63 -> 62 [label="AST"];
64 -> 80 [label="Define-Use"];
65 -> 64 [label="AST"];
65 -> 50 [label="AST"];
65 -> 63 [label="AST"];
77 -> 74 [label="AST"];
77 -> 75 [label="AST"];
77 -> 73 [label="AST"];
77 -> 76 [label="AST"];
78 -> 107 [label="Action"];
79 -> 72 [label="AST"];
79 -> 77 [label="AST"];
79 -> 71 [label="AST"];
79 -> 78 [label="AST"];
81 -> 67 [label="AST"];
81 -> 68 [label="AST"];
81 -> 66 [label="AST"];
81 -> 69 [label="AST"];
81 -> 70 [label="AST"];
81 -> 79 [label="AST"];
81 -> 80 [label="AST"];
82 -> 81 [label="AST"];
83 -> 96 [label="Define-Use"];
85 -> 83 [label="AST"];
85 -> 84 [label="AST"];
85 -> 100 [label="Control Dep"];
85 -> 99 [label="Control Dep"];
85 -> 95 [label="Control Dep"];
85 -> 94 [label="Control Dep"];
85 -> 86 [label="Control Dep"];
85 -> 92 [label="Control Dep"];
85 -> 88 [label="Control Dep"];
85 -> 90 [label="Control Dep"];
85 -> 91 [label="Control Dep"];
85 -> 93 [label="Control Dep"];
92 -> 89 [label="AST"];
92 -> 90 [label="AST"];
92 -> 88 [label="AST"];
92 -> 91 [label="AST"];
94 -> 87 [label="AST"];
94 -> 92 [label="AST"];
94 -> 86 [label="AST"];
94 -> 93 [label="AST"];
95 -> 94 [label="AST"];
95 -> 98 [label="Control Dep"];
95 -> 97 [label="Control Dep"];
95 -> 96 [label="Control Dep"];
97 -> 96 [label="AST"];
98 -> 97 [label="AST"];
99 -> 95 [label="AST"];
99 -> 98 [label="AST"];
100 -> 99 [label="AST"];
101 -> 85 [label="AST"];
101 -> 100 [label="AST"];
102 -> 82 [label="AST"];
102 -> 101 [label="AST"];
103 -> 65 [label="AST"];
103 -> 102 [label="AST"];
104 -> 37 [label="AST"];
104 -> 43 [label="AST"];
104 -> 47 [label="AST"];
104 -> 49 [label="AST"];
104 -> 103 [label="AST"];
105 -> 21 [label="AST"];
105 -> 33 [label="AST"];
105 -> 104 [label="AST"];
106 -> 1 [label="AST"];
106 -> 0 [label="AST"];
106 -> 2 [label="AST"];
106 -> 4 [label="AST"];
106 -> 6 [label="AST"];
106 -> 8 [label="AST"];
106 -> 105 [label="AST"];
107 -> 108 [label="Action"];
}