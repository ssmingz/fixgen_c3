digraph "macroSubs#?,String,Map" {
0 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
1 [label="2:CtVirtualElement@macroSubs" shape=ellipse]
2 [label="2:CtParameterImpl@String s" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
4 [label="2:CtParameterImpl@Map macroMapping" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@Map" shape=ellipse]
6 [label="3:CtVariableReadImpl@s" shape=ellipse]
7 [label="3:CtLiteralImpl@null" shape=ellipse]
8 [label="3:CtBinaryOperatorImpl@s == null" shape=ellipse]
9 [label="4:CtLiteralImpl@null" shape=ellipse]
10 [label="4:CtReturnImpl@return null" shape=ellipse]
11 [label="3:CtBlockImpl@\{
    return null;
\}" shape=ellipse]
12 [label="3:CtIfImpl@if (s == null) \{
    return null;
\}" shape=ellipse]
13 [label="6:CtTypeReferenceImpl@StringBuffer" shape=ellipse]
14 [label="6:CtTypeReferenceImpl@StringBuffer" shape=ellipse]
15 [label="6:CtConstructorCallImpl@new StringBuffer()" shape=ellipse]
16 [label="6:CtVirtualElement@ret" shape=ellipse]
17 [label="6:CtLocalVariableImpl@StringBuffer ret = new StringBuffer()" shape=ellipse]
18 [label="7:CtTypeReferenceImpl@StringBuffer" shape=ellipse]
19 [label="7:CtLiteralImpl@null" shape=ellipse]
20 [label="7:CtVirtualElement@macroName" shape=ellipse]
21 [label="7:CtLocalVariableImpl@StringBuffer macroName = null" shape=ellipse]
22 [label="8:CtTypeReferenceImpl@int" shape=ellipse]
23 [label="8:CtFieldReadImpl@STATE_NORMAL" shape=ellipse]
24 [label="8:CtVirtualElement@state" shape=ellipse]
25 [label="8:CtLocalVariableImpl@int state = STATE_NORMAL" shape=ellipse]
26 [label="9:CtTypeReferenceImpl@int" shape=ellipse]
27 [label="9:CtLiteralImpl@0" shape=ellipse]
28 [label="9:CtVirtualElement@i" shape=ellipse]
29 [label="9:CtLocalVariableImpl@int i = 0" shape=ellipse]
30 [label="9:CtVariableReadImpl@i" shape=ellipse]
31 [label="9:CtExecutableReferenceImpl@length()" shape=ellipse]
32 [label="9:CtVirtualElement@length" shape=ellipse]
33 [label="9:CtVariableReadImpl@s" shape=ellipse]
34 [label="9:CtInvocationImpl@s.length()" shape=ellipse]
35 [label="9:CtBinaryOperatorImpl@i < s.length()" shape=ellipse]
36 [label="9:CtVariableWriteImpl@i" shape=ellipse]
37 [label="9:CtUnaryOperatorImpl@++i" shape=ellipse]
38 [label="10:CtTypeReferenceImpl@char" shape=ellipse]
39 [label="10:CtExecutableReferenceImpl@charAt(int)" shape=ellipse]
40 [label="10:CtVirtualElement@charAt" shape=ellipse]
41 [label="10:CtVariableReadImpl@s" shape=ellipse]
42 [label="10:CtVariableReadImpl@i" shape=ellipse]
43 [label="10:CtInvocationImpl@s.charAt(i)" shape=ellipse]
44 [label="10:CtVirtualElement@ch" shape=ellipse]
45 [label="10:CtLocalVariableImpl@char ch = s.charAt(i)" shape=ellipse]
46 [label="11:CtVariableReadImpl@state" shape=ellipse]
47 [label="12:CtFieldReadImpl@STATE_NORMAL" shape=ellipse]
48 [label="13:CtVariableReadImpl@ch" shape=ellipse]
49 [label="13:CtLiteralImpl@'@'" shape=ellipse]
50 [label="13:CtBinaryOperatorImpl@ch == '@'" shape=ellipse]
51 [label="14:CtVariableWriteImpl@state" shape=ellipse]
52 [label="14:CtFieldReadImpl@STATE_EXPECT_BRACKET" shape=ellipse]
53 [label="14:CtAssignmentImpl@state = STATE_EXPECT_BRACKET" shape=ellipse]
54 [label="13:CtBlockImpl@\{
    state = STATE_EXPECT_BRACKET;
\}" shape=ellipse]
55 [label="16:CtExecutableReferenceImpl@append(char)" shape=ellipse]
56 [label="16:CtVirtualElement@append" shape=ellipse]
57 [label="16:CtVariableReadImpl@ret" shape=ellipse]
58 [label="16:CtVariableReadImpl@ch" shape=ellipse]
59 [label="16:CtInvocationImpl@ret.append(ch)" shape=ellipse]
60 [label="15:CtBlockImpl@\{
    ret.append(ch);
\}" shape=ellipse]
61 [label="13:CtIfImpl@if (ch == '@') \{
    state = STATE_EXPECT_BRACKET;
\} else \{
    ret.append(ch);
\}" shape=ellipse]
62 [label="18:CtBreakImpl@break" shape=ellipse]
63 [label="12:CtCaseImpl@case STATE_NORMAL :
    if (ch == '@') \{
        state = STATE_EXPECT_BRACKET;
    \} else \{
        ret.append(ch);
    \}
    break;" shape=ellipse]
64 [label="19:CtFieldReadImpl@STATE_EXPECT_BRACKET" shape=ellipse]
65 [label="20:CtVariableReadImpl@ch" shape=ellipse]
66 [label="20:CtLiteralImpl@'\{'" shape=ellipse]
67 [label="20:CtBinaryOperatorImpl@ch == '\{'" shape=ellipse]
68 [label="21:CtVariableWriteImpl@state" shape=ellipse]
69 [label="21:CtFieldReadImpl@STATE_EXPECT_NAME" shape=ellipse]
70 [label="21:CtAssignmentImpl@state = STATE_EXPECT_NAME" shape=ellipse]
71 [label="22:CtVariableWriteImpl@macroName" shape=ellipse]
72 [label="22:CtTypeReferenceImpl@StringBuffer" shape=ellipse]
73 [label="22:CtConstructorCallImpl@new StringBuffer()" shape=ellipse]
74 [label="22:CtAssignmentImpl@macroName = new StringBuffer()" shape=ellipse]
75 [label="20:CtBlockImpl@\{
    state = STATE_EXPECT_NAME;
    macroName = new StringBuffer();
\}" shape=ellipse]
76 [label="23:CtVariableReadImpl@ch" shape=ellipse]
77 [label="23:CtLiteralImpl@'@'" shape=ellipse]
78 [label="23:CtBinaryOperatorImpl@ch == '@'" shape=ellipse]
79 [label="24:CtVariableWriteImpl@state" shape=ellipse]
80 [label="24:CtFieldReadImpl@STATE_NORMAL" shape=ellipse]
81 [label="24:CtAssignmentImpl@state = STATE_NORMAL" shape=ellipse]
82 [label="25:CtExecutableReferenceImpl@append(char)" shape=ellipse]
83 [label="25:CtVirtualElement@append" shape=ellipse]
84 [label="25:CtVariableReadImpl@ret" shape=ellipse]
85 [label="25:CtLiteralImpl@'@'" shape=ellipse]
86 [label="25:CtInvocationImpl@ret.append('@')" shape=ellipse]
87 [label="23:CtBlockImpl@\{
    state = STATE_NORMAL;
    ret.append('@');
\}" shape=ellipse]
88 [label="27:CtVariableWriteImpl@state" shape=ellipse]
89 [label="27:CtFieldReadImpl@STATE_NORMAL" shape=ellipse]
90 [label="27:CtAssignmentImpl@state = STATE_NORMAL" shape=ellipse]
91 [label="28:CtExecutableReferenceImpl@append(char)" shape=ellipse]
92 [label="28:CtVirtualElement@append" shape=ellipse]
93 [label="28:CtVariableReadImpl@ret" shape=ellipse]
94 [label="28:CtLiteralImpl@'@'" shape=ellipse]
95 [label="28:CtInvocationImpl@ret.append('@')" shape=ellipse]
96 [label="29:CtExecutableReferenceImpl@append(char)" shape=ellipse]
97 [label="29:CtVirtualElement@append" shape=ellipse]
98 [label="29:CtVariableReadImpl@ret" shape=ellipse]
99 [label="29:CtVariableReadImpl@ch" shape=ellipse]
100 [label="29:CtInvocationImpl@ret.append(ch)" shape=ellipse]
101 [label="26:CtBlockImpl@\{
    state = STATE_NORMAL;
    ret.append('@');
    ret.append(ch);
\}" shape=ellipse]
102 [label="23:CtIfImpl@if (ch == '@') \{
    state = STATE_NORMAL;
    ret.append('@');
\} else \{
    state = STATE_NORMAL;
    ret.append('@');
    ret.append(ch);
\}" shape=ellipse]
103 [label="23:CtBlockImpl@
    if (ch == '@') \{
        state = STATE_NORMAL;
        ret.append('@');
    \} else \{
        state = STATE_NORMAL;
        ret.append('@');
        ret.append(ch);
    \}
" shape=ellipse]
104 [label="20:CtIfImpl@if (ch == '\{') \{
    state = STATE_EXPECT_NAME;
    macroName = new StringBuffer();
\} else if (ch == '@') \{
    state = STATE_NORMAL;
    ret.append('@');
\} else \{
    state = STATE_NORMAL;
    ret.append('@');
    ret.append(ch);
\}" shape=ellipse]
105 [label="31:CtBreakImpl@break" shape=ellipse]
106 [label="19:CtCaseImpl@case STATE_EXPECT_BRACKET :
    if (ch == '\{') \{
        state = STATE_EXPECT_NAME;
        macroName = new StringBuffer();
    \} else if (ch == '@') \{
        state = STATE_NORMAL;
        ret.append('@');
    \} else \{
        state = STATE_NORMAL;
        ret.append('@');
        ret.append(ch);
    \}
    break;" shape=ellipse]
107 [label="32:CtFieldReadImpl@STATE_EXPECT_NAME" shape=ellipse]
108 [label="33:CtVariableReadImpl@ch" shape=ellipse]
109 [label="33:CtLiteralImpl@'\}'" shape=ellipse]
110 [label="33:CtBinaryOperatorImpl@ch == '\}'" shape=ellipse]
111 [label="34:CtVariableWriteImpl@state" shape=ellipse]
112 [label="34:CtFieldReadImpl@STATE_NORMAL" shape=ellipse]
113 [label="34:CtAssignmentImpl@state = STATE_NORMAL" shape=ellipse]
114 [label="35:CtTypeReferenceImpl@String" shape=ellipse]
115 [label="35:CtExecutableReferenceImpl@toLowerCase(java.util.Locale)" shape=ellipse]
116 [label="35:CtVirtualElement@toLowerCase" shape=ellipse]
117 [label="35:CtExecutableReferenceImpl@toString()" shape=ellipse]
118 [label="35:CtVirtualElement@toString" shape=ellipse]
119 [label="35:CtVariableReadImpl@macroName" shape=ellipse]
120 [label="35:CtInvocationImpl@macroName.toString()" shape=ellipse]
121 [label="35:CtTypeAccessImpl@US" shape=ellipse]
122 [label="35:CtInvocationImpl@macroName.toString().toLowerCase(US)" shape=ellipse]
123 [label="35:CtVirtualElement@name" shape=ellipse]
124 [label="35:CtLocalVariableImpl@String name = macroName.toString().toLowerCase(US)" shape=ellipse]
125 [label="36:CtTypeReferenceImpl@String" shape=ellipse]
126 [label="36:CtExecutableReferenceImpl@get(java.lang.String)" shape=ellipse]
127 [label="36:CtVirtualElement@get" shape=ellipse]
128 [label="36:CtVariableReadImpl@macroMapping" shape=ellipse]
129 [label="36:CtVariableReadImpl@name" shape=ellipse]
130 [label="36:CtInvocationImpl@((String) (macroMapping.get(name)))" shape=ellipse]
131 [label="36:CtTypeReferenceImpl@String" shape=ellipse]
132 [label="36:CtVirtualElement@value" shape=ellipse]
133 [label="36:CtLocalVariableImpl@String value = ((String) (macroMapping.get(name)))" shape=ellipse]
134 [label="37:CtVariableReadImpl@value" shape=ellipse]
135 [label="37:CtLiteralImpl@null" shape=ellipse]
136 [label="37:CtBinaryOperatorImpl@value == null" shape=ellipse]
137 [label="38:CtExecutableReferenceImpl@append(java.lang.String)" shape=ellipse]
138 [label="38:CtVirtualElement@append" shape=ellipse]
139 [label="38:CtVariableReadImpl@ret" shape=ellipse]
140 [label="38:CtLiteralImpl@\"@\{\"" shape=ellipse]
141 [label="38:CtInvocationImpl@ret.append(\"@\{\")" shape=ellipse]
142 [label="39:CtExecutableReferenceImpl@append(java.lang.String)" shape=ellipse]
143 [label="39:CtVirtualElement@append" shape=ellipse]
144 [label="39:CtVariableReadImpl@ret" shape=ellipse]
145 [label="39:CtVariableReadImpl@name" shape=ellipse]
146 [label="39:CtInvocationImpl@ret.append(name)" shape=ellipse]
147 [label="40:CtExecutableReferenceImpl@append(java.lang.String)" shape=ellipse]
148 [label="40:CtVirtualElement@append" shape=ellipse]
149 [label="40:CtVariableReadImpl@ret" shape=ellipse]
150 [label="40:CtLiteralImpl@\"\}\"" shape=ellipse]
151 [label="40:CtInvocationImpl@ret.append(\"\}\")" shape=ellipse]
152 [label="37:CtBlockImpl@\{
    ret.append(\"@\{\");
    ret.append(name);
    ret.append(\"\}\");
\}" shape=ellipse]
153 [label="42:CtExecutableReferenceImpl@append(java.lang.String)" shape=ellipse]
154 [label="42:CtVirtualElement@append" shape=ellipse]
155 [label="42:CtVariableReadImpl@ret" shape=ellipse]
156 [label="42:CtVariableReadImpl@value" shape=ellipse]
157 [label="42:CtInvocationImpl@ret.append(value)" shape=ellipse]
158 [label="41:CtBlockImpl@\{
    ret.append(value);
\}" shape=ellipse]
159 [label="37:CtIfImpl@if (value == null) \{
    ret.append(\"@\{\");
    ret.append(name);
    ret.append(\"\}\");
\} else \{
    ret.append(value);
\}" shape=ellipse]
160 [label="44:CtVariableWriteImpl@macroName" shape=ellipse]
161 [label="44:CtLiteralImpl@null" shape=ellipse]
162 [label="44:CtAssignmentImpl@macroName = null" shape=ellipse]
163 [label="33:CtBlockImpl@\{
    state = STATE_NORMAL;
    String name = macroName.toString().toLowerCase(US);
    String value = ((String) (macroMapping.get(name)));
    if (value == null) \{
        ret.append(\"@\{\");
        ret.append(name);
        ret.append(\"\}\");
    \} else \{
        ret.append(value);
    \}
    macroName = null;
\}" shape=ellipse]
164 [label="46:CtExecutableReferenceImpl@append(char)" shape=ellipse]
165 [label="46:CtVirtualElement@append" shape=ellipse]
166 [label="46:CtVariableReadImpl@macroName" shape=ellipse]
167 [label="46:CtVariableReadImpl@ch" shape=ellipse]
168 [label="46:CtInvocationImpl@macroName.append(ch)" shape=ellipse]
169 [label="45:CtBlockImpl@\{
    macroName.append(ch);
\}" shape=ellipse]
170 [label="33:CtIfImpl@if (ch == '\}') \{
    state = STATE_NORMAL;
    String name = macroName.toString().toLowerCase(US);
    String value = ((String) (macroMapping.get(name)));
    if (value == null) \{
        ret.append(\"@\{\");
        ret.append(name);
        ret.append(\"\}\");
    \} else \{
        ret.append(value);
    \}
    macroName = null;
\} else \{
    macroName.append(ch);
\}" shape=ellipse]
171 [label="48:CtBreakImpl@break" shape=ellipse]
172 [label="32:CtCaseImpl@case STATE_EXPECT_NAME :
    if (ch == '\}') \{
        state = STATE_NORMAL;
        String name = macroName.toString().toLowerCase(US);
        String value = ((String) (macroMapping.get(name)));
        if (value == null) \{
            ret.append(\"@\{\");
            ret.append(name);
            ret.append(\"\}\");
        \} else \{
            ret.append(value);
        \}
        macroName = null;
    \} else \{
        macroName.append(ch);
    \}
    break;" shape=ellipse]
173 [label="50:CtBreakImpl@break" shape=ellipse]
174 [label="49:CtCaseImpl@default :
    break;" shape=ellipse]
175 [label="11:CtSwitchImpl@switch (state) \{
    case STATE_NORMAL :
        if (ch == '@') \{
            state = STATE_EXPECT_BRACKET;
        \} else \{
            ret.append(ch);
        \}
        break;
    case STATE_EXPECT_BRACKET :
        if (ch == '\{') \{
            state = STATE_EXPECT_NAME;
            macroName = new StringBuffer();
        \} else if (ch == '@') \{
            state = STATE_NORMAL;
            ret.append('@');
        \} else \{
            state = STATE_NORMAL;
            ret.append('@');
            ret.append(ch);
        \}
        break;
    case STATE_EXPECT_NAME :
        if (ch == '\}') \{
            state = STATE_NORMAL;
            String name = macroName.toString().toLowerCase(US);
            String value = ((String) (macroMapping.get(name)));
            if (value == null) \{
                ret.append(\"@\{\");
                ret.append(name);
                ret.append(\"\}\");
            \} else \{
                ret.append(value);
            \}
            macroName = null;
        \} else \{
            macroName.append(ch);
        \}
        break;
    default :
        break;
\}" shape=ellipse]
176 [label="9:CtBlockImpl@\{
    char ch = s.charAt(i);
    switch (state) \{
        case STATE_NORMAL :
            if (ch == '@') \{
                state = STATE_EXPECT_BRACKET;
            \} else \{
                ret.append(ch);
            \}
            break;
        case STATE_EXPECT_BRACKET :
            if (ch == '\{') \{
                state = STATE_EXPECT_NAME;
                macroName = new StringBuffer();
            \} else if (ch == '@') \{
                state = STATE_NORMAL;
                ret.append('@');
            \} else \{
                state = STATE_NORMAL;
                ret.append('@');
                ret.append(ch);
            \}
            break;
        case STATE_EXPECT_NAME :
            if (ch == '\}') \{
                state = STATE_NORMAL;
                String name = macroName.toString().toLowerCase(US);
                String value = ((String) (macroMapping.get(name)));
                if (value == null) \{
                    ret.append(\"@\{\");
                    ret.append(name);
                    ret.append(\"\}\");
                \} else \{
                    ret.append(value);
                \}
                macroName = null;
            \} else \{
                macroName.append(ch);
            \}
            break;
        default :
            break;
    \}
\}" shape=ellipse]
177 [label="9:CtForImpl@for (int i = 0; i < s.length(); ++i) \{
    char ch = s.charAt(i);
    switch (state) \{
        case STATE_NORMAL :
            if (ch == '@') \{
                state = STATE_EXPECT_BRACKET;
            \} else \{
                ret.append(ch);
            \}
            break;
        case STATE_EXPECT_BRACKET :
            if (ch == '\{') \{
                state = STATE_EXPECT_NAME;
                macroName = new StringBuffer();
            \} else if (ch == '@') \{
                state = STATE_NORMAL;
                ret.append('@');
            \} else \{
                state = STATE_NORMAL;
                ret.append('@');
                ret.append(ch);
            \}
            break;
        case STATE_EXPECT_NAME :
            if (ch == '\}') \{
                state = STATE_NORMAL;
                String name = macroName.toString().toLowerCase(US);
                String value = ((String) (macroMapping.get(name)));
                if (value == null) \{
                    ret.append(\"@\{\");
                    ret.append(name);
                    ret.append(\"\}\");
                \} else \{
                    ret.append(value);
                \}
                macroName = null;
            \} else \{
                macroName.append(ch);
            \}
            break;
        default :
            break;
    \}
\}" shape=ellipse]
178 [label="53:CtVariableReadImpl@state" shape=ellipse]
179 [label="54:CtFieldReadImpl@STATE_NORMAL" shape=ellipse]
180 [label="55:CtBreakImpl@break" shape=ellipse]
181 [label="54:CtCaseImpl@case STATE_NORMAL :
    break;" shape=ellipse]
182 [label="56:CtFieldReadImpl@STATE_EXPECT_BRACKET" shape=ellipse]
183 [label="57:CtExecutableReferenceImpl@append(char)" shape=ellipse]
184 [label="57:CtVirtualElement@append" shape=ellipse]
185 [label="57:CtVariableReadImpl@ret" shape=ellipse]
186 [label="57:CtLiteralImpl@'@'" shape=ellipse]
187 [label="57:CtInvocationImpl@ret.append('@')" shape=ellipse]
188 [label="58:CtBreakImpl@break" shape=ellipse]
189 [label="56:CtCaseImpl@case STATE_EXPECT_BRACKET :
    ret.append('@');
    break;" shape=ellipse]
190 [label="59:CtFieldReadImpl@STATE_EXPECT_NAME" shape=ellipse]
191 [label="60:CtExecutableReferenceImpl@append(java.lang.String)" shape=ellipse]
192 [label="60:CtVirtualElement@append" shape=ellipse]
193 [label="60:CtVariableReadImpl@ret" shape=ellipse]
194 [label="60:CtLiteralImpl@\"@\{\"" shape=ellipse]
195 [label="60:CtInvocationImpl@ret.append(\"@\{\")" shape=ellipse]
196 [label="61:CtExecutableReferenceImpl@append(java.lang.String)" shape=ellipse]
197 [label="61:CtVirtualElement@append" shape=ellipse]
198 [label="61:CtVariableReadImpl@ret" shape=ellipse]
199 [label="61:CtExecutableReferenceImpl@toString()" shape=ellipse]
200 [label="61:CtVirtualElement@toString" shape=ellipse]
201 [label="61:CtVariableReadImpl@macroName" shape=ellipse]
202 [label="61:CtInvocationImpl@macroName.toString()" shape=ellipse]
203 [label="61:CtInvocationImpl@ret.append(macroName.toString())" shape=ellipse]
204 [label="62:CtBreakImpl@break" shape=ellipse]
205 [label="59:CtCaseImpl@case STATE_EXPECT_NAME :
    ret.append(\"@\{\");
    ret.append(macroName.toString());
    break;" shape=ellipse]
206 [label="64:CtBreakImpl@break" shape=ellipse]
207 [label="63:CtCaseImpl@default :
    break;" shape=ellipse]
208 [label="53:CtSwitchImpl@switch (state) \{
    case STATE_NORMAL :
        break;
    case STATE_EXPECT_BRACKET :
        ret.append('@');
        break;
    case STATE_EXPECT_NAME :
        ret.append(\"@\{\");
        ret.append(macroName.toString());
        break;
    default :
        break;
\}" shape=ellipse]
209 [label="66:CtExecutableReferenceImpl@toString()" shape=ellipse]
210 [label="66:CtVirtualElement@toString" shape=ellipse]
211 [label="66:CtVariableReadImpl@ret" shape=ellipse]
212 [label="66:CtInvocationImpl@ret.toString()" shape=ellipse]
213 [label="66:CtReturnImpl@return ret.toString()" shape=ellipse]
214 [label="2:CtBlockImpl@\{
    if (s == null) \{
        return null;
    \}
    StringBuffer ret = new StringBuffer();
    StringBuffer macroName = null;
    int state = STATE_NORMAL;
    for (int i = 0; i < s.length(); ++i) \{
        char ch = s.charAt(i);
        switch (state) \{
            case STATE_NORMAL :
                if (ch == '@') \{
                    state = STATE_EXPECT_BRACKET;
                \} else \{
                    ret.append(ch);
                \}
                break;
            case STATE_EXPECT_BRACKET :
                if (ch == '\{') \{
                    state = STATE_EXPECT_NAME;
                    macroName = new StringBuffer();
                \} else if (ch == '@') \{
                    state = STATE_NORMAL;
                    ret.append('@');
                \} else \{
                    state = STATE_NORMAL;
                    ret.append('@');
                    ret.append(ch);
                \}
                break;
            case STATE_EXPECT_NAME :
                if (ch == '\}') \{
                    state = STATE_NORMAL;
                    String name = macroName.toString().toLowerCase(US);
                    String value = ((String) (macroMapping.get(name)));
                    if (value == null) \{
                        ret.append(\"@\{\");
                        ret.append(name);
                        ret.append(\"\}\");
                    \} else \{
                        ret.append(value);
                    \}
                    macroName = null;
                \} else \{
                    macroName.append(ch);
                \}
                break;
            default :
                break;
        \}
    \}
    switch (state) \{
        case STATE_NORMAL :
            break;
        case STATE_EXPECT_BRACKET :
            ret.append('@');
            break;
        case STATE_EXPECT_NAME :
            ret.append(\"@\{\");
            ret.append(macroName.toString());
            break;
        default :
            break;
    \}
    return ret.toString();
\}" shape=ellipse]
215 [label="2:CtMethodImpl@private String macroSubs(String s, Map macroMapping) \{
    if (s == null) \{
        return null;
    \}
    StringBuffer ret = new StringBuffer();
    StringBuffer macroName = null;
    int state = STATE_NORMAL;
    for (int i = 0; i < s.length(); ++i) \{
        char ch = s.charAt(i);
        switch (state) \{
            case STATE_NORMAL :
                if (ch == '@') \{
                    state = STATE_EXPECT_BRACKET;
                \} else \{
                    ret.append(ch);
                \}
                break;
            case STATE_EXPECT_BRACKET :
                if (ch == '\{') \{
                    state = STATE_EXPECT_NAME;
                    macroName = new StringBuffer();
                \} else if (ch == '@') \{
                    state = STATE_NORMAL;
                    ret.append('@');
                \} else \{
                    state = STATE_NORMAL;
                    ret.append('@');
                    ret.append(ch);
                \}
                break;
            case STATE_EXPECT_NAME :
                if (ch == '\}') \{
                    state = STATE_NORMAL;
                    String name = macroName.toString().toLowerCase(US);
                    String value = ((String) (macroMapping.get(name)));
                    if (value == null) \{
                        ret.append(\"@\{\");
                        ret.append(name);
                        ret.append(\"\}\");
                    \} else \{
                        ret.append(value);
                    \}
                    macroName = null;
                \} else \{
                    macroName.append(ch);
                \}
                break;
            default :
                break;
        \}
    \}
    switch (state) \{
        case STATE_NORMAL :
            break;
        case STATE_EXPECT_BRACKET :
            ret.append('@');
            break;
        case STATE_EXPECT_NAME :
            ret.append(\"@\{\");
            ret.append(macroName.toString());
            break;
        default :
            break;
    \}
    return ret.toString();
\}" shape=ellipse]
216 [label="35:Update@UPDATE" shape=ellipse]
217 [label="35:CtTypeAccessImpl@ENGLISH" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
8 -> 6 [label="AST"];
8 -> 7 [label="AST"];
8 -> 11 [label="Control Dep"];
8 -> 10 [label="Control Dep"];
8 -> 9 [label="Control Dep"];
10 -> 9 [label="AST"];
11 -> 10 [label="AST"];
12 -> 8 [label="AST"];
12 -> 11 [label="AST"];
16 -> 57 [label="Define-Use"];
16 -> 84 [label="Define-Use"];
16 -> 93 [label="Define-Use"];
16 -> 98 [label="Define-Use"];
16 -> 139 [label="Define-Use"];
16 -> 144 [label="Define-Use"];
16 -> 149 [label="Define-Use"];
16 -> 155 [label="Define-Use"];
16 -> 185 [label="Define-Use"];
16 -> 193 [label="Define-Use"];
16 -> 198 [label="Define-Use"];
16 -> 211 [label="Define-Use"];
17 -> 16 [label="AST"];
17 -> 13 [label="AST"];
17 -> 15 [label="AST"];
20 -> 119 [label="Define-Use"];
20 -> 166 [label="Define-Use"];
20 -> 201 [label="Define-Use"];
21 -> 20 [label="AST"];
21 -> 18 [label="AST"];
21 -> 19 [label="AST"];
23 -> 24 [label="Data Dep"];
24 -> 46 [label="Define-Use"];
24 -> 178 [label="Define-Use"];
25 -> 24 [label="AST"];
25 -> 22 [label="AST"];
25 -> 23 [label="AST"];
28 -> 30 [label="Define-Use"];
29 -> 28 [label="AST"];
29 -> 26 [label="AST"];
29 -> 27 [label="AST"];
34 -> 32 [label="AST"];
34 -> 33 [label="AST"];
34 -> 31 [label="AST"];
35 -> 30 [label="AST"];
35 -> 34 [label="AST"];
35 -> 176 [label="Control Dep"];
35 -> 45 [label="Control Dep"];
35 -> 43 [label="Control Dep"];
35 -> 39 [label="Control Dep"];
35 -> 41 [label="Control Dep"];
35 -> 42 [label="Control Dep"];
35 -> 175 [label="Control Dep"];
35 -> 46 [label="Control Dep"];
36 -> 42 [label="Define-Use"];
37 -> 36 [label="AST"];
41 -> 44 [label="Data Dep"];
42 -> 44 [label="Data Dep"];
43 -> 40 [label="AST"];
43 -> 41 [label="AST"];
43 -> 39 [label="AST"];
43 -> 42 [label="AST"];
44 -> 48 [label="Define-Use"];
44 -> 58 [label="Define-Use"];
44 -> 65 [label="Define-Use"];
44 -> 76 [label="Define-Use"];
44 -> 99 [label="Define-Use"];
44 -> 108 [label="Define-Use"];
44 -> 167 [label="Define-Use"];
45 -> 44 [label="AST"];
45 -> 38 [label="AST"];
45 -> 43 [label="AST"];
46 -> 63 [label="Control Dep"];
46 -> 47 [label="Control Dep"];
46 -> 61 [label="Control Dep"];
46 -> 50 [label="Control Dep"];
46 -> 48 [label="Control Dep"];
46 -> 49 [label="Control Dep"];
46 -> 62 [label="Control Dep"];
46 -> 106 [label="Control Dep"];
46 -> 64 [label="Control Dep"];
46 -> 104 [label="Control Dep"];
46 -> 67 [label="Control Dep"];
46 -> 65 [label="Control Dep"];
46 -> 66 [label="Control Dep"];
46 -> 105 [label="Control Dep"];
46 -> 172 [label="Control Dep"];
46 -> 107 [label="Control Dep"];
46 -> 170 [label="Control Dep"];
46 -> 110 [label="Control Dep"];
46 -> 108 [label="Control Dep"];
46 -> 109 [label="Control Dep"];
46 -> 171 [label="Control Dep"];
46 -> 174 [label="Control Dep"];
46 -> 173 [label="Control Dep"];
50 -> 48 [label="AST"];
50 -> 49 [label="AST"];
50 -> 54 [label="Control Dep"];
50 -> 53 [label="Control Dep"];
50 -> 51 [label="Control Dep"];
50 -> 52 [label="Control Dep"];
50 -> 60 [label="Control Dep"];
50 -> 59 [label="Control Dep"];
50 -> 55 [label="Control Dep"];
50 -> 57 [label="Control Dep"];
50 -> 58 [label="Control Dep"];
51 -> 178 [label="Define-Use"];
52 -> 51 [label="Data Dep"];
53 -> 51 [label="AST"];
53 -> 52 [label="AST"];
54 -> 53 [label="AST"];
59 -> 56 [label="AST"];
59 -> 57 [label="AST"];
59 -> 55 [label="AST"];
59 -> 58 [label="AST"];
60 -> 59 [label="AST"];
61 -> 50 [label="AST"];
61 -> 54 [label="AST"];
61 -> 60 [label="AST"];
63 -> 47 [label="AST"];
63 -> 61 [label="AST"];
63 -> 62 [label="AST"];
67 -> 65 [label="AST"];
67 -> 66 [label="AST"];
67 -> 75 [label="Control Dep"];
67 -> 70 [label="Control Dep"];
67 -> 68 [label="Control Dep"];
67 -> 69 [label="Control Dep"];
67 -> 74 [label="Control Dep"];
67 -> 71 [label="Control Dep"];
67 -> 73 [label="Control Dep"];
67 -> 103 [label="Control Dep"];
67 -> 102 [label="Control Dep"];
67 -> 78 [label="Control Dep"];
67 -> 76 [label="Control Dep"];
67 -> 77 [label="Control Dep"];
68 -> 178 [label="Define-Use"];
69 -> 68 [label="Data Dep"];
70 -> 68 [label="AST"];
70 -> 69 [label="AST"];
71 -> 119 [label="Define-Use"];
71 -> 166 [label="Define-Use"];
71 -> 201 [label="Define-Use"];
74 -> 71 [label="AST"];
74 -> 73 [label="AST"];
75 -> 70 [label="AST"];
75 -> 74 [label="AST"];
78 -> 76 [label="AST"];
78 -> 77 [label="AST"];
78 -> 87 [label="Control Dep"];
78 -> 81 [label="Control Dep"];
78 -> 79 [label="Control Dep"];
78 -> 80 [label="Control Dep"];
78 -> 86 [label="Control Dep"];
78 -> 82 [label="Control Dep"];
78 -> 84 [label="Control Dep"];
78 -> 85 [label="Control Dep"];
78 -> 101 [label="Control Dep"];
78 -> 90 [label="Control Dep"];
78 -> 88 [label="Control Dep"];
78 -> 89 [label="Control Dep"];
78 -> 95 [label="Control Dep"];
78 -> 91 [label="Control Dep"];
78 -> 93 [label="Control Dep"];
78 -> 94 [label="Control Dep"];
78 -> 100 [label="Control Dep"];
78 -> 96 [label="Control Dep"];
78 -> 98 [label="Control Dep"];
78 -> 99 [label="Control Dep"];
79 -> 178 [label="Define-Use"];
80 -> 79 [label="Data Dep"];
81 -> 79 [label="AST"];
81 -> 80 [label="AST"];
86 -> 83 [label="AST"];
86 -> 84 [label="AST"];
86 -> 82 [label="AST"];
86 -> 85 [label="AST"];
87 -> 81 [label="AST"];
87 -> 86 [label="AST"];
88 -> 178 [label="Define-Use"];
89 -> 88 [label="Data Dep"];
90 -> 88 [label="AST"];
90 -> 89 [label="AST"];
95 -> 92 [label="AST"];
95 -> 93 [label="AST"];
95 -> 91 [label="AST"];
95 -> 94 [label="AST"];
100 -> 97 [label="AST"];
100 -> 98 [label="AST"];
100 -> 96 [label="AST"];
100 -> 99 [label="AST"];
101 -> 90 [label="AST"];
101 -> 95 [label="AST"];
101 -> 100 [label="AST"];
102 -> 78 [label="AST"];
102 -> 87 [label="AST"];
102 -> 101 [label="AST"];
103 -> 102 [label="AST"];
104 -> 67 [label="AST"];
104 -> 75 [label="AST"];
104 -> 103 [label="AST"];
106 -> 64 [label="AST"];
106 -> 104 [label="AST"];
106 -> 105 [label="AST"];
110 -> 108 [label="AST"];
110 -> 109 [label="AST"];
110 -> 163 [label="Control Dep"];
110 -> 113 [label="Control Dep"];
110 -> 111 [label="Control Dep"];
110 -> 112 [label="Control Dep"];
110 -> 124 [label="Control Dep"];
110 -> 122 [label="Control Dep"];
110 -> 115 [label="Control Dep"];
110 -> 120 [label="Control Dep"];
110 -> 117 [label="Control Dep"];
110 -> 119 [label="Control Dep"];
110 -> 121 [label="Control Dep"];
110 -> 133 [label="Control Dep"];
110 -> 130 [label="Control Dep"];
110 -> 126 [label="Control Dep"];
110 -> 128 [label="Control Dep"];
110 -> 129 [label="Control Dep"];
110 -> 159 [label="Control Dep"];
110 -> 136 [label="Control Dep"];
110 -> 134 [label="Control Dep"];
110 -> 135 [label="Control Dep"];
110 -> 162 [label="Control Dep"];
110 -> 160 [label="Control Dep"];
110 -> 161 [label="Control Dep"];
110 -> 169 [label="Control Dep"];
110 -> 168 [label="Control Dep"];
110 -> 164 [label="Control Dep"];
110 -> 166 [label="Control Dep"];
110 -> 167 [label="Control Dep"];
111 -> 178 [label="Define-Use"];
112 -> 111 [label="Data Dep"];
113 -> 111 [label="AST"];
113 -> 112 [label="AST"];
119 -> 123 [label="Data Dep"];
120 -> 118 [label="AST"];
120 -> 119 [label="AST"];
120 -> 117 [label="AST"];
121 -> 216 [label="Action"];
122 -> 116 [label="AST"];
122 -> 120 [label="AST"];
122 -> 115 [label="AST"];
122 -> 121 [label="AST"];
123 -> 129 [label="Define-Use"];
123 -> 145 [label="Define-Use"];
124 -> 123 [label="AST"];
124 -> 114 [label="AST"];
124 -> 122 [label="AST"];
128 -> 132 [label="Data Dep"];
129 -> 132 [label="Data Dep"];
130 -> 127 [label="AST"];
130 -> 131 [label="AST"];
130 -> 128 [label="AST"];
130 -> 126 [label="AST"];
130 -> 129 [label="AST"];
132 -> 134 [label="Define-Use"];
132 -> 156 [label="Define-Use"];
133 -> 132 [label="AST"];
133 -> 125 [label="AST"];
133 -> 130 [label="AST"];
136 -> 134 [label="AST"];
136 -> 135 [label="AST"];
136 -> 152 [label="Control Dep"];
136 -> 141 [label="Control Dep"];
136 -> 137 [label="Control Dep"];
136 -> 139 [label="Control Dep"];
136 -> 140 [label="Control Dep"];
136 -> 146 [label="Control Dep"];
136 -> 142 [label="Control Dep"];
136 -> 144 [label="Control Dep"];
136 -> 145 [label="Control Dep"];
136 -> 151 [label="Control Dep"];
136 -> 147 [label="Control Dep"];
136 -> 149 [label="Control Dep"];
136 -> 150 [label="Control Dep"];
136 -> 158 [label="Control Dep"];
136 -> 157 [label="Control Dep"];
136 -> 153 [label="Control Dep"];
136 -> 155 [label="Control Dep"];
136 -> 156 [label="Control Dep"];
141 -> 138 [label="AST"];
141 -> 139 [label="AST"];
141 -> 137 [label="AST"];
141 -> 140 [label="AST"];
146 -> 143 [label="AST"];
146 -> 144 [label="AST"];
146 -> 142 [label="AST"];
146 -> 145 [label="AST"];
151 -> 148 [label="AST"];
151 -> 149 [label="AST"];
151 -> 147 [label="AST"];
151 -> 150 [label="AST"];
152 -> 141 [label="AST"];
152 -> 146 [label="AST"];
152 -> 151 [label="AST"];
157 -> 154 [label="AST"];
157 -> 155 [label="AST"];
157 -> 153 [label="AST"];
157 -> 156 [label="AST"];
158 -> 157 [label="AST"];
159 -> 136 [label="AST"];
159 -> 152 [label="AST"];
159 -> 158 [label="AST"];
160 -> 166 [label="Define-Use"];
160 -> 201 [label="Define-Use"];
162 -> 160 [label="AST"];
162 -> 161 [label="AST"];
163 -> 113 [label="AST"];
163 -> 124 [label="AST"];
163 -> 133 [label="AST"];
163 -> 159 [label="AST"];
163 -> 162 [label="AST"];
168 -> 165 [label="AST"];
168 -> 166 [label="AST"];
168 -> 164 [label="AST"];
168 -> 167 [label="AST"];
169 -> 168 [label="AST"];
170 -> 110 [label="AST"];
170 -> 163 [label="AST"];
170 -> 169 [label="AST"];
172 -> 107 [label="AST"];
172 -> 170 [label="AST"];
172 -> 171 [label="AST"];
174 -> 173 [label="AST"];
175 -> 46 [label="AST"];
175 -> 63 [label="AST"];
175 -> 106 [label="AST"];
175 -> 172 [label="AST"];
175 -> 174 [label="AST"];
176 -> 45 [label="AST"];
176 -> 175 [label="AST"];
177 -> 29 [label="AST"];
177 -> 35 [label="AST"];
177 -> 37 [label="AST"];
177 -> 176 [label="AST"];
178 -> 181 [label="Control Dep"];
178 -> 179 [label="Control Dep"];
178 -> 180 [label="Control Dep"];
178 -> 189 [label="Control Dep"];
178 -> 182 [label="Control Dep"];
178 -> 187 [label="Control Dep"];
178 -> 183 [label="Control Dep"];
178 -> 185 [label="Control Dep"];
178 -> 186 [label="Control Dep"];
178 -> 188 [label="Control Dep"];
178 -> 205 [label="Control Dep"];
178 -> 190 [label="Control Dep"];
178 -> 195 [label="Control Dep"];
178 -> 191 [label="Control Dep"];
178 -> 193 [label="Control Dep"];
178 -> 194 [label="Control Dep"];
178 -> 203 [label="Control Dep"];
178 -> 196 [label="Control Dep"];
178 -> 198 [label="Control Dep"];
178 -> 202 [label="Control Dep"];
178 -> 199 [label="Control Dep"];
178 -> 201 [label="Control Dep"];
178 -> 204 [label="Control Dep"];
178 -> 207 [label="Control Dep"];
178 -> 206 [label="Control Dep"];
181 -> 179 [label="AST"];
181 -> 180 [label="AST"];
187 -> 184 [label="AST"];
187 -> 185 [label="AST"];
187 -> 183 [label="AST"];
187 -> 186 [label="AST"];
189 -> 182 [label="AST"];
189 -> 187 [label="AST"];
189 -> 188 [label="AST"];
195 -> 192 [label="AST"];
195 -> 193 [label="AST"];
195 -> 191 [label="AST"];
195 -> 194 [label="AST"];
202 -> 200 [label="AST"];
202 -> 201 [label="AST"];
202 -> 199 [label="AST"];
203 -> 197 [label="AST"];
203 -> 198 [label="AST"];
203 -> 196 [label="AST"];
203 -> 202 [label="AST"];
205 -> 190 [label="AST"];
205 -> 195 [label="AST"];
205 -> 203 [label="AST"];
205 -> 204 [label="AST"];
207 -> 206 [label="AST"];
208 -> 178 [label="AST"];
208 -> 181 [label="AST"];
208 -> 189 [label="AST"];
208 -> 205 [label="AST"];
208 -> 207 [label="AST"];
212 -> 210 [label="AST"];
212 -> 211 [label="AST"];
212 -> 209 [label="AST"];
213 -> 212 [label="AST"];
214 -> 12 [label="AST"];
214 -> 17 [label="AST"];
214 -> 21 [label="AST"];
214 -> 25 [label="AST"];
214 -> 177 [label="AST"];
214 -> 208 [label="AST"];
214 -> 213 [label="AST"];
215 -> 1 [label="AST"];
215 -> 0 [label="AST"];
215 -> 2 [label="AST"];
215 -> 4 [label="AST"];
215 -> 214 [label="AST"];
216 -> 217 [label="Action"];
}