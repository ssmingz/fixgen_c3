digraph "macroSubs#?,String,Map" {
0 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
1 [label="2:CtVirtualElement@macroSubs" shape=ellipse]
2 [label="2:CtParameterImpl@String s" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
4 [label="2:CtParameterImpl@Map macroMapping" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@Map" shape=ellipse]
6 [label="3:CtVariableReadImpl@s" shape=ellipse]
7 [label="3:CtLiteralImpl@null" shape=ellipse]
8 [label="3:CtBinaryOperatorImpl@s == null" shape=ellipse]
9 [label="4:CtLiteralImpl@null" shape=ellipse]
10 [label="4:CtReturnImpl@return null" shape=ellipse]
11 [label="3:CtBlockImpl@\{
    return null;
\}" shape=ellipse]
12 [label="3:CtIfImpl@if (s == null) \{
    return null;
\}" shape=ellipse]
13 [label="6:CtTypeReferenceImpl@StringBuffer" shape=ellipse]
14 [label="6:CtTypeReferenceImpl@StringBuffer" shape=ellipse]
15 [label="6:CtConstructorCallImpl@new StringBuffer()" shape=ellipse]
16 [label="6:CtVirtualElement@ret" shape=ellipse]
17 [label="6:CtLocalVariableImpl@StringBuffer ret = new StringBuffer()" shape=ellipse]
18 [label="7:CtTypeReferenceImpl@StringBuffer" shape=ellipse]
19 [label="7:CtLiteralImpl@null" shape=ellipse]
20 [label="7:CtVirtualElement@macroName" shape=ellipse]
21 [label="7:CtLocalVariableImpl@StringBuffer macroName = null" shape=ellipse]
22 [label="8:CtTypeReferenceImpl@boolean" shape=ellipse]
23 [label="8:CtLiteralImpl@false" shape=ellipse]
24 [label="8:CtVirtualElement@inMacro" shape=ellipse]
25 [label="8:CtLocalVariableImpl@boolean inMacro = false" shape=ellipse]
26 [label="9:CtTypeReferenceImpl@int" shape=ellipse]
27 [label="9:CtFieldReadImpl@STATE_NORMAL" shape=ellipse]
28 [label="9:CtVirtualElement@state" shape=ellipse]
29 [label="9:CtLocalVariableImpl@int state = STATE_NORMAL" shape=ellipse]
30 [label="10:CtTypeReferenceImpl@int" shape=ellipse]
31 [label="10:CtLiteralImpl@0" shape=ellipse]
32 [label="10:CtVirtualElement@i" shape=ellipse]
33 [label="10:CtLocalVariableImpl@int i = 0" shape=ellipse]
34 [label="10:CtVariableReadImpl@i" shape=ellipse]
35 [label="10:CtExecutableReferenceImpl@length()" shape=ellipse]
36 [label="10:CtVirtualElement@length" shape=ellipse]
37 [label="10:CtVariableReadImpl@s" shape=ellipse]
38 [label="10:CtInvocationImpl@s.length()" shape=ellipse]
39 [label="10:CtBinaryOperatorImpl@i < s.length()" shape=ellipse]
40 [label="10:CtVariableWriteImpl@i" shape=ellipse]
41 [label="10:CtUnaryOperatorImpl@++i" shape=ellipse]
42 [label="11:CtTypeReferenceImpl@char" shape=ellipse]
43 [label="11:CtExecutableReferenceImpl@charAt(int)" shape=ellipse]
44 [label="11:CtVirtualElement@charAt" shape=ellipse]
45 [label="11:CtVariableReadImpl@s" shape=ellipse]
46 [label="11:CtVariableReadImpl@i" shape=ellipse]
47 [label="11:CtInvocationImpl@s.charAt(i)" shape=ellipse]
48 [label="11:CtVirtualElement@ch" shape=ellipse]
49 [label="11:CtLocalVariableImpl@char ch = s.charAt(i)" shape=ellipse]
50 [label="12:CtVariableReadImpl@state" shape=ellipse]
51 [label="13:CtFieldReadImpl@STATE_NORMAL" shape=ellipse]
52 [label="14:CtVariableReadImpl@ch" shape=ellipse]
53 [label="14:CtLiteralImpl@'@'" shape=ellipse]
54 [label="14:CtBinaryOperatorImpl@ch == '@'" shape=ellipse]
55 [label="15:CtVariableWriteImpl@state" shape=ellipse]
56 [label="15:CtFieldReadImpl@STATE_EXPECT_BRACKET" shape=ellipse]
57 [label="15:CtAssignmentImpl@state = STATE_EXPECT_BRACKET" shape=ellipse]
58 [label="14:CtBlockImpl@\{
    state = STATE_EXPECT_BRACKET;
\}" shape=ellipse]
59 [label="17:CtExecutableReferenceImpl@append(char)" shape=ellipse]
60 [label="17:CtVirtualElement@append" shape=ellipse]
61 [label="17:CtVariableReadImpl@ret" shape=ellipse]
62 [label="17:CtVariableReadImpl@ch" shape=ellipse]
63 [label="17:CtInvocationImpl@ret.append(ch)" shape=ellipse]
64 [label="16:CtBlockImpl@\{
    ret.append(ch);
\}" shape=ellipse]
65 [label="14:CtIfImpl@if (ch == '@') \{
    state = STATE_EXPECT_BRACKET;
\} else \{
    ret.append(ch);
\}" shape=ellipse]
66 [label="19:CtBreakImpl@break" shape=ellipse]
67 [label="13:CtCaseImpl@case STATE_NORMAL :
    if (ch == '@') \{
        state = STATE_EXPECT_BRACKET;
    \} else \{
        ret.append(ch);
    \}
    break;" shape=ellipse]
68 [label="20:CtFieldReadImpl@STATE_EXPECT_BRACKET" shape=ellipse]
69 [label="21:CtVariableReadImpl@ch" shape=ellipse]
70 [label="21:CtLiteralImpl@'\{'" shape=ellipse]
71 [label="21:CtBinaryOperatorImpl@ch == '\{'" shape=ellipse]
72 [label="22:CtVariableWriteImpl@state" shape=ellipse]
73 [label="22:CtFieldReadImpl@STATE_EXPECT_NAME" shape=ellipse]
74 [label="22:CtAssignmentImpl@state = STATE_EXPECT_NAME" shape=ellipse]
75 [label="23:CtVariableWriteImpl@macroName" shape=ellipse]
76 [label="23:CtTypeReferenceImpl@StringBuffer" shape=ellipse]
77 [label="23:CtConstructorCallImpl@new StringBuffer()" shape=ellipse]
78 [label="23:CtAssignmentImpl@macroName = new StringBuffer()" shape=ellipse]
79 [label="21:CtBlockImpl@\{
    state = STATE_EXPECT_NAME;
    macroName = new StringBuffer();
\}" shape=ellipse]
80 [label="24:CtVariableReadImpl@ch" shape=ellipse]
81 [label="24:CtLiteralImpl@'@'" shape=ellipse]
82 [label="24:CtBinaryOperatorImpl@ch == '@'" shape=ellipse]
83 [label="25:CtVariableWriteImpl@state" shape=ellipse]
84 [label="25:CtFieldReadImpl@STATE_EXPECT_EXCAPE" shape=ellipse]
85 [label="25:CtAssignmentImpl@state = STATE_EXPECT_EXCAPE" shape=ellipse]
86 [label="24:CtBlockImpl@\{
    state = STATE_EXPECT_EXCAPE;
\}" shape=ellipse]
87 [label="27:CtVariableWriteImpl@state" shape=ellipse]
88 [label="27:CtFieldReadImpl@STATE_NORMAL" shape=ellipse]
89 [label="27:CtAssignmentImpl@state = STATE_NORMAL" shape=ellipse]
90 [label="28:CtExecutableReferenceImpl@append(char)" shape=ellipse]
91 [label="28:CtVirtualElement@append" shape=ellipse]
92 [label="28:CtVariableReadImpl@ret" shape=ellipse]
93 [label="28:CtLiteralImpl@'@'" shape=ellipse]
94 [label="28:CtInvocationImpl@ret.append('@')" shape=ellipse]
95 [label="29:CtExecutableReferenceImpl@append(char)" shape=ellipse]
96 [label="29:CtVirtualElement@append" shape=ellipse]
97 [label="29:CtVariableReadImpl@ret" shape=ellipse]
98 [label="29:CtVariableReadImpl@ch" shape=ellipse]
99 [label="29:CtInvocationImpl@ret.append(ch)" shape=ellipse]
100 [label="26:CtBlockImpl@\{
    state = STATE_NORMAL;
    ret.append('@');
    ret.append(ch);
\}" shape=ellipse]
101 [label="24:CtIfImpl@if (ch == '@') \{
    state = STATE_EXPECT_EXCAPE;
\} else \{
    state = STATE_NORMAL;
    ret.append('@');
    ret.append(ch);
\}" shape=ellipse]
102 [label="24:CtBlockImpl@
    if (ch == '@') \{
        state = STATE_EXPECT_EXCAPE;
    \} else \{
        state = STATE_NORMAL;
        ret.append('@');
        ret.append(ch);
    \}
" shape=ellipse]
103 [label="21:CtIfImpl@if (ch == '\{') \{
    state = STATE_EXPECT_NAME;
    macroName = new StringBuffer();
\} else if (ch == '@') \{
    state = STATE_EXPECT_EXCAPE;
\} else \{
    state = STATE_NORMAL;
    ret.append('@');
    ret.append(ch);
\}" shape=ellipse]
104 [label="31:CtBreakImpl@break" shape=ellipse]
105 [label="20:CtCaseImpl@case STATE_EXPECT_BRACKET :
    if (ch == '\{') \{
        state = STATE_EXPECT_NAME;
        macroName = new StringBuffer();
    \} else if (ch == '@') \{
        state = STATE_EXPECT_EXCAPE;
    \} else \{
        state = STATE_NORMAL;
        ret.append('@');
        ret.append(ch);
    \}
    break;" shape=ellipse]
106 [label="32:CtFieldReadImpl@STATE_EXPECT_NAME" shape=ellipse]
107 [label="33:CtVariableReadImpl@ch" shape=ellipse]
108 [label="33:CtLiteralImpl@'\}'" shape=ellipse]
109 [label="33:CtBinaryOperatorImpl@ch == '\}'" shape=ellipse]
110 [label="34:CtVariableWriteImpl@state" shape=ellipse]
111 [label="34:CtFieldReadImpl@STATE_NORMAL" shape=ellipse]
112 [label="34:CtAssignmentImpl@state = STATE_NORMAL" shape=ellipse]
113 [label="35:CtTypeReferenceImpl@String" shape=ellipse]
114 [label="35:CtExecutableReferenceImpl@toString()" shape=ellipse]
115 [label="35:CtVirtualElement@toString" shape=ellipse]
116 [label="35:CtVariableReadImpl@macroName" shape=ellipse]
117 [label="35:CtInvocationImpl@macroName.toString()" shape=ellipse]
118 [label="35:CtVirtualElement@name" shape=ellipse]
119 [label="35:CtLocalVariableImpl@String name = macroName.toString()" shape=ellipse]
120 [label="36:CtTypeReferenceImpl@String" shape=ellipse]
121 [label="36:CtExecutableReferenceImpl@get(java.lang.String)" shape=ellipse]
122 [label="36:CtVirtualElement@get" shape=ellipse]
123 [label="36:CtVariableReadImpl@macroMapping" shape=ellipse]
124 [label="36:CtVariableReadImpl@name" shape=ellipse]
125 [label="36:CtInvocationImpl@((String) (macroMapping.get(name)))" shape=ellipse]
126 [label="36:CtTypeReferenceImpl@String" shape=ellipse]
127 [label="36:CtVirtualElement@value" shape=ellipse]
128 [label="36:CtLocalVariableImpl@String value = ((String) (macroMapping.get(name)))" shape=ellipse]
129 [label="37:CtVariableReadImpl@value" shape=ellipse]
130 [label="37:CtLiteralImpl@null" shape=ellipse]
131 [label="37:CtBinaryOperatorImpl@value == null" shape=ellipse]
132 [label="38:CtExecutableReferenceImpl@append(java.lang.String)" shape=ellipse]
133 [label="38:CtVirtualElement@append" shape=ellipse]
134 [label="38:CtVariableReadImpl@ret" shape=ellipse]
135 [label="38:CtLiteralImpl@\"@\{\"" shape=ellipse]
136 [label="38:CtVariableReadImpl@name" shape=ellipse]
137 [label="38:CtBinaryOperatorImpl@(\"@\{\" + name)" shape=ellipse]
138 [label="38:CtLiteralImpl@\"\}\"" shape=ellipse]
139 [label="38:CtBinaryOperatorImpl@(\"@\{\" + name) + \"\}\"" shape=ellipse]
140 [label="38:CtInvocationImpl@ret.append((\"@\{\" + name) + \"\}\")" shape=ellipse]
141 [label="37:CtBlockImpl@\{
    ret.append((\"@\{\" + name) + \"\}\");
\}" shape=ellipse]
142 [label="40:CtExecutableReferenceImpl@append(java.lang.String)" shape=ellipse]
143 [label="40:CtVirtualElement@append" shape=ellipse]
144 [label="40:CtVariableReadImpl@ret" shape=ellipse]
145 [label="40:CtVariableReadImpl@value" shape=ellipse]
146 [label="40:CtInvocationImpl@ret.append(value)" shape=ellipse]
147 [label="39:CtBlockImpl@\{
    ret.append(value);
\}" shape=ellipse]
148 [label="37:CtIfImpl@if (value == null) \{
    ret.append((\"@\{\" + name) + \"\}\");
\} else \{
    ret.append(value);
\}" shape=ellipse]
149 [label="42:CtVariableWriteImpl@macroName" shape=ellipse]
150 [label="42:CtLiteralImpl@null" shape=ellipse]
151 [label="42:CtAssignmentImpl@macroName = null" shape=ellipse]
152 [label="33:CtBlockImpl@\{
    state = STATE_NORMAL;
    String name = macroName.toString();
    String value = ((String) (macroMapping.get(name)));
    if (value == null) \{
        ret.append((\"@\{\" + name) + \"\}\");
    \} else \{
        ret.append(value);
    \}
    macroName = null;
\}" shape=ellipse]
153 [label="44:CtExecutableReferenceImpl@append(char)" shape=ellipse]
154 [label="44:CtVirtualElement@append" shape=ellipse]
155 [label="44:CtVariableReadImpl@macroName" shape=ellipse]
156 [label="44:CtVariableReadImpl@ch" shape=ellipse]
157 [label="44:CtInvocationImpl@macroName.append(ch)" shape=ellipse]
158 [label="43:CtBlockImpl@\{
    macroName.append(ch);
\}" shape=ellipse]
159 [label="33:CtIfImpl@if (ch == '\}') \{
    state = STATE_NORMAL;
    String name = macroName.toString();
    String value = ((String) (macroMapping.get(name)));
    if (value == null) \{
        ret.append((\"@\{\" + name) + \"\}\");
    \} else \{
        ret.append(value);
    \}
    macroName = null;
\} else \{
    macroName.append(ch);
\}" shape=ellipse]
160 [label="46:CtBreakImpl@break" shape=ellipse]
161 [label="32:CtCaseImpl@case STATE_EXPECT_NAME :
    if (ch == '\}') \{
        state = STATE_NORMAL;
        String name = macroName.toString();
        String value = ((String) (macroMapping.get(name)));
        if (value == null) \{
            ret.append((\"@\{\" + name) + \"\}\");
        \} else \{
            ret.append(value);
        \}
        macroName = null;
    \} else \{
        macroName.append(ch);
    \}
    break;" shape=ellipse]
162 [label="47:CtFieldReadImpl@STATE_EXPECT_EXCAPE" shape=ellipse]
163 [label="48:CtVariableWriteImpl@state" shape=ellipse]
164 [label="48:CtFieldReadImpl@STATE_NORMAL" shape=ellipse]
165 [label="48:CtAssignmentImpl@state = STATE_NORMAL" shape=ellipse]
166 [label="49:CtVariableReadImpl@ch" shape=ellipse]
167 [label="49:CtLiteralImpl@'\{'" shape=ellipse]
168 [label="49:CtBinaryOperatorImpl@ch == '\{'" shape=ellipse]
169 [label="50:CtExecutableReferenceImpl@append(java.lang.String)" shape=ellipse]
170 [label="50:CtVirtualElement@append" shape=ellipse]
171 [label="50:CtVariableReadImpl@ret" shape=ellipse]
172 [label="50:CtLiteralImpl@\"@\"" shape=ellipse]
173 [label="50:CtInvocationImpl@ret.append(\"@\")" shape=ellipse]
174 [label="49:CtBlockImpl@\{
    ret.append(\"@\");
\}" shape=ellipse]
175 [label="52:CtExecutableReferenceImpl@append(java.lang.String)" shape=ellipse]
176 [label="52:CtVirtualElement@append" shape=ellipse]
177 [label="52:CtVariableReadImpl@ret" shape=ellipse]
178 [label="52:CtLiteralImpl@\"@@\"" shape=ellipse]
179 [label="52:CtInvocationImpl@ret.append(\"@@\")" shape=ellipse]
180 [label="51:CtBlockImpl@\{
    ret.append(\"@@\");
\}" shape=ellipse]
181 [label="49:CtIfImpl@if (ch == '\{') \{
    ret.append(\"@\");
\} else \{
    ret.append(\"@@\");
\}" shape=ellipse]
182 [label="54:CtExecutableReferenceImpl@append(char)" shape=ellipse]
183 [label="54:CtVirtualElement@append" shape=ellipse]
184 [label="54:CtVariableReadImpl@ret" shape=ellipse]
185 [label="54:CtVariableReadImpl@ch" shape=ellipse]
186 [label="54:CtInvocationImpl@ret.append(ch)" shape=ellipse]
187 [label="55:CtBreakImpl@break" shape=ellipse]
188 [label="47:CtCaseImpl@case STATE_EXPECT_EXCAPE :
    state = STATE_NORMAL;
    if (ch == '\{') \{
        ret.append(\"@\");
    \} else \{
        ret.append(\"@@\");
    \}
    ret.append(ch);
    break;" shape=ellipse]
189 [label="57:CtBreakImpl@break" shape=ellipse]
190 [label="56:CtCaseImpl@default :
    break;" shape=ellipse]
191 [label="12:CtSwitchImpl@switch (state) \{
    case STATE_NORMAL :
        if (ch == '@') \{
            state = STATE_EXPECT_BRACKET;
        \} else \{
            ret.append(ch);
        \}
        break;
    case STATE_EXPECT_BRACKET :
        if (ch == '\{') \{
            state = STATE_EXPECT_NAME;
            macroName = new StringBuffer();
        \} else if (ch == '@') \{
            state = STATE_EXPECT_EXCAPE;
        \} else \{
            state = STATE_NORMAL;
            ret.append('@');
            ret.append(ch);
        \}
        break;
    case STATE_EXPECT_NAME :
        if (ch == '\}') \{
            state = STATE_NORMAL;
            String name = macroName.toString();
            String value = ((String) (macroMapping.get(name)));
            if (value == null) \{
                ret.append((\"@\{\" + name) + \"\}\");
            \} else \{
                ret.append(value);
            \}
            macroName = null;
        \} else \{
            macroName.append(ch);
        \}
        break;
    case STATE_EXPECT_EXCAPE :
        state = STATE_NORMAL;
        if (ch == '\{') \{
            ret.append(\"@\");
        \} else \{
            ret.append(\"@@\");
        \}
        ret.append(ch);
        break;
    default :
        break;
\}" shape=ellipse]
192 [label="10:CtBlockImpl@\{
    char ch = s.charAt(i);
    switch (state) \{
        case STATE_NORMAL :
            if (ch == '@') \{
                state = STATE_EXPECT_BRACKET;
            \} else \{
                ret.append(ch);
            \}
            break;
        case STATE_EXPECT_BRACKET :
            if (ch == '\{') \{
                state = STATE_EXPECT_NAME;
                macroName = new StringBuffer();
            \} else if (ch == '@') \{
                state = STATE_EXPECT_EXCAPE;
            \} else \{
                state = STATE_NORMAL;
                ret.append('@');
                ret.append(ch);
            \}
            break;
        case STATE_EXPECT_NAME :
            if (ch == '\}') \{
                state = STATE_NORMAL;
                String name = macroName.toString();
                String value = ((String) (macroMapping.get(name)));
                if (value == null) \{
                    ret.append((\"@\{\" + name) + \"\}\");
                \} else \{
                    ret.append(value);
                \}
                macroName = null;
            \} else \{
                macroName.append(ch);
            \}
            break;
        case STATE_EXPECT_EXCAPE :
            state = STATE_NORMAL;
            if (ch == '\{') \{
                ret.append(\"@\");
            \} else \{
                ret.append(\"@@\");
            \}
            ret.append(ch);
            break;
        default :
            break;
    \}
\}" shape=ellipse]
193 [label="10:CtForImpl@for (int i = 0; i < s.length(); ++i) \{
    char ch = s.charAt(i);
    switch (state) \{
        case STATE_NORMAL :
            if (ch == '@') \{
                state = STATE_EXPECT_BRACKET;
            \} else \{
                ret.append(ch);
            \}
            break;
        case STATE_EXPECT_BRACKET :
            if (ch == '\{') \{
                state = STATE_EXPECT_NAME;
                macroName = new StringBuffer();
            \} else if (ch == '@') \{
                state = STATE_EXPECT_EXCAPE;
            \} else \{
                state = STATE_NORMAL;
                ret.append('@');
                ret.append(ch);
            \}
            break;
        case STATE_EXPECT_NAME :
            if (ch == '\}') \{
                state = STATE_NORMAL;
                String name = macroName.toString();
                String value = ((String) (macroMapping.get(name)));
                if (value == null) \{
                    ret.append((\"@\{\" + name) + \"\}\");
                \} else \{
                    ret.append(value);
                \}
                macroName = null;
            \} else \{
                macroName.append(ch);
            \}
            break;
        case STATE_EXPECT_EXCAPE :
            state = STATE_NORMAL;
            if (ch == '\{') \{
                ret.append(\"@\");
            \} else \{
                ret.append(\"@@\");
            \}
            ret.append(ch);
            break;
        default :
            break;
    \}
\}" shape=ellipse]
194 [label="60:CtVariableReadImpl@state" shape=ellipse]
195 [label="61:CtFieldReadImpl@STATE_NORMAL" shape=ellipse]
196 [label="62:CtBreakImpl@break" shape=ellipse]
197 [label="61:CtCaseImpl@case STATE_NORMAL :
    break;" shape=ellipse]
198 [label="63:CtFieldReadImpl@STATE_EXPECT_BRACKET" shape=ellipse]
199 [label="64:CtExecutableReferenceImpl@append(char)" shape=ellipse]
200 [label="64:CtVirtualElement@append" shape=ellipse]
201 [label="64:CtVariableReadImpl@ret" shape=ellipse]
202 [label="64:CtLiteralImpl@'@'" shape=ellipse]
203 [label="64:CtInvocationImpl@ret.append('@')" shape=ellipse]
204 [label="65:CtBreakImpl@break" shape=ellipse]
205 [label="63:CtCaseImpl@case STATE_EXPECT_BRACKET :
    ret.append('@');
    break;" shape=ellipse]
206 [label="66:CtFieldReadImpl@STATE_EXPECT_NAME" shape=ellipse]
207 [label="67:CtExecutableReferenceImpl@append(java.lang.String)" shape=ellipse]
208 [label="67:CtVirtualElement@append" shape=ellipse]
209 [label="67:CtVariableReadImpl@ret" shape=ellipse]
210 [label="67:CtLiteralImpl@\"@\{\"" shape=ellipse]
211 [label="67:CtInvocationImpl@ret.append(\"@\{\")" shape=ellipse]
212 [label="68:CtExecutableReferenceImpl@append(java.lang.String)" shape=ellipse]
213 [label="68:CtVirtualElement@append" shape=ellipse]
214 [label="68:CtVariableReadImpl@ret" shape=ellipse]
215 [label="68:CtExecutableReferenceImpl@toString()" shape=ellipse]
216 [label="68:CtVirtualElement@toString" shape=ellipse]
217 [label="68:CtVariableReadImpl@macroName" shape=ellipse]
218 [label="68:CtInvocationImpl@macroName.toString()" shape=ellipse]
219 [label="68:CtInvocationImpl@ret.append(macroName.toString())" shape=ellipse]
220 [label="69:CtBreakImpl@break" shape=ellipse]
221 [label="66:CtCaseImpl@case STATE_EXPECT_NAME :
    ret.append(\"@\{\");
    ret.append(macroName.toString());
    break;" shape=ellipse]
222 [label="70:CtFieldReadImpl@STATE_EXPECT_EXCAPE" shape=ellipse]
223 [label="71:CtExecutableReferenceImpl@append(java.lang.String)" shape=ellipse]
224 [label="71:CtVirtualElement@append" shape=ellipse]
225 [label="71:CtVariableReadImpl@ret" shape=ellipse]
226 [label="71:CtLiteralImpl@\"@@\"" shape=ellipse]
227 [label="71:CtInvocationImpl@ret.append(\"@@\")" shape=ellipse]
228 [label="72:CtBreakImpl@break" shape=ellipse]
229 [label="70:CtCaseImpl@case STATE_EXPECT_EXCAPE :
    ret.append(\"@@\");
    break;" shape=ellipse]
230 [label="74:CtBreakImpl@break" shape=ellipse]
231 [label="73:CtCaseImpl@default :
    break;" shape=ellipse]
232 [label="60:CtSwitchImpl@switch (state) \{
    case STATE_NORMAL :
        break;
    case STATE_EXPECT_BRACKET :
        ret.append('@');
        break;
    case STATE_EXPECT_NAME :
        ret.append(\"@\{\");
        ret.append(macroName.toString());
        break;
    case STATE_EXPECT_EXCAPE :
        ret.append(\"@@\");
        break;
    default :
        break;
\}" shape=ellipse]
233 [label="76:CtExecutableReferenceImpl@toString()" shape=ellipse]
234 [label="76:CtVirtualElement@toString" shape=ellipse]
235 [label="76:CtVariableReadImpl@ret" shape=ellipse]
236 [label="76:CtInvocationImpl@ret.toString()" shape=ellipse]
237 [label="76:CtReturnImpl@return ret.toString()" shape=ellipse]
238 [label="2:CtBlockImpl@\{
    if (s == null) \{
        return null;
    \}
    StringBuffer ret = new StringBuffer();
    StringBuffer macroName = null;
    boolean inMacro = false;
    int state = STATE_NORMAL;
    for (int i = 0; i < s.length(); ++i) \{
        char ch = s.charAt(i);
        switch (state) \{
            case STATE_NORMAL :
                if (ch == '@') \{
                    state = STATE_EXPECT_BRACKET;
                \} else \{
                    ret.append(ch);
                \}
                break;
            case STATE_EXPECT_BRACKET :
                if (ch == '\{') \{
                    state = STATE_EXPECT_NAME;
                    macroName = new StringBuffer();
                \} else if (ch == '@') \{
                    state = STATE_EXPECT_EXCAPE;
                \} else \{
                    state = STATE_NORMAL;
                    ret.append('@');
                    ret.append(ch);
                \}
                break;
            case STATE_EXPECT_NAME :
                if (ch == '\}') \{
                    state = STATE_NORMAL;
                    String name = macroName.toString();
                    String value = ((String) (macroMapping.get(name)));
                    if (value == null) \{
                        ret.append((\"@\{\" + name) + \"\}\");
                    \} else \{
                        ret.append(value);
                    \}
                    macroName = null;
                \} else \{
                    macroName.append(ch);
                \}
                break;
            case STATE_EXPECT_EXCAPE :
                state = STATE_NORMAL;
                if (ch == '\{') \{
                    ret.append(\"@\");
                \} else \{
                    ret.append(\"@@\");
                \}
                ret.append(ch);
                break;
            default :
                break;
        \}
    \}
    switch (state) \{
        case STATE_NORMAL :
            break;
        case STATE_EXPECT_BRACKET :
            ret.append('@');
            break;
        case STATE_EXPECT_NAME :
            ret.append(\"@\{\");
            ret.append(macroName.toString());
            break;
        case STATE_EXPECT_EXCAPE :
            ret.append(\"@@\");
            break;
        default :
            break;
    \}
    return ret.toString();
\}" shape=ellipse]
239 [label="2:CtMethodImpl@private String macroSubs(String s, Map macroMapping) \{
    if (s == null) \{
        return null;
    \}
    StringBuffer ret = new StringBuffer();
    StringBuffer macroName = null;
    boolean inMacro = false;
    int state = STATE_NORMAL;
    for (int i = 0; i < s.length(); ++i) \{
        char ch = s.charAt(i);
        switch (state) \{
            case STATE_NORMAL :
                if (ch == '@') \{
                    state = STATE_EXPECT_BRACKET;
                \} else \{
                    ret.append(ch);
                \}
                break;
            case STATE_EXPECT_BRACKET :
                if (ch == '\{') \{
                    state = STATE_EXPECT_NAME;
                    macroName = new StringBuffer();
                \} else if (ch == '@') \{
                    state = STATE_EXPECT_EXCAPE;
                \} else \{
                    state = STATE_NORMAL;
                    ret.append('@');
                    ret.append(ch);
                \}
                break;
            case STATE_EXPECT_NAME :
                if (ch == '\}') \{
                    state = STATE_NORMAL;
                    String name = macroName.toString();
                    String value = ((String) (macroMapping.get(name)));
                    if (value == null) \{
                        ret.append((\"@\{\" + name) + \"\}\");
                    \} else \{
                        ret.append(value);
                    \}
                    macroName = null;
                \} else \{
                    macroName.append(ch);
                \}
                break;
            case STATE_EXPECT_EXCAPE :
                state = STATE_NORMAL;
                if (ch == '\{') \{
                    ret.append(\"@\");
                \} else \{
                    ret.append(\"@@\");
                \}
                ret.append(ch);
                break;
            default :
                break;
        \}
    \}
    switch (state) \{
        case STATE_NORMAL :
            break;
        case STATE_EXPECT_BRACKET :
            ret.append('@');
            break;
        case STATE_EXPECT_NAME :
            ret.append(\"@\{\");
            ret.append(macroName.toString());
            break;
        case STATE_EXPECT_EXCAPE :
            ret.append(\"@@\");
            break;
        default :
            break;
    \}
    return ret.toString();
\}" shape=ellipse]
240 [label="35:Insert@INSERT" shape=ellipse]
241 [label="35:CtInvocationImpl@macroName.toString().toLowerCase(US)" shape=ellipse]
242 [label="35:Move@MOVE" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
8 -> 6 [label="AST"];
8 -> 7 [label="AST"];
8 -> 11 [label="Control Dep"];
8 -> 10 [label="Control Dep"];
8 -> 9 [label="Control Dep"];
10 -> 9 [label="AST"];
11 -> 10 [label="AST"];
12 -> 8 [label="AST"];
12 -> 11 [label="AST"];
16 -> 61 [label="Define-Use"];
16 -> 92 [label="Define-Use"];
16 -> 97 [label="Define-Use"];
16 -> 134 [label="Define-Use"];
16 -> 144 [label="Define-Use"];
16 -> 171 [label="Define-Use"];
16 -> 177 [label="Define-Use"];
16 -> 184 [label="Define-Use"];
16 -> 201 [label="Define-Use"];
16 -> 209 [label="Define-Use"];
16 -> 214 [label="Define-Use"];
16 -> 225 [label="Define-Use"];
16 -> 235 [label="Define-Use"];
17 -> 16 [label="AST"];
17 -> 13 [label="AST"];
17 -> 15 [label="AST"];
20 -> 116 [label="Define-Use"];
20 -> 155 [label="Define-Use"];
20 -> 217 [label="Define-Use"];
21 -> 20 [label="AST"];
21 -> 18 [label="AST"];
21 -> 19 [label="AST"];
25 -> 24 [label="AST"];
25 -> 22 [label="AST"];
25 -> 23 [label="AST"];
27 -> 28 [label="Data Dep"];
28 -> 50 [label="Define-Use"];
28 -> 194 [label="Define-Use"];
29 -> 28 [label="AST"];
29 -> 26 [label="AST"];
29 -> 27 [label="AST"];
32 -> 34 [label="Define-Use"];
33 -> 32 [label="AST"];
33 -> 30 [label="AST"];
33 -> 31 [label="AST"];
38 -> 36 [label="AST"];
38 -> 37 [label="AST"];
38 -> 35 [label="AST"];
39 -> 34 [label="AST"];
39 -> 38 [label="AST"];
39 -> 192 [label="Control Dep"];
39 -> 49 [label="Control Dep"];
39 -> 47 [label="Control Dep"];
39 -> 43 [label="Control Dep"];
39 -> 45 [label="Control Dep"];
39 -> 46 [label="Control Dep"];
39 -> 191 [label="Control Dep"];
39 -> 50 [label="Control Dep"];
40 -> 46 [label="Define-Use"];
41 -> 40 [label="AST"];
45 -> 48 [label="Data Dep"];
46 -> 48 [label="Data Dep"];
47 -> 44 [label="AST"];
47 -> 45 [label="AST"];
47 -> 43 [label="AST"];
47 -> 46 [label="AST"];
48 -> 52 [label="Define-Use"];
48 -> 62 [label="Define-Use"];
48 -> 69 [label="Define-Use"];
48 -> 80 [label="Define-Use"];
48 -> 98 [label="Define-Use"];
48 -> 107 [label="Define-Use"];
48 -> 156 [label="Define-Use"];
48 -> 166 [label="Define-Use"];
48 -> 185 [label="Define-Use"];
49 -> 48 [label="AST"];
49 -> 42 [label="AST"];
49 -> 47 [label="AST"];
50 -> 67 [label="Control Dep"];
50 -> 51 [label="Control Dep"];
50 -> 65 [label="Control Dep"];
50 -> 54 [label="Control Dep"];
50 -> 52 [label="Control Dep"];
50 -> 53 [label="Control Dep"];
50 -> 66 [label="Control Dep"];
50 -> 105 [label="Control Dep"];
50 -> 68 [label="Control Dep"];
50 -> 103 [label="Control Dep"];
50 -> 71 [label="Control Dep"];
50 -> 69 [label="Control Dep"];
50 -> 70 [label="Control Dep"];
50 -> 104 [label="Control Dep"];
50 -> 161 [label="Control Dep"];
50 -> 106 [label="Control Dep"];
50 -> 159 [label="Control Dep"];
50 -> 109 [label="Control Dep"];
50 -> 107 [label="Control Dep"];
50 -> 108 [label="Control Dep"];
50 -> 160 [label="Control Dep"];
50 -> 188 [label="Control Dep"];
50 -> 162 [label="Control Dep"];
50 -> 165 [label="Control Dep"];
50 -> 163 [label="Control Dep"];
50 -> 164 [label="Control Dep"];
50 -> 181 [label="Control Dep"];
50 -> 168 [label="Control Dep"];
50 -> 166 [label="Control Dep"];
50 -> 167 [label="Control Dep"];
50 -> 186 [label="Control Dep"];
50 -> 182 [label="Control Dep"];
50 -> 184 [label="Control Dep"];
50 -> 185 [label="Control Dep"];
50 -> 187 [label="Control Dep"];
50 -> 190 [label="Control Dep"];
50 -> 189 [label="Control Dep"];
54 -> 52 [label="AST"];
54 -> 53 [label="AST"];
54 -> 58 [label="Control Dep"];
54 -> 57 [label="Control Dep"];
54 -> 55 [label="Control Dep"];
54 -> 56 [label="Control Dep"];
54 -> 64 [label="Control Dep"];
54 -> 63 [label="Control Dep"];
54 -> 59 [label="Control Dep"];
54 -> 61 [label="Control Dep"];
54 -> 62 [label="Control Dep"];
55 -> 194 [label="Define-Use"];
56 -> 55 [label="Data Dep"];
57 -> 55 [label="AST"];
57 -> 56 [label="AST"];
58 -> 57 [label="AST"];
63 -> 60 [label="AST"];
63 -> 61 [label="AST"];
63 -> 59 [label="AST"];
63 -> 62 [label="AST"];
64 -> 63 [label="AST"];
65 -> 54 [label="AST"];
65 -> 58 [label="AST"];
65 -> 64 [label="AST"];
67 -> 51 [label="AST"];
67 -> 65 [label="AST"];
67 -> 66 [label="AST"];
71 -> 69 [label="AST"];
71 -> 70 [label="AST"];
71 -> 79 [label="Control Dep"];
71 -> 74 [label="Control Dep"];
71 -> 72 [label="Control Dep"];
71 -> 73 [label="Control Dep"];
71 -> 78 [label="Control Dep"];
71 -> 75 [label="Control Dep"];
71 -> 77 [label="Control Dep"];
71 -> 102 [label="Control Dep"];
71 -> 101 [label="Control Dep"];
71 -> 82 [label="Control Dep"];
71 -> 80 [label="Control Dep"];
71 -> 81 [label="Control Dep"];
72 -> 194 [label="Define-Use"];
73 -> 72 [label="Data Dep"];
74 -> 72 [label="AST"];
74 -> 73 [label="AST"];
75 -> 116 [label="Define-Use"];
75 -> 155 [label="Define-Use"];
75 -> 217 [label="Define-Use"];
78 -> 75 [label="AST"];
78 -> 77 [label="AST"];
79 -> 74 [label="AST"];
79 -> 78 [label="AST"];
82 -> 80 [label="AST"];
82 -> 81 [label="AST"];
82 -> 86 [label="Control Dep"];
82 -> 85 [label="Control Dep"];
82 -> 83 [label="Control Dep"];
82 -> 84 [label="Control Dep"];
82 -> 100 [label="Control Dep"];
82 -> 89 [label="Control Dep"];
82 -> 87 [label="Control Dep"];
82 -> 88 [label="Control Dep"];
82 -> 94 [label="Control Dep"];
82 -> 90 [label="Control Dep"];
82 -> 92 [label="Control Dep"];
82 -> 93 [label="Control Dep"];
82 -> 99 [label="Control Dep"];
82 -> 95 [label="Control Dep"];
82 -> 97 [label="Control Dep"];
82 -> 98 [label="Control Dep"];
83 -> 194 [label="Define-Use"];
84 -> 83 [label="Data Dep"];
85 -> 83 [label="AST"];
85 -> 84 [label="AST"];
86 -> 85 [label="AST"];
87 -> 194 [label="Define-Use"];
88 -> 87 [label="Data Dep"];
89 -> 87 [label="AST"];
89 -> 88 [label="AST"];
94 -> 91 [label="AST"];
94 -> 92 [label="AST"];
94 -> 90 [label="AST"];
94 -> 93 [label="AST"];
99 -> 96 [label="AST"];
99 -> 97 [label="AST"];
99 -> 95 [label="AST"];
99 -> 98 [label="AST"];
100 -> 89 [label="AST"];
100 -> 94 [label="AST"];
100 -> 99 [label="AST"];
101 -> 82 [label="AST"];
101 -> 86 [label="AST"];
101 -> 100 [label="AST"];
102 -> 101 [label="AST"];
103 -> 71 [label="AST"];
103 -> 79 [label="AST"];
103 -> 102 [label="AST"];
105 -> 68 [label="AST"];
105 -> 103 [label="AST"];
105 -> 104 [label="AST"];
109 -> 107 [label="AST"];
109 -> 108 [label="AST"];
109 -> 152 [label="Control Dep"];
109 -> 112 [label="Control Dep"];
109 -> 110 [label="Control Dep"];
109 -> 111 [label="Control Dep"];
109 -> 119 [label="Control Dep"];
109 -> 117 [label="Control Dep"];
109 -> 114 [label="Control Dep"];
109 -> 116 [label="Control Dep"];
109 -> 128 [label="Control Dep"];
109 -> 125 [label="Control Dep"];
109 -> 121 [label="Control Dep"];
109 -> 123 [label="Control Dep"];
109 -> 124 [label="Control Dep"];
109 -> 148 [label="Control Dep"];
109 -> 131 [label="Control Dep"];
109 -> 129 [label="Control Dep"];
109 -> 130 [label="Control Dep"];
109 -> 151 [label="Control Dep"];
109 -> 149 [label="Control Dep"];
109 -> 150 [label="Control Dep"];
109 -> 158 [label="Control Dep"];
109 -> 157 [label="Control Dep"];
109 -> 153 [label="Control Dep"];
109 -> 155 [label="Control Dep"];
109 -> 156 [label="Control Dep"];
110 -> 194 [label="Define-Use"];
111 -> 110 [label="Data Dep"];
112 -> 110 [label="AST"];
112 -> 111 [label="AST"];
116 -> 118 [label="Data Dep"];
117 -> 115 [label="AST"];
117 -> 116 [label="AST"];
117 -> 114 [label="AST"];
117 -> 242 [label="Action"];
118 -> 124 [label="Define-Use"];
118 -> 136 [label="Define-Use"];
119 -> 118 [label="AST"];
119 -> 113 [label="AST"];
119 -> 117 [label="AST"];
119 -> 240 [label="Action"];
123 -> 127 [label="Data Dep"];
124 -> 127 [label="Data Dep"];
125 -> 122 [label="AST"];
125 -> 126 [label="AST"];
125 -> 123 [label="AST"];
125 -> 121 [label="AST"];
125 -> 124 [label="AST"];
127 -> 129 [label="Define-Use"];
127 -> 145 [label="Define-Use"];
128 -> 127 [label="AST"];
128 -> 120 [label="AST"];
128 -> 125 [label="AST"];
131 -> 129 [label="AST"];
131 -> 130 [label="AST"];
131 -> 141 [label="Control Dep"];
131 -> 140 [label="Control Dep"];
131 -> 132 [label="Control Dep"];
131 -> 134 [label="Control Dep"];
131 -> 139 [label="Control Dep"];
131 -> 137 [label="Control Dep"];
131 -> 135 [label="Control Dep"];
131 -> 136 [label="Control Dep"];
131 -> 138 [label="Control Dep"];
131 -> 147 [label="Control Dep"];
131 -> 146 [label="Control Dep"];
131 -> 142 [label="Control Dep"];
131 -> 144 [label="Control Dep"];
131 -> 145 [label="Control Dep"];
137 -> 135 [label="AST"];
137 -> 136 [label="AST"];
139 -> 137 [label="AST"];
139 -> 138 [label="AST"];
140 -> 133 [label="AST"];
140 -> 134 [label="AST"];
140 -> 132 [label="AST"];
140 -> 139 [label="AST"];
141 -> 140 [label="AST"];
146 -> 143 [label="AST"];
146 -> 144 [label="AST"];
146 -> 142 [label="AST"];
146 -> 145 [label="AST"];
147 -> 146 [label="AST"];
148 -> 131 [label="AST"];
148 -> 141 [label="AST"];
148 -> 147 [label="AST"];
149 -> 155 [label="Define-Use"];
149 -> 217 [label="Define-Use"];
151 -> 149 [label="AST"];
151 -> 150 [label="AST"];
152 -> 112 [label="AST"];
152 -> 119 [label="AST"];
152 -> 128 [label="AST"];
152 -> 148 [label="AST"];
152 -> 151 [label="AST"];
157 -> 154 [label="AST"];
157 -> 155 [label="AST"];
157 -> 153 [label="AST"];
157 -> 156 [label="AST"];
158 -> 157 [label="AST"];
159 -> 109 [label="AST"];
159 -> 152 [label="AST"];
159 -> 158 [label="AST"];
161 -> 106 [label="AST"];
161 -> 159 [label="AST"];
161 -> 160 [label="AST"];
163 -> 194 [label="Define-Use"];
164 -> 163 [label="Data Dep"];
165 -> 163 [label="AST"];
165 -> 164 [label="AST"];
168 -> 166 [label="AST"];
168 -> 167 [label="AST"];
168 -> 174 [label="Control Dep"];
168 -> 173 [label="Control Dep"];
168 -> 169 [label="Control Dep"];
168 -> 171 [label="Control Dep"];
168 -> 172 [label="Control Dep"];
168 -> 180 [label="Control Dep"];
168 -> 179 [label="Control Dep"];
168 -> 175 [label="Control Dep"];
168 -> 177 [label="Control Dep"];
168 -> 178 [label="Control Dep"];
173 -> 170 [label="AST"];
173 -> 171 [label="AST"];
173 -> 169 [label="AST"];
173 -> 172 [label="AST"];
174 -> 173 [label="AST"];
179 -> 176 [label="AST"];
179 -> 177 [label="AST"];
179 -> 175 [label="AST"];
179 -> 178 [label="AST"];
180 -> 179 [label="AST"];
181 -> 168 [label="AST"];
181 -> 174 [label="AST"];
181 -> 180 [label="AST"];
186 -> 183 [label="AST"];
186 -> 184 [label="AST"];
186 -> 182 [label="AST"];
186 -> 185 [label="AST"];
188 -> 162 [label="AST"];
188 -> 165 [label="AST"];
188 -> 181 [label="AST"];
188 -> 186 [label="AST"];
188 -> 187 [label="AST"];
190 -> 189 [label="AST"];
191 -> 50 [label="AST"];
191 -> 67 [label="AST"];
191 -> 105 [label="AST"];
191 -> 161 [label="AST"];
191 -> 188 [label="AST"];
191 -> 190 [label="AST"];
192 -> 49 [label="AST"];
192 -> 191 [label="AST"];
193 -> 33 [label="AST"];
193 -> 39 [label="AST"];
193 -> 41 [label="AST"];
193 -> 192 [label="AST"];
194 -> 197 [label="Control Dep"];
194 -> 195 [label="Control Dep"];
194 -> 196 [label="Control Dep"];
194 -> 205 [label="Control Dep"];
194 -> 198 [label="Control Dep"];
194 -> 203 [label="Control Dep"];
194 -> 199 [label="Control Dep"];
194 -> 201 [label="Control Dep"];
194 -> 202 [label="Control Dep"];
194 -> 204 [label="Control Dep"];
194 -> 221 [label="Control Dep"];
194 -> 206 [label="Control Dep"];
194 -> 211 [label="Control Dep"];
194 -> 207 [label="Control Dep"];
194 -> 209 [label="Control Dep"];
194 -> 210 [label="Control Dep"];
194 -> 219 [label="Control Dep"];
194 -> 212 [label="Control Dep"];
194 -> 214 [label="Control Dep"];
194 -> 218 [label="Control Dep"];
194 -> 215 [label="Control Dep"];
194 -> 217 [label="Control Dep"];
194 -> 220 [label="Control Dep"];
194 -> 229 [label="Control Dep"];
194 -> 222 [label="Control Dep"];
194 -> 227 [label="Control Dep"];
194 -> 223 [label="Control Dep"];
194 -> 225 [label="Control Dep"];
194 -> 226 [label="Control Dep"];
194 -> 228 [label="Control Dep"];
194 -> 231 [label="Control Dep"];
194 -> 230 [label="Control Dep"];
197 -> 195 [label="AST"];
197 -> 196 [label="AST"];
203 -> 200 [label="AST"];
203 -> 201 [label="AST"];
203 -> 199 [label="AST"];
203 -> 202 [label="AST"];
205 -> 198 [label="AST"];
205 -> 203 [label="AST"];
205 -> 204 [label="AST"];
211 -> 208 [label="AST"];
211 -> 209 [label="AST"];
211 -> 207 [label="AST"];
211 -> 210 [label="AST"];
218 -> 216 [label="AST"];
218 -> 217 [label="AST"];
218 -> 215 [label="AST"];
219 -> 213 [label="AST"];
219 -> 214 [label="AST"];
219 -> 212 [label="AST"];
219 -> 218 [label="AST"];
221 -> 206 [label="AST"];
221 -> 211 [label="AST"];
221 -> 219 [label="AST"];
221 -> 220 [label="AST"];
227 -> 224 [label="AST"];
227 -> 225 [label="AST"];
227 -> 223 [label="AST"];
227 -> 226 [label="AST"];
229 -> 222 [label="AST"];
229 -> 227 [label="AST"];
229 -> 228 [label="AST"];
231 -> 230 [label="AST"];
232 -> 194 [label="AST"];
232 -> 197 [label="AST"];
232 -> 205 [label="AST"];
232 -> 221 [label="AST"];
232 -> 229 [label="AST"];
232 -> 231 [label="AST"];
236 -> 234 [label="AST"];
236 -> 235 [label="AST"];
236 -> 233 [label="AST"];
237 -> 236 [label="AST"];
238 -> 12 [label="AST"];
238 -> 17 [label="AST"];
238 -> 21 [label="AST"];
238 -> 25 [label="AST"];
238 -> 29 [label="AST"];
238 -> 193 [label="AST"];
238 -> 232 [label="AST"];
238 -> 237 [label="AST"];
239 -> 1 [label="AST"];
239 -> 0 [label="AST"];
239 -> 2 [label="AST"];
239 -> 4 [label="AST"];
239 -> 238 [label="AST"];
240 -> 241 [label="Action"];
242 -> 241 [label="Action"];
}