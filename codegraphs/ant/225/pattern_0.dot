digraph "Pattern" {
0 [label="execute#?#15:INSERT
execute#?#38:INSERT" shape=ellipse]
1 [label="execute#?#15:weblogicAdmin.setClasspath(execClassPath)
execute#?#38:weblogicServer.setClasspath(execClassPath)" shape=ellipse]
2 [label="execute#?#2:\{
    if ((username == null) || (password == null)) \{
        throw new BuildException(\"weblogic username and password must both be set\");
    \}
    if (serverURL == null) \{
        throw new BuildException(\"The url of the weblogic server must be provided.\");
    \}
    String execClassPath = project.translatePath(classpath);
    Java weblogicAdmin = ((Java) (project.createTask(\"java\")));
    weblogicAdmin.setFork(\"yes\");
    weblogicAdmin.setClassname(\"weblogic.Admin\");
    String args = (((((serverURL + \" SHUTDOWN \") + username) + \" \") + password) + \" \") + delay;
    weblogicAdmin.setArgs(args);
    weblogicAdmin.setClasspath(execClassPath);
    weblogicAdmin.execute();
\}
execute#?#2:\{
    if (weblogicSystemHome == null) \{
        throw new BuildException(\"weblogic home must be set\");
    \}
    if (!weblogicSystemHome.isDirectory()) \{
        throw new BuildException((\"weblogic home directory \" + weblogicSystemHome.getPath()) + \" is not valid\");
    \}
    File propertiesFile = new File(weblogicSystemHome, weblogicPropertiesFile);
    if (!propertiesFile.exists()) \{
        throw new BuildException(((\"Properties file \" + weblogicPropertiesFile) + \" not found in weblogic home \") + weblogicSystemHome);
    \}
    File securityPolicyFile = null;
    if (securityPolicy == null) \{
        securityPolicyFile = new File(weblogicSystemHome, defaultPolicyFile);
    \} else \{
        securityPolicyFile = new File(weblogicSystemHome, securityPolicy);
    \}
    if (!securityPolicyFile.exists()) \{
        throw new BuildException((\"Security policy \" + securityPolicyFile) + \" was not found.\");
    \}
    String execClassPath = project.translatePath(classpath);
    Java weblogicServer = ((Java) (project.createTask(\"java\")));
    weblogicServer.setFork(\"yes\");
    weblogicServer.setClassname(\"weblogic.Server\");
    String jvmArgs = \"\";
    if (weblogicClasspath != null) \{
        jvmArgs += \"-Dweblogic.class.path=\" + project.translatePath(weblogicClasspath);
    \}
    jvmArgs += \" -Djava.security.manager -Djava.security.policy==\" + securityPolicyFile;
    jvmArgs += \" -Dweblogic.system.home=\" + weblogicSystemHome;
    jvmArgs += \" -Dweblogic.system.name=\" + weblogicSystemName;
    jvmArgs += \" -Dweblogic.system.propertiesFile=\" + weblogicPropertiesFile;
    weblogicServer.setJvmargs(jvmArgs);
    weblogicServer.setClasspath(execClassPath);
    if (weblogicServer.executeJava() != 0) \{
        throw new BuildException(\"Execution of weblogic server failed\");
    \}
\}" shape=ellipse]
3 [label="execute#?#2:public void execute() throws BuildException \{
    if ((username == null) || (password == null)) \{
        throw new BuildException(\"weblogic username and password must both be set\");
    \}
    if (serverURL == null) \{
        throw new BuildException(\"The url of the weblogic server must be provided.\");
    \}
    String execClassPath = project.translatePath(classpath);
    Java weblogicAdmin = ((Java) (project.createTask(\"java\")));
    weblogicAdmin.setFork(\"yes\");
    weblogicAdmin.setClassname(\"weblogic.Admin\");
    String args = (((((serverURL + \" SHUTDOWN \") + username) + \" \") + password) + \" \") + delay;
    weblogicAdmin.setArgs(args);
    weblogicAdmin.setClasspath(execClassPath);
    weblogicAdmin.execute();
\}
execute#?#2:public void execute() throws BuildException \{
    if (weblogicSystemHome == null) \{
        throw new BuildException(\"weblogic home must be set\");
    \}
    if (!weblogicSystemHome.isDirectory()) \{
        throw new BuildException((\"weblogic home directory \" + weblogicSystemHome.getPath()) + \" is not valid\");
    \}
    File propertiesFile = new File(weblogicSystemHome, weblogicPropertiesFile);
    if (!propertiesFile.exists()) \{
        throw new BuildException(((\"Properties file \" + weblogicPropertiesFile) + \" not found in weblogic home \") + weblogicSystemHome);
    \}
    File securityPolicyFile = null;
    if (securityPolicy == null) \{
        securityPolicyFile = new File(weblogicSystemHome, defaultPolicyFile);
    \} else \{
        securityPolicyFile = new File(weblogicSystemHome, securityPolicy);
    \}
    if (!securityPolicyFile.exists()) \{
        throw new BuildException((\"Security policy \" + securityPolicyFile) + \" was not found.\");
    \}
    String execClassPath = project.translatePath(classpath);
    Java weblogicServer = ((Java) (project.createTask(\"java\")));
    weblogicServer.setFork(\"yes\");
    weblogicServer.setClassname(\"weblogic.Server\");
    String jvmArgs = \"\";
    if (weblogicClasspath != null) \{
        jvmArgs += \"-Dweblogic.class.path=\" + project.translatePath(weblogicClasspath);
    \}
    jvmArgs += \" -Djava.security.manager -Djava.security.policy==\" + securityPolicyFile;
    jvmArgs += \" -Dweblogic.system.home=\" + weblogicSystemHome;
    jvmArgs += \" -Dweblogic.system.name=\" + weblogicSystemName;
    jvmArgs += \" -Dweblogic.system.propertiesFile=\" + weblogicPropertiesFile;
    weblogicServer.setJvmargs(jvmArgs);
    weblogicServer.setClasspath(execClassPath);
    if (weblogicServer.executeJava() != 0) \{
        throw new BuildException(\"Execution of weblogic server failed\");
    \}
\}" shape=ellipse]
4 [label="execute#?#3:if ((username == null) || (password == null)) \{
    throw new BuildException(\"weblogic username and password must both be set\");
\}
execute#?#3:if (weblogicSystemHome == null) \{
    throw new BuildException(\"weblogic home must be set\");
\}" shape=ellipse]
5 [label="execute#?#6:if (serverURL == null) \{
    throw new BuildException(\"The url of the weblogic server must be provided.\");
\}
execute#?#39:if (weblogicServer.executeJava() != 0) \{
    throw new BuildException(\"Execution of weblogic server failed\");
\}" shape=ellipse]
6 [label="execute#?#9:String execClassPath = project.translatePath(classpath)
execute#?#25:String execClassPath = project.translatePath(classpath)" shape=ellipse]
7 [label="execute#?#10:Java weblogicAdmin = ((Java) (project.createTask(\"java\")))
execute#?#26:Java weblogicServer = ((Java) (project.createTask(\"java\")))" shape=ellipse]
8 [label="execute#?#11:weblogicAdmin.setFork(\"yes\")
execute#?#27:weblogicServer.setFork(\"yes\")" shape=ellipse]
9 [label="execute#?#12:weblogicAdmin.setClassname(\"weblogic.Admin\")
execute#?#28:weblogicServer.setClassname(\"weblogic.Server\")" shape=ellipse]
10 [label="execute#?#13:String args = (((((serverURL + \" SHUTDOWN \") + username) + \" \") + password) + \" \") + delay
execute#?#6:if (!weblogicSystemHome.isDirectory()) \{
    throw new BuildException((\"weblogic home directory \" + weblogicSystemHome.getPath()) + \" is not valid\");
\}" shape=ellipse]
11 [label="execute#?#14:weblogicAdmin.setArgs(args)
execute#?#37:weblogicServer.setJvmargs(jvmArgs)" shape=ellipse]
12 [label="execute#?#16:weblogicAdmin.execute()" shape=ellipse]
13 [label="execute#?#15:setClasspath
execute#?#38:setClasspath" shape=ellipse]
14 [label="execute#?#15:weblogicAdmin
execute#?#38:weblogicServer" shape=ellipse]
15 [label="execute#?#10:weblogicAdmin
execute#?#26:weblogicServer" shape=ellipse]
16 [label="execute#?#-1:weblogicAdmin
execute#?#-1:weblogicServer" shape=ellipse]
17 [label="execute#?#15:setClasspath(java.lang.String)
execute#?#38:setClasspath(java.lang.String)" shape=ellipse]
18 [label="execute#?#-1:Java
execute#?#-1:Java" shape=ellipse]
19 [label="execute#?#-1:String
execute#?#-1:String" shape=ellipse]
20 [label="execute#?#15:execClassPath
execute#?#38:execClassPath" shape=ellipse]
21 [label="execute#?#9:execClassPath
execute#?#25:execClassPath" shape=ellipse]
22 [label="execute#?#-1:execClassPath
execute#?#-1:execClassPath" shape=ellipse]
23 [label="execute#?#15:MOVE
execute#?#38:MOVE" shape=ellipse]
24 [label="execute#?#15:new Path(execClassPath)
execute#?#38:new Path(execClassPath)" shape=ellipse]
25 [label="execute#?#29:String jvmArgs = \"\"" shape=ellipse]
26 [label="execute#?#22:if (!securityPolicyFile.exists()) \{
    throw new BuildException((\"Security policy \" + securityPolicyFile) + \" was not found.\");
\}" shape=ellipse]
27 [label="execute#?#30:if (weblogicClasspath != null) \{
    jvmArgs += \"-Dweblogic.class.path=\" + project.translatePath(weblogicClasspath);
\}" shape=ellipse]
28 [label="execute#?#17:if (securityPolicy == null) \{
    securityPolicyFile = new File(weblogicSystemHome, defaultPolicyFile);
\} else \{
    securityPolicyFile = new File(weblogicSystemHome, securityPolicy);
\}" shape=ellipse]
29 [label="execute#?#10:File propertiesFile = new File(weblogicSystemHome, weblogicPropertiesFile)" shape=ellipse]
30 [label="execute#?#33:jvmArgs += \" -Djava.security.manager -Djava.security.policy==\" + securityPolicyFile" shape=ellipse]
31 [label="execute#?#34:jvmArgs += \" -Dweblogic.system.home=\" + weblogicSystemHome" shape=ellipse]
32 [label="execute#?#36:jvmArgs += \" -Dweblogic.system.propertiesFile=\" + weblogicPropertiesFile" shape=ellipse]
33 [label="execute#?#16:File securityPolicyFile = null" shape=ellipse]
34 [label="execute#?#11:if (!propertiesFile.exists()) \{
    throw new BuildException(((\"Properties file \" + weblogicPropertiesFile) + \" not found in weblogic home \") + weblogicSystemHome);
\}" shape=ellipse]
35 [label="execute#?#35:jvmArgs += \" -Dweblogic.system.name=\" + weblogicSystemName" shape=ellipse]
0 -> 24 [label="Action:2"];
1 -> 0 [label="Action:2"];
1 -> 13 [label="AST:2"];
1 -> 14 [label="AST:2"];
1 -> 17 [label="AST:2"];
1 -> 20 [label="AST:2"];
2 -> 1 [label="AST:2"];
2 -> 4 [label="AST:2"];
2 -> 5 [label="AST:2"];
2 -> 6 [label="AST:2"];
2 -> 7 [label="AST:2"];
2 -> 8 [label="AST:2"];
2 -> 9 [label="AST:2"];
2 -> 10 [label="AST:2"];
2 -> 11 [label="AST:2"];
2 -> 12 [label="AST:1"];
2 -> 25 [label="AST:1"];
2 -> 26 [label="AST:1"];
2 -> 27 [label="AST:1"];
2 -> 28 [label="AST:1"];
2 -> 29 [label="AST:1"];
2 -> 30 [label="AST:1"];
2 -> 31 [label="AST:1"];
2 -> 32 [label="AST:1"];
2 -> 33 [label="AST:1"];
2 -> 34 [label="AST:1"];
2 -> 35 [label="AST:1"];
3 -> 2 [label="AST:2"];
6 -> 21 [label="AST:2"];
7 -> 15 [label="AST:2"];
14 -> 16 [label="AST:2"];
15 -> 14 [label="Define Use:2"];
17 -> 18 [label="AST:2"];
17 -> 19 [label="AST:2"];
20 -> 22 [label="AST:2"];
20 -> 23 [label="Action:2"];
21 -> 20 [label="Define Use:2"];
23 -> 24 [label="Action:2"];
}