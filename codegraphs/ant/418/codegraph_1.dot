digraph "scandir#?,File,TokenizedPath,boolean,String[],LinkedList" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@scandir" shape=ellipse]
2 [label="3:CtParameterImpl@File dir" shape=ellipse]
3 [label="3:CtTypeReferenceImpl@File" shape=ellipse]
4 [label="4:CtParameterImpl@TokenizedPath path" shape=ellipse]
5 [label="4:CtTypeReferenceImpl@TokenizedPath" shape=ellipse]
6 [label="5:CtParameterImpl@boolean fast" shape=ellipse]
7 [label="5:CtTypeReferenceImpl@boolean" shape=ellipse]
8 [label="6:CtParameterImpl@String[] newfiles" shape=ellipse]
9 [label="6:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
10 [label="7:CtParameterImpl@LinkedList directoryNamesFollowed" shape=ellipse]
11 [label="7:CtTypeReferenceImpl@LinkedList" shape=ellipse]
12 [label="8:CtTypeReferenceImpl@String" shape=ellipse]
13 [label="8:CtExecutableReferenceImpl@toString()" shape=ellipse]
14 [label="8:CtVirtualElement@toString" shape=ellipse]
15 [label="8:CtVariableReadImpl@path" shape=ellipse]
16 [label="8:CtInvocationImpl@path.toString()" shape=ellipse]
17 [label="8:CtVirtualElement@vpath" shape=ellipse]
18 [label="8:CtLocalVariableImpl@String vpath = path.toString()" shape=ellipse]
19 [label="9:CtExecutableReferenceImpl@length()" shape=ellipse]
20 [label="9:CtVirtualElement@length" shape=ellipse]
21 [label="9:CtVariableReadImpl@vpath" shape=ellipse]
22 [label="9:CtInvocationImpl@vpath.length()" shape=ellipse]
23 [label="9:CtLiteralImpl@0" shape=ellipse]
24 [label="9:CtBinaryOperatorImpl@(vpath.length() > 0)" shape=ellipse]
25 [label="9:CtExecutableReferenceImpl@endsWith(java.lang.String)" shape=ellipse]
26 [label="9:CtVirtualElement@endsWith" shape=ellipse]
27 [label="9:CtVariableReadImpl@vpath" shape=ellipse]
28 [label="9:CtTypeAccessImpl@separator" shape=ellipse]
29 [label="9:CtInvocationImpl@vpath.endsWith(separator)" shape=ellipse]
30 [label="9:CtUnaryOperatorImpl@(!vpath.endsWith(separator))" shape=ellipse]
31 [label="9:CtBinaryOperatorImpl@(vpath.length() > 0) && (!vpath.endsWith(separator))" shape=ellipse]
32 [label="10:CtVariableWriteImpl@vpath" shape=ellipse]
33 [label="10:CtFieldReadImpl@File.separator" shape=ellipse]
34 [label="10:CtOperatorAssignmentImpl@vpath += File.separator" shape=ellipse]
35 [label="9:CtBlockImpl@\{
    vpath += File.separator;
\}" shape=ellipse]
36 [label="9:CtIfImpl@if ((vpath.length() > 0) && (!vpath.endsWith(separator))) \{
    vpath += File.separator;
\}" shape=ellipse]
37 [label="12:CtVariableReadImpl@fast" shape=ellipse]
38 [label="12:CtExecutableReferenceImpl@hasBeenScanned(java.lang.String)" shape=ellipse]
39 [label="12:CtVirtualElement@hasBeenScanned" shape=ellipse]
40 [label="12:CtVariableReadImpl@vpath" shape=ellipse]
41 [label="12:CtInvocationImpl@hasBeenScanned(vpath)" shape=ellipse]
42 [label="12:CtBinaryOperatorImpl@fast && hasBeenScanned(vpath)" shape=ellipse]
43 [label="13:CtReturnImpl@return" shape=ellipse]
44 [label="12:CtBlockImpl@\{
    return;
\}" shape=ellipse]
45 [label="12:CtIfImpl@if (fast && hasBeenScanned(vpath)) \{
    return;
\}" shape=ellipse]
46 [label="15:CtFieldReadImpl@followSymlinks" shape=ellipse]
47 [label="15:CtUnaryOperatorImpl@!followSymlinks" shape=ellipse]
48 [label="16:CtTypeReferenceImpl@ArrayList" shape=ellipse]
49 [label="16:CtTypeReferenceImpl@ArrayList" shape=ellipse]
50 [label="16:CtConstructorCallImpl@new ArrayList()" shape=ellipse]
51 [label="16:CtVirtualElement@noLinks" shape=ellipse]
52 [label="16:CtLocalVariableImpl@ArrayList noLinks = new ArrayList()" shape=ellipse]
53 [label="17:CtTypeReferenceImpl@int" shape=ellipse]
54 [label="17:CtLiteralImpl@0" shape=ellipse]
55 [label="17:CtVirtualElement@i" shape=ellipse]
56 [label="17:CtLocalVariableImpl@int i = 0" shape=ellipse]
57 [label="17:CtVariableReadImpl@i" shape=ellipse]
58 [label="17:CtVariableReadImpl@newfiles" shape=ellipse]
59 [label="17:CtParameterReferenceImpl@newfiles" shape=ellipse]
60 [label="17:CtFieldReadImpl@newfiles.length" shape=ellipse]
61 [label="17:CtBinaryOperatorImpl@i < newfiles.length" shape=ellipse]
62 [label="17:CtVariableWriteImpl@i" shape=ellipse]
63 [label="17:CtUnaryOperatorImpl@i++" shape=ellipse]
64 [label="19:CtExecutableReferenceImpl@isSymbolicLink(File,java.lang.String)" shape=ellipse]
65 [label="19:CtVirtualElement@isSymbolicLink" shape=ellipse]
66 [label="19:CtTypeAccessImpl@SYMLINK_UTILS" shape=ellipse]
67 [label="19:CtVariableReadImpl@dir" shape=ellipse]
68 [label="19:CtVariableReadImpl@newfiles" shape=ellipse]
69 [label="19:CtVariableReadImpl@i" shape=ellipse]
70 [label="19:CtArrayReadImpl@newfiles[i]" shape=ellipse]
71 [label="19:CtInvocationImpl@SYMLINK_UTILS.isSymbolicLink(dir, newfiles[i])" shape=ellipse]
72 [label="20:CtTypeReferenceImpl@String" shape=ellipse]
73 [label="20:CtVariableReadImpl@vpath" shape=ellipse]
74 [label="20:CtVariableReadImpl@newfiles" shape=ellipse]
75 [label="20:CtVariableReadImpl@i" shape=ellipse]
76 [label="20:CtArrayReadImpl@newfiles[i]" shape=ellipse]
77 [label="20:CtBinaryOperatorImpl@vpath + newfiles[i]" shape=ellipse]
78 [label="20:CtVirtualElement@name" shape=ellipse]
79 [label="20:CtLocalVariableImpl@String name = vpath + newfiles[i]" shape=ellipse]
80 [label="21:CtTypeReferenceImpl@File" shape=ellipse]
81 [label="21:CtTypeReferenceImpl@File" shape=ellipse]
82 [label="21:CtVariableReadImpl@dir" shape=ellipse]
83 [label="21:CtVariableReadImpl@newfiles" shape=ellipse]
84 [label="21:CtVariableReadImpl@i" shape=ellipse]
85 [label="21:CtArrayReadImpl@newfiles[i]" shape=ellipse]
86 [label="21:CtConstructorCallImpl@new File(dir, newfiles[i])" shape=ellipse]
87 [label="21:CtVirtualElement@file" shape=ellipse]
88 [label="21:CtLocalVariableImpl@File file = new File(dir, newfiles[i])" shape=ellipse]
89 [label="22:CtExecutableReferenceImpl@addElement(java.lang.String)" shape=ellipse]
90 [label="22:CtVirtualElement@addElement" shape=ellipse]
91 [label="22:CtExecutableReferenceImpl@isDirectory()" shape=ellipse]
92 [label="22:CtVirtualElement@isDirectory" shape=ellipse]
93 [label="22:CtVariableReadImpl@file" shape=ellipse]
94 [label="22:CtInvocationImpl@file.isDirectory()" shape=ellipse]
95 [label="22:CtFieldReadImpl@dirsExcluded" shape=ellipse]
96 [label="22:CtFieldReadImpl@filesExcluded" shape=ellipse]
97 [label="22:CtConditionalImpl@(file.isDirectory() ? dirsExcluded : filesExcluded)" shape=ellipse]
98 [label="22:CtVariableReadImpl@name" shape=ellipse]
99 [label="22:CtInvocationImpl@(file.isDirectory() ? dirsExcluded : filesExcluded).addElement(name)" shape=ellipse]
100 [label="23:CtExecutableReferenceImpl@isExcluded(java.lang.String)" shape=ellipse]
101 [label="23:CtVirtualElement@isExcluded" shape=ellipse]
102 [label="23:CtVariableReadImpl@name" shape=ellipse]
103 [label="23:CtInvocationImpl@isExcluded(name)" shape=ellipse]
104 [label="23:CtUnaryOperatorImpl@!isExcluded(name)" shape=ellipse]
105 [label="24:CtExecutableReferenceImpl@add()" shape=ellipse]
106 [label="24:CtVirtualElement@add" shape=ellipse]
107 [label="24:CtFieldReadImpl@notFollowedSymlinks" shape=ellipse]
108 [label="24:CtExecutableReferenceImpl@getAbsolutePath()" shape=ellipse]
109 [label="24:CtVirtualElement@getAbsolutePath" shape=ellipse]
110 [label="24:CtVariableReadImpl@file" shape=ellipse]
111 [label="24:CtInvocationImpl@file.getAbsolutePath()" shape=ellipse]
112 [label="24:CtInvocationImpl@notFollowedSymlinks.add(file.getAbsolutePath())" shape=ellipse]
113 [label="23:CtBlockImpl@\{
    notFollowedSymlinks.add(file.getAbsolutePath());
\}" shape=ellipse]
114 [label="23:CtIfImpl@if (!isExcluded(name)) \{
    notFollowedSymlinks.add(file.getAbsolutePath());
\}" shape=ellipse]
115 [label="19:CtBlockImpl@\{
    String name = vpath + newfiles[i];
    File file = new File(dir, newfiles[i]);
    (file.isDirectory() ? dirsExcluded : filesExcluded).addElement(name);
    if (!isExcluded(name)) \{
        notFollowedSymlinks.add(file.getAbsolutePath());
    \}
\}" shape=ellipse]
116 [label="27:CtExecutableReferenceImpl@add(java.lang.String)" shape=ellipse]
117 [label="27:CtVirtualElement@add" shape=ellipse]
118 [label="27:CtVariableReadImpl@noLinks" shape=ellipse]
119 [label="27:CtVariableReadImpl@newfiles" shape=ellipse]
120 [label="27:CtVariableReadImpl@i" shape=ellipse]
121 [label="27:CtArrayReadImpl@newfiles[i]" shape=ellipse]
122 [label="27:CtInvocationImpl@noLinks.add(newfiles[i])" shape=ellipse]
123 [label="26:CtBlockImpl@\{
    noLinks.add(newfiles[i]);
\}" shape=ellipse]
124 [label="19:CtIfImpl@if (SYMLINK_UTILS.isSymbolicLink(dir, newfiles[i])) \{
    String name = vpath + newfiles[i];
    File file = new File(dir, newfiles[i]);
    (file.isDirectory() ? dirsExcluded : filesExcluded).addElement(name);
    if (!isExcluded(name)) \{
        notFollowedSymlinks.add(file.getAbsolutePath());
    \}
\} else \{
    noLinks.add(newfiles[i]);
\}" shape=ellipse]
125 [label="18:CtBlockImpl@\{
    if (SYMLINK_UTILS.isSymbolicLink(dir, newfiles[i])) \{
        String name = vpath + newfiles[i];
        File file = new File(dir, newfiles[i]);
        (file.isDirectory() ? dirsExcluded : filesExcluded).addElement(name);
        if (!isExcluded(name)) \{
            notFollowedSymlinks.add(file.getAbsolutePath());
        \}
    \} else \{
        noLinks.add(newfiles[i]);
    \}
\}" shape=ellipse]
126 [label="29:CtVirtualElement@ioe" shape=ellipse]
127 [label="29:CtTypeReferenceImpl@IOException" shape=ellipse]
128 [label="29:CtCatchVariableImpl@IOException ioe" shape=ellipse]
129 [label="30:CtTypeReferenceImpl@String" shape=ellipse]
130 [label="31:CtLiteralImpl@\"IOException caught while checking \"" shape=ellipse]
131 [label="31:CtLiteralImpl@\"for links, couldn't get canonical path!\"" shape=ellipse]
132 [label="31:CtBinaryOperatorImpl@\"IOException caught while checking \" + \"for links, couldn't get canonical path!\"" shape=ellipse]
133 [label="30:CtVirtualElement@msg" shape=ellipse]
134 [label="30:CtLocalVariableImpl@String msg = \"IOException caught while checking \" + \"for links, couldn't get canonical path!\"" shape=ellipse]
135 [label="32:CtExecutableReferenceImpl@println(java.lang.String)" shape=ellipse]
136 [label="32:CtVirtualElement@println" shape=ellipse]
137 [label="32:CtTypeAccessImpl@System" shape=ellipse]
138 [label="32:CtFieldReadImpl@System.err" shape=ellipse]
139 [label="32:CtFieldReferenceImpl@java.lang.System.err" shape=ellipse]
140 [label="32:CtVariableReadImpl@msg" shape=ellipse]
141 [label="32:CtInvocationImpl@System.err.println(msg)" shape=ellipse]
142 [label="33:CtExecutableReferenceImpl@add(java.lang.String)" shape=ellipse]
143 [label="33:CtVirtualElement@add" shape=ellipse]
144 [label="33:CtVariableReadImpl@noLinks" shape=ellipse]
145 [label="33:CtVariableReadImpl@newfiles" shape=ellipse]
146 [label="33:CtVariableReadImpl@i" shape=ellipse]
147 [label="33:CtArrayReadImpl@newfiles[i]" shape=ellipse]
148 [label="33:CtInvocationImpl@noLinks.add(newfiles[i])" shape=ellipse]
149 [label="29:CtBlockImpl@\{
    String msg = \"IOException caught while checking \" + \"for links, couldn't get canonical path!\";
    System.err.println(msg);
    noLinks.add(newfiles[i]);
\}" shape=ellipse]
150 [label="29:CtCatchImpl@ catch (IOException ioe) \{
    String msg = \"IOException caught while checking \" + \"for links, couldn't get canonical path!\";
    System.err.println(msg);
    noLinks.add(newfiles[i]);
\}" shape=ellipse]
151 [label="18:CtTryImpl@try \{
    if (SYMLINK_UTILS.isSymbolicLink(dir, newfiles[i])) \{
        String name = vpath + newfiles[i];
        File file = new File(dir, newfiles[i]);
        (file.isDirectory() ? dirsExcluded : filesExcluded).addElement(name);
        if (!isExcluded(name)) \{
            notFollowedSymlinks.add(file.getAbsolutePath());
        \}
    \} else \{
        noLinks.add(newfiles[i]);
    \}
\} catch (IOException ioe) \{
    String msg = \"IOException caught while checking \" + \"for links, couldn't get canonical path!\";
    System.err.println(msg);
    noLinks.add(newfiles[i]);
\}" shape=ellipse]
152 [label="17:CtBlockImpl@\{
    try \{
        if (SYMLINK_UTILS.isSymbolicLink(dir, newfiles[i])) \{
            String name = vpath + newfiles[i];
            File file = new File(dir, newfiles[i]);
            (file.isDirectory() ? dirsExcluded : filesExcluded).addElement(name);
            if (!isExcluded(name)) \{
                notFollowedSymlinks.add(file.getAbsolutePath());
            \}
        \} else \{
            noLinks.add(newfiles[i]);
        \}
    \} catch (IOException ioe) \{
        String msg = \"IOException caught while checking \" + \"for links, couldn't get canonical path!\";
        System.err.println(msg);
        noLinks.add(newfiles[i]);
    \}
\}" shape=ellipse]
153 [label="17:CtForImpl@for (int i = 0; i < newfiles.length; i++) \{
    try \{
        if (SYMLINK_UTILS.isSymbolicLink(dir, newfiles[i])) \{
            String name = vpath + newfiles[i];
            File file = new File(dir, newfiles[i]);
            (file.isDirectory() ? dirsExcluded : filesExcluded).addElement(name);
            if (!isExcluded(name)) \{
                notFollowedSymlinks.add(file.getAbsolutePath());
            \}
        \} else \{
            noLinks.add(newfiles[i]);
        \}
    \} catch (IOException ioe) \{
        String msg = \"IOException caught while checking \" + \"for links, couldn't get canonical path!\";
        System.err.println(msg);
        noLinks.add(newfiles[i]);
    \}
\}" shape=ellipse]
154 [label="36:CtVariableWriteImpl@newfiles" shape=ellipse]
155 [label="36:CtExecutableReferenceImpl@toArray(java.lang.String[])" shape=ellipse]
156 [label="36:CtVirtualElement@toArray" shape=ellipse]
157 [label="36:CtVariableReadImpl@noLinks" shape=ellipse]
158 [label="36:CtNewArrayImpl@new String[noLinks.size()]" shape=ellipse]
159 [label="36:CtInvocationImpl@noLinks.size()" shape=ellipse]
160 [label="36:CtInvocationImpl@((String[]) (noLinks.toArray(new String[noLinks.size()])))" shape=ellipse]
161 [label="36:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
162 [label="36:CtAssignmentImpl@newfiles = ((String[]) (noLinks.toArray(new String[noLinks.size()])))" shape=ellipse]
163 [label="15:CtBlockImpl@\{
    ArrayList noLinks = new ArrayList();
    for (int i = 0; i < newfiles.length; i++) \{
        try \{
            if (SYMLINK_UTILS.isSymbolicLink(dir, newfiles[i])) \{
                String name = vpath + newfiles[i];
                File file = new File(dir, newfiles[i]);
                (file.isDirectory() ? dirsExcluded : filesExcluded).addElement(name);
                if (!isExcluded(name)) \{
                    notFollowedSymlinks.add(file.getAbsolutePath());
                \}
            \} else \{
                noLinks.add(newfiles[i]);
            \}
        \} catch (IOException ioe) \{
            String msg = \"IOException caught while checking \" + \"for links, couldn't get canonical path!\";
            System.err.println(msg);
            noLinks.add(newfiles[i]);
        \}
    \}
    newfiles = ((String[]) (noLinks.toArray(new String[noLinks.size()])));
\}" shape=ellipse]
164 [label="38:CtExecutableReferenceImpl@addFirst()" shape=ellipse]
165 [label="38:CtVirtualElement@addFirst" shape=ellipse]
166 [label="38:CtVariableReadImpl@directoryNamesFollowed" shape=ellipse]
167 [label="38:CtExecutableReferenceImpl@getName()" shape=ellipse]
168 [label="38:CtVirtualElement@getName" shape=ellipse]
169 [label="38:CtVariableReadImpl@dir" shape=ellipse]
170 [label="38:CtInvocationImpl@dir.getName()" shape=ellipse]
171 [label="38:CtInvocationImpl@directoryNamesFollowed.addFirst(dir.getName())" shape=ellipse]
172 [label="37:CtBlockImpl@\{
    directoryNamesFollowed.addFirst(dir.getName());
\}" shape=ellipse]
173 [label="15:CtIfImpl@if (!followSymlinks) \{
    ArrayList noLinks = new ArrayList();
    for (int i = 0; i < newfiles.length; i++) \{
        try \{
            if (SYMLINK_UTILS.isSymbolicLink(dir, newfiles[i])) \{
                String name = vpath + newfiles[i];
                File file = new File(dir, newfiles[i]);
                (file.isDirectory() ? dirsExcluded : filesExcluded).addElement(name);
                if (!isExcluded(name)) \{
                    notFollowedSymlinks.add(file.getAbsolutePath());
                \}
            \} else \{
                noLinks.add(newfiles[i]);
            \}
        \} catch (IOException ioe) \{
            String msg = \"IOException caught while checking \" + \"for links, couldn't get canonical path!\";
            System.err.println(msg);
            noLinks.add(newfiles[i]);
        \}
    \}
    newfiles = ((String[]) (noLinks.toArray(new String[noLinks.size()])));
\} else \{
    directoryNamesFollowed.addFirst(dir.getName());
\}" shape=ellipse]
174 [label="40:CtTypeReferenceImpl@int" shape=ellipse]
175 [label="40:CtLiteralImpl@0" shape=ellipse]
176 [label="40:CtVirtualElement@i" shape=ellipse]
177 [label="40:CtLocalVariableImpl@int i = 0" shape=ellipse]
178 [label="40:CtVariableReadImpl@i" shape=ellipse]
179 [label="40:CtVariableReadImpl@newfiles" shape=ellipse]
180 [label="40:CtParameterReferenceImpl@newfiles" shape=ellipse]
181 [label="40:CtFieldReadImpl@newfiles.length" shape=ellipse]
182 [label="40:CtBinaryOperatorImpl@i < newfiles.length" shape=ellipse]
183 [label="40:CtVariableWriteImpl@i" shape=ellipse]
184 [label="40:CtUnaryOperatorImpl@i++" shape=ellipse]
185 [label="41:CtTypeReferenceImpl@String" shape=ellipse]
186 [label="41:CtVariableReadImpl@vpath" shape=ellipse]
187 [label="41:CtVariableReadImpl@newfiles" shape=ellipse]
188 [label="41:CtVariableReadImpl@i" shape=ellipse]
189 [label="41:CtArrayReadImpl@newfiles[i]" shape=ellipse]
190 [label="41:CtBinaryOperatorImpl@vpath + newfiles[i]" shape=ellipse]
191 [label="41:CtVirtualElement@name" shape=ellipse]
192 [label="41:CtLocalVariableImpl@String name = vpath + newfiles[i]" shape=ellipse]
193 [label="42:CtTypeReferenceImpl@TokenizedPath" shape=ellipse]
194 [label="42:CtTypeReferenceImpl@TokenizedPath" shape=ellipse]
195 [label="42:CtVariableReadImpl@path" shape=ellipse]
196 [label="42:CtVariableReadImpl@newfiles" shape=ellipse]
197 [label="42:CtVariableReadImpl@i" shape=ellipse]
198 [label="42:CtArrayReadImpl@newfiles[i]" shape=ellipse]
199 [label="42:CtConstructorCallImpl@new TokenizedPath(path, newfiles[i])" shape=ellipse]
200 [label="42:CtVirtualElement@newPath" shape=ellipse]
201 [label="42:CtLocalVariableImpl@TokenizedPath newPath = new TokenizedPath(path, newfiles[i])" shape=ellipse]
202 [label="43:CtTypeReferenceImpl@File" shape=ellipse]
203 [label="43:CtTypeReferenceImpl@File" shape=ellipse]
204 [label="43:CtVariableReadImpl@dir" shape=ellipse]
205 [label="43:CtVariableReadImpl@newfiles" shape=ellipse]
206 [label="43:CtVariableReadImpl@i" shape=ellipse]
207 [label="43:CtArrayReadImpl@newfiles[i]" shape=ellipse]
208 [label="43:CtConstructorCallImpl@new File(dir, newfiles[i])" shape=ellipse]
209 [label="43:CtVirtualElement@file" shape=ellipse]
210 [label="43:CtLocalVariableImpl@File file = new File(dir, newfiles[i])" shape=ellipse]
211 [label="44:CtVirtualElement@String[]" shape=ellipse]
212 [label="44:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
213 [label="44:CtExecutableReferenceImpl@list()" shape=ellipse]
214 [label="44:CtVirtualElement@list" shape=ellipse]
215 [label="44:CtVariableReadImpl@file" shape=ellipse]
216 [label="44:CtInvocationImpl@file.list()" shape=ellipse]
217 [label="44:CtVirtualElement@children" shape=ellipse]
218 [label="44:CtLocalVariableImpl@String[] children = file.list()" shape=ellipse]
219 [label="45:CtVariableReadImpl@children" shape=ellipse]
220 [label="45:CtLiteralImpl@null" shape=ellipse]
221 [label="45:CtBinaryOperatorImpl@children == null" shape=ellipse]
222 [label="46:CtExecutableReferenceImpl@isIncluded(<unknown>)" shape=ellipse]
223 [label="46:CtVirtualElement@isIncluded" shape=ellipse]
224 [label="46:CtVariableReadImpl@newPath" shape=ellipse]
225 [label="46:CtInvocationImpl@isIncluded(newPath)" shape=ellipse]
226 [label="47:CtExecutableReferenceImpl@accountForIncludedFile(<unknown>,<unknown>)" shape=ellipse]
227 [label="47:CtVirtualElement@accountForIncludedFile" shape=ellipse]
228 [label="47:CtVariableReadImpl@newPath" shape=ellipse]
229 [label="47:CtVariableReadImpl@file" shape=ellipse]
230 [label="47:CtInvocationImpl@accountForIncludedFile(newPath, file)" shape=ellipse]
231 [label="46:CtBlockImpl@\{
    accountForIncludedFile(newPath, file);
\}" shape=ellipse]
232 [label="49:CtFieldWriteImpl@everythingIncluded" shape=ellipse]
233 [label="49:CtLiteralImpl@false" shape=ellipse]
234 [label="49:CtAssignmentImpl@everythingIncluded = false" shape=ellipse]
235 [label="50:CtExecutableReferenceImpl@addElement(java.lang.String)" shape=ellipse]
236 [label="50:CtVirtualElement@addElement" shape=ellipse]
237 [label="50:CtFieldReadImpl@filesNotIncluded" shape=ellipse]
238 [label="50:CtVariableReadImpl@name" shape=ellipse]
239 [label="50:CtInvocationImpl@filesNotIncluded.addElement(name)" shape=ellipse]
240 [label="48:CtBlockImpl@\{
    everythingIncluded = false;
    filesNotIncluded.addElement(name);
\}" shape=ellipse]
241 [label="46:CtIfImpl@if (isIncluded(newPath)) \{
    accountForIncludedFile(newPath, file);
\} else \{
    everythingIncluded = false;
    filesNotIncluded.addElement(name);
\}" shape=ellipse]
242 [label="45:CtBlockImpl@\{
    if (isIncluded(newPath)) \{
        accountForIncludedFile(newPath, file);
    \} else \{
        everythingIncluded = false;
        filesNotIncluded.addElement(name);
    \}
\}" shape=ellipse]
243 [label="53:CtFieldReadImpl@followSymlinks" shape=ellipse]
244 [label="53:CtExecutableReferenceImpl@causesIllegalSymlinkLoop(java.lang.String,<unknown>,<unknown>)" shape=ellipse]
245 [label="53:CtVirtualElement@causesIllegalSymlinkLoop" shape=ellipse]
246 [label="53:CtVariableReadImpl@newfiles" shape=ellipse]
247 [label="53:CtVariableReadImpl@i" shape=ellipse]
248 [label="53:CtArrayReadImpl@newfiles[i]" shape=ellipse]
249 [label="53:CtVariableReadImpl@dir" shape=ellipse]
250 [label="53:CtVariableReadImpl@directoryNamesFollowed" shape=ellipse]
251 [label="53:CtInvocationImpl@causesIllegalSymlinkLoop(newfiles[i], dir, directoryNamesFollowed)" shape=ellipse]
252 [label="53:CtBinaryOperatorImpl@followSymlinks && causesIllegalSymlinkLoop(newfiles[i], dir, directoryNamesFollowed)" shape=ellipse]
253 [label="54:CtExecutableReferenceImpl@println(char[])" shape=ellipse]
254 [label="54:CtVirtualElement@println" shape=ellipse]
255 [label="54:CtTypeAccessImpl@System" shape=ellipse]
256 [label="54:CtFieldReadImpl@System.err" shape=ellipse]
257 [label="54:CtFieldReferenceImpl@java.lang.System.err" shape=ellipse]
258 [label="55:CtLiteralImpl@\"skipping symbolic link \"" shape=ellipse]
259 [label="55:CtExecutableReferenceImpl@getAbsolutePath()" shape=ellipse]
260 [label="55:CtVirtualElement@getAbsolutePath" shape=ellipse]
261 [label="55:CtVariableReadImpl@file" shape=ellipse]
262 [label="55:CtInvocationImpl@file.getAbsolutePath()" shape=ellipse]
263 [label="55:CtBinaryOperatorImpl@(\"skipping symbolic link \" + file.getAbsolutePath())" shape=ellipse]
264 [label="56:CtLiteralImpl@\" -- too many levels of symbolic\"" shape=ellipse]
265 [label="55:CtBinaryOperatorImpl@((\"skipping symbolic link \" + file.getAbsolutePath()) + \" -- too many levels of symbolic\")" shape=ellipse]
266 [label="57:CtLiteralImpl@\" links.\"" shape=ellipse]
267 [label="55:CtBinaryOperatorImpl@((\"skipping symbolic link \" + file.getAbsolutePath()) + \" -- too many levels of symbolic\") + \" links.\"" shape=ellipse]
268 [label="54:CtInvocationImpl@System.err.println(((\"skipping symbolic link \" + file.getAbsolutePath()) + \" -- too many levels of symbolic\") + \" links.\")" shape=ellipse]
269 [label="58:CtExecutableReferenceImpl@add()" shape=ellipse]
270 [label="58:CtVirtualElement@add" shape=ellipse]
271 [label="58:CtFieldReadImpl@notFollowedSymlinks" shape=ellipse]
272 [label="58:CtExecutableReferenceImpl@getAbsolutePath()" shape=ellipse]
273 [label="58:CtVirtualElement@getAbsolutePath" shape=ellipse]
274 [label="58:CtVariableReadImpl@file" shape=ellipse]
275 [label="58:CtInvocationImpl@file.getAbsolutePath()" shape=ellipse]
276 [label="58:CtInvocationImpl@notFollowedSymlinks.add(file.getAbsolutePath())" shape=ellipse]
277 [label="59:CtContinueImpl@continue" shape=ellipse]
278 [label="53:CtBlockImpl@\{
    System.err.println(((\"skipping symbolic link \" + file.getAbsolutePath()) + \" -- too many levels of symbolic\") + \" links.\");
    notFollowedSymlinks.add(file.getAbsolutePath());
    continue;
\}" shape=ellipse]
279 [label="53:CtIfImpl@if (followSymlinks && causesIllegalSymlinkLoop(newfiles[i], dir, directoryNamesFollowed)) \{
    System.err.println(((\"skipping symbolic link \" + file.getAbsolutePath()) + \" -- too many levels of symbolic\") + \" links.\");
    notFollowedSymlinks.add(file.getAbsolutePath());
    continue;
\}" shape=ellipse]
280 [label="61:CtExecutableReferenceImpl@isIncluded(<unknown>)" shape=ellipse]
281 [label="61:CtVirtualElement@isIncluded" shape=ellipse]
282 [label="61:CtVariableReadImpl@newPath" shape=ellipse]
283 [label="61:CtInvocationImpl@isIncluded(newPath)" shape=ellipse]
284 [label="62:CtExecutableReferenceImpl@accountForIncludedDir(<unknown>,<unknown>,boolean,java.lang.String[],<unknown>)" shape=ellipse]
285 [label="62:CtVirtualElement@accountForIncludedDir" shape=ellipse]
286 [label="62:CtVariableReadImpl@newPath" shape=ellipse]
287 [label="62:CtVariableReadImpl@file" shape=ellipse]
288 [label="62:CtVariableReadImpl@fast" shape=ellipse]
289 [label="62:CtVariableReadImpl@children" shape=ellipse]
290 [label="62:CtVariableReadImpl@directoryNamesFollowed" shape=ellipse]
291 [label="62:CtInvocationImpl@accountForIncludedDir(newPath, file, fast, children, directoryNamesFollowed)" shape=ellipse]
292 [label="61:CtBlockImpl@\{
    accountForIncludedDir(newPath, file, fast, children, directoryNamesFollowed);
\}" shape=ellipse]
293 [label="64:CtFieldWriteImpl@everythingIncluded" shape=ellipse]
294 [label="64:CtLiteralImpl@false" shape=ellipse]
295 [label="64:CtAssignmentImpl@everythingIncluded = false" shape=ellipse]
296 [label="65:CtExecutableReferenceImpl@addElement(java.lang.String)" shape=ellipse]
297 [label="65:CtVirtualElement@addElement" shape=ellipse]
298 [label="65:CtFieldReadImpl@dirsNotIncluded" shape=ellipse]
299 [label="65:CtVariableReadImpl@name" shape=ellipse]
300 [label="65:CtInvocationImpl@dirsNotIncluded.addElement(name)" shape=ellipse]
301 [label="66:CtVariableReadImpl@fast" shape=ellipse]
302 [label="66:CtExecutableReferenceImpl@couldHoldIncluded(<unknown>)" shape=ellipse]
303 [label="66:CtVirtualElement@couldHoldIncluded" shape=ellipse]
304 [label="66:CtVariableReadImpl@newPath" shape=ellipse]
305 [label="66:CtInvocationImpl@couldHoldIncluded(newPath)" shape=ellipse]
306 [label="66:CtBinaryOperatorImpl@fast && couldHoldIncluded(newPath)" shape=ellipse]
307 [label="67:CtExecutableReferenceImpl@scandir(File,TokenizedPath,boolean,java.lang.String[],LinkedList)" shape=ellipse]
308 [label="67:CtVirtualElement@scandir" shape=ellipse]
309 [label="67:CtVariableReadImpl@file" shape=ellipse]
310 [label="67:CtVariableReadImpl@newPath" shape=ellipse]
311 [label="67:CtVariableReadImpl@fast" shape=ellipse]
312 [label="67:CtVariableReadImpl@children" shape=ellipse]
313 [label="67:CtVariableReadImpl@directoryNamesFollowed" shape=ellipse]
314 [label="67:CtInvocationImpl@scandir(file, newPath, fast, children, directoryNamesFollowed)" shape=ellipse]
315 [label="66:CtBlockImpl@\{
    scandir(file, newPath, fast, children, directoryNamesFollowed);
\}" shape=ellipse]
316 [label="66:CtIfImpl@if (fast && couldHoldIncluded(newPath)) \{
    scandir(file, newPath, fast, children, directoryNamesFollowed);
\}" shape=ellipse]
317 [label="63:CtBlockImpl@\{
    everythingIncluded = false;
    dirsNotIncluded.addElement(name);
    if (fast && couldHoldIncluded(newPath)) \{
        scandir(file, newPath, fast, children, directoryNamesFollowed);
    \}
\}" shape=ellipse]
318 [label="61:CtIfImpl@if (isIncluded(newPath)) \{
    accountForIncludedDir(newPath, file, fast, children, directoryNamesFollowed);
\} else \{
    everythingIncluded = false;
    dirsNotIncluded.addElement(name);
    if (fast && couldHoldIncluded(newPath)) \{
        scandir(file, newPath, fast, children, directoryNamesFollowed);
    \}
\}" shape=ellipse]
319 [label="70:CtVariableReadImpl@fast" shape=ellipse]
320 [label="70:CtUnaryOperatorImpl@!fast" shape=ellipse]
321 [label="71:CtExecutableReferenceImpl@scandir(File,TokenizedPath,boolean,java.lang.String[],LinkedList)" shape=ellipse]
322 [label="71:CtVirtualElement@scandir" shape=ellipse]
323 [label="71:CtVariableReadImpl@file" shape=ellipse]
324 [label="71:CtVariableReadImpl@newPath" shape=ellipse]
325 [label="71:CtVariableReadImpl@fast" shape=ellipse]
326 [label="71:CtVariableReadImpl@children" shape=ellipse]
327 [label="71:CtVariableReadImpl@directoryNamesFollowed" shape=ellipse]
328 [label="71:CtInvocationImpl@scandir(file, newPath, fast, children, directoryNamesFollowed)" shape=ellipse]
329 [label="70:CtBlockImpl@\{
    scandir(file, newPath, fast, children, directoryNamesFollowed);
\}" shape=ellipse]
330 [label="70:CtIfImpl@if (!fast) \{
    scandir(file, newPath, fast, children, directoryNamesFollowed);
\}" shape=ellipse]
331 [label="52:CtBlockImpl@\{
    if (followSymlinks && causesIllegalSymlinkLoop(newfiles[i], dir, directoryNamesFollowed)) \{
        System.err.println(((\"skipping symbolic link \" + file.getAbsolutePath()) + \" -- too many levels of symbolic\") + \" links.\");
        notFollowedSymlinks.add(file.getAbsolutePath());
        continue;
    \}
    if (isIncluded(newPath)) \{
        accountForIncludedDir(newPath, file, fast, children, directoryNamesFollowed);
    \} else \{
        everythingIncluded = false;
        dirsNotIncluded.addElement(name);
        if (fast && couldHoldIncluded(newPath)) \{
            scandir(file, newPath, fast, children, directoryNamesFollowed);
        \}
    \}
    if (!fast) \{
        scandir(file, newPath, fast, children, directoryNamesFollowed);
    \}
\}" shape=ellipse]
332 [label="45:CtIfImpl@if (children == null) \{
    if (isIncluded(newPath)) \{
        accountForIncludedFile(newPath, file);
    \} else \{
        everythingIncluded = false;
        filesNotIncluded.addElement(name);
    \}
\} else \{
    if (followSymlinks && causesIllegalSymlinkLoop(newfiles[i], dir, directoryNamesFollowed)) \{
        System.err.println(((\"skipping symbolic link \" + file.getAbsolutePath()) + \" -- too many levels of symbolic\") + \" links.\");
        notFollowedSymlinks.add(file.getAbsolutePath());
        continue;
    \}
    if (isIncluded(newPath)) \{
        accountForIncludedDir(newPath, file, fast, children, directoryNamesFollowed);
    \} else \{
        everythingIncluded = false;
        dirsNotIncluded.addElement(name);
        if (fast && couldHoldIncluded(newPath)) \{
            scandir(file, newPath, fast, children, directoryNamesFollowed);
        \}
    \}
    if (!fast) \{
        scandir(file, newPath, fast, children, directoryNamesFollowed);
    \}
\}" shape=ellipse]
333 [label="40:CtBlockImpl@\{
    String name = vpath + newfiles[i];
    TokenizedPath newPath = new TokenizedPath(path, newfiles[i]);
    File file = new File(dir, newfiles[i]);
    String[] children = file.list();
    if (children == null) \{
        if (isIncluded(newPath)) \{
            accountForIncludedFile(newPath, file);
        \} else \{
            everythingIncluded = false;
            filesNotIncluded.addElement(name);
        \}
    \} else \{
        if (followSymlinks && causesIllegalSymlinkLoop(newfiles[i], dir, directoryNamesFollowed)) \{
            System.err.println(((\"skipping symbolic link \" + file.getAbsolutePath()) + \" -- too many levels of symbolic\") + \" links.\");
            notFollowedSymlinks.add(file.getAbsolutePath());
            continue;
        \}
        if (isIncluded(newPath)) \{
            accountForIncludedDir(newPath, file, fast, children, directoryNamesFollowed);
        \} else \{
            everythingIncluded = false;
            dirsNotIncluded.addElement(name);
            if (fast && couldHoldIncluded(newPath)) \{
                scandir(file, newPath, fast, children, directoryNamesFollowed);
            \}
        \}
        if (!fast) \{
            scandir(file, newPath, fast, children, directoryNamesFollowed);
        \}
    \}
\}" shape=ellipse]
334 [label="40:CtForImpl@for (int i = 0; i < newfiles.length; i++) \{
    String name = vpath + newfiles[i];
    TokenizedPath newPath = new TokenizedPath(path, newfiles[i]);
    File file = new File(dir, newfiles[i]);
    String[] children = file.list();
    if (children == null) \{
        if (isIncluded(newPath)) \{
            accountForIncludedFile(newPath, file);
        \} else \{
            everythingIncluded = false;
            filesNotIncluded.addElement(name);
        \}
    \} else \{
        if (followSymlinks && causesIllegalSymlinkLoop(newfiles[i], dir, directoryNamesFollowed)) \{
            System.err.println(((\"skipping symbolic link \" + file.getAbsolutePath()) + \" -- too many levels of symbolic\") + \" links.\");
            notFollowedSymlinks.add(file.getAbsolutePath());
            continue;
        \}
        if (isIncluded(newPath)) \{
            accountForIncludedDir(newPath, file, fast, children, directoryNamesFollowed);
        \} else \{
            everythingIncluded = false;
            dirsNotIncluded.addElement(name);
            if (fast && couldHoldIncluded(newPath)) \{
                scandir(file, newPath, fast, children, directoryNamesFollowed);
            \}
        \}
        if (!fast) \{
            scandir(file, newPath, fast, children, directoryNamesFollowed);
        \}
    \}
\}" shape=ellipse]
335 [label="75:CtFieldReadImpl@followSymlinks" shape=ellipse]
336 [label="76:CtExecutableReferenceImpl@removeFirst()" shape=ellipse]
337 [label="76:CtVirtualElement@removeFirst" shape=ellipse]
338 [label="76:CtVariableReadImpl@directoryNamesFollowed" shape=ellipse]
339 [label="76:CtInvocationImpl@directoryNamesFollowed.removeFirst()" shape=ellipse]
340 [label="75:CtBlockImpl@\{
    directoryNamesFollowed.removeFirst();
\}" shape=ellipse]
341 [label="75:CtIfImpl@if (followSymlinks) \{
    directoryNamesFollowed.removeFirst();
\}" shape=ellipse]
342 [label="7:CtBlockImpl@\{
    String vpath = path.toString();
    if ((vpath.length() > 0) && (!vpath.endsWith(separator))) \{
        vpath += File.separator;
    \}
    if (fast && hasBeenScanned(vpath)) \{
        return;
    \}
    if (!followSymlinks) \{
        ArrayList noLinks = new ArrayList();
        for (int i = 0; i < newfiles.length; i++) \{
            try \{
                if (SYMLINK_UTILS.isSymbolicLink(dir, newfiles[i])) \{
                    String name = vpath + newfiles[i];
                    File file = new File(dir, newfiles[i]);
                    (file.isDirectory() ? dirsExcluded : filesExcluded).addElement(name);
                    if (!isExcluded(name)) \{
                        notFollowedSymlinks.add(file.getAbsolutePath());
                    \}
                \} else \{
                    noLinks.add(newfiles[i]);
                \}
            \} catch (IOException ioe) \{
                String msg = \"IOException caught while checking \" + \"for links, couldn't get canonical path!\";
                System.err.println(msg);
                noLinks.add(newfiles[i]);
            \}
        \}
        newfiles = ((String[]) (noLinks.toArray(new String[noLinks.size()])));
    \} else \{
        directoryNamesFollowed.addFirst(dir.getName());
    \}
    for (int i = 0; i < newfiles.length; i++) \{
        String name = vpath + newfiles[i];
        TokenizedPath newPath = new TokenizedPath(path, newfiles[i]);
        File file = new File(dir, newfiles[i]);
        String[] children = file.list();
        if (children == null) \{
            if (isIncluded(newPath)) \{
                accountForIncludedFile(newPath, file);
            \} else \{
                everythingIncluded = false;
                filesNotIncluded.addElement(name);
            \}
        \} else \{
            if (followSymlinks && causesIllegalSymlinkLoop(newfiles[i], dir, directoryNamesFollowed)) \{
                System.err.println(((\"skipping symbolic link \" + file.getAbsolutePath()) + \" -- too many levels of symbolic\") + \" links.\");
                notFollowedSymlinks.add(file.getAbsolutePath());
                continue;
            \}
            if (isIncluded(newPath)) \{
                accountForIncludedDir(newPath, file, fast, children, directoryNamesFollowed);
            \} else \{
                everythingIncluded = false;
                dirsNotIncluded.addElement(name);
                if (fast && couldHoldIncluded(newPath)) \{
                    scandir(file, newPath, fast, children, directoryNamesFollowed);
                \}
            \}
            if (!fast) \{
                scandir(file, newPath, fast, children, directoryNamesFollowed);
            \}
        \}
    \}
    if (followSymlinks) \{
        directoryNamesFollowed.removeFirst();
    \}
\}" shape=ellipse]
343 [label="2:CtMethodImpl@private void scandir(File dir, TokenizedPath path, boolean fast, String[] newfiles, LinkedList directoryNamesFollowed) \{
    String vpath = path.toString();
    if ((vpath.length() > 0) && (!vpath.endsWith(separator))) \{
        vpath += File.separator;
    \}
    if (fast && hasBeenScanned(vpath)) \{
        return;
    \}
    if (!followSymlinks) \{
        ArrayList noLinks = new ArrayList();
        for (int i = 0; i < newfiles.length; i++) \{
            try \{
                if (SYMLINK_UTILS.isSymbolicLink(dir, newfiles[i])) \{
                    String name = vpath + newfiles[i];
                    File file = new File(dir, newfiles[i]);
                    (file.isDirectory() ? dirsExcluded : filesExcluded).addElement(name);
                    if (!isExcluded(name)) \{
                        notFollowedSymlinks.add(file.getAbsolutePath());
                    \}
                \} else \{
                    noLinks.add(newfiles[i]);
                \}
            \} catch (IOException ioe) \{
                String msg = \"IOException caught while checking \" + \"for links, couldn't get canonical path!\";
                System.err.println(msg);
                noLinks.add(newfiles[i]);
            \}
        \}
        newfiles = ((String[]) (noLinks.toArray(new String[noLinks.size()])));
    \} else \{
        directoryNamesFollowed.addFirst(dir.getName());
    \}
    for (int i = 0; i < newfiles.length; i++) \{
        String name = vpath + newfiles[i];
        TokenizedPath newPath = new TokenizedPath(path, newfiles[i]);
        File file = new File(dir, newfiles[i]);
        String[] children = file.list();
        if (children == null) \{
            if (isIncluded(newPath)) \{
                accountForIncludedFile(newPath, file);
            \} else \{
                everythingIncluded = false;
                filesNotIncluded.addElement(name);
            \}
        \} else \{
            if (followSymlinks && causesIllegalSymlinkLoop(newfiles[i], dir, directoryNamesFollowed)) \{
                System.err.println(((\"skipping symbolic link \" + file.getAbsolutePath()) + \" -- too many levels of symbolic\") + \" links.\");
                notFollowedSymlinks.add(file.getAbsolutePath());
                continue;
            \}
            if (isIncluded(newPath)) \{
                accountForIncludedDir(newPath, file, fast, children, directoryNamesFollowed);
            \} else \{
                everythingIncluded = false;
                dirsNotIncluded.addElement(name);
                if (fast && couldHoldIncluded(newPath)) \{
                    scandir(file, newPath, fast, children, directoryNamesFollowed);
                \}
            \}
            if (!fast) \{
                scandir(file, newPath, fast, children, directoryNamesFollowed);
            \}
        \}
    \}
    if (followSymlinks) \{
        directoryNamesFollowed.removeFirst();
    \}
\}" shape=ellipse]
344 [label="66:Insert@INSERT" shape=ellipse]
345 [label="66:CtBinaryOperatorImpl@(fast && couldHoldIncluded(newPath)) && (!contentsExcluded(newPath))" shape=ellipse]
346 [label="66:Move@MOVE" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
6 -> 7 [label="AST"];
8 -> 9 [label="AST"];
10 -> 11 [label="AST"];
15 -> 17 [label="Data Dep"];
16 -> 14 [label="AST"];
16 -> 15 [label="AST"];
16 -> 13 [label="AST"];
17 -> 21 [label="Define-Use"];
17 -> 27 [label="Define-Use"];
17 -> 40 [label="Define-Use"];
17 -> 73 [label="Define-Use"];
17 -> 186 [label="Define-Use"];
18 -> 17 [label="AST"];
18 -> 12 [label="AST"];
18 -> 16 [label="AST"];
22 -> 20 [label="AST"];
22 -> 21 [label="AST"];
22 -> 19 [label="AST"];
24 -> 22 [label="AST"];
24 -> 23 [label="AST"];
29 -> 26 [label="AST"];
29 -> 27 [label="AST"];
29 -> 25 [label="AST"];
29 -> 28 [label="AST"];
30 -> 29 [label="AST"];
31 -> 24 [label="AST"];
31 -> 30 [label="AST"];
31 -> 35 [label="Control Dep"];
31 -> 34 [label="Control Dep"];
31 -> 32 [label="Control Dep"];
31 -> 33 [label="Control Dep"];
32 -> 40 [label="Define-Use"];
32 -> 73 [label="Define-Use"];
32 -> 186 [label="Define-Use"];
33 -> 32 [label="Data Dep"];
34 -> 32 [label="AST"];
34 -> 33 [label="AST"];
35 -> 34 [label="AST"];
36 -> 31 [label="AST"];
36 -> 35 [label="AST"];
41 -> 39 [label="AST"];
41 -> 38 [label="AST"];
41 -> 40 [label="AST"];
42 -> 37 [label="AST"];
42 -> 41 [label="AST"];
42 -> 44 [label="Control Dep"];
42 -> 43 [label="Control Dep"];
44 -> 43 [label="AST"];
45 -> 42 [label="AST"];
45 -> 44 [label="AST"];
47 -> 46 [label="AST"];
47 -> 163 [label="Control Dep"];
47 -> 52 [label="Control Dep"];
47 -> 50 [label="Control Dep"];
47 -> 153 [label="Control Dep"];
47 -> 56 [label="Control Dep"];
47 -> 54 [label="Control Dep"];
47 -> 61 [label="Control Dep"];
47 -> 57 [label="Control Dep"];
47 -> 60 [label="Control Dep"];
47 -> 58 [label="Control Dep"];
47 -> 63 [label="Control Dep"];
47 -> 62 [label="Control Dep"];
47 -> 162 [label="Control Dep"];
47 -> 154 [label="Control Dep"];
47 -> 160 [label="Control Dep"];
47 -> 155 [label="Control Dep"];
47 -> 157 [label="Control Dep"];
47 -> 158 [label="Control Dep"];
47 -> 172 [label="Control Dep"];
47 -> 171 [label="Control Dep"];
47 -> 164 [label="Control Dep"];
47 -> 166 [label="Control Dep"];
47 -> 170 [label="Control Dep"];
47 -> 167 [label="Control Dep"];
47 -> 169 [label="Control Dep"];
51 -> 118 [label="Define-Use"];
51 -> 144 [label="Define-Use"];
51 -> 157 [label="Define-Use"];
52 -> 51 [label="AST"];
52 -> 48 [label="AST"];
52 -> 50 [label="AST"];
55 -> 57 [label="Define-Use"];
55 -> 69 [label="Define-Use"];
55 -> 75 [label="Define-Use"];
55 -> 84 [label="Define-Use"];
55 -> 120 [label="Define-Use"];
55 -> 146 [label="Define-Use"];
56 -> 55 [label="AST"];
56 -> 53 [label="AST"];
56 -> 54 [label="AST"];
58 -> 59 [label="AST"];
60 -> 58 [label="AST"];
61 -> 57 [label="AST"];
61 -> 60 [label="AST"];
61 -> 152 [label="Control Dep"];
61 -> 151 [label="Control Dep"];
61 -> 125 [label="Control Dep"];
61 -> 124 [label="Control Dep"];
61 -> 71 [label="Control Dep"];
61 -> 64 [label="Control Dep"];
61 -> 66 [label="Control Dep"];
61 -> 67 [label="Control Dep"];
61 -> 70 [label="Control Dep"];
61 -> 68 [label="Control Dep"];
61 -> 69 [label="Control Dep"];
61 -> 150 [label="Control Dep"];
61 -> 128 [label="Control Dep"];
62 -> 69 [label="Define-Use"];
62 -> 75 [label="Define-Use"];
62 -> 84 [label="Define-Use"];
62 -> 120 [label="Define-Use"];
62 -> 146 [label="Define-Use"];
63 -> 62 [label="AST"];
70 -> 68 [label="AST"];
70 -> 69 [label="AST"];
71 -> 65 [label="AST"];
71 -> 66 [label="AST"];
71 -> 64 [label="AST"];
71 -> 67 [label="AST"];
71 -> 70 [label="AST"];
71 -> 115 [label="Control Dep"];
71 -> 79 [label="Control Dep"];
71 -> 77 [label="Control Dep"];
71 -> 73 [label="Control Dep"];
71 -> 76 [label="Control Dep"];
71 -> 74 [label="Control Dep"];
71 -> 75 [label="Control Dep"];
71 -> 88 [label="Control Dep"];
71 -> 86 [label="Control Dep"];
71 -> 82 [label="Control Dep"];
71 -> 85 [label="Control Dep"];
71 -> 83 [label="Control Dep"];
71 -> 84 [label="Control Dep"];
71 -> 99 [label="Control Dep"];
71 -> 89 [label="Control Dep"];
71 -> 97 [label="Control Dep"];
71 -> 94 [label="Control Dep"];
71 -> 91 [label="Control Dep"];
71 -> 93 [label="Control Dep"];
71 -> 98 [label="Control Dep"];
71 -> 114 [label="Control Dep"];
71 -> 104 [label="Control Dep"];
71 -> 103 [label="Control Dep"];
71 -> 100 [label="Control Dep"];
71 -> 102 [label="Control Dep"];
71 -> 123 [label="Control Dep"];
71 -> 122 [label="Control Dep"];
71 -> 116 [label="Control Dep"];
71 -> 118 [label="Control Dep"];
71 -> 121 [label="Control Dep"];
71 -> 119 [label="Control Dep"];
71 -> 120 [label="Control Dep"];
73 -> 78 [label="Data Dep"];
76 -> 74 [label="AST"];
76 -> 75 [label="AST"];
76 -> 78 [label="Data Dep"];
77 -> 73 [label="AST"];
77 -> 76 [label="AST"];
78 -> 98 [label="Define-Use"];
78 -> 102 [label="Define-Use"];
79 -> 78 [label="AST"];
79 -> 72 [label="AST"];
79 -> 77 [label="AST"];
82 -> 87 [label="Data Dep"];
85 -> 83 [label="AST"];
85 -> 84 [label="AST"];
85 -> 87 [label="Data Dep"];
86 -> 82 [label="AST"];
86 -> 85 [label="AST"];
87 -> 93 [label="Define-Use"];
87 -> 110 [label="Define-Use"];
88 -> 87 [label="AST"];
88 -> 80 [label="AST"];
88 -> 86 [label="AST"];
94 -> 92 [label="AST"];
94 -> 93 [label="AST"];
94 -> 91 [label="AST"];
94 -> 95 [label="Control Dep"];
94 -> 96 [label="Control Dep"];
97 -> 94 [label="AST"];
97 -> 95 [label="AST"];
97 -> 96 [label="AST"];
99 -> 90 [label="AST"];
99 -> 97 [label="AST"];
99 -> 89 [label="AST"];
99 -> 98 [label="AST"];
103 -> 101 [label="AST"];
103 -> 100 [label="AST"];
103 -> 102 [label="AST"];
104 -> 103 [label="AST"];
104 -> 113 [label="Control Dep"];
104 -> 112 [label="Control Dep"];
104 -> 105 [label="Control Dep"];
104 -> 107 [label="Control Dep"];
104 -> 111 [label="Control Dep"];
104 -> 108 [label="Control Dep"];
104 -> 110 [label="Control Dep"];
111 -> 109 [label="AST"];
111 -> 110 [label="AST"];
111 -> 108 [label="AST"];
112 -> 106 [label="AST"];
112 -> 107 [label="AST"];
112 -> 105 [label="AST"];
112 -> 111 [label="AST"];
113 -> 112 [label="AST"];
114 -> 104 [label="AST"];
114 -> 113 [label="AST"];
115 -> 79 [label="AST"];
115 -> 88 [label="AST"];
115 -> 99 [label="AST"];
115 -> 114 [label="AST"];
121 -> 119 [label="AST"];
121 -> 120 [label="AST"];
122 -> 117 [label="AST"];
122 -> 118 [label="AST"];
122 -> 116 [label="AST"];
122 -> 121 [label="AST"];
123 -> 122 [label="AST"];
124 -> 71 [label="AST"];
124 -> 115 [label="AST"];
124 -> 123 [label="AST"];
125 -> 124 [label="AST"];
128 -> 126 [label="AST"];
128 -> 127 [label="AST"];
128 -> 149 [label="Control Dep"];
128 -> 134 [label="Control Dep"];
128 -> 132 [label="Control Dep"];
128 -> 130 [label="Control Dep"];
128 -> 131 [label="Control Dep"];
128 -> 141 [label="Control Dep"];
128 -> 135 [label="Control Dep"];
128 -> 138 [label="Control Dep"];
128 -> 137 [label="Control Dep"];
128 -> 140 [label="Control Dep"];
128 -> 148 [label="Control Dep"];
128 -> 142 [label="Control Dep"];
128 -> 144 [label="Control Dep"];
128 -> 147 [label="Control Dep"];
128 -> 145 [label="Control Dep"];
128 -> 146 [label="Control Dep"];
132 -> 130 [label="AST"];
132 -> 131 [label="AST"];
133 -> 140 [label="Define-Use"];
134 -> 133 [label="AST"];
134 -> 129 [label="AST"];
134 -> 132 [label="AST"];
138 -> 137 [label="AST"];
138 -> 139 [label="AST"];
141 -> 136 [label="AST"];
141 -> 138 [label="AST"];
141 -> 135 [label="AST"];
141 -> 140 [label="AST"];
147 -> 145 [label="AST"];
147 -> 146 [label="AST"];
148 -> 143 [label="AST"];
148 -> 144 [label="AST"];
148 -> 142 [label="AST"];
148 -> 147 [label="AST"];
149 -> 134 [label="AST"];
149 -> 141 [label="AST"];
149 -> 148 [label="AST"];
150 -> 128 [label="AST"];
150 -> 149 [label="AST"];
151 -> 125 [label="AST"];
151 -> 150 [label="AST"];
152 -> 151 [label="AST"];
153 -> 56 [label="AST"];
153 -> 61 [label="AST"];
153 -> 63 [label="AST"];
153 -> 152 [label="AST"];
154 -> 179 [label="Define-Use"];
154 -> 187 [label="Define-Use"];
154 -> 189 [label="Define-Use"];
154 -> 196 [label="Define-Use"];
154 -> 198 [label="Define-Use"];
154 -> 205 [label="Define-Use"];
154 -> 207 [label="Define-Use"];
154 -> 246 [label="Define-Use"];
154 -> 248 [label="Define-Use"];
157 -> 154 [label="Data Dep"];
158 -> 159 [label="AST"];
160 -> 156 [label="AST"];
160 -> 161 [label="AST"];
160 -> 157 [label="AST"];
160 -> 155 [label="AST"];
160 -> 158 [label="AST"];
162 -> 154 [label="AST"];
162 -> 160 [label="AST"];
163 -> 52 [label="AST"];
163 -> 153 [label="AST"];
163 -> 162 [label="AST"];
170 -> 168 [label="AST"];
170 -> 169 [label="AST"];
170 -> 167 [label="AST"];
171 -> 165 [label="AST"];
171 -> 166 [label="AST"];
171 -> 164 [label="AST"];
171 -> 170 [label="AST"];
172 -> 171 [label="AST"];
173 -> 47 [label="AST"];
173 -> 163 [label="AST"];
173 -> 172 [label="AST"];
176 -> 178 [label="Define-Use"];
177 -> 176 [label="AST"];
177 -> 174 [label="AST"];
177 -> 175 [label="AST"];
179 -> 180 [label="AST"];
181 -> 179 [label="AST"];
182 -> 178 [label="AST"];
182 -> 181 [label="AST"];
182 -> 333 [label="Control Dep"];
182 -> 192 [label="Control Dep"];
182 -> 190 [label="Control Dep"];
182 -> 186 [label="Control Dep"];
182 -> 189 [label="Control Dep"];
182 -> 187 [label="Control Dep"];
182 -> 188 [label="Control Dep"];
182 -> 201 [label="Control Dep"];
182 -> 199 [label="Control Dep"];
182 -> 195 [label="Control Dep"];
182 -> 198 [label="Control Dep"];
182 -> 196 [label="Control Dep"];
182 -> 197 [label="Control Dep"];
182 -> 210 [label="Control Dep"];
182 -> 208 [label="Control Dep"];
182 -> 204 [label="Control Dep"];
182 -> 207 [label="Control Dep"];
182 -> 205 [label="Control Dep"];
182 -> 206 [label="Control Dep"];
182 -> 218 [label="Control Dep"];
182 -> 212 [label="Control Dep"];
182 -> 216 [label="Control Dep"];
182 -> 213 [label="Control Dep"];
182 -> 215 [label="Control Dep"];
182 -> 332 [label="Control Dep"];
182 -> 221 [label="Control Dep"];
182 -> 219 [label="Control Dep"];
182 -> 220 [label="Control Dep"];
183 -> 188 [label="Define-Use"];
183 -> 197 [label="Define-Use"];
183 -> 206 [label="Define-Use"];
183 -> 247 [label="Define-Use"];
184 -> 183 [label="AST"];
186 -> 191 [label="Data Dep"];
189 -> 187 [label="AST"];
189 -> 188 [label="AST"];
189 -> 191 [label="Data Dep"];
190 -> 186 [label="AST"];
190 -> 189 [label="AST"];
191 -> 238 [label="Define-Use"];
191 -> 299 [label="Define-Use"];
192 -> 191 [label="AST"];
192 -> 185 [label="AST"];
192 -> 190 [label="AST"];
195 -> 200 [label="Data Dep"];
198 -> 196 [label="AST"];
198 -> 197 [label="AST"];
198 -> 200 [label="Data Dep"];
199 -> 195 [label="AST"];
199 -> 198 [label="AST"];
200 -> 224 [label="Define-Use"];
200 -> 228 [label="Define-Use"];
200 -> 282 [label="Define-Use"];
200 -> 286 [label="Define-Use"];
200 -> 304 [label="Define-Use"];
200 -> 310 [label="Define-Use"];
200 -> 324 [label="Define-Use"];
201 -> 200 [label="AST"];
201 -> 193 [label="AST"];
201 -> 199 [label="AST"];
204 -> 209 [label="Data Dep"];
207 -> 205 [label="AST"];
207 -> 206 [label="AST"];
207 -> 209 [label="Data Dep"];
208 -> 204 [label="AST"];
208 -> 207 [label="AST"];
209 -> 215 [label="Define-Use"];
209 -> 229 [label="Define-Use"];
209 -> 261 [label="Define-Use"];
209 -> 274 [label="Define-Use"];
209 -> 287 [label="Define-Use"];
209 -> 309 [label="Define-Use"];
209 -> 323 [label="Define-Use"];
210 -> 209 [label="AST"];
210 -> 202 [label="AST"];
210 -> 208 [label="AST"];
212 -> 211 [label="AST"];
215 -> 217 [label="Data Dep"];
216 -> 214 [label="AST"];
216 -> 215 [label="AST"];
216 -> 213 [label="AST"];
217 -> 219 [label="Define-Use"];
217 -> 289 [label="Define-Use"];
217 -> 312 [label="Define-Use"];
217 -> 326 [label="Define-Use"];
218 -> 217 [label="AST"];
218 -> 212 [label="AST"];
218 -> 216 [label="AST"];
221 -> 219 [label="AST"];
221 -> 220 [label="AST"];
221 -> 242 [label="Control Dep"];
221 -> 241 [label="Control Dep"];
221 -> 225 [label="Control Dep"];
221 -> 222 [label="Control Dep"];
221 -> 224 [label="Control Dep"];
221 -> 331 [label="Control Dep"];
221 -> 279 [label="Control Dep"];
221 -> 252 [label="Control Dep"];
221 -> 243 [label="Control Dep"];
221 -> 251 [label="Control Dep"];
221 -> 244 [label="Control Dep"];
221 -> 248 [label="Control Dep"];
221 -> 246 [label="Control Dep"];
221 -> 247 [label="Control Dep"];
221 -> 249 [label="Control Dep"];
221 -> 250 [label="Control Dep"];
221 -> 318 [label="Control Dep"];
221 -> 283 [label="Control Dep"];
221 -> 280 [label="Control Dep"];
221 -> 282 [label="Control Dep"];
221 -> 330 [label="Control Dep"];
221 -> 320 [label="Control Dep"];
221 -> 319 [label="Control Dep"];
225 -> 223 [label="AST"];
225 -> 222 [label="AST"];
225 -> 224 [label="AST"];
225 -> 231 [label="Control Dep"];
225 -> 230 [label="Control Dep"];
225 -> 226 [label="Control Dep"];
225 -> 228 [label="Control Dep"];
225 -> 229 [label="Control Dep"];
225 -> 240 [label="Control Dep"];
225 -> 234 [label="Control Dep"];
225 -> 232 [label="Control Dep"];
225 -> 233 [label="Control Dep"];
225 -> 239 [label="Control Dep"];
225 -> 235 [label="Control Dep"];
225 -> 237 [label="Control Dep"];
225 -> 238 [label="Control Dep"];
230 -> 227 [label="AST"];
230 -> 226 [label="AST"];
230 -> 228 [label="AST"];
230 -> 229 [label="AST"];
231 -> 230 [label="AST"];
234 -> 232 [label="AST"];
234 -> 233 [label="AST"];
239 -> 236 [label="AST"];
239 -> 237 [label="AST"];
239 -> 235 [label="AST"];
239 -> 238 [label="AST"];
240 -> 234 [label="AST"];
240 -> 239 [label="AST"];
241 -> 225 [label="AST"];
241 -> 231 [label="AST"];
241 -> 240 [label="AST"];
242 -> 241 [label="AST"];
248 -> 246 [label="AST"];
248 -> 247 [label="AST"];
251 -> 245 [label="AST"];
251 -> 244 [label="AST"];
251 -> 248 [label="AST"];
251 -> 249 [label="AST"];
251 -> 250 [label="AST"];
252 -> 243 [label="AST"];
252 -> 251 [label="AST"];
252 -> 278 [label="Control Dep"];
252 -> 268 [label="Control Dep"];
252 -> 253 [label="Control Dep"];
252 -> 256 [label="Control Dep"];
252 -> 255 [label="Control Dep"];
252 -> 267 [label="Control Dep"];
252 -> 265 [label="Control Dep"];
252 -> 263 [label="Control Dep"];
252 -> 258 [label="Control Dep"];
252 -> 262 [label="Control Dep"];
252 -> 259 [label="Control Dep"];
252 -> 261 [label="Control Dep"];
252 -> 264 [label="Control Dep"];
252 -> 266 [label="Control Dep"];
252 -> 276 [label="Control Dep"];
252 -> 269 [label="Control Dep"];
252 -> 271 [label="Control Dep"];
252 -> 275 [label="Control Dep"];
252 -> 272 [label="Control Dep"];
252 -> 274 [label="Control Dep"];
256 -> 255 [label="AST"];
256 -> 257 [label="AST"];
262 -> 260 [label="AST"];
262 -> 261 [label="AST"];
262 -> 259 [label="AST"];
263 -> 258 [label="AST"];
263 -> 262 [label="AST"];
265 -> 263 [label="AST"];
265 -> 264 [label="AST"];
267 -> 265 [label="AST"];
267 -> 266 [label="AST"];
268 -> 254 [label="AST"];
268 -> 256 [label="AST"];
268 -> 253 [label="AST"];
268 -> 267 [label="AST"];
275 -> 273 [label="AST"];
275 -> 274 [label="AST"];
275 -> 272 [label="AST"];
276 -> 270 [label="AST"];
276 -> 271 [label="AST"];
276 -> 269 [label="AST"];
276 -> 275 [label="AST"];
278 -> 268 [label="AST"];
278 -> 276 [label="AST"];
278 -> 277 [label="AST"];
279 -> 252 [label="AST"];
279 -> 278 [label="AST"];
283 -> 281 [label="AST"];
283 -> 280 [label="AST"];
283 -> 282 [label="AST"];
283 -> 292 [label="Control Dep"];
283 -> 291 [label="Control Dep"];
283 -> 284 [label="Control Dep"];
283 -> 286 [label="Control Dep"];
283 -> 287 [label="Control Dep"];
283 -> 288 [label="Control Dep"];
283 -> 289 [label="Control Dep"];
283 -> 290 [label="Control Dep"];
283 -> 317 [label="Control Dep"];
283 -> 295 [label="Control Dep"];
283 -> 293 [label="Control Dep"];
283 -> 294 [label="Control Dep"];
283 -> 300 [label="Control Dep"];
283 -> 296 [label="Control Dep"];
283 -> 298 [label="Control Dep"];
283 -> 299 [label="Control Dep"];
283 -> 316 [label="Control Dep"];
283 -> 306 [label="Control Dep"];
283 -> 301 [label="Control Dep"];
283 -> 305 [label="Control Dep"];
283 -> 302 [label="Control Dep"];
283 -> 304 [label="Control Dep"];
291 -> 285 [label="AST"];
291 -> 284 [label="AST"];
291 -> 286 [label="AST"];
291 -> 287 [label="AST"];
291 -> 288 [label="AST"];
291 -> 289 [label="AST"];
291 -> 290 [label="AST"];
292 -> 291 [label="AST"];
295 -> 293 [label="AST"];
295 -> 294 [label="AST"];
300 -> 297 [label="AST"];
300 -> 298 [label="AST"];
300 -> 296 [label="AST"];
300 -> 299 [label="AST"];
305 -> 303 [label="AST"];
305 -> 302 [label="AST"];
305 -> 304 [label="AST"];
306 -> 301 [label="AST"];
306 -> 305 [label="AST"];
306 -> 315 [label="Control Dep"];
306 -> 314 [label="Control Dep"];
306 -> 307 [label="Control Dep"];
306 -> 309 [label="Control Dep"];
306 -> 310 [label="Control Dep"];
306 -> 311 [label="Control Dep"];
306 -> 312 [label="Control Dep"];
306 -> 313 [label="Control Dep"];
306 -> 346 [label="Action"];
314 -> 308 [label="AST"];
314 -> 307 [label="AST"];
314 -> 309 [label="AST"];
314 -> 310 [label="AST"];
314 -> 311 [label="AST"];
314 -> 312 [label="AST"];
314 -> 313 [label="AST"];
315 -> 314 [label="AST"];
316 -> 306 [label="AST"];
316 -> 315 [label="AST"];
316 -> 344 [label="Action"];
317 -> 295 [label="AST"];
317 -> 300 [label="AST"];
317 -> 316 [label="AST"];
318 -> 283 [label="AST"];
318 -> 292 [label="AST"];
318 -> 317 [label="AST"];
320 -> 319 [label="AST"];
320 -> 329 [label="Control Dep"];
320 -> 328 [label="Control Dep"];
320 -> 321 [label="Control Dep"];
320 -> 323 [label="Control Dep"];
320 -> 324 [label="Control Dep"];
320 -> 325 [label="Control Dep"];
320 -> 326 [label="Control Dep"];
320 -> 327 [label="Control Dep"];
328 -> 322 [label="AST"];
328 -> 321 [label="AST"];
328 -> 323 [label="AST"];
328 -> 324 [label="AST"];
328 -> 325 [label="AST"];
328 -> 326 [label="AST"];
328 -> 327 [label="AST"];
329 -> 328 [label="AST"];
330 -> 320 [label="AST"];
330 -> 329 [label="AST"];
331 -> 279 [label="AST"];
331 -> 318 [label="AST"];
331 -> 330 [label="AST"];
332 -> 221 [label="AST"];
332 -> 242 [label="AST"];
332 -> 331 [label="AST"];
333 -> 192 [label="AST"];
333 -> 201 [label="AST"];
333 -> 210 [label="AST"];
333 -> 218 [label="AST"];
333 -> 332 [label="AST"];
334 -> 177 [label="AST"];
334 -> 182 [label="AST"];
334 -> 184 [label="AST"];
334 -> 333 [label="AST"];
335 -> 340 [label="Control Dep"];
335 -> 339 [label="Control Dep"];
335 -> 336 [label="Control Dep"];
335 -> 338 [label="Control Dep"];
339 -> 337 [label="AST"];
339 -> 338 [label="AST"];
339 -> 336 [label="AST"];
340 -> 339 [label="AST"];
341 -> 335 [label="AST"];
341 -> 340 [label="AST"];
342 -> 18 [label="AST"];
342 -> 36 [label="AST"];
342 -> 45 [label="AST"];
342 -> 173 [label="AST"];
342 -> 334 [label="AST"];
342 -> 341 [label="AST"];
343 -> 1 [label="AST"];
343 -> 0 [label="AST"];
343 -> 2 [label="AST"];
343 -> 4 [label="AST"];
343 -> 6 [label="AST"];
343 -> 8 [label="AST"];
343 -> 10 [label="AST"];
343 -> 342 [label="AST"];
344 -> 345 [label="Action"];
346 -> 345 [label="Action"];
}