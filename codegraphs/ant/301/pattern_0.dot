digraph "Pattern" {
0 [label="execute#?#68:INSERT
execute#?#153:INSERT" shape=ellipse]
1 [label="execute#?#67:try \{
    exe.execute();
\} catch (IOException e) \{
    throw new BuildException(e, location);
\} finally \{
    if (output != null) \{
        try \{
            outputstream.close();
        \} catch (IOException e) \{
        \}
    \}
    if (error != null) \{
        try \{
            errorstream.close();
        \} catch (IOException e) \{
        \}
    \}
\}
execute#?#151:try \{
    exe.setCommandline(toExecute.getCommandline());
    exe.execute();
\} catch (IOException e) \{
    throw new BuildException(\"Javadoc failed: \" + e, e, location);
\} finally \{
    out.logFlush();
    err.logFlush();
    try \{
        out.close();
        err.close();
    \} catch (IOException e) \{
    \}
\}" shape=ellipse]
2 [label="execute#?#2:\{
    Commandline toExecute = new Commandline();
    toExecute.setExecutable(\"cvs\");
    if (cvsRoot != null) \{
        toExecute.createArgument().setValue(\"-d\");
        toExecute.createArgument().setValue(cvsRoot);
    \}
    if (noexec) \{
        toExecute.createArgument().setValue(\"-n\");
    \}
    if (quiet) \{
        toExecute.createArgument().setValue(\"-q\");
    \}
    toExecute.createArgument().setLine(command);
    toExecute.addArguments(cmd.getCommandline());
    if (pack != null) \{
        toExecute.createArgument().setLine(pack);
    \}
    Environment env = new Environment();
    if (port > 0) \{
        Environment.Variable var = new Environment.Variable();
        var.setKey(\"CVS_CLIENT_PORT\");
        var.setValue(String.valueOf(port));
        env.addVariable(var);
    \}
    if (passFile != null) \{
        Environment.Variable var = new Environment.Variable();
        var.setKey(\"CVS_PASSFILE\");
        var.setValue(String.valueOf(passFile));
        env.addVariable(var);
    \}
    ExecuteStreamHandler streamhandler = null;
    OutputStream outputstream = null;
    OutputStream errorstream = null;
    if ((error == null) && (output == null)) \{
        streamhandler = new LogStreamHandler(this, Project.MSG_INFO, Project.MSG_WARN);
    \} else \{
        if (output != null) \{
            try \{
                outputstream = new PrintStream(new BufferedOutputStream(new FileOutputStream(output)));
            \} catch (IOException e) \{
                throw new BuildException(e, location);
            \}
        \} else \{
            outputstream = new LogOutputStream(this, Project.MSG_INFO);
        \}
        if (error != null) \{
            try \{
                errorstream = new PrintStream(new BufferedOutputStream(new FileOutputStream(error)));
            \} catch (IOException e) \{
                throw new BuildException(e, location);
            \}
        \} else \{
            errorstream = new LogOutputStream(this, Project.MSG_WARN);
        \}
        streamhandler = new PumpStreamHandler(outputstream, errorstream);
    \}
    Execute exe = new Execute(streamhandler, null);
    exe.setAntRun(project);
    if (dest == null) \{
        dest = project.getBaseDir();
    \}
    exe.setWorkingDirectory(dest);
    exe.setCommandline(toExecute.getCommandline());
    exe.setEnvironment(env.getVariables());
    try \{
        exe.execute();
    \} catch (IOException e) \{
        throw new BuildException(e, location);
    \} finally \{
        if (output != null) \{
            try \{
                outputstream.close();
            \} catch (IOException e) \{
            \}
        \}
        if (error != null) \{
            try \{
                errorstream.close();
            \} catch (IOException e) \{
            \}
        \}
    \}
\}
execute#?#2:\{
    if (\"javadoc2\".equals(taskType)) \{
        log(\"!! javadoc2 is deprecated. Use javadoc instead. !!\");
    \}
    if (sourcePath == null) \{
        String msg = \"sourcePath attribute must be set!\";
        throw new BuildException(msg);
    \}
    log(\"Generating Javadoc\", MSG_INFO);
    Commandline toExecute = ((Commandline) (cmd.clone()));
    toExecute.setExecutable(\"javadoc\");
    if (classpath == null) \{
        classpath = Path.systemClasspath;
    \}
    if (!javadoc1) \{
        toExecute.createArgument().setValue(\"-classpath\");
        toExecute.createArgument().setPath(classpath);
        toExecute.createArgument().setValue(\"-sourcepath\");
        toExecute.createArgument().setPath(sourcePath);
    \} else \{
        toExecute.createArgument().setValue(\"-classpath\");
        toExecute.createArgument().setValue((sourcePath.toString() + System.getProperty(\"path.separator\")) + classpath.toString());
    \}
    if (version && (doclet == null)) \{
        toExecute.createArgument().setValue(\"-version\");
    \}
    if (author && (doclet == null)) \{
        toExecute.createArgument().setValue(\"-author\");
    \}
    if (javadoc1 || (doclet == null)) \{
        if (destDir == null) \{
            String msg = \"destDir attribute must be set!\";
            throw new BuildException(msg);
        \}
    \}
    if (!javadoc1) \{
        if (doclet != null) \{
            if (doclet.getName() == null) \{
                throw new BuildException(\"The doclet name must be specified.\", location);
            \} else \{
                toExecute.createArgument().setValue(\"-doclet\");
                toExecute.createArgument().setValue(doclet.getName());
                if (doclet.getPath() != null) \{
                    toExecute.createArgument().setValue(\"-docletpath\");
                    toExecute.createArgument().setPath(doclet.getPath());
                \}
                for (Enumeration e = doclet.getParams(); e.hasMoreElements();) \{
                    DocletParam param = ((DocletParam) (e.nextElement()));
                    if (param.getName() == null) \{
                        throw new BuildException(\"Doclet parameters must have a name\");
                    \}
                    toExecute.createArgument().setValue(param.getName());
                    if (param.getValue() != null) \{
                        toExecute.createArgument().setValue(param.getValue());
                    \}
                \}
            \}
        \}
        if (bootclasspath != null) \{
            toExecute.createArgument().setValue(\"-bootclasspath\");
            toExecute.createArgument().setPath(bootclasspath);
        \}
        if (links.size() != 0) \{
            for (Enumeration e = links.elements(); e.hasMoreElements();) \{
                LinkArgument la = ((LinkArgument) (e.nextElement()));
                if (la.getHref() == null) \{
                    throw new BuildException(\"Links must provide the URL to the external class documentation.\");
                \}
                if (la.isLinkOffline()) \{
                    String packageListLocation = la.getPackagelistLoc();
                    if (packageListLocation == null) \{
                        throw new BuildException((\"The package list location for link \" + la.getHref()) + \" must be provided because the link is offline\");
                    \}
                    toExecute.createArgument().setValue(\"-linkoffline\");
                    toExecute.createArgument().setValue(la.getHref());
                    toExecute.createArgument().setValue(packageListLocation);
                \} else \{
                    toExecute.createArgument().setValue(\"-link\");
                    toExecute.createArgument().setValue(la.getHref());
                \}
            \}
        \}
        if (group != null) \{
            StringTokenizer tok = new StringTokenizer(group, \",\", false);
            while (tok.hasMoreTokens()) \{
                String grp = tok.nextToken().trim();
                int space = grp.indexOf(\" \");
                if (space > 0) \{
                    String name = grp.substring(0, space);
                    String pkgList = grp.substring(space + 1);
                    toExecute.createArgument().setValue(\"-group\");
                    toExecute.createArgument().setValue(name);
                    toExecute.createArgument().setValue(pkgList);
                \}
            \} 
        \}
        if (groups.size() != 0) \{
            for (Enumeration e = groups.elements(); e.hasMoreElements();) \{
                GroupArgument ga = ((GroupArgument) (e.nextElement()));
                String title = ga.getTitle();
                String packages = ga.getPackages();
                if ((title == null) || (packages == null)) \{
                    throw new BuildException(\"The title and packages must be specified for group elements.\");
                \}
                toExecute.createArgument().setValue(\"-group\");
                toExecute.createArgument().setValue(title);
                toExecute.createArgument().setValue(packages);
            \}
        \}
    \}
    if ((packageNames != null) && (packageNames.length() > 0)) \{
        Vector packages = new Vector();
        StringTokenizer tok = new StringTokenizer(packageNames, \",\", false);
        while (tok.hasMoreTokens()) \{
            String name = tok.nextToken().trim();
            if (name.endsWith(\".*\")) \{
                packages.addElement(name);
            \} else \{
                toExecute.createArgument().setValue(name);
            \}
        \} 
        if (packages.size() > 0) \{
            evaluatePackages(toExecute, sourcePath, packages);
        \}
    \}
    if ((sourceFiles != null) && (sourceFiles.length() > 0)) \{
        StringTokenizer tok = new StringTokenizer(sourceFiles, \",\", false);
        while (tok.hasMoreTokens()) \{
            toExecute.createArgument().setValue(tok.nextToken().trim());
        \} 
    \}
    if (packageList != null) \{
        toExecute.createArgument().setValue(\"@\" + packageList);
    \}
    log(\"Javadoc args: \" + toExecute, MSG_VERBOSE);
    log(\"Javadoc execution\", MSG_INFO);
    JavadocOutputStream out = new JavadocOutputStream(Project.MSG_INFO);
    JavadocOutputStream err = new JavadocOutputStream(Project.MSG_WARN);
    Execute exe = new Execute(new PumpStreamHandler(out, err));
    exe.setAntRun(project);
    exe.setWorkingDirectory(project.getBaseDir());
    try \{
        exe.setCommandline(toExecute.getCommandline());
        exe.execute();
    \} catch (IOException e) \{
        throw new BuildException(\"Javadoc failed: \" + e, e, location);
    \} finally \{
        out.logFlush();
        err.logFlush();
        try \{
            out.close();
            err.close();
        \} catch (IOException e) \{
        \}
    \}
\}" shape=ellipse]
3 [label="execute#?#2:public void execute() throws BuildException \{
    Commandline toExecute = new Commandline();
    toExecute.setExecutable(\"cvs\");
    if (cvsRoot != null) \{
        toExecute.createArgument().setValue(\"-d\");
        toExecute.createArgument().setValue(cvsRoot);
    \}
    if (noexec) \{
        toExecute.createArgument().setValue(\"-n\");
    \}
    if (quiet) \{
        toExecute.createArgument().setValue(\"-q\");
    \}
    toExecute.createArgument().setLine(command);
    toExecute.addArguments(cmd.getCommandline());
    if (pack != null) \{
        toExecute.createArgument().setLine(pack);
    \}
    Environment env = new Environment();
    if (port > 0) \{
        Environment.Variable var = new Environment.Variable();
        var.setKey(\"CVS_CLIENT_PORT\");
        var.setValue(String.valueOf(port));
        env.addVariable(var);
    \}
    if (passFile != null) \{
        Environment.Variable var = new Environment.Variable();
        var.setKey(\"CVS_PASSFILE\");
        var.setValue(String.valueOf(passFile));
        env.addVariable(var);
    \}
    ExecuteStreamHandler streamhandler = null;
    OutputStream outputstream = null;
    OutputStream errorstream = null;
    if ((error == null) && (output == null)) \{
        streamhandler = new LogStreamHandler(this, Project.MSG_INFO, Project.MSG_WARN);
    \} else \{
        if (output != null) \{
            try \{
                outputstream = new PrintStream(new BufferedOutputStream(new FileOutputStream(output)));
            \} catch (IOException e) \{
                throw new BuildException(e, location);
            \}
        \} else \{
            outputstream = new LogOutputStream(this, Project.MSG_INFO);
        \}
        if (error != null) \{
            try \{
                errorstream = new PrintStream(new BufferedOutputStream(new FileOutputStream(error)));
            \} catch (IOException e) \{
                throw new BuildException(e, location);
            \}
        \} else \{
            errorstream = new LogOutputStream(this, Project.MSG_WARN);
        \}
        streamhandler = new PumpStreamHandler(outputstream, errorstream);
    \}
    Execute exe = new Execute(streamhandler, null);
    exe.setAntRun(project);
    if (dest == null) \{
        dest = project.getBaseDir();
    \}
    exe.setWorkingDirectory(dest);
    exe.setCommandline(toExecute.getCommandline());
    exe.setEnvironment(env.getVariables());
    try \{
        exe.execute();
    \} catch (IOException e) \{
        throw new BuildException(e, location);
    \} finally \{
        if (output != null) \{
            try \{
                outputstream.close();
            \} catch (IOException e) \{
            \}
        \}
        if (error != null) \{
            try \{
                errorstream.close();
            \} catch (IOException e) \{
            \}
        \}
    \}
\}
execute#?#2:public void execute() throws BuildException \{
    if (\"javadoc2\".equals(taskType)) \{
        log(\"!! javadoc2 is deprecated. Use javadoc instead. !!\");
    \}
    if (sourcePath == null) \{
        String msg = \"sourcePath attribute must be set!\";
        throw new BuildException(msg);
    \}
    log(\"Generating Javadoc\", MSG_INFO);
    Commandline toExecute = ((Commandline) (cmd.clone()));
    toExecute.setExecutable(\"javadoc\");
    if (classpath == null) \{
        classpath = Path.systemClasspath;
    \}
    if (!javadoc1) \{
        toExecute.createArgument().setValue(\"-classpath\");
        toExecute.createArgument().setPath(classpath);
        toExecute.createArgument().setValue(\"-sourcepath\");
        toExecute.createArgument().setPath(sourcePath);
    \} else \{
        toExecute.createArgument().setValue(\"-classpath\");
        toExecute.createArgument().setValue((sourcePath.toString() + System.getProperty(\"path.separator\")) + classpath.toString());
    \}
    if (version && (doclet == null)) \{
        toExecute.createArgument().setValue(\"-version\");
    \}
    if (author && (doclet == null)) \{
        toExecute.createArgument().setValue(\"-author\");
    \}
    if (javadoc1 || (doclet == null)) \{
        if (destDir == null) \{
            String msg = \"destDir attribute must be set!\";
            throw new BuildException(msg);
        \}
    \}
    if (!javadoc1) \{
        if (doclet != null) \{
            if (doclet.getName() == null) \{
                throw new BuildException(\"The doclet name must be specified.\", location);
            \} else \{
                toExecute.createArgument().setValue(\"-doclet\");
                toExecute.createArgument().setValue(doclet.getName());
                if (doclet.getPath() != null) \{
                    toExecute.createArgument().setValue(\"-docletpath\");
                    toExecute.createArgument().setPath(doclet.getPath());
                \}
                for (Enumeration e = doclet.getParams(); e.hasMoreElements();) \{
                    DocletParam param = ((DocletParam) (e.nextElement()));
                    if (param.getName() == null) \{
                        throw new BuildException(\"Doclet parameters must have a name\");
                    \}
                    toExecute.createArgument().setValue(param.getName());
                    if (param.getValue() != null) \{
                        toExecute.createArgument().setValue(param.getValue());
                    \}
                \}
            \}
        \}
        if (bootclasspath != null) \{
            toExecute.createArgument().setValue(\"-bootclasspath\");
            toExecute.createArgument().setPath(bootclasspath);
        \}
        if (links.size() != 0) \{
            for (Enumeration e = links.elements(); e.hasMoreElements();) \{
                LinkArgument la = ((LinkArgument) (e.nextElement()));
                if (la.getHref() == null) \{
                    throw new BuildException(\"Links must provide the URL to the external class documentation.\");
                \}
                if (la.isLinkOffline()) \{
                    String packageListLocation = la.getPackagelistLoc();
                    if (packageListLocation == null) \{
                        throw new BuildException((\"The package list location for link \" + la.getHref()) + \" must be provided because the link is offline\");
                    \}
                    toExecute.createArgument().setValue(\"-linkoffline\");
                    toExecute.createArgument().setValue(la.getHref());
                    toExecute.createArgument().setValue(packageListLocation);
                \} else \{
                    toExecute.createArgument().setValue(\"-link\");
                    toExecute.createArgument().setValue(la.getHref());
                \}
            \}
        \}
        if (group != null) \{
            StringTokenizer tok = new StringTokenizer(group, \",\", false);
            while (tok.hasMoreTokens()) \{
                String grp = tok.nextToken().trim();
                int space = grp.indexOf(\" \");
                if (space > 0) \{
                    String name = grp.substring(0, space);
                    String pkgList = grp.substring(space + 1);
                    toExecute.createArgument().setValue(\"-group\");
                    toExecute.createArgument().setValue(name);
                    toExecute.createArgument().setValue(pkgList);
                \}
            \} 
        \}
        if (groups.size() != 0) \{
            for (Enumeration e = groups.elements(); e.hasMoreElements();) \{
                GroupArgument ga = ((GroupArgument) (e.nextElement()));
                String title = ga.getTitle();
                String packages = ga.getPackages();
                if ((title == null) || (packages == null)) \{
                    throw new BuildException(\"The title and packages must be specified for group elements.\");
                \}
                toExecute.createArgument().setValue(\"-group\");
                toExecute.createArgument().setValue(title);
                toExecute.createArgument().setValue(packages);
            \}
        \}
    \}
    if ((packageNames != null) && (packageNames.length() > 0)) \{
        Vector packages = new Vector();
        StringTokenizer tok = new StringTokenizer(packageNames, \",\", false);
        while (tok.hasMoreTokens()) \{
            String name = tok.nextToken().trim();
            if (name.endsWith(\".*\")) \{
                packages.addElement(name);
            \} else \{
                toExecute.createArgument().setValue(name);
            \}
        \} 
        if (packages.size() > 0) \{
            evaluatePackages(toExecute, sourcePath, packages);
        \}
    \}
    if ((sourceFiles != null) && (sourceFiles.length() > 0)) \{
        StringTokenizer tok = new StringTokenizer(sourceFiles, \",\", false);
        while (tok.hasMoreTokens()) \{
            toExecute.createArgument().setValue(tok.nextToken().trim());
        \} 
    \}
    if (packageList != null) \{
        toExecute.createArgument().setValue(\"@\" + packageList);
    \}
    log(\"Javadoc args: \" + toExecute, MSG_VERBOSE);
    log(\"Javadoc execution\", MSG_INFO);
    JavadocOutputStream out = new JavadocOutputStream(Project.MSG_INFO);
    JavadocOutputStream err = new JavadocOutputStream(Project.MSG_WARN);
    Execute exe = new Execute(new PumpStreamHandler(out, err));
    exe.setAntRun(project);
    exe.setWorkingDirectory(project.getBaseDir());
    try \{
        exe.setCommandline(toExecute.getCommandline());
        exe.execute();
    \} catch (IOException e) \{
        throw new BuildException(\"Javadoc failed: \" + e, e, location);
    \} finally \{
        out.logFlush();
        err.logFlush();
        try \{
            out.close();
            err.close();
        \} catch (IOException e) \{
        \}
    \}
\}" shape=ellipse]
4 [label="execute#?#3:Commandline toExecute = new Commandline()
execute#?#11:Commandline toExecute = ((Commandline) (cmd.clone()))" shape=ellipse]
5 [label="execute#?#4:toExecute.setExecutable(\"cvs\")
execute#?#12:toExecute.setExecutable(\"javadoc\")" shape=ellipse]
6 [label="execute#?#5:if (cvsRoot != null) \{
    toExecute.createArgument().setValue(\"-d\");
    toExecute.createArgument().setValue(cvsRoot);
\}
execute#?#29:if (version && (doclet == null)) \{
    toExecute.createArgument().setValue(\"-version\");
\}" shape=ellipse]
7 [label="execute#?#9:if (noexec) \{
    toExecute.createArgument().setValue(\"-n\");
\}
execute#?#32:if (author && (doclet == null)) \{
    toExecute.createArgument().setValue(\"-author\");
\}" shape=ellipse]
8 [label="execute#?#12:if (quiet) \{
    toExecute.createArgument().setValue(\"-q\");
\}
execute#?#141:if (packageList != null) \{
    toExecute.createArgument().setValue(\"@\" + packageList);
\}" shape=ellipse]
9 [label="execute#?#15:toExecute.createArgument().setLine(command)
execute#?#149:exe.setAntRun(project)" shape=ellipse]
10 [label="execute#?#16:toExecute.addArguments(cmd.getCommandline())
execute#?#150:exe.setWorkingDirectory(project.getBaseDir())" shape=ellipse]
11 [label="execute#?#17:if (pack != null) \{
    toExecute.createArgument().setLine(pack);
\}
execute#?#6:if (sourcePath == null) \{
    String msg = \"sourcePath attribute must be set!\";
    throw new BuildException(msg);
\}" shape=ellipse]
12 [label="execute#?#20:Environment env = new Environment()
execute#?#148:Execute exe = new Execute(new PumpStreamHandler(out, err))" shape=ellipse]
13 [label="execute#?#21:if (port > 0) \{
    Environment.Variable var = new Environment.Variable();
    var.setKey(\"CVS_CLIENT_PORT\");
    var.setValue(String.valueOf(port));
    env.addVariable(var);
\}
execute#?#41:if (!javadoc1) \{
    if (doclet != null) \{
        if (doclet.getName() == null) \{
            throw new BuildException(\"The doclet name must be specified.\", location);
        \} else \{
            toExecute.createArgument().setValue(\"-doclet\");
            toExecute.createArgument().setValue(doclet.getName());
            if (doclet.getPath() != null) \{
                toExecute.createArgument().setValue(\"-docletpath\");
                toExecute.createArgument().setPath(doclet.getPath());
            \}
            for (Enumeration e = doclet.getParams(); e.hasMoreElements();) \{
                DocletParam param = ((DocletParam) (e.nextElement()));
                if (param.getName() == null) \{
                    throw new BuildException(\"Doclet parameters must have a name\");
                \}
                toExecute.createArgument().setValue(param.getName());
                if (param.getValue() != null) \{
                    toExecute.createArgument().setValue(param.getValue());
                \}
            \}
        \}
    \}
    if (bootclasspath != null) \{
        toExecute.createArgument().setValue(\"-bootclasspath\");
        toExecute.createArgument().setPath(bootclasspath);
    \}
    if (links.size() != 0) \{
        for (Enumeration e = links.elements(); e.hasMoreElements();) \{
            LinkArgument la = ((LinkArgument) (e.nextElement()));
            if (la.getHref() == null) \{
                throw new BuildException(\"Links must provide the URL to the external class documentation.\");
            \}
            if (la.isLinkOffline()) \{
                String packageListLocation = la.getPackagelistLoc();
                if (packageListLocation == null) \{
                    throw new BuildException((\"The package list location for link \" + la.getHref()) + \" must be provided because the link is offline\");
                \}
                toExecute.createArgument().setValue(\"-linkoffline\");
                toExecute.createArgument().setValue(la.getHref());
                toExecute.createArgument().setValue(packageListLocation);
            \} else \{
                toExecute.createArgument().setValue(\"-link\");
                toExecute.createArgument().setValue(la.getHref());
            \}
        \}
    \}
    if (group != null) \{
        StringTokenizer tok = new StringTokenizer(group, \",\", false);
        while (tok.hasMoreTokens()) \{
            String grp = tok.nextToken().trim();
            int space = grp.indexOf(\" \");
            if (space > 0) \{
                String name = grp.substring(0, space);
                String pkgList = grp.substring(space + 1);
                toExecute.createArgument().setValue(\"-group\");
                toExecute.createArgument().setValue(name);
                toExecute.createArgument().setValue(pkgList);
            \}
        \} 
    \}
    if (groups.size() != 0) \{
        for (Enumeration e = groups.elements(); e.hasMoreElements();) \{
            GroupArgument ga = ((GroupArgument) (e.nextElement()));
            String title = ga.getTitle();
            String packages = ga.getPackages();
            if ((title == null) || (packages == null)) \{
                throw new BuildException(\"The title and packages must be specified for group elements.\");
            \}
            toExecute.createArgument().setValue(\"-group\");
            toExecute.createArgument().setValue(title);
            toExecute.createArgument().setValue(packages);
        \}
    \}
\}" shape=ellipse]
14 [label="execute#?#27:if (passFile != null) \{
    Environment.Variable var = new Environment.Variable();
    var.setKey(\"CVS_PASSFILE\");
    var.setValue(String.valueOf(passFile));
    env.addVariable(var);
\}
execute#?#16:if (!javadoc1) \{
    toExecute.createArgument().setValue(\"-classpath\");
    toExecute.createArgument().setPath(classpath);
    toExecute.createArgument().setValue(\"-sourcepath\");
    toExecute.createArgument().setPath(sourcePath);
\} else \{
    toExecute.createArgument().setValue(\"-classpath\");
    toExecute.createArgument().setValue((sourcePath.toString() + System.getProperty(\"path.separator\")) + classpath.toString());
\}" shape=ellipse]
15 [label="execute#?#33:ExecuteStreamHandler streamhandler = null
execute#?#35:if (javadoc1 || (doclet == null)) \{
    if (destDir == null) \{
        String msg = \"destDir attribute must be set!\";
        throw new BuildException(msg);
    \}
\}" shape=ellipse]
16 [label="execute#?#34:OutputStream outputstream = null
execute#?#146:JavadocOutputStream out = new JavadocOutputStream(Project.MSG_INFO)" shape=ellipse]
17 [label="execute#?#35:OutputStream errorstream = null
execute#?#147:JavadocOutputStream err = new JavadocOutputStream(Project.MSG_WARN)" shape=ellipse]
18 [label="execute#?#36:if ((error == null) && (output == null)) \{
    streamhandler = new LogStreamHandler(this, Project.MSG_INFO, Project.MSG_WARN);
\} else \{
    if (output != null) \{
        try \{
            outputstream = new PrintStream(new BufferedOutputStream(new FileOutputStream(output)));
        \} catch (IOException e) \{
            throw new BuildException(e, location);
        \}
    \} else \{
        outputstream = new LogOutputStream(this, Project.MSG_INFO);
    \}
    if (error != null) \{
        try \{
            errorstream = new PrintStream(new BufferedOutputStream(new FileOutputStream(error)));
        \} catch (IOException e) \{
            throw new BuildException(e, location);
        \}
    \} else \{
        errorstream = new LogOutputStream(this, Project.MSG_WARN);
    \}
    streamhandler = new PumpStreamHandler(outputstream, errorstream);
\}
execute#?#120:if ((packageNames != null) && (packageNames.length() > 0)) \{
    Vector packages = new Vector();
    StringTokenizer tok = new StringTokenizer(packageNames, \",\", false);
    while (tok.hasMoreTokens()) \{
        String name = tok.nextToken().trim();
        if (name.endsWith(\".*\")) \{
            packages.addElement(name);
        \} else \{
            toExecute.createArgument().setValue(name);
        \}
    \} 
    if (packages.size() > 0) \{
        evaluatePackages(toExecute, sourcePath, packages);
    \}
\}" shape=ellipse]
19 [label="execute#?#59:Execute exe = new Execute(streamhandler, null)
execute#?#135:if ((sourceFiles != null) && (sourceFiles.length() > 0)) \{
    StringTokenizer tok = new StringTokenizer(sourceFiles, \",\", false);
    while (tok.hasMoreTokens()) \{
        toExecute.createArgument().setValue(tok.nextToken().trim());
    \} 
\}" shape=ellipse]
20 [label="execute#?#60:exe.setAntRun(project)
execute#?#144:log(\"Javadoc args: \" + toExecute, MSG_VERBOSE)" shape=ellipse]
21 [label="execute#?#61:if (dest == null) \{
    dest = project.getBaseDir();
\}
execute#?#3:if (\"javadoc2\".equals(taskType)) \{
    log(\"!! javadoc2 is deprecated. Use javadoc instead. !!\");
\}" shape=ellipse]
22 [label="execute#?#64:exe.setWorkingDirectory(dest)
execute#?#10:log(\"Generating Javadoc\", MSG_INFO)" shape=ellipse]
23 [label="execute#?#65:exe.setCommandline(toExecute.getCommandline())
execute#?#145:log(\"Javadoc execution\", MSG_INFO)" shape=ellipse]
24 [label="execute#?#66:exe.setEnvironment(env.getVariables())" shape=ellipse]
25 [label="execute#?#67:\{
    exe.execute();
\}
execute#?#151:\{
    exe.setCommandline(toExecute.getCommandline());
    exe.execute();
\}" shape=ellipse]
26 [label="execute#?#68:exe.execute()
execute#?#153:exe.execute()" shape=ellipse]
27 [label="execute#?#69: catch (IOException e) \{
    throw new BuildException(e, location);
\}
execute#?#154: catch (IOException e) \{
    throw new BuildException(\"Javadoc failed: \" + e, e, location);
\}" shape=ellipse]
28 [label="execute#?#69:IOException e
execute#?#154:IOException e" shape=ellipse]
29 [label="execute#?#69:\{
    throw new BuildException(e, location);
\}
execute#?#154:\{
    throw new BuildException(\"Javadoc failed: \" + e, e, location);
\}" shape=ellipse]
30 [label="execute#?#71:\{
    if (output != null) \{
        try \{
            outputstream.close();
        \} catch (IOException e) \{
        \}
    \}
    if (error != null) \{
        try \{
            errorstream.close();
        \} catch (IOException e) \{
        \}
    \}
\}
execute#?#156:\{
    out.logFlush();
    err.logFlush();
    try \{
        out.close();
        err.close();
    \} catch (IOException e) \{
    \}
\}" shape=ellipse]
31 [label="execute#?#72:if (output != null) \{
    try \{
        outputstream.close();
    \} catch (IOException e) \{
    \}
\}
execute#?#159:try \{
    out.close();
    err.close();
\} catch (IOException e) \{
\}" shape=ellipse]
32 [label="execute#?#78:if (error != null) \{
    try \{
        errorstream.close();
    \} catch (IOException e) \{
    \}
\}" shape=ellipse]
33 [label="execute#?#69:INSERT
execute#?#154:INSERT" shape=ellipse]
34 [label="execute#?#69:if (failOnError && (retCode != 0)) \{
    throw new BuildException(\"cvs exited with error code \" + retCode);
\}
execute#?#154:if ((ret != 0) && failOnError) \{
    throw new BuildException(\"Javadoc returned \" + ret, location);
\}" shape=ellipse]
35 [label="execute#?#68:int retCode = exe.execute()
execute#?#153:int ret = exe.execute()" shape=ellipse]
36 [label="execute#?#68:MOVE
execute#?#153:MOVE" shape=ellipse]
37 [label="execute#?#158:err.logFlush()" shape=ellipse]
38 [label="execute#?#152:exe.setCommandline(toExecute.getCommandline())" shape=ellipse]
39 [label="execute#?#157:out.logFlush()" shape=ellipse]
40 [label="execute#?#13:if (classpath == null) \{
    classpath = Path.systemClasspath;
\}" shape=ellipse]
0 -> 35 [label="Action:2"];
1 -> 0 [label="Action:2"];
1 -> 25 [label="AST:2"];
1 -> 27 [label="AST:2"];
1 -> 30 [label="AST:2"];
1 -> 33 [label="Action:2"];
2 -> 1 [label="AST:2"];
2 -> 4 [label="AST:2"];
2 -> 5 [label="AST:2"];
2 -> 6 [label="AST:2"];
2 -> 7 [label="AST:2"];
2 -> 8 [label="AST:2"];
2 -> 9 [label="AST:2"];
2 -> 10 [label="AST:2"];
2 -> 11 [label="AST:2"];
2 -> 12 [label="AST:2"];
2 -> 13 [label="AST:2"];
2 -> 14 [label="AST:2"];
2 -> 15 [label="AST:2"];
2 -> 16 [label="AST:2"];
2 -> 17 [label="AST:2"];
2 -> 18 [label="AST:2"];
2 -> 19 [label="AST:2"];
2 -> 20 [label="AST:2"];
2 -> 21 [label="AST:2"];
2 -> 22 [label="AST:2"];
2 -> 23 [label="AST:2"];
2 -> 24 [label="AST:1"];
2 -> 40 [label="AST:1"];
3 -> 2 [label="AST:2"];
25 -> 26 [label="AST:2"];
25 -> 38 [label="AST:1"];
26 -> 36 [label="Action:2"];
27 -> 28 [label="AST:2"];
27 -> 29 [label="AST:2"];
28 -> 29 [label="Control Dep:2"];
30 -> 31 [label="AST:2"];
30 -> 32 [label="AST:1"];
30 -> 37 [label="AST:1"];
30 -> 39 [label="AST:1"];
33 -> 34 [label="Action:2"];
36 -> 35 [label="Action:2"];
}