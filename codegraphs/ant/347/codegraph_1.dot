digraph "getAlgoName#?,String" {
0 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
1 [label="2:CtVirtualElement@getAlgoName" shape=ellipse]
2 [label="2:CtParameterImpl@String classname" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
4 [label="3:CtTypeReferenceImpl@ModifiedSelector" shape=ellipse]
5 [label="3:CtTypeReferenceImpl@ModifiedSelector" shape=ellipse]
6 [label="3:CtConstructorCallImpl@new ModifiedSelector()" shape=ellipse]
7 [label="3:CtVirtualElement@sel" shape=ellipse]
8 [label="3:CtLocalVariableImpl@ModifiedSelector sel = new ModifiedSelector()" shape=ellipse]
9 [label="4:CtExecutableReferenceImpl@addClasspath()" shape=ellipse]
10 [label="4:CtVirtualElement@addClasspath" shape=ellipse]
11 [label="4:CtVariableReadImpl@sel" shape=ellipse]
12 [label="4:CtFieldReadImpl@testclasses" shape=ellipse]
13 [label="4:CtInvocationImpl@sel.addClasspath(testclasses)" shape=ellipse]
14 [label="5:CtExecutableReferenceImpl@setAlgorithmClass(java.lang.String)" shape=ellipse]
15 [label="5:CtVirtualElement@setAlgorithmClass" shape=ellipse]
16 [label="5:CtVariableReadImpl@sel" shape=ellipse]
17 [label="5:CtVariableReadImpl@classname" shape=ellipse]
18 [label="5:CtInvocationImpl@sel.setAlgorithmClass(classname)" shape=ellipse]
19 [label="6:CtExecutableReferenceImpl@validate()" shape=ellipse]
20 [label="6:CtVirtualElement@validate" shape=ellipse]
21 [label="6:CtVariableReadImpl@sel" shape=ellipse]
22 [label="6:CtInvocationImpl@sel.validate()" shape=ellipse]
23 [label="7:CtTypeReferenceImpl@String" shape=ellipse]
24 [label="7:CtExecutableReferenceImpl@toString()" shape=ellipse]
25 [label="7:CtVirtualElement@toString" shape=ellipse]
26 [label="7:CtVariableReadImpl@sel" shape=ellipse]
27 [label="7:CtInvocationImpl@sel.toString()" shape=ellipse]
28 [label="7:CtVirtualElement@s1" shape=ellipse]
29 [label="7:CtLocalVariableImpl@String s1 = sel.toString()" shape=ellipse]
30 [label="8:CtTypeReferenceImpl@int" shape=ellipse]
31 [label="8:CtExecutableReferenceImpl@indexOf(java.lang.String)" shape=ellipse]
32 [label="8:CtVirtualElement@indexOf" shape=ellipse]
33 [label="8:CtVariableReadImpl@s1" shape=ellipse]
34 [label="8:CtLiteralImpl@\"algorithm=\"" shape=ellipse]
35 [label="8:CtInvocationImpl@s1.indexOf(\"algorithm=\")" shape=ellipse]
36 [label="8:CtLiteralImpl@10" shape=ellipse]
37 [label="8:CtBinaryOperatorImpl@s1.indexOf(\"algorithm=\") + 10" shape=ellipse]
38 [label="8:CtVirtualElement@posStart" shape=ellipse]
39 [label="8:CtLocalVariableImpl@int posStart = s1.indexOf(\"algorithm=\") + 10" shape=ellipse]
40 [label="9:CtTypeReferenceImpl@int" shape=ellipse]
41 [label="9:CtExecutableReferenceImpl@indexOf(java.lang.String)" shape=ellipse]
42 [label="9:CtVirtualElement@indexOf" shape=ellipse]
43 [label="9:CtVariableReadImpl@s1" shape=ellipse]
44 [label="9:CtLiteralImpl@\" comparator=\"" shape=ellipse]
45 [label="9:CtInvocationImpl@s1.indexOf(\" comparator=\")" shape=ellipse]
46 [label="9:CtVirtualElement@posEnd" shape=ellipse]
47 [label="9:CtLocalVariableImpl@int posEnd = s1.indexOf(\" comparator=\")" shape=ellipse]
48 [label="10:CtTypeReferenceImpl@String" shape=ellipse]
49 [label="10:CtExecutableReferenceImpl@substring(int,int)" shape=ellipse]
50 [label="10:CtVirtualElement@substring" shape=ellipse]
51 [label="10:CtVariableReadImpl@s1" shape=ellipse]
52 [label="10:CtVariableReadImpl@posStart" shape=ellipse]
53 [label="10:CtVariableReadImpl@posEnd" shape=ellipse]
54 [label="10:CtInvocationImpl@s1.substring(posStart, posEnd)" shape=ellipse]
55 [label="10:CtVirtualElement@algo" shape=ellipse]
56 [label="10:CtLocalVariableImpl@String algo = s1.substring(posStart, posEnd)" shape=ellipse]
57 [label="11:CtExecutableReferenceImpl@startsWith(java.lang.String)" shape=ellipse]
58 [label="11:CtVirtualElement@startsWith" shape=ellipse]
59 [label="11:CtVariableReadImpl@algo" shape=ellipse]
60 [label="11:CtLiteralImpl@\"<\"" shape=ellipse]
61 [label="11:CtInvocationImpl@algo.startsWith(\"<\")" shape=ellipse]
62 [label="12:CtVariableWriteImpl@algo" shape=ellipse]
63 [label="12:CtExecutableReferenceImpl@substring(int)" shape=ellipse]
64 [label="12:CtVirtualElement@substring" shape=ellipse]
65 [label="12:CtVariableReadImpl@algo" shape=ellipse]
66 [label="12:CtLiteralImpl@1" shape=ellipse]
67 [label="12:CtInvocationImpl@algo.substring(1)" shape=ellipse]
68 [label="12:CtAssignmentImpl@algo = algo.substring(1)" shape=ellipse]
69 [label="11:CtBlockImpl@\{
    algo = algo.substring(1);
\}" shape=ellipse]
70 [label="11:CtIfImpl@if (algo.startsWith(\"<\")) \{
    algo = algo.substring(1);
\}" shape=ellipse]
71 [label="14:CtExecutableReferenceImpl@endsWith(java.lang.String)" shape=ellipse]
72 [label="14:CtVirtualElement@endsWith" shape=ellipse]
73 [label="14:CtVariableReadImpl@algo" shape=ellipse]
74 [label="14:CtLiteralImpl@\">\"" shape=ellipse]
75 [label="14:CtInvocationImpl@algo.endsWith(\">\")" shape=ellipse]
76 [label="15:CtVariableWriteImpl@algo" shape=ellipse]
77 [label="15:CtExecutableReferenceImpl@substring(int,int)" shape=ellipse]
78 [label="15:CtVirtualElement@substring" shape=ellipse]
79 [label="15:CtVariableReadImpl@algo" shape=ellipse]
80 [label="15:CtLiteralImpl@0" shape=ellipse]
81 [label="15:CtExecutableReferenceImpl@length()" shape=ellipse]
82 [label="15:CtVirtualElement@length" shape=ellipse]
83 [label="15:CtVariableReadImpl@algo" shape=ellipse]
84 [label="15:CtInvocationImpl@algo.length()" shape=ellipse]
85 [label="15:CtLiteralImpl@1" shape=ellipse]
86 [label="15:CtBinaryOperatorImpl@algo.length() - 1" shape=ellipse]
87 [label="15:CtInvocationImpl@algo.substring(0, algo.length() - 1)" shape=ellipse]
88 [label="15:CtAssignmentImpl@algo = algo.substring(0, algo.length() - 1)" shape=ellipse]
89 [label="14:CtBlockImpl@\{
    algo = algo.substring(0, algo.length() - 1);
\}" shape=ellipse]
90 [label="14:CtIfImpl@if (algo.endsWith(\">\")) \{
    algo = algo.substring(0, algo.length() - 1);
\}" shape=ellipse]
91 [label="17:CtVariableReadImpl@algo" shape=ellipse]
92 [label="17:CtReturnImpl@return algo" shape=ellipse]
93 [label="2:CtBlockImpl@\{
    ModifiedSelector sel = new ModifiedSelector();
    sel.addClasspath(testclasses);
    sel.setAlgorithmClass(classname);
    sel.validate();
    String s1 = sel.toString();
    int posStart = s1.indexOf(\"algorithm=\") + 10;
    int posEnd = s1.indexOf(\" comparator=\");
    String algo = s1.substring(posStart, posEnd);
    if (algo.startsWith(\"<\")) \{
        algo = algo.substring(1);
    \}
    if (algo.endsWith(\">\")) \{
        algo = algo.substring(0, algo.length() - 1);
    \}
    return algo;
\}" shape=ellipse]
94 [label="2:CtMethodImpl@private String getAlgoName(String classname) \{
    ModifiedSelector sel = new ModifiedSelector();
    sel.addClasspath(testclasses);
    sel.setAlgorithmClass(classname);
    sel.validate();
    String s1 = sel.toString();
    int posStart = s1.indexOf(\"algorithm=\") + 10;
    int posEnd = s1.indexOf(\" comparator=\");
    String algo = s1.substring(posStart, posEnd);
    if (algo.startsWith(\"<\")) \{
        algo = algo.substring(1);
    \}
    if (algo.endsWith(\">\")) \{
        algo = algo.substring(0, algo.length() - 1);
    \}
    return algo;
\}" shape=ellipse]
95 [label="4:Insert@INSERT" shape=ellipse]
96 [label="4:CtInvocationImpl@sel.setProject(getProject())" shape=ellipse]
2 -> 3 [label="AST"];
7 -> 11 [label="Define-Use"];
7 -> 16 [label="Define-Use"];
7 -> 21 [label="Define-Use"];
7 -> 26 [label="Define-Use"];
8 -> 7 [label="AST"];
8 -> 4 [label="AST"];
8 -> 6 [label="AST"];
13 -> 10 [label="AST"];
13 -> 11 [label="AST"];
13 -> 9 [label="AST"];
13 -> 12 [label="AST"];
18 -> 15 [label="AST"];
18 -> 16 [label="AST"];
18 -> 14 [label="AST"];
18 -> 17 [label="AST"];
22 -> 20 [label="AST"];
22 -> 21 [label="AST"];
22 -> 19 [label="AST"];
26 -> 28 [label="Data Dep"];
27 -> 25 [label="AST"];
27 -> 26 [label="AST"];
27 -> 24 [label="AST"];
28 -> 33 [label="Define-Use"];
28 -> 43 [label="Define-Use"];
28 -> 51 [label="Define-Use"];
29 -> 28 [label="AST"];
29 -> 23 [label="AST"];
29 -> 27 [label="AST"];
33 -> 38 [label="Data Dep"];
35 -> 32 [label="AST"];
35 -> 33 [label="AST"];
35 -> 31 [label="AST"];
35 -> 34 [label="AST"];
37 -> 35 [label="AST"];
37 -> 36 [label="AST"];
38 -> 52 [label="Define-Use"];
39 -> 38 [label="AST"];
39 -> 30 [label="AST"];
39 -> 37 [label="AST"];
43 -> 46 [label="Data Dep"];
45 -> 42 [label="AST"];
45 -> 43 [label="AST"];
45 -> 41 [label="AST"];
45 -> 44 [label="AST"];
46 -> 53 [label="Define-Use"];
47 -> 46 [label="AST"];
47 -> 40 [label="AST"];
47 -> 45 [label="AST"];
51 -> 55 [label="Data Dep"];
52 -> 55 [label="Data Dep"];
53 -> 55 [label="Data Dep"];
54 -> 50 [label="AST"];
54 -> 51 [label="AST"];
54 -> 49 [label="AST"];
54 -> 52 [label="AST"];
54 -> 53 [label="AST"];
55 -> 59 [label="Define-Use"];
55 -> 65 [label="Define-Use"];
55 -> 73 [label="Define-Use"];
55 -> 79 [label="Define-Use"];
55 -> 83 [label="Define-Use"];
55 -> 91 [label="Define-Use"];
56 -> 55 [label="AST"];
56 -> 48 [label="AST"];
56 -> 54 [label="AST"];
61 -> 58 [label="AST"];
61 -> 59 [label="AST"];
61 -> 57 [label="AST"];
61 -> 60 [label="AST"];
61 -> 69 [label="Control Dep"];
61 -> 68 [label="Control Dep"];
61 -> 62 [label="Control Dep"];
61 -> 67 [label="Control Dep"];
61 -> 63 [label="Control Dep"];
61 -> 65 [label="Control Dep"];
61 -> 66 [label="Control Dep"];
62 -> 73 [label="Define-Use"];
62 -> 79 [label="Define-Use"];
62 -> 83 [label="Define-Use"];
62 -> 91 [label="Define-Use"];
65 -> 62 [label="Data Dep"];
67 -> 64 [label="AST"];
67 -> 65 [label="AST"];
67 -> 63 [label="AST"];
67 -> 66 [label="AST"];
68 -> 62 [label="AST"];
68 -> 67 [label="AST"];
69 -> 68 [label="AST"];
70 -> 61 [label="AST"];
70 -> 69 [label="AST"];
75 -> 72 [label="AST"];
75 -> 73 [label="AST"];
75 -> 71 [label="AST"];
75 -> 74 [label="AST"];
75 -> 89 [label="Control Dep"];
75 -> 88 [label="Control Dep"];
75 -> 76 [label="Control Dep"];
75 -> 87 [label="Control Dep"];
75 -> 77 [label="Control Dep"];
75 -> 79 [label="Control Dep"];
75 -> 80 [label="Control Dep"];
75 -> 86 [label="Control Dep"];
75 -> 84 [label="Control Dep"];
75 -> 81 [label="Control Dep"];
75 -> 83 [label="Control Dep"];
75 -> 85 [label="Control Dep"];
76 -> 91 [label="Define-Use"];
79 -> 76 [label="Data Dep"];
83 -> 76 [label="Data Dep"];
84 -> 82 [label="AST"];
84 -> 83 [label="AST"];
84 -> 81 [label="AST"];
86 -> 84 [label="AST"];
86 -> 85 [label="AST"];
87 -> 78 [label="AST"];
87 -> 79 [label="AST"];
87 -> 77 [label="AST"];
87 -> 80 [label="AST"];
87 -> 86 [label="AST"];
88 -> 76 [label="AST"];
88 -> 87 [label="AST"];
89 -> 88 [label="AST"];
90 -> 75 [label="AST"];
90 -> 89 [label="AST"];
92 -> 91 [label="AST"];
93 -> 8 [label="AST"];
93 -> 13 [label="AST"];
93 -> 18 [label="AST"];
93 -> 22 [label="AST"];
93 -> 29 [label="AST"];
93 -> 39 [label="AST"];
93 -> 47 [label="AST"];
93 -> 56 [label="AST"];
93 -> 70 [label="AST"];
93 -> 90 [label="AST"];
93 -> 92 [label="AST"];
94 -> 1 [label="AST"];
94 -> 0 [label="AST"];
94 -> 2 [label="AST"];
94 -> 93 [label="AST"];
94 -> 95 [label="Action"];
95 -> 96 [label="Action"];
}