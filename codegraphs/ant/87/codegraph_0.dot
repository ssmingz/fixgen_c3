digraph "getOptions#?" {
0 [label="2:CtTypeReferenceImpl@ArrayList" shape=ellipse]
1 [label="2:CtVirtualElement@getOptions" shape=ellipse]
2 [label="2:CtTypeReferenceImpl@TaskException" shape=ellipse]
3 [label="3:CtTypeReferenceImpl@ArrayList" shape=ellipse]
4 [label="3:CtTypeReferenceImpl@ArrayList" shape=ellipse]
5 [label="3:CtLiteralImpl@512" shape=ellipse]
6 [label="3:CtConstructorCallImpl@new ArrayList(512)" shape=ellipse]
7 [label="3:CtVirtualElement@options" shape=ellipse]
8 [label="3:CtLocalVariableImpl@ArrayList options = new ArrayList(512)" shape=ellipse]
9 [label="4:CtTypeReferenceImpl@Path" shape=ellipse]
10 [label="4:CtTypeReferenceImpl@Path" shape=ellipse]
11 [label="4:CtConstructorCallImpl@new Path()" shape=ellipse]
12 [label="4:CtVirtualElement@classpath" shape=ellipse]
13 [label="4:CtLocalVariableImpl@final Path classpath = new Path()" shape=ellipse]
14 [label="5:CtExecutableReferenceImpl@add()" shape=ellipse]
15 [label="5:CtVirtualElement@add" shape=ellipse]
16 [label="5:CtVariableReadImpl@classpath" shape=ellipse]
17 [label="5:CtExecutableReferenceImpl@getSourcePath()" shape=ellipse]
18 [label="5:CtVirtualElement@getSourcePath" shape=ellipse]
19 [label="5:CtInvocationImpl@getSourcePath()" shape=ellipse]
20 [label="5:CtInvocationImpl@classpath.add(getSourcePath())" shape=ellipse]
21 [label="6:CtExecutableReferenceImpl@add()" shape=ellipse]
22 [label="6:CtVirtualElement@add" shape=ellipse]
23 [label="6:CtVariableReadImpl@classpath" shape=ellipse]
24 [label="6:CtExecutableReferenceImpl@getClassPath()" shape=ellipse]
25 [label="6:CtVirtualElement@getClassPath" shape=ellipse]
26 [label="6:CtInvocationImpl@getClassPath()" shape=ellipse]
27 [label="6:CtInvocationImpl@classpath.add(getClassPath())" shape=ellipse]
28 [label="7:CtTypeReferenceImpl@String" shape=ellipse]
29 [label="7:CtExecutableReferenceImpl@formatPath(Path)" shape=ellipse]
30 [label="7:CtVirtualElement@formatPath" shape=ellipse]
31 [label="7:CtTypeAccessImpl@PathUtil" shape=ellipse]
32 [label="7:CtVariableReadImpl@classpath" shape=ellipse]
33 [label="7:CtExecutableReferenceImpl@getContext()" shape=ellipse]
34 [label="7:CtVirtualElement@getContext" shape=ellipse]
35 [label="7:CtInvocationImpl@getContext()" shape=ellipse]
36 [label="7:CtInvocationImpl@PathUtil.formatPath(classpath, getContext())" shape=ellipse]
37 [label="7:CtVirtualElement@formattedClasspath" shape=ellipse]
38 [label="7:CtLocalVariableImpl@final String formattedClasspath = PathUtil.formatPath(classpath, getContext())" shape=ellipse]
39 [label="8:CtExecutableReferenceImpl@length()" shape=ellipse]
40 [label="8:CtVirtualElement@length" shape=ellipse]
41 [label="8:CtVariableReadImpl@formattedClasspath" shape=ellipse]
42 [label="8:CtInvocationImpl@formattedClasspath.length()" shape=ellipse]
43 [label="8:CtLiteralImpl@0" shape=ellipse]
44 [label="8:CtBinaryOperatorImpl@formattedClasspath.length() > 0" shape=ellipse]
45 [label="9:CtExecutableReferenceImpl@add(java.lang.String)" shape=ellipse]
46 [label="9:CtVirtualElement@add" shape=ellipse]
47 [label="9:CtVariableReadImpl@options" shape=ellipse]
48 [label="9:CtLiteralImpl@\"-classpath\"" shape=ellipse]
49 [label="9:CtInvocationImpl@options.add(\"-classpath\")" shape=ellipse]
50 [label="10:CtExecutableReferenceImpl@add(java.lang.String)" shape=ellipse]
51 [label="10:CtVirtualElement@add" shape=ellipse]
52 [label="10:CtVariableReadImpl@options" shape=ellipse]
53 [label="10:CtVariableReadImpl@formattedClasspath" shape=ellipse]
54 [label="10:CtInvocationImpl@options.add(formattedClasspath)" shape=ellipse]
55 [label="8:CtBlockImpl@\{
    options.add(\"-classpath\");
    options.add(formattedClasspath);
\}" shape=ellipse]
56 [label="8:CtIfImpl@if (formattedClasspath.length() > 0) \{
    options.add(\"-classpath\");
    options.add(formattedClasspath);
\}" shape=ellipse]
57 [label="12:CtExecutableReferenceImpl@add(java.lang.String)" shape=ellipse]
58 [label="12:CtVirtualElement@add" shape=ellipse]
59 [label="12:CtVariableReadImpl@options" shape=ellipse]
60 [label="12:CtLiteralImpl@\"-output\"" shape=ellipse]
61 [label="12:CtInvocationImpl@options.add(\"-output\")" shape=ellipse]
62 [label="13:CtExecutableReferenceImpl@add()" shape=ellipse]
63 [label="13:CtVirtualElement@add" shape=ellipse]
64 [label="13:CtVariableReadImpl@options" shape=ellipse]
65 [label="13:CtExecutableReferenceImpl@toString()" shape=ellipse]
66 [label="13:CtVirtualElement@toString" shape=ellipse]
67 [label="13:CtFieldReadImpl@tmpFile" shape=ellipse]
68 [label="13:CtInvocationImpl@tmpFile.toString()" shape=ellipse]
69 [label="13:CtInvocationImpl@options.add(tmpFile.toString())" shape=ellipse]
70 [label="14:CtExecutableReferenceImpl@add()" shape=ellipse]
71 [label="14:CtVirtualElement@add" shape=ellipse]
72 [label="14:CtVariableReadImpl@options" shape=ellipse]
73 [label="14:CtLiteralImpl@\"-\"" shape=ellipse]
74 [label="14:CtFieldReadImpl@granularity" shape=ellipse]
75 [label="14:CtBinaryOperatorImpl@\"-\" + granularity" shape=ellipse]
76 [label="14:CtInvocationImpl@options.add(\"-\" + granularity)" shape=ellipse]
77 [label="15:CtExecutableReferenceImpl@add(java.lang.String)" shape=ellipse]
78 [label="15:CtVirtualElement@add" shape=ellipse]
79 [label="15:CtVariableReadImpl@options" shape=ellipse]
80 [label="15:CtLiteralImpl@\"-format\"" shape=ellipse]
81 [label="15:CtInvocationImpl@options.add(\"-format\")" shape=ellipse]
82 [label="16:CtExecutableReferenceImpl@add(java.lang.String)" shape=ellipse]
83 [label="16:CtVirtualElement@add" shape=ellipse]
84 [label="16:CtVariableReadImpl@options" shape=ellipse]
85 [label="16:CtLiteralImpl@\"tab\"" shape=ellipse]
86 [label="16:CtInvocationImpl@options.add(\"tab\")" shape=ellipse]
87 [label="17:CtExecutableReferenceImpl@add(java.lang.String)" shape=ellipse]
88 [label="17:CtVirtualElement@add" shape=ellipse]
89 [label="17:CtVariableReadImpl@options" shape=ellipse]
90 [label="17:CtLiteralImpl@\"-i\"" shape=ellipse]
91 [label="17:CtInvocationImpl@options.add(\"-i\")" shape=ellipse]
92 [label="18:CtExecutableReferenceImpl@add(java.lang.String)" shape=ellipse]
93 [label="18:CtVirtualElement@add" shape=ellipse]
94 [label="18:CtVariableReadImpl@options" shape=ellipse]
95 [label="18:CtLiteralImpl@\"/\"" shape=ellipse]
96 [label="18:CtInvocationImpl@options.add(\"/\")" shape=ellipse]
97 [label="19:CtVirtualElement@String[]" shape=ellipse]
98 [label="19:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
99 [label="19:CtExecutableReferenceImpl@listFiles()" shape=ellipse]
100 [label="19:CtVirtualElement@listFiles" shape=ellipse]
101 [label="19:CtFieldReadImpl@path" shape=ellipse]
102 [label="19:CtExecutableReferenceImpl@getContext()" shape=ellipse]
103 [label="19:CtVirtualElement@getContext" shape=ellipse]
104 [label="19:CtInvocationImpl@getContext()" shape=ellipse]
105 [label="19:CtInvocationImpl@path.listFiles(getContext())" shape=ellipse]
106 [label="19:CtVirtualElement@dirs" shape=ellipse]
107 [label="19:CtLocalVariableImpl@final String[] dirs = path.listFiles(getContext())" shape=ellipse]
108 [label="20:CtTypeReferenceImpl@int" shape=ellipse]
109 [label="20:CtLiteralImpl@0" shape=ellipse]
110 [label="20:CtVirtualElement@i" shape=ellipse]
111 [label="20:CtLocalVariableImpl@int i = 0" shape=ellipse]
112 [label="20:CtVariableReadImpl@i" shape=ellipse]
113 [label="20:CtVariableReadImpl@dirs" shape=ellipse]
114 [label="20:CtLocalVariableReferenceImpl@dirs" shape=ellipse]
115 [label="20:CtFieldReadImpl@dirs.length" shape=ellipse]
116 [label="20:CtBinaryOperatorImpl@i < dirs.length" shape=ellipse]
117 [label="20:CtVariableWriteImpl@i" shape=ellipse]
118 [label="20:CtUnaryOperatorImpl@i++" shape=ellipse]
119 [label="21:CtExecutableReferenceImpl@add(java.lang.String)" shape=ellipse]
120 [label="21:CtVirtualElement@add" shape=ellipse]
121 [label="21:CtVariableReadImpl@options" shape=ellipse]
122 [label="21:CtVariableReadImpl@dirs" shape=ellipse]
123 [label="21:CtVariableReadImpl@i" shape=ellipse]
124 [label="21:CtArrayReadImpl@dirs[i]" shape=ellipse]
125 [label="21:CtInvocationImpl@options.add(dirs[i])" shape=ellipse]
126 [label="20:CtBlockImpl@\{
    options.add(dirs[i]);
\}" shape=ellipse]
127 [label="20:CtForImpl@for (int i = 0; i < dirs.length; i++) \{
    options.add(dirs[i]);
\}" shape=ellipse]
128 [label="23:CtExecutableReferenceImpl@addAllArrayList(<unknown>,<unknown>)" shape=ellipse]
129 [label="23:CtVirtualElement@addAllArrayList" shape=ellipse]
130 [label="23:CtVariableReadImpl@options" shape=ellipse]
131 [label="23:CtExecutableReferenceImpl@iterator()" shape=ellipse]
132 [label="23:CtVirtualElement@iterator" shape=ellipse]
133 [label="23:CtExecutableReferenceImpl@keySet()" shape=ellipse]
134 [label="23:CtVirtualElement@keySet" shape=ellipse]
135 [label="23:CtExecutableReferenceImpl@getIncludedFiles()" shape=ellipse]
136 [label="23:CtVirtualElement@getIncludedFiles" shape=ellipse]
137 [label="23:CtInvocationImpl@getIncludedFiles()" shape=ellipse]
138 [label="23:CtInvocationImpl@getIncludedFiles().keySet()" shape=ellipse]
139 [label="23:CtInvocationImpl@getIncludedFiles().keySet().iterator()" shape=ellipse]
140 [label="23:CtInvocationImpl@addAllArrayList(options, getIncludedFiles().keySet().iterator())" shape=ellipse]
141 [label="24:CtVariableReadImpl@options" shape=ellipse]
142 [label="24:CtReturnImpl@return options" shape=ellipse]
143 [label="2:CtBlockImpl@\{
    ArrayList options = new ArrayList(512);
    final Path classpath = new Path();
    classpath.add(getSourcePath());
    classpath.add(getClassPath());
    final String formattedClasspath = PathUtil.formatPath(classpath, getContext());
    if (formattedClasspath.length() > 0) \{
        options.add(\"-classpath\");
        options.add(formattedClasspath);
    \}
    options.add(\"-output\");
    options.add(tmpFile.toString());
    options.add(\"-\" + granularity);
    options.add(\"-format\");
    options.add(\"tab\");
    options.add(\"-i\");
    options.add(\"/\");
    final String[] dirs = path.listFiles(getContext());
    for (int i = 0; i < dirs.length; i++) \{
        options.add(dirs[i]);
    \}
    addAllArrayList(options, getIncludedFiles().keySet().iterator());
    return options;
\}" shape=ellipse]
144 [label="2:CtMethodImpl@protected ArrayList getOptions() throws TaskException \{
    ArrayList options = new ArrayList(512);
    final Path classpath = new Path();
    classpath.add(getSourcePath());
    classpath.add(getClassPath());
    final String formattedClasspath = PathUtil.formatPath(classpath, getContext());
    if (formattedClasspath.length() > 0) \{
        options.add(\"-classpath\");
        options.add(formattedClasspath);
    \}
    options.add(\"-output\");
    options.add(tmpFile.toString());
    options.add(\"-\" + granularity);
    options.add(\"-format\");
    options.add(\"tab\");
    options.add(\"-i\");
    options.add(\"/\");
    final String[] dirs = path.listFiles(getContext());
    for (int i = 0; i < dirs.length; i++) \{
        options.add(dirs[i]);
    \}
    addAllArrayList(options, getIncludedFiles().keySet().iterator());
    return options;
\}" shape=ellipse]
145 [label="7:Update@UPDATE" shape=ellipse]
146 [label="7:CtTypeAccessImpl@FileListUtil" shape=ellipse]
6 -> 5 [label="AST"];
7 -> 47 [label="Define-Use"];
7 -> 52 [label="Define-Use"];
7 -> 59 [label="Define-Use"];
7 -> 64 [label="Define-Use"];
7 -> 72 [label="Define-Use"];
7 -> 79 [label="Define-Use"];
7 -> 84 [label="Define-Use"];
7 -> 89 [label="Define-Use"];
7 -> 94 [label="Define-Use"];
7 -> 121 [label="Define-Use"];
7 -> 130 [label="Define-Use"];
7 -> 141 [label="Define-Use"];
8 -> 7 [label="AST"];
8 -> 3 [label="AST"];
8 -> 6 [label="AST"];
12 -> 16 [label="Define-Use"];
12 -> 23 [label="Define-Use"];
12 -> 32 [label="Define-Use"];
13 -> 12 [label="AST"];
13 -> 9 [label="AST"];
13 -> 11 [label="AST"];
19 -> 18 [label="AST"];
19 -> 17 [label="AST"];
20 -> 15 [label="AST"];
20 -> 16 [label="AST"];
20 -> 14 [label="AST"];
20 -> 19 [label="AST"];
26 -> 25 [label="AST"];
26 -> 24 [label="AST"];
27 -> 22 [label="AST"];
27 -> 23 [label="AST"];
27 -> 21 [label="AST"];
27 -> 26 [label="AST"];
31 -> 145 [label="Action"];
32 -> 37 [label="Data Dep"];
35 -> 34 [label="AST"];
35 -> 33 [label="AST"];
36 -> 30 [label="AST"];
36 -> 31 [label="AST"];
36 -> 29 [label="AST"];
36 -> 32 [label="AST"];
36 -> 35 [label="AST"];
37 -> 41 [label="Define-Use"];
37 -> 53 [label="Define-Use"];
38 -> 37 [label="AST"];
38 -> 28 [label="AST"];
38 -> 36 [label="AST"];
42 -> 40 [label="AST"];
42 -> 41 [label="AST"];
42 -> 39 [label="AST"];
44 -> 42 [label="AST"];
44 -> 43 [label="AST"];
44 -> 55 [label="Control Dep"];
44 -> 49 [label="Control Dep"];
44 -> 45 [label="Control Dep"];
44 -> 47 [label="Control Dep"];
44 -> 48 [label="Control Dep"];
44 -> 54 [label="Control Dep"];
44 -> 50 [label="Control Dep"];
44 -> 52 [label="Control Dep"];
44 -> 53 [label="Control Dep"];
49 -> 46 [label="AST"];
49 -> 47 [label="AST"];
49 -> 45 [label="AST"];
49 -> 48 [label="AST"];
54 -> 51 [label="AST"];
54 -> 52 [label="AST"];
54 -> 50 [label="AST"];
54 -> 53 [label="AST"];
55 -> 49 [label="AST"];
55 -> 54 [label="AST"];
56 -> 44 [label="AST"];
56 -> 55 [label="AST"];
61 -> 58 [label="AST"];
61 -> 59 [label="AST"];
61 -> 57 [label="AST"];
61 -> 60 [label="AST"];
68 -> 66 [label="AST"];
68 -> 67 [label="AST"];
68 -> 65 [label="AST"];
69 -> 63 [label="AST"];
69 -> 64 [label="AST"];
69 -> 62 [label="AST"];
69 -> 68 [label="AST"];
75 -> 73 [label="AST"];
75 -> 74 [label="AST"];
76 -> 71 [label="AST"];
76 -> 72 [label="AST"];
76 -> 70 [label="AST"];
76 -> 75 [label="AST"];
81 -> 78 [label="AST"];
81 -> 79 [label="AST"];
81 -> 77 [label="AST"];
81 -> 80 [label="AST"];
86 -> 83 [label="AST"];
86 -> 84 [label="AST"];
86 -> 82 [label="AST"];
86 -> 85 [label="AST"];
91 -> 88 [label="AST"];
91 -> 89 [label="AST"];
91 -> 87 [label="AST"];
91 -> 90 [label="AST"];
96 -> 93 [label="AST"];
96 -> 94 [label="AST"];
96 -> 92 [label="AST"];
96 -> 95 [label="AST"];
98 -> 97 [label="AST"];
101 -> 106 [label="Data Dep"];
104 -> 103 [label="AST"];
104 -> 102 [label="AST"];
105 -> 100 [label="AST"];
105 -> 101 [label="AST"];
105 -> 99 [label="AST"];
105 -> 104 [label="AST"];
106 -> 113 [label="Define-Use"];
106 -> 122 [label="Define-Use"];
106 -> 124 [label="Define-Use"];
107 -> 106 [label="AST"];
107 -> 98 [label="AST"];
107 -> 105 [label="AST"];
110 -> 112 [label="Define-Use"];
111 -> 110 [label="AST"];
111 -> 108 [label="AST"];
111 -> 109 [label="AST"];
113 -> 114 [label="AST"];
115 -> 113 [label="AST"];
116 -> 112 [label="AST"];
116 -> 115 [label="AST"];
116 -> 126 [label="Control Dep"];
116 -> 125 [label="Control Dep"];
116 -> 119 [label="Control Dep"];
116 -> 121 [label="Control Dep"];
116 -> 124 [label="Control Dep"];
116 -> 122 [label="Control Dep"];
116 -> 123 [label="Control Dep"];
117 -> 123 [label="Define-Use"];
118 -> 117 [label="AST"];
124 -> 122 [label="AST"];
124 -> 123 [label="AST"];
125 -> 120 [label="AST"];
125 -> 121 [label="AST"];
125 -> 119 [label="AST"];
125 -> 124 [label="AST"];
126 -> 125 [label="AST"];
127 -> 111 [label="AST"];
127 -> 116 [label="AST"];
127 -> 118 [label="AST"];
127 -> 126 [label="AST"];
137 -> 136 [label="AST"];
137 -> 135 [label="AST"];
138 -> 134 [label="AST"];
138 -> 137 [label="AST"];
138 -> 133 [label="AST"];
139 -> 132 [label="AST"];
139 -> 138 [label="AST"];
139 -> 131 [label="AST"];
140 -> 129 [label="AST"];
140 -> 128 [label="AST"];
140 -> 130 [label="AST"];
140 -> 139 [label="AST"];
142 -> 141 [label="AST"];
143 -> 8 [label="AST"];
143 -> 13 [label="AST"];
143 -> 20 [label="AST"];
143 -> 27 [label="AST"];
143 -> 38 [label="AST"];
143 -> 56 [label="AST"];
143 -> 61 [label="AST"];
143 -> 69 [label="AST"];
143 -> 76 [label="AST"];
143 -> 81 [label="AST"];
143 -> 86 [label="AST"];
143 -> 91 [label="AST"];
143 -> 96 [label="AST"];
143 -> 107 [label="AST"];
143 -> 127 [label="AST"];
143 -> 140 [label="AST"];
143 -> 142 [label="AST"];
144 -> 1 [label="AST"];
144 -> 0 [label="AST"];
144 -> 2 [label="AST"];
144 -> 143 [label="AST"];
145 -> 146 [label="Action"];
}