digraph "writeCachedDependencies#?,Hashtable" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@writeCachedDependencies" shape=ellipse]
2 [label="2:CtParameterImpl@Hashtable dependencyMap" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@Hashtable" shape=ellipse]
4 [label="2:CtTypeReferenceImpl@IOException" shape=ellipse]
5 [label="3:CtFieldReadImpl@cache" shape=ellipse]
6 [label="3:CtLiteralImpl@null" shape=ellipse]
7 [label="3:CtBinaryOperatorImpl@cache != null" shape=ellipse]
8 [label="4:CtTypeReferenceImpl@PrintWriter" shape=ellipse]
9 [label="4:CtLiteralImpl@null" shape=ellipse]
10 [label="4:CtVirtualElement@pw" shape=ellipse]
11 [label="4:CtLocalVariableImpl@PrintWriter pw = null" shape=ellipse]
12 [label="6:CtExecutableReferenceImpl@mkdirs()" shape=ellipse]
13 [label="6:CtVirtualElement@mkdirs" shape=ellipse]
14 [label="6:CtFieldReadImpl@cache" shape=ellipse]
15 [label="6:CtInvocationImpl@cache.mkdirs()" shape=ellipse]
16 [label="7:CtTypeReferenceImpl@File" shape=ellipse]
17 [label="7:CtTypeReferenceImpl@File" shape=ellipse]
18 [label="7:CtFieldReadImpl@cache" shape=ellipse]
19 [label="7:CtFieldReadImpl@CACHE_FILE_NAME" shape=ellipse]
20 [label="7:CtConstructorCallImpl@new File(cache, CACHE_FILE_NAME)" shape=ellipse]
21 [label="7:CtVirtualElement@depFile" shape=ellipse]
22 [label="7:CtLocalVariableImpl@File depFile = new File(cache, CACHE_FILE_NAME)" shape=ellipse]
23 [label="8:CtVariableWriteImpl@pw" shape=ellipse]
24 [label="8:CtTypeReferenceImpl@PrintWriter" shape=ellipse]
25 [label="8:CtTypeReferenceImpl@FileWriter" shape=ellipse]
26 [label="8:CtVariableReadImpl@depFile" shape=ellipse]
27 [label="8:CtConstructorCallImpl@new FileWriter(depFile)" shape=ellipse]
28 [label="8:CtConstructorCallImpl@new PrintWriter(new FileWriter(depFile))" shape=ellipse]
29 [label="8:CtAssignmentImpl@pw = new PrintWriter(new FileWriter(depFile))" shape=ellipse]
30 [label="9:CtTypeReferenceImpl@Enumeration" shape=ellipse]
31 [label="9:CtExecutableReferenceImpl@keys()" shape=ellipse]
32 [label="9:CtVirtualElement@keys" shape=ellipse]
33 [label="9:CtVariableReadImpl@dependencyMap" shape=ellipse]
34 [label="9:CtInvocationImpl@dependencyMap.keys()" shape=ellipse]
35 [label="9:CtVirtualElement@e" shape=ellipse]
36 [label="9:CtLocalVariableImpl@Enumeration e = dependencyMap.keys()" shape=ellipse]
37 [label="10:CtExecutableReferenceImpl@hasMoreElements()" shape=ellipse]
38 [label="10:CtVirtualElement@hasMoreElements" shape=ellipse]
39 [label="10:CtVariableReadImpl@e" shape=ellipse]
40 [label="10:CtInvocationImpl@e.hasMoreElements()" shape=ellipse]
41 [label="11:CtTypeReferenceImpl@String" shape=ellipse]
42 [label="11:CtExecutableReferenceImpl@nextElement()" shape=ellipse]
43 [label="11:CtVirtualElement@nextElement" shape=ellipse]
44 [label="11:CtVariableReadImpl@e" shape=ellipse]
45 [label="11:CtInvocationImpl@((String) (e.nextElement()))" shape=ellipse]
46 [label="11:CtTypeReferenceImpl@String" shape=ellipse]
47 [label="11:CtVirtualElement@className" shape=ellipse]
48 [label="11:CtLocalVariableImpl@String className = ((String) (e.nextElement()))" shape=ellipse]
49 [label="12:CtExecutableReferenceImpl@println()" shape=ellipse]
50 [label="12:CtVirtualElement@println" shape=ellipse]
51 [label="12:CtVariableReadImpl@pw" shape=ellipse]
52 [label="12:CtFieldReadImpl@CLASSNAME_PREPEND" shape=ellipse]
53 [label="12:CtVariableReadImpl@className" shape=ellipse]
54 [label="12:CtBinaryOperatorImpl@CLASSNAME_PREPEND + className" shape=ellipse]
55 [label="12:CtInvocationImpl@pw.println(CLASSNAME_PREPEND + className)" shape=ellipse]
56 [label="13:CtTypeReferenceImpl@Vector" shape=ellipse]
57 [label="13:CtExecutableReferenceImpl@get(java.lang.String)" shape=ellipse]
58 [label="13:CtVirtualElement@get" shape=ellipse]
59 [label="13:CtVariableReadImpl@dependencyMap" shape=ellipse]
60 [label="13:CtVariableReadImpl@className" shape=ellipse]
61 [label="13:CtInvocationImpl@((Vector) (dependencyMap.get(className)))" shape=ellipse]
62 [label="13:CtTypeReferenceImpl@Vector" shape=ellipse]
63 [label="13:CtVirtualElement@dependencyList" shape=ellipse]
64 [label="13:CtLocalVariableImpl@Vector dependencyList = ((Vector) (dependencyMap.get(className)))" shape=ellipse]
65 [label="14:CtTypeReferenceImpl@int" shape=ellipse]
66 [label="14:CtExecutableReferenceImpl@size()" shape=ellipse]
67 [label="14:CtVirtualElement@size" shape=ellipse]
68 [label="14:CtVariableReadImpl@dependencyList" shape=ellipse]
69 [label="14:CtInvocationImpl@dependencyList.size()" shape=ellipse]
70 [label="14:CtVirtualElement@size" shape=ellipse]
71 [label="14:CtLocalVariableImpl@int size = dependencyList.size()" shape=ellipse]
72 [label="15:CtTypeReferenceImpl@int" shape=ellipse]
73 [label="15:CtLiteralImpl@0" shape=ellipse]
74 [label="15:CtVirtualElement@x" shape=ellipse]
75 [label="15:CtLocalVariableImpl@int x = 0" shape=ellipse]
76 [label="15:CtVariableReadImpl@x" shape=ellipse]
77 [label="15:CtVariableReadImpl@size" shape=ellipse]
78 [label="15:CtBinaryOperatorImpl@x < size" shape=ellipse]
79 [label="15:CtVariableWriteImpl@x" shape=ellipse]
80 [label="15:CtUnaryOperatorImpl@x++" shape=ellipse]
81 [label="16:CtExecutableReferenceImpl@println()" shape=ellipse]
82 [label="16:CtVirtualElement@println" shape=ellipse]
83 [label="16:CtVariableReadImpl@pw" shape=ellipse]
84 [label="16:CtExecutableReferenceImpl@elementAt(int)" shape=ellipse]
85 [label="16:CtVirtualElement@elementAt" shape=ellipse]
86 [label="16:CtVariableReadImpl@dependencyList" shape=ellipse]
87 [label="16:CtVariableReadImpl@x" shape=ellipse]
88 [label="16:CtInvocationImpl@dependencyList.elementAt(x)" shape=ellipse]
89 [label="16:CtInvocationImpl@pw.println(dependencyList.elementAt(x))" shape=ellipse]
90 [label="15:CtBlockImpl@\{
    pw.println(dependencyList.elementAt(x));
\}" shape=ellipse]
91 [label="15:CtForImpl@for (int x = 0; x < size; x++) \{
    pw.println(dependencyList.elementAt(x));
\}" shape=ellipse]
92 [label="10:CtBlockImpl@\{
    String className = ((String) (e.nextElement()));
    pw.println(CLASSNAME_PREPEND + className);
    Vector dependencyList = ((Vector) (dependencyMap.get(className)));
    int size = dependencyList.size();
    for (int x = 0; x < size; x++) \{
        pw.println(dependencyList.elementAt(x));
    \}
\}" shape=ellipse]
93 [label="10:CtWhileImpl@while (e.hasMoreElements()) \{
    String className = ((String) (e.nextElement()));
    pw.println(CLASSNAME_PREPEND + className);
    Vector dependencyList = ((Vector) (dependencyMap.get(className)));
    int size = dependencyList.size();
    for (int x = 0; x < size; x++) \{
        pw.println(dependencyList.elementAt(x));
    \}
\} " shape=ellipse]
94 [label="5:CtBlockImpl@\{
    cache.mkdirs();
    File depFile = new File(cache, CACHE_FILE_NAME);
    pw = new PrintWriter(new FileWriter(depFile));
    Enumeration e = dependencyMap.keys();
    while (e.hasMoreElements()) \{
        String className = ((String) (e.nextElement()));
        pw.println(CLASSNAME_PREPEND + className);
        Vector dependencyList = ((Vector) (dependencyMap.get(className)));
        int size = dependencyList.size();
        for (int x = 0; x < size; x++) \{
            pw.println(dependencyList.elementAt(x));
        \}
    \} 
\}" shape=ellipse]
95 [label="20:CtVariableReadImpl@pw" shape=ellipse]
96 [label="20:CtLiteralImpl@null" shape=ellipse]
97 [label="20:CtBinaryOperatorImpl@pw != null" shape=ellipse]
98 [label="21:CtExecutableReferenceImpl@close()" shape=ellipse]
99 [label="21:CtVirtualElement@close" shape=ellipse]
100 [label="21:CtVariableReadImpl@pw" shape=ellipse]
101 [label="21:CtInvocationImpl@pw.close()" shape=ellipse]
102 [label="20:CtBlockImpl@\{
    pw.close();
\}" shape=ellipse]
103 [label="20:CtIfImpl@if (pw != null) \{
    pw.close();
\}" shape=ellipse]
104 [label="19:CtBlockImpl@\{
    if (pw != null) \{
        pw.close();
    \}
\}" shape=ellipse]
105 [label="5:CtTryImpl@try \{
    cache.mkdirs();
    File depFile = new File(cache, CACHE_FILE_NAME);
    pw = new PrintWriter(new FileWriter(depFile));
    Enumeration e = dependencyMap.keys();
    while (e.hasMoreElements()) \{
        String className = ((String) (e.nextElement()));
        pw.println(CLASSNAME_PREPEND + className);
        Vector dependencyList = ((Vector) (dependencyMap.get(className)));
        int size = dependencyList.size();
        for (int x = 0; x < size; x++) \{
            pw.println(dependencyList.elementAt(x));
        \}
    \} 
\} finally \{
    if (pw != null) \{
        pw.close();
    \}
\}" shape=ellipse]
106 [label="3:CtBlockImpl@\{
    PrintWriter pw = null;
    try \{
        cache.mkdirs();
        File depFile = new File(cache, CACHE_FILE_NAME);
        pw = new PrintWriter(new FileWriter(depFile));
        Enumeration e = dependencyMap.keys();
        while (e.hasMoreElements()) \{
            String className = ((String) (e.nextElement()));
            pw.println(CLASSNAME_PREPEND + className);
            Vector dependencyList = ((Vector) (dependencyMap.get(className)));
            int size = dependencyList.size();
            for (int x = 0; x < size; x++) \{
                pw.println(dependencyList.elementAt(x));
            \}
        \} 
    \} finally \{
        if (pw != null) \{
            pw.close();
        \}
    \}
\}" shape=ellipse]
107 [label="3:CtIfImpl@if (cache != null) \{
    PrintWriter pw = null;
    try \{
        cache.mkdirs();
        File depFile = new File(cache, CACHE_FILE_NAME);
        pw = new PrintWriter(new FileWriter(depFile));
        Enumeration e = dependencyMap.keys();
        while (e.hasMoreElements()) \{
            String className = ((String) (e.nextElement()));
            pw.println(CLASSNAME_PREPEND + className);
            Vector dependencyList = ((Vector) (dependencyMap.get(className)));
            int size = dependencyList.size();
            for (int x = 0; x < size; x++) \{
                pw.println(dependencyList.elementAt(x));
            \}
        \} 
    \} finally \{
        if (pw != null) \{
            pw.close();
        \}
    \}
\}" shape=ellipse]
108 [label="2:CtBlockImpl@\{
    if (cache != null) \{
        PrintWriter pw = null;
        try \{
            cache.mkdirs();
            File depFile = new File(cache, CACHE_FILE_NAME);
            pw = new PrintWriter(new FileWriter(depFile));
            Enumeration e = dependencyMap.keys();
            while (e.hasMoreElements()) \{
                String className = ((String) (e.nextElement()));
                pw.println(CLASSNAME_PREPEND + className);
                Vector dependencyList = ((Vector) (dependencyMap.get(className)));
                int size = dependencyList.size();
                for (int x = 0; x < size; x++) \{
                    pw.println(dependencyList.elementAt(x));
                \}
            \} 
        \} finally \{
            if (pw != null) \{
                pw.close();
            \}
        \}
    \}
\}" shape=ellipse]
109 [label="2:CtMethodImpl@private void writeCachedDependencies(Hashtable dependencyMap) throws IOException \{
    if (cache != null) \{
        PrintWriter pw = null;
        try \{
            cache.mkdirs();
            File depFile = new File(cache, CACHE_FILE_NAME);
            pw = new PrintWriter(new FileWriter(depFile));
            Enumeration e = dependencyMap.keys();
            while (e.hasMoreElements()) \{
                String className = ((String) (e.nextElement()));
                pw.println(CLASSNAME_PREPEND + className);
                Vector dependencyList = ((Vector) (dependencyMap.get(className)));
                int size = dependencyList.size();
                for (int x = 0; x < size; x++) \{
                    pw.println(dependencyList.elementAt(x));
                \}
            \} 
        \} finally \{
            if (pw != null) \{
                pw.close();
            \}
        \}
    \}
\}" shape=ellipse]
110 [label="20:Delete@DELETE" shape=ellipse]
111 [label="20:Insert@INSERT" shape=ellipse]
112 [label="20:CtTypeAccessImpl@FileUtils" shape=ellipse]
113 [label="21:Move@MOVE" shape=ellipse]
2 -> 3 [label="AST"];
7 -> 5 [label="AST"];
7 -> 6 [label="AST"];
7 -> 106 [label="Control Dep"];
7 -> 11 [label="Control Dep"];
7 -> 9 [label="Control Dep"];
7 -> 105 [label="Control Dep"];
7 -> 94 [label="Control Dep"];
7 -> 15 [label="Control Dep"];
7 -> 12 [label="Control Dep"];
7 -> 14 [label="Control Dep"];
7 -> 22 [label="Control Dep"];
7 -> 20 [label="Control Dep"];
7 -> 18 [label="Control Dep"];
7 -> 19 [label="Control Dep"];
7 -> 29 [label="Control Dep"];
7 -> 23 [label="Control Dep"];
7 -> 28 [label="Control Dep"];
7 -> 27 [label="Control Dep"];
7 -> 26 [label="Control Dep"];
7 -> 36 [label="Control Dep"];
7 -> 34 [label="Control Dep"];
7 -> 31 [label="Control Dep"];
7 -> 33 [label="Control Dep"];
7 -> 93 [label="Control Dep"];
7 -> 40 [label="Control Dep"];
7 -> 37 [label="Control Dep"];
7 -> 39 [label="Control Dep"];
7 -> 104 [label="Control Dep"];
7 -> 103 [label="Control Dep"];
7 -> 97 [label="Control Dep"];
7 -> 95 [label="Control Dep"];
7 -> 96 [label="Control Dep"];
11 -> 10 [label="AST"];
11 -> 8 [label="AST"];
11 -> 9 [label="AST"];
15 -> 13 [label="AST"];
15 -> 14 [label="AST"];
15 -> 12 [label="AST"];
18 -> 21 [label="Data Dep"];
19 -> 21 [label="Data Dep"];
20 -> 18 [label="AST"];
20 -> 19 [label="AST"];
21 -> 26 [label="Define-Use"];
22 -> 21 [label="AST"];
22 -> 16 [label="AST"];
22 -> 20 [label="AST"];
23 -> 51 [label="Define-Use"];
23 -> 83 [label="Define-Use"];
23 -> 95 [label="Define-Use"];
23 -> 100 [label="Define-Use"];
26 -> 23 [label="Data Dep"];
27 -> 26 [label="AST"];
28 -> 27 [label="AST"];
29 -> 23 [label="AST"];
29 -> 28 [label="AST"];
33 -> 35 [label="Data Dep"];
34 -> 32 [label="AST"];
34 -> 33 [label="AST"];
34 -> 31 [label="AST"];
35 -> 39 [label="Define-Use"];
35 -> 44 [label="Define-Use"];
36 -> 35 [label="AST"];
36 -> 30 [label="AST"];
36 -> 34 [label="AST"];
40 -> 38 [label="AST"];
40 -> 39 [label="AST"];
40 -> 37 [label="AST"];
40 -> 92 [label="Control Dep"];
40 -> 48 [label="Control Dep"];
40 -> 45 [label="Control Dep"];
40 -> 42 [label="Control Dep"];
40 -> 44 [label="Control Dep"];
40 -> 55 [label="Control Dep"];
40 -> 49 [label="Control Dep"];
40 -> 51 [label="Control Dep"];
40 -> 54 [label="Control Dep"];
40 -> 52 [label="Control Dep"];
40 -> 53 [label="Control Dep"];
40 -> 64 [label="Control Dep"];
40 -> 61 [label="Control Dep"];
40 -> 57 [label="Control Dep"];
40 -> 59 [label="Control Dep"];
40 -> 60 [label="Control Dep"];
40 -> 71 [label="Control Dep"];
40 -> 69 [label="Control Dep"];
40 -> 66 [label="Control Dep"];
40 -> 68 [label="Control Dep"];
40 -> 91 [label="Control Dep"];
40 -> 75 [label="Control Dep"];
40 -> 73 [label="Control Dep"];
40 -> 78 [label="Control Dep"];
40 -> 76 [label="Control Dep"];
40 -> 77 [label="Control Dep"];
40 -> 80 [label="Control Dep"];
40 -> 79 [label="Control Dep"];
44 -> 47 [label="Data Dep"];
45 -> 43 [label="AST"];
45 -> 46 [label="AST"];
45 -> 44 [label="AST"];
45 -> 42 [label="AST"];
47 -> 53 [label="Define-Use"];
47 -> 60 [label="Define-Use"];
48 -> 47 [label="AST"];
48 -> 41 [label="AST"];
48 -> 45 [label="AST"];
54 -> 52 [label="AST"];
54 -> 53 [label="AST"];
55 -> 50 [label="AST"];
55 -> 51 [label="AST"];
55 -> 49 [label="AST"];
55 -> 54 [label="AST"];
59 -> 63 [label="Data Dep"];
60 -> 63 [label="Data Dep"];
61 -> 58 [label="AST"];
61 -> 62 [label="AST"];
61 -> 59 [label="AST"];
61 -> 57 [label="AST"];
61 -> 60 [label="AST"];
63 -> 68 [label="Define-Use"];
63 -> 86 [label="Define-Use"];
64 -> 63 [label="AST"];
64 -> 56 [label="AST"];
64 -> 61 [label="AST"];
68 -> 70 [label="Data Dep"];
69 -> 67 [label="AST"];
69 -> 68 [label="AST"];
69 -> 66 [label="AST"];
70 -> 77 [label="Define-Use"];
71 -> 70 [label="AST"];
71 -> 65 [label="AST"];
71 -> 69 [label="AST"];
74 -> 76 [label="Define-Use"];
75 -> 74 [label="AST"];
75 -> 72 [label="AST"];
75 -> 73 [label="AST"];
78 -> 76 [label="AST"];
78 -> 77 [label="AST"];
78 -> 90 [label="Control Dep"];
78 -> 89 [label="Control Dep"];
78 -> 81 [label="Control Dep"];
78 -> 83 [label="Control Dep"];
78 -> 88 [label="Control Dep"];
78 -> 84 [label="Control Dep"];
78 -> 86 [label="Control Dep"];
78 -> 87 [label="Control Dep"];
79 -> 87 [label="Define-Use"];
80 -> 79 [label="AST"];
88 -> 85 [label="AST"];
88 -> 86 [label="AST"];
88 -> 84 [label="AST"];
88 -> 87 [label="AST"];
89 -> 82 [label="AST"];
89 -> 83 [label="AST"];
89 -> 81 [label="AST"];
89 -> 88 [label="AST"];
90 -> 89 [label="AST"];
91 -> 75 [label="AST"];
91 -> 78 [label="AST"];
91 -> 80 [label="AST"];
91 -> 90 [label="AST"];
92 -> 48 [label="AST"];
92 -> 55 [label="AST"];
92 -> 64 [label="AST"];
92 -> 71 [label="AST"];
92 -> 91 [label="AST"];
93 -> 40 [label="AST"];
93 -> 92 [label="AST"];
94 -> 15 [label="AST"];
94 -> 22 [label="AST"];
94 -> 29 [label="AST"];
94 -> 36 [label="AST"];
94 -> 93 [label="AST"];
97 -> 95 [label="AST"];
97 -> 96 [label="AST"];
97 -> 102 [label="Control Dep"];
97 -> 101 [label="Control Dep"];
97 -> 98 [label="Control Dep"];
97 -> 100 [label="Control Dep"];
101 -> 99 [label="AST"];
101 -> 100 [label="AST"];
101 -> 98 [label="AST"];
101 -> 111 [label="Action"];
101 -> 113 [label="Action"];
102 -> 101 [label="AST"];
103 -> 97 [label="AST"];
103 -> 102 [label="AST"];
103 -> 110 [label="Action"];
104 -> 103 [label="AST"];
105 -> 94 [label="AST"];
105 -> 104 [label="AST"];
106 -> 11 [label="AST"];
106 -> 105 [label="AST"];
107 -> 7 [label="AST"];
107 -> 106 [label="AST"];
108 -> 107 [label="AST"];
109 -> 1 [label="AST"];
109 -> 0 [label="AST"];
109 -> 2 [label="AST"];
109 -> 4 [label="AST"];
109 -> 108 [label="AST"];
111 -> 112 [label="Action"];
113 -> 105 [label="Action"];
}