digraph "getManifestFromJar#?,File" {
0 [label="2:CtTypeReferenceImpl@Manifest" shape=ellipse]
1 [label="2:CtVirtualElement@getManifestFromJar" shape=ellipse]
2 [label="2:CtParameterImpl@File jarFile" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@File" shape=ellipse]
4 [label="2:CtTypeReferenceImpl@IOException" shape=ellipse]
5 [label="3:CtTypeReferenceImpl@ZipFile" shape=ellipse]
6 [label="3:CtLiteralImpl@null" shape=ellipse]
7 [label="3:CtVirtualElement@zf" shape=ellipse]
8 [label="3:CtLocalVariableImpl@ZipFile zf = null" shape=ellipse]
9 [label="5:CtVariableWriteImpl@zf" shape=ellipse]
10 [label="5:CtTypeReferenceImpl@ZipFile" shape=ellipse]
11 [label="5:CtVariableReadImpl@jarFile" shape=ellipse]
12 [label="5:CtConstructorCallImpl@new ZipFile(jarFile)" shape=ellipse]
13 [label="5:CtAssignmentImpl@zf = new ZipFile(jarFile)" shape=ellipse]
14 [label="6:CtTypeReferenceImpl@Enumeration" shape=ellipse]
15 [label="6:CtExecutableReferenceImpl@entries()" shape=ellipse]
16 [label="6:CtVirtualElement@entries" shape=ellipse]
17 [label="6:CtVariableReadImpl@zf" shape=ellipse]
18 [label="6:CtInvocationImpl@zf.entries()" shape=ellipse]
19 [label="6:CtVirtualElement@e" shape=ellipse]
20 [label="6:CtLocalVariableImpl@Enumeration e = zf.entries()" shape=ellipse]
21 [label="7:CtExecutableReferenceImpl@hasMoreElements()" shape=ellipse]
22 [label="7:CtVirtualElement@hasMoreElements" shape=ellipse]
23 [label="7:CtVariableReadImpl@e" shape=ellipse]
24 [label="7:CtInvocationImpl@e.hasMoreElements()" shape=ellipse]
25 [label="8:CtTypeReferenceImpl@ZipEntry" shape=ellipse]
26 [label="8:CtExecutableReferenceImpl@nextElement()" shape=ellipse]
27 [label="8:CtVirtualElement@nextElement" shape=ellipse]
28 [label="8:CtVariableReadImpl@e" shape=ellipse]
29 [label="8:CtInvocationImpl@((ZipEntry) (e.nextElement()))" shape=ellipse]
30 [label="8:CtTypeReferenceImpl@ZipEntry" shape=ellipse]
31 [label="8:CtVirtualElement@ze" shape=ellipse]
32 [label="8:CtLocalVariableImpl@ZipEntry ze = ((ZipEntry) (e.nextElement()))" shape=ellipse]
33 [label="9:CtExecutableReferenceImpl@equals()" shape=ellipse]
34 [label="9:CtVirtualElement@equals" shape=ellipse]
35 [label="9:CtExecutableReferenceImpl@toUpperCase()" shape=ellipse]
36 [label="9:CtVirtualElement@toUpperCase" shape=ellipse]
37 [label="9:CtExecutableReferenceImpl@getName()" shape=ellipse]
38 [label="9:CtVirtualElement@getName" shape=ellipse]
39 [label="9:CtVariableReadImpl@ze" shape=ellipse]
40 [label="9:CtInvocationImpl@ze.getName()" shape=ellipse]
41 [label="9:CtTypeAccessImpl@ENGLISH" shape=ellipse]
42 [label="9:CtInvocationImpl@ze.getName().toUpperCase(ENGLISH)" shape=ellipse]
43 [label="9:CtTypeAccessImpl@MANIFEST_NAME" shape=ellipse]
44 [label="9:CtInvocationImpl@ze.getName().toUpperCase(ENGLISH).equals(MANIFEST_NAME)" shape=ellipse]
45 [label="10:CtTypeReferenceImpl@InputStreamReader" shape=ellipse]
46 [label="10:CtTypeReferenceImpl@InputStreamReader" shape=ellipse]
47 [label="10:CtExecutableReferenceImpl@getInputStream(ZipEntry)" shape=ellipse]
48 [label="10:CtVirtualElement@getInputStream" shape=ellipse]
49 [label="10:CtVariableReadImpl@zf" shape=ellipse]
50 [label="10:CtVariableReadImpl@ze" shape=ellipse]
51 [label="10:CtInvocationImpl@zf.getInputStream(ze)" shape=ellipse]
52 [label="10:CtLiteralImpl@\"UTF-8\"" shape=ellipse]
53 [label="10:CtConstructorCallImpl@new InputStreamReader(zf.getInputStream(ze), \"UTF-8\")" shape=ellipse]
54 [label="10:CtVirtualElement@isr" shape=ellipse]
55 [label="10:CtLocalVariableImpl@InputStreamReader isr = new InputStreamReader(zf.getInputStream(ze), \"UTF-8\")" shape=ellipse]
56 [label="11:CtExecutableReferenceImpl@getManifest(<unknown>)" shape=ellipse]
57 [label="11:CtVirtualElement@getManifest" shape=ellipse]
58 [label="11:CtVariableReadImpl@isr" shape=ellipse]
59 [label="11:CtInvocationImpl@getManifest(isr)" shape=ellipse]
60 [label="11:CtReturnImpl@return getManifest(isr)" shape=ellipse]
61 [label="9:CtBlockImpl@\{
    InputStreamReader isr = new InputStreamReader(zf.getInputStream(ze), \"UTF-8\");
    return getManifest(isr);
\}" shape=ellipse]
62 [label="9:CtIfImpl@if (ze.getName().toUpperCase(ENGLISH).equals(MANIFEST_NAME)) \{
    InputStreamReader isr = new InputStreamReader(zf.getInputStream(ze), \"UTF-8\");
    return getManifest(isr);
\}" shape=ellipse]
63 [label="7:CtBlockImpl@\{
    ZipEntry ze = ((ZipEntry) (e.nextElement()));
    if (ze.getName().toUpperCase(ENGLISH).equals(MANIFEST_NAME)) \{
        InputStreamReader isr = new InputStreamReader(zf.getInputStream(ze), \"UTF-8\");
        return getManifest(isr);
    \}
\}" shape=ellipse]
64 [label="7:CtWhileImpl@while (e.hasMoreElements()) \{
    ZipEntry ze = ((ZipEntry) (e.nextElement()));
    if (ze.getName().toUpperCase(ENGLISH).equals(MANIFEST_NAME)) \{
        InputStreamReader isr = new InputStreamReader(zf.getInputStream(ze), \"UTF-8\");
        return getManifest(isr);
    \}
\} " shape=ellipse]
65 [label="14:CtLiteralImpl@null" shape=ellipse]
66 [label="14:CtReturnImpl@return null" shape=ellipse]
67 [label="4:CtBlockImpl@\{
    zf = new ZipFile(jarFile);
    Enumeration e = zf.entries();
    while (e.hasMoreElements()) \{
        ZipEntry ze = ((ZipEntry) (e.nextElement()));
        if (ze.getName().toUpperCase(ENGLISH).equals(MANIFEST_NAME)) \{
            InputStreamReader isr = new InputStreamReader(zf.getInputStream(ze), \"UTF-8\");
            return getManifest(isr);
        \}
    \} 
    return null;
\}" shape=ellipse]
68 [label="16:CtVariableReadImpl@zf" shape=ellipse]
69 [label="16:CtLiteralImpl@null" shape=ellipse]
70 [label="16:CtBinaryOperatorImpl@zf != null" shape=ellipse]
71 [label="18:CtExecutableReferenceImpl@close()" shape=ellipse]
72 [label="18:CtVirtualElement@close" shape=ellipse]
73 [label="18:CtVariableReadImpl@zf" shape=ellipse]
74 [label="18:CtInvocationImpl@zf.close()" shape=ellipse]
75 [label="17:CtBlockImpl@\{
    zf.close();
\}" shape=ellipse]
76 [label="19:CtVirtualElement@e" shape=ellipse]
77 [label="19:CtTypeReferenceImpl@IOException" shape=ellipse]
78 [label="19:CtCatchVariableImpl@IOException e" shape=ellipse]
79 [label="19:CtBlockImpl@\{
\}" shape=ellipse]
80 [label="19:CtCatchImpl@ catch (IOException e) \{
\}" shape=ellipse]
81 [label="17:CtTryImpl@try \{
    zf.close();
\} catch (IOException e) \{
\}" shape=ellipse]
82 [label="16:CtBlockImpl@\{
    try \{
        zf.close();
    \} catch (IOException e) \{
    \}
\}" shape=ellipse]
83 [label="16:CtIfImpl@if (zf != null) \{
    try \{
        zf.close();
    \} catch (IOException e) \{
    \}
\}" shape=ellipse]
84 [label="15:CtBlockImpl@\{
    if (zf != null) \{
        try \{
            zf.close();
        \} catch (IOException e) \{
        \}
    \}
\}" shape=ellipse]
85 [label="4:CtTryImpl@try \{
    zf = new ZipFile(jarFile);
    Enumeration e = zf.entries();
    while (e.hasMoreElements()) \{
        ZipEntry ze = ((ZipEntry) (e.nextElement()));
        if (ze.getName().toUpperCase(ENGLISH).equals(MANIFEST_NAME)) \{
            InputStreamReader isr = new InputStreamReader(zf.getInputStream(ze), \"UTF-8\");
            return getManifest(isr);
        \}
    \} 
    return null;
\} finally \{
    if (zf != null) \{
        try \{
            zf.close();
        \} catch (IOException e) \{
        \}
    \}
\}" shape=ellipse]
86 [label="2:CtBlockImpl@\{
    ZipFile zf = null;
    try \{
        zf = new ZipFile(jarFile);
        Enumeration e = zf.entries();
        while (e.hasMoreElements()) \{
            ZipEntry ze = ((ZipEntry) (e.nextElement()));
            if (ze.getName().toUpperCase(ENGLISH).equals(MANIFEST_NAME)) \{
                InputStreamReader isr = new InputStreamReader(zf.getInputStream(ze), \"UTF-8\");
                return getManifest(isr);
            \}
        \} 
        return null;
    \} finally \{
        if (zf != null) \{
            try \{
                zf.close();
            \} catch (IOException e) \{
            \}
        \}
    \}
\}" shape=ellipse]
87 [label="2:CtMethodImpl@private Manifest getManifestFromJar(File jarFile) throws IOException \{
    ZipFile zf = null;
    try \{
        zf = new ZipFile(jarFile);
        Enumeration e = zf.entries();
        while (e.hasMoreElements()) \{
            ZipEntry ze = ((ZipEntry) (e.nextElement()));
            if (ze.getName().toUpperCase(ENGLISH).equals(MANIFEST_NAME)) \{
                InputStreamReader isr = new InputStreamReader(zf.getInputStream(ze), \"UTF-8\");
                return getManifest(isr);
            \}
        \} 
        return null;
    \} finally \{
        if (zf != null) \{
            try \{
                zf.close();
            \} catch (IOException e) \{
            \}
        \}
    \}
\}" shape=ellipse]
88 [label="9:Update@UPDATE" shape=ellipse]
89 [label="9:CtInvocationImpl@ze.getName().equalsIgnoreCase(MANIFEST_NAME)" shape=ellipse]
90 [label="9:Update@UPDATE" shape=ellipse]
91 [label="9:CtTypeAccessImpl@MANIFEST_NAME" shape=ellipse]
92 [label="9:Delete@DELETE" shape=ellipse]
93 [label="9:Move@MOVE" shape=ellipse]
2 -> 3 [label="AST"];
8 -> 7 [label="AST"];
8 -> 5 [label="AST"];
8 -> 6 [label="AST"];
9 -> 17 [label="Define-Use"];
9 -> 49 [label="Define-Use"];
9 -> 68 [label="Define-Use"];
9 -> 73 [label="Define-Use"];
11 -> 9 [label="Data Dep"];
12 -> 11 [label="AST"];
13 -> 9 [label="AST"];
13 -> 12 [label="AST"];
17 -> 19 [label="Data Dep"];
18 -> 16 [label="AST"];
18 -> 17 [label="AST"];
18 -> 15 [label="AST"];
19 -> 23 [label="Define-Use"];
19 -> 28 [label="Define-Use"];
20 -> 19 [label="AST"];
20 -> 14 [label="AST"];
20 -> 18 [label="AST"];
24 -> 22 [label="AST"];
24 -> 23 [label="AST"];
24 -> 21 [label="AST"];
24 -> 63 [label="Control Dep"];
24 -> 32 [label="Control Dep"];
24 -> 29 [label="Control Dep"];
24 -> 26 [label="Control Dep"];
24 -> 28 [label="Control Dep"];
24 -> 62 [label="Control Dep"];
24 -> 44 [label="Control Dep"];
24 -> 33 [label="Control Dep"];
24 -> 42 [label="Control Dep"];
24 -> 35 [label="Control Dep"];
24 -> 40 [label="Control Dep"];
24 -> 37 [label="Control Dep"];
24 -> 39 [label="Control Dep"];
24 -> 41 [label="Control Dep"];
24 -> 43 [label="Control Dep"];
28 -> 31 [label="Data Dep"];
29 -> 27 [label="AST"];
29 -> 30 [label="AST"];
29 -> 28 [label="AST"];
29 -> 26 [label="AST"];
31 -> 39 [label="Define-Use"];
31 -> 50 [label="Define-Use"];
32 -> 31 [label="AST"];
32 -> 25 [label="AST"];
32 -> 29 [label="AST"];
40 -> 38 [label="AST"];
40 -> 39 [label="AST"];
40 -> 37 [label="AST"];
41 -> 90 [label="Action"];
42 -> 36 [label="AST"];
42 -> 40 [label="AST"];
42 -> 35 [label="AST"];
42 -> 41 [label="AST"];
42 -> 88 [label="Action"];
42 -> 93 [label="Action"];
44 -> 34 [label="AST"];
44 -> 42 [label="AST"];
44 -> 33 [label="AST"];
44 -> 43 [label="AST"];
44 -> 61 [label="Control Dep"];
44 -> 55 [label="Control Dep"];
44 -> 53 [label="Control Dep"];
44 -> 51 [label="Control Dep"];
44 -> 47 [label="Control Dep"];
44 -> 49 [label="Control Dep"];
44 -> 50 [label="Control Dep"];
44 -> 52 [label="Control Dep"];
44 -> 60 [label="Control Dep"];
44 -> 59 [label="Control Dep"];
44 -> 56 [label="Control Dep"];
44 -> 58 [label="Control Dep"];
44 -> 92 [label="Action"];
49 -> 54 [label="Data Dep"];
50 -> 54 [label="Data Dep"];
51 -> 48 [label="AST"];
51 -> 49 [label="AST"];
51 -> 47 [label="AST"];
51 -> 50 [label="AST"];
53 -> 51 [label="AST"];
53 -> 52 [label="AST"];
54 -> 58 [label="Define-Use"];
55 -> 54 [label="AST"];
55 -> 45 [label="AST"];
55 -> 53 [label="AST"];
59 -> 57 [label="AST"];
59 -> 56 [label="AST"];
59 -> 58 [label="AST"];
60 -> 59 [label="AST"];
61 -> 55 [label="AST"];
61 -> 60 [label="AST"];
62 -> 44 [label="AST"];
62 -> 61 [label="AST"];
63 -> 32 [label="AST"];
63 -> 62 [label="AST"];
64 -> 24 [label="AST"];
64 -> 63 [label="AST"];
66 -> 65 [label="AST"];
67 -> 13 [label="AST"];
67 -> 20 [label="AST"];
67 -> 64 [label="AST"];
67 -> 66 [label="AST"];
70 -> 68 [label="AST"];
70 -> 69 [label="AST"];
70 -> 82 [label="Control Dep"];
70 -> 81 [label="Control Dep"];
70 -> 75 [label="Control Dep"];
70 -> 74 [label="Control Dep"];
70 -> 71 [label="Control Dep"];
70 -> 73 [label="Control Dep"];
70 -> 80 [label="Control Dep"];
70 -> 78 [label="Control Dep"];
74 -> 72 [label="AST"];
74 -> 73 [label="AST"];
74 -> 71 [label="AST"];
75 -> 74 [label="AST"];
78 -> 76 [label="AST"];
78 -> 77 [label="AST"];
78 -> 79 [label="Control Dep"];
80 -> 78 [label="AST"];
80 -> 79 [label="AST"];
81 -> 75 [label="AST"];
81 -> 80 [label="AST"];
82 -> 81 [label="AST"];
83 -> 70 [label="AST"];
83 -> 82 [label="AST"];
84 -> 83 [label="AST"];
85 -> 67 [label="AST"];
85 -> 84 [label="AST"];
86 -> 8 [label="AST"];
86 -> 85 [label="AST"];
87 -> 1 [label="AST"];
87 -> 0 [label="AST"];
87 -> 2 [label="AST"];
87 -> 4 [label="AST"];
87 -> 86 [label="AST"];
88 -> 89 [label="Action"];
89 -> 91 [label="AST"];
90 -> 91 [label="Action"];
93 -> 62 [label="Action"];
}