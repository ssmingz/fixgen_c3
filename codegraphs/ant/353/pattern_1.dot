digraph "Pattern" {
0 [label="jarHasIndex#?,File#9:UPDATE
getManifestFromJar#?,File#9:UPDATE" shape=ellipse]
1 [label="jarHasIndex#?,File#9:ENGLISH
getManifestFromJar#?,File#9:ENGLISH" shape=ellipse]
2 [label="jarHasIndex#?,File#7:e.hasMoreElements()
getManifestFromJar#?,File#7:e.hasMoreElements()" shape=ellipse]
3 [label="jarHasIndex#?,File#7:while (e.hasMoreElements()) \{
    ZipEntry ze = ((ZipEntry) (e.nextElement()));
    if (ze.getName().toUpperCase(ENGLISH).equals(INDEX_NAME)) \{
        return true;
    \}
\} 
getManifestFromJar#?,File#7:while (e.hasMoreElements()) \{
    ZipEntry ze = ((ZipEntry) (e.nextElement()));
    if (ze.getName().toUpperCase(ENGLISH).equals(MANIFEST_NAME)) \{
        InputStreamReader isr = new InputStreamReader(zf.getInputStream(ze), \"UTF-8\");
        return getManifest(isr);
    \}
\} " shape=ellipse]
4 [label="jarHasIndex#?,File#7:hasMoreElements
getManifestFromJar#?,File#7:hasMoreElements" shape=ellipse]
5 [label="jarHasIndex#?,File#7:e
getManifestFromJar#?,File#7:e" shape=ellipse]
6 [label="jarHasIndex#?,File#7:hasMoreElements()
getManifestFromJar#?,File#7:hasMoreElements()" shape=ellipse]
7 [label="jarHasIndex#?,File#7:\{
    ZipEntry ze = ((ZipEntry) (e.nextElement()));
    if (ze.getName().toUpperCase(ENGLISH).equals(INDEX_NAME)) \{
        return true;
    \}
\}
getManifestFromJar#?,File#7:\{
    ZipEntry ze = ((ZipEntry) (e.nextElement()));
    if (ze.getName().toUpperCase(ENGLISH).equals(MANIFEST_NAME)) \{
        InputStreamReader isr = new InputStreamReader(zf.getInputStream(ze), \"UTF-8\");
        return getManifest(isr);
    \}
\}" shape=ellipse]
8 [label="jarHasIndex#?,File#8:ZipEntry ze = ((ZipEntry) (e.nextElement()))
getManifestFromJar#?,File#8:ZipEntry ze = ((ZipEntry) (e.nextElement()))" shape=ellipse]
9 [label="jarHasIndex#?,File#8:((ZipEntry) (e.nextElement()))
getManifestFromJar#?,File#8:((ZipEntry) (e.nextElement()))" shape=ellipse]
10 [label="jarHasIndex#?,File#8:nextElement()
getManifestFromJar#?,File#8:nextElement()" shape=ellipse]
11 [label="jarHasIndex#?,File#8:e
getManifestFromJar#?,File#8:e" shape=ellipse]
12 [label="jarHasIndex#?,File#9:if (ze.getName().toUpperCase(ENGLISH).equals(INDEX_NAME)) \{
    return true;
\}
getManifestFromJar#?,File#9:if (ze.getName().toUpperCase(ENGLISH).equals(MANIFEST_NAME)) \{
    InputStreamReader isr = new InputStreamReader(zf.getInputStream(ze), \"UTF-8\");
    return getManifest(isr);
\}" shape=ellipse]
13 [label="jarHasIndex#?,File#9:ze.getName().toUpperCase(ENGLISH).equals(INDEX_NAME)
getManifestFromJar#?,File#9:ze.getName().toUpperCase(ENGLISH).equals(MANIFEST_NAME)" shape=ellipse]
14 [label="jarHasIndex#?,File#9:equals()
getManifestFromJar#?,File#9:equals()" shape=ellipse]
15 [label="jarHasIndex#?,File#9:ze.getName().toUpperCase(ENGLISH)
getManifestFromJar#?,File#9:ze.getName().toUpperCase(ENGLISH)" shape=ellipse]
16 [label="jarHasIndex#?,File#9:toUpperCase()
getManifestFromJar#?,File#9:toUpperCase()" shape=ellipse]
17 [label="jarHasIndex#?,File#9:ze.getName()
getManifestFromJar#?,File#9:ze.getName()" shape=ellipse]
18 [label="jarHasIndex#?,File#9:getName()
getManifestFromJar#?,File#9:getName()" shape=ellipse]
19 [label="jarHasIndex#?,File#9:ze
getManifestFromJar#?,File#9:ze" shape=ellipse]
20 [label="jarHasIndex#?,File#9:INDEX_NAME
getManifestFromJar#?,File#9:MANIFEST_NAME" shape=ellipse]
21 [label="jarHasIndex#?,File#-1:ENGLISH
getManifestFromJar#?,File#-1:ENGLISH" shape=ellipse]
22 [label="jarHasIndex#?,File#9:INDEX_NAME
getManifestFromJar#?,File#9:MANIFEST_NAME" shape=ellipse]
0 -> 22 [label="Action:2"];
1 -> 0 [label="Action:2"];
1 -> 21 [label="AST:2"];
2 -> 1 [label="Control Dep:2"];
2 -> 4 [label="AST:2"];
2 -> 5 [label="AST:2"];
2 -> 6 [label="AST:2"];
2 -> 7 [label="Control Dep:2"];
2 -> 8 [label="Control Dep:2"];
2 -> 9 [label="Control Dep:2"];
2 -> 10 [label="Control Dep:2"];
2 -> 11 [label="Control Dep:2"];
2 -> 12 [label="Control Dep:2"];
2 -> 13 [label="Control Dep:2"];
2 -> 14 [label="Control Dep:2"];
2 -> 15 [label="Control Dep:2"];
2 -> 16 [label="Control Dep:2"];
2 -> 17 [label="Control Dep:2"];
2 -> 18 [label="Control Dep:2"];
2 -> 19 [label="Control Dep:2"];
2 -> 20 [label="Control Dep:2"];
3 -> 2 [label="AST:2"];
3 -> 7 [label="AST:2"];
7 -> 8 [label="AST:2"];
7 -> 12 [label="AST:2"];
8 -> 9 [label="AST:2"];
9 -> 11 [label="AST:2"];
9 -> 10 [label="AST:2"];
12 -> 13 [label="AST:2"];
13 -> 15 [label="AST:2"];
13 -> 14 [label="AST:2"];
13 -> 20 [label="AST:2"];
15 -> 1 [label="AST:2"];
15 -> 17 [label="AST:2"];
15 -> 16 [label="AST:2"];
17 -> 19 [label="AST:2"];
17 -> 18 [label="AST:2"];
}