digraph "endTestSuite#?,JUnitTest" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@endTestSuite" shape=ellipse]
2 [label="2:CtParameterImpl@JUnitTest suite" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@JUnitTest" shape=ellipse]
4 [label="2:CtTypeReferenceImpl@BuildException" shape=ellipse]
5 [label="3:CtExecutableReferenceImpl@setAttribute()" shape=ellipse]
6 [label="3:CtVirtualElement@setAttribute" shape=ellipse]
7 [label="3:CtFieldReadImpl@rootElement" shape=ellipse]
8 [label="3:CtTypeAccessImpl@ATTR_TESTS" shape=ellipse]
9 [label="3:CtLiteralImpl@\"\"" shape=ellipse]
10 [label="3:CtExecutableReferenceImpl@runCount()" shape=ellipse]
11 [label="3:CtVirtualElement@runCount" shape=ellipse]
12 [label="3:CtVariableReadImpl@suite" shape=ellipse]
13 [label="3:CtInvocationImpl@suite.runCount()" shape=ellipse]
14 [label="3:CtBinaryOperatorImpl@\"\" + suite.runCount()" shape=ellipse]
15 [label="3:CtInvocationImpl@rootElement.setAttribute(ATTR_TESTS, \"\" + suite.runCount())" shape=ellipse]
16 [label="4:CtExecutableReferenceImpl@setAttribute()" shape=ellipse]
17 [label="4:CtVirtualElement@setAttribute" shape=ellipse]
18 [label="4:CtFieldReadImpl@rootElement" shape=ellipse]
19 [label="4:CtTypeAccessImpl@ATTR_FAILURES" shape=ellipse]
20 [label="4:CtLiteralImpl@\"\"" shape=ellipse]
21 [label="4:CtExecutableReferenceImpl@failureCount()" shape=ellipse]
22 [label="4:CtVirtualElement@failureCount" shape=ellipse]
23 [label="4:CtVariableReadImpl@suite" shape=ellipse]
24 [label="4:CtInvocationImpl@suite.failureCount()" shape=ellipse]
25 [label="4:CtBinaryOperatorImpl@\"\" + suite.failureCount()" shape=ellipse]
26 [label="4:CtInvocationImpl@rootElement.setAttribute(ATTR_FAILURES, \"\" + suite.failureCount())" shape=ellipse]
27 [label="5:CtExecutableReferenceImpl@setAttribute()" shape=ellipse]
28 [label="5:CtVirtualElement@setAttribute" shape=ellipse]
29 [label="5:CtFieldReadImpl@rootElement" shape=ellipse]
30 [label="5:CtTypeAccessImpl@ATTR_ERRORS" shape=ellipse]
31 [label="5:CtLiteralImpl@\"\"" shape=ellipse]
32 [label="5:CtExecutableReferenceImpl@errorCount()" shape=ellipse]
33 [label="5:CtVirtualElement@errorCount" shape=ellipse]
34 [label="5:CtVariableReadImpl@suite" shape=ellipse]
35 [label="5:CtInvocationImpl@suite.errorCount()" shape=ellipse]
36 [label="5:CtBinaryOperatorImpl@\"\" + suite.errorCount()" shape=ellipse]
37 [label="5:CtInvocationImpl@rootElement.setAttribute(ATTR_ERRORS, \"\" + suite.errorCount())" shape=ellipse]
38 [label="6:CtExecutableReferenceImpl@setAttribute()" shape=ellipse]
39 [label="6:CtVirtualElement@setAttribute" shape=ellipse]
40 [label="6:CtFieldReadImpl@rootElement" shape=ellipse]
41 [label="6:CtTypeAccessImpl@ATTR_TIME" shape=ellipse]
42 [label="6:CtLiteralImpl@\"\"" shape=ellipse]
43 [label="6:CtExecutableReferenceImpl@getRunTime()" shape=ellipse]
44 [label="6:CtVirtualElement@getRunTime" shape=ellipse]
45 [label="6:CtVariableReadImpl@suite" shape=ellipse]
46 [label="6:CtInvocationImpl@suite.getRunTime()" shape=ellipse]
47 [label="6:CtLiteralImpl@1000.0" shape=ellipse]
48 [label="6:CtBinaryOperatorImpl@(suite.getRunTime() / 1000.0)" shape=ellipse]
49 [label="6:CtBinaryOperatorImpl@\"\" + (suite.getRunTime() / 1000.0)" shape=ellipse]
50 [label="6:CtInvocationImpl@rootElement.setAttribute(ATTR_TIME, \"\" + (suite.getRunTime() / 1000.0))" shape=ellipse]
51 [label="7:CtFieldReadImpl@out" shape=ellipse]
52 [label="7:CtLiteralImpl@null" shape=ellipse]
53 [label="7:CtBinaryOperatorImpl@out != null" shape=ellipse]
54 [label="8:CtTypeReferenceImpl@Writer" shape=ellipse]
55 [label="8:CtLiteralImpl@null" shape=ellipse]
56 [label="8:CtVirtualElement@wri" shape=ellipse]
57 [label="8:CtLocalVariableImpl@Writer wri = null" shape=ellipse]
58 [label="10:CtVariableWriteImpl@wri" shape=ellipse]
59 [label="10:CtTypeReferenceImpl@OutputStreamWriter" shape=ellipse]
60 [label="10:CtFieldReadImpl@out" shape=ellipse]
61 [label="10:CtLiteralImpl@\"UTF8\"" shape=ellipse]
62 [label="10:CtConstructorCallImpl@new OutputStreamWriter(out, \"UTF8\")" shape=ellipse]
63 [label="10:CtAssignmentImpl@wri = new OutputStreamWriter(out, \"UTF8\")" shape=ellipse]
64 [label="11:CtExecutableReferenceImpl@write(java.lang.String)" shape=ellipse]
65 [label="11:CtVirtualElement@write" shape=ellipse]
66 [label="11:CtVariableReadImpl@wri" shape=ellipse]
67 [label="11:CtLiteralImpl@\"<?xml version=\\"1.0\\"?>\n\"" shape=ellipse]
68 [label="11:CtInvocationImpl@wri.write(\"<?xml version=\\"1.0\\"?>\n\")" shape=ellipse]
69 [label="12:CtExecutableReferenceImpl@write(Writer,int,java.lang.String)" shape=ellipse]
70 [label="12:CtVirtualElement@write" shape=ellipse]
71 [label="12:CtTypeReferenceImpl@DOMElementWriter" shape=ellipse]
72 [label="12:CtConstructorCallImpl@new DOMElementWriter()" shape=ellipse]
73 [label="12:CtFieldReadImpl@rootElement" shape=ellipse]
74 [label="12:CtVariableReadImpl@wri" shape=ellipse]
75 [label="12:CtLiteralImpl@0" shape=ellipse]
76 [label="12:CtLiteralImpl@\"  \"" shape=ellipse]
77 [label="12:CtInvocationImpl@new DOMElementWriter().write(rootElement, wri, 0, \"  \")" shape=ellipse]
78 [label="13:CtExecutableReferenceImpl@flush()" shape=ellipse]
79 [label="13:CtVirtualElement@flush" shape=ellipse]
80 [label="13:CtVariableReadImpl@wri" shape=ellipse]
81 [label="13:CtInvocationImpl@wri.flush()" shape=ellipse]
82 [label="9:CtBlockImpl@\{
    wri = new OutputStreamWriter(out, \"UTF8\");
    wri.write(\"<?xml version=\\"1.0\\"?>\n\");
    new DOMElementWriter().write(rootElement, wri, 0, \"  \");
    wri.flush();
\}" shape=ellipse]
83 [label="14:CtVirtualElement@exc" shape=ellipse]
84 [label="14:CtTypeReferenceImpl@IOException" shape=ellipse]
85 [label="14:CtCatchVariableImpl@IOException exc" shape=ellipse]
86 [label="15:CtTypeReferenceImpl@BuildException" shape=ellipse]
87 [label="15:CtLiteralImpl@\"Unable to write log file\"" shape=ellipse]
88 [label="15:CtVariableReadImpl@exc" shape=ellipse]
89 [label="15:CtConstructorCallImpl@new BuildException(\"Unable to write log file\", exc)" shape=ellipse]
90 [label="15:CtThrowImpl@throw new BuildException(\"Unable to write log file\", exc)" shape=ellipse]
91 [label="14:CtBlockImpl@\{
    throw new BuildException(\"Unable to write log file\", exc);
\}" shape=ellipse]
92 [label="14:CtCatchImpl@ catch (IOException exc) \{
    throw new BuildException(\"Unable to write log file\", exc);
\}" shape=ellipse]
93 [label="17:CtFieldReadImpl@out" shape=ellipse]
94 [label="17:CtTypeAccessImpl@System" shape=ellipse]
95 [label="17:CtFieldReadImpl@System.out" shape=ellipse]
96 [label="17:CtFieldReferenceImpl@java.lang.System.out" shape=ellipse]
97 [label="17:CtBinaryOperatorImpl@(out != System.out)" shape=ellipse]
98 [label="17:CtFieldReadImpl@out" shape=ellipse]
99 [label="17:CtTypeAccessImpl@System" shape=ellipse]
100 [label="17:CtFieldReadImpl@System.err" shape=ellipse]
101 [label="17:CtFieldReferenceImpl@java.lang.System.err" shape=ellipse]
102 [label="17:CtBinaryOperatorImpl@(out != System.err)" shape=ellipse]
103 [label="17:CtBinaryOperatorImpl@(out != System.out) && (out != System.err)" shape=ellipse]
104 [label="18:CtVariableReadImpl@wri" shape=ellipse]
105 [label="18:CtLiteralImpl@null" shape=ellipse]
106 [label="18:CtBinaryOperatorImpl@wri != null" shape=ellipse]
107 [label="20:CtExecutableReferenceImpl@close()" shape=ellipse]
108 [label="20:CtVirtualElement@close" shape=ellipse]
109 [label="20:CtVariableReadImpl@wri" shape=ellipse]
110 [label="20:CtInvocationImpl@wri.close()" shape=ellipse]
111 [label="19:CtBlockImpl@\{
    wri.close();
\}" shape=ellipse]
112 [label="21:CtVirtualElement@e" shape=ellipse]
113 [label="21:CtTypeReferenceImpl@IOException" shape=ellipse]
114 [label="21:CtCatchVariableImpl@IOException e" shape=ellipse]
115 [label="21:CtBlockImpl@\{
\}" shape=ellipse]
116 [label="21:CtCatchImpl@ catch (IOException e) \{
\}" shape=ellipse]
117 [label="19:CtTryImpl@try \{
    wri.close();
\} catch (IOException e) \{
\}" shape=ellipse]
118 [label="18:CtBlockImpl@\{
    try \{
        wri.close();
    \} catch (IOException e) \{
    \}
\}" shape=ellipse]
119 [label="18:CtIfImpl@if (wri != null) \{
    try \{
        wri.close();
    \} catch (IOException e) \{
    \}
\}" shape=ellipse]
120 [label="17:CtBlockImpl@\{
    if (wri != null) \{
        try \{
            wri.close();
        \} catch (IOException e) \{
        \}
    \}
\}" shape=ellipse]
121 [label="17:CtIfImpl@if ((out != System.out) && (out != System.err)) \{
    if (wri != null) \{
        try \{
            wri.close();
        \} catch (IOException e) \{
        \}
    \}
\}" shape=ellipse]
122 [label="16:CtBlockImpl@\{
    if ((out != System.out) && (out != System.err)) \{
        if (wri != null) \{
            try \{
                wri.close();
            \} catch (IOException e) \{
            \}
        \}
    \}
\}" shape=ellipse]
123 [label="9:CtTryImpl@try \{
    wri = new OutputStreamWriter(out, \"UTF8\");
    wri.write(\"<?xml version=\\"1.0\\"?>\n\");
    new DOMElementWriter().write(rootElement, wri, 0, \"  \");
    wri.flush();
\} catch (IOException exc) \{
    throw new BuildException(\"Unable to write log file\", exc);
\} finally \{
    if ((out != System.out) && (out != System.err)) \{
        if (wri != null) \{
            try \{
                wri.close();
            \} catch (IOException e) \{
            \}
        \}
    \}
\}" shape=ellipse]
124 [label="7:CtBlockImpl@\{
    Writer wri = null;
    try \{
        wri = new OutputStreamWriter(out, \"UTF8\");
        wri.write(\"<?xml version=\\"1.0\\"?>\n\");
        new DOMElementWriter().write(rootElement, wri, 0, \"  \");
        wri.flush();
    \} catch (IOException exc) \{
        throw new BuildException(\"Unable to write log file\", exc);
    \} finally \{
        if ((out != System.out) && (out != System.err)) \{
            if (wri != null) \{
                try \{
                    wri.close();
                \} catch (IOException e) \{
                \}
            \}
        \}
    \}
\}" shape=ellipse]
125 [label="7:CtIfImpl@if (out != null) \{
    Writer wri = null;
    try \{
        wri = new OutputStreamWriter(out, \"UTF8\");
        wri.write(\"<?xml version=\\"1.0\\"?>\n\");
        new DOMElementWriter().write(rootElement, wri, 0, \"  \");
        wri.flush();
    \} catch (IOException exc) \{
        throw new BuildException(\"Unable to write log file\", exc);
    \} finally \{
        if ((out != System.out) && (out != System.err)) \{
            if (wri != null) \{
                try \{
                    wri.close();
                \} catch (IOException e) \{
                \}
            \}
        \}
    \}
\}" shape=ellipse]
126 [label="2:CtBlockImpl@\{
    rootElement.setAttribute(ATTR_TESTS, \"\" + suite.runCount());
    rootElement.setAttribute(ATTR_FAILURES, \"\" + suite.failureCount());
    rootElement.setAttribute(ATTR_ERRORS, \"\" + suite.errorCount());
    rootElement.setAttribute(ATTR_TIME, \"\" + (suite.getRunTime() / 1000.0));
    if (out != null) \{
        Writer wri = null;
        try \{
            wri = new OutputStreamWriter(out, \"UTF8\");
            wri.write(\"<?xml version=\\"1.0\\"?>\n\");
            new DOMElementWriter().write(rootElement, wri, 0, \"  \");
            wri.flush();
        \} catch (IOException exc) \{
            throw new BuildException(\"Unable to write log file\", exc);
        \} finally \{
            if ((out != System.out) && (out != System.err)) \{
                if (wri != null) \{
                    try \{
                        wri.close();
                    \} catch (IOException e) \{
                    \}
                \}
            \}
        \}
    \}
\}" shape=ellipse]
127 [label="2:CtMethodImpl@public void endTestSuite(JUnitTest suite) throws BuildException \{
    rootElement.setAttribute(ATTR_TESTS, \"\" + suite.runCount());
    rootElement.setAttribute(ATTR_FAILURES, \"\" + suite.failureCount());
    rootElement.setAttribute(ATTR_ERRORS, \"\" + suite.errorCount());
    rootElement.setAttribute(ATTR_TIME, \"\" + (suite.getRunTime() / 1000.0));
    if (out != null) \{
        Writer wri = null;
        try \{
            wri = new OutputStreamWriter(out, \"UTF8\");
            wri.write(\"<?xml version=\\"1.0\\"?>\n\");
            new DOMElementWriter().write(rootElement, wri, 0, \"  \");
            wri.flush();
        \} catch (IOException exc) \{
            throw new BuildException(\"Unable to write log file\", exc);
        \} finally \{
            if ((out != System.out) && (out != System.err)) \{
                if (wri != null) \{
                    try \{
                        wri.close();
                    \} catch (IOException e) \{
                    \}
                \}
            \}
        \}
    \}
\}" shape=ellipse]
128 [label="11:Update@UPDATE" shape=ellipse]
129 [label="11:CtLiteralImpl@\"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" ?>\n\"" shape=ellipse]
2 -> 3 [label="AST"];
13 -> 11 [label="AST"];
13 -> 12 [label="AST"];
13 -> 10 [label="AST"];
14 -> 9 [label="AST"];
14 -> 13 [label="AST"];
15 -> 6 [label="AST"];
15 -> 7 [label="AST"];
15 -> 5 [label="AST"];
15 -> 8 [label="AST"];
15 -> 14 [label="AST"];
24 -> 22 [label="AST"];
24 -> 23 [label="AST"];
24 -> 21 [label="AST"];
25 -> 20 [label="AST"];
25 -> 24 [label="AST"];
26 -> 17 [label="AST"];
26 -> 18 [label="AST"];
26 -> 16 [label="AST"];
26 -> 19 [label="AST"];
26 -> 25 [label="AST"];
35 -> 33 [label="AST"];
35 -> 34 [label="AST"];
35 -> 32 [label="AST"];
36 -> 31 [label="AST"];
36 -> 35 [label="AST"];
37 -> 28 [label="AST"];
37 -> 29 [label="AST"];
37 -> 27 [label="AST"];
37 -> 30 [label="AST"];
37 -> 36 [label="AST"];
46 -> 44 [label="AST"];
46 -> 45 [label="AST"];
46 -> 43 [label="AST"];
48 -> 46 [label="AST"];
48 -> 47 [label="AST"];
49 -> 42 [label="AST"];
49 -> 48 [label="AST"];
50 -> 39 [label="AST"];
50 -> 40 [label="AST"];
50 -> 38 [label="AST"];
50 -> 41 [label="AST"];
50 -> 49 [label="AST"];
53 -> 51 [label="AST"];
53 -> 52 [label="AST"];
53 -> 124 [label="Control Dep"];
53 -> 57 [label="Control Dep"];
53 -> 55 [label="Control Dep"];
53 -> 123 [label="Control Dep"];
53 -> 82 [label="Control Dep"];
53 -> 63 [label="Control Dep"];
53 -> 58 [label="Control Dep"];
53 -> 62 [label="Control Dep"];
53 -> 60 [label="Control Dep"];
53 -> 61 [label="Control Dep"];
53 -> 68 [label="Control Dep"];
53 -> 64 [label="Control Dep"];
53 -> 66 [label="Control Dep"];
53 -> 67 [label="Control Dep"];
53 -> 77 [label="Control Dep"];
53 -> 69 [label="Control Dep"];
53 -> 72 [label="Control Dep"];
53 -> 73 [label="Control Dep"];
53 -> 74 [label="Control Dep"];
53 -> 75 [label="Control Dep"];
53 -> 76 [label="Control Dep"];
53 -> 81 [label="Control Dep"];
53 -> 78 [label="Control Dep"];
53 -> 80 [label="Control Dep"];
53 -> 92 [label="Control Dep"];
53 -> 85 [label="Control Dep"];
53 -> 122 [label="Control Dep"];
53 -> 121 [label="Control Dep"];
53 -> 103 [label="Control Dep"];
53 -> 97 [label="Control Dep"];
53 -> 93 [label="Control Dep"];
53 -> 95 [label="Control Dep"];
53 -> 94 [label="Control Dep"];
53 -> 102 [label="Control Dep"];
53 -> 98 [label="Control Dep"];
53 -> 100 [label="Control Dep"];
53 -> 99 [label="Control Dep"];
57 -> 56 [label="AST"];
57 -> 54 [label="AST"];
57 -> 55 [label="AST"];
58 -> 66 [label="Define-Use"];
58 -> 74 [label="Define-Use"];
58 -> 80 [label="Define-Use"];
58 -> 104 [label="Define-Use"];
58 -> 109 [label="Define-Use"];
60 -> 58 [label="Data Dep"];
62 -> 60 [label="AST"];
62 -> 61 [label="AST"];
63 -> 58 [label="AST"];
63 -> 62 [label="AST"];
67 -> 128 [label="Action"];
68 -> 65 [label="AST"];
68 -> 66 [label="AST"];
68 -> 64 [label="AST"];
68 -> 67 [label="AST"];
77 -> 70 [label="AST"];
77 -> 72 [label="AST"];
77 -> 69 [label="AST"];
77 -> 73 [label="AST"];
77 -> 74 [label="AST"];
77 -> 75 [label="AST"];
77 -> 76 [label="AST"];
81 -> 79 [label="AST"];
81 -> 80 [label="AST"];
81 -> 78 [label="AST"];
82 -> 63 [label="AST"];
82 -> 68 [label="AST"];
82 -> 77 [label="AST"];
82 -> 81 [label="AST"];
83 -> 88 [label="Define-Use"];
85 -> 83 [label="AST"];
85 -> 84 [label="AST"];
85 -> 91 [label="Control Dep"];
85 -> 90 [label="Control Dep"];
85 -> 89 [label="Control Dep"];
85 -> 87 [label="Control Dep"];
85 -> 88 [label="Control Dep"];
89 -> 87 [label="AST"];
89 -> 88 [label="AST"];
90 -> 89 [label="AST"];
91 -> 90 [label="AST"];
92 -> 85 [label="AST"];
92 -> 91 [label="AST"];
95 -> 94 [label="AST"];
95 -> 96 [label="AST"];
97 -> 93 [label="AST"];
97 -> 95 [label="AST"];
100 -> 99 [label="AST"];
100 -> 101 [label="AST"];
102 -> 98 [label="AST"];
102 -> 100 [label="AST"];
103 -> 97 [label="AST"];
103 -> 102 [label="AST"];
103 -> 120 [label="Control Dep"];
103 -> 119 [label="Control Dep"];
103 -> 106 [label="Control Dep"];
103 -> 104 [label="Control Dep"];
103 -> 105 [label="Control Dep"];
106 -> 104 [label="AST"];
106 -> 105 [label="AST"];
106 -> 118 [label="Control Dep"];
106 -> 117 [label="Control Dep"];
106 -> 111 [label="Control Dep"];
106 -> 110 [label="Control Dep"];
106 -> 107 [label="Control Dep"];
106 -> 109 [label="Control Dep"];
106 -> 116 [label="Control Dep"];
106 -> 114 [label="Control Dep"];
110 -> 108 [label="AST"];
110 -> 109 [label="AST"];
110 -> 107 [label="AST"];
111 -> 110 [label="AST"];
114 -> 112 [label="AST"];
114 -> 113 [label="AST"];
114 -> 115 [label="Control Dep"];
116 -> 114 [label="AST"];
116 -> 115 [label="AST"];
117 -> 111 [label="AST"];
117 -> 116 [label="AST"];
118 -> 117 [label="AST"];
119 -> 106 [label="AST"];
119 -> 118 [label="AST"];
120 -> 119 [label="AST"];
121 -> 103 [label="AST"];
121 -> 120 [label="AST"];
122 -> 121 [label="AST"];
123 -> 82 [label="AST"];
123 -> 92 [label="AST"];
123 -> 122 [label="AST"];
124 -> 57 [label="AST"];
124 -> 123 [label="AST"];
125 -> 53 [label="AST"];
125 -> 124 [label="AST"];
126 -> 15 [label="AST"];
126 -> 26 [label="AST"];
126 -> 37 [label="AST"];
126 -> 50 [label="AST"];
126 -> 125 [label="AST"];
127 -> 1 [label="AST"];
127 -> 0 [label="AST"];
127 -> 2 [label="AST"];
127 -> 4 [label="AST"];
127 -> 126 [label="AST"];
128 -> 129 [label="Action"];
}