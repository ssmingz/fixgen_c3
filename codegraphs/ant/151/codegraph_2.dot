digraph "runExecute#?,Execute" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@runExecute" shape=ellipse]
2 [label="2:CtParameterImpl@Execute exe" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@Execute" shape=ellipse]
4 [label="2:CtTypeReferenceImpl@IOException" shape=ellipse]
5 [label="3:CtTypeReferenceImpl@int" shape=ellipse]
6 [label="3:CtLiteralImpl@1" shape=ellipse]
7 [label="3:CtUnaryOperatorImpl@-1" shape=ellipse]
8 [label="3:CtVirtualElement@err" shape=ellipse]
9 [label="3:CtLocalVariableImpl@int err = -1" shape=ellipse]
10 [label="4:CtVariableWriteImpl@err" shape=ellipse]
11 [label="4:CtExecutableReferenceImpl@execute()" shape=ellipse]
12 [label="4:CtVirtualElement@execute" shape=ellipse]
13 [label="4:CtVariableReadImpl@exe" shape=ellipse]
14 [label="4:CtInvocationImpl@exe.execute()" shape=ellipse]
15 [label="4:CtAssignmentImpl@err = exe.execute()" shape=ellipse]
16 [label="5:CtExecutableReferenceImpl@killedProcess()" shape=ellipse]
17 [label="5:CtVirtualElement@killedProcess" shape=ellipse]
18 [label="5:CtVariableReadImpl@exe" shape=ellipse]
19 [label="5:CtInvocationImpl@exe.killedProcess()" shape=ellipse]
20 [label="6:CtExecutableReferenceImpl@log(java.lang.String,<unknown>)" shape=ellipse]
21 [label="6:CtVirtualElement@log" shape=ellipse]
22 [label="6:CtLiteralImpl@\"Timeout: killed the sub-process\"" shape=ellipse]
23 [label="6:CtTypeAccessImpl@MSG_WARN" shape=ellipse]
24 [label="6:CtInvocationImpl@log(\"Timeout: killed the sub-process\", MSG_WARN)" shape=ellipse]
25 [label="5:CtBlockImpl@\{
    log(\"Timeout: killed the sub-process\", MSG_WARN);
\}" shape=ellipse]
26 [label="5:CtIfImpl@if (exe.killedProcess()) \{
    log(\"Timeout: killed the sub-process\", MSG_WARN);
\}" shape=ellipse]
27 [label="8:CtExecutableReferenceImpl@maybeSetResultPropertyValue(int)" shape=ellipse]
28 [label="8:CtVirtualElement@maybeSetResultPropertyValue" shape=ellipse]
29 [label="8:CtVariableReadImpl@err" shape=ellipse]
30 [label="8:CtInvocationImpl@maybeSetResultPropertyValue(err)" shape=ellipse]
31 [label="9:CtVariableReadImpl@err" shape=ellipse]
32 [label="9:CtLiteralImpl@0" shape=ellipse]
33 [label="9:CtBinaryOperatorImpl@err != 0" shape=ellipse]
34 [label="10:CtFieldReadImpl@failOnError" shape=ellipse]
35 [label="11:CtTypeReferenceImpl@BuildException" shape=ellipse]
36 [label="11:CtFieldReadImpl@taskType" shape=ellipse]
37 [label="11:CtLiteralImpl@\" returned: \"" shape=ellipse]
38 [label="11:CtBinaryOperatorImpl@(taskType + \" returned: \")" shape=ellipse]
39 [label="11:CtVariableReadImpl@err" shape=ellipse]
40 [label="11:CtBinaryOperatorImpl@(taskType + \" returned: \") + err" shape=ellipse]
41 [label="11:CtFieldReadImpl@location" shape=ellipse]
42 [label="11:CtConstructorCallImpl@new BuildException((taskType + \" returned: \") + err, location)" shape=ellipse]
43 [label="11:CtThrowImpl@throw new BuildException((taskType + \" returned: \") + err, location)" shape=ellipse]
44 [label="10:CtBlockImpl@\{
    throw new BuildException((taskType + \" returned: \") + err, location);
\}" shape=ellipse]
45 [label="13:CtExecutableReferenceImpl@log(java.lang.String,<unknown>)" shape=ellipse]
46 [label="13:CtVirtualElement@log" shape=ellipse]
47 [label="13:CtLiteralImpl@\"Result: \"" shape=ellipse]
48 [label="13:CtVariableReadImpl@err" shape=ellipse]
49 [label="13:CtBinaryOperatorImpl@\"Result: \" + err" shape=ellipse]
50 [label="13:CtTypeAccessImpl@MSG_ERR" shape=ellipse]
51 [label="13:CtInvocationImpl@log(\"Result: \" + err, MSG_ERR)" shape=ellipse]
52 [label="12:CtBlockImpl@\{
    log(\"Result: \" + err, MSG_ERR);
\}" shape=ellipse]
53 [label="10:CtIfImpl@if (failOnError) \{
    throw new BuildException((taskType + \" returned: \") + err, location);
\} else \{
    log(\"Result: \" + err, MSG_ERR);
\}" shape=ellipse]
54 [label="9:CtBlockImpl@\{
    if (failOnError) \{
        throw new BuildException((taskType + \" returned: \") + err, location);
    \} else \{
        log(\"Result: \" + err, MSG_ERR);
    \}
\}" shape=ellipse]
55 [label="9:CtIfImpl@if (err != 0) \{
    if (failOnError) \{
        throw new BuildException((taskType + \" returned: \") + err, location);
    \} else \{
        log(\"Result: \" + err, MSG_ERR);
    \}
\}" shape=ellipse]
56 [label="16:CtFieldReadImpl@baos" shape=ellipse]
57 [label="16:CtLiteralImpl@null" shape=ellipse]
58 [label="16:CtBinaryOperatorImpl@baos != null" shape=ellipse]
59 [label="17:CtTypeReferenceImpl@BufferedReader" shape=ellipse]
60 [label="17:CtTypeReferenceImpl@BufferedReader" shape=ellipse]
61 [label="17:CtTypeReferenceImpl@StringReader" shape=ellipse]
62 [label="17:CtExecutableReferenceImpl@toString()" shape=ellipse]
63 [label="17:CtVirtualElement@toString" shape=ellipse]
64 [label="17:CtTypeAccessImpl@Execute" shape=ellipse]
65 [label="17:CtFieldReadImpl@baos" shape=ellipse]
66 [label="17:CtInvocationImpl@Execute.toString(baos)" shape=ellipse]
67 [label="17:CtConstructorCallImpl@new StringReader(Execute.toString(baos))" shape=ellipse]
68 [label="17:CtConstructorCallImpl@new BufferedReader(new StringReader(Execute.toString(baos)))" shape=ellipse]
69 [label="17:CtVirtualElement@in" shape=ellipse]
70 [label="17:CtLocalVariableImpl@BufferedReader in = new BufferedReader(new StringReader(Execute.toString(baos)))" shape=ellipse]
71 [label="18:CtTypeReferenceImpl@String" shape=ellipse]
72 [label="18:CtLiteralImpl@null" shape=ellipse]
73 [label="18:CtVirtualElement@line" shape=ellipse]
74 [label="18:CtLocalVariableImpl@String line = null" shape=ellipse]
75 [label="19:CtTypeReferenceImpl@StringBuffer" shape=ellipse]
76 [label="19:CtTypeReferenceImpl@StringBuffer" shape=ellipse]
77 [label="19:CtConstructorCallImpl@new StringBuffer()" shape=ellipse]
78 [label="19:CtVirtualElement@val" shape=ellipse]
79 [label="19:CtLocalVariableImpl@StringBuffer val = new StringBuffer()" shape=ellipse]
80 [label="20:CtVariableWriteImpl@line" shape=ellipse]
81 [label="20:CtExecutableReferenceImpl@readLine()" shape=ellipse]
82 [label="20:CtVirtualElement@readLine" shape=ellipse]
83 [label="20:CtVariableReadImpl@in" shape=ellipse]
84 [label="20:CtInvocationImpl@in.readLine()" shape=ellipse]
85 [label="20:CtAssignmentImpl@(line = in.readLine())" shape=ellipse]
86 [label="20:CtLiteralImpl@null" shape=ellipse]
87 [label="20:CtBinaryOperatorImpl@(line = in.readLine()) != null" shape=ellipse]
88 [label="21:CtExecutableReferenceImpl@length()" shape=ellipse]
89 [label="21:CtVirtualElement@length" shape=ellipse]
90 [label="21:CtVariableReadImpl@val" shape=ellipse]
91 [label="21:CtInvocationImpl@val.length()" shape=ellipse]
92 [label="21:CtLiteralImpl@0" shape=ellipse]
93 [label="21:CtBinaryOperatorImpl@val.length() != 0" shape=ellipse]
94 [label="22:CtExecutableReferenceImpl@append(java.lang.Object)" shape=ellipse]
95 [label="22:CtVirtualElement@append" shape=ellipse]
96 [label="22:CtVariableReadImpl@val" shape=ellipse]
97 [label="22:CtTypeAccessImpl@LINE_SEP" shape=ellipse]
98 [label="22:CtInvocationImpl@val.append(LINE_SEP)" shape=ellipse]
99 [label="21:CtBlockImpl@\{
    val.append(LINE_SEP);
\}" shape=ellipse]
100 [label="21:CtIfImpl@if (val.length() != 0) \{
    val.append(LINE_SEP);
\}" shape=ellipse]
101 [label="24:CtExecutableReferenceImpl@append(java.lang.String)" shape=ellipse]
102 [label="24:CtVirtualElement@append" shape=ellipse]
103 [label="24:CtVariableReadImpl@val" shape=ellipse]
104 [label="24:CtVariableReadImpl@line" shape=ellipse]
105 [label="24:CtInvocationImpl@val.append(line)" shape=ellipse]
106 [label="20:CtBlockImpl@\{
    if (val.length() != 0) \{
        val.append(LINE_SEP);
    \}
    val.append(line);
\}" shape=ellipse]
107 [label="20:CtWhileImpl@while ((line = in.readLine()) != null) \{
    if (val.length() != 0) \{
        val.append(LINE_SEP);
    \}
    val.append(line);
\} " shape=ellipse]
108 [label="26:CtExecutableReferenceImpl@setNewProperty(java.lang.String)" shape=ellipse]
109 [label="26:CtVirtualElement@setNewProperty" shape=ellipse]
110 [label="26:CtExecutableReferenceImpl@getProject()" shape=ellipse]
111 [label="26:CtVirtualElement@getProject" shape=ellipse]
112 [label="26:CtInvocationImpl@getProject()" shape=ellipse]
113 [label="26:CtFieldReadImpl@outputprop" shape=ellipse]
114 [label="26:CtExecutableReferenceImpl@toString()" shape=ellipse]
115 [label="26:CtVirtualElement@toString" shape=ellipse]
116 [label="26:CtVariableReadImpl@val" shape=ellipse]
117 [label="26:CtInvocationImpl@val.toString()" shape=ellipse]
118 [label="26:CtInvocationImpl@getProject().setNewProperty(outputprop, val.toString())" shape=ellipse]
119 [label="16:CtBlockImpl@\{
    BufferedReader in = new BufferedReader(new StringReader(Execute.toString(baos)));
    String line = null;
    StringBuffer val = new StringBuffer();
    while ((line = in.readLine()) != null) \{
        if (val.length() != 0) \{
            val.append(LINE_SEP);
        \}
        val.append(line);
    \} 
    getProject().setNewProperty(outputprop, val.toString());
\}" shape=ellipse]
120 [label="16:CtIfImpl@if (baos != null) \{
    BufferedReader in = new BufferedReader(new StringReader(Execute.toString(baos)));
    String line = null;
    StringBuffer val = new StringBuffer();
    while ((line = in.readLine()) != null) \{
        if (val.length() != 0) \{
            val.append(LINE_SEP);
        \}
        val.append(line);
    \} 
    getProject().setNewProperty(outputprop, val.toString());
\}" shape=ellipse]
121 [label="2:CtBlockImpl@\{
    int err = -1;
    err = exe.execute();
    if (exe.killedProcess()) \{
        log(\"Timeout: killed the sub-process\", MSG_WARN);
    \}
    maybeSetResultPropertyValue(err);
    if (err != 0) \{
        if (failOnError) \{
            throw new BuildException((taskType + \" returned: \") + err, location);
        \} else \{
            log(\"Result: \" + err, MSG_ERR);
        \}
    \}
    if (baos != null) \{
        BufferedReader in = new BufferedReader(new StringReader(Execute.toString(baos)));
        String line = null;
        StringBuffer val = new StringBuffer();
        while ((line = in.readLine()) != null) \{
            if (val.length() != 0) \{
                val.append(LINE_SEP);
            \}
            val.append(line);
        \} 
        getProject().setNewProperty(outputprop, val.toString());
    \}
\}" shape=ellipse]
122 [label="2:CtMethodImpl@protected final void runExecute(Execute exe) throws IOException \{
    int err = -1;
    err = exe.execute();
    if (exe.killedProcess()) \{
        log(\"Timeout: killed the sub-process\", MSG_WARN);
    \}
    maybeSetResultPropertyValue(err);
    if (err != 0) \{
        if (failOnError) \{
            throw new BuildException((taskType + \" returned: \") + err, location);
        \} else \{
            log(\"Result: \" + err, MSG_ERR);
        \}
    \}
    if (baos != null) \{
        BufferedReader in = new BufferedReader(new StringReader(Execute.toString(baos)));
        String line = null;
        StringBuffer val = new StringBuffer();
        while ((line = in.readLine()) != null) \{
            if (val.length() != 0) \{
                val.append(LINE_SEP);
            \}
            val.append(line);
        \} 
        getProject().setNewProperty(outputprop, val.toString());
    \}
\}" shape=ellipse]
123 [label="11:Delete@DELETE" shape=ellipse]
124 [label="11:Delete@DELETE" shape=ellipse]
125 [label="11:Insert@INSERT" shape=ellipse]
126 [label="11:CtInvocationImpl@getLocation()" shape=ellipse]
127 [label="11:Insert@INSERT" shape=ellipse]
128 [label="11:CtInvocationImpl@getTaskType()" shape=ellipse]
2 -> 3 [label="AST"];
7 -> 6 [label="AST"];
9 -> 8 [label="AST"];
9 -> 5 [label="AST"];
9 -> 7 [label="AST"];
10 -> 29 [label="Define-Use"];
10 -> 31 [label="Define-Use"];
10 -> 39 [label="Define-Use"];
10 -> 48 [label="Define-Use"];
13 -> 10 [label="Data Dep"];
14 -> 12 [label="AST"];
14 -> 13 [label="AST"];
14 -> 11 [label="AST"];
15 -> 10 [label="AST"];
15 -> 14 [label="AST"];
19 -> 17 [label="AST"];
19 -> 18 [label="AST"];
19 -> 16 [label="AST"];
19 -> 25 [label="Control Dep"];
19 -> 24 [label="Control Dep"];
19 -> 20 [label="Control Dep"];
19 -> 22 [label="Control Dep"];
19 -> 23 [label="Control Dep"];
24 -> 21 [label="AST"];
24 -> 20 [label="AST"];
24 -> 22 [label="AST"];
24 -> 23 [label="AST"];
25 -> 24 [label="AST"];
26 -> 19 [label="AST"];
26 -> 25 [label="AST"];
30 -> 28 [label="AST"];
30 -> 27 [label="AST"];
30 -> 29 [label="AST"];
33 -> 31 [label="AST"];
33 -> 32 [label="AST"];
33 -> 54 [label="Control Dep"];
33 -> 53 [label="Control Dep"];
33 -> 34 [label="Control Dep"];
34 -> 44 [label="Control Dep"];
34 -> 43 [label="Control Dep"];
34 -> 42 [label="Control Dep"];
34 -> 40 [label="Control Dep"];
34 -> 38 [label="Control Dep"];
34 -> 36 [label="Control Dep"];
34 -> 37 [label="Control Dep"];
34 -> 39 [label="Control Dep"];
34 -> 41 [label="Control Dep"];
34 -> 52 [label="Control Dep"];
34 -> 51 [label="Control Dep"];
34 -> 45 [label="Control Dep"];
34 -> 49 [label="Control Dep"];
34 -> 47 [label="Control Dep"];
34 -> 48 [label="Control Dep"];
34 -> 50 [label="Control Dep"];
36 -> 123 [label="Action"];
38 -> 36 [label="AST"];
38 -> 37 [label="AST"];
38 -> 127 [label="Action"];
40 -> 38 [label="AST"];
40 -> 39 [label="AST"];
41 -> 124 [label="Action"];
42 -> 40 [label="AST"];
42 -> 41 [label="AST"];
42 -> 125 [label="Action"];
43 -> 42 [label="AST"];
44 -> 43 [label="AST"];
49 -> 47 [label="AST"];
49 -> 48 [label="AST"];
51 -> 46 [label="AST"];
51 -> 45 [label="AST"];
51 -> 49 [label="AST"];
51 -> 50 [label="AST"];
52 -> 51 [label="AST"];
53 -> 34 [label="AST"];
53 -> 44 [label="AST"];
53 -> 52 [label="AST"];
54 -> 53 [label="AST"];
55 -> 33 [label="AST"];
55 -> 54 [label="AST"];
58 -> 56 [label="AST"];
58 -> 57 [label="AST"];
58 -> 119 [label="Control Dep"];
58 -> 70 [label="Control Dep"];
58 -> 68 [label="Control Dep"];
58 -> 67 [label="Control Dep"];
58 -> 66 [label="Control Dep"];
58 -> 62 [label="Control Dep"];
58 -> 64 [label="Control Dep"];
58 -> 65 [label="Control Dep"];
58 -> 74 [label="Control Dep"];
58 -> 72 [label="Control Dep"];
58 -> 79 [label="Control Dep"];
58 -> 77 [label="Control Dep"];
58 -> 107 [label="Control Dep"];
58 -> 87 [label="Control Dep"];
58 -> 85 [label="Control Dep"];
58 -> 80 [label="Control Dep"];
58 -> 84 [label="Control Dep"];
58 -> 81 [label="Control Dep"];
58 -> 83 [label="Control Dep"];
58 -> 86 [label="Control Dep"];
58 -> 118 [label="Control Dep"];
58 -> 108 [label="Control Dep"];
58 -> 112 [label="Control Dep"];
58 -> 110 [label="Control Dep"];
58 -> 113 [label="Control Dep"];
58 -> 117 [label="Control Dep"];
58 -> 114 [label="Control Dep"];
58 -> 116 [label="Control Dep"];
65 -> 69 [label="Data Dep"];
66 -> 63 [label="AST"];
66 -> 64 [label="AST"];
66 -> 62 [label="AST"];
66 -> 65 [label="AST"];
67 -> 66 [label="AST"];
68 -> 67 [label="AST"];
69 -> 83 [label="Define-Use"];
70 -> 69 [label="AST"];
70 -> 59 [label="AST"];
70 -> 68 [label="AST"];
73 -> 104 [label="Define-Use"];
74 -> 73 [label="AST"];
74 -> 71 [label="AST"];
74 -> 72 [label="AST"];
78 -> 90 [label="Define-Use"];
78 -> 96 [label="Define-Use"];
78 -> 103 [label="Define-Use"];
78 -> 116 [label="Define-Use"];
79 -> 78 [label="AST"];
79 -> 75 [label="AST"];
79 -> 77 [label="AST"];
80 -> 104 [label="Define-Use"];
83 -> 80 [label="Data Dep"];
84 -> 82 [label="AST"];
84 -> 83 [label="AST"];
84 -> 81 [label="AST"];
85 -> 80 [label="AST"];
85 -> 84 [label="AST"];
87 -> 85 [label="AST"];
87 -> 86 [label="AST"];
87 -> 106 [label="Control Dep"];
87 -> 100 [label="Control Dep"];
87 -> 93 [label="Control Dep"];
87 -> 91 [label="Control Dep"];
87 -> 88 [label="Control Dep"];
87 -> 90 [label="Control Dep"];
87 -> 92 [label="Control Dep"];
87 -> 105 [label="Control Dep"];
87 -> 101 [label="Control Dep"];
87 -> 103 [label="Control Dep"];
87 -> 104 [label="Control Dep"];
91 -> 89 [label="AST"];
91 -> 90 [label="AST"];
91 -> 88 [label="AST"];
93 -> 91 [label="AST"];
93 -> 92 [label="AST"];
93 -> 99 [label="Control Dep"];
93 -> 98 [label="Control Dep"];
93 -> 94 [label="Control Dep"];
93 -> 96 [label="Control Dep"];
93 -> 97 [label="Control Dep"];
98 -> 95 [label="AST"];
98 -> 96 [label="AST"];
98 -> 94 [label="AST"];
98 -> 97 [label="AST"];
99 -> 98 [label="AST"];
100 -> 93 [label="AST"];
100 -> 99 [label="AST"];
105 -> 102 [label="AST"];
105 -> 103 [label="AST"];
105 -> 101 [label="AST"];
105 -> 104 [label="AST"];
106 -> 100 [label="AST"];
106 -> 105 [label="AST"];
107 -> 87 [label="AST"];
107 -> 106 [label="AST"];
112 -> 111 [label="AST"];
112 -> 110 [label="AST"];
117 -> 115 [label="AST"];
117 -> 116 [label="AST"];
117 -> 114 [label="AST"];
118 -> 109 [label="AST"];
118 -> 112 [label="AST"];
118 -> 108 [label="AST"];
118 -> 113 [label="AST"];
118 -> 117 [label="AST"];
119 -> 70 [label="AST"];
119 -> 74 [label="AST"];
119 -> 79 [label="AST"];
119 -> 107 [label="AST"];
119 -> 118 [label="AST"];
120 -> 58 [label="AST"];
120 -> 119 [label="AST"];
121 -> 9 [label="AST"];
121 -> 15 [label="AST"];
121 -> 26 [label="AST"];
121 -> 30 [label="AST"];
121 -> 55 [label="AST"];
121 -> 120 [label="AST"];
122 -> 1 [label="AST"];
122 -> 0 [label="AST"];
122 -> 2 [label="AST"];
122 -> 4 [label="AST"];
122 -> 121 [label="AST"];
125 -> 126 [label="Action"];
127 -> 128 [label="Action"];
}