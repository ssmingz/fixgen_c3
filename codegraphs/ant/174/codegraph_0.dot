digraph "cat#?,ResourceCollection" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@cat" shape=ellipse]
2 [label="2:CtParameterImpl@ResourceCollection c" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@ResourceCollection" shape=ellipse]
4 [label="3:CtTypeReferenceImpl@OutputStream" shape=ellipse]
5 [label="3:CtLiteralImpl@null" shape=ellipse]
6 [label="3:CtVirtualElement@os" shape=ellipse]
7 [label="3:CtLocalVariableImpl@OutputStream os = null" shape=ellipse]
8 [label="4:CtVirtualElement@char[]" shape=ellipse]
9 [label="4:CtArrayTypeReferenceImpl@char[]" shape=ellipse]
10 [label="4:CtNewArrayImpl@new char[BUFFER_SIZE]" shape=ellipse]
11 [label="4:CtFieldReadImpl@BUFFER_SIZE" shape=ellipse]
12 [label="4:CtVirtualElement@buffer" shape=ellipse]
13 [label="4:CtLocalVariableImpl@char[] buffer = new char[BUFFER_SIZE]" shape=ellipse]
14 [label="6:CtTypeReferenceImpl@PrintWriter" shape=ellipse]
15 [label="6:CtLiteralImpl@null" shape=ellipse]
16 [label="6:CtVirtualElement@writer" shape=ellipse]
17 [label="6:CtLocalVariableImpl@PrintWriter writer = null" shape=ellipse]
18 [label="7:CtFieldReadImpl@outputWriter" shape=ellipse]
19 [label="7:CtLiteralImpl@null" shape=ellipse]
20 [label="7:CtBinaryOperatorImpl@outputWriter != null" shape=ellipse]
21 [label="8:CtVariableWriteImpl@writer" shape=ellipse]
22 [label="8:CtTypeReferenceImpl@PrintWriter" shape=ellipse]
23 [label="8:CtFieldReadImpl@outputWriter" shape=ellipse]
24 [label="8:CtConstructorCallImpl@new PrintWriter(outputWriter)" shape=ellipse]
25 [label="8:CtAssignmentImpl@writer = new PrintWriter(outputWriter)" shape=ellipse]
26 [label="7:CtBlockImpl@\{
    writer = new PrintWriter(outputWriter);
\}" shape=ellipse]
27 [label="10:CtFieldReadImpl@destinationFile" shape=ellipse]
28 [label="10:CtLiteralImpl@null" shape=ellipse]
29 [label="10:CtBinaryOperatorImpl@destinationFile == null" shape=ellipse]
30 [label="11:CtVariableWriteImpl@os" shape=ellipse]
31 [label="11:CtTypeReferenceImpl@LogOutputStream" shape=ellipse]
32 [label="11:CtThisAccessImpl@this" shape=ellipse]
33 [label="11:CtFieldReadImpl@Project.MSG_WARN" shape=ellipse]
34 [label="11:CtConstructorCallImpl@new LogOutputStream(this, Project.MSG_WARN)" shape=ellipse]
35 [label="11:CtAssignmentImpl@os = new LogOutputStream(this, Project.MSG_WARN)" shape=ellipse]
36 [label="10:CtBlockImpl@\{
    os = new LogOutputStream(this, Project.MSG_WARN);
\}" shape=ellipse]
37 [label="13:CtTypeReferenceImpl@File" shape=ellipse]
38 [label="13:CtExecutableReferenceImpl@getParentFile()" shape=ellipse]
39 [label="13:CtVirtualElement@getParentFile" shape=ellipse]
40 [label="13:CtFieldReadImpl@destinationFile" shape=ellipse]
41 [label="13:CtInvocationImpl@destinationFile.getParentFile()" shape=ellipse]
42 [label="13:CtVirtualElement@parent" shape=ellipse]
43 [label="13:CtLocalVariableImpl@File parent = destinationFile.getParentFile()" shape=ellipse]
44 [label="14:CtExecutableReferenceImpl@exists()" shape=ellipse]
45 [label="14:CtVirtualElement@exists" shape=ellipse]
46 [label="14:CtVariableReadImpl@parent" shape=ellipse]
47 [label="14:CtInvocationImpl@parent.exists()" shape=ellipse]
48 [label="14:CtUnaryOperatorImpl@!parent.exists()" shape=ellipse]
49 [label="15:CtExecutableReferenceImpl@mkdirs()" shape=ellipse]
50 [label="15:CtVirtualElement@mkdirs" shape=ellipse]
51 [label="15:CtVariableReadImpl@parent" shape=ellipse]
52 [label="15:CtInvocationImpl@parent.mkdirs()" shape=ellipse]
53 [label="14:CtBlockImpl@\{
    parent.mkdirs();
\}" shape=ellipse]
54 [label="14:CtIfImpl@if (!parent.exists()) \{
    parent.mkdirs();
\}" shape=ellipse]
55 [label="17:CtVariableWriteImpl@os" shape=ellipse]
56 [label="17:CtTypeReferenceImpl@FileOutputStream" shape=ellipse]
57 [label="17:CtExecutableReferenceImpl@getAbsolutePath()" shape=ellipse]
58 [label="17:CtVirtualElement@getAbsolutePath" shape=ellipse]
59 [label="17:CtFieldReadImpl@destinationFile" shape=ellipse]
60 [label="17:CtInvocationImpl@destinationFile.getAbsolutePath()" shape=ellipse]
61 [label="17:CtFieldReadImpl@append" shape=ellipse]
62 [label="17:CtConstructorCallImpl@new FileOutputStream(destinationFile.getAbsolutePath(), append)" shape=ellipse]
63 [label="17:CtAssignmentImpl@os = new FileOutputStream(destinationFile.getAbsolutePath(), append)" shape=ellipse]
64 [label="12:CtBlockImpl@\{
    File parent = destinationFile.getParentFile();
    if (!parent.exists()) \{
        parent.mkdirs();
    \}
    os = new FileOutputStream(destinationFile.getAbsolutePath(), append);
\}" shape=ellipse]
65 [label="10:CtIfImpl@if (destinationFile == null) \{
    os = new LogOutputStream(this, Project.MSG_WARN);
\} else \{
    File parent = destinationFile.getParentFile();
    if (!parent.exists()) \{
        parent.mkdirs();
    \}
    os = new FileOutputStream(destinationFile.getAbsolutePath(), append);
\}" shape=ellipse]
66 [label="19:CtFieldReadImpl@outputEncoding" shape=ellipse]
67 [label="19:CtLiteralImpl@null" shape=ellipse]
68 [label="19:CtBinaryOperatorImpl@outputEncoding == null" shape=ellipse]
69 [label="20:CtVariableWriteImpl@writer" shape=ellipse]
70 [label="20:CtTypeReferenceImpl@PrintWriter" shape=ellipse]
71 [label="20:CtTypeReferenceImpl@BufferedWriter" shape=ellipse]
72 [label="20:CtTypeReferenceImpl@OutputStreamWriter" shape=ellipse]
73 [label="20:CtVariableReadImpl@os" shape=ellipse]
74 [label="20:CtConstructorCallImpl@new OutputStreamWriter(os)" shape=ellipse]
75 [label="20:CtConstructorCallImpl@new BufferedWriter(new OutputStreamWriter(os))" shape=ellipse]
76 [label="20:CtConstructorCallImpl@new PrintWriter(new BufferedWriter(new OutputStreamWriter(os)))" shape=ellipse]
77 [label="20:CtAssignmentImpl@writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(os)))" shape=ellipse]
78 [label="19:CtBlockImpl@\{
    writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(os)));
\}" shape=ellipse]
79 [label="22:CtVariableWriteImpl@writer" shape=ellipse]
80 [label="22:CtTypeReferenceImpl@PrintWriter" shape=ellipse]
81 [label="22:CtTypeReferenceImpl@BufferedWriter" shape=ellipse]
82 [label="22:CtTypeReferenceImpl@OutputStreamWriter" shape=ellipse]
83 [label="22:CtVariableReadImpl@os" shape=ellipse]
84 [label="22:CtFieldReadImpl@outputEncoding" shape=ellipse]
85 [label="22:CtConstructorCallImpl@new OutputStreamWriter(os, outputEncoding)" shape=ellipse]
86 [label="22:CtConstructorCallImpl@new BufferedWriter(new OutputStreamWriter(os, outputEncoding))" shape=ellipse]
87 [label="22:CtConstructorCallImpl@new PrintWriter(new BufferedWriter(new OutputStreamWriter(os, outputEncoding)))" shape=ellipse]
88 [label="22:CtAssignmentImpl@writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(os, outputEncoding)))" shape=ellipse]
89 [label="21:CtBlockImpl@\{
    writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(os, outputEncoding)));
\}" shape=ellipse]
90 [label="19:CtIfImpl@if (outputEncoding == null) \{
    writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(os)));
\} else \{
    writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(os, outputEncoding)));
\}" shape=ellipse]
91 [label="9:CtBlockImpl@\{
    if (destinationFile == null) \{
        os = new LogOutputStream(this, Project.MSG_WARN);
    \} else \{
        File parent = destinationFile.getParentFile();
        if (!parent.exists()) \{
            parent.mkdirs();
        \}
        os = new FileOutputStream(destinationFile.getAbsolutePath(), append);
    \}
    if (outputEncoding == null) \{
        writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(os)));
    \} else \{
        writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(os, outputEncoding)));
    \}
\}" shape=ellipse]
92 [label="7:CtIfImpl@if (outputWriter != null) \{
    writer = new PrintWriter(outputWriter);
\} else \{
    if (destinationFile == null) \{
        os = new LogOutputStream(this, Project.MSG_WARN);
    \} else \{
        File parent = destinationFile.getParentFile();
        if (!parent.exists()) \{
            parent.mkdirs();
        \}
        os = new FileOutputStream(destinationFile.getAbsolutePath(), append);
    \}
    if (outputEncoding == null) \{
        writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(os)));
    \} else \{
        writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(os, outputEncoding)));
    \}
\}" shape=ellipse]
93 [label="25:CtFieldReadImpl@header" shape=ellipse]
94 [label="25:CtLiteralImpl@null" shape=ellipse]
95 [label="25:CtBinaryOperatorImpl@header != null" shape=ellipse]
96 [label="26:CtExecutableReferenceImpl@getFiltering()" shape=ellipse]
97 [label="26:CtVirtualElement@getFiltering" shape=ellipse]
98 [label="26:CtFieldReadImpl@header" shape=ellipse]
99 [label="26:CtInvocationImpl@header.getFiltering()" shape=ellipse]
100 [label="27:CtExecutableReferenceImpl@concatenate(char[],<unknown>,StringReader)" shape=ellipse]
101 [label="27:CtVirtualElement@concatenate" shape=ellipse]
102 [label="27:CtVariableReadImpl@buffer" shape=ellipse]
103 [label="27:CtVariableReadImpl@writer" shape=ellipse]
104 [label="27:CtTypeReferenceImpl@StringReader" shape=ellipse]
105 [label="27:CtExecutableReferenceImpl@getValue()" shape=ellipse]
106 [label="27:CtVirtualElement@getValue" shape=ellipse]
107 [label="27:CtFieldReadImpl@header" shape=ellipse]
108 [label="27:CtInvocationImpl@header.getValue()" shape=ellipse]
109 [label="27:CtConstructorCallImpl@new StringReader(header.getValue())" shape=ellipse]
110 [label="27:CtInvocationImpl@concatenate(buffer, writer, new StringReader(header.getValue()))" shape=ellipse]
111 [label="26:CtBlockImpl@\{
    concatenate(buffer, writer, new StringReader(header.getValue()));
\}" shape=ellipse]
112 [label="29:CtExecutableReferenceImpl@print()" shape=ellipse]
113 [label="29:CtVirtualElement@print" shape=ellipse]
114 [label="29:CtVariableReadImpl@writer" shape=ellipse]
115 [label="29:CtExecutableReferenceImpl@getValue()" shape=ellipse]
116 [label="29:CtVirtualElement@getValue" shape=ellipse]
117 [label="29:CtFieldReadImpl@header" shape=ellipse]
118 [label="29:CtInvocationImpl@header.getValue()" shape=ellipse]
119 [label="29:CtInvocationImpl@writer.print(header.getValue())" shape=ellipse]
120 [label="28:CtBlockImpl@\{
    writer.print(header.getValue());
\}" shape=ellipse]
121 [label="26:CtIfImpl@if (header.getFiltering()) \{
    concatenate(buffer, writer, new StringReader(header.getValue()));
\} else \{
    writer.print(header.getValue());
\}" shape=ellipse]
122 [label="25:CtBlockImpl@\{
    if (header.getFiltering()) \{
        concatenate(buffer, writer, new StringReader(header.getValue()));
    \} else \{
        writer.print(header.getValue());
    \}
\}" shape=ellipse]
123 [label="25:CtIfImpl@if (header != null) \{
    if (header.getFiltering()) \{
        concatenate(buffer, writer, new StringReader(header.getValue()));
    \} else \{
        writer.print(header.getValue());
    \}
\}" shape=ellipse]
124 [label="32:CtExecutableReferenceImpl@size()" shape=ellipse]
125 [label="32:CtVirtualElement@size" shape=ellipse]
126 [label="32:CtVariableReadImpl@c" shape=ellipse]
127 [label="32:CtInvocationImpl@c.size()" shape=ellipse]
128 [label="32:CtLiteralImpl@0" shape=ellipse]
129 [label="32:CtBinaryOperatorImpl@c.size() > 0" shape=ellipse]
130 [label="33:CtExecutableReferenceImpl@concatenate(char[],<unknown>,MultiReader)" shape=ellipse]
131 [label="33:CtVirtualElement@concatenate" shape=ellipse]
132 [label="33:CtVariableReadImpl@buffer" shape=ellipse]
133 [label="33:CtVariableReadImpl@writer" shape=ellipse]
134 [label="33:CtTypeReferenceImpl@MultiReader" shape=ellipse]
135 [label="33:CtVariableReadImpl@c" shape=ellipse]
136 [label="33:CtConstructorCallImpl@new MultiReader(c)" shape=ellipse]
137 [label="33:CtInvocationImpl@concatenate(buffer, writer, new MultiReader(c))" shape=ellipse]
138 [label="32:CtBlockImpl@\{
    concatenate(buffer, writer, new MultiReader(c));
\}" shape=ellipse]
139 [label="32:CtIfImpl@if (c.size() > 0) \{
    concatenate(buffer, writer, new MultiReader(c));
\}" shape=ellipse]
140 [label="35:CtFieldReadImpl@footer" shape=ellipse]
141 [label="35:CtLiteralImpl@null" shape=ellipse]
142 [label="35:CtBinaryOperatorImpl@footer != null" shape=ellipse]
143 [label="36:CtExecutableReferenceImpl@getFiltering()" shape=ellipse]
144 [label="36:CtVirtualElement@getFiltering" shape=ellipse]
145 [label="36:CtFieldReadImpl@footer" shape=ellipse]
146 [label="36:CtInvocationImpl@footer.getFiltering()" shape=ellipse]
147 [label="37:CtExecutableReferenceImpl@concatenate(char[],<unknown>,StringReader)" shape=ellipse]
148 [label="37:CtVirtualElement@concatenate" shape=ellipse]
149 [label="37:CtVariableReadImpl@buffer" shape=ellipse]
150 [label="37:CtVariableReadImpl@writer" shape=ellipse]
151 [label="37:CtTypeReferenceImpl@StringReader" shape=ellipse]
152 [label="37:CtExecutableReferenceImpl@getValue()" shape=ellipse]
153 [label="37:CtVirtualElement@getValue" shape=ellipse]
154 [label="37:CtFieldReadImpl@footer" shape=ellipse]
155 [label="37:CtInvocationImpl@footer.getValue()" shape=ellipse]
156 [label="37:CtConstructorCallImpl@new StringReader(footer.getValue())" shape=ellipse]
157 [label="37:CtInvocationImpl@concatenate(buffer, writer, new StringReader(footer.getValue()))" shape=ellipse]
158 [label="36:CtBlockImpl@\{
    concatenate(buffer, writer, new StringReader(footer.getValue()));
\}" shape=ellipse]
159 [label="39:CtExecutableReferenceImpl@print()" shape=ellipse]
160 [label="39:CtVirtualElement@print" shape=ellipse]
161 [label="39:CtVariableReadImpl@writer" shape=ellipse]
162 [label="39:CtExecutableReferenceImpl@getValue()" shape=ellipse]
163 [label="39:CtVirtualElement@getValue" shape=ellipse]
164 [label="39:CtFieldReadImpl@footer" shape=ellipse]
165 [label="39:CtInvocationImpl@footer.getValue()" shape=ellipse]
166 [label="39:CtInvocationImpl@writer.print(footer.getValue())" shape=ellipse]
167 [label="38:CtBlockImpl@\{
    writer.print(footer.getValue());
\}" shape=ellipse]
168 [label="36:CtIfImpl@if (footer.getFiltering()) \{
    concatenate(buffer, writer, new StringReader(footer.getValue()));
\} else \{
    writer.print(footer.getValue());
\}" shape=ellipse]
169 [label="35:CtBlockImpl@\{
    if (footer.getFiltering()) \{
        concatenate(buffer, writer, new StringReader(footer.getValue()));
    \} else \{
        writer.print(footer.getValue());
    \}
\}" shape=ellipse]
170 [label="35:CtIfImpl@if (footer != null) \{
    if (footer.getFiltering()) \{
        concatenate(buffer, writer, new StringReader(footer.getValue()));
    \} else \{
        writer.print(footer.getValue());
    \}
\}" shape=ellipse]
171 [label="42:CtExecutableReferenceImpl@flush()" shape=ellipse]
172 [label="42:CtVirtualElement@flush" shape=ellipse]
173 [label="42:CtVariableReadImpl@writer" shape=ellipse]
174 [label="42:CtInvocationImpl@writer.flush()" shape=ellipse]
175 [label="43:CtVariableReadImpl@os" shape=ellipse]
176 [label="43:CtLiteralImpl@null" shape=ellipse]
177 [label="43:CtBinaryOperatorImpl@os != null" shape=ellipse]
178 [label="44:CtExecutableReferenceImpl@flush()" shape=ellipse]
179 [label="44:CtVirtualElement@flush" shape=ellipse]
180 [label="44:CtVariableReadImpl@os" shape=ellipse]
181 [label="44:CtInvocationImpl@os.flush()" shape=ellipse]
182 [label="43:CtBlockImpl@\{
    os.flush();
\}" shape=ellipse]
183 [label="43:CtIfImpl@if (os != null) \{
    os.flush();
\}" shape=ellipse]
184 [label="5:CtBlockImpl@\{
    PrintWriter writer = null;
    if (outputWriter != null) \{
        writer = new PrintWriter(outputWriter);
    \} else \{
        if (destinationFile == null) \{
            os = new LogOutputStream(this, Project.MSG_WARN);
        \} else \{
            File parent = destinationFile.getParentFile();
            if (!parent.exists()) \{
                parent.mkdirs();
            \}
            os = new FileOutputStream(destinationFile.getAbsolutePath(), append);
        \}
        if (outputEncoding == null) \{
            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(os)));
        \} else \{
            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(os, outputEncoding)));
        \}
    \}
    if (header != null) \{
        if (header.getFiltering()) \{
            concatenate(buffer, writer, new StringReader(header.getValue()));
        \} else \{
            writer.print(header.getValue());
        \}
    \}
    if (c.size() > 0) \{
        concatenate(buffer, writer, new MultiReader(c));
    \}
    if (footer != null) \{
        if (footer.getFiltering()) \{
            concatenate(buffer, writer, new StringReader(footer.getValue()));
        \} else \{
            writer.print(footer.getValue());
        \}
    \}
    writer.flush();
    if (os != null) \{
        os.flush();
    \}
\}" shape=ellipse]
185 [label="46:CtVirtualElement@ioex" shape=ellipse]
186 [label="46:CtTypeReferenceImpl@IOException" shape=ellipse]
187 [label="46:CtCatchVariableImpl@IOException ioex" shape=ellipse]
188 [label="47:CtTypeReferenceImpl@BuildException" shape=ellipse]
189 [label="47:CtLiteralImpl@\"Error while concatenating: \"" shape=ellipse]
190 [label="47:CtExecutableReferenceImpl@getMessage()" shape=ellipse]
191 [label="47:CtVirtualElement@getMessage" shape=ellipse]
192 [label="47:CtVariableReadImpl@ioex" shape=ellipse]
193 [label="47:CtInvocationImpl@ioex.getMessage()" shape=ellipse]
194 [label="47:CtBinaryOperatorImpl@\"Error while concatenating: \" + ioex.getMessage()" shape=ellipse]
195 [label="47:CtVariableReadImpl@ioex" shape=ellipse]
196 [label="47:CtConstructorCallImpl@new BuildException(\"Error while concatenating: \" + ioex.getMessage(), ioex)" shape=ellipse]
197 [label="47:CtThrowImpl@throw new BuildException(\"Error while concatenating: \" + ioex.getMessage(), ioex)" shape=ellipse]
198 [label="46:CtBlockImpl@\{
    throw new BuildException(\"Error while concatenating: \" + ioex.getMessage(), ioex);
\}" shape=ellipse]
199 [label="46:CtCatchImpl@ catch (IOException ioex) \{
    throw new BuildException(\"Error while concatenating: \" + ioex.getMessage(), ioex);
\}" shape=ellipse]
200 [label="49:CtExecutableReferenceImpl@close(OutputStream)" shape=ellipse]
201 [label="49:CtVirtualElement@close" shape=ellipse]
202 [label="49:CtTypeAccessImpl@FILE_UTILS" shape=ellipse]
203 [label="49:CtVariableReadImpl@os" shape=ellipse]
204 [label="49:CtInvocationImpl@FILE_UTILS.close(os)" shape=ellipse]
205 [label="48:CtBlockImpl@\{
    FILE_UTILS.close(os);
\}" shape=ellipse]
206 [label="5:CtTryImpl@try \{
    PrintWriter writer = null;
    if (outputWriter != null) \{
        writer = new PrintWriter(outputWriter);
    \} else \{
        if (destinationFile == null) \{
            os = new LogOutputStream(this, Project.MSG_WARN);
        \} else \{
            File parent = destinationFile.getParentFile();
            if (!parent.exists()) \{
                parent.mkdirs();
            \}
            os = new FileOutputStream(destinationFile.getAbsolutePath(), append);
        \}
        if (outputEncoding == null) \{
            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(os)));
        \} else \{
            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(os, outputEncoding)));
        \}
    \}
    if (header != null) \{
        if (header.getFiltering()) \{
            concatenate(buffer, writer, new StringReader(header.getValue()));
        \} else \{
            writer.print(header.getValue());
        \}
    \}
    if (c.size() > 0) \{
        concatenate(buffer, writer, new MultiReader(c));
    \}
    if (footer != null) \{
        if (footer.getFiltering()) \{
            concatenate(buffer, writer, new StringReader(footer.getValue()));
        \} else \{
            writer.print(footer.getValue());
        \}
    \}
    writer.flush();
    if (os != null) \{
        os.flush();
    \}
\} catch (IOException ioex) \{
    throw new BuildException(\"Error while concatenating: \" + ioex.getMessage(), ioex);
\} finally \{
    FILE_UTILS.close(os);
\}" shape=ellipse]
207 [label="2:CtBlockImpl@\{
    OutputStream os = null;
    char[] buffer = new char[BUFFER_SIZE];
    try \{
        PrintWriter writer = null;
        if (outputWriter != null) \{
            writer = new PrintWriter(outputWriter);
        \} else \{
            if (destinationFile == null) \{
                os = new LogOutputStream(this, Project.MSG_WARN);
            \} else \{
                File parent = destinationFile.getParentFile();
                if (!parent.exists()) \{
                    parent.mkdirs();
                \}
                os = new FileOutputStream(destinationFile.getAbsolutePath(), append);
            \}
            if (outputEncoding == null) \{
                writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(os)));
            \} else \{
                writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(os, outputEncoding)));
            \}
        \}
        if (header != null) \{
            if (header.getFiltering()) \{
                concatenate(buffer, writer, new StringReader(header.getValue()));
            \} else \{
                writer.print(header.getValue());
            \}
        \}
        if (c.size() > 0) \{
            concatenate(buffer, writer, new MultiReader(c));
        \}
        if (footer != null) \{
            if (footer.getFiltering()) \{
                concatenate(buffer, writer, new StringReader(footer.getValue()));
            \} else \{
                writer.print(footer.getValue());
            \}
        \}
        writer.flush();
        if (os != null) \{
            os.flush();
        \}
    \} catch (IOException ioex) \{
        throw new BuildException(\"Error while concatenating: \" + ioex.getMessage(), ioex);
    \} finally \{
        FILE_UTILS.close(os);
    \}
\}" shape=ellipse]
208 [label="2:CtMethodImpl@private void cat(ResourceCollection c) \{
    OutputStream os = null;
    char[] buffer = new char[BUFFER_SIZE];
    try \{
        PrintWriter writer = null;
        if (outputWriter != null) \{
            writer = new PrintWriter(outputWriter);
        \} else \{
            if (destinationFile == null) \{
                os = new LogOutputStream(this, Project.MSG_WARN);
            \} else \{
                File parent = destinationFile.getParentFile();
                if (!parent.exists()) \{
                    parent.mkdirs();
                \}
                os = new FileOutputStream(destinationFile.getAbsolutePath(), append);
            \}
            if (outputEncoding == null) \{
                writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(os)));
            \} else \{
                writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(os, outputEncoding)));
            \}
        \}
        if (header != null) \{
            if (header.getFiltering()) \{
                concatenate(buffer, writer, new StringReader(header.getValue()));
            \} else \{
                writer.print(header.getValue());
            \}
        \}
        if (c.size() > 0) \{
            concatenate(buffer, writer, new MultiReader(c));
        \}
        if (footer != null) \{
            if (footer.getFiltering()) \{
                concatenate(buffer, writer, new StringReader(footer.getValue()));
            \} else \{
                writer.print(footer.getValue());
            \}
        \}
        writer.flush();
        if (os != null) \{
            os.flush();
        \}
    \} catch (IOException ioex) \{
        throw new BuildException(\"Error while concatenating: \" + ioex.getMessage(), ioex);
    \} finally \{
        FILE_UTILS.close(os);
    \}
\}" shape=ellipse]
209 [label="49:Update@UPDATE" shape=ellipse]
210 [label="49:CtTypeAccessImpl@FileUtils" shape=ellipse]
2 -> 3 [label="AST"];
6 -> 73 [label="Define-Use"];
6 -> 83 [label="Define-Use"];
6 -> 175 [label="Define-Use"];
6 -> 180 [label="Define-Use"];
6 -> 203 [label="Define-Use"];
7 -> 6 [label="AST"];
7 -> 4 [label="AST"];
7 -> 5 [label="AST"];
9 -> 8 [label="AST"];
10 -> 11 [label="AST"];
11 -> 12 [label="Data Dep"];
12 -> 102 [label="Define-Use"];
12 -> 132 [label="Define-Use"];
12 -> 149 [label="Define-Use"];
13 -> 12 [label="AST"];
13 -> 9 [label="AST"];
13 -> 10 [label="AST"];
16 -> 103 [label="Define-Use"];
16 -> 114 [label="Define-Use"];
16 -> 133 [label="Define-Use"];
16 -> 150 [label="Define-Use"];
16 -> 161 [label="Define-Use"];
16 -> 173 [label="Define-Use"];
17 -> 16 [label="AST"];
17 -> 14 [label="AST"];
17 -> 15 [label="AST"];
20 -> 18 [label="AST"];
20 -> 19 [label="AST"];
20 -> 26 [label="Control Dep"];
20 -> 25 [label="Control Dep"];
20 -> 21 [label="Control Dep"];
20 -> 24 [label="Control Dep"];
20 -> 23 [label="Control Dep"];
20 -> 91 [label="Control Dep"];
20 -> 65 [label="Control Dep"];
20 -> 29 [label="Control Dep"];
20 -> 27 [label="Control Dep"];
20 -> 28 [label="Control Dep"];
20 -> 90 [label="Control Dep"];
20 -> 68 [label="Control Dep"];
20 -> 66 [label="Control Dep"];
20 -> 67 [label="Control Dep"];
21 -> 103 [label="Define-Use"];
21 -> 114 [label="Define-Use"];
21 -> 133 [label="Define-Use"];
21 -> 150 [label="Define-Use"];
21 -> 161 [label="Define-Use"];
21 -> 173 [label="Define-Use"];
23 -> 21 [label="Data Dep"];
24 -> 23 [label="AST"];
25 -> 21 [label="AST"];
25 -> 24 [label="AST"];
26 -> 25 [label="AST"];
29 -> 27 [label="AST"];
29 -> 28 [label="AST"];
29 -> 36 [label="Control Dep"];
29 -> 35 [label="Control Dep"];
29 -> 30 [label="Control Dep"];
29 -> 34 [label="Control Dep"];
29 -> 32 [label="Control Dep"];
29 -> 33 [label="Control Dep"];
29 -> 64 [label="Control Dep"];
29 -> 43 [label="Control Dep"];
29 -> 41 [label="Control Dep"];
29 -> 38 [label="Control Dep"];
29 -> 40 [label="Control Dep"];
29 -> 54 [label="Control Dep"];
29 -> 48 [label="Control Dep"];
29 -> 47 [label="Control Dep"];
29 -> 44 [label="Control Dep"];
29 -> 46 [label="Control Dep"];
29 -> 63 [label="Control Dep"];
29 -> 55 [label="Control Dep"];
29 -> 62 [label="Control Dep"];
29 -> 60 [label="Control Dep"];
29 -> 57 [label="Control Dep"];
29 -> 59 [label="Control Dep"];
29 -> 61 [label="Control Dep"];
30 -> 73 [label="Define-Use"];
30 -> 83 [label="Define-Use"];
30 -> 175 [label="Define-Use"];
30 -> 180 [label="Define-Use"];
30 -> 203 [label="Define-Use"];
32 -> 30 [label="Data Dep"];
33 -> 30 [label="Data Dep"];
34 -> 32 [label="AST"];
34 -> 33 [label="AST"];
35 -> 30 [label="AST"];
35 -> 34 [label="AST"];
36 -> 35 [label="AST"];
40 -> 42 [label="Data Dep"];
41 -> 39 [label="AST"];
41 -> 40 [label="AST"];
41 -> 38 [label="AST"];
42 -> 46 [label="Define-Use"];
42 -> 51 [label="Define-Use"];
43 -> 42 [label="AST"];
43 -> 37 [label="AST"];
43 -> 41 [label="AST"];
47 -> 45 [label="AST"];
47 -> 46 [label="AST"];
47 -> 44 [label="AST"];
48 -> 47 [label="AST"];
48 -> 53 [label="Control Dep"];
48 -> 52 [label="Control Dep"];
48 -> 49 [label="Control Dep"];
48 -> 51 [label="Control Dep"];
52 -> 50 [label="AST"];
52 -> 51 [label="AST"];
52 -> 49 [label="AST"];
53 -> 52 [label="AST"];
54 -> 48 [label="AST"];
54 -> 53 [label="AST"];
55 -> 73 [label="Define-Use"];
55 -> 83 [label="Define-Use"];
55 -> 175 [label="Define-Use"];
55 -> 180 [label="Define-Use"];
55 -> 203 [label="Define-Use"];
59 -> 55 [label="Data Dep"];
60 -> 58 [label="AST"];
60 -> 59 [label="AST"];
60 -> 57 [label="AST"];
61 -> 55 [label="Data Dep"];
62 -> 60 [label="AST"];
62 -> 61 [label="AST"];
63 -> 55 [label="AST"];
63 -> 62 [label="AST"];
64 -> 43 [label="AST"];
64 -> 54 [label="AST"];
64 -> 63 [label="AST"];
65 -> 29 [label="AST"];
65 -> 36 [label="AST"];
65 -> 64 [label="AST"];
68 -> 66 [label="AST"];
68 -> 67 [label="AST"];
68 -> 78 [label="Control Dep"];
68 -> 77 [label="Control Dep"];
68 -> 69 [label="Control Dep"];
68 -> 76 [label="Control Dep"];
68 -> 75 [label="Control Dep"];
68 -> 74 [label="Control Dep"];
68 -> 73 [label="Control Dep"];
68 -> 89 [label="Control Dep"];
68 -> 88 [label="Control Dep"];
68 -> 79 [label="Control Dep"];
68 -> 87 [label="Control Dep"];
68 -> 86 [label="Control Dep"];
68 -> 85 [label="Control Dep"];
68 -> 83 [label="Control Dep"];
68 -> 84 [label="Control Dep"];
69 -> 103 [label="Define-Use"];
69 -> 114 [label="Define-Use"];
69 -> 133 [label="Define-Use"];
69 -> 150 [label="Define-Use"];
69 -> 161 [label="Define-Use"];
69 -> 173 [label="Define-Use"];
73 -> 69 [label="Data Dep"];
74 -> 73 [label="AST"];
75 -> 74 [label="AST"];
76 -> 75 [label="AST"];
77 -> 69 [label="AST"];
77 -> 76 [label="AST"];
78 -> 77 [label="AST"];
79 -> 103 [label="Define-Use"];
79 -> 114 [label="Define-Use"];
79 -> 133 [label="Define-Use"];
79 -> 150 [label="Define-Use"];
79 -> 161 [label="Define-Use"];
79 -> 173 [label="Define-Use"];
83 -> 79 [label="Data Dep"];
84 -> 79 [label="Data Dep"];
85 -> 83 [label="AST"];
85 -> 84 [label="AST"];
86 -> 85 [label="AST"];
87 -> 86 [label="AST"];
88 -> 79 [label="AST"];
88 -> 87 [label="AST"];
89 -> 88 [label="AST"];
90 -> 68 [label="AST"];
90 -> 78 [label="AST"];
90 -> 89 [label="AST"];
91 -> 65 [label="AST"];
91 -> 90 [label="AST"];
92 -> 20 [label="AST"];
92 -> 26 [label="AST"];
92 -> 91 [label="AST"];
95 -> 93 [label="AST"];
95 -> 94 [label="AST"];
95 -> 122 [label="Control Dep"];
95 -> 121 [label="Control Dep"];
95 -> 99 [label="Control Dep"];
95 -> 96 [label="Control Dep"];
95 -> 98 [label="Control Dep"];
99 -> 97 [label="AST"];
99 -> 98 [label="AST"];
99 -> 96 [label="AST"];
99 -> 111 [label="Control Dep"];
99 -> 110 [label="Control Dep"];
99 -> 100 [label="Control Dep"];
99 -> 102 [label="Control Dep"];
99 -> 103 [label="Control Dep"];
99 -> 109 [label="Control Dep"];
99 -> 108 [label="Control Dep"];
99 -> 105 [label="Control Dep"];
99 -> 107 [label="Control Dep"];
99 -> 120 [label="Control Dep"];
99 -> 119 [label="Control Dep"];
99 -> 112 [label="Control Dep"];
99 -> 114 [label="Control Dep"];
99 -> 118 [label="Control Dep"];
99 -> 115 [label="Control Dep"];
99 -> 117 [label="Control Dep"];
108 -> 106 [label="AST"];
108 -> 107 [label="AST"];
108 -> 105 [label="AST"];
109 -> 108 [label="AST"];
110 -> 101 [label="AST"];
110 -> 100 [label="AST"];
110 -> 102 [label="AST"];
110 -> 103 [label="AST"];
110 -> 109 [label="AST"];
111 -> 110 [label="AST"];
118 -> 116 [label="AST"];
118 -> 117 [label="AST"];
118 -> 115 [label="AST"];
119 -> 113 [label="AST"];
119 -> 114 [label="AST"];
119 -> 112 [label="AST"];
119 -> 118 [label="AST"];
120 -> 119 [label="AST"];
121 -> 99 [label="AST"];
121 -> 111 [label="AST"];
121 -> 120 [label="AST"];
122 -> 121 [label="AST"];
123 -> 95 [label="AST"];
123 -> 122 [label="AST"];
127 -> 125 [label="AST"];
127 -> 126 [label="AST"];
127 -> 124 [label="AST"];
129 -> 127 [label="AST"];
129 -> 128 [label="AST"];
129 -> 138 [label="Control Dep"];
129 -> 137 [label="Control Dep"];
129 -> 130 [label="Control Dep"];
129 -> 132 [label="Control Dep"];
129 -> 133 [label="Control Dep"];
129 -> 136 [label="Control Dep"];
129 -> 135 [label="Control Dep"];
136 -> 135 [label="AST"];
137 -> 131 [label="AST"];
137 -> 130 [label="AST"];
137 -> 132 [label="AST"];
137 -> 133 [label="AST"];
137 -> 136 [label="AST"];
138 -> 137 [label="AST"];
139 -> 129 [label="AST"];
139 -> 138 [label="AST"];
142 -> 140 [label="AST"];
142 -> 141 [label="AST"];
142 -> 169 [label="Control Dep"];
142 -> 168 [label="Control Dep"];
142 -> 146 [label="Control Dep"];
142 -> 143 [label="Control Dep"];
142 -> 145 [label="Control Dep"];
146 -> 144 [label="AST"];
146 -> 145 [label="AST"];
146 -> 143 [label="AST"];
146 -> 158 [label="Control Dep"];
146 -> 157 [label="Control Dep"];
146 -> 147 [label="Control Dep"];
146 -> 149 [label="Control Dep"];
146 -> 150 [label="Control Dep"];
146 -> 156 [label="Control Dep"];
146 -> 155 [label="Control Dep"];
146 -> 152 [label="Control Dep"];
146 -> 154 [label="Control Dep"];
146 -> 167 [label="Control Dep"];
146 -> 166 [label="Control Dep"];
146 -> 159 [label="Control Dep"];
146 -> 161 [label="Control Dep"];
146 -> 165 [label="Control Dep"];
146 -> 162 [label="Control Dep"];
146 -> 164 [label="Control Dep"];
155 -> 153 [label="AST"];
155 -> 154 [label="AST"];
155 -> 152 [label="AST"];
156 -> 155 [label="AST"];
157 -> 148 [label="AST"];
157 -> 147 [label="AST"];
157 -> 149 [label="AST"];
157 -> 150 [label="AST"];
157 -> 156 [label="AST"];
158 -> 157 [label="AST"];
165 -> 163 [label="AST"];
165 -> 164 [label="AST"];
165 -> 162 [label="AST"];
166 -> 160 [label="AST"];
166 -> 161 [label="AST"];
166 -> 159 [label="AST"];
166 -> 165 [label="AST"];
167 -> 166 [label="AST"];
168 -> 146 [label="AST"];
168 -> 158 [label="AST"];
168 -> 167 [label="AST"];
169 -> 168 [label="AST"];
170 -> 142 [label="AST"];
170 -> 169 [label="AST"];
174 -> 172 [label="AST"];
174 -> 173 [label="AST"];
174 -> 171 [label="AST"];
177 -> 175 [label="AST"];
177 -> 176 [label="AST"];
177 -> 182 [label="Control Dep"];
177 -> 181 [label="Control Dep"];
177 -> 178 [label="Control Dep"];
177 -> 180 [label="Control Dep"];
181 -> 179 [label="AST"];
181 -> 180 [label="AST"];
181 -> 178 [label="AST"];
182 -> 181 [label="AST"];
183 -> 177 [label="AST"];
183 -> 182 [label="AST"];
184 -> 17 [label="AST"];
184 -> 92 [label="AST"];
184 -> 123 [label="AST"];
184 -> 139 [label="AST"];
184 -> 170 [label="AST"];
184 -> 174 [label="AST"];
184 -> 183 [label="AST"];
185 -> 192 [label="Define-Use"];
185 -> 195 [label="Define-Use"];
187 -> 185 [label="AST"];
187 -> 186 [label="AST"];
187 -> 198 [label="Control Dep"];
187 -> 197 [label="Control Dep"];
187 -> 196 [label="Control Dep"];
187 -> 194 [label="Control Dep"];
187 -> 189 [label="Control Dep"];
187 -> 193 [label="Control Dep"];
187 -> 190 [label="Control Dep"];
187 -> 192 [label="Control Dep"];
187 -> 195 [label="Control Dep"];
193 -> 191 [label="AST"];
193 -> 192 [label="AST"];
193 -> 190 [label="AST"];
194 -> 189 [label="AST"];
194 -> 193 [label="AST"];
196 -> 194 [label="AST"];
196 -> 195 [label="AST"];
197 -> 196 [label="AST"];
198 -> 197 [label="AST"];
199 -> 187 [label="AST"];
199 -> 198 [label="AST"];
202 -> 209 [label="Action"];
204 -> 201 [label="AST"];
204 -> 202 [label="AST"];
204 -> 200 [label="AST"];
204 -> 203 [label="AST"];
205 -> 204 [label="AST"];
206 -> 184 [label="AST"];
206 -> 199 [label="AST"];
206 -> 205 [label="AST"];
207 -> 7 [label="AST"];
207 -> 13 [label="AST"];
207 -> 206 [label="AST"];
208 -> 1 [label="AST"];
208 -> 0 [label="AST"];
208 -> 2 [label="AST"];
208 -> 207 [label="AST"];
209 -> 210 [label="Action"];
}