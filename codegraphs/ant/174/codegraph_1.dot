digraph "execute#?,List" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@execute" shape=ellipse]
2 [label="2:CtParameterImpl@List testList" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@List" shape=ellipse]
4 [label="2:CtTypeReferenceImpl@BuildException" shape=ellipse]
5 [label="3:CtTypeReferenceImpl@JUnitTest" shape=ellipse]
6 [label="3:CtLiteralImpl@null" shape=ellipse]
7 [label="3:CtVirtualElement@test" shape=ellipse]
8 [label="3:CtLocalVariableImpl@JUnitTest test = null" shape=ellipse]
9 [label="4:CtTypeReferenceImpl@File" shape=ellipse]
10 [label="4:CtExecutableReferenceImpl@createTempPropertiesFile(java.lang.String)" shape=ellipse]
11 [label="4:CtVirtualElement@createTempPropertiesFile" shape=ellipse]
12 [label="4:CtLiteralImpl@\"junittestcases\"" shape=ellipse]
13 [label="4:CtInvocationImpl@createTempPropertiesFile(\"junittestcases\")" shape=ellipse]
14 [label="4:CtVirtualElement@casesFile" shape=ellipse]
15 [label="4:CtLocalVariableImpl@File casesFile = createTempPropertiesFile(\"junittestcases\")" shape=ellipse]
16 [label="5:CtTypeReferenceImpl@BufferedWriter" shape=ellipse]
17 [label="5:CtLiteralImpl@null" shape=ellipse]
18 [label="5:CtVirtualElement@writer" shape=ellipse]
19 [label="5:CtLocalVariableImpl@BufferedWriter writer = null" shape=ellipse]
20 [label="7:CtVariableWriteImpl@writer" shape=ellipse]
21 [label="7:CtTypeReferenceImpl@BufferedWriter" shape=ellipse]
22 [label="7:CtTypeReferenceImpl@FileWriter" shape=ellipse]
23 [label="7:CtVariableReadImpl@casesFile" shape=ellipse]
24 [label="7:CtConstructorCallImpl@new FileWriter(casesFile)" shape=ellipse]
25 [label="7:CtConstructorCallImpl@new BufferedWriter(new FileWriter(casesFile))" shape=ellipse]
26 [label="7:CtAssignmentImpl@writer = new BufferedWriter(new FileWriter(casesFile))" shape=ellipse]
27 [label="8:CtExecutableReferenceImpl@log(<unknown>,<unknown>)" shape=ellipse]
28 [label="8:CtVirtualElement@log" shape=ellipse]
29 [label="8:CtLiteralImpl@\"Creating casesfile '\"" shape=ellipse]
30 [label="8:CtExecutableReferenceImpl@getAbsolutePath()" shape=ellipse]
31 [label="8:CtVirtualElement@getAbsolutePath" shape=ellipse]
32 [label="8:CtVariableReadImpl@casesFile" shape=ellipse]
33 [label="8:CtInvocationImpl@casesFile.getAbsolutePath()" shape=ellipse]
34 [label="8:CtBinaryOperatorImpl@(\"Creating casesfile '\" + casesFile.getAbsolutePath())" shape=ellipse]
35 [label="8:CtLiteralImpl@\"' with content: \"" shape=ellipse]
36 [label="8:CtBinaryOperatorImpl@(\"Creating casesfile '\" + casesFile.getAbsolutePath()) + \"' with content: \"" shape=ellipse]
37 [label="8:CtTypeAccessImpl@MSG_VERBOSE" shape=ellipse]
38 [label="8:CtInvocationImpl@log((\"Creating casesfile '\" + casesFile.getAbsolutePath()) + \"' with content: \", MSG_VERBOSE)" shape=ellipse]
39 [label="9:CtTypeReferenceImpl@PrintStream" shape=ellipse]
40 [label="9:CtTypeReferenceImpl@PrintStream" shape=ellipse]
41 [label="9:CtTypeReferenceImpl@LogOutputStream" shape=ellipse]
42 [label="9:CtThisAccessImpl@this" shape=ellipse]
43 [label="9:CtFieldReadImpl@Project.MSG_VERBOSE" shape=ellipse]
44 [label="9:CtConstructorCallImpl@new LogOutputStream(this, Project.MSG_VERBOSE)" shape=ellipse]
45 [label="9:CtConstructorCallImpl@new PrintStream(new LogOutputStream(this, Project.MSG_VERBOSE))" shape=ellipse]
46 [label="9:CtVirtualElement@logWriter" shape=ellipse]
47 [label="9:CtLocalVariableImpl@PrintStream logWriter = new PrintStream(new LogOutputStream(this, Project.MSG_VERBOSE))" shape=ellipse]
48 [label="10:CtTypeReferenceImpl@Iterator" shape=ellipse]
49 [label="10:CtExecutableReferenceImpl@iterator()" shape=ellipse]
50 [label="10:CtVirtualElement@iterator" shape=ellipse]
51 [label="10:CtVariableReadImpl@testList" shape=ellipse]
52 [label="10:CtInvocationImpl@testList.iterator()" shape=ellipse]
53 [label="10:CtVirtualElement@iter" shape=ellipse]
54 [label="10:CtLocalVariableImpl@Iterator iter = testList.iterator()" shape=ellipse]
55 [label="11:CtExecutableReferenceImpl@hasNext()" shape=ellipse]
56 [label="11:CtVirtualElement@hasNext" shape=ellipse]
57 [label="11:CtVariableReadImpl@iter" shape=ellipse]
58 [label="11:CtInvocationImpl@iter.hasNext()" shape=ellipse]
59 [label="12:CtVariableWriteImpl@test" shape=ellipse]
60 [label="12:CtExecutableReferenceImpl@next()" shape=ellipse]
61 [label="12:CtVirtualElement@next" shape=ellipse]
62 [label="12:CtVariableReadImpl@iter" shape=ellipse]
63 [label="12:CtInvocationImpl@((JUnitTest) (iter.next()))" shape=ellipse]
64 [label="12:CtTypeReferenceImpl@JUnitTest" shape=ellipse]
65 [label="12:CtAssignmentImpl@test = ((JUnitTest) (iter.next()))" shape=ellipse]
66 [label="13:CtExecutableReferenceImpl@printDual(<unknown>,<unknown>,<unknown>)" shape=ellipse]
67 [label="13:CtVirtualElement@printDual" shape=ellipse]
68 [label="13:CtVariableReadImpl@writer" shape=ellipse]
69 [label="13:CtVariableReadImpl@logWriter" shape=ellipse]
70 [label="13:CtExecutableReferenceImpl@getName()" shape=ellipse]
71 [label="13:CtVirtualElement@getName" shape=ellipse]
72 [label="13:CtVariableReadImpl@test" shape=ellipse]
73 [label="13:CtInvocationImpl@test.getName()" shape=ellipse]
74 [label="13:CtInvocationImpl@printDual(writer, logWriter, test.getName())" shape=ellipse]
75 [label="14:CtExecutableReferenceImpl@getMethods()" shape=ellipse]
76 [label="14:CtVirtualElement@getMethods" shape=ellipse]
77 [label="14:CtVariableReadImpl@test" shape=ellipse]
78 [label="14:CtInvocationImpl@test.getMethods()" shape=ellipse]
79 [label="14:CtLiteralImpl@null" shape=ellipse]
80 [label="14:CtBinaryOperatorImpl@test.getMethods() != null" shape=ellipse]
81 [label="15:CtExecutableReferenceImpl@printDual(<unknown>,<unknown>,<unknown>)" shape=ellipse]
82 [label="15:CtVirtualElement@printDual" shape=ellipse]
83 [label="15:CtVariableReadImpl@writer" shape=ellipse]
84 [label="15:CtVariableReadImpl@logWriter" shape=ellipse]
85 [label="15:CtLiteralImpl@\":\"" shape=ellipse]
86 [label="15:CtExecutableReferenceImpl@replace(char,char)" shape=ellipse]
87 [label="15:CtVirtualElement@replace" shape=ellipse]
88 [label="15:CtExecutableReferenceImpl@getMethodsString()" shape=ellipse]
89 [label="15:CtVirtualElement@getMethodsString" shape=ellipse]
90 [label="15:CtVariableReadImpl@test" shape=ellipse]
91 [label="15:CtInvocationImpl@test.getMethodsString()" shape=ellipse]
92 [label="15:CtLiteralImpl@','" shape=ellipse]
93 [label="15:CtLiteralImpl@'+'" shape=ellipse]
94 [label="15:CtInvocationImpl@test.getMethodsString().replace(',', '+')" shape=ellipse]
95 [label="15:CtBinaryOperatorImpl@\":\" + test.getMethodsString().replace(',', '+')" shape=ellipse]
96 [label="15:CtInvocationImpl@printDual(writer, logWriter, \":\" + test.getMethodsString().replace(',', '+'))" shape=ellipse]
97 [label="14:CtBlockImpl@\{
    printDual(writer, logWriter, \":\" + test.getMethodsString().replace(',', '+'));
\}" shape=ellipse]
98 [label="14:CtIfImpl@if (test.getMethods() != null) \{
    printDual(writer, logWriter, \":\" + test.getMethodsString().replace(',', '+'));
\}" shape=ellipse]
99 [label="17:CtExecutableReferenceImpl@getTodir()" shape=ellipse]
100 [label="17:CtVirtualElement@getTodir" shape=ellipse]
101 [label="17:CtVariableReadImpl@test" shape=ellipse]
102 [label="17:CtInvocationImpl@test.getTodir()" shape=ellipse]
103 [label="17:CtLiteralImpl@null" shape=ellipse]
104 [label="17:CtBinaryOperatorImpl@test.getTodir() == null" shape=ellipse]
105 [label="18:CtExecutableReferenceImpl@printDual(<unknown>,<unknown>,<unknown>)" shape=ellipse]
106 [label="18:CtVirtualElement@printDual" shape=ellipse]
107 [label="18:CtVariableReadImpl@writer" shape=ellipse]
108 [label="18:CtVariableReadImpl@logWriter" shape=ellipse]
109 [label="18:CtLiteralImpl@\",\"" shape=ellipse]
110 [label="18:CtExecutableReferenceImpl@resolveFile(java.lang.String)" shape=ellipse]
111 [label="18:CtVirtualElement@resolveFile" shape=ellipse]
112 [label="18:CtExecutableReferenceImpl@getProject()" shape=ellipse]
113 [label="18:CtVirtualElement@getProject" shape=ellipse]
114 [label="18:CtInvocationImpl@getProject()" shape=ellipse]
115 [label="18:CtLiteralImpl@\".\"" shape=ellipse]
116 [label="18:CtInvocationImpl@getProject().resolveFile(\".\")" shape=ellipse]
117 [label="18:CtBinaryOperatorImpl@\",\" + getProject().resolveFile(\".\")" shape=ellipse]
118 [label="18:CtInvocationImpl@printDual(writer, logWriter, \",\" + getProject().resolveFile(\".\"))" shape=ellipse]
119 [label="17:CtBlockImpl@\{
    printDual(writer, logWriter, \",\" + getProject().resolveFile(\".\"));
\}" shape=ellipse]
120 [label="20:CtExecutableReferenceImpl@printDual(<unknown>,<unknown>,<unknown>)" shape=ellipse]
121 [label="20:CtVirtualElement@printDual" shape=ellipse]
122 [label="20:CtVariableReadImpl@writer" shape=ellipse]
123 [label="20:CtVariableReadImpl@logWriter" shape=ellipse]
124 [label="20:CtLiteralImpl@\",\"" shape=ellipse]
125 [label="20:CtExecutableReferenceImpl@getTodir()" shape=ellipse]
126 [label="20:CtVirtualElement@getTodir" shape=ellipse]
127 [label="20:CtVariableReadImpl@test" shape=ellipse]
128 [label="20:CtInvocationImpl@test.getTodir()" shape=ellipse]
129 [label="20:CtBinaryOperatorImpl@\",\" + test.getTodir()" shape=ellipse]
130 [label="20:CtInvocationImpl@printDual(writer, logWriter, \",\" + test.getTodir())" shape=ellipse]
131 [label="19:CtBlockImpl@\{
    printDual(writer, logWriter, \",\" + test.getTodir());
\}" shape=ellipse]
132 [label="17:CtIfImpl@if (test.getTodir() == null) \{
    printDual(writer, logWriter, \",\" + getProject().resolveFile(\".\"));
\} else \{
    printDual(writer, logWriter, \",\" + test.getTodir());
\}" shape=ellipse]
133 [label="22:CtExecutableReferenceImpl@getOutfile()" shape=ellipse]
134 [label="22:CtVirtualElement@getOutfile" shape=ellipse]
135 [label="22:CtVariableReadImpl@test" shape=ellipse]
136 [label="22:CtInvocationImpl@test.getOutfile()" shape=ellipse]
137 [label="22:CtLiteralImpl@null" shape=ellipse]
138 [label="22:CtBinaryOperatorImpl@test.getOutfile() == null" shape=ellipse]
139 [label="23:CtExecutableReferenceImpl@printlnDual(<unknown>,<unknown>,<unknown>)" shape=ellipse]
140 [label="23:CtVirtualElement@printlnDual" shape=ellipse]
141 [label="23:CtVariableReadImpl@writer" shape=ellipse]
142 [label="23:CtVariableReadImpl@logWriter" shape=ellipse]
143 [label="23:CtLiteralImpl@\",\"" shape=ellipse]
144 [label="23:CtLiteralImpl@\"TEST-\"" shape=ellipse]
145 [label="23:CtBinaryOperatorImpl@(\",\" + \"TEST-\")" shape=ellipse]
146 [label="23:CtExecutableReferenceImpl@getName()" shape=ellipse]
147 [label="23:CtVirtualElement@getName" shape=ellipse]
148 [label="23:CtVariableReadImpl@test" shape=ellipse]
149 [label="23:CtInvocationImpl@test.getName()" shape=ellipse]
150 [label="23:CtBinaryOperatorImpl@(\",\" + \"TEST-\") + test.getName()" shape=ellipse]
151 [label="23:CtInvocationImpl@printlnDual(writer, logWriter, (\",\" + \"TEST-\") + test.getName())" shape=ellipse]
152 [label="22:CtBlockImpl@\{
    printlnDual(writer, logWriter, (\",\" + \"TEST-\") + test.getName());
\}" shape=ellipse]
153 [label="25:CtExecutableReferenceImpl@printlnDual(<unknown>,<unknown>,<unknown>)" shape=ellipse]
154 [label="25:CtVirtualElement@printlnDual" shape=ellipse]
155 [label="25:CtVariableReadImpl@writer" shape=ellipse]
156 [label="25:CtVariableReadImpl@logWriter" shape=ellipse]
157 [label="25:CtLiteralImpl@\",\"" shape=ellipse]
158 [label="25:CtExecutableReferenceImpl@getOutfile()" shape=ellipse]
159 [label="25:CtVirtualElement@getOutfile" shape=ellipse]
160 [label="25:CtVariableReadImpl@test" shape=ellipse]
161 [label="25:CtInvocationImpl@test.getOutfile()" shape=ellipse]
162 [label="25:CtBinaryOperatorImpl@\",\" + test.getOutfile()" shape=ellipse]
163 [label="25:CtInvocationImpl@printlnDual(writer, logWriter, \",\" + test.getOutfile())" shape=ellipse]
164 [label="24:CtBlockImpl@\{
    printlnDual(writer, logWriter, \",\" + test.getOutfile());
\}" shape=ellipse]
165 [label="22:CtIfImpl@if (test.getOutfile() == null) \{
    printlnDual(writer, logWriter, (\",\" + \"TEST-\") + test.getName());
\} else \{
    printlnDual(writer, logWriter, \",\" + test.getOutfile());
\}" shape=ellipse]
166 [label="11:CtBlockImpl@\{
    test = ((JUnitTest) (iter.next()));
    printDual(writer, logWriter, test.getName());
    if (test.getMethods() != null) \{
        printDual(writer, logWriter, \":\" + test.getMethodsString().replace(',', '+'));
    \}
    if (test.getTodir() == null) \{
        printDual(writer, logWriter, \",\" + getProject().resolveFile(\".\"));
    \} else \{
        printDual(writer, logWriter, \",\" + test.getTodir());
    \}
    if (test.getOutfile() == null) \{
        printlnDual(writer, logWriter, (\",\" + \"TEST-\") + test.getName());
    \} else \{
        printlnDual(writer, logWriter, \",\" + test.getOutfile());
    \}
\}" shape=ellipse]
167 [label="11:CtWhileImpl@while (iter.hasNext()) \{
    test = ((JUnitTest) (iter.next()));
    printDual(writer, logWriter, test.getName());
    if (test.getMethods() != null) \{
        printDual(writer, logWriter, \":\" + test.getMethodsString().replace(',', '+'));
    \}
    if (test.getTodir() == null) \{
        printDual(writer, logWriter, \",\" + getProject().resolveFile(\".\"));
    \} else \{
        printDual(writer, logWriter, \",\" + test.getTodir());
    \}
    if (test.getOutfile() == null) \{
        printlnDual(writer, logWriter, (\",\" + \"TEST-\") + test.getName());
    \} else \{
        printlnDual(writer, logWriter, \",\" + test.getOutfile());
    \}
\} " shape=ellipse]
168 [label="28:CtExecutableReferenceImpl@flush()" shape=ellipse]
169 [label="28:CtVirtualElement@flush" shape=ellipse]
170 [label="28:CtVariableReadImpl@writer" shape=ellipse]
171 [label="28:CtInvocationImpl@writer.flush()" shape=ellipse]
172 [label="29:CtExecutableReferenceImpl@close()" shape=ellipse]
173 [label="29:CtVirtualElement@close" shape=ellipse]
174 [label="29:CtVariableReadImpl@writer" shape=ellipse]
175 [label="29:CtInvocationImpl@writer.close()" shape=ellipse]
176 [label="30:CtVariableWriteImpl@writer" shape=ellipse]
177 [label="30:CtLiteralImpl@null" shape=ellipse]
178 [label="30:CtAssignmentImpl@writer = null" shape=ellipse]
179 [label="31:CtTypeReferenceImpl@ExecuteWatchdog" shape=ellipse]
180 [label="31:CtExecutableReferenceImpl@createWatchdog()" shape=ellipse]
181 [label="31:CtVirtualElement@createWatchdog" shape=ellipse]
182 [label="31:CtInvocationImpl@createWatchdog()" shape=ellipse]
183 [label="31:CtVirtualElement@watchdog" shape=ellipse]
184 [label="31:CtLocalVariableImpl@ExecuteWatchdog watchdog = createWatchdog()" shape=ellipse]
185 [label="32:CtTypeReferenceImpl@TestResultHolder" shape=ellipse]
186 [label="32:CtExecutableReferenceImpl@executeAsForked(<unknown>,<unknown>,<unknown>)" shape=ellipse]
187 [label="32:CtVirtualElement@executeAsForked" shape=ellipse]
188 [label="32:CtVariableReadImpl@test" shape=ellipse]
189 [label="32:CtVariableReadImpl@watchdog" shape=ellipse]
190 [label="32:CtVariableReadImpl@casesFile" shape=ellipse]
191 [label="32:CtInvocationImpl@executeAsForked(test, watchdog, casesFile)" shape=ellipse]
192 [label="32:CtVirtualElement@result" shape=ellipse]
193 [label="32:CtLocalVariableImpl@TestResultHolder result = executeAsForked(test, watchdog, casesFile)" shape=ellipse]
194 [label="33:CtExecutableReferenceImpl@actOnTestResult(<unknown>,<unknown>,java.lang.String)" shape=ellipse]
195 [label="33:CtVirtualElement@actOnTestResult" shape=ellipse]
196 [label="33:CtVariableReadImpl@result" shape=ellipse]
197 [label="33:CtVariableReadImpl@test" shape=ellipse]
198 [label="33:CtLiteralImpl@\"Tests\"" shape=ellipse]
199 [label="33:CtInvocationImpl@actOnTestResult(result, test, \"Tests\")" shape=ellipse]
200 [label="6:CtBlockImpl@\{
    writer = new BufferedWriter(new FileWriter(casesFile));
    log((\"Creating casesfile '\" + casesFile.getAbsolutePath()) + \"' with content: \", MSG_VERBOSE);
    PrintStream logWriter = new PrintStream(new LogOutputStream(this, Project.MSG_VERBOSE));
    Iterator iter = testList.iterator();
    while (iter.hasNext()) \{
        test = ((JUnitTest) (iter.next()));
        printDual(writer, logWriter, test.getName());
        if (test.getMethods() != null) \{
            printDual(writer, logWriter, \":\" + test.getMethodsString().replace(',', '+'));
        \}
        if (test.getTodir() == null) \{
            printDual(writer, logWriter, \",\" + getProject().resolveFile(\".\"));
        \} else \{
            printDual(writer, logWriter, \",\" + test.getTodir());
        \}
        if (test.getOutfile() == null) \{
            printlnDual(writer, logWriter, (\",\" + \"TEST-\") + test.getName());
        \} else \{
            printlnDual(writer, logWriter, \",\" + test.getOutfile());
        \}
    \} 
    writer.flush();
    writer.close();
    writer = null;
    ExecuteWatchdog watchdog = createWatchdog();
    TestResultHolder result = executeAsForked(test, watchdog, casesFile);
    actOnTestResult(result, test, \"Tests\");
\}" shape=ellipse]
201 [label="34:CtVirtualElement@e" shape=ellipse]
202 [label="34:CtTypeReferenceImpl@IOException" shape=ellipse]
203 [label="34:CtCatchVariableImpl@IOException e" shape=ellipse]
204 [label="35:CtExecutableReferenceImpl@log(<unknown>,<unknown>)" shape=ellipse]
205 [label="35:CtVirtualElement@log" shape=ellipse]
206 [label="35:CtExecutableReferenceImpl@toString()" shape=ellipse]
207 [label="35:CtVirtualElement@toString" shape=ellipse]
208 [label="35:CtVariableReadImpl@e" shape=ellipse]
209 [label="35:CtInvocationImpl@e.toString()" shape=ellipse]
210 [label="35:CtTypeAccessImpl@MSG_ERR" shape=ellipse]
211 [label="35:CtInvocationImpl@log(e.toString(), MSG_ERR)" shape=ellipse]
212 [label="36:CtTypeReferenceImpl@BuildException" shape=ellipse]
213 [label="36:CtVariableReadImpl@e" shape=ellipse]
214 [label="36:CtConstructorCallImpl@new BuildException(e)" shape=ellipse]
215 [label="36:CtThrowImpl@throw new BuildException(e)" shape=ellipse]
216 [label="34:CtBlockImpl@\{
    log(e.toString(), MSG_ERR);
    throw new BuildException(e);
\}" shape=ellipse]
217 [label="34:CtCatchImpl@ catch (IOException e) \{
    log(e.toString(), MSG_ERR);
    throw new BuildException(e);
\}" shape=ellipse]
218 [label="38:CtExecutableReferenceImpl@close(BufferedWriter)" shape=ellipse]
219 [label="38:CtVirtualElement@close" shape=ellipse]
220 [label="38:CtTypeAccessImpl@FILE_UTILS" shape=ellipse]
221 [label="38:CtVariableReadImpl@writer" shape=ellipse]
222 [label="38:CtInvocationImpl@FILE_UTILS.close(writer)" shape=ellipse]
223 [label="40:CtExecutableReferenceImpl@tryHardToDelete(File)" shape=ellipse]
224 [label="40:CtVirtualElement@tryHardToDelete" shape=ellipse]
225 [label="40:CtTypeAccessImpl@FILE_UTILS" shape=ellipse]
226 [label="40:CtVariableReadImpl@casesFile" shape=ellipse]
227 [label="40:CtInvocationImpl@FILE_UTILS.tryHardToDelete(casesFile)" shape=ellipse]
228 [label="39:CtBlockImpl@\{
    FILE_UTILS.tryHardToDelete(casesFile);
\}" shape=ellipse]
229 [label="41:CtVirtualElement@e" shape=ellipse]
230 [label="41:CtTypeReferenceImpl@Exception" shape=ellipse]
231 [label="41:CtCatchVariableImpl@Exception e" shape=ellipse]
232 [label="42:CtExecutableReferenceImpl@log(java.lang.String,<unknown>)" shape=ellipse]
233 [label="42:CtVirtualElement@log" shape=ellipse]
234 [label="42:CtExecutableReferenceImpl@toString()" shape=ellipse]
235 [label="42:CtVirtualElement@toString" shape=ellipse]
236 [label="42:CtVariableReadImpl@e" shape=ellipse]
237 [label="42:CtInvocationImpl@e.toString()" shape=ellipse]
238 [label="42:CtTypeAccessImpl@MSG_ERR" shape=ellipse]
239 [label="42:CtInvocationImpl@log(e.toString(), MSG_ERR)" shape=ellipse]
240 [label="41:CtBlockImpl@\{
    log(e.toString(), MSG_ERR);
\}" shape=ellipse]
241 [label="41:CtCatchImpl@ catch (Exception e) \{
    log(e.toString(), MSG_ERR);
\}" shape=ellipse]
242 [label="39:CtTryImpl@try \{
    FILE_UTILS.tryHardToDelete(casesFile);
\} catch (Exception e) \{
    log(e.toString(), MSG_ERR);
\}" shape=ellipse]
243 [label="37:CtBlockImpl@\{
    FILE_UTILS.close(writer);
    try \{
        FILE_UTILS.tryHardToDelete(casesFile);
    \} catch (Exception e) \{
        log(e.toString(), MSG_ERR);
    \}
\}" shape=ellipse]
244 [label="6:CtTryImpl@try \{
    writer = new BufferedWriter(new FileWriter(casesFile));
    log((\"Creating casesfile '\" + casesFile.getAbsolutePath()) + \"' with content: \", MSG_VERBOSE);
    PrintStream logWriter = new PrintStream(new LogOutputStream(this, Project.MSG_VERBOSE));
    Iterator iter = testList.iterator();
    while (iter.hasNext()) \{
        test = ((JUnitTest) (iter.next()));
        printDual(writer, logWriter, test.getName());
        if (test.getMethods() != null) \{
            printDual(writer, logWriter, \":\" + test.getMethodsString().replace(',', '+'));
        \}
        if (test.getTodir() == null) \{
            printDual(writer, logWriter, \",\" + getProject().resolveFile(\".\"));
        \} else \{
            printDual(writer, logWriter, \",\" + test.getTodir());
        \}
        if (test.getOutfile() == null) \{
            printlnDual(writer, logWriter, (\",\" + \"TEST-\") + test.getName());
        \} else \{
            printlnDual(writer, logWriter, \",\" + test.getOutfile());
        \}
    \} 
    writer.flush();
    writer.close();
    writer = null;
    ExecuteWatchdog watchdog = createWatchdog();
    TestResultHolder result = executeAsForked(test, watchdog, casesFile);
    actOnTestResult(result, test, \"Tests\");
\} catch (IOException e) \{
    log(e.toString(), MSG_ERR);
    throw new BuildException(e);
\} finally \{
    FILE_UTILS.close(writer);
    try \{
        FILE_UTILS.tryHardToDelete(casesFile);
    \} catch (Exception e) \{
        log(e.toString(), MSG_ERR);
    \}
\}" shape=ellipse]
245 [label="2:CtBlockImpl@\{
    JUnitTest test = null;
    File casesFile = createTempPropertiesFile(\"junittestcases\");
    BufferedWriter writer = null;
    try \{
        writer = new BufferedWriter(new FileWriter(casesFile));
        log((\"Creating casesfile '\" + casesFile.getAbsolutePath()) + \"' with content: \", MSG_VERBOSE);
        PrintStream logWriter = new PrintStream(new LogOutputStream(this, Project.MSG_VERBOSE));
        Iterator iter = testList.iterator();
        while (iter.hasNext()) \{
            test = ((JUnitTest) (iter.next()));
            printDual(writer, logWriter, test.getName());
            if (test.getMethods() != null) \{
                printDual(writer, logWriter, \":\" + test.getMethodsString().replace(',', '+'));
            \}
            if (test.getTodir() == null) \{
                printDual(writer, logWriter, \",\" + getProject().resolveFile(\".\"));
            \} else \{
                printDual(writer, logWriter, \",\" + test.getTodir());
            \}
            if (test.getOutfile() == null) \{
                printlnDual(writer, logWriter, (\",\" + \"TEST-\") + test.getName());
            \} else \{
                printlnDual(writer, logWriter, \",\" + test.getOutfile());
            \}
        \} 
        writer.flush();
        writer.close();
        writer = null;
        ExecuteWatchdog watchdog = createWatchdog();
        TestResultHolder result = executeAsForked(test, watchdog, casesFile);
        actOnTestResult(result, test, \"Tests\");
    \} catch (IOException e) \{
        log(e.toString(), MSG_ERR);
        throw new BuildException(e);
    \} finally \{
        FILE_UTILS.close(writer);
        try \{
            FILE_UTILS.tryHardToDelete(casesFile);
        \} catch (Exception e) \{
            log(e.toString(), MSG_ERR);
        \}
    \}
\}" shape=ellipse]
246 [label="2:CtMethodImpl@protected void execute(List testList) throws BuildException \{
    JUnitTest test = null;
    File casesFile = createTempPropertiesFile(\"junittestcases\");
    BufferedWriter writer = null;
    try \{
        writer = new BufferedWriter(new FileWriter(casesFile));
        log((\"Creating casesfile '\" + casesFile.getAbsolutePath()) + \"' with content: \", MSG_VERBOSE);
        PrintStream logWriter = new PrintStream(new LogOutputStream(this, Project.MSG_VERBOSE));
        Iterator iter = testList.iterator();
        while (iter.hasNext()) \{
            test = ((JUnitTest) (iter.next()));
            printDual(writer, logWriter, test.getName());
            if (test.getMethods() != null) \{
                printDual(writer, logWriter, \":\" + test.getMethodsString().replace(',', '+'));
            \}
            if (test.getTodir() == null) \{
                printDual(writer, logWriter, \",\" + getProject().resolveFile(\".\"));
            \} else \{
                printDual(writer, logWriter, \",\" + test.getTodir());
            \}
            if (test.getOutfile() == null) \{
                printlnDual(writer, logWriter, (\",\" + \"TEST-\") + test.getName());
            \} else \{
                printlnDual(writer, logWriter, \",\" + test.getOutfile());
            \}
        \} 
        writer.flush();
        writer.close();
        writer = null;
        ExecuteWatchdog watchdog = createWatchdog();
        TestResultHolder result = executeAsForked(test, watchdog, casesFile);
        actOnTestResult(result, test, \"Tests\");
    \} catch (IOException e) \{
        log(e.toString(), MSG_ERR);
        throw new BuildException(e);
    \} finally \{
        FILE_UTILS.close(writer);
        try \{
            FILE_UTILS.tryHardToDelete(casesFile);
        \} catch (Exception e) \{
            log(e.toString(), MSG_ERR);
        \}
    \}
\}" shape=ellipse]
247 [label="38:Update@UPDATE" shape=ellipse]
248 [label="38:CtTypeAccessImpl@FileUtils" shape=ellipse]
2 -> 3 [label="AST"];
8 -> 7 [label="AST"];
8 -> 5 [label="AST"];
8 -> 6 [label="AST"];
13 -> 11 [label="AST"];
13 -> 10 [label="AST"];
13 -> 12 [label="AST"];
14 -> 23 [label="Define-Use"];
14 -> 32 [label="Define-Use"];
14 -> 190 [label="Define-Use"];
14 -> 226 [label="Define-Use"];
15 -> 14 [label="AST"];
15 -> 9 [label="AST"];
15 -> 13 [label="AST"];
19 -> 18 [label="AST"];
19 -> 16 [label="AST"];
19 -> 17 [label="AST"];
20 -> 68 [label="Define-Use"];
20 -> 83 [label="Define-Use"];
20 -> 107 [label="Define-Use"];
20 -> 122 [label="Define-Use"];
20 -> 141 [label="Define-Use"];
20 -> 155 [label="Define-Use"];
20 -> 170 [label="Define-Use"];
20 -> 174 [label="Define-Use"];
23 -> 20 [label="Data Dep"];
24 -> 23 [label="AST"];
25 -> 24 [label="AST"];
26 -> 20 [label="AST"];
26 -> 25 [label="AST"];
33 -> 31 [label="AST"];
33 -> 32 [label="AST"];
33 -> 30 [label="AST"];
34 -> 29 [label="AST"];
34 -> 33 [label="AST"];
36 -> 34 [label="AST"];
36 -> 35 [label="AST"];
38 -> 28 [label="AST"];
38 -> 27 [label="AST"];
38 -> 36 [label="AST"];
38 -> 37 [label="AST"];
42 -> 46 [label="Data Dep"];
43 -> 46 [label="Data Dep"];
44 -> 42 [label="AST"];
44 -> 43 [label="AST"];
45 -> 44 [label="AST"];
46 -> 69 [label="Define-Use"];
46 -> 84 [label="Define-Use"];
46 -> 108 [label="Define-Use"];
46 -> 123 [label="Define-Use"];
46 -> 142 [label="Define-Use"];
46 -> 156 [label="Define-Use"];
47 -> 46 [label="AST"];
47 -> 39 [label="AST"];
47 -> 45 [label="AST"];
51 -> 53 [label="Data Dep"];
52 -> 50 [label="AST"];
52 -> 51 [label="AST"];
52 -> 49 [label="AST"];
53 -> 57 [label="Define-Use"];
53 -> 62 [label="Define-Use"];
54 -> 53 [label="AST"];
54 -> 48 [label="AST"];
54 -> 52 [label="AST"];
58 -> 56 [label="AST"];
58 -> 57 [label="AST"];
58 -> 55 [label="AST"];
58 -> 166 [label="Control Dep"];
58 -> 65 [label="Control Dep"];
58 -> 59 [label="Control Dep"];
58 -> 63 [label="Control Dep"];
58 -> 60 [label="Control Dep"];
58 -> 62 [label="Control Dep"];
58 -> 74 [label="Control Dep"];
58 -> 66 [label="Control Dep"];
58 -> 68 [label="Control Dep"];
58 -> 69 [label="Control Dep"];
58 -> 73 [label="Control Dep"];
58 -> 70 [label="Control Dep"];
58 -> 72 [label="Control Dep"];
58 -> 98 [label="Control Dep"];
58 -> 80 [label="Control Dep"];
58 -> 78 [label="Control Dep"];
58 -> 75 [label="Control Dep"];
58 -> 77 [label="Control Dep"];
58 -> 79 [label="Control Dep"];
58 -> 132 [label="Control Dep"];
58 -> 104 [label="Control Dep"];
58 -> 102 [label="Control Dep"];
58 -> 99 [label="Control Dep"];
58 -> 101 [label="Control Dep"];
58 -> 103 [label="Control Dep"];
58 -> 165 [label="Control Dep"];
58 -> 138 [label="Control Dep"];
58 -> 136 [label="Control Dep"];
58 -> 133 [label="Control Dep"];
58 -> 135 [label="Control Dep"];
58 -> 137 [label="Control Dep"];
59 -> 72 [label="Define-Use"];
59 -> 77 [label="Define-Use"];
59 -> 90 [label="Define-Use"];
59 -> 101 [label="Define-Use"];
59 -> 127 [label="Define-Use"];
59 -> 135 [label="Define-Use"];
59 -> 148 [label="Define-Use"];
59 -> 160 [label="Define-Use"];
59 -> 188 [label="Define-Use"];
59 -> 197 [label="Define-Use"];
62 -> 59 [label="Data Dep"];
63 -> 61 [label="AST"];
63 -> 64 [label="AST"];
63 -> 62 [label="AST"];
63 -> 60 [label="AST"];
65 -> 59 [label="AST"];
65 -> 63 [label="AST"];
73 -> 71 [label="AST"];
73 -> 72 [label="AST"];
73 -> 70 [label="AST"];
74 -> 67 [label="AST"];
74 -> 66 [label="AST"];
74 -> 68 [label="AST"];
74 -> 69 [label="AST"];
74 -> 73 [label="AST"];
78 -> 76 [label="AST"];
78 -> 77 [label="AST"];
78 -> 75 [label="AST"];
80 -> 78 [label="AST"];
80 -> 79 [label="AST"];
80 -> 97 [label="Control Dep"];
80 -> 96 [label="Control Dep"];
80 -> 81 [label="Control Dep"];
80 -> 83 [label="Control Dep"];
80 -> 84 [label="Control Dep"];
80 -> 95 [label="Control Dep"];
80 -> 85 [label="Control Dep"];
80 -> 94 [label="Control Dep"];
80 -> 86 [label="Control Dep"];
80 -> 91 [label="Control Dep"];
80 -> 88 [label="Control Dep"];
80 -> 90 [label="Control Dep"];
80 -> 92 [label="Control Dep"];
80 -> 93 [label="Control Dep"];
91 -> 89 [label="AST"];
91 -> 90 [label="AST"];
91 -> 88 [label="AST"];
94 -> 87 [label="AST"];
94 -> 91 [label="AST"];
94 -> 86 [label="AST"];
94 -> 92 [label="AST"];
94 -> 93 [label="AST"];
95 -> 85 [label="AST"];
95 -> 94 [label="AST"];
96 -> 82 [label="AST"];
96 -> 81 [label="AST"];
96 -> 83 [label="AST"];
96 -> 84 [label="AST"];
96 -> 95 [label="AST"];
97 -> 96 [label="AST"];
98 -> 80 [label="AST"];
98 -> 97 [label="AST"];
102 -> 100 [label="AST"];
102 -> 101 [label="AST"];
102 -> 99 [label="AST"];
104 -> 102 [label="AST"];
104 -> 103 [label="AST"];
104 -> 119 [label="Control Dep"];
104 -> 118 [label="Control Dep"];
104 -> 105 [label="Control Dep"];
104 -> 107 [label="Control Dep"];
104 -> 108 [label="Control Dep"];
104 -> 117 [label="Control Dep"];
104 -> 109 [label="Control Dep"];
104 -> 116 [label="Control Dep"];
104 -> 110 [label="Control Dep"];
104 -> 114 [label="Control Dep"];
104 -> 112 [label="Control Dep"];
104 -> 115 [label="Control Dep"];
104 -> 131 [label="Control Dep"];
104 -> 130 [label="Control Dep"];
104 -> 120 [label="Control Dep"];
104 -> 122 [label="Control Dep"];
104 -> 123 [label="Control Dep"];
104 -> 129 [label="Control Dep"];
104 -> 124 [label="Control Dep"];
104 -> 128 [label="Control Dep"];
104 -> 125 [label="Control Dep"];
104 -> 127 [label="Control Dep"];
114 -> 113 [label="AST"];
114 -> 112 [label="AST"];
116 -> 111 [label="AST"];
116 -> 114 [label="AST"];
116 -> 110 [label="AST"];
116 -> 115 [label="AST"];
117 -> 109 [label="AST"];
117 -> 116 [label="AST"];
118 -> 106 [label="AST"];
118 -> 105 [label="AST"];
118 -> 107 [label="AST"];
118 -> 108 [label="AST"];
118 -> 117 [label="AST"];
119 -> 118 [label="AST"];
128 -> 126 [label="AST"];
128 -> 127 [label="AST"];
128 -> 125 [label="AST"];
129 -> 124 [label="AST"];
129 -> 128 [label="AST"];
130 -> 121 [label="AST"];
130 -> 120 [label="AST"];
130 -> 122 [label="AST"];
130 -> 123 [label="AST"];
130 -> 129 [label="AST"];
131 -> 130 [label="AST"];
132 -> 104 [label="AST"];
132 -> 119 [label="AST"];
132 -> 131 [label="AST"];
136 -> 134 [label="AST"];
136 -> 135 [label="AST"];
136 -> 133 [label="AST"];
138 -> 136 [label="AST"];
138 -> 137 [label="AST"];
138 -> 152 [label="Control Dep"];
138 -> 151 [label="Control Dep"];
138 -> 139 [label="Control Dep"];
138 -> 141 [label="Control Dep"];
138 -> 142 [label="Control Dep"];
138 -> 150 [label="Control Dep"];
138 -> 145 [label="Control Dep"];
138 -> 143 [label="Control Dep"];
138 -> 144 [label="Control Dep"];
138 -> 149 [label="Control Dep"];
138 -> 146 [label="Control Dep"];
138 -> 148 [label="Control Dep"];
138 -> 164 [label="Control Dep"];
138 -> 163 [label="Control Dep"];
138 -> 153 [label="Control Dep"];
138 -> 155 [label="Control Dep"];
138 -> 156 [label="Control Dep"];
138 -> 162 [label="Control Dep"];
138 -> 157 [label="Control Dep"];
138 -> 161 [label="Control Dep"];
138 -> 158 [label="Control Dep"];
138 -> 160 [label="Control Dep"];
145 -> 143 [label="AST"];
145 -> 144 [label="AST"];
149 -> 147 [label="AST"];
149 -> 148 [label="AST"];
149 -> 146 [label="AST"];
150 -> 145 [label="AST"];
150 -> 149 [label="AST"];
151 -> 140 [label="AST"];
151 -> 139 [label="AST"];
151 -> 141 [label="AST"];
151 -> 142 [label="AST"];
151 -> 150 [label="AST"];
152 -> 151 [label="AST"];
161 -> 159 [label="AST"];
161 -> 160 [label="AST"];
161 -> 158 [label="AST"];
162 -> 157 [label="AST"];
162 -> 161 [label="AST"];
163 -> 154 [label="AST"];
163 -> 153 [label="AST"];
163 -> 155 [label="AST"];
163 -> 156 [label="AST"];
163 -> 162 [label="AST"];
164 -> 163 [label="AST"];
165 -> 138 [label="AST"];
165 -> 152 [label="AST"];
165 -> 164 [label="AST"];
166 -> 65 [label="AST"];
166 -> 74 [label="AST"];
166 -> 98 [label="AST"];
166 -> 132 [label="AST"];
166 -> 165 [label="AST"];
167 -> 58 [label="AST"];
167 -> 166 [label="AST"];
171 -> 169 [label="AST"];
171 -> 170 [label="AST"];
171 -> 168 [label="AST"];
175 -> 173 [label="AST"];
175 -> 174 [label="AST"];
175 -> 172 [label="AST"];
176 -> 221 [label="Define-Use"];
178 -> 176 [label="AST"];
178 -> 177 [label="AST"];
182 -> 181 [label="AST"];
182 -> 180 [label="AST"];
183 -> 189 [label="Define-Use"];
184 -> 183 [label="AST"];
184 -> 179 [label="AST"];
184 -> 182 [label="AST"];
188 -> 192 [label="Data Dep"];
189 -> 192 [label="Data Dep"];
190 -> 192 [label="Data Dep"];
191 -> 187 [label="AST"];
191 -> 186 [label="AST"];
191 -> 188 [label="AST"];
191 -> 189 [label="AST"];
191 -> 190 [label="AST"];
192 -> 196 [label="Define-Use"];
193 -> 192 [label="AST"];
193 -> 185 [label="AST"];
193 -> 191 [label="AST"];
199 -> 195 [label="AST"];
199 -> 194 [label="AST"];
199 -> 196 [label="AST"];
199 -> 197 [label="AST"];
199 -> 198 [label="AST"];
200 -> 26 [label="AST"];
200 -> 38 [label="AST"];
200 -> 47 [label="AST"];
200 -> 54 [label="AST"];
200 -> 167 [label="AST"];
200 -> 171 [label="AST"];
200 -> 175 [label="AST"];
200 -> 178 [label="AST"];
200 -> 184 [label="AST"];
200 -> 193 [label="AST"];
200 -> 199 [label="AST"];
201 -> 208 [label="Define-Use"];
201 -> 213 [label="Define-Use"];
203 -> 201 [label="AST"];
203 -> 202 [label="AST"];
203 -> 216 [label="Control Dep"];
203 -> 211 [label="Control Dep"];
203 -> 204 [label="Control Dep"];
203 -> 209 [label="Control Dep"];
203 -> 206 [label="Control Dep"];
203 -> 208 [label="Control Dep"];
203 -> 210 [label="Control Dep"];
203 -> 215 [label="Control Dep"];
203 -> 214 [label="Control Dep"];
203 -> 213 [label="Control Dep"];
209 -> 207 [label="AST"];
209 -> 208 [label="AST"];
209 -> 206 [label="AST"];
211 -> 205 [label="AST"];
211 -> 204 [label="AST"];
211 -> 209 [label="AST"];
211 -> 210 [label="AST"];
214 -> 213 [label="AST"];
215 -> 214 [label="AST"];
216 -> 211 [label="AST"];
216 -> 215 [label="AST"];
217 -> 203 [label="AST"];
217 -> 216 [label="AST"];
220 -> 247 [label="Action"];
222 -> 219 [label="AST"];
222 -> 220 [label="AST"];
222 -> 218 [label="AST"];
222 -> 221 [label="AST"];
227 -> 224 [label="AST"];
227 -> 225 [label="AST"];
227 -> 223 [label="AST"];
227 -> 226 [label="AST"];
228 -> 227 [label="AST"];
229 -> 236 [label="Define-Use"];
231 -> 229 [label="AST"];
231 -> 230 [label="AST"];
231 -> 240 [label="Control Dep"];
231 -> 239 [label="Control Dep"];
231 -> 232 [label="Control Dep"];
231 -> 237 [label="Control Dep"];
231 -> 234 [label="Control Dep"];
231 -> 236 [label="Control Dep"];
231 -> 238 [label="Control Dep"];
237 -> 235 [label="AST"];
237 -> 236 [label="AST"];
237 -> 234 [label="AST"];
239 -> 233 [label="AST"];
239 -> 232 [label="AST"];
239 -> 237 [label="AST"];
239 -> 238 [label="AST"];
240 -> 239 [label="AST"];
241 -> 231 [label="AST"];
241 -> 240 [label="AST"];
242 -> 228 [label="AST"];
242 -> 241 [label="AST"];
243 -> 222 [label="AST"];
243 -> 242 [label="AST"];
244 -> 200 [label="AST"];
244 -> 217 [label="AST"];
244 -> 243 [label="AST"];
245 -> 8 [label="AST"];
245 -> 15 [label="AST"];
245 -> 19 [label="AST"];
245 -> 244 [label="AST"];
246 -> 1 [label="AST"];
246 -> 0 [label="AST"];
246 -> 2 [label="AST"];
246 -> 4 [label="AST"];
246 -> 245 [label="AST"];
247 -> 248 [label="Action"];
}