digraph "replaceReferences#?,String" {
0 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
1 [label="2:CtVirtualElement@replaceReferences" shape=ellipse]
2 [label="2:CtParameterImpl@String source" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
4 [label="3:CtTypeReferenceImpl@Vector" shape=ellipse]
5 [label="3:CtExecutableReferenceImpl@getGroups(java.lang.String)" shape=ellipse]
6 [label="3:CtVirtualElement@getGroups" shape=ellipse]
7 [label="3:CtFieldReadImpl@reg" shape=ellipse]
8 [label="3:CtVariableReadImpl@source" shape=ellipse]
9 [label="3:CtInvocationImpl@reg.getGroups(source)" shape=ellipse]
10 [label="3:CtVirtualElement@v" shape=ellipse]
11 [label="3:CtLocalVariableImpl@Vector v = reg.getGroups(source)" shape=ellipse]
12 [label="4:CtExecutableReferenceImpl@setLength(int)" shape=ellipse]
13 [label="4:CtVirtualElement@setLength" shape=ellipse]
14 [label="4:CtFieldReadImpl@result" shape=ellipse]
15 [label="4:CtLiteralImpl@0" shape=ellipse]
16 [label="4:CtInvocationImpl@result.setLength(0)" shape=ellipse]
17 [label="5:CtTypeReferenceImpl@int" shape=ellipse]
18 [label="5:CtLiteralImpl@0" shape=ellipse]
19 [label="5:CtVirtualElement@i" shape=ellipse]
20 [label="5:CtLocalVariableImpl@int i = 0" shape=ellipse]
21 [label="5:CtVariableReadImpl@i" shape=ellipse]
22 [label="5:CtFieldReadImpl@to.length" shape=ellipse]
23 [label="5:CtBinaryOperatorImpl@i < to.length" shape=ellipse]
24 [label="5:CtVariableWriteImpl@i" shape=ellipse]
25 [label="5:CtUnaryOperatorImpl@i++" shape=ellipse]
26 [label="6:CtFieldReadImpl@to" shape=ellipse]
27 [label="6:CtVariableReadImpl@i" shape=ellipse]
28 [label="6:CtArrayReadImpl@to[i]" shape=ellipse]
29 [label="6:CtLiteralImpl@'\\'" shape=ellipse]
30 [label="6:CtBinaryOperatorImpl@to[i] == '\\'" shape=ellipse]
31 [label="7:CtVariableWriteImpl@i" shape=ellipse]
32 [label="7:CtUnaryOperatorImpl@(++i)" shape=ellipse]
33 [label="7:CtFieldReadImpl@to.length" shape=ellipse]
34 [label="7:CtBinaryOperatorImpl@(++i) < to.length" shape=ellipse]
35 [label="8:CtTypeReferenceImpl@int" shape=ellipse]
36 [label="8:CtExecutableReferenceImpl@digit(char,int)" shape=ellipse]
37 [label="8:CtVirtualElement@digit" shape=ellipse]
38 [label="8:CtTypeAccessImpl@Character" shape=ellipse]
39 [label="8:CtFieldReadImpl@to" shape=ellipse]
40 [label="8:CtVariableReadImpl@i" shape=ellipse]
41 [label="8:CtArrayReadImpl@to[i]" shape=ellipse]
42 [label="8:CtLiteralImpl@10" shape=ellipse]
43 [label="8:CtInvocationImpl@Character.digit(to[i], 10)" shape=ellipse]
44 [label="8:CtVirtualElement@value" shape=ellipse]
45 [label="8:CtLocalVariableImpl@int value = Character.digit(to[i], 10)" shape=ellipse]
46 [label="9:CtVariableReadImpl@value" shape=ellipse]
47 [label="9:CtLiteralImpl@1" shape=ellipse]
48 [label="9:CtUnaryOperatorImpl@(-1)" shape=ellipse]
49 [label="9:CtBinaryOperatorImpl@value > (-1)" shape=ellipse]
50 [label="10:CtExecutableReferenceImpl@append(java.lang.String)" shape=ellipse]
51 [label="10:CtVirtualElement@append" shape=ellipse]
52 [label="10:CtFieldReadImpl@result" shape=ellipse]
53 [label="10:CtExecutableReferenceImpl@elementAt(int)" shape=ellipse]
54 [label="10:CtVirtualElement@elementAt" shape=ellipse]
55 [label="10:CtVariableReadImpl@v" shape=ellipse]
56 [label="10:CtVariableReadImpl@value" shape=ellipse]
57 [label="10:CtInvocationImpl@((String) (v.elementAt(value)))" shape=ellipse]
58 [label="10:CtTypeReferenceImpl@String" shape=ellipse]
59 [label="10:CtInvocationImpl@result.append(((String) (v.elementAt(value))))" shape=ellipse]
60 [label="9:CtBlockImpl@\{
    result.append(((String) (v.elementAt(value))));
\}" shape=ellipse]
61 [label="12:CtExecutableReferenceImpl@append()" shape=ellipse]
62 [label="12:CtVirtualElement@append" shape=ellipse]
63 [label="12:CtFieldReadImpl@result" shape=ellipse]
64 [label="12:CtFieldReadImpl@to" shape=ellipse]
65 [label="12:CtVariableReadImpl@i" shape=ellipse]
66 [label="12:CtArrayReadImpl@to[i]" shape=ellipse]
67 [label="12:CtInvocationImpl@result.append(to[i])" shape=ellipse]
68 [label="11:CtBlockImpl@\{
    result.append(to[i]);
\}" shape=ellipse]
69 [label="9:CtIfImpl@if (value > (-1)) \{
    result.append(((String) (v.elementAt(value))));
\} else \{
    result.append(to[i]);
\}" shape=ellipse]
70 [label="7:CtBlockImpl@\{
    int value = Character.digit(to[i], 10);
    if (value > (-1)) \{
        result.append(((String) (v.elementAt(value))));
    \} else \{
        result.append(to[i]);
    \}
\}" shape=ellipse]
71 [label="15:CtExecutableReferenceImpl@append(char)" shape=ellipse]
72 [label="15:CtVirtualElement@append" shape=ellipse]
73 [label="15:CtFieldReadImpl@result" shape=ellipse]
74 [label="15:CtLiteralImpl@'\\'" shape=ellipse]
75 [label="15:CtInvocationImpl@result.append('\\')" shape=ellipse]
76 [label="14:CtBlockImpl@\{
    result.append('\\');
\}" shape=ellipse]
77 [label="7:CtIfImpl@if ((++i) < to.length) \{
    int value = Character.digit(to[i], 10);
    if (value > (-1)) \{
        result.append(((String) (v.elementAt(value))));
    \} else \{
        result.append(to[i]);
    \}
\} else \{
    result.append('\\');
\}" shape=ellipse]
78 [label="6:CtBlockImpl@\{
    if ((++i) < to.length) \{
        int value = Character.digit(to[i], 10);
        if (value > (-1)) \{
            result.append(((String) (v.elementAt(value))));
        \} else \{
            result.append(to[i]);
        \}
    \} else \{
        result.append('\\');
    \}
\}" shape=ellipse]
79 [label="18:CtExecutableReferenceImpl@append()" shape=ellipse]
80 [label="18:CtVirtualElement@append" shape=ellipse]
81 [label="18:CtFieldReadImpl@result" shape=ellipse]
82 [label="18:CtFieldReadImpl@to" shape=ellipse]
83 [label="18:CtVariableReadImpl@i" shape=ellipse]
84 [label="18:CtArrayReadImpl@to[i]" shape=ellipse]
85 [label="18:CtInvocationImpl@result.append(to[i])" shape=ellipse]
86 [label="17:CtBlockImpl@\{
    result.append(to[i]);
\}" shape=ellipse]
87 [label="6:CtIfImpl@if (to[i] == '\\') \{
    if ((++i) < to.length) \{
        int value = Character.digit(to[i], 10);
        if (value > (-1)) \{
            result.append(((String) (v.elementAt(value))));
        \} else \{
            result.append(to[i]);
        \}
    \} else \{
        result.append('\\');
    \}
\} else \{
    result.append(to[i]);
\}" shape=ellipse]
88 [label="5:CtBlockImpl@\{
    if (to[i] == '\\') \{
        if ((++i) < to.length) \{
            int value = Character.digit(to[i], 10);
            if (value > (-1)) \{
                result.append(((String) (v.elementAt(value))));
            \} else \{
                result.append(to[i]);
            \}
        \} else \{
            result.append('\\');
        \}
    \} else \{
        result.append(to[i]);
    \}
\}" shape=ellipse]
89 [label="5:CtForImpl@for (int i = 0; i < to.length; i++) \{
    if (to[i] == '\\') \{
        if ((++i) < to.length) \{
            int value = Character.digit(to[i], 10);
            if (value > (-1)) \{
                result.append(((String) (v.elementAt(value))));
            \} else \{
                result.append(to[i]);
            \}
        \} else \{
            result.append('\\');
        \}
    \} else \{
        result.append(to[i]);
    \}
\}" shape=ellipse]
90 [label="21:CtExecutableReferenceImpl@toString()" shape=ellipse]
91 [label="21:CtVirtualElement@toString" shape=ellipse]
92 [label="21:CtFieldReadImpl@result" shape=ellipse]
93 [label="21:CtInvocationImpl@result.toString()" shape=ellipse]
94 [label="21:CtReturnImpl@return result.toString()" shape=ellipse]
95 [label="2:CtBlockImpl@\{
    Vector v = reg.getGroups(source);
    result.setLength(0);
    for (int i = 0; i < to.length; i++) \{
        if (to[i] == '\\') \{
            if ((++i) < to.length) \{
                int value = Character.digit(to[i], 10);
                if (value > (-1)) \{
                    result.append(((String) (v.elementAt(value))));
                \} else \{
                    result.append(to[i]);
                \}
            \} else \{
                result.append('\\');
            \}
        \} else \{
            result.append(to[i]);
        \}
    \}
    return result.toString();
\}" shape=ellipse]
96 [label="2:CtMethodImpl@protected String replaceReferences(String source) \{
    Vector v = reg.getGroups(source);
    result.setLength(0);
    for (int i = 0; i < to.length; i++) \{
        if (to[i] == '\\') \{
            if ((++i) < to.length) \{
                int value = Character.digit(to[i], 10);
                if (value > (-1)) \{
                    result.append(((String) (v.elementAt(value))));
                \} else \{
                    result.append(to[i]);
                \}
            \} else \{
                result.append('\\');
            \}
        \} else \{
            result.append(to[i]);
        \}
    \}
    return result.toString();
\}" shape=ellipse]
97 [label="21:Update@UPDATE" shape=ellipse]
98 [label="21:CtInvocationImpl@result.substring(0)" shape=ellipse]
2 -> 3 [label="AST"];
7 -> 10 [label="Data Dep"];
8 -> 10 [label="Data Dep"];
9 -> 6 [label="AST"];
9 -> 7 [label="AST"];
9 -> 5 [label="AST"];
9 -> 8 [label="AST"];
10 -> 55 [label="Define-Use"];
11 -> 10 [label="AST"];
11 -> 4 [label="AST"];
11 -> 9 [label="AST"];
16 -> 13 [label="AST"];
16 -> 14 [label="AST"];
16 -> 12 [label="AST"];
16 -> 15 [label="AST"];
19 -> 21 [label="Define-Use"];
20 -> 19 [label="AST"];
20 -> 17 [label="AST"];
20 -> 18 [label="AST"];
23 -> 21 [label="AST"];
23 -> 22 [label="AST"];
23 -> 88 [label="Control Dep"];
23 -> 87 [label="Control Dep"];
23 -> 30 [label="Control Dep"];
23 -> 28 [label="Control Dep"];
23 -> 26 [label="Control Dep"];
23 -> 27 [label="Control Dep"];
23 -> 29 [label="Control Dep"];
24 -> 27 [label="Define-Use"];
24 -> 40 [label="Define-Use"];
24 -> 65 [label="Define-Use"];
24 -> 83 [label="Define-Use"];
25 -> 24 [label="AST"];
28 -> 26 [label="AST"];
28 -> 27 [label="AST"];
30 -> 28 [label="AST"];
30 -> 29 [label="AST"];
30 -> 78 [label="Control Dep"];
30 -> 77 [label="Control Dep"];
30 -> 34 [label="Control Dep"];
30 -> 32 [label="Control Dep"];
30 -> 31 [label="Control Dep"];
30 -> 33 [label="Control Dep"];
30 -> 86 [label="Control Dep"];
30 -> 85 [label="Control Dep"];
30 -> 79 [label="Control Dep"];
30 -> 81 [label="Control Dep"];
30 -> 84 [label="Control Dep"];
30 -> 82 [label="Control Dep"];
30 -> 83 [label="Control Dep"];
31 -> 40 [label="Define-Use"];
31 -> 65 [label="Define-Use"];
31 -> 83 [label="Define-Use"];
32 -> 31 [label="AST"];
34 -> 32 [label="AST"];
34 -> 33 [label="AST"];
34 -> 70 [label="Control Dep"];
34 -> 45 [label="Control Dep"];
34 -> 43 [label="Control Dep"];
34 -> 36 [label="Control Dep"];
34 -> 38 [label="Control Dep"];
34 -> 41 [label="Control Dep"];
34 -> 39 [label="Control Dep"];
34 -> 40 [label="Control Dep"];
34 -> 42 [label="Control Dep"];
34 -> 69 [label="Control Dep"];
34 -> 49 [label="Control Dep"];
34 -> 46 [label="Control Dep"];
34 -> 48 [label="Control Dep"];
34 -> 47 [label="Control Dep"];
34 -> 76 [label="Control Dep"];
34 -> 75 [label="Control Dep"];
34 -> 71 [label="Control Dep"];
34 -> 73 [label="Control Dep"];
34 -> 74 [label="Control Dep"];
41 -> 39 [label="AST"];
41 -> 40 [label="AST"];
41 -> 44 [label="Data Dep"];
43 -> 37 [label="AST"];
43 -> 38 [label="AST"];
43 -> 36 [label="AST"];
43 -> 41 [label="AST"];
43 -> 42 [label="AST"];
44 -> 46 [label="Define-Use"];
44 -> 56 [label="Define-Use"];
45 -> 44 [label="AST"];
45 -> 35 [label="AST"];
45 -> 43 [label="AST"];
48 -> 47 [label="AST"];
49 -> 46 [label="AST"];
49 -> 48 [label="AST"];
49 -> 60 [label="Control Dep"];
49 -> 59 [label="Control Dep"];
49 -> 50 [label="Control Dep"];
49 -> 52 [label="Control Dep"];
49 -> 57 [label="Control Dep"];
49 -> 53 [label="Control Dep"];
49 -> 55 [label="Control Dep"];
49 -> 56 [label="Control Dep"];
49 -> 68 [label="Control Dep"];
49 -> 67 [label="Control Dep"];
49 -> 61 [label="Control Dep"];
49 -> 63 [label="Control Dep"];
49 -> 66 [label="Control Dep"];
49 -> 64 [label="Control Dep"];
49 -> 65 [label="Control Dep"];
57 -> 54 [label="AST"];
57 -> 58 [label="AST"];
57 -> 55 [label="AST"];
57 -> 53 [label="AST"];
57 -> 56 [label="AST"];
59 -> 51 [label="AST"];
59 -> 52 [label="AST"];
59 -> 50 [label="AST"];
59 -> 57 [label="AST"];
60 -> 59 [label="AST"];
66 -> 64 [label="AST"];
66 -> 65 [label="AST"];
67 -> 62 [label="AST"];
67 -> 63 [label="AST"];
67 -> 61 [label="AST"];
67 -> 66 [label="AST"];
68 -> 67 [label="AST"];
69 -> 49 [label="AST"];
69 -> 60 [label="AST"];
69 -> 68 [label="AST"];
70 -> 45 [label="AST"];
70 -> 69 [label="AST"];
75 -> 72 [label="AST"];
75 -> 73 [label="AST"];
75 -> 71 [label="AST"];
75 -> 74 [label="AST"];
76 -> 75 [label="AST"];
77 -> 34 [label="AST"];
77 -> 70 [label="AST"];
77 -> 76 [label="AST"];
78 -> 77 [label="AST"];
84 -> 82 [label="AST"];
84 -> 83 [label="AST"];
85 -> 80 [label="AST"];
85 -> 81 [label="AST"];
85 -> 79 [label="AST"];
85 -> 84 [label="AST"];
86 -> 85 [label="AST"];
87 -> 30 [label="AST"];
87 -> 78 [label="AST"];
87 -> 86 [label="AST"];
88 -> 87 [label="AST"];
89 -> 20 [label="AST"];
89 -> 23 [label="AST"];
89 -> 25 [label="AST"];
89 -> 88 [label="AST"];
93 -> 91 [label="AST"];
93 -> 92 [label="AST"];
93 -> 90 [label="AST"];
93 -> 97 [label="Action"];
94 -> 93 [label="AST"];
95 -> 11 [label="AST"];
95 -> 16 [label="AST"];
95 -> 89 [label="AST"];
95 -> 94 [label="AST"];
96 -> 1 [label="AST"];
96 -> 0 [label="AST"];
96 -> 2 [label="AST"];
96 -> 95 [label="AST"];
97 -> 98 [label="Action"];
}