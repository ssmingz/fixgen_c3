digraph "Pattern" {
0 [label="notifyTestSuiteEnded#?,long#5:UPDATE
notifyTestSuiteEnded#?,long#5:UPDATE" shape=ellipse]
1 [label="notifyTestSuiteEnded#?,long#5:((TestRunListener) (listeners.elementAt(i))).testRunEnded(elapsedtime)
notifyTestSuiteEnded#?,long#5:((TestRunListener) (listeners.elementAt(i))).onTestRunEnded(elapsedtime)" shape=ellipse]
2 [label="notifyTestSuiteEnded#?,long#4:i < listeners.size()
notifyTestSuiteEnded#?,long#4:i < listeners.size()" shape=ellipse]
3 [label="notifyTestSuiteEnded#?,long#3:listeners
notifyTestSuiteEnded#?,long#3:listeners" shape=ellipse]
4 [label="notifyTestSuiteEnded#?,long#4:for (int i = 0; i < listeners.size(); i++) \{
    ((TestRunListener) (listeners.elementAt(i))).testRunEnded(elapsedtime);
\}
notifyTestSuiteEnded#?,long#4:for (int i = 0; i < listeners.size(); i++) \{
    ((TestRunListener) (listeners.elementAt(i))).onTestRunEnded(elapsedtime);
\}" shape=ellipse]
5 [label="notifyTestSuiteEnded#?,long#4:i
notifyTestSuiteEnded#?,long#4:i" shape=ellipse]
6 [label="notifyTestSuiteEnded#?,long#4:listeners.size()
notifyTestSuiteEnded#?,long#4:listeners.size()" shape=ellipse]
7 [label="notifyTestSuiteEnded#?,long#4:\{
    ((TestRunListener) (listeners.elementAt(i))).testRunEnded(elapsedtime);
\}
notifyTestSuiteEnded#?,long#4:\{
    ((TestRunListener) (listeners.elementAt(i))).onTestRunEnded(elapsedtime);
\}" shape=ellipse]
8 [label="notifyTestSuiteEnded#?,long#5:testRunEnded(long)
notifyTestSuiteEnded#?,long#5:onTestRunEnded(long)" shape=ellipse]
9 [label="notifyTestSuiteEnded#?,long#5:((TestRunListener) (listeners.elementAt(i)))
notifyTestSuiteEnded#?,long#5:((TestRunListener) (listeners.elementAt(i)))" shape=ellipse]
10 [label="notifyTestSuiteEnded#?,long#5:elementAt(int)
notifyTestSuiteEnded#?,long#5:elementAt(int)" shape=ellipse]
11 [label="notifyTestSuiteEnded#?,long#5:listeners
notifyTestSuiteEnded#?,long#5:listeners" shape=ellipse]
12 [label="notifyTestSuiteEnded#?,long#5:i
notifyTestSuiteEnded#?,long#5:i" shape=ellipse]
13 [label="notifyTestSuiteEnded#?,long#5:elapsedtime
notifyTestSuiteEnded#?,long#5:elapsedtime" shape=ellipse]
14 [label="notifyTestSuiteEnded#?,long#5:testRunEnded
notifyTestSuiteEnded#?,long#5:onTestRunEnded" shape=ellipse]
15 [label="notifyTestSuiteEnded#?,long#5:((TestRunListener) (listeners.elementAt(i))).onTestRunEnded(elapsedtime)
notifyTestSuiteEnded#?,long#5:((TestRunListener) (listeners.elementAt(i))).onRunEnded(elapsedtime)" shape=ellipse]
0 -> 15 [label="Action:2"];
1 -> 0 [label="Action:2"];
1 -> 14 [label="AST:2"];
1 -> 9 [label="AST:2"];
1 -> 8 [label="AST:2"];
1 -> 13 [label="AST:2"];
2 -> 1 [label="Control Dep:2"];
2 -> 5 [label="AST:2"];
2 -> 6 [label="AST:2"];
2 -> 7 [label="Control Dep:2"];
2 -> 8 [label="Control Dep:2"];
2 -> 9 [label="Control Dep:2"];
2 -> 10 [label="Control Dep:2"];
2 -> 11 [label="Control Dep:2"];
2 -> 12 [label="Control Dep:2"];
2 -> 13 [label="Control Dep:2"];
3 -> 2 [label="Control Dep:2"];
3 -> 4 [label="Control Dep:2"];
3 -> 5 [label="Control Dep:2"];
3 -> 6 [label="Control Dep:2"];
4 -> 2 [label="AST:2"];
4 -> 7 [label="AST:2"];
7 -> 1 [label="AST:2"];
9 -> 11 [label="AST:2"];
9 -> 10 [label="AST:2"];
9 -> 12 [label="AST:2"];
}