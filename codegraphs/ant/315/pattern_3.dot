digraph "Pattern" {
0 [label="testContainsIncomplete2#?#6:MOVE
testContainsIncomplete1#?#6:MOVE" shape=ellipse]
1 [label="testContainsIncomplete2#?#6:\"both string and substring are required in contains\"
testContainsIncomplete1#?#6:\"both string and substring are required in contains\"" shape=ellipse]
2 [label="testContainsIncomplete2#?#3:expectSpecificBuildException(\"contains-incomplete2\", \"Missing contains attribute\", \"both string and substring are required in contains\")
testContainsIncomplete1#?#3:expectSpecificBuildException(\"contains-incomplete1\", \"Missing contains attribute\", \"both string and substring are required in contains\")" shape=ellipse]
3 [label="testContainsIncomplete2#?#2:\{
    expectSpecificBuildException(\"contains-incomplete2\", \"Missing contains attribute\", \"both string and substring are required in contains\");
\}
testContainsIncomplete1#?#2:\{
    expectSpecificBuildException(\"contains-incomplete1\", \"Missing contains attribute\", \"both string and substring are required in contains\");
\}" shape=ellipse]
4 [label="testContainsIncomplete2#?#3:expectSpecificBuildException
testContainsIncomplete1#?#3:expectSpecificBuildException" shape=ellipse]
5 [label="testContainsIncomplete2#?#-1:
testContainsIncomplete1#?#-1:" shape=ellipse]
6 [label="testContainsIncomplete2#?#3:expectSpecificBuildException(java.lang.String,java.lang.String,java.lang.String)
testContainsIncomplete1#?#3:expectSpecificBuildException(java.lang.String,java.lang.String,java.lang.String)" shape=ellipse]
7 [label="testContainsIncomplete2#?#4:\"contains-incomplete2\"
testContainsIncomplete1#?#4:\"contains-incomplete1\"" shape=ellipse]
8 [label="testContainsIncomplete2#?#5:\"Missing contains attribute\"
testContainsIncomplete1#?#5:\"Missing contains attribute\"" shape=ellipse]
9 [label="testContainsIncomplete2#?#3:DELETE
testContainsIncomplete1#?#3:DELETE" shape=ellipse]
10 [label="testContainsIncomplete2#?#-1:String
testContainsIncomplete1#?#-1:String" shape=ellipse]
11 [label="testContainsIncomplete2#?#8:assertEquals(\"both string and substring are required in contains\", ex.getMessage())
testContainsIncomplete1#?#8:assertEquals(\"both string and substring are required in contains\", ex.getMessage())" shape=ellipse]
12 [label="testContainsIncomplete2#?#7:BuildException ex
testContainsIncomplete1#?#7:BuildException ex" shape=ellipse]
13 [label="testContainsIncomplete2#?#7:\{
    assertEquals(\"both string and substring are required in contains\", ex.getMessage());
\}
testContainsIncomplete1#?#7:\{
    assertEquals(\"both string and substring are required in contains\", ex.getMessage());
\}" shape=ellipse]
14 [label="testContainsIncomplete2#?#8:assertEquals(java.lang.String,<unknown>)
testContainsIncomplete1#?#8:assertEquals(java.lang.String,<unknown>)" shape=ellipse]
15 [label="testContainsIncomplete2#?#-1:
testContainsIncomplete1#?#-1:" shape=ellipse]
16 [label="testContainsIncomplete2#?#-1:PlaceHold
testContainsIncomplete1#?#-1:PlaceHold" shape=ellipse]
17 [label="testContainsIncomplete2#?#8:ex.getMessage()
testContainsIncomplete1#?#8:ex.getMessage()" shape=ellipse]
18 [label="testContainsIncomplete2#?#8:getMessage()
testContainsIncomplete1#?#8:getMessage()" shape=ellipse]
19 [label="testContainsIncomplete2#?#8:ex
testContainsIncomplete1#?#8:ex" shape=ellipse]
0 -> 11 [label="Action:2"];
1 -> 0 [label="Action:2"];
1 -> 10 [label="AST:2"];
2 -> 1 [label="AST:2"];
2 -> 4 [label="AST:2"];
2 -> 5 [label="AST:2"];
2 -> 6 [label="AST:2"];
2 -> 7 [label="AST:2"];
2 -> 8 [label="AST:2"];
2 -> 9 [label="Action:2"];
3 -> 2 [label="AST:2"];
11 -> 15 [label="AST:2"];
11 -> 14 [label="AST:2"];
11 -> 17 [label="AST:2"];
12 -> 11 [label="Control Dep:2"];
12 -> 13 [label="Control Dep:2"];
12 -> 14 [label="Control Dep:2"];
12 -> 15 [label="Control Dep:2"];
12 -> 16 [label="Control Dep:2"];
12 -> 17 [label="Control Dep:2"];
12 -> 18 [label="Control Dep:2"];
12 -> 19 [label="Control Dep:2"];
13 -> 11 [label="AST:2"];
15 -> 16 [label="AST:2"];
17 -> 19 [label="AST:2"];
17 -> 18 [label="AST:2"];
}