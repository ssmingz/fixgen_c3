digraph "Pattern" {
0 [label="replaceTokens#?,String,String#6:UPDATE
topoSort#?,String[],Hashtable,boolean#4:UPDATE
execute#?#5:UPDATE" shape=ellipse]
1 [label="replaceTokens#?,String,String#6:new Vector()
topoSort#?,String[],Hashtable,boolean#4:new Vector()
execute#?#5:new Vector(targets)" shape=ellipse]
2 [label="replaceTokens#?,String,String#5:recurseDepth == 0" shape=ellipse]
3 [label="replaceTokens#?,String,String#5:if (recurseDepth == 0) \{
    passedTokens = new Vector();
\}" shape=ellipse]
4 [label="replaceTokens#?,String,String#5:recurseDepth
topoSort#?,String[],Hashtable,boolean#4:ret
execute#?#-1:targets" shape=ellipse]
5 [label="replaceTokens#?,String,String#5:0" shape=ellipse]
6 [label="replaceTokens#?,String,String#5:\{
    passedTokens = new Vector();
\}
topoSort#?,String[],Hashtable,boolean#3:\{
    Vector ret = new Vector();
    Hashtable state = new Hashtable();
    Stack visiting = new Stack();
    for (int i = 0; i < root.length; i++) \{
        String st = ((String) (state.get(root[i])));
        if (st == null) \{
            tsort(root[i], targetTable, state, visiting, ret);
        \} else if (st == VISITING) \{
            throw new RuntimeException(\"Unexpected node in visiting state: \" + root[i]);
        \}
    \}
    StringBuffer buf = new StringBuffer(\"Build sequence for target(s)\");
    for (int j = 0; j < root.length; j++) \{
        buf.append(j == 0 ? \" `\" : \", `\").append(root[j]).append('\'');
    \}
    buf.append(\" is \" + ret);
    log(buf.toString(), MSG_VERBOSE);
    Vector complete = (returnAll) ? ret : new Vector(ret);
    for (Enumeration en = targetTable.keys(); en.hasMoreElements();) \{
        String curTarget = ((String) (en.nextElement()));
        String st = ((String) (state.get(curTarget)));
        if (st == null) \{
            tsort(curTarget, targetTable, state, visiting, complete);
        \} else if (st == VISITING) \{
            throw new RuntimeException(\"Unexpected node in visiting state: \" + curTarget);
        \}
    \}
    log(\"Complete build sequence is \" + complete, MSG_VERBOSE);
    return ret;
\}
execute#?#2:\{
    File savedDir = dir;
    String savedAntFile = antFile;
    Vector locals = new Vector(targets);
    try \{
        getNewProject();
        if ((dir == null) && inheritAll) \{
            dir = getProject().getBaseDir();
        \}
        initializeProject();
        if (dir != null) \{
            if (!useNativeBasedir) \{
                newProject.setBaseDir(dir);
                if (savedDir != null) \{
                    newProject.setInheritedProperty(PROJECT_BASEDIR, dir.getAbsolutePath());
                \}
            \}
        \} else \{
            dir = getProject().getBaseDir();
        \}
        overrideProperties();
        if (antFile == null) \{
            antFile = getDefaultBuildFile();
        \}
        File file = FILE_UTILS.resolveFile(dir, antFile);
        antFile = file.getAbsolutePath();
        log(((\"calling target(s) \" + (locals.size() > 0 ? locals.toString() : \"[default]\")) + \" in build file \") + antFile, MSG_VERBOSE);
        newProject.setUserProperty(ANT_FILE, antFile);
        String thisAntFile = getProject().getProperty(ANT_FILE);
        if (((thisAntFile != null) && file.equals(getProject().resolveFile(thisAntFile))) && (getOwningTarget() != null)) \{
            if (getOwningTarget().getName().equals(\"\")) \{
                if (getTaskName().equals(\"antcall\")) \{
                    throw new BuildException(\"antcall must not be used at\" + \" the top level.\");
                \}
                throw new BuildException(((getTaskName() + \" task at the\") + \" top level must not invoke\") + \" its own build file.\");
            \}
        \}
        try \{
            ProjectHelper.configureProject(newProject, file);
        \} catch (BuildException ex) \{
            throw ProjectHelper.addLocationToBuildException(ex, getLocation());
        \}
        if (locals.size() == 0) \{
            String defaultTarget = newProject.getDefaultTarget();
            if (defaultTarget != null) \{
                locals.add(defaultTarget);
            \}
        \}
        if (newProject.getProperty(ANT_FILE).equals(getProject().getProperty(ANT_FILE)) && (getOwningTarget() != null)) \{
            String owningTargetName = getOwningTarget().getName();
            if (locals.contains(owningTargetName)) \{
                throw new BuildException((getTaskName() + \" task calling \") + \"its own parent target.\");
            \}
            boolean circular = false;
            for (Iterator it = locals.iterator(); (!circular) && it.hasNext();) \{
                Target other = ((Target) (getProject().getTargets().get(it.next())));
                circular |= (other != null) && other.dependsOn(owningTargetName);
            \}
            if (circular) \{
                throw new BuildException(((((getTaskName() + \" task calling a target\") + \" that depends on\") + \" its parent target \'\") + owningTargetName) + \"\'.\");
            \}
        \}
        addReferences();
        if ((locals.size() > 0) && (!((locals.size() == 1) && \"\".equals(locals.get(0))))) \{
            BuildException be = null;
            try \{
                log((\"Entering \" + antFile) + \"...\", MSG_VERBOSE);
                newProject.fireSubBuildStarted();
                newProject.executeTargets(locals);
            \} catch (BuildException ex) \{
                be = ProjectHelper.addLocationToBuildException(ex, getLocation());
                throw be;
            \} finally \{
                log((\"Exiting \" + antFile) + \".\", MSG_VERBOSE);
                newProject.fireSubBuildFinished(be);
            \}
        \}
    \} finally \{
        newProject = null;
        Enumeration e = properties.elements();
        while (e.hasMoreElements()) \{
            Property p = ((Property) (e.nextElement()));
            p.setProject(null);
        \} 
        if ((output != null) && (out != null)) \{
            try \{
                out.close();
            \} catch (final Exception ex) \{
            \}
        \}
        dir = savedDir;
        antFile = savedAntFile;
    \}
\}" shape=ellipse]
7 [label="replaceTokens#?,String,String#6:passedTokens = new Vector()
execute#?#5:Vector locals = new Vector(targets)" shape=ellipse]
8 [label="replaceTokens#?,String,String#6:passedTokens
execute#?#5:locals" shape=ellipse]
9 [label="replaceTokens#?,String,String#-1:Vector()
topoSort#?,String[],Hashtable,boolean#-1:Vector()
execute#?#-1:Vector()" shape=ellipse]
10 [label="replaceTokens#?,String,String#6:new VectorSet()
topoSort#?,String[],Hashtable,boolean#4:new VectorSet()
execute#?#5:new VectorSet(targets)" shape=ellipse]
11 [label="topoSort#?,String[],Hashtable,boolean#4:Vector ret = new Vector()" shape=ellipse]
12 [label="topoSort#?,String[],Hashtable,boolean#-1:Vector" shape=ellipse]
13 [label="topoSort#?,String[],Hashtable,boolean#4:Vector" shape=ellipse]
14 [label="topoSort#?,String[],Hashtable,boolean#4:Vector" shape=ellipse]
15 [label="execute#?#5:targets" shape=ellipse]
16 [label="execute#?#-1:Vector" shape=ellipse]
17 [label="execute#?#5:Vector" shape=ellipse]
18 [label="execute#?#5:Vector" shape=ellipse]
0 -> 10 [label="Action:3"];
1 -> 0 [label="Action:3"];
1 -> 9 [label="AST:3"];
1 -> 15 [label="AST:1"];
2 -> 1 [label="Control Dep:1"];
2 -> 4 [label="AST:1"];
2 -> 5 [label="AST:1"];
2 -> 6 [label="Control Dep:1"];
2 -> 7 [label="Control Dep:1"];
2 -> 8 [label="Control Dep:1"];
2 -> 9 [label="Control Dep:1"];
3 -> 2 [label="AST:1"];
3 -> 6 [label="AST:1"];
6 -> 7 [label="AST:2"];
6 -> 11 [label="AST:1"];
7 -> 1 [label="AST:2"];
7 -> 8 [label="AST:2"];
7 -> 17 [label="AST:1"];
9 -> 12 [label="AST:1"];
9 -> 13 [label="AST:1"];
9 -> 16 [label="AST:1"];
9 -> 18 [label="AST:1"];
11 -> 4 [label="AST:1"];
11 -> 14 [label="AST:1"];
11 -> 1 [label="AST:1"];
15 -> 4 [label="AST:1"];
15 -> 8 [label="Data Dep:1"];
}