digraph "testPassFileMultipleEntry#?" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@testPassFileMultipleEntry" shape=ellipse]
2 [label="2:CtTypeReferenceImpl@Exception" shape=ellipse]
3 [label="3:CtExecutableReferenceImpl@executeTarget(java.lang.String)" shape=ellipse]
4 [label="3:CtVirtualElement@executeTarget" shape=ellipse]
5 [label="3:CtLiteralImpl@\"test5\"" shape=ellipse]
6 [label="3:CtInvocationImpl@executeTarget(\"test5\")" shape=ellipse]
7 [label="4:CtTypeReferenceImpl@File" shape=ellipse]
8 [label="4:CtTypeReferenceImpl@File" shape=ellipse]
9 [label="4:CtExecutableReferenceImpl@getProjectDir()" shape=ellipse]
10 [label="4:CtVirtualElement@getProjectDir" shape=ellipse]
11 [label="4:CtInvocationImpl@getProjectDir()" shape=ellipse]
12 [label="4:CtLiteralImpl@\"testpassfile.tmp\"" shape=ellipse]
13 [label="4:CtConstructorCallImpl@new File(getProjectDir(), \"testpassfile.tmp\")" shape=ellipse]
14 [label="4:CtVirtualElement@f" shape=ellipse]
15 [label="4:CtLocalVariableImpl@File f = new File(getProjectDir(), \"testpassfile.tmp\")" shape=ellipse]
16 [label="5:CtExecutableReferenceImpl@assertTrue(<unknown>,<unknown>)" shape=ellipse]
17 [label="5:CtVirtualElement@assertTrue" shape=ellipse]
18 [label="5:CtLiteralImpl@\"Passfile \"" shape=ellipse]
19 [label="5:CtVariableReadImpl@f" shape=ellipse]
20 [label="5:CtBinaryOperatorImpl@(\"Passfile \" + f)" shape=ellipse]
21 [label="5:CtLiteralImpl@\" not created\"" shape=ellipse]
22 [label="5:CtBinaryOperatorImpl@(\"Passfile \" + f) + \" not created\"" shape=ellipse]
23 [label="5:CtExecutableReferenceImpl@exists()" shape=ellipse]
24 [label="5:CtVirtualElement@exists" shape=ellipse]
25 [label="5:CtVariableReadImpl@f" shape=ellipse]
26 [label="5:CtInvocationImpl@f.exists()" shape=ellipse]
27 [label="5:CtInvocationImpl@assertTrue((\"Passfile \" + f) + \" not created\", f.exists())" shape=ellipse]
28 [label="6:CtExecutableReferenceImpl@assertEquals(<unknown>,<unknown>)" shape=ellipse]
29 [label="6:CtVirtualElement@assertEquals" shape=ellipse]
30 [label="6:CtFieldReadImpl@JAKARTA_URL" shape=ellipse]
31 [label="6:CtFieldReadImpl@EOL" shape=ellipse]
32 [label="6:CtBinaryOperatorImpl@(JAKARTA_URL + EOL)" shape=ellipse]
33 [label="6:CtFieldReadImpl@XML_URL" shape=ellipse]
34 [label="6:CtBinaryOperatorImpl@((JAKARTA_URL + EOL) + XML_URL)" shape=ellipse]
35 [label="6:CtFieldReadImpl@EOL" shape=ellipse]
36 [label="6:CtBinaryOperatorImpl@(((JAKARTA_URL + EOL) + XML_URL) + EOL)" shape=ellipse]
37 [label="6:CtFieldReadImpl@TIGRIS_URL" shape=ellipse]
38 [label="6:CtBinaryOperatorImpl@((((JAKARTA_URL + EOL) + XML_URL) + EOL) + TIGRIS_URL)" shape=ellipse]
39 [label="6:CtFieldReadImpl@EOL" shape=ellipse]
40 [label="6:CtBinaryOperatorImpl@((((JAKARTA_URL + EOL) + XML_URL) + EOL) + TIGRIS_URL) + EOL" shape=ellipse]
41 [label="6:CtExecutableReferenceImpl@readFile(<unknown>)" shape=ellipse]
42 [label="6:CtVirtualElement@readFile" shape=ellipse]
43 [label="6:CtVariableReadImpl@f" shape=ellipse]
44 [label="6:CtInvocationImpl@readFile(f)" shape=ellipse]
45 [label="6:CtInvocationImpl@assertEquals(((((JAKARTA_URL + EOL) + XML_URL) + EOL) + TIGRIS_URL) + EOL, readFile(f))" shape=ellipse]
46 [label="2:CtBlockImpl@\{
    executeTarget(\"test5\");
    File f = new File(getProjectDir(), \"testpassfile.tmp\");
    assertTrue((\"Passfile \" + f) + \" not created\", f.exists());
    assertEquals(((((JAKARTA_URL + EOL) + XML_URL) + EOL) + TIGRIS_URL) + EOL, readFile(f));
\}" shape=ellipse]
47 [label="2:CtMethodImpl@public void testPassFileMultipleEntry() throws Exception \{
    executeTarget(\"test5\");
    File f = new File(getProjectDir(), \"testpassfile.tmp\");
    assertTrue((\"Passfile \" + f) + \" not created\", f.exists());
    assertEquals(((((JAKARTA_URL + EOL) + XML_URL) + EOL) + TIGRIS_URL) + EOL, readFile(f));
\}" shape=ellipse]
48 [label="6:Update@UPDATE" shape=ellipse]
49 [label="9:CtInvocationImpl@FileUtilities.getFileContents(f)" shape=ellipse]
50 [label="9:CtTypeAccessImpl@FileUtilities" shape=ellipse]
51 [label="4:Update@UPDATE" shape=ellipse]
52 [label="5:CtInvocationImpl@buildRule.getProject()" shape=ellipse]
53 [label="2:Insert@INSERT" shape=ellipse]
54 [label="2:CtAnnotationImpl@@Test" shape=ellipse]
55 [label="4:Insert@INSERT" shape=ellipse]
56 [label="4:CtFieldReadImpl@buildRule" shape=ellipse]
57 [label="5:Insert@INSERT" shape=ellipse]
58 [label="5:CtInvocationImpl@buildRule.getProject().getBaseDir()" shape=ellipse]
59 [label="4:Move@MOVE" shape=ellipse]
6 -> 4 [label="AST"];
6 -> 3 [label="AST"];
6 -> 5 [label="AST"];
6 -> 55 [label="Action"];
11 -> 10 [label="AST"];
11 -> 9 [label="AST"];
11 -> 51 [label="Action"];
11 -> 59 [label="Action"];
13 -> 11 [label="AST"];
13 -> 12 [label="AST"];
13 -> 57 [label="Action"];
14 -> 19 [label="Define-Use"];
14 -> 25 [label="Define-Use"];
14 -> 43 [label="Define-Use"];
15 -> 14 [label="AST"];
15 -> 7 [label="AST"];
15 -> 13 [label="AST"];
20 -> 18 [label="AST"];
20 -> 19 [label="AST"];
22 -> 20 [label="AST"];
22 -> 21 [label="AST"];
26 -> 24 [label="AST"];
26 -> 25 [label="AST"];
26 -> 23 [label="AST"];
27 -> 17 [label="AST"];
27 -> 16 [label="AST"];
27 -> 22 [label="AST"];
27 -> 26 [label="AST"];
32 -> 30 [label="AST"];
32 -> 31 [label="AST"];
34 -> 32 [label="AST"];
34 -> 33 [label="AST"];
36 -> 34 [label="AST"];
36 -> 35 [label="AST"];
38 -> 36 [label="AST"];
38 -> 37 [label="AST"];
40 -> 38 [label="AST"];
40 -> 39 [label="AST"];
44 -> 42 [label="AST"];
44 -> 41 [label="AST"];
44 -> 43 [label="AST"];
44 -> 48 [label="Action"];
45 -> 29 [label="AST"];
45 -> 28 [label="AST"];
45 -> 40 [label="AST"];
45 -> 44 [label="AST"];
46 -> 6 [label="AST"];
46 -> 15 [label="AST"];
46 -> 27 [label="AST"];
46 -> 45 [label="AST"];
47 -> 1 [label="AST"];
47 -> 0 [label="AST"];
47 -> 2 [label="AST"];
47 -> 46 [label="AST"];
47 -> 53 [label="Action"];
48 -> 49 [label="Action"];
49 -> 50 [label="AST"];
51 -> 52 [label="Action"];
53 -> 54 [label="Action"];
55 -> 56 [label="Action"];
57 -> 58 [label="Action"];
58 -> 52 [label="AST"];
59 -> 58 [label="Action"];
}