digraph "createElement#?,Object,String" {
0 [label="2:CtTypeReferenceImpl@Object" shape=ellipse]
1 [label="2:CtVirtualElement@createElement" shape=ellipse]
2 [label="2:CtParameterImpl@Object element" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@Object" shape=ellipse]
4 [label="2:CtParameterImpl@String elementName" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
6 [label="2:CtTypeReferenceImpl@BuildException" shape=ellipse]
7 [label="3:CtTypeReferenceImpl@NestedCreator" shape=ellipse]
8 [label="3:CtExecutableReferenceImpl@get(java.lang.String)" shape=ellipse]
9 [label="3:CtVirtualElement@get" shape=ellipse]
10 [label="3:CtFieldReadImpl@nestedCreators" shape=ellipse]
11 [label="3:CtVariableReadImpl@elementName" shape=ellipse]
12 [label="3:CtInvocationImpl@((NestedCreator) (nestedCreators.get(elementName)))" shape=ellipse]
13 [label="3:CtTypeReferenceImpl@NestedCreator" shape=ellipse]
14 [label="3:CtVirtualElement@nc" shape=ellipse]
15 [label="3:CtLocalVariableImpl@NestedCreator nc = ((NestedCreator) (nestedCreators.get(elementName)))" shape=ellipse]
16 [label="4:CtVariableReadImpl@nc" shape=ellipse]
17 [label="4:CtLiteralImpl@null" shape=ellipse]
18 [label="4:CtBinaryOperatorImpl@nc == null" shape=ellipse]
19 [label="5:CtTypeReferenceImpl@String" shape=ellipse]
20 [label="6:CtLiteralImpl@\"Class \"" shape=ellipse]
21 [label="6:CtExecutableReferenceImpl@getClass()" shape=ellipse]
22 [label="6:CtVirtualElement@getClass" shape=ellipse]
23 [label="6:CtVariableReadImpl@element" shape=ellipse]
24 [label="6:CtInvocationImpl@element.getClass()" shape=ellipse]
25 [label="6:CtBinaryOperatorImpl@(\"Class \" + element.getClass())" shape=ellipse]
26 [label="6:CtLiteralImpl@\" doesn\'t support the nested \\"\"" shape=ellipse]
27 [label="6:CtBinaryOperatorImpl@((\"Class \" + element.getClass()) + \" doesn\'t support the nested \\"\")" shape=ellipse]
28 [label="6:CtVariableReadImpl@elementName" shape=ellipse]
29 [label="6:CtBinaryOperatorImpl@(((\"Class \" + element.getClass()) + \" doesn\'t support the nested \\"\") + elementName)" shape=ellipse]
30 [label="7:CtLiteralImpl@\"\\" element\"" shape=ellipse]
31 [label="6:CtBinaryOperatorImpl@(((\"Class \" + element.getClass()) + \" doesn\'t support the nested \\"\") + elementName) + \"\\" element\"" shape=ellipse]
32 [label="5:CtVirtualElement@msg" shape=ellipse]
33 [label="5:CtLocalVariableImpl@String msg = (((\"Class \" + element.getClass()) + \" doesn\'t support the nested \\"\") + elementName) + \"\\" element\"" shape=ellipse]
34 [label="8:CtTypeReferenceImpl@BuildException" shape=ellipse]
35 [label="8:CtVariableReadImpl@msg" shape=ellipse]
36 [label="8:CtConstructorCallImpl@new BuildException(msg)" shape=ellipse]
37 [label="8:CtThrowImpl@throw new BuildException(msg)" shape=ellipse]
38 [label="4:CtBlockImpl@\{
    String msg = (((\"Class \" + element.getClass()) + \" doesn\'t support the nested \\"\") + elementName) + \"\\" element\";
    throw new BuildException(msg);
\}" shape=ellipse]
39 [label="4:CtIfImpl@if (nc == null) \{
    String msg = (((\"Class \" + element.getClass()) + \" doesn\'t support the nested \\"\") + elementName) + \"\\" element\";
    throw new BuildException(msg);
\}" shape=ellipse]
40 [label="11:CtExecutableReferenceImpl@create(java.lang.Object)" shape=ellipse]
41 [label="11:CtVirtualElement@create" shape=ellipse]
42 [label="11:CtVariableReadImpl@nc" shape=ellipse]
43 [label="11:CtVariableReadImpl@element" shape=ellipse]
44 [label="11:CtInvocationImpl@nc.create(element)" shape=ellipse]
45 [label="11:CtReturnImpl@return nc.create(element)" shape=ellipse]
46 [label="10:CtBlockImpl@\{
    return nc.create(element);
\}" shape=ellipse]
47 [label="12:CtVirtualElement@ie" shape=ellipse]
48 [label="12:CtTypeReferenceImpl@IllegalAccessException" shape=ellipse]
49 [label="12:CtCatchVariableImpl@IllegalAccessException ie" shape=ellipse]
50 [label="13:CtTypeReferenceImpl@BuildException" shape=ellipse]
51 [label="13:CtVariableReadImpl@ie" shape=ellipse]
52 [label="13:CtConstructorCallImpl@new BuildException(ie)" shape=ellipse]
53 [label="13:CtThrowImpl@throw new BuildException(ie)" shape=ellipse]
54 [label="12:CtBlockImpl@\{
    throw new BuildException(ie);
\}" shape=ellipse]
55 [label="12:CtCatchImpl@ catch (IllegalAccessException ie) \{
    throw new BuildException(ie);
\}" shape=ellipse]
56 [label="14:CtVirtualElement@ine" shape=ellipse]
57 [label="14:CtTypeReferenceImpl@InstantiationException" shape=ellipse]
58 [label="14:CtCatchVariableImpl@InstantiationException ine" shape=ellipse]
59 [label="15:CtTypeReferenceImpl@BuildException" shape=ellipse]
60 [label="15:CtVariableReadImpl@ine" shape=ellipse]
61 [label="15:CtConstructorCallImpl@new BuildException(ine)" shape=ellipse]
62 [label="15:CtThrowImpl@throw new BuildException(ine)" shape=ellipse]
63 [label="14:CtBlockImpl@\{
    throw new BuildException(ine);
\}" shape=ellipse]
64 [label="14:CtCatchImpl@ catch (InstantiationException ine) \{
    throw new BuildException(ine);
\}" shape=ellipse]
65 [label="16:CtVirtualElement@ite" shape=ellipse]
66 [label="16:CtTypeReferenceImpl@InvocationTargetException" shape=ellipse]
67 [label="16:CtCatchVariableImpl@InvocationTargetException ite" shape=ellipse]
68 [label="17:CtTypeReferenceImpl@Throwable" shape=ellipse]
69 [label="17:CtExecutableReferenceImpl@getTargetException()" shape=ellipse]
70 [label="17:CtVirtualElement@getTargetException" shape=ellipse]
71 [label="17:CtVariableReadImpl@ite" shape=ellipse]
72 [label="17:CtInvocationImpl@ite.getTargetException()" shape=ellipse]
73 [label="17:CtVirtualElement@t" shape=ellipse]
74 [label="17:CtLocalVariableImpl@Throwable t = ite.getTargetException()" shape=ellipse]
75 [label="18:CtVariableReadImpl@t" shape=ellipse]
76 [label="18:CtTypeAccessImpl@BuildException" shape=ellipse]
77 [label="18:CtTypeReferenceImpl@BuildException" shape=ellipse]
78 [label="18:CtBinaryOperatorImpl@t instanceof BuildException" shape=ellipse]
79 [label="19:CtVariableReadImpl@((BuildException) (t))" shape=ellipse]
80 [label="19:CtTypeReferenceImpl@BuildException" shape=ellipse]
81 [label="19:CtThrowImpl@throw ((BuildException) (t))" shape=ellipse]
82 [label="18:CtBlockImpl@\{
    throw ((BuildException) (t));
\}" shape=ellipse]
83 [label="18:CtIfImpl@if (t instanceof BuildException) \{
    throw ((BuildException) (t));
\}" shape=ellipse]
84 [label="21:CtTypeReferenceImpl@BuildException" shape=ellipse]
85 [label="21:CtVariableReadImpl@t" shape=ellipse]
86 [label="21:CtConstructorCallImpl@new BuildException(t)" shape=ellipse]
87 [label="21:CtThrowImpl@throw new BuildException(t)" shape=ellipse]
88 [label="16:CtBlockImpl@\{
    Throwable t = ite.getTargetException();
    if (t instanceof BuildException) \{
        throw ((BuildException) (t));
    \}
    throw new BuildException(t);
\}" shape=ellipse]
89 [label="16:CtCatchImpl@ catch (InvocationTargetException ite) \{
    Throwable t = ite.getTargetException();
    if (t instanceof BuildException) \{
        throw ((BuildException) (t));
    \}
    throw new BuildException(t);
\}" shape=ellipse]
90 [label="10:CtTryImpl@try \{
    return nc.create(element);
\} catch (IllegalAccessException ie) \{
    throw new BuildException(ie);
\} catch (InstantiationException ine) \{
    throw new BuildException(ine);
\} catch (InvocationTargetException ite) \{
    Throwable t = ite.getTargetException();
    if (t instanceof BuildException) \{
        throw ((BuildException) (t));
    \}
    throw new BuildException(t);
\}" shape=ellipse]
91 [label="2:CtBlockImpl@\{
    NestedCreator nc = ((NestedCreator) (nestedCreators.get(elementName)));
    if (nc == null) \{
        String msg = (((\"Class \" + element.getClass()) + \" doesn\'t support the nested \\"\") + elementName) + \"\\" element\";
        throw new BuildException(msg);
    \}
    try \{
        return nc.create(element);
    \} catch (IllegalAccessException ie) \{
        throw new BuildException(ie);
    \} catch (InstantiationException ine) \{
        throw new BuildException(ine);
    \} catch (InvocationTargetException ite) \{
        Throwable t = ite.getTargetException();
        if (t instanceof BuildException) \{
            throw ((BuildException) (t));
        \}
        throw new BuildException(t);
    \}
\}" shape=ellipse]
92 [label="2:CtMethodImpl@public Object createElement(Object element, String elementName) throws BuildException \{
    NestedCreator nc = ((NestedCreator) (nestedCreators.get(elementName)));
    if (nc == null) \{
        String msg = (((\"Class \" + element.getClass()) + \" doesn\'t support the nested \\"\") + elementName) + \"\\" element\";
        throw new BuildException(msg);
    \}
    try \{
        return nc.create(element);
    \} catch (IllegalAccessException ie) \{
        throw new BuildException(ie);
    \} catch (InstantiationException ine) \{
        throw new BuildException(ine);
    \} catch (InvocationTargetException ite) \{
        Throwable t = ite.getTargetException();
        if (t instanceof BuildException) \{
            throw ((BuildException) (t));
        \}
        throw new BuildException(t);
    \}
\}" shape=ellipse]
93 [label="6:Insert@INSERT" shape=ellipse]
94 [label="6:CtInvocationImpl@element.getClass().getName()" shape=ellipse]
95 [label="6:Move@MOVE" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
10 -> 14 [label="Data Dep"];
11 -> 14 [label="Data Dep"];
12 -> 9 [label="AST"];
12 -> 13 [label="AST"];
12 -> 10 [label="AST"];
12 -> 8 [label="AST"];
12 -> 11 [label="AST"];
14 -> 16 [label="Define-Use"];
14 -> 42 [label="Define-Use"];
15 -> 14 [label="AST"];
15 -> 7 [label="AST"];
15 -> 12 [label="AST"];
18 -> 16 [label="AST"];
18 -> 17 [label="AST"];
18 -> 38 [label="Control Dep"];
18 -> 33 [label="Control Dep"];
18 -> 31 [label="Control Dep"];
18 -> 29 [label="Control Dep"];
18 -> 27 [label="Control Dep"];
18 -> 25 [label="Control Dep"];
18 -> 20 [label="Control Dep"];
18 -> 24 [label="Control Dep"];
18 -> 21 [label="Control Dep"];
18 -> 23 [label="Control Dep"];
18 -> 26 [label="Control Dep"];
18 -> 28 [label="Control Dep"];
18 -> 30 [label="Control Dep"];
18 -> 37 [label="Control Dep"];
18 -> 36 [label="Control Dep"];
18 -> 35 [label="Control Dep"];
23 -> 32 [label="Data Dep"];
24 -> 22 [label="AST"];
24 -> 23 [label="AST"];
24 -> 21 [label="AST"];
24 -> 95 [label="Action"];
25 -> 20 [label="AST"];
25 -> 24 [label="AST"];
25 -> 93 [label="Action"];
27 -> 25 [label="AST"];
27 -> 26 [label="AST"];
28 -> 32 [label="Data Dep"];
29 -> 27 [label="AST"];
29 -> 28 [label="AST"];
31 -> 29 [label="AST"];
31 -> 30 [label="AST"];
32 -> 35 [label="Define-Use"];
33 -> 32 [label="AST"];
33 -> 19 [label="AST"];
33 -> 31 [label="AST"];
36 -> 35 [label="AST"];
37 -> 36 [label="AST"];
38 -> 33 [label="AST"];
38 -> 37 [label="AST"];
39 -> 18 [label="AST"];
39 -> 38 [label="AST"];
44 -> 41 [label="AST"];
44 -> 42 [label="AST"];
44 -> 40 [label="AST"];
44 -> 43 [label="AST"];
45 -> 44 [label="AST"];
46 -> 45 [label="AST"];
47 -> 51 [label="Define-Use"];
49 -> 47 [label="AST"];
49 -> 48 [label="AST"];
49 -> 54 [label="Control Dep"];
49 -> 53 [label="Control Dep"];
49 -> 52 [label="Control Dep"];
49 -> 51 [label="Control Dep"];
52 -> 51 [label="AST"];
53 -> 52 [label="AST"];
54 -> 53 [label="AST"];
55 -> 49 [label="AST"];
55 -> 54 [label="AST"];
56 -> 60 [label="Define-Use"];
58 -> 56 [label="AST"];
58 -> 57 [label="AST"];
58 -> 63 [label="Control Dep"];
58 -> 62 [label="Control Dep"];
58 -> 61 [label="Control Dep"];
58 -> 60 [label="Control Dep"];
61 -> 60 [label="AST"];
62 -> 61 [label="AST"];
63 -> 62 [label="AST"];
64 -> 58 [label="AST"];
64 -> 63 [label="AST"];
65 -> 71 [label="Define-Use"];
67 -> 65 [label="AST"];
67 -> 66 [label="AST"];
67 -> 88 [label="Control Dep"];
67 -> 74 [label="Control Dep"];
67 -> 72 [label="Control Dep"];
67 -> 69 [label="Control Dep"];
67 -> 71 [label="Control Dep"];
67 -> 83 [label="Control Dep"];
67 -> 78 [label="Control Dep"];
67 -> 75 [label="Control Dep"];
67 -> 76 [label="Control Dep"];
67 -> 87 [label="Control Dep"];
67 -> 86 [label="Control Dep"];
67 -> 85 [label="Control Dep"];
71 -> 73 [label="Data Dep"];
72 -> 70 [label="AST"];
72 -> 71 [label="AST"];
72 -> 69 [label="AST"];
73 -> 75 [label="Define-Use"];
73 -> 79 [label="Define-Use"];
73 -> 85 [label="Define-Use"];
74 -> 73 [label="AST"];
74 -> 68 [label="AST"];
74 -> 72 [label="AST"];
76 -> 77 [label="AST"];
78 -> 75 [label="AST"];
78 -> 76 [label="AST"];
78 -> 82 [label="Control Dep"];
78 -> 81 [label="Control Dep"];
78 -> 79 [label="Control Dep"];
79 -> 80 [label="AST"];
81 -> 79 [label="AST"];
82 -> 81 [label="AST"];
83 -> 78 [label="AST"];
83 -> 82 [label="AST"];
86 -> 85 [label="AST"];
87 -> 86 [label="AST"];
88 -> 74 [label="AST"];
88 -> 83 [label="AST"];
88 -> 87 [label="AST"];
89 -> 67 [label="AST"];
89 -> 88 [label="AST"];
90 -> 46 [label="AST"];
90 -> 55 [label="AST"];
90 -> 64 [label="AST"];
90 -> 89 [label="AST"];
91 -> 15 [label="AST"];
91 -> 39 [label="AST"];
91 -> 90 [label="AST"];
92 -> 1 [label="AST"];
92 -> 0 [label="AST"];
92 -> 2 [label="AST"];
92 -> 4 [label="AST"];
92 -> 6 [label="AST"];
92 -> 91 [label="AST"];
93 -> 94 [label="Action"];
95 -> 94 [label="Action"];
}