digraph "addText#?,Object,String" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@addText" shape=ellipse]
2 [label="2:CtParameterImpl@Object element" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@Object" shape=ellipse]
4 [label="2:CtParameterImpl@String text" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
6 [label="3:CtFieldReadImpl@addText" shape=ellipse]
7 [label="3:CtLiteralImpl@null" shape=ellipse]
8 [label="3:CtBinaryOperatorImpl@addText == null" shape=ellipse]
9 [label="4:CtTypeReferenceImpl@String" shape=ellipse]
10 [label="4:CtLiteralImpl@\"Class \"" shape=ellipse]
11 [label="4:CtExecutableReferenceImpl@getClass()" shape=ellipse]
12 [label="4:CtVirtualElement@getClass" shape=ellipse]
13 [label="4:CtVariableReadImpl@element" shape=ellipse]
14 [label="4:CtInvocationImpl@element.getClass()" shape=ellipse]
15 [label="4:CtBinaryOperatorImpl@(\"Class \" + element.getClass())" shape=ellipse]
16 [label="4:CtLiteralImpl@\" doesn't support nested text elements\"" shape=ellipse]
17 [label="4:CtBinaryOperatorImpl@(\"Class \" + element.getClass()) + \" doesn't support nested text elements\"" shape=ellipse]
18 [label="4:CtVirtualElement@msg" shape=ellipse]
19 [label="4:CtLocalVariableImpl@String msg = (\"Class \" + element.getClass()) + \" doesn't support nested text elements\"" shape=ellipse]
20 [label="5:CtTypeReferenceImpl@BuildException" shape=ellipse]
21 [label="5:CtVariableReadImpl@msg" shape=ellipse]
22 [label="5:CtConstructorCallImpl@new BuildException(msg)" shape=ellipse]
23 [label="5:CtThrowImpl@throw new BuildException(msg)" shape=ellipse]
24 [label="3:CtBlockImpl@\{
    String msg = (\"Class \" + element.getClass()) + \" doesn't support nested text elements\";
    throw new BuildException(msg);
\}" shape=ellipse]
25 [label="3:CtIfImpl@if (addText == null) \{
    String msg = (\"Class \" + element.getClass()) + \" doesn't support nested text elements\";
    throw new BuildException(msg);
\}" shape=ellipse]
26 [label="8:CtExecutableReferenceImpl@invoke(java.lang.Object,java.lang.String[])" shape=ellipse]
27 [label="8:CtVirtualElement@invoke" shape=ellipse]
28 [label="8:CtFieldReadImpl@addText" shape=ellipse]
29 [label="8:CtVariableReadImpl@element" shape=ellipse]
30 [label="8:CtNewArrayImpl@new String[]\{ text \}" shape=ellipse]
31 [label="8:CtVariableReadImpl@text" shape=ellipse]
32 [label="8:CtInvocationImpl@addText.invoke(element, new String[]\{ text \})" shape=ellipse]
33 [label="7:CtBlockImpl@\{
    addText.invoke(element, new String[]\{ text \});
\}" shape=ellipse]
34 [label="9:CtVirtualElement@ie" shape=ellipse]
35 [label="9:CtTypeReferenceImpl@IllegalAccessException" shape=ellipse]
36 [label="9:CtCatchVariableImpl@IllegalAccessException ie" shape=ellipse]
37 [label="10:CtTypeReferenceImpl@BuildException" shape=ellipse]
38 [label="10:CtVariableReadImpl@ie" shape=ellipse]
39 [label="10:CtConstructorCallImpl@new BuildException(ie)" shape=ellipse]
40 [label="10:CtThrowImpl@throw new BuildException(ie)" shape=ellipse]
41 [label="9:CtBlockImpl@\{
    throw new BuildException(ie);
\}" shape=ellipse]
42 [label="9:CtCatchImpl@ catch (IllegalAccessException ie) \{
    throw new BuildException(ie);
\}" shape=ellipse]
43 [label="11:CtVirtualElement@ite" shape=ellipse]
44 [label="11:CtTypeReferenceImpl@InvocationTargetException" shape=ellipse]
45 [label="11:CtCatchVariableImpl@InvocationTargetException ite" shape=ellipse]
46 [label="12:CtTypeReferenceImpl@Throwable" shape=ellipse]
47 [label="12:CtExecutableReferenceImpl@getTargetException()" shape=ellipse]
48 [label="12:CtVirtualElement@getTargetException" shape=ellipse]
49 [label="12:CtVariableReadImpl@ite" shape=ellipse]
50 [label="12:CtInvocationImpl@ite.getTargetException()" shape=ellipse]
51 [label="12:CtVirtualElement@t" shape=ellipse]
52 [label="12:CtLocalVariableImpl@Throwable t = ite.getTargetException()" shape=ellipse]
53 [label="13:CtVariableReadImpl@t" shape=ellipse]
54 [label="13:CtTypeAccessImpl@BuildException" shape=ellipse]
55 [label="13:CtTypeReferenceImpl@BuildException" shape=ellipse]
56 [label="13:CtBinaryOperatorImpl@t instanceof BuildException" shape=ellipse]
57 [label="14:CtVariableReadImpl@((BuildException) (t))" shape=ellipse]
58 [label="14:CtTypeReferenceImpl@BuildException" shape=ellipse]
59 [label="14:CtThrowImpl@throw ((BuildException) (t))" shape=ellipse]
60 [label="13:CtBlockImpl@\{
    throw ((BuildException) (t));
\}" shape=ellipse]
61 [label="13:CtIfImpl@if (t instanceof BuildException) \{
    throw ((BuildException) (t));
\}" shape=ellipse]
62 [label="16:CtTypeReferenceImpl@BuildException" shape=ellipse]
63 [label="16:CtVariableReadImpl@t" shape=ellipse]
64 [label="16:CtConstructorCallImpl@new BuildException(t)" shape=ellipse]
65 [label="16:CtThrowImpl@throw new BuildException(t)" shape=ellipse]
66 [label="11:CtBlockImpl@\{
    Throwable t = ite.getTargetException();
    if (t instanceof BuildException) \{
        throw ((BuildException) (t));
    \}
    throw new BuildException(t);
\}" shape=ellipse]
67 [label="11:CtCatchImpl@ catch (InvocationTargetException ite) \{
    Throwable t = ite.getTargetException();
    if (t instanceof BuildException) \{
        throw ((BuildException) (t));
    \}
    throw new BuildException(t);
\}" shape=ellipse]
68 [label="7:CtTryImpl@try \{
    addText.invoke(element, new String[]\{ text \});
\} catch (IllegalAccessException ie) \{
    throw new BuildException(ie);
\} catch (InvocationTargetException ite) \{
    Throwable t = ite.getTargetException();
    if (t instanceof BuildException) \{
        throw ((BuildException) (t));
    \}
    throw new BuildException(t);
\}" shape=ellipse]
69 [label="2:CtBlockImpl@\{
    if (addText == null) \{
        String msg = (\"Class \" + element.getClass()) + \" doesn't support nested text elements\";
        throw new BuildException(msg);
    \}
    try \{
        addText.invoke(element, new String[]\{ text \});
    \} catch (IllegalAccessException ie) \{
        throw new BuildException(ie);
    \} catch (InvocationTargetException ite) \{
        Throwable t = ite.getTargetException();
        if (t instanceof BuildException) \{
            throw ((BuildException) (t));
        \}
        throw new BuildException(t);
    \}
\}" shape=ellipse]
70 [label="2:CtMethodImpl@public void addText(Object element, String text) \{
    if (addText == null) \{
        String msg = (\"Class \" + element.getClass()) + \" doesn't support nested text elements\";
        throw new BuildException(msg);
    \}
    try \{
        addText.invoke(element, new String[]\{ text \});
    \} catch (IllegalAccessException ie) \{
        throw new BuildException(ie);
    \} catch (InvocationTargetException ite) \{
        Throwable t = ite.getTargetException();
        if (t instanceof BuildException) \{
            throw ((BuildException) (t));
        \}
        throw new BuildException(t);
    \}
\}" shape=ellipse]
71 [label="5:Insert@INSERT" shape=ellipse]
72 [label="5:CtInvocationImpl@element.getClass().getName()" shape=ellipse]
73 [label="4:Move@MOVE" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
8 -> 6 [label="AST"];
8 -> 7 [label="AST"];
8 -> 24 [label="Control Dep"];
8 -> 19 [label="Control Dep"];
8 -> 17 [label="Control Dep"];
8 -> 15 [label="Control Dep"];
8 -> 10 [label="Control Dep"];
8 -> 14 [label="Control Dep"];
8 -> 11 [label="Control Dep"];
8 -> 13 [label="Control Dep"];
8 -> 16 [label="Control Dep"];
8 -> 23 [label="Control Dep"];
8 -> 22 [label="Control Dep"];
8 -> 21 [label="Control Dep"];
13 -> 18 [label="Data Dep"];
14 -> 12 [label="AST"];
14 -> 13 [label="AST"];
14 -> 11 [label="AST"];
14 -> 73 [label="Action"];
15 -> 10 [label="AST"];
15 -> 14 [label="AST"];
15 -> 71 [label="Action"];
17 -> 15 [label="AST"];
17 -> 16 [label="AST"];
18 -> 21 [label="Define-Use"];
19 -> 18 [label="AST"];
19 -> 9 [label="AST"];
19 -> 17 [label="AST"];
22 -> 21 [label="AST"];
23 -> 22 [label="AST"];
24 -> 19 [label="AST"];
24 -> 23 [label="AST"];
25 -> 8 [label="AST"];
25 -> 24 [label="AST"];
30 -> 31 [label="AST"];
32 -> 27 [label="AST"];
32 -> 28 [label="AST"];
32 -> 26 [label="AST"];
32 -> 29 [label="AST"];
32 -> 30 [label="AST"];
33 -> 32 [label="AST"];
34 -> 38 [label="Define-Use"];
36 -> 34 [label="AST"];
36 -> 35 [label="AST"];
36 -> 41 [label="Control Dep"];
36 -> 40 [label="Control Dep"];
36 -> 39 [label="Control Dep"];
36 -> 38 [label="Control Dep"];
39 -> 38 [label="AST"];
40 -> 39 [label="AST"];
41 -> 40 [label="AST"];
42 -> 36 [label="AST"];
42 -> 41 [label="AST"];
43 -> 49 [label="Define-Use"];
45 -> 43 [label="AST"];
45 -> 44 [label="AST"];
45 -> 66 [label="Control Dep"];
45 -> 52 [label="Control Dep"];
45 -> 50 [label="Control Dep"];
45 -> 47 [label="Control Dep"];
45 -> 49 [label="Control Dep"];
45 -> 61 [label="Control Dep"];
45 -> 56 [label="Control Dep"];
45 -> 53 [label="Control Dep"];
45 -> 54 [label="Control Dep"];
45 -> 65 [label="Control Dep"];
45 -> 64 [label="Control Dep"];
45 -> 63 [label="Control Dep"];
49 -> 51 [label="Data Dep"];
50 -> 48 [label="AST"];
50 -> 49 [label="AST"];
50 -> 47 [label="AST"];
51 -> 53 [label="Define-Use"];
51 -> 57 [label="Define-Use"];
51 -> 63 [label="Define-Use"];
52 -> 51 [label="AST"];
52 -> 46 [label="AST"];
52 -> 50 [label="AST"];
54 -> 55 [label="AST"];
56 -> 53 [label="AST"];
56 -> 54 [label="AST"];
56 -> 60 [label="Control Dep"];
56 -> 59 [label="Control Dep"];
56 -> 57 [label="Control Dep"];
57 -> 58 [label="AST"];
59 -> 57 [label="AST"];
60 -> 59 [label="AST"];
61 -> 56 [label="AST"];
61 -> 60 [label="AST"];
64 -> 63 [label="AST"];
65 -> 64 [label="AST"];
66 -> 52 [label="AST"];
66 -> 61 [label="AST"];
66 -> 65 [label="AST"];
67 -> 45 [label="AST"];
67 -> 66 [label="AST"];
68 -> 33 [label="AST"];
68 -> 42 [label="AST"];
68 -> 67 [label="AST"];
69 -> 25 [label="AST"];
69 -> 68 [label="AST"];
70 -> 1 [label="AST"];
70 -> 0 [label="AST"];
70 -> 2 [label="AST"];
70 -> 4 [label="AST"];
70 -> 69 [label="AST"];
71 -> 72 [label="Action"];
73 -> 72 [label="Action"];
}