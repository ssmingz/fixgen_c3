digraph "getRef#?,Project" {
0 [label="2:CtTypeReferenceImpl@RegularExpression" shape=ellipse]
1 [label="2:CtVirtualElement@getRef" shape=ellipse]
2 [label="2:CtParameterImpl@Project p" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@Project" shape=ellipse]
4 [label="3:CtFieldReadImpl@checked" shape=ellipse]
5 [label="3:CtUnaryOperatorImpl@!checked" shape=ellipse]
6 [label="4:CtTypeReferenceImpl@Stack" shape=ellipse]
7 [label="4:CtTypeReferenceImpl@Stack" shape=ellipse]
8 [label="4:CtConstructorCallImpl@new Stack()" shape=ellipse]
9 [label="4:CtVirtualElement@stk" shape=ellipse]
10 [label="4:CtLocalVariableImpl@Stack stk = new Stack()" shape=ellipse]
11 [label="5:CtExecutableReferenceImpl@push(PlaceHold)" shape=ellipse]
12 [label="5:CtVirtualElement@push" shape=ellipse]
13 [label="5:CtVariableReadImpl@stk" shape=ellipse]
14 [label="5:CtThisAccessImpl@this" shape=ellipse]
15 [label="5:CtInvocationImpl@stk.push(this)" shape=ellipse]
16 [label="6:CtExecutableReferenceImpl@dieOnCircularReference(<unknown>,<unknown>)" shape=ellipse]
17 [label="6:CtVirtualElement@dieOnCircularReference" shape=ellipse]
18 [label="6:CtVariableReadImpl@stk" shape=ellipse]
19 [label="6:CtVariableReadImpl@p" shape=ellipse]
20 [label="6:CtInvocationImpl@dieOnCircularReference(stk, p)" shape=ellipse]
21 [label="3:CtBlockImpl@\{
    Stack stk = new Stack();
    stk.push(this);
    dieOnCircularReference(stk, p);
\}" shape=ellipse]
22 [label="3:CtIfImpl@if (!checked) \{
    Stack stk = new Stack();
    stk.push(this);
    dieOnCircularReference(stk, p);
\}" shape=ellipse]
23 [label="8:CtTypeReferenceImpl@Object" shape=ellipse]
24 [label="8:CtExecutableReferenceImpl@getReferencedObject(Project)" shape=ellipse]
25 [label="8:CtVirtualElement@getReferencedObject" shape=ellipse]
26 [label="8:CtFieldReadImpl@ref" shape=ellipse]
27 [label="8:CtVariableReadImpl@p" shape=ellipse]
28 [label="8:CtInvocationImpl@ref.getReferencedObject(p)" shape=ellipse]
29 [label="8:CtVirtualElement@o" shape=ellipse]
30 [label="8:CtLocalVariableImpl@Object o = ref.getReferencedObject(p)" shape=ellipse]
31 [label="9:CtVariableReadImpl@o" shape=ellipse]
32 [label="9:CtTypeAccessImpl@RegularExpression" shape=ellipse]
33 [label="9:CtTypeReferenceImpl@RegularExpression" shape=ellipse]
34 [label="9:CtBinaryOperatorImpl@(o instanceof RegularExpression)" shape=ellipse]
35 [label="9:CtUnaryOperatorImpl@!(o instanceof RegularExpression)" shape=ellipse]
36 [label="10:CtTypeReferenceImpl@String" shape=ellipse]
37 [label="10:CtExecutableReferenceImpl@getRefId()" shape=ellipse]
38 [label="10:CtVirtualElement@getRefId" shape=ellipse]
39 [label="10:CtFieldReadImpl@ref" shape=ellipse]
40 [label="10:CtInvocationImpl@ref.getRefId()" shape=ellipse]
41 [label="10:CtLiteralImpl@\" doesn\'t denote a \"" shape=ellipse]
42 [label="10:CtBinaryOperatorImpl@(ref.getRefId() + \" doesn\'t denote a \")" shape=ellipse]
43 [label="10:CtFieldReadImpl@DATA_TYPE_NAME" shape=ellipse]
44 [label="10:CtBinaryOperatorImpl@(ref.getRefId() + \" doesn\'t denote a \") + DATA_TYPE_NAME" shape=ellipse]
45 [label="10:CtVirtualElement@msg" shape=ellipse]
46 [label="10:CtLocalVariableImpl@String msg = (ref.getRefId() + \" doesn\'t denote a \") + DATA_TYPE_NAME" shape=ellipse]
47 [label="11:CtTypeReferenceImpl@BuildException" shape=ellipse]
48 [label="11:CtVariableReadImpl@msg" shape=ellipse]
49 [label="11:CtConstructorCallImpl@new BuildException(msg)" shape=ellipse]
50 [label="11:CtThrowImpl@throw new BuildException(msg)" shape=ellipse]
51 [label="9:CtBlockImpl@\{
    String msg = (ref.getRefId() + \" doesn\'t denote a \") + DATA_TYPE_NAME;
    throw new BuildException(msg);
\}" shape=ellipse]
52 [label="13:CtVariableReadImpl@((RegularExpression) (o))" shape=ellipse]
53 [label="13:CtTypeReferenceImpl@RegularExpression" shape=ellipse]
54 [label="13:CtReturnImpl@return ((RegularExpression) (o))" shape=ellipse]
55 [label="12:CtBlockImpl@\{
    return ((RegularExpression) (o));
\}" shape=ellipse]
56 [label="9:CtIfImpl@if (!(o instanceof RegularExpression)) \{
    String msg = (ref.getRefId() + \" doesn\'t denote a \") + DATA_TYPE_NAME;
    throw new BuildException(msg);
\} else \{
    return ((RegularExpression) (o));
\}" shape=ellipse]
57 [label="2:CtBlockImpl@\{
    if (!checked) \{
        Stack stk = new Stack();
        stk.push(this);
        dieOnCircularReference(stk, p);
    \}
    Object o = ref.getReferencedObject(p);
    if (!(o instanceof RegularExpression)) \{
        String msg = (ref.getRefId() + \" doesn\'t denote a \") + DATA_TYPE_NAME;
        throw new BuildException(msg);
    \} else \{
        return ((RegularExpression) (o));
    \}
\}" shape=ellipse]
58 [label="2:CtMethodImpl@public RegularExpression getRef(Project p) \{
    if (!checked) \{
        Stack stk = new Stack();
        stk.push(this);
        dieOnCircularReference(stk, p);
    \}
    Object o = ref.getReferencedObject(p);
    if (!(o instanceof RegularExpression)) \{
        String msg = (ref.getRefId() + \" doesn\'t denote a \") + DATA_TYPE_NAME;
        throw new BuildException(msg);
    \} else \{
        return ((RegularExpression) (o));
    \}
\}" shape=ellipse]
59 [label="3:Delete@DELETE" shape=ellipse]
60 [label="8:Delete@DELETE" shape=ellipse]
61 [label="10:Delete@DELETE" shape=ellipse]
62 [label="3:Insert@INSERT" shape=ellipse]
63 [label="3:CtInvocationImpl@isChecked()" shape=ellipse]
64 [label="8:Insert@INSERT" shape=ellipse]
65 [label="8:CtInvocationImpl@getRefid()" shape=ellipse]
66 [label="10:Insert@INSERT" shape=ellipse]
67 [label="10:CtInvocationImpl@getRefid()" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 59 [label="Action"];
5 -> 4 [label="AST"];
5 -> 21 [label="Control Dep"];
5 -> 10 [label="Control Dep"];
5 -> 8 [label="Control Dep"];
5 -> 15 [label="Control Dep"];
5 -> 11 [label="Control Dep"];
5 -> 13 [label="Control Dep"];
5 -> 14 [label="Control Dep"];
5 -> 20 [label="Control Dep"];
5 -> 16 [label="Control Dep"];
5 -> 18 [label="Control Dep"];
5 -> 19 [label="Control Dep"];
5 -> 62 [label="Action"];
9 -> 13 [label="Define-Use"];
9 -> 18 [label="Define-Use"];
10 -> 9 [label="AST"];
10 -> 6 [label="AST"];
10 -> 8 [label="AST"];
15 -> 12 [label="AST"];
15 -> 13 [label="AST"];
15 -> 11 [label="AST"];
15 -> 14 [label="AST"];
20 -> 17 [label="AST"];
20 -> 16 [label="AST"];
20 -> 18 [label="AST"];
20 -> 19 [label="AST"];
21 -> 10 [label="AST"];
21 -> 15 [label="AST"];
21 -> 20 [label="AST"];
22 -> 5 [label="AST"];
22 -> 21 [label="AST"];
26 -> 29 [label="Data Dep"];
26 -> 60 [label="Action"];
27 -> 29 [label="Data Dep"];
28 -> 25 [label="AST"];
28 -> 26 [label="AST"];
28 -> 24 [label="AST"];
28 -> 27 [label="AST"];
28 -> 64 [label="Action"];
29 -> 31 [label="Define-Use"];
29 -> 52 [label="Define-Use"];
30 -> 29 [label="AST"];
30 -> 23 [label="AST"];
30 -> 28 [label="AST"];
32 -> 33 [label="AST"];
34 -> 31 [label="AST"];
34 -> 32 [label="AST"];
35 -> 34 [label="AST"];
35 -> 51 [label="Control Dep"];
35 -> 46 [label="Control Dep"];
35 -> 44 [label="Control Dep"];
35 -> 42 [label="Control Dep"];
35 -> 40 [label="Control Dep"];
35 -> 37 [label="Control Dep"];
35 -> 39 [label="Control Dep"];
35 -> 41 [label="Control Dep"];
35 -> 43 [label="Control Dep"];
35 -> 50 [label="Control Dep"];
35 -> 49 [label="Control Dep"];
35 -> 48 [label="Control Dep"];
35 -> 55 [label="Control Dep"];
35 -> 54 [label="Control Dep"];
35 -> 52 [label="Control Dep"];
39 -> 45 [label="Data Dep"];
39 -> 61 [label="Action"];
40 -> 38 [label="AST"];
40 -> 39 [label="AST"];
40 -> 37 [label="AST"];
40 -> 66 [label="Action"];
42 -> 40 [label="AST"];
42 -> 41 [label="AST"];
43 -> 45 [label="Data Dep"];
44 -> 42 [label="AST"];
44 -> 43 [label="AST"];
45 -> 48 [label="Define-Use"];
46 -> 45 [label="AST"];
46 -> 36 [label="AST"];
46 -> 44 [label="AST"];
49 -> 48 [label="AST"];
50 -> 49 [label="AST"];
51 -> 46 [label="AST"];
51 -> 50 [label="AST"];
52 -> 53 [label="AST"];
54 -> 52 [label="AST"];
55 -> 54 [label="AST"];
56 -> 35 [label="AST"];
56 -> 51 [label="AST"];
56 -> 55 [label="AST"];
57 -> 22 [label="AST"];
57 -> 30 [label="AST"];
57 -> 56 [label="AST"];
58 -> 1 [label="AST"];
58 -> 0 [label="AST"];
58 -> 2 [label="AST"];
58 -> 57 [label="AST"];
62 -> 63 [label="Action"];
64 -> 65 [label="Action"];
66 -> 67 [label="Action"];
}