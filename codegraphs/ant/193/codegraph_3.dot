digraph "eval#?" {
0 [label="2:CtTypeReferenceImpl@boolean" shape=ellipse]
1 [label="2:CtVirtualElement@eval" shape=ellipse]
2 [label="2:CtTypeReferenceImpl@BuildException" shape=ellipse]
3 [label="3:CtFieldReadImpl@resources" shape=ellipse]
4 [label="3:CtLiteralImpl@null" shape=ellipse]
5 [label="3:CtBinaryOperatorImpl@resources == null" shape=ellipse]
6 [label="4:CtTypeReferenceImpl@BuildException" shape=ellipse]
7 [label="4:CtLiteralImpl@\"You must specify one or more nested resource collections\"" shape=ellipse]
8 [label="4:CtConstructorCallImpl@new BuildException(\"You must specify one or more nested resource collections\")" shape=ellipse]
9 [label="4:CtThrowImpl@throw new BuildException(\"You must specify one or more nested resource collections\")" shape=ellipse]
10 [label="3:CtBlockImpl@\{
    throw new BuildException(\"You must specify one or more nested resource collections\");
\}" shape=ellipse]
11 [label="3:CtIfImpl@if (resources == null) \{
    throw new BuildException(\"You must specify one or more nested resource collections\");
\}" shape=ellipse]
12 [label="6:CtExecutableReferenceImpl@size()" shape=ellipse]
13 [label="6:CtVirtualElement@size" shape=ellipse]
14 [label="6:CtFieldReadImpl@resources" shape=ellipse]
15 [label="6:CtInvocationImpl@resources.size()" shape=ellipse]
16 [label="6:CtLiteralImpl@1" shape=ellipse]
17 [label="6:CtBinaryOperatorImpl@resources.size() > 1" shape=ellipse]
18 [label="7:CtTypeReferenceImpl@Iterator" shape=ellipse]
19 [label="7:CtExecutableReferenceImpl@iterator()" shape=ellipse]
20 [label="7:CtVirtualElement@iterator" shape=ellipse]
21 [label="7:CtFieldReadImpl@resources" shape=ellipse]
22 [label="7:CtInvocationImpl@resources.iterator()" shape=ellipse]
23 [label="7:CtVirtualElement@i" shape=ellipse]
24 [label="7:CtLocalVariableImpl@Iterator i = resources.iterator()" shape=ellipse]
25 [label="8:CtTypeReferenceImpl@Resource" shape=ellipse]
26 [label="8:CtExecutableReferenceImpl@next()" shape=ellipse]
27 [label="8:CtVirtualElement@next" shape=ellipse]
28 [label="8:CtVariableReadImpl@i" shape=ellipse]
29 [label="8:CtInvocationImpl@((Resource) (i.next()))" shape=ellipse]
30 [label="8:CtTypeReferenceImpl@Resource" shape=ellipse]
31 [label="8:CtVirtualElement@r1" shape=ellipse]
32 [label="8:CtLocalVariableImpl@Resource r1 = ((Resource) (i.next()))" shape=ellipse]
33 [label="9:CtTypeReferenceImpl@Resource" shape=ellipse]
34 [label="9:CtLiteralImpl@null" shape=ellipse]
35 [label="9:CtVirtualElement@r2" shape=ellipse]
36 [label="9:CtLocalVariableImpl@Resource r2 = null" shape=ellipse]
37 [label="10:CtExecutableReferenceImpl@hasNext()" shape=ellipse]
38 [label="10:CtVirtualElement@hasNext" shape=ellipse]
39 [label="10:CtVariableReadImpl@i" shape=ellipse]
40 [label="10:CtInvocationImpl@i.hasNext()" shape=ellipse]
41 [label="11:CtVariableWriteImpl@r2" shape=ellipse]
42 [label="11:CtExecutableReferenceImpl@next()" shape=ellipse]
43 [label="11:CtVirtualElement@next" shape=ellipse]
44 [label="11:CtVariableReadImpl@i" shape=ellipse]
45 [label="11:CtInvocationImpl@((Resource) (i.next()))" shape=ellipse]
46 [label="11:CtTypeReferenceImpl@Resource" shape=ellipse]
47 [label="11:CtAssignmentImpl@r2 = ((Resource) (i.next()))" shape=ellipse]
48 [label="13:CtExecutableReferenceImpl@contentEquals(Resource,Resource)" shape=ellipse]
49 [label="13:CtVirtualElement@contentEquals" shape=ellipse]
50 [label="13:CtTypeAccessImpl@ResourceUtils" shape=ellipse]
51 [label="13:CtVariableReadImpl@r1" shape=ellipse]
52 [label="13:CtVariableReadImpl@r2" shape=ellipse]
53 [label="13:CtFieldReadImpl@asText" shape=ellipse]
54 [label="13:CtInvocationImpl@ResourceUtils.contentEquals(r1, r2, asText)" shape=ellipse]
55 [label="13:CtUnaryOperatorImpl@!ResourceUtils.contentEquals(r1, r2, asText)" shape=ellipse]
56 [label="14:CtLiteralImpl@false" shape=ellipse]
57 [label="14:CtReturnImpl@return false" shape=ellipse]
58 [label="13:CtBlockImpl@\{
    return false;
\}" shape=ellipse]
59 [label="13:CtIfImpl@if (!ResourceUtils.contentEquals(r1, r2, asText)) \{
    return false;
\}" shape=ellipse]
60 [label="12:CtBlockImpl@\{
    if (!ResourceUtils.contentEquals(r1, r2, asText)) \{
        return false;
    \}
\}" shape=ellipse]
61 [label="16:CtVirtualElement@ioe" shape=ellipse]
62 [label="16:CtTypeReferenceImpl@IOException" shape=ellipse]
63 [label="16:CtCatchVariableImpl@IOException ioe" shape=ellipse]
64 [label="17:CtTypeReferenceImpl@BuildException" shape=ellipse]
65 [label="18:CtLiteralImpl@\"when comparing resources \"" shape=ellipse]
66 [label="18:CtExecutableReferenceImpl@toString()" shape=ellipse]
67 [label="18:CtVirtualElement@toString" shape=ellipse]
68 [label="18:CtVariableReadImpl@r1" shape=ellipse]
69 [label="18:CtInvocationImpl@r1.toString()" shape=ellipse]
70 [label="18:CtBinaryOperatorImpl@(\"when comparing resources \" + r1.toString())" shape=ellipse]
71 [label="18:CtLiteralImpl@\" and \"" shape=ellipse]
72 [label="18:CtBinaryOperatorImpl@((\"when comparing resources \" + r1.toString()) + \" and \")" shape=ellipse]
73 [label="18:CtExecutableReferenceImpl@toString()" shape=ellipse]
74 [label="18:CtVirtualElement@toString" shape=ellipse]
75 [label="18:CtVariableReadImpl@r2" shape=ellipse]
76 [label="18:CtInvocationImpl@r2.toString()" shape=ellipse]
77 [label="18:CtBinaryOperatorImpl@((\"when comparing resources \" + r1.toString()) + \" and \") + r2.toString()" shape=ellipse]
78 [label="18:CtVariableReadImpl@ioe" shape=ellipse]
79 [label="17:CtConstructorCallImpl@new BuildException(((\"when comparing resources \" + r1.toString()) + \" and \") + r2.toString(), ioe)" shape=ellipse]
80 [label="17:CtThrowImpl@throw new BuildException(((\"when comparing resources \" + r1.toString()) + \" and \") + r2.toString(), ioe)" shape=ellipse]
81 [label="16:CtBlockImpl@\{
    throw new BuildException(((\"when comparing resources \" + r1.toString()) + \" and \") + r2.toString(), ioe);
\}" shape=ellipse]
82 [label="16:CtCatchImpl@ catch (IOException ioe) \{
    throw new BuildException(((\"when comparing resources \" + r1.toString()) + \" and \") + r2.toString(), ioe);
\}" shape=ellipse]
83 [label="12:CtTryImpl@try \{
    if (!ResourceUtils.contentEquals(r1, r2, asText)) \{
        return false;
    \}
\} catch (IOException ioe) \{
    throw new BuildException(((\"when comparing resources \" + r1.toString()) + \" and \") + r2.toString(), ioe);
\}" shape=ellipse]
84 [label="20:CtVariableWriteImpl@r1" shape=ellipse]
85 [label="20:CtVariableReadImpl@r2" shape=ellipse]
86 [label="20:CtAssignmentImpl@r1 = r2" shape=ellipse]
87 [label="10:CtBlockImpl@\{
    r2 = ((Resource) (i.next()));
    try \{
        if (!ResourceUtils.contentEquals(r1, r2, asText)) \{
            return false;
        \}
    \} catch (IOException ioe) \{
        throw new BuildException(((\"when comparing resources \" + r1.toString()) + \" and \") + r2.toString(), ioe);
    \}
    r1 = r2;
\}" shape=ellipse]
88 [label="10:CtWhileImpl@while (i.hasNext()) \{
    r2 = ((Resource) (i.next()));
    try \{
        if (!ResourceUtils.contentEquals(r1, r2, asText)) \{
            return false;
        \}
    \} catch (IOException ioe) \{
        throw new BuildException(((\"when comparing resources \" + r1.toString()) + \" and \") + r2.toString(), ioe);
    \}
    r1 = r2;
\} " shape=ellipse]
89 [label="6:CtBlockImpl@\{
    Iterator i = resources.iterator();
    Resource r1 = ((Resource) (i.next()));
    Resource r2 = null;
    while (i.hasNext()) \{
        r2 = ((Resource) (i.next()));
        try \{
            if (!ResourceUtils.contentEquals(r1, r2, asText)) \{
                return false;
            \}
        \} catch (IOException ioe) \{
            throw new BuildException(((\"when comparing resources \" + r1.toString()) + \" and \") + r2.toString(), ioe);
        \}
        r1 = r2;
    \} 
\}" shape=ellipse]
90 [label="6:CtIfImpl@if (resources.size() > 1) \{
    Iterator i = resources.iterator();
    Resource r1 = ((Resource) (i.next()));
    Resource r2 = null;
    while (i.hasNext()) \{
        r2 = ((Resource) (i.next()));
        try \{
            if (!ResourceUtils.contentEquals(r1, r2, asText)) \{
                return false;
            \}
        \} catch (IOException ioe) \{
            throw new BuildException(((\"when comparing resources \" + r1.toString()) + \" and \") + r2.toString(), ioe);
        \}
        r1 = r2;
    \} 
\}" shape=ellipse]
91 [label="23:CtLiteralImpl@true" shape=ellipse]
92 [label="23:CtReturnImpl@return true" shape=ellipse]
93 [label="2:CtBlockImpl@\{
    if (resources == null) \{
        throw new BuildException(\"You must specify one or more nested resource collections\");
    \}
    if (resources.size() > 1) \{
        Iterator i = resources.iterator();
        Resource r1 = ((Resource) (i.next()));
        Resource r2 = null;
        while (i.hasNext()) \{
            r2 = ((Resource) (i.next()));
            try \{
                if (!ResourceUtils.contentEquals(r1, r2, asText)) \{
                    return false;
                \}
            \} catch (IOException ioe) \{
                throw new BuildException(((\"when comparing resources \" + r1.toString()) + \" and \") + r2.toString(), ioe);
            \}
            r1 = r2;
        \} 
    \}
    return true;
\}" shape=ellipse]
94 [label="2:CtMethodImpl@public boolean eval() throws BuildException \{
    if (resources == null) \{
        throw new BuildException(\"You must specify one or more nested resource collections\");
    \}
    if (resources.size() > 1) \{
        Iterator i = resources.iterator();
        Resource r1 = ((Resource) (i.next()));
        Resource r2 = null;
        while (i.hasNext()) \{
            r2 = ((Resource) (i.next()));
            try \{
                if (!ResourceUtils.contentEquals(r1, r2, asText)) \{
                    return false;
                \}
            \} catch (IOException ioe) \{
                throw new BuildException(((\"when comparing resources \" + r1.toString()) + \" and \") + r2.toString(), ioe);
            \}
            r1 = r2;
        \} 
    \}
    return true;
\}" shape=ellipse]
95 [label="7:Insert@INSERT" shape=ellipse]
96 [label="7:CtTypeReferenceImpl@Resource" shape=ellipse]
5 -> 3 [label="AST"];
5 -> 4 [label="AST"];
5 -> 10 [label="Control Dep"];
5 -> 9 [label="Control Dep"];
5 -> 8 [label="Control Dep"];
5 -> 7 [label="Control Dep"];
8 -> 7 [label="AST"];
9 -> 8 [label="AST"];
10 -> 9 [label="AST"];
11 -> 5 [label="AST"];
11 -> 10 [label="AST"];
15 -> 13 [label="AST"];
15 -> 14 [label="AST"];
15 -> 12 [label="AST"];
17 -> 15 [label="AST"];
17 -> 16 [label="AST"];
17 -> 89 [label="Control Dep"];
17 -> 24 [label="Control Dep"];
17 -> 22 [label="Control Dep"];
17 -> 19 [label="Control Dep"];
17 -> 21 [label="Control Dep"];
17 -> 32 [label="Control Dep"];
17 -> 29 [label="Control Dep"];
17 -> 26 [label="Control Dep"];
17 -> 28 [label="Control Dep"];
17 -> 36 [label="Control Dep"];
17 -> 34 [label="Control Dep"];
17 -> 88 [label="Control Dep"];
17 -> 40 [label="Control Dep"];
17 -> 37 [label="Control Dep"];
17 -> 39 [label="Control Dep"];
18 -> 95 [label="Action"];
21 -> 23 [label="Data Dep"];
22 -> 20 [label="AST"];
22 -> 21 [label="AST"];
22 -> 19 [label="AST"];
23 -> 28 [label="Define-Use"];
23 -> 39 [label="Define-Use"];
23 -> 44 [label="Define-Use"];
24 -> 23 [label="AST"];
24 -> 18 [label="AST"];
24 -> 22 [label="AST"];
28 -> 31 [label="Data Dep"];
29 -> 27 [label="AST"];
29 -> 30 [label="AST"];
29 -> 28 [label="AST"];
29 -> 26 [label="AST"];
31 -> 51 [label="Define-Use"];
31 -> 68 [label="Define-Use"];
32 -> 31 [label="AST"];
32 -> 25 [label="AST"];
32 -> 29 [label="AST"];
36 -> 35 [label="AST"];
36 -> 33 [label="AST"];
36 -> 34 [label="AST"];
40 -> 38 [label="AST"];
40 -> 39 [label="AST"];
40 -> 37 [label="AST"];
40 -> 87 [label="Control Dep"];
40 -> 47 [label="Control Dep"];
40 -> 41 [label="Control Dep"];
40 -> 45 [label="Control Dep"];
40 -> 42 [label="Control Dep"];
40 -> 44 [label="Control Dep"];
40 -> 83 [label="Control Dep"];
40 -> 60 [label="Control Dep"];
40 -> 59 [label="Control Dep"];
40 -> 55 [label="Control Dep"];
40 -> 54 [label="Control Dep"];
40 -> 48 [label="Control Dep"];
40 -> 50 [label="Control Dep"];
40 -> 51 [label="Control Dep"];
40 -> 52 [label="Control Dep"];
40 -> 53 [label="Control Dep"];
40 -> 82 [label="Control Dep"];
40 -> 63 [label="Control Dep"];
40 -> 86 [label="Control Dep"];
40 -> 84 [label="Control Dep"];
40 -> 85 [label="Control Dep"];
41 -> 52 [label="Define-Use"];
41 -> 75 [label="Define-Use"];
41 -> 85 [label="Define-Use"];
44 -> 41 [label="Data Dep"];
45 -> 43 [label="AST"];
45 -> 46 [label="AST"];
45 -> 44 [label="AST"];
45 -> 42 [label="AST"];
47 -> 41 [label="AST"];
47 -> 45 [label="AST"];
54 -> 49 [label="AST"];
54 -> 50 [label="AST"];
54 -> 48 [label="AST"];
54 -> 51 [label="AST"];
54 -> 52 [label="AST"];
54 -> 53 [label="AST"];
55 -> 54 [label="AST"];
55 -> 58 [label="Control Dep"];
55 -> 57 [label="Control Dep"];
55 -> 56 [label="Control Dep"];
57 -> 56 [label="AST"];
58 -> 57 [label="AST"];
59 -> 55 [label="AST"];
59 -> 58 [label="AST"];
60 -> 59 [label="AST"];
61 -> 78 [label="Define-Use"];
63 -> 61 [label="AST"];
63 -> 62 [label="AST"];
63 -> 81 [label="Control Dep"];
63 -> 80 [label="Control Dep"];
63 -> 79 [label="Control Dep"];
63 -> 77 [label="Control Dep"];
63 -> 72 [label="Control Dep"];
63 -> 70 [label="Control Dep"];
63 -> 65 [label="Control Dep"];
63 -> 69 [label="Control Dep"];
63 -> 66 [label="Control Dep"];
63 -> 68 [label="Control Dep"];
63 -> 71 [label="Control Dep"];
63 -> 76 [label="Control Dep"];
63 -> 73 [label="Control Dep"];
63 -> 75 [label="Control Dep"];
63 -> 78 [label="Control Dep"];
69 -> 67 [label="AST"];
69 -> 68 [label="AST"];
69 -> 66 [label="AST"];
70 -> 65 [label="AST"];
70 -> 69 [label="AST"];
72 -> 70 [label="AST"];
72 -> 71 [label="AST"];
76 -> 74 [label="AST"];
76 -> 75 [label="AST"];
76 -> 73 [label="AST"];
77 -> 72 [label="AST"];
77 -> 76 [label="AST"];
79 -> 77 [label="AST"];
79 -> 78 [label="AST"];
80 -> 79 [label="AST"];
81 -> 80 [label="AST"];
82 -> 63 [label="AST"];
82 -> 81 [label="AST"];
83 -> 60 [label="AST"];
83 -> 82 [label="AST"];
85 -> 84 [label="Data Dep"];
86 -> 84 [label="AST"];
86 -> 85 [label="AST"];
87 -> 47 [label="AST"];
87 -> 83 [label="AST"];
87 -> 86 [label="AST"];
88 -> 40 [label="AST"];
88 -> 87 [label="AST"];
89 -> 24 [label="AST"];
89 -> 32 [label="AST"];
89 -> 36 [label="AST"];
89 -> 88 [label="AST"];
90 -> 17 [label="AST"];
90 -> 89 [label="AST"];
92 -> 91 [label="AST"];
93 -> 11 [label="AST"];
93 -> 90 [label="AST"];
93 -> 92 [label="AST"];
94 -> 1 [label="AST"];
94 -> 0 [label="AST"];
94 -> 2 [label="AST"];
94 -> 93 [label="AST"];
95 -> 96 [label="Action"];
}