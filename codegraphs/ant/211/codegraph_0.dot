digraph "recreate#?" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@recreate" shape=ellipse]
2 [label="2:CtTypeReferenceImpl@BuildException" shape=ellipse]
3 [label="4:CtExecutableReferenceImpl@isEmpty()" shape=ellipse]
4 [label="4:CtVirtualElement@isEmpty" shape=ellipse]
5 [label="4:CtFieldReadImpl@fileSets" shape=ellipse]
6 [label="4:CtInvocationImpl@fileSets.isEmpty()" shape=ellipse]
7 [label="5:CtExecutableReferenceImpl@handleError(java.lang.String)" shape=ellipse]
8 [label="5:CtVirtualElement@handleError" shape=ellipse]
9 [label="5:CtLiteralImpl@\"File set identifying link file(s) \"" shape=ellipse]
10 [label="5:CtLiteralImpl@\"required for action recreate\"" shape=ellipse]
11 [label="5:CtBinaryOperatorImpl@\"File set identifying link file(s) \" + \"required for action recreate\"" shape=ellipse]
12 [label="5:CtInvocationImpl@handleError(\"File set identifying link file(s) \" + \"required for action recreate\")" shape=ellipse]
13 [label="6:CtReturnImpl@return" shape=ellipse]
14 [label="4:CtBlockImpl@\{
    handleError(\"File set identifying link file(s) \" + \"required for action recreate\");
    return;
\}" shape=ellipse]
15 [label="4:CtIfImpl@if (fileSets.isEmpty()) \{
    handleError(\"File set identifying link file(s) \" + \"required for action recreate\");
    return;
\}" shape=ellipse]
16 [label="8:CtTypeReferenceImpl@Properties" shape=ellipse]
17 [label="8:CtExecutableReferenceImpl@loadLinks(<unknown>)" shape=ellipse]
18 [label="8:CtVirtualElement@loadLinks" shape=ellipse]
19 [label="8:CtFieldReadImpl@fileSets" shape=ellipse]
20 [label="8:CtInvocationImpl@loadLinks(fileSets)" shape=ellipse]
21 [label="8:CtVirtualElement@links" shape=ellipse]
22 [label="8:CtLocalVariableImpl@Properties links = loadLinks(fileSets)" shape=ellipse]
23 [label="9:CtTypeReferenceImpl@Iterator" shape=ellipse]
24 [label="9:CtExecutableReferenceImpl@iterator()" shape=ellipse]
25 [label="9:CtVirtualElement@iterator" shape=ellipse]
26 [label="9:CtExecutableReferenceImpl@keySet()" shape=ellipse]
27 [label="9:CtVirtualElement@keySet" shape=ellipse]
28 [label="9:CtVariableReadImpl@links" shape=ellipse]
29 [label="9:CtInvocationImpl@links.keySet()" shape=ellipse]
30 [label="9:CtInvocationImpl@links.keySet().iterator()" shape=ellipse]
31 [label="9:CtVirtualElement@kitr" shape=ellipse]
32 [label="9:CtLocalVariableImpl@Iterator kitr = links.keySet().iterator()" shape=ellipse]
33 [label="9:CtExecutableReferenceImpl@hasNext()" shape=ellipse]
34 [label="9:CtVirtualElement@hasNext" shape=ellipse]
35 [label="9:CtVariableReadImpl@kitr" shape=ellipse]
36 [label="9:CtInvocationImpl@kitr.hasNext()" shape=ellipse]
37 [label="10:CtTypeReferenceImpl@String" shape=ellipse]
38 [label="10:CtExecutableReferenceImpl@next()" shape=ellipse]
39 [label="10:CtVirtualElement@next" shape=ellipse]
40 [label="10:CtVariableReadImpl@kitr" shape=ellipse]
41 [label="10:CtInvocationImpl@((String) (kitr.next()))" shape=ellipse]
42 [label="10:CtTypeReferenceImpl@String" shape=ellipse]
43 [label="10:CtVirtualElement@lnk" shape=ellipse]
44 [label="10:CtLocalVariableImpl@String lnk = ((String) (kitr.next()))" shape=ellipse]
45 [label="11:CtTypeReferenceImpl@String" shape=ellipse]
46 [label="11:CtExecutableReferenceImpl@getProperty(java.lang.String)" shape=ellipse]
47 [label="11:CtVirtualElement@getProperty" shape=ellipse]
48 [label="11:CtVariableReadImpl@links" shape=ellipse]
49 [label="11:CtVariableReadImpl@lnk" shape=ellipse]
50 [label="11:CtInvocationImpl@links.getProperty(lnk)" shape=ellipse]
51 [label="11:CtVirtualElement@res" shape=ellipse]
52 [label="11:CtLocalVariableImpl@String res = links.getProperty(lnk)" shape=ellipse]
53 [label="13:CtTypeReferenceImpl@File" shape=ellipse]
54 [label="13:CtTypeReferenceImpl@File" shape=ellipse]
55 [label="13:CtVariableReadImpl@lnk" shape=ellipse]
56 [label="13:CtConstructorCallImpl@new File(lnk)" shape=ellipse]
57 [label="13:CtVirtualElement@test" shape=ellipse]
58 [label="13:CtLocalVariableImpl@File test = new File(lnk)" shape=ellipse]
59 [label="14:CtExecutableReferenceImpl@isSymbolicLink(<unknown>,java.lang.String)" shape=ellipse]
60 [label="14:CtVirtualElement@isSymbolicLink" shape=ellipse]
61 [label="14:CtTypeAccessImpl@FILE_UTILS" shape=ellipse]
62 [label="14:CtLiteralImpl@null" shape=ellipse]
63 [label="14:CtVariableReadImpl@lnk" shape=ellipse]
64 [label="14:CtInvocationImpl@FILE_UTILS.isSymbolicLink(null, lnk)" shape=ellipse]
65 [label="14:CtUnaryOperatorImpl@!FILE_UTILS.isSymbolicLink(null, lnk)" shape=ellipse]
66 [label="15:CtExecutableReferenceImpl@doLink(java.lang.String,java.lang.String)" shape=ellipse]
67 [label="15:CtVirtualElement@doLink" shape=ellipse]
68 [label="15:CtVariableReadImpl@res" shape=ellipse]
69 [label="15:CtVariableReadImpl@lnk" shape=ellipse]
70 [label="15:CtInvocationImpl@doLink(res, lnk)" shape=ellipse]
71 [label="14:CtBlockImpl@\{
    doLink(res, lnk);
\}" shape=ellipse]
72 [label="16:CtExecutableReferenceImpl@equals()" shape=ellipse]
73 [label="16:CtVirtualElement@equals" shape=ellipse]
74 [label="16:CtExecutableReferenceImpl@getCanonicalPath()" shape=ellipse]
75 [label="16:CtVirtualElement@getCanonicalPath" shape=ellipse]
76 [label="16:CtVariableReadImpl@test" shape=ellipse]
77 [label="16:CtInvocationImpl@test.getCanonicalPath()" shape=ellipse]
78 [label="16:CtExecutableReferenceImpl@getCanonicalPath()" shape=ellipse]
79 [label="16:CtVirtualElement@getCanonicalPath" shape=ellipse]
80 [label="16:CtTypeReferenceImpl@File" shape=ellipse]
81 [label="16:CtVariableReadImpl@res" shape=ellipse]
82 [label="16:CtConstructorCallImpl@new File(res)" shape=ellipse]
83 [label="16:CtInvocationImpl@new File(res).getCanonicalPath()" shape=ellipse]
84 [label="16:CtInvocationImpl@test.getCanonicalPath().equals(new File(res).getCanonicalPath())" shape=ellipse]
85 [label="16:CtUnaryOperatorImpl@!test.getCanonicalPath().equals(new File(res).getCanonicalPath())" shape=ellipse]
86 [label="17:CtExecutableReferenceImpl@deleteSymlink(java.lang.String)" shape=ellipse]
87 [label="17:CtVirtualElement@deleteSymlink" shape=ellipse]
88 [label="17:CtVariableReadImpl@lnk" shape=ellipse]
89 [label="17:CtInvocationImpl@deleteSymlink(lnk)" shape=ellipse]
90 [label="18:CtExecutableReferenceImpl@doLink(java.lang.String,java.lang.String)" shape=ellipse]
91 [label="18:CtVirtualElement@doLink" shape=ellipse]
92 [label="18:CtVariableReadImpl@res" shape=ellipse]
93 [label="18:CtVariableReadImpl@lnk" shape=ellipse]
94 [label="18:CtInvocationImpl@doLink(res, lnk)" shape=ellipse]
95 [label="16:CtBlockImpl@\{
    deleteSymlink(lnk);
    doLink(res, lnk);
\}" shape=ellipse]
96 [label="16:CtIfImpl@if (!test.getCanonicalPath().equals(new File(res).getCanonicalPath())) \{
    deleteSymlink(lnk);
    doLink(res, lnk);
\}" shape=ellipse]
97 [label="16:CtBlockImpl@
    if (!test.getCanonicalPath().equals(new File(res).getCanonicalPath())) \{
        deleteSymlink(lnk);
        doLink(res, lnk);
    \}
" shape=ellipse]
98 [label="14:CtIfImpl@if (!FILE_UTILS.isSymbolicLink(null, lnk)) \{
    doLink(res, lnk);
\} else if (!test.getCanonicalPath().equals(new File(res).getCanonicalPath())) \{
    deleteSymlink(lnk);
    doLink(res, lnk);
\}" shape=ellipse]
99 [label="12:CtBlockImpl@\{
    File test = new File(lnk);
    if (!FILE_UTILS.isSymbolicLink(null, lnk)) \{
        doLink(res, lnk);
    \} else if (!test.getCanonicalPath().equals(new File(res).getCanonicalPath())) \{
        deleteSymlink(lnk);
        doLink(res, lnk);
    \}
\}" shape=ellipse]
100 [label="20:CtVirtualElement@ioe" shape=ellipse]
101 [label="20:CtTypeReferenceImpl@IOException" shape=ellipse]
102 [label="20:CtCatchVariableImpl@IOException ioe" shape=ellipse]
103 [label="21:CtExecutableReferenceImpl@handleError(java.lang.String)" shape=ellipse]
104 [label="21:CtVirtualElement@handleError" shape=ellipse]
105 [label="21:CtLiteralImpl@\"IO exception while creating link\"" shape=ellipse]
106 [label="21:CtInvocationImpl@handleError(\"IO exception while creating link\")" shape=ellipse]
107 [label="20:CtBlockImpl@\{
    handleError(\"IO exception while creating link\");
\}" shape=ellipse]
108 [label="20:CtCatchImpl@ catch (IOException ioe) \{
    handleError(\"IO exception while creating link\");
\}" shape=ellipse]
109 [label="12:CtTryImpl@try \{
    File test = new File(lnk);
    if (!FILE_UTILS.isSymbolicLink(null, lnk)) \{
        doLink(res, lnk);
    \} else if (!test.getCanonicalPath().equals(new File(res).getCanonicalPath())) \{
        deleteSymlink(lnk);
        doLink(res, lnk);
    \}
\} catch (IOException ioe) \{
    handleError(\"IO exception while creating link\");
\}" shape=ellipse]
110 [label="9:CtBlockImpl@\{
    String lnk = ((String) (kitr.next()));
    String res = links.getProperty(lnk);
    try \{
        File test = new File(lnk);
        if (!FILE_UTILS.isSymbolicLink(null, lnk)) \{
            doLink(res, lnk);
        \} else if (!test.getCanonicalPath().equals(new File(res).getCanonicalPath())) \{
            deleteSymlink(lnk);
            doLink(res, lnk);
        \}
    \} catch (IOException ioe) \{
        handleError(\"IO exception while creating link\");
    \}
\}" shape=ellipse]
111 [label="9:CtForImpl@for (Iterator kitr = links.keySet().iterator(); kitr.hasNext();) \{
    String lnk = ((String) (kitr.next()));
    String res = links.getProperty(lnk);
    try \{
        File test = new File(lnk);
        if (!FILE_UTILS.isSymbolicLink(null, lnk)) \{
            doLink(res, lnk);
        \} else if (!test.getCanonicalPath().equals(new File(res).getCanonicalPath())) \{
            deleteSymlink(lnk);
            doLink(res, lnk);
        \}
    \} catch (IOException ioe) \{
        handleError(\"IO exception while creating link\");
    \}
\}" shape=ellipse]
112 [label="3:CtBlockImpl@\{
    if (fileSets.isEmpty()) \{
        handleError(\"File set identifying link file(s) \" + \"required for action recreate\");
        return;
    \}
    Properties links = loadLinks(fileSets);
    for (Iterator kitr = links.keySet().iterator(); kitr.hasNext();) \{
        String lnk = ((String) (kitr.next()));
        String res = links.getProperty(lnk);
        try \{
            File test = new File(lnk);
            if (!FILE_UTILS.isSymbolicLink(null, lnk)) \{
                doLink(res, lnk);
            \} else if (!test.getCanonicalPath().equals(new File(res).getCanonicalPath())) \{
                deleteSymlink(lnk);
                doLink(res, lnk);
            \}
        \} catch (IOException ioe) \{
            handleError(\"IO exception while creating link\");
        \}
    \}
\}" shape=ellipse]
113 [label="25:CtExecutableReferenceImpl@setDefaults()" shape=ellipse]
114 [label="25:CtVirtualElement@setDefaults" shape=ellipse]
115 [label="25:CtInvocationImpl@setDefaults()" shape=ellipse]
116 [label="24:CtBlockImpl@\{
    setDefaults();
\}" shape=ellipse]
117 [label="3:CtTryImpl@try \{
    if (fileSets.isEmpty()) \{
        handleError(\"File set identifying link file(s) \" + \"required for action recreate\");
        return;
    \}
    Properties links = loadLinks(fileSets);
    for (Iterator kitr = links.keySet().iterator(); kitr.hasNext();) \{
        String lnk = ((String) (kitr.next()));
        String res = links.getProperty(lnk);
        try \{
            File test = new File(lnk);
            if (!FILE_UTILS.isSymbolicLink(null, lnk)) \{
                doLink(res, lnk);
            \} else if (!test.getCanonicalPath().equals(new File(res).getCanonicalPath())) \{
                deleteSymlink(lnk);
                doLink(res, lnk);
            \}
        \} catch (IOException ioe) \{
            handleError(\"IO exception while creating link\");
        \}
    \}
\} finally \{
    setDefaults();
\}" shape=ellipse]
118 [label="2:CtBlockImpl@\{
    try \{
        if (fileSets.isEmpty()) \{
            handleError(\"File set identifying link file(s) \" + \"required for action recreate\");
            return;
        \}
        Properties links = loadLinks(fileSets);
        for (Iterator kitr = links.keySet().iterator(); kitr.hasNext();) \{
            String lnk = ((String) (kitr.next()));
            String res = links.getProperty(lnk);
            try \{
                File test = new File(lnk);
                if (!FILE_UTILS.isSymbolicLink(null, lnk)) \{
                    doLink(res, lnk);
                \} else if (!test.getCanonicalPath().equals(new File(res).getCanonicalPath())) \{
                    deleteSymlink(lnk);
                    doLink(res, lnk);
                \}
            \} catch (IOException ioe) \{
                handleError(\"IO exception while creating link\");
            \}
        \}
    \} finally \{
        setDefaults();
    \}
\}" shape=ellipse]
119 [label="2:CtMethodImpl@public void recreate() throws BuildException \{
    try \{
        if (fileSets.isEmpty()) \{
            handleError(\"File set identifying link file(s) \" + \"required for action recreate\");
            return;
        \}
        Properties links = loadLinks(fileSets);
        for (Iterator kitr = links.keySet().iterator(); kitr.hasNext();) \{
            String lnk = ((String) (kitr.next()));
            String res = links.getProperty(lnk);
            try \{
                File test = new File(lnk);
                if (!FILE_UTILS.isSymbolicLink(null, lnk)) \{
                    doLink(res, lnk);
                \} else if (!test.getCanonicalPath().equals(new File(res).getCanonicalPath())) \{
                    deleteSymlink(lnk);
                    doLink(res, lnk);
                \}
            \} catch (IOException ioe) \{
                handleError(\"IO exception while creating link\");
            \}
        \}
    \} finally \{
        setDefaults();
    \}
\}" shape=ellipse]
120 [label="17:Insert@INSERT" shape=ellipse]
121 [label="17:CtThisAccessImpl@this" shape=ellipse]
6 -> 4 [label="AST"];
6 -> 5 [label="AST"];
6 -> 3 [label="AST"];
6 -> 14 [label="Control Dep"];
6 -> 12 [label="Control Dep"];
6 -> 7 [label="Control Dep"];
6 -> 11 [label="Control Dep"];
6 -> 9 [label="Control Dep"];
6 -> 10 [label="Control Dep"];
6 -> 13 [label="Control Dep"];
11 -> 9 [label="AST"];
11 -> 10 [label="AST"];
12 -> 8 [label="AST"];
12 -> 7 [label="AST"];
12 -> 11 [label="AST"];
14 -> 12 [label="AST"];
14 -> 13 [label="AST"];
15 -> 6 [label="AST"];
15 -> 14 [label="AST"];
19 -> 21 [label="Data Dep"];
20 -> 18 [label="AST"];
20 -> 17 [label="AST"];
20 -> 19 [label="AST"];
21 -> 28 [label="Define-Use"];
21 -> 48 [label="Define-Use"];
22 -> 21 [label="AST"];
22 -> 16 [label="AST"];
22 -> 20 [label="AST"];
28 -> 31 [label="Data Dep"];
29 -> 27 [label="AST"];
29 -> 28 [label="AST"];
29 -> 26 [label="AST"];
30 -> 25 [label="AST"];
30 -> 29 [label="AST"];
30 -> 24 [label="AST"];
31 -> 35 [label="Define-Use"];
31 -> 40 [label="Define-Use"];
32 -> 31 [label="AST"];
32 -> 23 [label="AST"];
32 -> 30 [label="AST"];
36 -> 34 [label="AST"];
36 -> 35 [label="AST"];
36 -> 33 [label="AST"];
36 -> 110 [label="Control Dep"];
36 -> 44 [label="Control Dep"];
36 -> 41 [label="Control Dep"];
36 -> 38 [label="Control Dep"];
36 -> 40 [label="Control Dep"];
36 -> 52 [label="Control Dep"];
36 -> 50 [label="Control Dep"];
36 -> 46 [label="Control Dep"];
36 -> 48 [label="Control Dep"];
36 -> 49 [label="Control Dep"];
36 -> 109 [label="Control Dep"];
36 -> 99 [label="Control Dep"];
36 -> 58 [label="Control Dep"];
36 -> 56 [label="Control Dep"];
36 -> 55 [label="Control Dep"];
36 -> 98 [label="Control Dep"];
36 -> 65 [label="Control Dep"];
36 -> 64 [label="Control Dep"];
36 -> 59 [label="Control Dep"];
36 -> 61 [label="Control Dep"];
36 -> 62 [label="Control Dep"];
36 -> 63 [label="Control Dep"];
36 -> 108 [label="Control Dep"];
36 -> 102 [label="Control Dep"];
40 -> 43 [label="Data Dep"];
41 -> 39 [label="AST"];
41 -> 42 [label="AST"];
41 -> 40 [label="AST"];
41 -> 38 [label="AST"];
43 -> 49 [label="Define-Use"];
43 -> 55 [label="Define-Use"];
43 -> 63 [label="Define-Use"];
43 -> 69 [label="Define-Use"];
43 -> 88 [label="Define-Use"];
43 -> 93 [label="Define-Use"];
44 -> 43 [label="AST"];
44 -> 37 [label="AST"];
44 -> 41 [label="AST"];
48 -> 51 [label="Data Dep"];
49 -> 51 [label="Data Dep"];
50 -> 47 [label="AST"];
50 -> 48 [label="AST"];
50 -> 46 [label="AST"];
50 -> 49 [label="AST"];
51 -> 68 [label="Define-Use"];
51 -> 81 [label="Define-Use"];
51 -> 92 [label="Define-Use"];
52 -> 51 [label="AST"];
52 -> 45 [label="AST"];
52 -> 50 [label="AST"];
55 -> 57 [label="Data Dep"];
56 -> 55 [label="AST"];
57 -> 76 [label="Define-Use"];
58 -> 57 [label="AST"];
58 -> 53 [label="AST"];
58 -> 56 [label="AST"];
64 -> 60 [label="AST"];
64 -> 61 [label="AST"];
64 -> 59 [label="AST"];
64 -> 62 [label="AST"];
64 -> 63 [label="AST"];
65 -> 64 [label="AST"];
65 -> 71 [label="Control Dep"];
65 -> 70 [label="Control Dep"];
65 -> 66 [label="Control Dep"];
65 -> 68 [label="Control Dep"];
65 -> 69 [label="Control Dep"];
65 -> 97 [label="Control Dep"];
65 -> 96 [label="Control Dep"];
65 -> 85 [label="Control Dep"];
65 -> 84 [label="Control Dep"];
65 -> 72 [label="Control Dep"];
65 -> 77 [label="Control Dep"];
65 -> 74 [label="Control Dep"];
65 -> 76 [label="Control Dep"];
65 -> 83 [label="Control Dep"];
65 -> 78 [label="Control Dep"];
65 -> 82 [label="Control Dep"];
65 -> 81 [label="Control Dep"];
70 -> 67 [label="AST"];
70 -> 66 [label="AST"];
70 -> 68 [label="AST"];
70 -> 69 [label="AST"];
71 -> 70 [label="AST"];
77 -> 75 [label="AST"];
77 -> 76 [label="AST"];
77 -> 74 [label="AST"];
82 -> 81 [label="AST"];
83 -> 79 [label="AST"];
83 -> 82 [label="AST"];
83 -> 78 [label="AST"];
84 -> 73 [label="AST"];
84 -> 77 [label="AST"];
84 -> 72 [label="AST"];
84 -> 83 [label="AST"];
85 -> 84 [label="AST"];
85 -> 95 [label="Control Dep"];
85 -> 89 [label="Control Dep"];
85 -> 86 [label="Control Dep"];
85 -> 88 [label="Control Dep"];
85 -> 94 [label="Control Dep"];
85 -> 90 [label="Control Dep"];
85 -> 92 [label="Control Dep"];
85 -> 93 [label="Control Dep"];
89 -> 87 [label="AST"];
89 -> 86 [label="AST"];
89 -> 88 [label="AST"];
89 -> 120 [label="Action"];
94 -> 91 [label="AST"];
94 -> 90 [label="AST"];
94 -> 92 [label="AST"];
94 -> 93 [label="AST"];
95 -> 89 [label="AST"];
95 -> 94 [label="AST"];
96 -> 85 [label="AST"];
96 -> 95 [label="AST"];
97 -> 96 [label="AST"];
98 -> 65 [label="AST"];
98 -> 71 [label="AST"];
98 -> 97 [label="AST"];
99 -> 58 [label="AST"];
99 -> 98 [label="AST"];
102 -> 100 [label="AST"];
102 -> 101 [label="AST"];
102 -> 107 [label="Control Dep"];
102 -> 106 [label="Control Dep"];
102 -> 103 [label="Control Dep"];
102 -> 105 [label="Control Dep"];
106 -> 104 [label="AST"];
106 -> 103 [label="AST"];
106 -> 105 [label="AST"];
107 -> 106 [label="AST"];
108 -> 102 [label="AST"];
108 -> 107 [label="AST"];
109 -> 99 [label="AST"];
109 -> 108 [label="AST"];
110 -> 44 [label="AST"];
110 -> 52 [label="AST"];
110 -> 109 [label="AST"];
111 -> 32 [label="AST"];
111 -> 36 [label="AST"];
111 -> 110 [label="AST"];
112 -> 15 [label="AST"];
112 -> 22 [label="AST"];
112 -> 111 [label="AST"];
115 -> 114 [label="AST"];
115 -> 113 [label="AST"];
116 -> 115 [label="AST"];
117 -> 112 [label="AST"];
117 -> 116 [label="AST"];
118 -> 117 [label="AST"];
119 -> 1 [label="AST"];
119 -> 0 [label="AST"];
119 -> 2 [label="AST"];
119 -> 118 [label="AST"];
120 -> 121 [label="Action"];
}