digraph "getParameters#?" {
0 [label="2:CtVirtualElement@String[]" shape=ellipse]
1 [label="2:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
2 [label="2:CtVirtualElement@getParameters" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@TaskException" shape=ellipse]
4 [label="3:CtTypeReferenceImpl@ArrayList" shape=ellipse]
5 [label="3:CtTypeReferenceImpl@ArrayList" shape=ellipse]
6 [label="3:CtConstructorCallImpl@new ArrayList()" shape=ellipse]
7 [label="3:CtVirtualElement@params" shape=ellipse]
8 [label="3:CtLocalVariableImpl@ArrayList params = new ArrayList()" shape=ellipse]
9 [label="4:CtExecutableReferenceImpl@add(java.lang.String)" shape=ellipse]
10 [label="4:CtVirtualElement@add" shape=ellipse]
11 [label="4:CtVariableReadImpl@params" shape=ellipse]
12 [label="4:CtLiteralImpl@\"-jp_function=coverage\"" shape=ellipse]
13 [label="4:CtInvocationImpl@params.add(\"-jp_function=coverage\")" shape=ellipse]
14 [label="5:CtFieldReadImpl@m_vm" shape=ellipse]
15 [label="5:CtLiteralImpl@null" shape=ellipse]
16 [label="5:CtBinaryOperatorImpl@m_vm != null" shape=ellipse]
17 [label="6:CtExecutableReferenceImpl@add()" shape=ellipse]
18 [label="6:CtVirtualElement@add" shape=ellipse]
19 [label="6:CtVariableReadImpl@params" shape=ellipse]
20 [label="6:CtLiteralImpl@\"-jp_vm=\"" shape=ellipse]
21 [label="6:CtFieldReadImpl@m_vm" shape=ellipse]
22 [label="6:CtBinaryOperatorImpl@\"-jp_vm=\" + m_vm" shape=ellipse]
23 [label="6:CtInvocationImpl@params.add(\"-jp_vm=\" + m_vm)" shape=ellipse]
24 [label="5:CtBlockImpl@\{
    params.add(\"-jp_vm=\" + m_vm);
\}" shape=ellipse]
25 [label="5:CtIfImpl@if (m_vm != null) \{
    params.add(\"-jp_vm=\" + m_vm);
\}" shape=ellipse]
26 [label="8:CtFieldReadImpl@m_javaExe" shape=ellipse]
27 [label="8:CtLiteralImpl@null" shape=ellipse]
28 [label="8:CtBinaryOperatorImpl@m_javaExe != null" shape=ellipse]
29 [label="9:CtExecutableReferenceImpl@add()" shape=ellipse]
30 [label="9:CtVirtualElement@add" shape=ellipse]
31 [label="9:CtVariableReadImpl@params" shape=ellipse]
32 [label="9:CtLiteralImpl@\"-jp_java_exe=\"" shape=ellipse]
33 [label="9:CtExecutableReferenceImpl@resolveFile(<unknown>)" shape=ellipse]
34 [label="9:CtVirtualElement@resolveFile" shape=ellipse]
35 [label="9:CtExecutableReferenceImpl@getPath()" shape=ellipse]
36 [label="9:CtVirtualElement@getPath" shape=ellipse]
37 [label="9:CtFieldReadImpl@m_javaExe" shape=ellipse]
38 [label="9:CtInvocationImpl@m_javaExe.getPath()" shape=ellipse]
39 [label="9:CtInvocationImpl@resolveFile(m_javaExe.getPath())" shape=ellipse]
40 [label="9:CtBinaryOperatorImpl@\"-jp_java_exe=\" + resolveFile(m_javaExe.getPath())" shape=ellipse]
41 [label="9:CtInvocationImpl@params.add(\"-jp_java_exe=\" + resolveFile(m_javaExe.getPath()))" shape=ellipse]
42 [label="8:CtBlockImpl@\{
    params.add(\"-jp_java_exe=\" + resolveFile(m_javaExe.getPath()));
\}" shape=ellipse]
43 [label="8:CtIfImpl@if (m_javaExe != null) \{
    params.add(\"-jp_java_exe=\" + resolveFile(m_javaExe.getPath()));
\}" shape=ellipse]
44 [label="11:CtExecutableReferenceImpl@add()" shape=ellipse]
45 [label="11:CtVirtualElement@add" shape=ellipse]
46 [label="11:CtVariableReadImpl@params" shape=ellipse]
47 [label="11:CtLiteralImpl@\"-jp_working_dir=\"" shape=ellipse]
48 [label="11:CtExecutableReferenceImpl@getPath()" shape=ellipse]
49 [label="11:CtVirtualElement@getPath" shape=ellipse]
50 [label="11:CtFieldReadImpl@m_workingDir" shape=ellipse]
51 [label="11:CtInvocationImpl@m_workingDir.getPath()" shape=ellipse]
52 [label="11:CtBinaryOperatorImpl@\"-jp_working_dir=\" + m_workingDir.getPath()" shape=ellipse]
53 [label="11:CtInvocationImpl@params.add(\"-jp_working_dir=\" + m_workingDir.getPath())" shape=ellipse]
54 [label="12:CtExecutableReferenceImpl@add()" shape=ellipse]
55 [label="12:CtVirtualElement@add" shape=ellipse]
56 [label="12:CtVariableReadImpl@params" shape=ellipse]
57 [label="12:CtLiteralImpl@\"-jp_snapshot_dir=\"" shape=ellipse]
58 [label="12:CtExecutableReferenceImpl@getPath()" shape=ellipse]
59 [label="12:CtVirtualElement@getPath" shape=ellipse]
60 [label="12:CtFieldReadImpl@m_snapshotDir" shape=ellipse]
61 [label="12:CtInvocationImpl@m_snapshotDir.getPath()" shape=ellipse]
62 [label="12:CtBinaryOperatorImpl@\"-jp_snapshot_dir=\" + m_snapshotDir.getPath()" shape=ellipse]
63 [label="12:CtInvocationImpl@params.add(\"-jp_snapshot_dir=\" + m_snapshotDir.getPath())" shape=ellipse]
64 [label="13:CtExecutableReferenceImpl@add()" shape=ellipse]
65 [label="13:CtVirtualElement@add" shape=ellipse]
66 [label="13:CtVariableReadImpl@params" shape=ellipse]
67 [label="13:CtLiteralImpl@\"-jp_record_from_start=\"" shape=ellipse]
68 [label="13:CtFieldReadImpl@m_recordFromStart" shape=ellipse]
69 [label="13:CtBinaryOperatorImpl@\"-jp_record_from_start=\" + m_recordFromStart" shape=ellipse]
70 [label="13:CtInvocationImpl@params.add(\"-jp_record_from_start=\" + m_recordFromStart)" shape=ellipse]
71 [label="14:CtExecutableReferenceImpl@add()" shape=ellipse]
72 [label="14:CtVirtualElement@add" shape=ellipse]
73 [label="14:CtVariableReadImpl@params" shape=ellipse]
74 [label="14:CtLiteralImpl@\"-jp_warn=\"" shape=ellipse]
75 [label="14:CtFieldReadImpl@m_warnLevel" shape=ellipse]
76 [label="14:CtBinaryOperatorImpl@\"-jp_warn=\" + m_warnLevel" shape=ellipse]
77 [label="14:CtInvocationImpl@params.add(\"-jp_warn=\" + m_warnLevel)" shape=ellipse]
78 [label="15:CtFieldReadImpl@m_seedName" shape=ellipse]
79 [label="15:CtLiteralImpl@null" shape=ellipse]
80 [label="15:CtBinaryOperatorImpl@m_seedName != null" shape=ellipse]
81 [label="16:CtExecutableReferenceImpl@add()" shape=ellipse]
82 [label="16:CtVirtualElement@add" shape=ellipse]
83 [label="16:CtVariableReadImpl@params" shape=ellipse]
84 [label="16:CtLiteralImpl@\"-jp_output_file=\"" shape=ellipse]
85 [label="16:CtFieldReadImpl@m_seedName" shape=ellipse]
86 [label="16:CtBinaryOperatorImpl@\"-jp_output_file=\" + m_seedName" shape=ellipse]
87 [label="16:CtInvocationImpl@params.add(\"-jp_output_file=\" + m_seedName)" shape=ellipse]
88 [label="15:CtBlockImpl@\{
    params.add(\"-jp_output_file=\" + m_seedName);
\}" shape=ellipse]
89 [label="15:CtIfImpl@if (m_seedName != null) \{
    params.add(\"-jp_output_file=\" + m_seedName);
\}" shape=ellipse]
90 [label="18:CtExecutableReferenceImpl@add()" shape=ellipse]
91 [label="18:CtVirtualElement@add" shape=ellipse]
92 [label="18:CtVariableReadImpl@params" shape=ellipse]
93 [label="18:CtLiteralImpl@\"-jp_filter=\"" shape=ellipse]
94 [label="18:CtExecutableReferenceImpl@toString()" shape=ellipse]
95 [label="18:CtVirtualElement@toString" shape=ellipse]
96 [label="18:CtFieldReadImpl@m_filters" shape=ellipse]
97 [label="18:CtInvocationImpl@m_filters.toString()" shape=ellipse]
98 [label="18:CtBinaryOperatorImpl@\"-jp_filter=\" + m_filters.toString()" shape=ellipse]
99 [label="18:CtInvocationImpl@params.add(\"-jp_filter=\" + m_filters.toString())" shape=ellipse]
100 [label="19:CtFieldReadImpl@m_triggers" shape=ellipse]
101 [label="19:CtLiteralImpl@null" shape=ellipse]
102 [label="19:CtBinaryOperatorImpl@m_triggers != null" shape=ellipse]
103 [label="20:CtExecutableReferenceImpl@add()" shape=ellipse]
104 [label="20:CtVirtualElement@add" shape=ellipse]
105 [label="20:CtVariableReadImpl@params" shape=ellipse]
106 [label="20:CtLiteralImpl@\"-jp_trigger=\"" shape=ellipse]
107 [label="20:CtExecutableReferenceImpl@toString()" shape=ellipse]
108 [label="20:CtVirtualElement@toString" shape=ellipse]
109 [label="20:CtFieldReadImpl@m_triggers" shape=ellipse]
110 [label="20:CtInvocationImpl@m_triggers.toString()" shape=ellipse]
111 [label="20:CtBinaryOperatorImpl@\"-jp_trigger=\" + m_triggers.toString()" shape=ellipse]
112 [label="20:CtInvocationImpl@params.add(\"-jp_trigger=\" + m_triggers.toString())" shape=ellipse]
113 [label="19:CtBlockImpl@\{
    params.add(\"-jp_trigger=\" + m_triggers.toString());
\}" shape=ellipse]
114 [label="19:CtIfImpl@if (m_triggers != null) \{
    params.add(\"-jp_trigger=\" + m_triggers.toString());
\}" shape=ellipse]
115 [label="22:CtFieldReadImpl@m_finalSnapshot" shape=ellipse]
116 [label="22:CtLiteralImpl@null" shape=ellipse]
117 [label="22:CtBinaryOperatorImpl@m_finalSnapshot != null" shape=ellipse]
118 [label="23:CtExecutableReferenceImpl@add()" shape=ellipse]
119 [label="23:CtVirtualElement@add" shape=ellipse]
120 [label="23:CtVariableReadImpl@params" shape=ellipse]
121 [label="23:CtLiteralImpl@\"-jp_final_snapshot=\"" shape=ellipse]
122 [label="23:CtFieldReadImpl@m_finalSnapshot" shape=ellipse]
123 [label="23:CtBinaryOperatorImpl@\"-jp_final_snapshot=\" + m_finalSnapshot" shape=ellipse]
124 [label="23:CtInvocationImpl@params.add(\"-jp_final_snapshot=\" + m_finalSnapshot)" shape=ellipse]
125 [label="22:CtBlockImpl@\{
    params.add(\"-jp_final_snapshot=\" + m_finalSnapshot);
\}" shape=ellipse]
126 [label="22:CtIfImpl@if (m_finalSnapshot != null) \{
    params.add(\"-jp_final_snapshot=\" + m_finalSnapshot);
\}" shape=ellipse]
127 [label="25:CtExecutableReferenceImpl@add()" shape=ellipse]
128 [label="25:CtVirtualElement@add" shape=ellipse]
129 [label="25:CtVariableReadImpl@params" shape=ellipse]
130 [label="25:CtLiteralImpl@\"-jp_exit_prompt=\"" shape=ellipse]
131 [label="25:CtFieldReadImpl@m_exitPrompt" shape=ellipse]
132 [label="25:CtBinaryOperatorImpl@\"-jp_exit_prompt=\" + m_exitPrompt" shape=ellipse]
133 [label="25:CtInvocationImpl@params.add(\"-jp_exit_prompt=\" + m_exitPrompt)" shape=ellipse]
134 [label="26:CtExecutableReferenceImpl@add()" shape=ellipse]
135 [label="26:CtVirtualElement@add" shape=ellipse]
136 [label="26:CtVariableReadImpl@params" shape=ellipse]
137 [label="26:CtLiteralImpl@\"-jp_track_natives=\"" shape=ellipse]
138 [label="26:CtFieldReadImpl@m_trackNatives" shape=ellipse]
139 [label="26:CtBinaryOperatorImpl@\"-jp_track_natives=\" + m_trackNatives" shape=ellipse]
140 [label="26:CtInvocationImpl@params.add(\"-jp_track_natives=\" + m_trackNatives)" shape=ellipse]
141 [label="27:CtVirtualElement@String[]" shape=ellipse]
142 [label="27:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
143 [label="27:CtExecutableReferenceImpl@getArguments()" shape=ellipse]
144 [label="27:CtVirtualElement@getArguments" shape=ellipse]
145 [label="27:CtExecutableReferenceImpl@getVmCommand()" shape=ellipse]
146 [label="27:CtVirtualElement@getVmCommand" shape=ellipse]
147 [label="27:CtFieldReadImpl@cmdlJava" shape=ellipse]
148 [label="27:CtInvocationImpl@cmdlJava.getVmCommand()" shape=ellipse]
149 [label="27:CtInvocationImpl@cmdlJava.getVmCommand().getArguments()" shape=ellipse]
150 [label="27:CtVirtualElement@vmargs" shape=ellipse]
151 [label="27:CtLocalVariableImpl@String[] vmargs = cmdlJava.getVmCommand().getArguments()" shape=ellipse]
152 [label="28:CtTypeReferenceImpl@int" shape=ellipse]
153 [label="28:CtLiteralImpl@0" shape=ellipse]
154 [label="28:CtVirtualElement@i" shape=ellipse]
155 [label="28:CtLocalVariableImpl@int i = 0" shape=ellipse]
156 [label="28:CtVariableReadImpl@i" shape=ellipse]
157 [label="28:CtVariableReadImpl@vmargs" shape=ellipse]
158 [label="28:CtLocalVariableReferenceImpl@vmargs" shape=ellipse]
159 [label="28:CtFieldReadImpl@vmargs.length" shape=ellipse]
160 [label="28:CtBinaryOperatorImpl@i < vmargs.length" shape=ellipse]
161 [label="28:CtVariableWriteImpl@i" shape=ellipse]
162 [label="28:CtUnaryOperatorImpl@i++" shape=ellipse]
163 [label="29:CtExecutableReferenceImpl@add(java.lang.String)" shape=ellipse]
164 [label="29:CtVirtualElement@add" shape=ellipse]
165 [label="29:CtVariableReadImpl@params" shape=ellipse]
166 [label="29:CtVariableReadImpl@vmargs" shape=ellipse]
167 [label="29:CtVariableReadImpl@i" shape=ellipse]
168 [label="29:CtArrayReadImpl@vmargs[i]" shape=ellipse]
169 [label="29:CtInvocationImpl@params.add(vmargs[i])" shape=ellipse]
170 [label="28:CtBlockImpl@\{
    params.add(vmargs[i]);
\}" shape=ellipse]
171 [label="28:CtForImpl@for (int i = 0; i < vmargs.length; i++) \{
    params.add(vmargs[i]);
\}" shape=ellipse]
172 [label="31:CtTypeReferenceImpl@Path" shape=ellipse]
173 [label="31:CtExecutableReferenceImpl@getClasspath()" shape=ellipse]
174 [label="31:CtVirtualElement@getClasspath" shape=ellipse]
175 [label="31:CtFieldReadImpl@cmdlJava" shape=ellipse]
176 [label="31:CtInvocationImpl@cmdlJava.getClasspath()" shape=ellipse]
177 [label="31:CtVirtualElement@classpath" shape=ellipse]
178 [label="31:CtLocalVariableImpl@Path classpath = cmdlJava.getClasspath()" shape=ellipse]
179 [label="32:CtVariableReadImpl@classpath" shape=ellipse]
180 [label="32:CtLiteralImpl@null" shape=ellipse]
181 [label="32:CtBinaryOperatorImpl@(classpath != null)" shape=ellipse]
182 [label="32:CtExecutableReferenceImpl@size()" shape=ellipse]
183 [label="32:CtVirtualElement@size" shape=ellipse]
184 [label="32:CtVariableReadImpl@classpath" shape=ellipse]
185 [label="32:CtInvocationImpl@classpath.size()" shape=ellipse]
186 [label="32:CtLiteralImpl@0" shape=ellipse]
187 [label="32:CtBinaryOperatorImpl@(classpath.size() > 0)" shape=ellipse]
188 [label="32:CtBinaryOperatorImpl@(classpath != null) && (classpath.size() > 0)" shape=ellipse]
189 [label="33:CtExecutableReferenceImpl@add()" shape=ellipse]
190 [label="33:CtVirtualElement@add" shape=ellipse]
191 [label="33:CtVariableReadImpl@params" shape=ellipse]
192 [label="33:CtLiteralImpl@\"-classpath \"" shape=ellipse]
193 [label="33:CtExecutableReferenceImpl@toString()" shape=ellipse]
194 [label="33:CtVirtualElement@toString" shape=ellipse]
195 [label="33:CtVariableReadImpl@classpath" shape=ellipse]
196 [label="33:CtInvocationImpl@classpath.toString()" shape=ellipse]
197 [label="33:CtBinaryOperatorImpl@\"-classpath \" + classpath.toString()" shape=ellipse]
198 [label="33:CtInvocationImpl@params.add(\"-classpath \" + classpath.toString())" shape=ellipse]
199 [label="32:CtBlockImpl@\{
    params.add(\"-classpath \" + classpath.toString());
\}" shape=ellipse]
200 [label="32:CtIfImpl@if ((classpath != null) && (classpath.size() > 0)) \{
    params.add(\"-classpath \" + classpath.toString());
\}" shape=ellipse]
201 [label="35:CtExecutableReferenceImpl@getClassname()" shape=ellipse]
202 [label="35:CtVirtualElement@getClassname" shape=ellipse]
203 [label="35:CtFieldReadImpl@cmdlJava" shape=ellipse]
204 [label="35:CtInvocationImpl@cmdlJava.getClassname()" shape=ellipse]
205 [label="35:CtLiteralImpl@null" shape=ellipse]
206 [label="35:CtBinaryOperatorImpl@cmdlJava.getClassname() != null" shape=ellipse]
207 [label="36:CtExecutableReferenceImpl@add()" shape=ellipse]
208 [label="36:CtVirtualElement@add" shape=ellipse]
209 [label="36:CtVariableReadImpl@params" shape=ellipse]
210 [label="36:CtExecutableReferenceImpl@getClassname()" shape=ellipse]
211 [label="36:CtVirtualElement@getClassname" shape=ellipse]
212 [label="36:CtFieldReadImpl@cmdlJava" shape=ellipse]
213 [label="36:CtInvocationImpl@cmdlJava.getClassname()" shape=ellipse]
214 [label="36:CtInvocationImpl@params.add(cmdlJava.getClassname())" shape=ellipse]
215 [label="35:CtBlockImpl@\{
    params.add(cmdlJava.getClassname());
\}" shape=ellipse]
216 [label="35:CtIfImpl@if (cmdlJava.getClassname() != null) \{
    params.add(cmdlJava.getClassname());
\}" shape=ellipse]
217 [label="38:CtVirtualElement@String[]" shape=ellipse]
218 [label="38:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
219 [label="38:CtExecutableReferenceImpl@getArguments()" shape=ellipse]
220 [label="38:CtVirtualElement@getArguments" shape=ellipse]
221 [label="38:CtExecutableReferenceImpl@getJavaCommand()" shape=ellipse]
222 [label="38:CtVirtualElement@getJavaCommand" shape=ellipse]
223 [label="38:CtFieldReadImpl@cmdlJava" shape=ellipse]
224 [label="38:CtInvocationImpl@cmdlJava.getJavaCommand()" shape=ellipse]
225 [label="38:CtInvocationImpl@cmdlJava.getJavaCommand().getArguments()" shape=ellipse]
226 [label="38:CtVirtualElement@args" shape=ellipse]
227 [label="38:CtLocalVariableImpl@String[] args = cmdlJava.getJavaCommand().getArguments()" shape=ellipse]
228 [label="39:CtTypeReferenceImpl@int" shape=ellipse]
229 [label="39:CtLiteralImpl@0" shape=ellipse]
230 [label="39:CtVirtualElement@i" shape=ellipse]
231 [label="39:CtLocalVariableImpl@int i = 0" shape=ellipse]
232 [label="39:CtVariableReadImpl@i" shape=ellipse]
233 [label="39:CtVariableReadImpl@args" shape=ellipse]
234 [label="39:CtLocalVariableReferenceImpl@args" shape=ellipse]
235 [label="39:CtFieldReadImpl@args.length" shape=ellipse]
236 [label="39:CtBinaryOperatorImpl@i < args.length" shape=ellipse]
237 [label="39:CtVariableWriteImpl@i" shape=ellipse]
238 [label="39:CtUnaryOperatorImpl@i++" shape=ellipse]
239 [label="40:CtExecutableReferenceImpl@add(java.lang.String)" shape=ellipse]
240 [label="40:CtVirtualElement@add" shape=ellipse]
241 [label="40:CtVariableReadImpl@params" shape=ellipse]
242 [label="40:CtVariableReadImpl@args" shape=ellipse]
243 [label="40:CtVariableReadImpl@i" shape=ellipse]
244 [label="40:CtArrayReadImpl@args[i]" shape=ellipse]
245 [label="40:CtInvocationImpl@params.add(args[i])" shape=ellipse]
246 [label="39:CtBlockImpl@\{
    params.add(args[i]);
\}" shape=ellipse]
247 [label="39:CtForImpl@for (int i = 0; i < args.length; i++) \{
    params.add(args[i]);
\}" shape=ellipse]
248 [label="42:CtExecutableReferenceImpl@toArray(java.lang.String[])" shape=ellipse]
249 [label="42:CtVirtualElement@toArray" shape=ellipse]
250 [label="42:CtVariableReadImpl@params" shape=ellipse]
251 [label="42:CtNewArrayImpl@new String[params.size()]" shape=ellipse]
252 [label="42:CtInvocationImpl@params.size()" shape=ellipse]
253 [label="42:CtInvocationImpl@((String[]) (params.toArray(new String[params.size()])))" shape=ellipse]
254 [label="42:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
255 [label="42:CtReturnImpl@return ((String[]) (params.toArray(new String[params.size()])))" shape=ellipse]
256 [label="2:CtBlockImpl@\{
    ArrayList params = new ArrayList();
    params.add(\"-jp_function=coverage\");
    if (m_vm != null) \{
        params.add(\"-jp_vm=\" + m_vm);
    \}
    if (m_javaExe != null) \{
        params.add(\"-jp_java_exe=\" + resolveFile(m_javaExe.getPath()));
    \}
    params.add(\"-jp_working_dir=\" + m_workingDir.getPath());
    params.add(\"-jp_snapshot_dir=\" + m_snapshotDir.getPath());
    params.add(\"-jp_record_from_start=\" + m_recordFromStart);
    params.add(\"-jp_warn=\" + m_warnLevel);
    if (m_seedName != null) \{
        params.add(\"-jp_output_file=\" + m_seedName);
    \}
    params.add(\"-jp_filter=\" + m_filters.toString());
    if (m_triggers != null) \{
        params.add(\"-jp_trigger=\" + m_triggers.toString());
    \}
    if (m_finalSnapshot != null) \{
        params.add(\"-jp_final_snapshot=\" + m_finalSnapshot);
    \}
    params.add(\"-jp_exit_prompt=\" + m_exitPrompt);
    params.add(\"-jp_track_natives=\" + m_trackNatives);
    String[] vmargs = cmdlJava.getVmCommand().getArguments();
    for (int i = 0; i < vmargs.length; i++) \{
        params.add(vmargs[i]);
    \}
    Path classpath = cmdlJava.getClasspath();
    if ((classpath != null) && (classpath.size() > 0)) \{
        params.add(\"-classpath \" + classpath.toString());
    \}
    if (cmdlJava.getClassname() != null) \{
        params.add(cmdlJava.getClassname());
    \}
    String[] args = cmdlJava.getJavaCommand().getArguments();
    for (int i = 0; i < args.length; i++) \{
        params.add(args[i]);
    \}
    return ((String[]) (params.toArray(new String[params.size()])));
\}" shape=ellipse]
257 [label="2:CtMethodImpl@protected String[] getParameters() throws TaskException \{
    ArrayList params = new ArrayList();
    params.add(\"-jp_function=coverage\");
    if (m_vm != null) \{
        params.add(\"-jp_vm=\" + m_vm);
    \}
    if (m_javaExe != null) \{
        params.add(\"-jp_java_exe=\" + resolveFile(m_javaExe.getPath()));
    \}
    params.add(\"-jp_working_dir=\" + m_workingDir.getPath());
    params.add(\"-jp_snapshot_dir=\" + m_snapshotDir.getPath());
    params.add(\"-jp_record_from_start=\" + m_recordFromStart);
    params.add(\"-jp_warn=\" + m_warnLevel);
    if (m_seedName != null) \{
        params.add(\"-jp_output_file=\" + m_seedName);
    \}
    params.add(\"-jp_filter=\" + m_filters.toString());
    if (m_triggers != null) \{
        params.add(\"-jp_trigger=\" + m_triggers.toString());
    \}
    if (m_finalSnapshot != null) \{
        params.add(\"-jp_final_snapshot=\" + m_finalSnapshot);
    \}
    params.add(\"-jp_exit_prompt=\" + m_exitPrompt);
    params.add(\"-jp_track_natives=\" + m_trackNatives);
    String[] vmargs = cmdlJava.getVmCommand().getArguments();
    for (int i = 0; i < vmargs.length; i++) \{
        params.add(vmargs[i]);
    \}
    Path classpath = cmdlJava.getClasspath();
    if ((classpath != null) && (classpath.size() > 0)) \{
        params.add(\"-classpath \" + classpath.toString());
    \}
    if (cmdlJava.getClassname() != null) \{
        params.add(cmdlJava.getClassname());
    \}
    String[] args = cmdlJava.getJavaCommand().getArguments();
    for (int i = 0; i < args.length; i++) \{
        params.add(args[i]);
    \}
    return ((String[]) (params.toArray(new String[params.size()])));
\}" shape=ellipse]
258 [label="9:Insert@INSERT" shape=ellipse]
259 [label="9:CtInvocationImpl@getContext()" shape=ellipse]
1 -> 0 [label="AST"];
7 -> 11 [label="Define-Use"];
7 -> 19 [label="Define-Use"];
7 -> 31 [label="Define-Use"];
7 -> 46 [label="Define-Use"];
7 -> 56 [label="Define-Use"];
7 -> 66 [label="Define-Use"];
7 -> 73 [label="Define-Use"];
7 -> 83 [label="Define-Use"];
7 -> 92 [label="Define-Use"];
7 -> 105 [label="Define-Use"];
7 -> 120 [label="Define-Use"];
7 -> 129 [label="Define-Use"];
7 -> 136 [label="Define-Use"];
7 -> 165 [label="Define-Use"];
7 -> 191 [label="Define-Use"];
7 -> 209 [label="Define-Use"];
7 -> 241 [label="Define-Use"];
7 -> 250 [label="Define-Use"];
8 -> 7 [label="AST"];
8 -> 4 [label="AST"];
8 -> 6 [label="AST"];
13 -> 10 [label="AST"];
13 -> 11 [label="AST"];
13 -> 9 [label="AST"];
13 -> 12 [label="AST"];
16 -> 14 [label="AST"];
16 -> 15 [label="AST"];
16 -> 24 [label="Control Dep"];
16 -> 23 [label="Control Dep"];
16 -> 17 [label="Control Dep"];
16 -> 19 [label="Control Dep"];
16 -> 22 [label="Control Dep"];
16 -> 20 [label="Control Dep"];
16 -> 21 [label="Control Dep"];
22 -> 20 [label="AST"];
22 -> 21 [label="AST"];
23 -> 18 [label="AST"];
23 -> 19 [label="AST"];
23 -> 17 [label="AST"];
23 -> 22 [label="AST"];
24 -> 23 [label="AST"];
25 -> 16 [label="AST"];
25 -> 24 [label="AST"];
28 -> 26 [label="AST"];
28 -> 27 [label="AST"];
28 -> 42 [label="Control Dep"];
28 -> 41 [label="Control Dep"];
28 -> 29 [label="Control Dep"];
28 -> 31 [label="Control Dep"];
28 -> 40 [label="Control Dep"];
28 -> 32 [label="Control Dep"];
28 -> 39 [label="Control Dep"];
28 -> 33 [label="Control Dep"];
28 -> 38 [label="Control Dep"];
28 -> 35 [label="Control Dep"];
28 -> 37 [label="Control Dep"];
38 -> 36 [label="AST"];
38 -> 37 [label="AST"];
38 -> 35 [label="AST"];
39 -> 34 [label="AST"];
39 -> 33 [label="AST"];
39 -> 38 [label="AST"];
39 -> 258 [label="Action"];
40 -> 32 [label="AST"];
40 -> 39 [label="AST"];
41 -> 30 [label="AST"];
41 -> 31 [label="AST"];
41 -> 29 [label="AST"];
41 -> 40 [label="AST"];
42 -> 41 [label="AST"];
43 -> 28 [label="AST"];
43 -> 42 [label="AST"];
51 -> 49 [label="AST"];
51 -> 50 [label="AST"];
51 -> 48 [label="AST"];
52 -> 47 [label="AST"];
52 -> 51 [label="AST"];
53 -> 45 [label="AST"];
53 -> 46 [label="AST"];
53 -> 44 [label="AST"];
53 -> 52 [label="AST"];
61 -> 59 [label="AST"];
61 -> 60 [label="AST"];
61 -> 58 [label="AST"];
62 -> 57 [label="AST"];
62 -> 61 [label="AST"];
63 -> 55 [label="AST"];
63 -> 56 [label="AST"];
63 -> 54 [label="AST"];
63 -> 62 [label="AST"];
69 -> 67 [label="AST"];
69 -> 68 [label="AST"];
70 -> 65 [label="AST"];
70 -> 66 [label="AST"];
70 -> 64 [label="AST"];
70 -> 69 [label="AST"];
76 -> 74 [label="AST"];
76 -> 75 [label="AST"];
77 -> 72 [label="AST"];
77 -> 73 [label="AST"];
77 -> 71 [label="AST"];
77 -> 76 [label="AST"];
80 -> 78 [label="AST"];
80 -> 79 [label="AST"];
80 -> 88 [label="Control Dep"];
80 -> 87 [label="Control Dep"];
80 -> 81 [label="Control Dep"];
80 -> 83 [label="Control Dep"];
80 -> 86 [label="Control Dep"];
80 -> 84 [label="Control Dep"];
80 -> 85 [label="Control Dep"];
86 -> 84 [label="AST"];
86 -> 85 [label="AST"];
87 -> 82 [label="AST"];
87 -> 83 [label="AST"];
87 -> 81 [label="AST"];
87 -> 86 [label="AST"];
88 -> 87 [label="AST"];
89 -> 80 [label="AST"];
89 -> 88 [label="AST"];
97 -> 95 [label="AST"];
97 -> 96 [label="AST"];
97 -> 94 [label="AST"];
98 -> 93 [label="AST"];
98 -> 97 [label="AST"];
99 -> 91 [label="AST"];
99 -> 92 [label="AST"];
99 -> 90 [label="AST"];
99 -> 98 [label="AST"];
102 -> 100 [label="AST"];
102 -> 101 [label="AST"];
102 -> 113 [label="Control Dep"];
102 -> 112 [label="Control Dep"];
102 -> 103 [label="Control Dep"];
102 -> 105 [label="Control Dep"];
102 -> 111 [label="Control Dep"];
102 -> 106 [label="Control Dep"];
102 -> 110 [label="Control Dep"];
102 -> 107 [label="Control Dep"];
102 -> 109 [label="Control Dep"];
110 -> 108 [label="AST"];
110 -> 109 [label="AST"];
110 -> 107 [label="AST"];
111 -> 106 [label="AST"];
111 -> 110 [label="AST"];
112 -> 104 [label="AST"];
112 -> 105 [label="AST"];
112 -> 103 [label="AST"];
112 -> 111 [label="AST"];
113 -> 112 [label="AST"];
114 -> 102 [label="AST"];
114 -> 113 [label="AST"];
117 -> 115 [label="AST"];
117 -> 116 [label="AST"];
117 -> 125 [label="Control Dep"];
117 -> 124 [label="Control Dep"];
117 -> 118 [label="Control Dep"];
117 -> 120 [label="Control Dep"];
117 -> 123 [label="Control Dep"];
117 -> 121 [label="Control Dep"];
117 -> 122 [label="Control Dep"];
123 -> 121 [label="AST"];
123 -> 122 [label="AST"];
124 -> 119 [label="AST"];
124 -> 120 [label="AST"];
124 -> 118 [label="AST"];
124 -> 123 [label="AST"];
125 -> 124 [label="AST"];
126 -> 117 [label="AST"];
126 -> 125 [label="AST"];
132 -> 130 [label="AST"];
132 -> 131 [label="AST"];
133 -> 128 [label="AST"];
133 -> 129 [label="AST"];
133 -> 127 [label="AST"];
133 -> 132 [label="AST"];
139 -> 137 [label="AST"];
139 -> 138 [label="AST"];
140 -> 135 [label="AST"];
140 -> 136 [label="AST"];
140 -> 134 [label="AST"];
140 -> 139 [label="AST"];
142 -> 141 [label="AST"];
147 -> 150 [label="Data Dep"];
148 -> 146 [label="AST"];
148 -> 147 [label="AST"];
148 -> 145 [label="AST"];
149 -> 144 [label="AST"];
149 -> 148 [label="AST"];
149 -> 143 [label="AST"];
150 -> 157 [label="Define-Use"];
150 -> 166 [label="Define-Use"];
150 -> 168 [label="Define-Use"];
151 -> 150 [label="AST"];
151 -> 142 [label="AST"];
151 -> 149 [label="AST"];
154 -> 156 [label="Define-Use"];
155 -> 154 [label="AST"];
155 -> 152 [label="AST"];
155 -> 153 [label="AST"];
157 -> 158 [label="AST"];
159 -> 157 [label="AST"];
160 -> 156 [label="AST"];
160 -> 159 [label="AST"];
160 -> 170 [label="Control Dep"];
160 -> 169 [label="Control Dep"];
160 -> 163 [label="Control Dep"];
160 -> 165 [label="Control Dep"];
160 -> 168 [label="Control Dep"];
160 -> 166 [label="Control Dep"];
160 -> 167 [label="Control Dep"];
161 -> 167 [label="Define-Use"];
162 -> 161 [label="AST"];
168 -> 166 [label="AST"];
168 -> 167 [label="AST"];
169 -> 164 [label="AST"];
169 -> 165 [label="AST"];
169 -> 163 [label="AST"];
169 -> 168 [label="AST"];
170 -> 169 [label="AST"];
171 -> 155 [label="AST"];
171 -> 160 [label="AST"];
171 -> 162 [label="AST"];
171 -> 170 [label="AST"];
175 -> 177 [label="Data Dep"];
176 -> 174 [label="AST"];
176 -> 175 [label="AST"];
176 -> 173 [label="AST"];
177 -> 179 [label="Define-Use"];
177 -> 184 [label="Define-Use"];
177 -> 195 [label="Define-Use"];
178 -> 177 [label="AST"];
178 -> 172 [label="AST"];
178 -> 176 [label="AST"];
181 -> 179 [label="AST"];
181 -> 180 [label="AST"];
185 -> 183 [label="AST"];
185 -> 184 [label="AST"];
185 -> 182 [label="AST"];
187 -> 185 [label="AST"];
187 -> 186 [label="AST"];
188 -> 181 [label="AST"];
188 -> 187 [label="AST"];
188 -> 199 [label="Control Dep"];
188 -> 198 [label="Control Dep"];
188 -> 189 [label="Control Dep"];
188 -> 191 [label="Control Dep"];
188 -> 197 [label="Control Dep"];
188 -> 192 [label="Control Dep"];
188 -> 196 [label="Control Dep"];
188 -> 193 [label="Control Dep"];
188 -> 195 [label="Control Dep"];
196 -> 194 [label="AST"];
196 -> 195 [label="AST"];
196 -> 193 [label="AST"];
197 -> 192 [label="AST"];
197 -> 196 [label="AST"];
198 -> 190 [label="AST"];
198 -> 191 [label="AST"];
198 -> 189 [label="AST"];
198 -> 197 [label="AST"];
199 -> 198 [label="AST"];
200 -> 188 [label="AST"];
200 -> 199 [label="AST"];
204 -> 202 [label="AST"];
204 -> 203 [label="AST"];
204 -> 201 [label="AST"];
206 -> 204 [label="AST"];
206 -> 205 [label="AST"];
206 -> 215 [label="Control Dep"];
206 -> 214 [label="Control Dep"];
206 -> 207 [label="Control Dep"];
206 -> 209 [label="Control Dep"];
206 -> 213 [label="Control Dep"];
206 -> 210 [label="Control Dep"];
206 -> 212 [label="Control Dep"];
213 -> 211 [label="AST"];
213 -> 212 [label="AST"];
213 -> 210 [label="AST"];
214 -> 208 [label="AST"];
214 -> 209 [label="AST"];
214 -> 207 [label="AST"];
214 -> 213 [label="AST"];
215 -> 214 [label="AST"];
216 -> 206 [label="AST"];
216 -> 215 [label="AST"];
218 -> 217 [label="AST"];
223 -> 226 [label="Data Dep"];
224 -> 222 [label="AST"];
224 -> 223 [label="AST"];
224 -> 221 [label="AST"];
225 -> 220 [label="AST"];
225 -> 224 [label="AST"];
225 -> 219 [label="AST"];
226 -> 233 [label="Define-Use"];
226 -> 242 [label="Define-Use"];
226 -> 244 [label="Define-Use"];
227 -> 226 [label="AST"];
227 -> 218 [label="AST"];
227 -> 225 [label="AST"];
230 -> 232 [label="Define-Use"];
231 -> 230 [label="AST"];
231 -> 228 [label="AST"];
231 -> 229 [label="AST"];
233 -> 234 [label="AST"];
235 -> 233 [label="AST"];
236 -> 232 [label="AST"];
236 -> 235 [label="AST"];
236 -> 246 [label="Control Dep"];
236 -> 245 [label="Control Dep"];
236 -> 239 [label="Control Dep"];
236 -> 241 [label="Control Dep"];
236 -> 244 [label="Control Dep"];
236 -> 242 [label="Control Dep"];
236 -> 243 [label="Control Dep"];
237 -> 243 [label="Define-Use"];
238 -> 237 [label="AST"];
244 -> 242 [label="AST"];
244 -> 243 [label="AST"];
245 -> 240 [label="AST"];
245 -> 241 [label="AST"];
245 -> 239 [label="AST"];
245 -> 244 [label="AST"];
246 -> 245 [label="AST"];
247 -> 231 [label="AST"];
247 -> 236 [label="AST"];
247 -> 238 [label="AST"];
247 -> 246 [label="AST"];
251 -> 252 [label="AST"];
253 -> 249 [label="AST"];
253 -> 254 [label="AST"];
253 -> 250 [label="AST"];
253 -> 248 [label="AST"];
253 -> 251 [label="AST"];
255 -> 253 [label="AST"];
256 -> 8 [label="AST"];
256 -> 13 [label="AST"];
256 -> 25 [label="AST"];
256 -> 43 [label="AST"];
256 -> 53 [label="AST"];
256 -> 63 [label="AST"];
256 -> 70 [label="AST"];
256 -> 77 [label="AST"];
256 -> 89 [label="AST"];
256 -> 99 [label="AST"];
256 -> 114 [label="AST"];
256 -> 126 [label="AST"];
256 -> 133 [label="AST"];
256 -> 140 [label="AST"];
256 -> 151 [label="AST"];
256 -> 171 [label="AST"];
256 -> 178 [label="AST"];
256 -> 200 [label="AST"];
256 -> 216 [label="AST"];
256 -> 227 [label="AST"];
256 -> 247 [label="AST"];
256 -> 255 [label="AST"];
257 -> 2 [label="AST"];
257 -> 1 [label="AST"];
257 -> 3 [label="AST"];
257 -> 256 [label="AST"];
258 -> 259 [label="Action"];
}