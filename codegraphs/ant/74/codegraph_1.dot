digraph "execute#?" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@execute" shape=ellipse]
2 [label="2:CtTypeReferenceImpl@BuildException" shape=ellipse]
3 [label="3:CtFieldReadImpl@propertyHelper" shape=ellipse]
4 [label="3:CtLiteralImpl@null" shape=ellipse]
5 [label="3:CtBinaryOperatorImpl@(propertyHelper == null)" shape=ellipse]
6 [label="3:CtFieldReadImpl@delegates" shape=ellipse]
7 [label="3:CtLiteralImpl@null" shape=ellipse]
8 [label="3:CtBinaryOperatorImpl@(delegates == null)" shape=ellipse]
9 [label="3:CtBinaryOperatorImpl@(propertyHelper == null) && (delegates == null)" shape=ellipse]
10 [label="4:CtTypeReferenceImpl@BuildException" shape=ellipse]
11 [label="5:CtLiteralImpl@\"Either a new PropertyHelper\"" shape=ellipse]
12 [label="5:CtLiteralImpl@\" or one or more PropertyHelper delegates are required\"" shape=ellipse]
13 [label="5:CtBinaryOperatorImpl@\"Either a new PropertyHelper\" + \" or one or more PropertyHelper delegates are required\"" shape=ellipse]
14 [label="4:CtConstructorCallImpl@new BuildException(\"Either a new PropertyHelper\" + \" or one or more PropertyHelper delegates are required\")" shape=ellipse]
15 [label="4:CtThrowImpl@throw new BuildException(\"Either a new PropertyHelper\" + \" or one or more PropertyHelper delegates are required\")" shape=ellipse]
16 [label="3:CtBlockImpl@\{
    throw new BuildException(\"Either a new PropertyHelper\" + \" or one or more PropertyHelper delegates are required\");
\}" shape=ellipse]
17 [label="3:CtIfImpl@if ((propertyHelper == null) && (delegates == null)) \{
    throw new BuildException(\"Either a new PropertyHelper\" + \" or one or more PropertyHelper delegates are required\");
\}" shape=ellipse]
18 [label="7:CtTypeReferenceImpl@PropertyHelper" shape=ellipse]
19 [label="7:CtFieldReadImpl@propertyHelper" shape=ellipse]
20 [label="7:CtVirtualElement@ph" shape=ellipse]
21 [label="7:CtLocalVariableImpl@PropertyHelper ph = propertyHelper" shape=ellipse]
22 [label="8:CtVariableReadImpl@ph" shape=ellipse]
23 [label="8:CtLiteralImpl@null" shape=ellipse]
24 [label="8:CtBinaryOperatorImpl@ph == null" shape=ellipse]
25 [label="9:CtVariableWriteImpl@ph" shape=ellipse]
26 [label="9:CtExecutableReferenceImpl@getPropertyHelper()" shape=ellipse]
27 [label="9:CtVirtualElement@getPropertyHelper" shape=ellipse]
28 [label="9:CtTypeAccessImpl@PropertyHelper" shape=ellipse]
29 [label="9:CtExecutableReferenceImpl@getProject()" shape=ellipse]
30 [label="9:CtVirtualElement@getProject" shape=ellipse]
31 [label="9:CtInvocationImpl@getProject()" shape=ellipse]
32 [label="9:CtInvocationImpl@PropertyHelper.getPropertyHelper(getProject())" shape=ellipse]
33 [label="9:CtAssignmentImpl@ph = PropertyHelper.getPropertyHelper(getProject())" shape=ellipse]
34 [label="8:CtBlockImpl@\{
    ph = PropertyHelper.getPropertyHelper(getProject());
\}" shape=ellipse]
35 [label="11:CtVariableWriteImpl@ph" shape=ellipse]
36 [label="11:CtFieldReadImpl@propertyHelper" shape=ellipse]
37 [label="11:CtAssignmentImpl@ph = propertyHelper" shape=ellipse]
38 [label="10:CtBlockImpl@\{
    ph = propertyHelper;
\}" shape=ellipse]
39 [label="8:CtIfImpl@if (ph == null) \{
    ph = PropertyHelper.getPropertyHelper(getProject());
\} else \{
    ph = propertyHelper;
\}" shape=ellipse]
40 [label="13:CtVariableReadImpl@ph" shape=ellipse]
41 [label="14:CtFieldReadImpl@delegates" shape=ellipse]
42 [label="14:CtLiteralImpl@null" shape=ellipse]
43 [label="14:CtBinaryOperatorImpl@delegates != null" shape=ellipse]
44 [label="15:CtTypeReferenceImpl@Iterator" shape=ellipse]
45 [label="15:CtExecutableReferenceImpl@iterator()" shape=ellipse]
46 [label="15:CtVirtualElement@iterator" shape=ellipse]
47 [label="15:CtFieldReadImpl@delegates" shape=ellipse]
48 [label="15:CtInvocationImpl@delegates.iterator()" shape=ellipse]
49 [label="15:CtVirtualElement@iter" shape=ellipse]
50 [label="15:CtLocalVariableImpl@Iterator iter = delegates.iterator()" shape=ellipse]
51 [label="15:CtExecutableReferenceImpl@hasNext()" shape=ellipse]
52 [label="15:CtVirtualElement@hasNext" shape=ellipse]
53 [label="15:CtVariableReadImpl@iter" shape=ellipse]
54 [label="15:CtInvocationImpl@iter.hasNext()" shape=ellipse]
55 [label="16:CtTypeReferenceImpl@Object" shape=ellipse]
56 [label="16:CtExecutableReferenceImpl@next()" shape=ellipse]
57 [label="16:CtVirtualElement@next" shape=ellipse]
58 [label="16:CtVariableReadImpl@iter" shape=ellipse]
59 [label="16:CtInvocationImpl@iter.next()" shape=ellipse]
60 [label="16:CtVirtualElement@o" shape=ellipse]
61 [label="16:CtLocalVariableImpl@Object o = iter.next()" shape=ellipse]
62 [label="17:CtTypeReferenceImpl@PropertyHelper.Delegate" shape=ellipse]
63 [label="17:CtTypeReferenceImpl@PropertyHelper" shape=ellipse]
64 [label="18:CtVariableReadImpl@o" shape=ellipse]
65 [label="18:CtTypeAccessImpl@DelegateElement" shape=ellipse]
66 [label="18:CtTypeReferenceImpl@DelegateElement" shape=ellipse]
67 [label="18:CtBinaryOperatorImpl@o instanceof DelegateElement" shape=ellipse]
68 [label="19:CtExecutableReferenceImpl@resolve()" shape=ellipse]
69 [label="19:CtVirtualElement@resolve" shape=ellipse]
70 [label="19:CtVariableReadImpl@((DelegateElement) (o))" shape=ellipse]
71 [label="19:CtTypeReferenceImpl@DelegateElement" shape=ellipse]
72 [label="19:CtInvocationImpl@((DelegateElement) (o)).resolve()" shape=ellipse]
73 [label="20:CtVariableReadImpl@((PropertyHelper.Delegate) (o))" shape=ellipse]
74 [label="20:CtTypeReferenceImpl@PropertyHelper.Delegate" shape=ellipse]
75 [label="18:CtConditionalImpl@(o instanceof DelegateElement) ? ((DelegateElement) (o)).resolve() : ((PropertyHelper.Delegate) (o))" shape=ellipse]
76 [label="17:CtVirtualElement@delegate" shape=ellipse]
77 [label="17:CtLocalVariableImpl@PropertyHelper.Delegate delegate = (o instanceof DelegateElement) ? ((DelegateElement) (o)).resolve() : ((PropertyHelper.Delegate) (o))" shape=ellipse]
78 [label="21:CtExecutableReferenceImpl@log(<unknown>,<unknown>)" shape=ellipse]
79 [label="21:CtVirtualElement@log" shape=ellipse]
80 [label="21:CtLiteralImpl@\"Adding PropertyHelper delegate \"" shape=ellipse]
81 [label="21:CtVariableReadImpl@delegate" shape=ellipse]
82 [label="21:CtBinaryOperatorImpl@\"Adding PropertyHelper delegate \" + delegate" shape=ellipse]
83 [label="21:CtTypeAccessImpl@MSG_DEBUG" shape=ellipse]
84 [label="21:CtInvocationImpl@log(\"Adding PropertyHelper delegate \" + delegate, MSG_DEBUG)" shape=ellipse]
85 [label="22:CtExecutableReferenceImpl@add(PropertyHelper.Delegate)" shape=ellipse]
86 [label="22:CtVirtualElement@add" shape=ellipse]
87 [label="22:CtVariableReadImpl@ph" shape=ellipse]
88 [label="22:CtVariableReadImpl@delegate" shape=ellipse]
89 [label="22:CtInvocationImpl@ph.add(delegate)" shape=ellipse]
90 [label="15:CtBlockImpl@\{
    Object o = iter.next();
    PropertyHelper.Delegate delegate = (o instanceof DelegateElement) ? ((DelegateElement) (o)).resolve() : ((PropertyHelper.Delegate) (o));
    log(\"Adding PropertyHelper delegate \" + delegate, MSG_DEBUG);
    ph.add(delegate);
\}" shape=ellipse]
91 [label="15:CtForImpl@for (Iterator iter = delegates.iterator(); iter.hasNext();) \{
    Object o = iter.next();
    PropertyHelper.Delegate delegate = (o instanceof DelegateElement) ? ((DelegateElement) (o)).resolve() : ((PropertyHelper.Delegate) (o));
    log(\"Adding PropertyHelper delegate \" + delegate, MSG_DEBUG);
    ph.add(delegate);
\}" shape=ellipse]
92 [label="14:CtBlockImpl@\{
    for (Iterator iter = delegates.iterator(); iter.hasNext();) \{
        Object o = iter.next();
        PropertyHelper.Delegate delegate = (o instanceof DelegateElement) ? ((DelegateElement) (o)).resolve() : ((PropertyHelper.Delegate) (o));
        log(\"Adding PropertyHelper delegate \" + delegate, MSG_DEBUG);
        ph.add(delegate);
    \}
\}" shape=ellipse]
93 [label="14:CtIfImpl@if (delegates != null) \{
    for (Iterator iter = delegates.iterator(); iter.hasNext();) \{
        Object o = iter.next();
        PropertyHelper.Delegate delegate = (o instanceof DelegateElement) ? ((DelegateElement) (o)).resolve() : ((PropertyHelper.Delegate) (o));
        log(\"Adding PropertyHelper delegate \" + delegate, MSG_DEBUG);
        ph.add(delegate);
    \}
\}" shape=ellipse]
94 [label="13:CtBlockImpl@\{
    if (delegates != null) \{
        for (Iterator iter = delegates.iterator(); iter.hasNext();) \{
            Object o = iter.next();
            PropertyHelper.Delegate delegate = (o instanceof DelegateElement) ? ((DelegateElement) (o)).resolve() : ((PropertyHelper.Delegate) (o));
            log(\"Adding PropertyHelper delegate \" + delegate, MSG_DEBUG);
            ph.add(delegate);
        \}
    \}
\}" shape=ellipse]
95 [label="13:CtSynchronizedImpl@synchronized(ph) \{
    if (delegates != null) \{
        for (Iterator iter = delegates.iterator(); iter.hasNext();) \{
            Object o = iter.next();
            PropertyHelper.Delegate delegate = (o instanceof DelegateElement) ? ((DelegateElement) (o)).resolve() : ((PropertyHelper.Delegate) (o));
            log(\"Adding PropertyHelper delegate \" + delegate, MSG_DEBUG);
            ph.add(delegate);
        \}
    \}
\}" shape=ellipse]
96 [label="26:CtFieldReadImpl@propertyHelper" shape=ellipse]
97 [label="26:CtLiteralImpl@null" shape=ellipse]
98 [label="26:CtBinaryOperatorImpl@propertyHelper != null" shape=ellipse]
99 [label="27:CtExecutableReferenceImpl@log(<unknown>,<unknown>)" shape=ellipse]
100 [label="27:CtVirtualElement@log" shape=ellipse]
101 [label="27:CtLiteralImpl@\"Installing PropertyHelper \"" shape=ellipse]
102 [label="27:CtFieldReadImpl@propertyHelper" shape=ellipse]
103 [label="27:CtBinaryOperatorImpl@\"Installing PropertyHelper \" + propertyHelper" shape=ellipse]
104 [label="27:CtTypeAccessImpl@MSG_DEBUG" shape=ellipse]
105 [label="27:CtInvocationImpl@log(\"Installing PropertyHelper \" + propertyHelper, MSG_DEBUG)" shape=ellipse]
106 [label="28:CtExecutableReferenceImpl@addReference()" shape=ellipse]
107 [label="28:CtVirtualElement@addReference" shape=ellipse]
108 [label="28:CtExecutableReferenceImpl@getProject()" shape=ellipse]
109 [label="28:CtVirtualElement@getProject" shape=ellipse]
110 [label="28:CtInvocationImpl@getProject()" shape=ellipse]
111 [label="28:CtTypeAccessImpl@REFID_PROPERTY_HELPER" shape=ellipse]
112 [label="28:CtFieldReadImpl@propertyHelper" shape=ellipse]
113 [label="28:CtInvocationImpl@getProject().addReference(REFID_PROPERTY_HELPER, propertyHelper)" shape=ellipse]
114 [label="26:CtBlockImpl@\{
    log(\"Installing PropertyHelper \" + propertyHelper, MSG_DEBUG);
    getProject().addReference(REFID_PROPERTY_HELPER, propertyHelper);
\}" shape=ellipse]
115 [label="26:CtIfImpl@if (propertyHelper != null) \{
    log(\"Installing PropertyHelper \" + propertyHelper, MSG_DEBUG);
    getProject().addReference(REFID_PROPERTY_HELPER, propertyHelper);
\}" shape=ellipse]
116 [label="2:CtBlockImpl@\{
    if ((propertyHelper == null) && (delegates == null)) \{
        throw new BuildException(\"Either a new PropertyHelper\" + \" or one or more PropertyHelper delegates are required\");
    \}
    PropertyHelper ph = propertyHelper;
    if (ph == null) \{
        ph = PropertyHelper.getPropertyHelper(getProject());
    \} else \{
        ph = propertyHelper;
    \}
    synchronized(ph) \{
        if (delegates != null) \{
            for (Iterator iter = delegates.iterator(); iter.hasNext();) \{
                Object o = iter.next();
                PropertyHelper.Delegate delegate = (o instanceof DelegateElement) ? ((DelegateElement) (o)).resolve() : ((PropertyHelper.Delegate) (o));
                log(\"Adding PropertyHelper delegate \" + delegate, MSG_DEBUG);
                ph.add(delegate);
            \}
        \}
    \}
    if (propertyHelper != null) \{
        log(\"Installing PropertyHelper \" + propertyHelper, MSG_DEBUG);
        getProject().addReference(REFID_PROPERTY_HELPER, propertyHelper);
    \}
\}" shape=ellipse]
117 [label="2:CtMethodImpl@public void execute() throws BuildException \{
    if ((propertyHelper == null) && (delegates == null)) \{
        throw new BuildException(\"Either a new PropertyHelper\" + \" or one or more PropertyHelper delegates are required\");
    \}
    PropertyHelper ph = propertyHelper;
    if (ph == null) \{
        ph = PropertyHelper.getPropertyHelper(getProject());
    \} else \{
        ph = propertyHelper;
    \}
    synchronized(ph) \{
        if (delegates != null) \{
            for (Iterator iter = delegates.iterator(); iter.hasNext();) \{
                Object o = iter.next();
                PropertyHelper.Delegate delegate = (o instanceof DelegateElement) ? ((DelegateElement) (o)).resolve() : ((PropertyHelper.Delegate) (o));
                log(\"Adding PropertyHelper delegate \" + delegate, MSG_DEBUG);
                ph.add(delegate);
            \}
        \}
    \}
    if (propertyHelper != null) \{
        log(\"Installing PropertyHelper \" + propertyHelper, MSG_DEBUG);
        getProject().addReference(REFID_PROPERTY_HELPER, propertyHelper);
    \}
\}" shape=ellipse]
118 [label="3:Insert@INSERT" shape=ellipse]
119 [label="3:CtIfImpl@if (getProject() == null) \{
    throw new BuildException(\"Project instance not set\");
\}" shape=ellipse]
5 -> 3 [label="AST"];
5 -> 4 [label="AST"];
8 -> 6 [label="AST"];
8 -> 7 [label="AST"];
9 -> 5 [label="AST"];
9 -> 8 [label="AST"];
9 -> 16 [label="Control Dep"];
9 -> 15 [label="Control Dep"];
9 -> 14 [label="Control Dep"];
9 -> 13 [label="Control Dep"];
9 -> 11 [label="Control Dep"];
9 -> 12 [label="Control Dep"];
13 -> 11 [label="AST"];
13 -> 12 [label="AST"];
14 -> 13 [label="AST"];
15 -> 14 [label="AST"];
16 -> 15 [label="AST"];
17 -> 9 [label="AST"];
17 -> 16 [label="AST"];
19 -> 20 [label="Data Dep"];
20 -> 22 [label="Define-Use"];
20 -> 40 [label="Define-Use"];
20 -> 87 [label="Define-Use"];
21 -> 20 [label="AST"];
21 -> 18 [label="AST"];
21 -> 19 [label="AST"];
24 -> 22 [label="AST"];
24 -> 23 [label="AST"];
24 -> 34 [label="Control Dep"];
24 -> 33 [label="Control Dep"];
24 -> 25 [label="Control Dep"];
24 -> 32 [label="Control Dep"];
24 -> 26 [label="Control Dep"];
24 -> 28 [label="Control Dep"];
24 -> 31 [label="Control Dep"];
24 -> 29 [label="Control Dep"];
24 -> 38 [label="Control Dep"];
24 -> 37 [label="Control Dep"];
24 -> 35 [label="Control Dep"];
24 -> 36 [label="Control Dep"];
25 -> 40 [label="Define-Use"];
25 -> 87 [label="Define-Use"];
31 -> 30 [label="AST"];
31 -> 29 [label="AST"];
32 -> 27 [label="AST"];
32 -> 28 [label="AST"];
32 -> 26 [label="AST"];
32 -> 31 [label="AST"];
33 -> 25 [label="AST"];
33 -> 32 [label="AST"];
34 -> 33 [label="AST"];
35 -> 40 [label="Define-Use"];
35 -> 87 [label="Define-Use"];
36 -> 35 [label="Data Dep"];
37 -> 35 [label="AST"];
37 -> 36 [label="AST"];
38 -> 37 [label="AST"];
39 -> 24 [label="AST"];
39 -> 34 [label="AST"];
39 -> 38 [label="AST"];
40 -> 94 [label="Control Dep"];
40 -> 93 [label="Control Dep"];
40 -> 43 [label="Control Dep"];
40 -> 41 [label="Control Dep"];
40 -> 42 [label="Control Dep"];
43 -> 41 [label="AST"];
43 -> 42 [label="AST"];
43 -> 92 [label="Control Dep"];
43 -> 91 [label="Control Dep"];
43 -> 50 [label="Control Dep"];
43 -> 48 [label="Control Dep"];
43 -> 45 [label="Control Dep"];
43 -> 47 [label="Control Dep"];
43 -> 54 [label="Control Dep"];
43 -> 51 [label="Control Dep"];
43 -> 53 [label="Control Dep"];
47 -> 49 [label="Data Dep"];
48 -> 46 [label="AST"];
48 -> 47 [label="AST"];
48 -> 45 [label="AST"];
49 -> 53 [label="Define-Use"];
49 -> 58 [label="Define-Use"];
50 -> 49 [label="AST"];
50 -> 44 [label="AST"];
50 -> 48 [label="AST"];
54 -> 52 [label="AST"];
54 -> 53 [label="AST"];
54 -> 51 [label="AST"];
54 -> 90 [label="Control Dep"];
54 -> 61 [label="Control Dep"];
54 -> 59 [label="Control Dep"];
54 -> 56 [label="Control Dep"];
54 -> 58 [label="Control Dep"];
54 -> 77 [label="Control Dep"];
54 -> 75 [label="Control Dep"];
54 -> 67 [label="Control Dep"];
54 -> 64 [label="Control Dep"];
54 -> 65 [label="Control Dep"];
54 -> 84 [label="Control Dep"];
54 -> 78 [label="Control Dep"];
54 -> 82 [label="Control Dep"];
54 -> 80 [label="Control Dep"];
54 -> 81 [label="Control Dep"];
54 -> 83 [label="Control Dep"];
54 -> 89 [label="Control Dep"];
54 -> 85 [label="Control Dep"];
54 -> 87 [label="Control Dep"];
54 -> 88 [label="Control Dep"];
58 -> 60 [label="Data Dep"];
59 -> 57 [label="AST"];
59 -> 58 [label="AST"];
59 -> 56 [label="AST"];
60 -> 64 [label="Define-Use"];
60 -> 70 [label="Define-Use"];
60 -> 73 [label="Define-Use"];
61 -> 60 [label="AST"];
61 -> 55 [label="AST"];
61 -> 59 [label="AST"];
62 -> 63 [label="AST"];
64 -> 76 [label="Data Dep"];
65 -> 66 [label="AST"];
67 -> 64 [label="AST"];
67 -> 65 [label="AST"];
67 -> 72 [label="Control Dep"];
67 -> 68 [label="Control Dep"];
67 -> 70 [label="Control Dep"];
67 -> 73 [label="Control Dep"];
70 -> 71 [label="AST"];
70 -> 76 [label="Data Dep"];
72 -> 69 [label="AST"];
72 -> 70 [label="AST"];
72 -> 68 [label="AST"];
73 -> 74 [label="AST"];
73 -> 76 [label="Data Dep"];
75 -> 67 [label="AST"];
75 -> 72 [label="AST"];
75 -> 73 [label="AST"];
76 -> 81 [label="Define-Use"];
76 -> 88 [label="Define-Use"];
77 -> 76 [label="AST"];
77 -> 62 [label="AST"];
77 -> 75 [label="AST"];
82 -> 80 [label="AST"];
82 -> 81 [label="AST"];
84 -> 79 [label="AST"];
84 -> 78 [label="AST"];
84 -> 82 [label="AST"];
84 -> 83 [label="AST"];
89 -> 86 [label="AST"];
89 -> 87 [label="AST"];
89 -> 85 [label="AST"];
89 -> 88 [label="AST"];
90 -> 61 [label="AST"];
90 -> 77 [label="AST"];
90 -> 84 [label="AST"];
90 -> 89 [label="AST"];
91 -> 50 [label="AST"];
91 -> 54 [label="AST"];
91 -> 90 [label="AST"];
92 -> 91 [label="AST"];
93 -> 43 [label="AST"];
93 -> 92 [label="AST"];
94 -> 93 [label="AST"];
95 -> 40 [label="AST"];
95 -> 94 [label="AST"];
98 -> 96 [label="AST"];
98 -> 97 [label="AST"];
98 -> 114 [label="Control Dep"];
98 -> 105 [label="Control Dep"];
98 -> 99 [label="Control Dep"];
98 -> 103 [label="Control Dep"];
98 -> 101 [label="Control Dep"];
98 -> 102 [label="Control Dep"];
98 -> 104 [label="Control Dep"];
98 -> 113 [label="Control Dep"];
98 -> 106 [label="Control Dep"];
98 -> 110 [label="Control Dep"];
98 -> 108 [label="Control Dep"];
98 -> 111 [label="Control Dep"];
98 -> 112 [label="Control Dep"];
103 -> 101 [label="AST"];
103 -> 102 [label="AST"];
105 -> 100 [label="AST"];
105 -> 99 [label="AST"];
105 -> 103 [label="AST"];
105 -> 104 [label="AST"];
110 -> 109 [label="AST"];
110 -> 108 [label="AST"];
113 -> 107 [label="AST"];
113 -> 110 [label="AST"];
113 -> 106 [label="AST"];
113 -> 111 [label="AST"];
113 -> 112 [label="AST"];
114 -> 105 [label="AST"];
114 -> 113 [label="AST"];
115 -> 98 [label="AST"];
115 -> 114 [label="AST"];
116 -> 17 [label="AST"];
116 -> 21 [label="AST"];
116 -> 39 [label="AST"];
116 -> 95 [label="AST"];
116 -> 115 [label="AST"];
117 -> 1 [label="AST"];
117 -> 0 [label="AST"];
117 -> 2 [label="AST"];
117 -> 116 [label="AST"];
117 -> 118 [label="Action"];
118 -> 119 [label="Action"];
}