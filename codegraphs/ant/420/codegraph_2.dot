digraph "test4#?" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@test4" shape=ellipse]
2 [label="3:CtTypeReferenceImpl@Timer" shape=ellipse]
3 [label="3:CtTypeReferenceImpl@Timer" shape=ellipse]
4 [label="3:CtConstructorCallImpl@new Timer()" shape=ellipse]
5 [label="3:CtVirtualElement@timer" shape=ellipse]
6 [label="3:CtLocalVariableImpl@Timer timer = new Timer()" shape=ellipse]
7 [label="4:CtExecutableReferenceImpl@executeTarget(java.lang.String)" shape=ellipse]
8 [label="4:CtVirtualElement@executeTarget" shape=ellipse]
9 [label="4:CtLiteralImpl@\"test3\"" shape=ellipse]
10 [label="4:CtInvocationImpl@executeTarget(\"test3\")" shape=ellipse]
11 [label="5:CtExecutableReferenceImpl@stop()" shape=ellipse]
12 [label="5:CtVirtualElement@stop" shape=ellipse]
13 [label="5:CtVariableReadImpl@timer" shape=ellipse]
14 [label="5:CtInvocationImpl@timer.stop()" shape=ellipse]
15 [label="6:CtFieldReadImpl@TRACE" shape=ellipse]
16 [label="7:CtExecutableReferenceImpl@println(char[])" shape=ellipse]
17 [label="7:CtVirtualElement@println" shape=ellipse]
18 [label="7:CtTypeAccessImpl@System" shape=ellipse]
19 [label="7:CtFieldReadImpl@System.out" shape=ellipse]
20 [label="7:CtFieldReferenceImpl@java.lang.System.out" shape=ellipse]
21 [label="7:CtLiteralImpl@\" test4 elapsed time=\"" shape=ellipse]
22 [label="7:CtExecutableReferenceImpl@time()" shape=ellipse]
23 [label="7:CtVirtualElement@time" shape=ellipse]
24 [label="7:CtVariableReadImpl@timer" shape=ellipse]
25 [label="7:CtInvocationImpl@timer.time()" shape=ellipse]
26 [label="7:CtBinaryOperatorImpl@\" test4 elapsed time=\" + timer.time()" shape=ellipse]
27 [label="7:CtInvocationImpl@System.out.println(\" test4 elapsed time=\" + timer.time())" shape=ellipse]
28 [label="6:CtBlockImpl@\{
    System.out.println(\" test4 elapsed time=\" + timer.time());
\}" shape=ellipse]
29 [label="6:CtIfImpl@if (TRACE) \{
    System.out.println(\" test4 elapsed time=\" + timer.time());
\}" shape=ellipse]
30 [label="9:CtExecutableReferenceImpl@assertTrue(<unknown>)" shape=ellipse]
31 [label="9:CtVirtualElement@assertTrue" shape=ellipse]
32 [label="9:CtExecutableReferenceImpl@time()" shape=ellipse]
33 [label="9:CtVirtualElement@time" shape=ellipse]
34 [label="9:CtVariableReadImpl@timer" shape=ellipse]
35 [label="9:CtInvocationImpl@timer.time()" shape=ellipse]
36 [label="9:CtLiteralImpl@2000" shape=ellipse]
37 [label="9:CtFieldReadImpl@ERROR_RANGE" shape=ellipse]
38 [label="9:CtBinaryOperatorImpl@(2000 - ERROR_RANGE)" shape=ellipse]
39 [label="9:CtBinaryOperatorImpl@(timer.time() >= (2000 - ERROR_RANGE))" shape=ellipse]
40 [label="9:CtExecutableReferenceImpl@time()" shape=ellipse]
41 [label="9:CtVirtualElement@time" shape=ellipse]
42 [label="9:CtVariableReadImpl@timer" shape=ellipse]
43 [label="9:CtInvocationImpl@timer.time()" shape=ellipse]
44 [label="9:CtLiteralImpl@60000" shape=ellipse]
45 [label="9:CtBinaryOperatorImpl@(timer.time() < 60000)" shape=ellipse]
46 [label="9:CtBinaryOperatorImpl@(timer.time() >= (2000 - ERROR_RANGE)) && (timer.time() < 60000)" shape=ellipse]
47 [label="9:CtInvocationImpl@assertTrue((timer.time() >= (2000 - ERROR_RANGE)) && (timer.time() < 60000))" shape=ellipse]
48 [label="2:CtBlockImpl@\{
    Timer timer = new Timer();
    executeTarget(\"test3\");
    timer.stop();
    if (TRACE) \{
        System.out.println(\" test4 elapsed time=\" + timer.time());
    \}
    assertTrue((timer.time() >= (2000 - ERROR_RANGE)) && (timer.time() < 60000));
\}" shape=ellipse]
49 [label="2:CtMethodImpl@public void test4() \{
    Timer timer = new Timer();
    executeTarget(\"test3\");
    timer.stop();
    if (TRACE) \{
        System.out.println(\" test4 elapsed time=\" + timer.time());
    \}
    assertTrue((timer.time() >= (2000 - ERROR_RANGE)) && (timer.time() < 60000));
\}" shape=ellipse]
50 [label="6:Delete@DELETE" shape=ellipse]
51 [label="2:Insert@INSERT" shape=ellipse]
52 [label="2:CtAnnotationImpl@@Test" shape=ellipse]
53 [label="5:Insert@INSERT" shape=ellipse]
54 [label="5:CtFieldReadImpl@buildRule" shape=ellipse]
5 -> 13 [label="Define-Use"];
5 -> 24 [label="Define-Use"];
5 -> 34 [label="Define-Use"];
5 -> 42 [label="Define-Use"];
6 -> 5 [label="AST"];
6 -> 2 [label="AST"];
6 -> 4 [label="AST"];
10 -> 8 [label="AST"];
10 -> 7 [label="AST"];
10 -> 9 [label="AST"];
10 -> 53 [label="Action"];
14 -> 12 [label="AST"];
14 -> 13 [label="AST"];
14 -> 11 [label="AST"];
15 -> 28 [label="Control Dep"];
15 -> 27 [label="Control Dep"];
15 -> 16 [label="Control Dep"];
15 -> 19 [label="Control Dep"];
15 -> 18 [label="Control Dep"];
15 -> 26 [label="Control Dep"];
15 -> 21 [label="Control Dep"];
15 -> 25 [label="Control Dep"];
15 -> 22 [label="Control Dep"];
15 -> 24 [label="Control Dep"];
19 -> 18 [label="AST"];
19 -> 20 [label="AST"];
25 -> 23 [label="AST"];
25 -> 24 [label="AST"];
25 -> 22 [label="AST"];
26 -> 21 [label="AST"];
26 -> 25 [label="AST"];
27 -> 17 [label="AST"];
27 -> 19 [label="AST"];
27 -> 16 [label="AST"];
27 -> 26 [label="AST"];
28 -> 27 [label="AST"];
29 -> 15 [label="AST"];
29 -> 28 [label="AST"];
29 -> 50 [label="Action"];
35 -> 33 [label="AST"];
35 -> 34 [label="AST"];
35 -> 32 [label="AST"];
38 -> 36 [label="AST"];
38 -> 37 [label="AST"];
39 -> 35 [label="AST"];
39 -> 38 [label="AST"];
43 -> 41 [label="AST"];
43 -> 42 [label="AST"];
43 -> 40 [label="AST"];
45 -> 43 [label="AST"];
45 -> 44 [label="AST"];
46 -> 39 [label="AST"];
46 -> 45 [label="AST"];
47 -> 31 [label="AST"];
47 -> 30 [label="AST"];
47 -> 46 [label="AST"];
48 -> 6 [label="AST"];
48 -> 10 [label="AST"];
48 -> 14 [label="AST"];
48 -> 29 [label="AST"];
48 -> 47 [label="AST"];
49 -> 1 [label="AST"];
49 -> 0 [label="AST"];
49 -> 48 [label="AST"];
49 -> 51 [label="Action"];
51 -> 52 [label="Action"];
53 -> 54 [label="Action"];
}