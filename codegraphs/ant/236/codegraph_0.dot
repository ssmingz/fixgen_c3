digraph "zipFile#?,File,ZipOutputStream,String,int" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@zipFile" shape=ellipse]
2 [label="2:CtParameterImpl@File file" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@File" shape=ellipse]
4 [label="2:CtParameterImpl@ZipOutputStream zOut" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@ZipOutputStream" shape=ellipse]
6 [label="2:CtParameterImpl@String vPath" shape=ellipse]
7 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
8 [label="2:CtParameterImpl@int mode" shape=ellipse]
9 [label="2:CtTypeReferenceImpl@int" shape=ellipse]
10 [label="3:CtTypeReferenceImpl@IOException" shape=ellipse]
11 [label="4:CtTypeReferenceImpl@String" shape=ellipse]
12 [label="4:CtExecutableReferenceImpl@toLowerCase(java.util.Locale)" shape=ellipse]
13 [label="4:CtVirtualElement@toLowerCase" shape=ellipse]
14 [label="4:CtVariableReadImpl@vPath" shape=ellipse]
15 [label="4:CtTypeAccessImpl@ENGLISH" shape=ellipse]
16 [label="4:CtInvocationImpl@vPath.toLowerCase(ENGLISH)" shape=ellipse]
17 [label="4:CtVirtualElement@vPathLowerCase" shape=ellipse]
18 [label="4:CtLocalVariableImpl@String vPathLowerCase = vPath.toLowerCase(ENGLISH)" shape=ellipse]
19 [label="5:CtExecutableReferenceImpl@equals(java.lang.String)" shape=ellipse]
20 [label="5:CtVirtualElement@equals" shape=ellipse]
21 [label="5:CtTypeAccessImpl@XML_DESCRIPTOR_PATH" shape=ellipse]
22 [label="5:CtVariableReadImpl@vPathLowerCase" shape=ellipse]
23 [label="5:CtInvocationImpl@XML_DESCRIPTOR_PATH.equals(vPathLowerCase)" shape=ellipse]
24 [label="6:CtFieldReadImpl@deploymentDescriptor" shape=ellipse]
25 [label="6:CtLiteralImpl@null" shape=ellipse]
26 [label="6:CtBinaryOperatorImpl@(deploymentDescriptor != null)" shape=ellipse]
27 [label="7:CtExecutableReferenceImpl@fileNameEquals(File)" shape=ellipse]
28 [label="7:CtVirtualElement@fileNameEquals" shape=ellipse]
29 [label="7:CtTypeAccessImpl@FILE_UTILS" shape=ellipse]
30 [label="7:CtFieldReadImpl@deploymentDescriptor" shape=ellipse]
31 [label="7:CtVariableReadImpl@file" shape=ellipse]
32 [label="7:CtInvocationImpl@FILE_UTILS.fileNameEquals(deploymentDescriptor, file)" shape=ellipse]
33 [label="7:CtUnaryOperatorImpl@(!FILE_UTILS.fileNameEquals(deploymentDescriptor, file))" shape=ellipse]
34 [label="6:CtBinaryOperatorImpl@((deploymentDescriptor != null) || (!FILE_UTILS.fileNameEquals(deploymentDescriptor, file)))" shape=ellipse]
35 [label="8:CtFieldReadImpl@descriptorAdded" shape=ellipse]
36 [label="6:CtBinaryOperatorImpl@((deploymentDescriptor != null) || (!FILE_UTILS.fileNameEquals(deploymentDescriptor, file))) || descriptorAdded" shape=ellipse]
37 [label="9:CtExecutableReferenceImpl@logOnFirstPass(<unknown>,<unknown>)" shape=ellipse]
38 [label="9:CtVirtualElement@logOnFirstPass" shape=ellipse]
39 [label="10:CtLiteralImpl@\"Warning: selected \"" shape=ellipse]
40 [label="10:CtFieldReadImpl@archiveType" shape=ellipse]
41 [label="10:CtBinaryOperatorImpl@(\"Warning: selected \" + archiveType)" shape=ellipse]
42 [label="10:CtLiteralImpl@\" files include a \"" shape=ellipse]
43 [label="10:CtBinaryOperatorImpl@((\"Warning: selected \" + archiveType) + \" files include a \")" shape=ellipse]
44 [label="10:CtFieldReadImpl@XML_DESCRIPTOR_PATH" shape=ellipse]
45 [label="10:CtBinaryOperatorImpl@(((\"Warning: selected \" + archiveType) + \" files include a \") + XML_DESCRIPTOR_PATH)" shape=ellipse]
46 [label="11:CtLiteralImpl@\" which will\"" shape=ellipse]
47 [label="10:CtBinaryOperatorImpl@((((\"Warning: selected \" + archiveType) + \" files include a \") + XML_DESCRIPTOR_PATH) + \" which will\")" shape=ellipse]
48 [label="12:CtLiteralImpl@\" be ignored (please use appxml attribute to \"" shape=ellipse]
49 [label="10:CtBinaryOperatorImpl@(((((\"Warning: selected \" + archiveType) + \" files include a \") + XML_DESCRIPTOR_PATH) + \" which will\") + \" be ignored (please use appxml attribute to \")" shape=ellipse]
50 [label="13:CtFieldReadImpl@archiveType" shape=ellipse]
51 [label="10:CtBinaryOperatorImpl@((((((\"Warning: selected \" + archiveType) + \" files include a \") + XML_DESCRIPTOR_PATH) + \" which will\") + \" be ignored (please use appxml attribute to \") + archiveType)" shape=ellipse]
52 [label="14:CtLiteralImpl@\" task)\"" shape=ellipse]
53 [label="10:CtBinaryOperatorImpl@((((((\"Warning: selected \" + archiveType) + \" files include a \") + XML_DESCRIPTOR_PATH) + \" which will\") + \" be ignored (please use appxml attribute to \") + archiveType) + \" task)\"" shape=ellipse]
54 [label="15:CtTypeAccessImpl@MSG_WARN" shape=ellipse]
55 [label="9:CtInvocationImpl@logOnFirstPass(((((((\"Warning: selected \" + archiveType) + \" files include a \") + XML_DESCRIPTOR_PATH) + \" which will\") + \" be ignored (please use appxml attribute to \") + archiveType) + \" task)\", MSG_WARN)" shape=ellipse]
56 [label="8:CtBlockImpl@\{
    logOnFirstPass(((((((\"Warning: selected \" + archiveType) + \" files include a \") + XML_DESCRIPTOR_PATH) + \" which will\") + \" be ignored (please use appxml attribute to \") + archiveType) + \" task)\", MSG_WARN);
\}" shape=ellipse]
57 [label="17:CtExecutableReferenceImpl@zipFile(File,ZipOutputStream,java.lang.String,int)" shape=ellipse]
58 [label="17:CtVirtualElement@zipFile" shape=ellipse]
59 [label="17:CtSuperAccessImpl@super" shape=ellipse]
60 [label="17:CtVariableReadImpl@file" shape=ellipse]
61 [label="17:CtVariableReadImpl@zOut" shape=ellipse]
62 [label="17:CtVariableReadImpl@vPath" shape=ellipse]
63 [label="17:CtVariableReadImpl@mode" shape=ellipse]
64 [label="17:CtInvocationImpl@super.zipFile(file, zOut, vPath, mode)" shape=ellipse]
65 [label="18:CtFieldWriteImpl@descriptorAdded" shape=ellipse]
66 [label="18:CtLiteralImpl@true" shape=ellipse]
67 [label="18:CtAssignmentImpl@descriptorAdded = true" shape=ellipse]
68 [label="16:CtBlockImpl@\{
    super.zipFile(file, zOut, vPath, mode);
    descriptorAdded = true;
\}" shape=ellipse]
69 [label="6:CtIfImpl@if (((deploymentDescriptor != null) || (!FILE_UTILS.fileNameEquals(deploymentDescriptor, file))) || descriptorAdded) \{
    logOnFirstPass(((((((\"Warning: selected \" + archiveType) + \" files include a \") + XML_DESCRIPTOR_PATH) + \" which will\") + \" be ignored (please use appxml attribute to \") + archiveType) + \" task)\", MSG_WARN);
\} else \{
    super.zipFile(file, zOut, vPath, mode);
    descriptorAdded = true;
\}" shape=ellipse]
70 [label="5:CtBlockImpl@\{
    if (((deploymentDescriptor != null) || (!FILE_UTILS.fileNameEquals(deploymentDescriptor, file))) || descriptorAdded) \{
        logOnFirstPass(((((((\"Warning: selected \" + archiveType) + \" files include a \") + XML_DESCRIPTOR_PATH) + \" which will\") + \" be ignored (please use appxml attribute to \") + archiveType) + \" task)\", MSG_WARN);
    \} else \{
        super.zipFile(file, zOut, vPath, mode);
        descriptorAdded = true;
    \}
\}" shape=ellipse]
71 [label="21:CtExecutableReferenceImpl@zipFile(File,ZipOutputStream,java.lang.String,int)" shape=ellipse]
72 [label="21:CtVirtualElement@zipFile" shape=ellipse]
73 [label="21:CtSuperAccessImpl@super" shape=ellipse]
74 [label="21:CtVariableReadImpl@file" shape=ellipse]
75 [label="21:CtVariableReadImpl@zOut" shape=ellipse]
76 [label="21:CtVariableReadImpl@vPath" shape=ellipse]
77 [label="21:CtVariableReadImpl@mode" shape=ellipse]
78 [label="21:CtInvocationImpl@super.zipFile(file, zOut, vPath, mode)" shape=ellipse]
79 [label="20:CtBlockImpl@\{
    super.zipFile(file, zOut, vPath, mode);
\}" shape=ellipse]
80 [label="5:CtIfImpl@if (XML_DESCRIPTOR_PATH.equals(vPathLowerCase)) \{
    if (((deploymentDescriptor != null) || (!FILE_UTILS.fileNameEquals(deploymentDescriptor, file))) || descriptorAdded) \{
        logOnFirstPass(((((((\"Warning: selected \" + archiveType) + \" files include a \") + XML_DESCRIPTOR_PATH) + \" which will\") + \" be ignored (please use appxml attribute to \") + archiveType) + \" task)\", MSG_WARN);
    \} else \{
        super.zipFile(file, zOut, vPath, mode);
        descriptorAdded = true;
    \}
\} else \{
    super.zipFile(file, zOut, vPath, mode);
\}" shape=ellipse]
81 [label="3:CtBlockImpl@\{
    String vPathLowerCase = vPath.toLowerCase(ENGLISH);
    if (XML_DESCRIPTOR_PATH.equals(vPathLowerCase)) \{
        if (((deploymentDescriptor != null) || (!FILE_UTILS.fileNameEquals(deploymentDescriptor, file))) || descriptorAdded) \{
            logOnFirstPass(((((((\"Warning: selected \" + archiveType) + \" files include a \") + XML_DESCRIPTOR_PATH) + \" which will\") + \" be ignored (please use appxml attribute to \") + archiveType) + \" task)\", MSG_WARN);
        \} else \{
            super.zipFile(file, zOut, vPath, mode);
            descriptorAdded = true;
        \}
    \} else \{
        super.zipFile(file, zOut, vPath, mode);
    \}
\}" shape=ellipse]
82 [label="2:CtMethodImpl@protected void zipFile(File file, ZipOutputStream zOut, String vPath, int mode) throws IOException \{
    String vPathLowerCase = vPath.toLowerCase(ENGLISH);
    if (XML_DESCRIPTOR_PATH.equals(vPathLowerCase)) \{
        if (((deploymentDescriptor != null) || (!FILE_UTILS.fileNameEquals(deploymentDescriptor, file))) || descriptorAdded) \{
            logOnFirstPass(((((((\"Warning: selected \" + archiveType) + \" files include a \") + XML_DESCRIPTOR_PATH) + \" which will\") + \" be ignored (please use appxml attribute to \") + archiveType) + \" task)\", MSG_WARN);
        \} else \{
            super.zipFile(file, zOut, vPath, mode);
            descriptorAdded = true;
        \}
    \} else \{
        super.zipFile(file, zOut, vPath, mode);
    \}
\}" shape=ellipse]
83 [label="9:Update@UPDATE" shape=ellipse]
84 [label="9:CtInvocationImpl@logWhenWriting(((((((\"Warning: selected \" + archiveType) + \" files include a \") + XML_DESCRIPTOR_PATH) + \" which will\") + \" be ignored (please use appxml attribute to \") + archiveType) + \" task)\", MSG_WARN)" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
6 -> 7 [label="AST"];
8 -> 9 [label="AST"];
14 -> 17 [label="Data Dep"];
16 -> 13 [label="AST"];
16 -> 14 [label="AST"];
16 -> 12 [label="AST"];
16 -> 15 [label="AST"];
17 -> 22 [label="Define-Use"];
18 -> 17 [label="AST"];
18 -> 11 [label="AST"];
18 -> 16 [label="AST"];
23 -> 20 [label="AST"];
23 -> 21 [label="AST"];
23 -> 19 [label="AST"];
23 -> 22 [label="AST"];
23 -> 70 [label="Control Dep"];
23 -> 69 [label="Control Dep"];
23 -> 36 [label="Control Dep"];
23 -> 34 [label="Control Dep"];
23 -> 26 [label="Control Dep"];
23 -> 24 [label="Control Dep"];
23 -> 25 [label="Control Dep"];
23 -> 33 [label="Control Dep"];
23 -> 32 [label="Control Dep"];
23 -> 27 [label="Control Dep"];
23 -> 29 [label="Control Dep"];
23 -> 30 [label="Control Dep"];
23 -> 31 [label="Control Dep"];
23 -> 35 [label="Control Dep"];
23 -> 79 [label="Control Dep"];
23 -> 78 [label="Control Dep"];
23 -> 71 [label="Control Dep"];
23 -> 73 [label="Control Dep"];
23 -> 74 [label="Control Dep"];
23 -> 75 [label="Control Dep"];
23 -> 76 [label="Control Dep"];
23 -> 77 [label="Control Dep"];
26 -> 24 [label="AST"];
26 -> 25 [label="AST"];
32 -> 28 [label="AST"];
32 -> 29 [label="AST"];
32 -> 27 [label="AST"];
32 -> 30 [label="AST"];
32 -> 31 [label="AST"];
33 -> 32 [label="AST"];
34 -> 26 [label="AST"];
34 -> 33 [label="AST"];
36 -> 34 [label="AST"];
36 -> 35 [label="AST"];
36 -> 56 [label="Control Dep"];
36 -> 55 [label="Control Dep"];
36 -> 37 [label="Control Dep"];
36 -> 53 [label="Control Dep"];
36 -> 51 [label="Control Dep"];
36 -> 49 [label="Control Dep"];
36 -> 47 [label="Control Dep"];
36 -> 45 [label="Control Dep"];
36 -> 43 [label="Control Dep"];
36 -> 41 [label="Control Dep"];
36 -> 39 [label="Control Dep"];
36 -> 40 [label="Control Dep"];
36 -> 42 [label="Control Dep"];
36 -> 44 [label="Control Dep"];
36 -> 46 [label="Control Dep"];
36 -> 48 [label="Control Dep"];
36 -> 50 [label="Control Dep"];
36 -> 52 [label="Control Dep"];
36 -> 54 [label="Control Dep"];
36 -> 68 [label="Control Dep"];
36 -> 64 [label="Control Dep"];
36 -> 57 [label="Control Dep"];
36 -> 59 [label="Control Dep"];
36 -> 60 [label="Control Dep"];
36 -> 61 [label="Control Dep"];
36 -> 62 [label="Control Dep"];
36 -> 63 [label="Control Dep"];
36 -> 67 [label="Control Dep"];
36 -> 65 [label="Control Dep"];
36 -> 66 [label="Control Dep"];
41 -> 39 [label="AST"];
41 -> 40 [label="AST"];
43 -> 41 [label="AST"];
43 -> 42 [label="AST"];
45 -> 43 [label="AST"];
45 -> 44 [label="AST"];
47 -> 45 [label="AST"];
47 -> 46 [label="AST"];
49 -> 47 [label="AST"];
49 -> 48 [label="AST"];
51 -> 49 [label="AST"];
51 -> 50 [label="AST"];
53 -> 51 [label="AST"];
53 -> 52 [label="AST"];
55 -> 38 [label="AST"];
55 -> 37 [label="AST"];
55 -> 53 [label="AST"];
55 -> 54 [label="AST"];
55 -> 83 [label="Action"];
56 -> 55 [label="AST"];
64 -> 58 [label="AST"];
64 -> 59 [label="AST"];
64 -> 57 [label="AST"];
64 -> 60 [label="AST"];
64 -> 61 [label="AST"];
64 -> 62 [label="AST"];
64 -> 63 [label="AST"];
67 -> 65 [label="AST"];
67 -> 66 [label="AST"];
68 -> 64 [label="AST"];
68 -> 67 [label="AST"];
69 -> 36 [label="AST"];
69 -> 56 [label="AST"];
69 -> 68 [label="AST"];
70 -> 69 [label="AST"];
78 -> 72 [label="AST"];
78 -> 73 [label="AST"];
78 -> 71 [label="AST"];
78 -> 74 [label="AST"];
78 -> 75 [label="AST"];
78 -> 76 [label="AST"];
78 -> 77 [label="AST"];
79 -> 78 [label="AST"];
80 -> 23 [label="AST"];
80 -> 70 [label="AST"];
80 -> 79 [label="AST"];
81 -> 18 [label="AST"];
81 -> 80 [label="AST"];
82 -> 1 [label="AST"];
82 -> 0 [label="AST"];
82 -> 2 [label="AST"];
82 -> 4 [label="AST"];
82 -> 6 [label="AST"];
82 -> 8 [label="AST"];
82 -> 10 [label="AST"];
82 -> 81 [label="AST"];
83 -> 84 [label="Action"];
}