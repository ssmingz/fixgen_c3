digraph "zipFile#?,InputStream,ZipOutputStream,String,long,File,int,ZipExtraField[]" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@zipFile" shape=ellipse]
2 [label="3:CtParameterImpl@InputStream is" shape=ellipse]
3 [label="3:CtTypeReferenceImpl@InputStream" shape=ellipse]
4 [label="4:CtParameterImpl@ZipOutputStream zOut" shape=ellipse]
5 [label="4:CtTypeReferenceImpl@ZipOutputStream" shape=ellipse]
6 [label="5:CtParameterImpl@String vPath" shape=ellipse]
7 [label="5:CtTypeReferenceImpl@String" shape=ellipse]
8 [label="6:CtParameterImpl@long lastModified" shape=ellipse]
9 [label="6:CtTypeReferenceImpl@long" shape=ellipse]
10 [label="7:CtParameterImpl@File fromArchive" shape=ellipse]
11 [label="7:CtTypeReferenceImpl@File" shape=ellipse]
12 [label="8:CtParameterImpl@int mode" shape=ellipse]
13 [label="8:CtTypeReferenceImpl@int" shape=ellipse]
14 [label="9:CtParameterImpl@ZipExtraField[] extra" shape=ellipse]
15 [label="9:CtArrayTypeReferenceImpl@ZipExtraField[]" shape=ellipse]
16 [label="10:CtTypeReferenceImpl@IOException" shape=ellipse]
17 [label="11:CtExecutableReferenceImpl@equalsIgnoreCase(java.lang.String)" shape=ellipse]
18 [label="11:CtVirtualElement@equalsIgnoreCase" shape=ellipse]
19 [label="11:CtTypeAccessImpl@MANIFEST_NAME" shape=ellipse]
20 [label="11:CtVariableReadImpl@vPath" shape=ellipse]
21 [label="11:CtInvocationImpl@MANIFEST_NAME.equalsIgnoreCase(vPath)" shape=ellipse]
22 [label="12:CtExecutableReferenceImpl@isFirstPass()" shape=ellipse]
23 [label="12:CtVirtualElement@isFirstPass" shape=ellipse]
24 [label="12:CtInvocationImpl@isFirstPass()" shape=ellipse]
25 [label="13:CtExecutableReferenceImpl@filesetManifest(<unknown>,<unknown>)" shape=ellipse]
26 [label="13:CtVirtualElement@filesetManifest" shape=ellipse]
27 [label="13:CtVariableReadImpl@fromArchive" shape=ellipse]
28 [label="13:CtVariableReadImpl@is" shape=ellipse]
29 [label="13:CtInvocationImpl@filesetManifest(fromArchive, is)" shape=ellipse]
30 [label="12:CtBlockImpl@\{
    filesetManifest(fromArchive, is);
\}" shape=ellipse]
31 [label="12:CtIfImpl@if (isFirstPass()) \{
    filesetManifest(fromArchive, is);
\}" shape=ellipse]
32 [label="11:CtBlockImpl@\{
    if (isFirstPass()) \{
        filesetManifest(fromArchive, is);
    \}
\}" shape=ellipse]
33 [label="15:CtExecutableReferenceImpl@equalsIgnoreCase(java.lang.String)" shape=ellipse]
34 [label="15:CtVirtualElement@equalsIgnoreCase" shape=ellipse]
35 [label="15:CtTypeAccessImpl@INDEX_NAME" shape=ellipse]
36 [label="15:CtVariableReadImpl@vPath" shape=ellipse]
37 [label="15:CtInvocationImpl@INDEX_NAME.equalsIgnoreCase(vPath)" shape=ellipse]
38 [label="15:CtFieldReadImpl@index" shape=ellipse]
39 [label="15:CtBinaryOperatorImpl@INDEX_NAME.equalsIgnoreCase(vPath) && index" shape=ellipse]
40 [label="16:CtExecutableReferenceImpl@logOnFirstPass(<unknown>,<unknown>)" shape=ellipse]
41 [label="16:CtVirtualElement@logOnFirstPass" shape=ellipse]
42 [label="17:CtLiteralImpl@\"Warning: selected \"" shape=ellipse]
43 [label="17:CtFieldReadImpl@archiveType" shape=ellipse]
44 [label="17:CtBinaryOperatorImpl@(\"Warning: selected \" + archiveType)" shape=ellipse]
45 [label="17:CtLiteralImpl@\" files include a \"" shape=ellipse]
46 [label="17:CtBinaryOperatorImpl@((\"Warning: selected \" + archiveType) + \" files include a \")" shape=ellipse]
47 [label="17:CtFieldReadImpl@INDEX_NAME" shape=ellipse]
48 [label="17:CtBinaryOperatorImpl@(((\"Warning: selected \" + archiveType) + \" files include a \") + INDEX_NAME)" shape=ellipse]
49 [label="18:CtLiteralImpl@\" which will\"" shape=ellipse]
50 [label="17:CtBinaryOperatorImpl@((((\"Warning: selected \" + archiveType) + \" files include a \") + INDEX_NAME) + \" which will\")" shape=ellipse]
51 [label="19:CtLiteralImpl@\" be replaced by a newly generated one.\"" shape=ellipse]
52 [label="17:CtBinaryOperatorImpl@((((\"Warning: selected \" + archiveType) + \" files include a \") + INDEX_NAME) + \" which will\") + \" be replaced by a newly generated one.\"" shape=ellipse]
53 [label="20:CtTypeAccessImpl@MSG_WARN" shape=ellipse]
54 [label="16:CtInvocationImpl@logOnFirstPass(((((\"Warning: selected \" + archiveType) + \" files include a \") + INDEX_NAME) + \" which will\") + \" be replaced by a newly generated one.\", MSG_WARN)" shape=ellipse]
55 [label="15:CtBlockImpl@\{
    logOnFirstPass(((((\"Warning: selected \" + archiveType) + \" files include a \") + INDEX_NAME) + \" which will\") + \" be replaced by a newly generated one.\", MSG_WARN);
\}" shape=ellipse]
56 [label="22:CtFieldReadImpl@index" shape=ellipse]
57 [label="22:CtExecutableReferenceImpl@indexOf(java.lang.String)" shape=ellipse]
58 [label="22:CtVirtualElement@indexOf" shape=ellipse]
59 [label="22:CtVariableReadImpl@vPath" shape=ellipse]
60 [label="22:CtLiteralImpl@\"/\"" shape=ellipse]
61 [label="22:CtInvocationImpl@vPath.indexOf(\"/\")" shape=ellipse]
62 [label="22:CtLiteralImpl@1" shape=ellipse]
63 [label="22:CtUnaryOperatorImpl@(-1)" shape=ellipse]
64 [label="22:CtBinaryOperatorImpl@(vPath.indexOf(\"/\") == (-1))" shape=ellipse]
65 [label="22:CtBinaryOperatorImpl@index && (vPath.indexOf(\"/\") == (-1))" shape=ellipse]
66 [label="23:CtExecutableReferenceImpl@addElement(java.lang.String)" shape=ellipse]
67 [label="23:CtVirtualElement@addElement" shape=ellipse]
68 [label="23:CtFieldReadImpl@rootEntries" shape=ellipse]
69 [label="23:CtVariableReadImpl@vPath" shape=ellipse]
70 [label="23:CtInvocationImpl@rootEntries.addElement(vPath)" shape=ellipse]
71 [label="22:CtBlockImpl@\{
    rootEntries.addElement(vPath);
\}" shape=ellipse]
72 [label="22:CtIfImpl@if (index && (vPath.indexOf(\"/\") == (-1))) \{
    rootEntries.addElement(vPath);
\}" shape=ellipse]
73 [label="25:CtExecutableReferenceImpl@zipFile(InputStream,ZipOutputStream,java.lang.String,long,File,int,ZipExtraField[])" shape=ellipse]
74 [label="25:CtVirtualElement@zipFile" shape=ellipse]
75 [label="25:CtSuperAccessImpl@super" shape=ellipse]
76 [label="25:CtVariableReadImpl@is" shape=ellipse]
77 [label="25:CtVariableReadImpl@zOut" shape=ellipse]
78 [label="25:CtVariableReadImpl@vPath" shape=ellipse]
79 [label="25:CtVariableReadImpl@lastModified" shape=ellipse]
80 [label="25:CtVariableReadImpl@fromArchive" shape=ellipse]
81 [label="25:CtVariableReadImpl@mode" shape=ellipse]
82 [label="25:CtVariableReadImpl@extra" shape=ellipse]
83 [label="25:CtInvocationImpl@super.zipFile(is, zOut, vPath, lastModified, fromArchive, mode, extra)" shape=ellipse]
84 [label="21:CtBlockImpl@\{
    if (index && (vPath.indexOf(\"/\") == (-1))) \{
        rootEntries.addElement(vPath);
    \}
    super.zipFile(is, zOut, vPath, lastModified, fromArchive, mode, extra);
\}" shape=ellipse]
85 [label="15:CtIfImpl@if (INDEX_NAME.equalsIgnoreCase(vPath) && index) \{
    logOnFirstPass(((((\"Warning: selected \" + archiveType) + \" files include a \") + INDEX_NAME) + \" which will\") + \" be replaced by a newly generated one.\", MSG_WARN);
\} else \{
    if (index && (vPath.indexOf(\"/\") == (-1))) \{
        rootEntries.addElement(vPath);
    \}
    super.zipFile(is, zOut, vPath, lastModified, fromArchive, mode, extra);
\}" shape=ellipse]
86 [label="15:CtBlockImpl@
    if (INDEX_NAME.equalsIgnoreCase(vPath) && index) \{
        logOnFirstPass(((((\"Warning: selected \" + archiveType) + \" files include a \") + INDEX_NAME) + \" which will\") + \" be replaced by a newly generated one.\", MSG_WARN);
    \} else \{
        if (index && (vPath.indexOf(\"/\") == (-1))) \{
            rootEntries.addElement(vPath);
        \}
        super.zipFile(is, zOut, vPath, lastModified, fromArchive, mode, extra);
    \}
" shape=ellipse]
87 [label="11:CtIfImpl@if (MANIFEST_NAME.equalsIgnoreCase(vPath)) \{
    if (isFirstPass()) \{
        filesetManifest(fromArchive, is);
    \}
\} else if (INDEX_NAME.equalsIgnoreCase(vPath) && index) \{
    logOnFirstPass(((((\"Warning: selected \" + archiveType) + \" files include a \") + INDEX_NAME) + \" which will\") + \" be replaced by a newly generated one.\", MSG_WARN);
\} else \{
    if (index && (vPath.indexOf(\"/\") == (-1))) \{
        rootEntries.addElement(vPath);
    \}
    super.zipFile(is, zOut, vPath, lastModified, fromArchive, mode, extra);
\}" shape=ellipse]
88 [label="10:CtBlockImpl@\{
    if (MANIFEST_NAME.equalsIgnoreCase(vPath)) \{
        if (isFirstPass()) \{
            filesetManifest(fromArchive, is);
        \}
    \} else if (INDEX_NAME.equalsIgnoreCase(vPath) && index) \{
        logOnFirstPass(((((\"Warning: selected \" + archiveType) + \" files include a \") + INDEX_NAME) + \" which will\") + \" be replaced by a newly generated one.\", MSG_WARN);
    \} else \{
        if (index && (vPath.indexOf(\"/\") == (-1))) \{
            rootEntries.addElement(vPath);
        \}
        super.zipFile(is, zOut, vPath, lastModified, fromArchive, mode, extra);
    \}
\}" shape=ellipse]
89 [label="2:CtMethodImpl@protected void zipFile(InputStream is, ZipOutputStream zOut, String vPath, long lastModified, File fromArchive, int mode, ZipExtraField[] extra) throws IOException \{
    if (MANIFEST_NAME.equalsIgnoreCase(vPath)) \{
        if (isFirstPass()) \{
            filesetManifest(fromArchive, is);
        \}
    \} else if (INDEX_NAME.equalsIgnoreCase(vPath) && index) \{
        logOnFirstPass(((((\"Warning: selected \" + archiveType) + \" files include a \") + INDEX_NAME) + \" which will\") + \" be replaced by a newly generated one.\", MSG_WARN);
    \} else \{
        if (index && (vPath.indexOf(\"/\") == (-1))) \{
            rootEntries.addElement(vPath);
        \}
        super.zipFile(is, zOut, vPath, lastModified, fromArchive, mode, extra);
    \}
\}" shape=ellipse]
90 [label="16:Update@UPDATE" shape=ellipse]
91 [label="16:CtInvocationImpl@logWhenWriting(((((\"Warning: selected \" + archiveType) + \" files include a \") + INDEX_NAME) + \" which will\") + \" be replaced by a newly generated one.\", MSG_WARN)" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
6 -> 7 [label="AST"];
8 -> 9 [label="AST"];
10 -> 11 [label="AST"];
12 -> 13 [label="AST"];
14 -> 15 [label="AST"];
21 -> 18 [label="AST"];
21 -> 19 [label="AST"];
21 -> 17 [label="AST"];
21 -> 20 [label="AST"];
21 -> 32 [label="Control Dep"];
21 -> 31 [label="Control Dep"];
21 -> 24 [label="Control Dep"];
21 -> 22 [label="Control Dep"];
21 -> 86 [label="Control Dep"];
21 -> 85 [label="Control Dep"];
21 -> 39 [label="Control Dep"];
21 -> 37 [label="Control Dep"];
21 -> 33 [label="Control Dep"];
21 -> 35 [label="Control Dep"];
21 -> 36 [label="Control Dep"];
21 -> 38 [label="Control Dep"];
24 -> 23 [label="AST"];
24 -> 22 [label="AST"];
24 -> 30 [label="Control Dep"];
24 -> 29 [label="Control Dep"];
24 -> 25 [label="Control Dep"];
24 -> 27 [label="Control Dep"];
24 -> 28 [label="Control Dep"];
29 -> 26 [label="AST"];
29 -> 25 [label="AST"];
29 -> 27 [label="AST"];
29 -> 28 [label="AST"];
30 -> 29 [label="AST"];
31 -> 24 [label="AST"];
31 -> 30 [label="AST"];
32 -> 31 [label="AST"];
37 -> 34 [label="AST"];
37 -> 35 [label="AST"];
37 -> 33 [label="AST"];
37 -> 36 [label="AST"];
39 -> 37 [label="AST"];
39 -> 38 [label="AST"];
39 -> 55 [label="Control Dep"];
39 -> 54 [label="Control Dep"];
39 -> 40 [label="Control Dep"];
39 -> 52 [label="Control Dep"];
39 -> 50 [label="Control Dep"];
39 -> 48 [label="Control Dep"];
39 -> 46 [label="Control Dep"];
39 -> 44 [label="Control Dep"];
39 -> 42 [label="Control Dep"];
39 -> 43 [label="Control Dep"];
39 -> 45 [label="Control Dep"];
39 -> 47 [label="Control Dep"];
39 -> 49 [label="Control Dep"];
39 -> 51 [label="Control Dep"];
39 -> 53 [label="Control Dep"];
39 -> 84 [label="Control Dep"];
39 -> 72 [label="Control Dep"];
39 -> 65 [label="Control Dep"];
39 -> 56 [label="Control Dep"];
39 -> 64 [label="Control Dep"];
39 -> 61 [label="Control Dep"];
39 -> 57 [label="Control Dep"];
39 -> 59 [label="Control Dep"];
39 -> 60 [label="Control Dep"];
39 -> 63 [label="Control Dep"];
39 -> 62 [label="Control Dep"];
39 -> 83 [label="Control Dep"];
39 -> 73 [label="Control Dep"];
39 -> 75 [label="Control Dep"];
39 -> 76 [label="Control Dep"];
39 -> 77 [label="Control Dep"];
39 -> 78 [label="Control Dep"];
39 -> 79 [label="Control Dep"];
39 -> 80 [label="Control Dep"];
39 -> 81 [label="Control Dep"];
39 -> 82 [label="Control Dep"];
44 -> 42 [label="AST"];
44 -> 43 [label="AST"];
46 -> 44 [label="AST"];
46 -> 45 [label="AST"];
48 -> 46 [label="AST"];
48 -> 47 [label="AST"];
50 -> 48 [label="AST"];
50 -> 49 [label="AST"];
52 -> 50 [label="AST"];
52 -> 51 [label="AST"];
54 -> 41 [label="AST"];
54 -> 40 [label="AST"];
54 -> 52 [label="AST"];
54 -> 53 [label="AST"];
54 -> 90 [label="Action"];
55 -> 54 [label="AST"];
61 -> 58 [label="AST"];
61 -> 59 [label="AST"];
61 -> 57 [label="AST"];
61 -> 60 [label="AST"];
63 -> 62 [label="AST"];
64 -> 61 [label="AST"];
64 -> 63 [label="AST"];
65 -> 56 [label="AST"];
65 -> 64 [label="AST"];
65 -> 71 [label="Control Dep"];
65 -> 70 [label="Control Dep"];
65 -> 66 [label="Control Dep"];
65 -> 68 [label="Control Dep"];
65 -> 69 [label="Control Dep"];
70 -> 67 [label="AST"];
70 -> 68 [label="AST"];
70 -> 66 [label="AST"];
70 -> 69 [label="AST"];
71 -> 70 [label="AST"];
72 -> 65 [label="AST"];
72 -> 71 [label="AST"];
83 -> 74 [label="AST"];
83 -> 75 [label="AST"];
83 -> 73 [label="AST"];
83 -> 76 [label="AST"];
83 -> 77 [label="AST"];
83 -> 78 [label="AST"];
83 -> 79 [label="AST"];
83 -> 80 [label="AST"];
83 -> 81 [label="AST"];
83 -> 82 [label="AST"];
84 -> 72 [label="AST"];
84 -> 83 [label="AST"];
85 -> 39 [label="AST"];
85 -> 55 [label="AST"];
85 -> 84 [label="AST"];
86 -> 85 [label="AST"];
87 -> 21 [label="AST"];
87 -> 32 [label="AST"];
87 -> 86 [label="AST"];
88 -> 87 [label="AST"];
89 -> 1 [label="AST"];
89 -> 0 [label="AST"];
89 -> 2 [label="AST"];
89 -> 4 [label="AST"];
89 -> 6 [label="AST"];
89 -> 8 [label="AST"];
89 -> 10 [label="AST"];
89 -> 12 [label="AST"];
89 -> 14 [label="AST"];
89 -> 16 [label="AST"];
89 -> 88 [label="AST"];
90 -> 91 [label="Action"];
}