digraph "create#?,String" {
0 [label="2:CtTypeReferenceImpl@Object" shape=ellipse]
1 [label="2:CtVirtualElement@create" shape=ellipse]
2 [label="2:CtParameterImpl@final String name" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
4 [label="2:CtTypeReferenceImpl@TypeException" shape=ellipse]
5 [label="3:CtTypeReferenceImpl@String" shape=ellipse]
6 [label="3:CtExecutableReferenceImpl@getClassName(java.lang.String)" shape=ellipse]
7 [label="3:CtVirtualElement@getClassName" shape=ellipse]
8 [label="3:CtVariableReadImpl@name" shape=ellipse]
9 [label="3:CtInvocationImpl@getClassName(name)" shape=ellipse]
10 [label="3:CtVirtualElement@className" shape=ellipse]
11 [label="3:CtLocalVariableImpl@final String className = getClassName(name)" shape=ellipse]
12 [label="5:CtExecutableReferenceImpl@newInstance()" shape=ellipse]
13 [label="5:CtVirtualElement@newInstance" shape=ellipse]
14 [label="5:CtExecutableReferenceImpl@loadClass(java.lang.String)" shape=ellipse]
15 [label="5:CtVirtualElement@loadClass" shape=ellipse]
16 [label="5:CtExecutableReferenceImpl@getClassLoader()" shape=ellipse]
17 [label="5:CtVirtualElement@getClassLoader" shape=ellipse]
18 [label="5:CtInvocationImpl@getClassLoader()" shape=ellipse]
19 [label="5:CtVariableReadImpl@className" shape=ellipse]
20 [label="5:CtInvocationImpl@getClassLoader().loadClass(className)" shape=ellipse]
21 [label="5:CtInvocationImpl@getClassLoader().loadClass(className).newInstance()" shape=ellipse]
22 [label="5:CtReturnImpl@return getClassLoader().loadClass(className).newInstance()" shape=ellipse]
23 [label="4:CtBlockImpl@\{
    return getClassLoader().loadClass(className).newInstance();
\}" shape=ellipse]
24 [label="6:CtVirtualElement@e" shape=ellipse]
25 [label="6:CtTypeReferenceImpl@Exception" shape=ellipse]
26 [label="6:CtCatchVariableImpl@final Exception e" shape=ellipse]
27 [label="7:CtTypeReferenceImpl@TypeException" shape=ellipse]
28 [label="7:CtLiteralImpl@\"Unable to instantiate '\"" shape=ellipse]
29 [label="7:CtVariableReadImpl@name" shape=ellipse]
30 [label="7:CtBinaryOperatorImpl@(\"Unable to instantiate '\" + name)" shape=ellipse]
31 [label="7:CtLiteralImpl@\"'\"" shape=ellipse]
32 [label="7:CtBinaryOperatorImpl@(\"Unable to instantiate '\" + name) + \"'\"" shape=ellipse]
33 [label="7:CtVariableReadImpl@e" shape=ellipse]
34 [label="7:CtConstructorCallImpl@new TypeException((\"Unable to instantiate '\" + name) + \"'\", e)" shape=ellipse]
35 [label="7:CtThrowImpl@throw new TypeException((\"Unable to instantiate '\" + name) + \"'\", e)" shape=ellipse]
36 [label="6:CtBlockImpl@\{
    throw new TypeException((\"Unable to instantiate '\" + name) + \"'\", e);
\}" shape=ellipse]
37 [label="6:CtCatchImpl@ catch (final Exception e) \{
    throw new TypeException((\"Unable to instantiate '\" + name) + \"'\", e);
\}" shape=ellipse]
38 [label="4:CtTryImpl@try \{
    return getClassLoader().loadClass(className).newInstance();
\} catch (final Exception e) \{
    throw new TypeException((\"Unable to instantiate '\" + name) + \"'\", e);
\}" shape=ellipse]
39 [label="2:CtBlockImpl@\{
    final String className = getClassName(name);
    try \{
        return getClassLoader().loadClass(className).newInstance();
    \} catch (final Exception e) \{
        throw new TypeException((\"Unable to instantiate '\" + name) + \"'\", e);
    \}
\}" shape=ellipse]
40 [label="2:CtMethodImpl@public Object create(final String name) throws TypeException \{
    final String className = getClassName(name);
    try \{
        return getClassLoader().loadClass(className).newInstance();
    \} catch (final Exception e) \{
        throw new TypeException((\"Unable to instantiate '\" + name) + \"'\", e);
    \}
\}" shape=ellipse]
41 [label="7:Update@UPDATE" shape=ellipse]
42 [label="8:CtVariableReadImpl@message" shape=ellipse]
43 [label="7:Delete@DELETE" shape=ellipse]
44 [label="7:Insert@INSERT" shape=ellipse]
45 [label="7:CtLocalVariableImpl@final String message = REZ.getString(\"no-instantiate.error\", name)" shape=ellipse]
46 [label="7:Move@MOVE" shape=ellipse]
2 -> 3 [label="AST"];
8 -> 10 [label="Data Dep"];
9 -> 7 [label="AST"];
9 -> 6 [label="AST"];
9 -> 8 [label="AST"];
10 -> 19 [label="Define-Use"];
11 -> 10 [label="AST"];
11 -> 5 [label="AST"];
11 -> 9 [label="AST"];
18 -> 17 [label="AST"];
18 -> 16 [label="AST"];
20 -> 15 [label="AST"];
20 -> 18 [label="AST"];
20 -> 14 [label="AST"];
20 -> 19 [label="AST"];
21 -> 13 [label="AST"];
21 -> 20 [label="AST"];
21 -> 12 [label="AST"];
22 -> 21 [label="AST"];
23 -> 22 [label="AST"];
24 -> 33 [label="Define-Use"];
26 -> 24 [label="AST"];
26 -> 25 [label="AST"];
26 -> 36 [label="Control Dep"];
26 -> 35 [label="Control Dep"];
26 -> 34 [label="Control Dep"];
26 -> 32 [label="Control Dep"];
26 -> 30 [label="Control Dep"];
26 -> 28 [label="Control Dep"];
26 -> 29 [label="Control Dep"];
26 -> 31 [label="Control Dep"];
26 -> 33 [label="Control Dep"];
29 -> 41 [label="Action"];
29 -> 46 [label="Action"];
30 -> 28 [label="AST"];
30 -> 29 [label="AST"];
32 -> 30 [label="AST"];
32 -> 31 [label="AST"];
32 -> 43 [label="Action"];
34 -> 32 [label="AST"];
34 -> 33 [label="AST"];
35 -> 34 [label="AST"];
36 -> 35 [label="AST"];
37 -> 26 [label="AST"];
37 -> 36 [label="AST"];
37 -> 44 [label="Action"];
38 -> 23 [label="AST"];
38 -> 37 [label="AST"];
39 -> 11 [label="AST"];
39 -> 38 [label="AST"];
40 -> 1 [label="AST"];
40 -> 0 [label="AST"];
40 -> 2 [label="AST"];
40 -> 4 [label="AST"];
40 -> 39 [label="AST"];
41 -> 42 [label="Action"];
44 -> 45 [label="Action"];
46 -> 34 [label="Action"];
}