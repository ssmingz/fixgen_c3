digraph "Pattern" {
0 [label="testFilterReaderHeadLinesSkip#?#8:UPDATE
testFilterReaderTailLinesSkip#?#8:UPDATE" shape=ellipse]
1 [label="testFilterReaderHeadLinesSkip#?#8:assertTrue(\"testFilterReaderHeadLinesSkip: Result not like expected\", FILE_UTILS.contentEquals(expected, result))
testFilterReaderTailLinesSkip#?#8:assertTrue(\"testFilterReaderTailLinesSkip: Result not like expected\", FILE_UTILS.contentEquals(expected, result))" shape=ellipse]
2 [label="testFilterReaderHeadLinesSkip#?#2:\{
    executeTarget(\"testFilterReaderHeadLinesSkip\");
    File expected = FILE_UTILS.resolveFile(getProject().getBaseDir(), \"expected/head-tail.headLinesSkip.test\");
    File result = new File(getProject().getProperty(\"output\") + \"/head-tail.filterReaderHeadLinesSkip.test\");
    assertTrue(\"testFilterReaderHeadLinesSkip: Result not like expected\", FILE_UTILS.contentEquals(expected, result));
\}
testFilterReaderTailLinesSkip#?#2:\{
    executeTarget(\"testFilterReaderTailLinesSkip\");
    File expected = FILE_UTILS.resolveFile(getProject().getBaseDir(), \"expected/head-tail.tailLinesSkip.test\");
    File result = new File(getProject().getProperty(\"output\") + \"/head-tail.filterReaderTailLinesSkip.test\");
    assertTrue(\"testFilterReaderTailLinesSkip: Result not like expected\", FILE_UTILS.contentEquals(expected, result));
\}" shape=ellipse]
3 [label="testFilterReaderHeadLinesSkip#?#2:public void testFilterReaderHeadLinesSkip() throws IOException \{
    executeTarget(\"testFilterReaderHeadLinesSkip\");
    File expected = FILE_UTILS.resolveFile(getProject().getBaseDir(), \"expected/head-tail.headLinesSkip.test\");
    File result = new File(getProject().getProperty(\"output\") + \"/head-tail.filterReaderHeadLinesSkip.test\");
    assertTrue(\"testFilterReaderHeadLinesSkip: Result not like expected\", FILE_UTILS.contentEquals(expected, result));
\}
testFilterReaderTailLinesSkip#?#2:public void testFilterReaderTailLinesSkip() throws IOException \{
    executeTarget(\"testFilterReaderTailLinesSkip\");
    File expected = FILE_UTILS.resolveFile(getProject().getBaseDir(), \"expected/head-tail.tailLinesSkip.test\");
    File result = new File(getProject().getProperty(\"output\") + \"/head-tail.filterReaderTailLinesSkip.test\");
    assertTrue(\"testFilterReaderTailLinesSkip: Result not like expected\", FILE_UTILS.contentEquals(expected, result));
\}" shape=ellipse]
4 [label="testFilterReaderHeadLinesSkip#?#3:executeTarget(\"testFilterReaderHeadLinesSkip\")
testFilterReaderTailLinesSkip#?#3:executeTarget(\"testFilterReaderTailLinesSkip\")" shape=ellipse]
5 [label="testFilterReaderHeadLinesSkip#?#4:File expected = FILE_UTILS.resolveFile(getProject().getBaseDir(), \"expected/head-tail.headLinesSkip.test\")
testFilterReaderTailLinesSkip#?#4:File expected = FILE_UTILS.resolveFile(getProject().getBaseDir(), \"expected/head-tail.tailLinesSkip.test\")" shape=ellipse]
6 [label="testFilterReaderHeadLinesSkip#?#6:File result = new File(getProject().getProperty(\"output\") + \"/head-tail.filterReaderHeadLinesSkip.test\")
testFilterReaderTailLinesSkip#?#6:File result = new File(getProject().getProperty(\"output\") + \"/head-tail.filterReaderTailLinesSkip.test\")" shape=ellipse]
7 [label="testFilterReaderHeadLinesSkip#?#8:assertTrue
testFilterReaderTailLinesSkip#?#8:assertTrue" shape=ellipse]
8 [label="testFilterReaderHeadLinesSkip#?#-1:
testFilterReaderTailLinesSkip#?#-1:" shape=ellipse]
9 [label="testFilterReaderHeadLinesSkip#?#-1:PlaceHold
testFilterReaderTailLinesSkip#?#-1:PlaceHold" shape=ellipse]
10 [label="testFilterReaderHeadLinesSkip#?#-1:PlaceHold
testFilterReaderTailLinesSkip#?#-1:PlaceHold" shape=ellipse]
11 [label="testFilterReaderHeadLinesSkip#?#8:assertTrue(java.lang.String,<unknown>)
testFilterReaderTailLinesSkip#?#8:assertTrue(java.lang.String,<unknown>)" shape=ellipse]
12 [label="testFilterReaderHeadLinesSkip#?#-1:String
testFilterReaderTailLinesSkip#?#-1:String" shape=ellipse]
13 [label="testFilterReaderHeadLinesSkip#?#-1:null
testFilterReaderTailLinesSkip#?#-1:null" shape=ellipse]
14 [label="testFilterReaderHeadLinesSkip#?#9:\"testFilterReaderHeadLinesSkip: Result not like expected\"
testFilterReaderTailLinesSkip#?#9:\"testFilterReaderTailLinesSkip: Result not like expected\"" shape=ellipse]
15 [label="testFilterReaderHeadLinesSkip#?#-1:String
testFilterReaderTailLinesSkip#?#-1:String" shape=ellipse]
16 [label="testFilterReaderHeadLinesSkip#?#10:FILE_UTILS.contentEquals(expected, result)
testFilterReaderTailLinesSkip#?#10:FILE_UTILS.contentEquals(expected, result)" shape=ellipse]
17 [label="testFilterReaderHeadLinesSkip#?#10:contentEquals
testFilterReaderTailLinesSkip#?#10:contentEquals" shape=ellipse]
18 [label="testFilterReaderHeadLinesSkip#?#10:FILE_UTILS
testFilterReaderTailLinesSkip#?#10:FILE_UTILS" shape=ellipse]
19 [label="testFilterReaderHeadLinesSkip#?#10:contentEquals(File,File)
testFilterReaderTailLinesSkip#?#10:contentEquals(File,File)" shape=ellipse]
20 [label="testFilterReaderHeadLinesSkip#?#10:expected
testFilterReaderTailLinesSkip#?#10:expected" shape=ellipse]
21 [label="testFilterReaderHeadLinesSkip#?#10:result
testFilterReaderTailLinesSkip#?#10:result" shape=ellipse]
22 [label="testFilterReaderHeadLinesSkip#?#10:assertEquals(\"testFilterReaderHeadLinesSkip: Result not like expected\", FileUtilities.getFileContents(expected), FileUtilities.getFileContents(result))
testFilterReaderTailLinesSkip#?#10:assertEquals(\"testFilterReaderTailLinesSkip: Result not like expected\", FileUtilities.getFileContents(expected), FileUtilities.getFileContents(result))" shape=ellipse]
0 -> 22 [label="Action:2"];
1 -> 0 [label="Action:2"];
1 -> 7 [label="AST:2"];
1 -> 8 [label="AST:2"];
1 -> 11 [label="AST:2"];
1 -> 14 [label="AST:2"];
1 -> 16 [label="AST:2"];
2 -> 1 [label="AST:2"];
2 -> 4 [label="AST:2"];
2 -> 5 [label="AST:2"];
2 -> 6 [label="AST:2"];
3 -> 2 [label="AST:2"];
8 -> 9 [label="AST:2"];
8 -> 10 [label="AST:2"];
11 -> 12 [label="AST:2"];
11 -> 13 [label="AST:2"];
14 -> 15 [label="AST:2"];
16 -> 17 [label="AST:2"];
16 -> 18 [label="AST:2"];
16 -> 19 [label="AST:2"];
16 -> 20 [label="AST:2"];
16 -> 21 [label="AST:2"];
}