digraph "process#?,File,File,File" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@process" shape=ellipse]
2 [label="2:CtParameterImpl@File inFile" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@File" shape=ellipse]
4 [label="2:CtParameterImpl@File outFile" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@File" shape=ellipse]
6 [label="2:CtParameterImpl@File stylesheet" shape=ellipse]
7 [label="2:CtTypeReferenceImpl@File" shape=ellipse]
8 [label="2:CtTypeReferenceImpl@BuildException" shape=ellipse]
9 [label="4:CtTypeReferenceImpl@long" shape=ellipse]
10 [label="4:CtExecutableReferenceImpl@lastModified()" shape=ellipse]
11 [label="4:CtVirtualElement@lastModified" shape=ellipse]
12 [label="4:CtVariableReadImpl@stylesheet" shape=ellipse]
13 [label="4:CtInvocationImpl@stylesheet.lastModified()" shape=ellipse]
14 [label="4:CtVirtualElement@styleSheetLastModified" shape=ellipse]
15 [label="4:CtLocalVariableImpl@long styleSheetLastModified = stylesheet.lastModified()" shape=ellipse]
16 [label="5:CtExecutableReferenceImpl@log(<unknown>,<unknown>)" shape=ellipse]
17 [label="5:CtVirtualElement@log" shape=ellipse]
18 [label="5:CtLiteralImpl@\"In file \"" shape=ellipse]
19 [label="5:CtVariableReadImpl@inFile" shape=ellipse]
20 [label="5:CtBinaryOperatorImpl@(\"In file \" + inFile)" shape=ellipse]
21 [label="5:CtLiteralImpl@\" time: \"" shape=ellipse]
22 [label="5:CtBinaryOperatorImpl@((\"In file \" + inFile) + \" time: \")" shape=ellipse]
23 [label="5:CtExecutableReferenceImpl@lastModified()" shape=ellipse]
24 [label="5:CtVirtualElement@lastModified" shape=ellipse]
25 [label="5:CtVariableReadImpl@inFile" shape=ellipse]
26 [label="5:CtInvocationImpl@inFile.lastModified()" shape=ellipse]
27 [label="5:CtBinaryOperatorImpl@((\"In file \" + inFile) + \" time: \") + inFile.lastModified()" shape=ellipse]
28 [label="5:CtTypeAccessImpl@MSG_DEBUG" shape=ellipse]
29 [label="5:CtInvocationImpl@log(((\"In file \" + inFile) + \" time: \") + inFile.lastModified(), MSG_DEBUG)" shape=ellipse]
30 [label="6:CtExecutableReferenceImpl@log(<unknown>,<unknown>)" shape=ellipse]
31 [label="6:CtVirtualElement@log" shape=ellipse]
32 [label="6:CtLiteralImpl@\"Out file \"" shape=ellipse]
33 [label="6:CtVariableReadImpl@outFile" shape=ellipse]
34 [label="6:CtBinaryOperatorImpl@(\"Out file \" + outFile)" shape=ellipse]
35 [label="6:CtLiteralImpl@\" time: \"" shape=ellipse]
36 [label="6:CtBinaryOperatorImpl@((\"Out file \" + outFile) + \" time: \")" shape=ellipse]
37 [label="6:CtExecutableReferenceImpl@lastModified()" shape=ellipse]
38 [label="6:CtVirtualElement@lastModified" shape=ellipse]
39 [label="6:CtVariableReadImpl@outFile" shape=ellipse]
40 [label="6:CtInvocationImpl@outFile.lastModified()" shape=ellipse]
41 [label="6:CtBinaryOperatorImpl@((\"Out file \" + outFile) + \" time: \") + outFile.lastModified()" shape=ellipse]
42 [label="6:CtTypeAccessImpl@MSG_DEBUG" shape=ellipse]
43 [label="6:CtInvocationImpl@log(((\"Out file \" + outFile) + \" time: \") + outFile.lastModified(), MSG_DEBUG)" shape=ellipse]
44 [label="7:CtExecutableReferenceImpl@log(<unknown>,<unknown>)" shape=ellipse]
45 [label="7:CtVirtualElement@log" shape=ellipse]
46 [label="7:CtLiteralImpl@\"Style file \"" shape=ellipse]
47 [label="7:CtFieldReadImpl@xslFile" shape=ellipse]
48 [label="7:CtBinaryOperatorImpl@(\"Style file \" + xslFile)" shape=ellipse]
49 [label="7:CtLiteralImpl@\" time: \"" shape=ellipse]
50 [label="7:CtBinaryOperatorImpl@((\"Style file \" + xslFile) + \" time: \")" shape=ellipse]
51 [label="7:CtVariableReadImpl@styleSheetLastModified" shape=ellipse]
52 [label="7:CtBinaryOperatorImpl@((\"Style file \" + xslFile) + \" time: \") + styleSheetLastModified" shape=ellipse]
53 [label="7:CtTypeAccessImpl@MSG_DEBUG" shape=ellipse]
54 [label="7:CtInvocationImpl@log(((\"Style file \" + xslFile) + \" time: \") + styleSheetLastModified, MSG_DEBUG)" shape=ellipse]
55 [label="8:CtFieldReadImpl@force" shape=ellipse]
56 [label="8:CtExecutableReferenceImpl@lastModified()" shape=ellipse]
57 [label="8:CtVirtualElement@lastModified" shape=ellipse]
58 [label="8:CtVariableReadImpl@inFile" shape=ellipse]
59 [label="8:CtInvocationImpl@inFile.lastModified()" shape=ellipse]
60 [label="8:CtExecutableReferenceImpl@lastModified()" shape=ellipse]
61 [label="8:CtVirtualElement@lastModified" shape=ellipse]
62 [label="8:CtVariableReadImpl@outFile" shape=ellipse]
63 [label="8:CtInvocationImpl@outFile.lastModified()" shape=ellipse]
64 [label="8:CtBinaryOperatorImpl@(inFile.lastModified() > outFile.lastModified())" shape=ellipse]
65 [label="8:CtBinaryOperatorImpl@(force || (inFile.lastModified() > outFile.lastModified()))" shape=ellipse]
66 [label="9:CtVariableReadImpl@styleSheetLastModified" shape=ellipse]
67 [label="9:CtExecutableReferenceImpl@lastModified()" shape=ellipse]
68 [label="9:CtVirtualElement@lastModified" shape=ellipse]
69 [label="9:CtVariableReadImpl@outFile" shape=ellipse]
70 [label="9:CtInvocationImpl@outFile.lastModified()" shape=ellipse]
71 [label="9:CtBinaryOperatorImpl@(styleSheetLastModified > outFile.lastModified())" shape=ellipse]
72 [label="8:CtBinaryOperatorImpl@(force || (inFile.lastModified() > outFile.lastModified())) || (styleSheetLastModified > outFile.lastModified())" shape=ellipse]
73 [label="10:CtExecutableReferenceImpl@ensureDirectoryFor(<unknown>)" shape=ellipse]
74 [label="10:CtVirtualElement@ensureDirectoryFor" shape=ellipse]
75 [label="10:CtVariableReadImpl@outFile" shape=ellipse]
76 [label="10:CtInvocationImpl@ensureDirectoryFor(outFile)" shape=ellipse]
77 [label="11:CtExecutableReferenceImpl@log(<unknown>,<unknown>)" shape=ellipse]
78 [label="11:CtVirtualElement@log" shape=ellipse]
79 [label="11:CtLiteralImpl@\"Processing \"" shape=ellipse]
80 [label="11:CtVariableReadImpl@inFile" shape=ellipse]
81 [label="11:CtBinaryOperatorImpl@(\"Processing \" + inFile)" shape=ellipse]
82 [label="11:CtLiteralImpl@\" to \"" shape=ellipse]
83 [label="11:CtBinaryOperatorImpl@((\"Processing \" + inFile) + \" to \")" shape=ellipse]
84 [label="11:CtVariableReadImpl@outFile" shape=ellipse]
85 [label="11:CtBinaryOperatorImpl@((\"Processing \" + inFile) + \" to \") + outFile" shape=ellipse]
86 [label="11:CtTypeAccessImpl@MSG_INFO" shape=ellipse]
87 [label="11:CtInvocationImpl@log(((\"Processing \" + inFile) + \" to \") + outFile, MSG_INFO)" shape=ellipse]
88 [label="12:CtExecutableReferenceImpl@configureLiaison(<unknown>)" shape=ellipse]
89 [label="12:CtVirtualElement@configureLiaison" shape=ellipse]
90 [label="12:CtVariableReadImpl@stylesheet" shape=ellipse]
91 [label="12:CtInvocationImpl@configureLiaison(stylesheet)" shape=ellipse]
92 [label="13:CtExecutableReferenceImpl@transform(File,File)" shape=ellipse]
93 [label="13:CtVirtualElement@transform" shape=ellipse]
94 [label="13:CtFieldReadImpl@liaison" shape=ellipse]
95 [label="13:CtVariableReadImpl@inFile" shape=ellipse]
96 [label="13:CtVariableReadImpl@outFile" shape=ellipse]
97 [label="13:CtInvocationImpl@liaison.transform(inFile, outFile)" shape=ellipse]
98 [label="9:CtBlockImpl@\{
    ensureDirectoryFor(outFile);
    log(((\"Processing \" + inFile) + \" to \") + outFile, MSG_INFO);
    configureLiaison(stylesheet);
    liaison.transform(inFile, outFile);
\}" shape=ellipse]
99 [label="8:CtIfImpl@if ((force || (inFile.lastModified() > outFile.lastModified())) || (styleSheetLastModified > outFile.lastModified())) \{
    ensureDirectoryFor(outFile);
    log(((\"Processing \" + inFile) + \" to \") + outFile, MSG_INFO);
    configureLiaison(stylesheet);
    liaison.transform(inFile, outFile);
\}" shape=ellipse]
100 [label="3:CtBlockImpl@\{
    long styleSheetLastModified = stylesheet.lastModified();
    log(((\"In file \" + inFile) + \" time: \") + inFile.lastModified(), MSG_DEBUG);
    log(((\"Out file \" + outFile) + \" time: \") + outFile.lastModified(), MSG_DEBUG);
    log(((\"Style file \" + xslFile) + \" time: \") + styleSheetLastModified, MSG_DEBUG);
    if ((force || (inFile.lastModified() > outFile.lastModified())) || (styleSheetLastModified > outFile.lastModified())) \{
        ensureDirectoryFor(outFile);
        log(((\"Processing \" + inFile) + \" to \") + outFile, MSG_INFO);
        configureLiaison(stylesheet);
        liaison.transform(inFile, outFile);
    \}
\}" shape=ellipse]
101 [label="15:CtVirtualElement@ex" shape=ellipse]
102 [label="15:CtTypeReferenceImpl@Exception" shape=ellipse]
103 [label="15:CtCatchVariableImpl@Exception ex" shape=ellipse]
104 [label="16:CtExecutableReferenceImpl@log(<unknown>,<unknown>)" shape=ellipse]
105 [label="16:CtVirtualElement@log" shape=ellipse]
106 [label="16:CtLiteralImpl@\"Failed to process \"" shape=ellipse]
107 [label="16:CtVariableReadImpl@inFile" shape=ellipse]
108 [label="16:CtBinaryOperatorImpl@\"Failed to process \" + inFile" shape=ellipse]
109 [label="16:CtTypeAccessImpl@MSG_INFO" shape=ellipse]
110 [label="16:CtInvocationImpl@log(\"Failed to process \" + inFile, MSG_INFO)" shape=ellipse]
111 [label="17:CtVariableReadImpl@outFile" shape=ellipse]
112 [label="17:CtLiteralImpl@null" shape=ellipse]
113 [label="17:CtBinaryOperatorImpl@outFile != null" shape=ellipse]
114 [label="18:CtExecutableReferenceImpl@delete()" shape=ellipse]
115 [label="18:CtVirtualElement@delete" shape=ellipse]
116 [label="18:CtVariableReadImpl@outFile" shape=ellipse]
117 [label="18:CtInvocationImpl@outFile.delete()" shape=ellipse]
118 [label="17:CtBlockImpl@\{
    outFile.delete();
\}" shape=ellipse]
119 [label="17:CtIfImpl@if (outFile != null) \{
    outFile.delete();
\}" shape=ellipse]
120 [label="20:CtTypeReferenceImpl@BuildException" shape=ellipse]
121 [label="20:CtVariableReadImpl@ex" shape=ellipse]
122 [label="20:CtConstructorCallImpl@new BuildException(ex)" shape=ellipse]
123 [label="20:CtThrowImpl@throw new BuildException(ex)" shape=ellipse]
124 [label="15:CtBlockImpl@\{
    log(\"Failed to process \" + inFile, MSG_INFO);
    if (outFile != null) \{
        outFile.delete();
    \}
    throw new BuildException(ex);
\}" shape=ellipse]
125 [label="15:CtCatchImpl@ catch (Exception ex) \{
    log(\"Failed to process \" + inFile, MSG_INFO);
    if (outFile != null) \{
        outFile.delete();
    \}
    throw new BuildException(ex);
\}" shape=ellipse]
126 [label="3:CtTryImpl@try \{
    long styleSheetLastModified = stylesheet.lastModified();
    log(((\"In file \" + inFile) + \" time: \") + inFile.lastModified(), MSG_DEBUG);
    log(((\"Out file \" + outFile) + \" time: \") + outFile.lastModified(), MSG_DEBUG);
    log(((\"Style file \" + xslFile) + \" time: \") + styleSheetLastModified, MSG_DEBUG);
    if ((force || (inFile.lastModified() > outFile.lastModified())) || (styleSheetLastModified > outFile.lastModified())) \{
        ensureDirectoryFor(outFile);
        log(((\"Processing \" + inFile) + \" to \") + outFile, MSG_INFO);
        configureLiaison(stylesheet);
        liaison.transform(inFile, outFile);
    \}
\} catch (Exception ex) \{
    log(\"Failed to process \" + inFile, MSG_INFO);
    if (outFile != null) \{
        outFile.delete();
    \}
    throw new BuildException(ex);
\}" shape=ellipse]
127 [label="2:CtBlockImpl@\{
    try \{
        long styleSheetLastModified = stylesheet.lastModified();
        log(((\"In file \" + inFile) + \" time: \") + inFile.lastModified(), MSG_DEBUG);
        log(((\"Out file \" + outFile) + \" time: \") + outFile.lastModified(), MSG_DEBUG);
        log(((\"Style file \" + xslFile) + \" time: \") + styleSheetLastModified, MSG_DEBUG);
        if ((force || (inFile.lastModified() > outFile.lastModified())) || (styleSheetLastModified > outFile.lastModified())) \{
            ensureDirectoryFor(outFile);
            log(((\"Processing \" + inFile) + \" to \") + outFile, MSG_INFO);
            configureLiaison(stylesheet);
            liaison.transform(inFile, outFile);
        \}
    \} catch (Exception ex) \{
        log(\"Failed to process \" + inFile, MSG_INFO);
        if (outFile != null) \{
            outFile.delete();
        \}
        throw new BuildException(ex);
    \}
\}" shape=ellipse]
128 [label="2:CtMethodImpl@private void process(File inFile, File outFile, File stylesheet) throws BuildException \{
    try \{
        long styleSheetLastModified = stylesheet.lastModified();
        log(((\"In file \" + inFile) + \" time: \") + inFile.lastModified(), MSG_DEBUG);
        log(((\"Out file \" + outFile) + \" time: \") + outFile.lastModified(), MSG_DEBUG);
        log(((\"Style file \" + xslFile) + \" time: \") + styleSheetLastModified, MSG_DEBUG);
        if ((force || (inFile.lastModified() > outFile.lastModified())) || (styleSheetLastModified > outFile.lastModified())) \{
            ensureDirectoryFor(outFile);
            log(((\"Processing \" + inFile) + \" to \") + outFile, MSG_INFO);
            configureLiaison(stylesheet);
            liaison.transform(inFile, outFile);
        \}
    \} catch (Exception ex) \{
        log(\"Failed to process \" + inFile, MSG_INFO);
        if (outFile != null) \{
            outFile.delete();
        \}
        throw new BuildException(ex);
    \}
\}" shape=ellipse]
129 [label="20:Update@UPDATE" shape=ellipse]
130 [label="20:CtConstructorCallImpl@new BuildException(\"Error\", ex)" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
6 -> 7 [label="AST"];
12 -> 14 [label="Data Dep"];
13 -> 11 [label="AST"];
13 -> 12 [label="AST"];
13 -> 10 [label="AST"];
14 -> 51 [label="Define-Use"];
14 -> 66 [label="Define-Use"];
15 -> 14 [label="AST"];
15 -> 9 [label="AST"];
15 -> 13 [label="AST"];
20 -> 18 [label="AST"];
20 -> 19 [label="AST"];
22 -> 20 [label="AST"];
22 -> 21 [label="AST"];
26 -> 24 [label="AST"];
26 -> 25 [label="AST"];
26 -> 23 [label="AST"];
27 -> 22 [label="AST"];
27 -> 26 [label="AST"];
29 -> 17 [label="AST"];
29 -> 16 [label="AST"];
29 -> 27 [label="AST"];
29 -> 28 [label="AST"];
34 -> 32 [label="AST"];
34 -> 33 [label="AST"];
36 -> 34 [label="AST"];
36 -> 35 [label="AST"];
40 -> 38 [label="AST"];
40 -> 39 [label="AST"];
40 -> 37 [label="AST"];
41 -> 36 [label="AST"];
41 -> 40 [label="AST"];
43 -> 31 [label="AST"];
43 -> 30 [label="AST"];
43 -> 41 [label="AST"];
43 -> 42 [label="AST"];
48 -> 46 [label="AST"];
48 -> 47 [label="AST"];
50 -> 48 [label="AST"];
50 -> 49 [label="AST"];
52 -> 50 [label="AST"];
52 -> 51 [label="AST"];
54 -> 45 [label="AST"];
54 -> 44 [label="AST"];
54 -> 52 [label="AST"];
54 -> 53 [label="AST"];
59 -> 57 [label="AST"];
59 -> 58 [label="AST"];
59 -> 56 [label="AST"];
63 -> 61 [label="AST"];
63 -> 62 [label="AST"];
63 -> 60 [label="AST"];
64 -> 59 [label="AST"];
64 -> 63 [label="AST"];
65 -> 55 [label="AST"];
65 -> 64 [label="AST"];
70 -> 68 [label="AST"];
70 -> 69 [label="AST"];
70 -> 67 [label="AST"];
71 -> 66 [label="AST"];
71 -> 70 [label="AST"];
72 -> 65 [label="AST"];
72 -> 71 [label="AST"];
72 -> 98 [label="Control Dep"];
72 -> 76 [label="Control Dep"];
72 -> 73 [label="Control Dep"];
72 -> 75 [label="Control Dep"];
72 -> 87 [label="Control Dep"];
72 -> 77 [label="Control Dep"];
72 -> 85 [label="Control Dep"];
72 -> 83 [label="Control Dep"];
72 -> 81 [label="Control Dep"];
72 -> 79 [label="Control Dep"];
72 -> 80 [label="Control Dep"];
72 -> 82 [label="Control Dep"];
72 -> 84 [label="Control Dep"];
72 -> 86 [label="Control Dep"];
72 -> 91 [label="Control Dep"];
72 -> 88 [label="Control Dep"];
72 -> 90 [label="Control Dep"];
72 -> 97 [label="Control Dep"];
72 -> 92 [label="Control Dep"];
72 -> 94 [label="Control Dep"];
72 -> 95 [label="Control Dep"];
72 -> 96 [label="Control Dep"];
76 -> 74 [label="AST"];
76 -> 73 [label="AST"];
76 -> 75 [label="AST"];
81 -> 79 [label="AST"];
81 -> 80 [label="AST"];
83 -> 81 [label="AST"];
83 -> 82 [label="AST"];
85 -> 83 [label="AST"];
85 -> 84 [label="AST"];
87 -> 78 [label="AST"];
87 -> 77 [label="AST"];
87 -> 85 [label="AST"];
87 -> 86 [label="AST"];
91 -> 89 [label="AST"];
91 -> 88 [label="AST"];
91 -> 90 [label="AST"];
97 -> 93 [label="AST"];
97 -> 94 [label="AST"];
97 -> 92 [label="AST"];
97 -> 95 [label="AST"];
97 -> 96 [label="AST"];
98 -> 76 [label="AST"];
98 -> 87 [label="AST"];
98 -> 91 [label="AST"];
98 -> 97 [label="AST"];
99 -> 72 [label="AST"];
99 -> 98 [label="AST"];
100 -> 15 [label="AST"];
100 -> 29 [label="AST"];
100 -> 43 [label="AST"];
100 -> 54 [label="AST"];
100 -> 99 [label="AST"];
101 -> 121 [label="Define-Use"];
103 -> 101 [label="AST"];
103 -> 102 [label="AST"];
103 -> 124 [label="Control Dep"];
103 -> 110 [label="Control Dep"];
103 -> 104 [label="Control Dep"];
103 -> 108 [label="Control Dep"];
103 -> 106 [label="Control Dep"];
103 -> 107 [label="Control Dep"];
103 -> 109 [label="Control Dep"];
103 -> 119 [label="Control Dep"];
103 -> 113 [label="Control Dep"];
103 -> 111 [label="Control Dep"];
103 -> 112 [label="Control Dep"];
103 -> 123 [label="Control Dep"];
103 -> 122 [label="Control Dep"];
103 -> 121 [label="Control Dep"];
108 -> 106 [label="AST"];
108 -> 107 [label="AST"];
110 -> 105 [label="AST"];
110 -> 104 [label="AST"];
110 -> 108 [label="AST"];
110 -> 109 [label="AST"];
113 -> 111 [label="AST"];
113 -> 112 [label="AST"];
113 -> 118 [label="Control Dep"];
113 -> 117 [label="Control Dep"];
113 -> 114 [label="Control Dep"];
113 -> 116 [label="Control Dep"];
117 -> 115 [label="AST"];
117 -> 116 [label="AST"];
117 -> 114 [label="AST"];
118 -> 117 [label="AST"];
119 -> 113 [label="AST"];
119 -> 118 [label="AST"];
122 -> 121 [label="AST"];
122 -> 129 [label="Action"];
123 -> 122 [label="AST"];
124 -> 110 [label="AST"];
124 -> 119 [label="AST"];
124 -> 123 [label="AST"];
125 -> 103 [label="AST"];
125 -> 124 [label="AST"];
126 -> 100 [label="AST"];
126 -> 125 [label="AST"];
127 -> 126 [label="AST"];
128 -> 1 [label="AST"];
128 -> 0 [label="AST"];
128 -> 2 [label="AST"];
128 -> 4 [label="AST"];
128 -> 6 [label="AST"];
128 -> 8 [label="AST"];
128 -> 127 [label="AST"];
129 -> 130 [label="Action"];
}