digraph "Pattern" {
0 [label="testEchoToBadFileNoFail#?#3:UPDATE
test2#?#3:UPDATE" shape=ellipse]
1 [label="testEchoToBadFileNoFail#?#3:expectLog(\"testEchoToBadFileNoFail\", \"destfile is a directory!\")
test2#?#3:expectLog(\"test2\", \"testprop1=aa, testprop3=xxyy, testprop4=aazz\")" shape=ellipse]
2 [label="testEchoToBadFileNoFail#?#2:\{
    expectLog(\"testEchoToBadFileNoFail\", \"destfile is a directory!\");
\}
test2#?#2:\{
    expectLog(\"test2\", \"testprop1=aa, testprop3=xxyy, testprop4=aazz\");
\}" shape=ellipse]
3 [label="testEchoToBadFileNoFail#?#2:public void testEchoToBadFileNoFail() \{
    expectLog(\"testEchoToBadFileNoFail\", \"destfile is a directory!\");
\}
test2#?#2:public void test2() \{
    expectLog(\"test2\", \"testprop1=aa, testprop3=xxyy, testprop4=aazz\");
\}" shape=ellipse]
4 [label="testEchoToBadFileNoFail#?#3:expectLog
test2#?#3:expectLog" shape=ellipse]
5 [label="testEchoToBadFileNoFail#?#-1:
test2#?#-1:" shape=ellipse]
6 [label="testEchoToBadFileNoFail#?#-1:PlaceHold
test2#?#-1:PlaceHold" shape=ellipse]
7 [label="testEchoToBadFileNoFail#?#-1:PlaceHold
test2#?#-1:PlaceHold" shape=ellipse]
8 [label="testEchoToBadFileNoFail#?#3:expectLog(java.lang.String,java.lang.String)
test2#?#3:expectLog(java.lang.String,java.lang.String)" shape=ellipse]
9 [label="testEchoToBadFileNoFail#?#-1:String
test2#?#-1:String" shape=ellipse]
10 [label="testEchoToBadFileNoFail#?#-1:String
test2#?#-1:String" shape=ellipse]
11 [label="testEchoToBadFileNoFail#?#3:\"testEchoToBadFileNoFail\"
test2#?#3:\"test2\"" shape=ellipse]
12 [label="testEchoToBadFileNoFail#?#-1:String
test2#?#-1:String" shape=ellipse]
13 [label="testEchoToBadFileNoFail#?#3:\"destfile is a directory!\"
test2#?#3:\"testprop1=aa, testprop3=xxyy, testprop4=aazz\"" shape=ellipse]
14 [label="testEchoToBadFileNoFail#?#-1:String
test2#?#-1:String" shape=ellipse]
15 [label="testEchoToBadFileNoFail#?#5:assertContains(\"destfile is a directory!\", buildRule.getLog())
test2#?#5:assertContains(\"testprop1=aa, testprop3=xxyy, testprop4=aazz\", buildRule.getLog())" shape=ellipse]
0 -> 15 [label="Action:2"];
1 -> 0 [label="Action:2"];
1 -> 4 [label="AST:2"];
1 -> 5 [label="AST:2"];
1 -> 8 [label="AST:2"];
1 -> 11 [label="AST:2"];
1 -> 13 [label="AST:2"];
2 -> 1 [label="AST:2"];
3 -> 2 [label="AST:2"];
5 -> 6 [label="AST:2"];
5 -> 7 [label="AST:2"];
8 -> 9 [label="AST:2"];
8 -> 10 [label="AST:2"];
11 -> 12 [label="AST:2"];
13 -> 14 [label="AST:2"];
}