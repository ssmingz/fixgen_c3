digraph "Pattern" {
0 [label="testSpawn#?#3:DELETE
testspawn#?#8:DELETE" shape=ellipse]
1 [label="testSpawn#?#3:FileUtils fileutils = FileUtils.newFileUtils()
testspawn#?#8:FileUtils fileutils = FileUtils.newFileUtils()" shape=ellipse]
2 [label="testSpawn#?#2:\{
    FileUtils fileutils = FileUtils.newFileUtils();
    File logFile = fileutils.createTempFile(\"spawn\", \"log\", project.getBaseDir());
    assertTrue(\"log file not existing\", !logFile.exists());
    project.setProperty(\"logFile\", logFile.getAbsolutePath());
    project.setProperty(\"timeToWait\", Long.toString(TIME_TO_WAIT));
    project.executeTarget(\"testSpawn\");
    try \{
        Thread.sleep((TIME_TO_WAIT * 1000) + SECURITY_MARGIN);
    \} catch (Exception ex) \{
        System.out.println(\"my sleep was interrupted\");
    \}
    if (!logFile.exists()) \{
        System.out.println(\"suggestion: increase the constant\" + \" SECURITY_MARGIN to give more time for java to start.\");
    \}
    assertTrue(\"log file exists\", logFile.exists());
\}
testspawn#?#2:\{
    project.executeTarget(\"init\");
    if (project.getProperty(\"test.can.run\") == null) \{
        return;
    \}
    myBuild = new MonitoredBuild(new File(System.getProperty(\"root\"), BUILD_FILE), \"spawn\");
    FileUtils fileutils = FileUtils.newFileUtils();
    logFile = fileutils.createTempFile(\"spawn\", \"log\", project.getBaseDir());
    assertTrue(\"log file not existing\", !logFile.exists());
    myBuild.setTimeToWait(TIME_TO_WAIT);
    myBuild.setLogFile(logFile.getAbsolutePath());
    myBuild.addBuildListener(new MonitoredBuildListener());
    myBuild.start();
    GregorianCalendar startwait = new GregorianCalendar();
    while (!buildFinished) \{
        try \{
            Thread.sleep(10);
        \} catch (InterruptedException e) \{
            System.out.println(\"my sleep was interrupted\");
        \}
        GregorianCalendar now = new GregorianCalendar();
        if ((now.getTime().getTime() - startwait.getTime().getTime()) > MAX_BUILD_TIME) \{
            System.out.println((\"aborting wait, too long \" + (now.getTime().getTime() - startwait.getTime().getTime())) + \"milliseconds\");
            break;
        \}
    \} 
    try \{
        Thread.sleep((TIME_TO_WAIT * 1000) + SECURITY_MARGIN);
    \} catch (InterruptedException e) \{
        System.out.println(\"my sleep was interrupted\");
    \}
    long elapsed = myBuild.getTimeElapsed();
    assertTrue(\"we waited more than the process lasted\", ((TIME_TO_WAIT * 1000) + SECURITY_MARGIN) > elapsed);
    logFile = new File(logFile.getAbsolutePath());
    assertTrue(\"log file found after spawn\", logFile.exists());
\}" shape=ellipse]
3 [label="testSpawn#?#2:public void testSpawn() \{
    FileUtils fileutils = FileUtils.newFileUtils();
    File logFile = fileutils.createTempFile(\"spawn\", \"log\", project.getBaseDir());
    assertTrue(\"log file not existing\", !logFile.exists());
    project.setProperty(\"logFile\", logFile.getAbsolutePath());
    project.setProperty(\"timeToWait\", Long.toString(TIME_TO_WAIT));
    project.executeTarget(\"testSpawn\");
    try \{
        Thread.sleep((TIME_TO_WAIT * 1000) + SECURITY_MARGIN);
    \} catch (Exception ex) \{
        System.out.println(\"my sleep was interrupted\");
    \}
    if (!logFile.exists()) \{
        System.out.println(\"suggestion: increase the constant\" + \" SECURITY_MARGIN to give more time for java to start.\");
    \}
    assertTrue(\"log file exists\", logFile.exists());
\}
testspawn#?#2:public void testspawn() \{
    project.executeTarget(\"init\");
    if (project.getProperty(\"test.can.run\") == null) \{
        return;
    \}
    myBuild = new MonitoredBuild(new File(System.getProperty(\"root\"), BUILD_FILE), \"spawn\");
    FileUtils fileutils = FileUtils.newFileUtils();
    logFile = fileutils.createTempFile(\"spawn\", \"log\", project.getBaseDir());
    assertTrue(\"log file not existing\", !logFile.exists());
    myBuild.setTimeToWait(TIME_TO_WAIT);
    myBuild.setLogFile(logFile.getAbsolutePath());
    myBuild.addBuildListener(new MonitoredBuildListener());
    myBuild.start();
    GregorianCalendar startwait = new GregorianCalendar();
    while (!buildFinished) \{
        try \{
            Thread.sleep(10);
        \} catch (InterruptedException e) \{
            System.out.println(\"my sleep was interrupted\");
        \}
        GregorianCalendar now = new GregorianCalendar();
        if ((now.getTime().getTime() - startwait.getTime().getTime()) > MAX_BUILD_TIME) \{
            System.out.println((\"aborting wait, too long \" + (now.getTime().getTime() - startwait.getTime().getTime())) + \"milliseconds\");
            break;
        \}
    \} 
    try \{
        Thread.sleep((TIME_TO_WAIT * 1000) + SECURITY_MARGIN);
    \} catch (InterruptedException e) \{
        System.out.println(\"my sleep was interrupted\");
    \}
    long elapsed = myBuild.getTimeElapsed();
    assertTrue(\"we waited more than the process lasted\", ((TIME_TO_WAIT * 1000) + SECURITY_MARGIN) > elapsed);
    logFile = new File(logFile.getAbsolutePath());
    assertTrue(\"log file found after spawn\", logFile.exists());
\}" shape=ellipse]
4 [label="testSpawn#?#4:File logFile = fileutils.createTempFile(\"spawn\", \"log\", project.getBaseDir())
testspawn#?#9:logFile = fileutils.createTempFile(\"spawn\", \"log\", project.getBaseDir())" shape=ellipse]
5 [label="testSpawn#?#5:assertTrue(\"log file not existing\", !logFile.exists())
testspawn#?#10:assertTrue(\"log file not existing\", !logFile.exists())" shape=ellipse]
6 [label="testSpawn#?#6:project.setProperty(\"logFile\", logFile.getAbsolutePath())
testspawn#?#12:myBuild.setLogFile(logFile.getAbsolutePath())" shape=ellipse]
7 [label="testSpawn#?#7:project.setProperty(\"timeToWait\", Long.toString(TIME_TO_WAIT))
testspawn#?#11:myBuild.setTimeToWait(TIME_TO_WAIT)" shape=ellipse]
8 [label="testSpawn#?#8:project.executeTarget(\"testSpawn\")
testspawn#?#3:project.executeTarget(\"init\")" shape=ellipse]
9 [label="testSpawn#?#9:try \{
    Thread.sleep((TIME_TO_WAIT * 1000) + SECURITY_MARGIN);
\} catch (Exception ex) \{
    System.out.println(\"my sleep was interrupted\");
\}
testspawn#?#30:try \{
    Thread.sleep((TIME_TO_WAIT * 1000) + SECURITY_MARGIN);
\} catch (InterruptedException e) \{
    System.out.println(\"my sleep was interrupted\");
\}" shape=ellipse]
10 [label="testSpawn#?#14:if (!logFile.exists()) \{
    System.out.println(\"suggestion: increase the constant\" + \" SECURITY_MARGIN to give more time for java to start.\");
\}
testspawn#?#4:if (project.getProperty(\"test.can.run\") == null) \{
    return;
\}" shape=ellipse]
11 [label="testSpawn#?#19:assertTrue(\"log file exists\", logFile.exists())
testspawn#?#40:assertTrue(\"log file found after spawn\", logFile.exists())" shape=ellipse]
12 [label="testSpawn#?#3:fileutils
testspawn#?#8:fileutils" shape=ellipse]
13 [label="testSpawn#?#4:fileutils
testspawn#?#9:fileutils" shape=ellipse]
14 [label="testSpawn#?#3:FileUtils
testspawn#?#8:FileUtils" shape=ellipse]
15 [label="testSpawn#?#-1:
testspawn#?#-1:" shape=ellipse]
16 [label="testSpawn#?#3:FileUtils.newFileUtils()
testspawn#?#8:FileUtils.newFileUtils()" shape=ellipse]
17 [label="testSpawn#?#3:newFileUtils
testspawn#?#8:newFileUtils" shape=ellipse]
18 [label="testSpawn#?#3:FileUtils
testspawn#?#8:FileUtils" shape=ellipse]
19 [label="testSpawn#?#3:newFileUtils()
testspawn#?#8:newFileUtils()" shape=ellipse]
20 [label="testspawn#?#36:assertTrue(\"we waited more than the process lasted\", ((TIME_TO_WAIT * 1000) + SECURITY_MARGIN) > elapsed)" shape=ellipse]
21 [label="testspawn#?#16:while (!buildFinished) \{
    try \{
        Thread.sleep(10);
    \} catch (InterruptedException e) \{
        System.out.println(\"my sleep was interrupted\");
    \}
    GregorianCalendar now = new GregorianCalendar();
    if ((now.getTime().getTime() - startwait.getTime().getTime()) > MAX_BUILD_TIME) \{
        System.out.println((\"aborting wait, too long \" + (now.getTime().getTime() - startwait.getTime().getTime())) + \"milliseconds\");
        break;
    \}
\} " shape=ellipse]
22 [label="testspawn#?#13:myBuild.addBuildListener(new MonitoredBuildListener())" shape=ellipse]
23 [label="testspawn#?#7:myBuild = new MonitoredBuild(new File(System.getProperty(\"root\"), BUILD_FILE), \"spawn\")" shape=ellipse]
24 [label="testspawn#?#15:GregorianCalendar startwait = new GregorianCalendar()" shape=ellipse]
25 [label="testspawn#?#35:long elapsed = myBuild.getTimeElapsed()" shape=ellipse]
26 [label="testspawn#?#39:logFile = new File(logFile.getAbsolutePath())" shape=ellipse]
27 [label="testspawn#?#14:myBuild.start()" shape=ellipse]
1 -> 0 [label="Action:2"];
1 -> 12 [label="AST:2"];
1 -> 14 [label="AST:2"];
1 -> 16 [label="AST:2"];
2 -> 1 [label="AST:2"];
2 -> 4 [label="AST:2"];
2 -> 5 [label="AST:2"];
2 -> 6 [label="AST:2"];
2 -> 7 [label="AST:2"];
2 -> 8 [label="AST:2"];
2 -> 9 [label="AST:2"];
2 -> 10 [label="AST:2"];
2 -> 11 [label="AST:2"];
2 -> 20 [label="AST:1"];
2 -> 21 [label="AST:1"];
2 -> 22 [label="AST:1"];
2 -> 23 [label="AST:1"];
2 -> 24 [label="AST:1"];
2 -> 25 [label="AST:1"];
2 -> 26 [label="AST:1"];
2 -> 27 [label="AST:1"];
3 -> 2 [label="AST:2"];
12 -> 13 [label="Define Use:2"];
14 -> 15 [label="AST:2"];
16 -> 17 [label="AST:2"];
16 -> 18 [label="AST:2"];
16 -> 19 [label="AST:2"];
}