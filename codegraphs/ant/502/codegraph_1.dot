digraph "testspawn#?" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@testspawn" shape=ellipse]
2 [label="3:CtExecutableReferenceImpl@executeTarget(java.lang.String)" shape=ellipse]
3 [label="3:CtVirtualElement@executeTarget" shape=ellipse]
4 [label="3:CtFieldReadImpl@project" shape=ellipse]
5 [label="3:CtLiteralImpl@\"init\"" shape=ellipse]
6 [label="3:CtInvocationImpl@project.executeTarget(\"init\")" shape=ellipse]
7 [label="4:CtExecutableReferenceImpl@getProperty(java.lang.String)" shape=ellipse]
8 [label="4:CtVirtualElement@getProperty" shape=ellipse]
9 [label="4:CtFieldReadImpl@project" shape=ellipse]
10 [label="4:CtLiteralImpl@\"test.can.run\"" shape=ellipse]
11 [label="4:CtInvocationImpl@project.getProperty(\"test.can.run\")" shape=ellipse]
12 [label="4:CtLiteralImpl@null" shape=ellipse]
13 [label="4:CtBinaryOperatorImpl@project.getProperty(\"test.can.run\") == null" shape=ellipse]
14 [label="5:CtReturnImpl@return" shape=ellipse]
15 [label="4:CtBlockImpl@\{
    return;
\}" shape=ellipse]
16 [label="4:CtIfImpl@if (project.getProperty(\"test.can.run\") == null) \{
    return;
\}" shape=ellipse]
17 [label="7:CtFieldWriteImpl@myBuild" shape=ellipse]
18 [label="7:CtTypeReferenceImpl@MonitoredBuild" shape=ellipse]
19 [label="7:CtTypeReferenceImpl@File" shape=ellipse]
20 [label="7:CtExecutableReferenceImpl@getProperty(java.lang.String)" shape=ellipse]
21 [label="7:CtVirtualElement@getProperty" shape=ellipse]
22 [label="7:CtTypeAccessImpl@System" shape=ellipse]
23 [label="7:CtLiteralImpl@\"root\"" shape=ellipse]
24 [label="7:CtInvocationImpl@System.getProperty(\"root\")" shape=ellipse]
25 [label="7:CtFieldReadImpl@BUILD_FILE" shape=ellipse]
26 [label="7:CtConstructorCallImpl@new File(System.getProperty(\"root\"), BUILD_FILE)" shape=ellipse]
27 [label="7:CtLiteralImpl@\"spawn\"" shape=ellipse]
28 [label="7:CtConstructorCallImpl@new MonitoredBuild(new File(System.getProperty(\"root\"), BUILD_FILE), \"spawn\")" shape=ellipse]
29 [label="7:CtAssignmentImpl@myBuild = new MonitoredBuild(new File(System.getProperty(\"root\"), BUILD_FILE), \"spawn\")" shape=ellipse]
30 [label="8:CtTypeReferenceImpl@FileUtils" shape=ellipse]
31 [label="8:CtExecutableReferenceImpl@newFileUtils()" shape=ellipse]
32 [label="8:CtVirtualElement@newFileUtils" shape=ellipse]
33 [label="8:CtTypeAccessImpl@FileUtils" shape=ellipse]
34 [label="8:CtInvocationImpl@FileUtils.newFileUtils()" shape=ellipse]
35 [label="8:CtVirtualElement@fileutils" shape=ellipse]
36 [label="8:CtLocalVariableImpl@FileUtils fileutils = FileUtils.newFileUtils()" shape=ellipse]
37 [label="9:CtFieldWriteImpl@logFile" shape=ellipse]
38 [label="9:CtExecutableReferenceImpl@createTempFile(java.lang.String,java.lang.String)" shape=ellipse]
39 [label="9:CtVirtualElement@createTempFile" shape=ellipse]
40 [label="9:CtVariableReadImpl@fileutils" shape=ellipse]
41 [label="9:CtLiteralImpl@\"spawn\"" shape=ellipse]
42 [label="9:CtLiteralImpl@\"log\"" shape=ellipse]
43 [label="9:CtExecutableReferenceImpl@getBaseDir()" shape=ellipse]
44 [label="9:CtVirtualElement@getBaseDir" shape=ellipse]
45 [label="9:CtFieldReadImpl@project" shape=ellipse]
46 [label="9:CtInvocationImpl@project.getBaseDir()" shape=ellipse]
47 [label="9:CtInvocationImpl@fileutils.createTempFile(\"spawn\", \"log\", project.getBaseDir())" shape=ellipse]
48 [label="9:CtAssignmentImpl@logFile = fileutils.createTempFile(\"spawn\", \"log\", project.getBaseDir())" shape=ellipse]
49 [label="10:CtExecutableReferenceImpl@assertTrue(java.lang.String,<unknown>)" shape=ellipse]
50 [label="10:CtVirtualElement@assertTrue" shape=ellipse]
51 [label="10:CtLiteralImpl@\"log file not existing\"" shape=ellipse]
52 [label="10:CtExecutableReferenceImpl@exists()" shape=ellipse]
53 [label="10:CtVirtualElement@exists" shape=ellipse]
54 [label="10:CtFieldReadImpl@logFile" shape=ellipse]
55 [label="10:CtInvocationImpl@logFile.exists()" shape=ellipse]
56 [label="10:CtUnaryOperatorImpl@!logFile.exists()" shape=ellipse]
57 [label="10:CtInvocationImpl@assertTrue(\"log file not existing\", !logFile.exists())" shape=ellipse]
58 [label="11:CtExecutableReferenceImpl@setTimeToWait()" shape=ellipse]
59 [label="11:CtVirtualElement@setTimeToWait" shape=ellipse]
60 [label="11:CtFieldReadImpl@myBuild" shape=ellipse]
61 [label="11:CtTypeAccessImpl@TIME_TO_WAIT" shape=ellipse]
62 [label="11:CtInvocationImpl@myBuild.setTimeToWait(TIME_TO_WAIT)" shape=ellipse]
63 [label="12:CtExecutableReferenceImpl@setLogFile()" shape=ellipse]
64 [label="12:CtVirtualElement@setLogFile" shape=ellipse]
65 [label="12:CtFieldReadImpl@myBuild" shape=ellipse]
66 [label="12:CtExecutableReferenceImpl@getAbsolutePath()" shape=ellipse]
67 [label="12:CtVirtualElement@getAbsolutePath" shape=ellipse]
68 [label="12:CtFieldReadImpl@logFile" shape=ellipse]
69 [label="12:CtInvocationImpl@logFile.getAbsolutePath()" shape=ellipse]
70 [label="12:CtInvocationImpl@myBuild.setLogFile(logFile.getAbsolutePath())" shape=ellipse]
71 [label="13:CtExecutableReferenceImpl@addBuildListener(MonitoredBuildListener)" shape=ellipse]
72 [label="13:CtVirtualElement@addBuildListener" shape=ellipse]
73 [label="13:CtFieldReadImpl@myBuild" shape=ellipse]
74 [label="13:CtTypeReferenceImpl@MonitoredBuildListener" shape=ellipse]
75 [label="13:CtConstructorCallImpl@new MonitoredBuildListener()" shape=ellipse]
76 [label="13:CtInvocationImpl@myBuild.addBuildListener(new MonitoredBuildListener())" shape=ellipse]
77 [label="14:CtExecutableReferenceImpl@start()" shape=ellipse]
78 [label="14:CtVirtualElement@start" shape=ellipse]
79 [label="14:CtFieldReadImpl@myBuild" shape=ellipse]
80 [label="14:CtInvocationImpl@myBuild.start()" shape=ellipse]
81 [label="15:CtTypeReferenceImpl@GregorianCalendar" shape=ellipse]
82 [label="15:CtTypeReferenceImpl@GregorianCalendar" shape=ellipse]
83 [label="15:CtConstructorCallImpl@new GregorianCalendar()" shape=ellipse]
84 [label="15:CtVirtualElement@startwait" shape=ellipse]
85 [label="15:CtLocalVariableImpl@GregorianCalendar startwait = new GregorianCalendar()" shape=ellipse]
86 [label="16:CtFieldReadImpl@buildFinished" shape=ellipse]
87 [label="16:CtUnaryOperatorImpl@!buildFinished" shape=ellipse]
88 [label="18:CtExecutableReferenceImpl@sleep(long)" shape=ellipse]
89 [label="18:CtVirtualElement@sleep" shape=ellipse]
90 [label="18:CtTypeAccessImpl@Thread" shape=ellipse]
91 [label="18:CtLiteralImpl@10" shape=ellipse]
92 [label="18:CtInvocationImpl@Thread.sleep(10)" shape=ellipse]
93 [label="17:CtBlockImpl@\{
    Thread.sleep(10);
\}" shape=ellipse]
94 [label="19:CtVirtualElement@e" shape=ellipse]
95 [label="19:CtTypeReferenceImpl@InterruptedException" shape=ellipse]
96 [label="19:CtCatchVariableImpl@InterruptedException e" shape=ellipse]
97 [label="20:CtExecutableReferenceImpl@println(java.lang.String)" shape=ellipse]
98 [label="20:CtVirtualElement@println" shape=ellipse]
99 [label="20:CtTypeAccessImpl@System" shape=ellipse]
100 [label="20:CtFieldReadImpl@System.out" shape=ellipse]
101 [label="20:CtFieldReferenceImpl@java.lang.System.out" shape=ellipse]
102 [label="20:CtLiteralImpl@\"my sleep was interrupted\"" shape=ellipse]
103 [label="20:CtInvocationImpl@System.out.println(\"my sleep was interrupted\")" shape=ellipse]
104 [label="19:CtBlockImpl@\{
    System.out.println(\"my sleep was interrupted\");
\}" shape=ellipse]
105 [label="19:CtCatchImpl@ catch (InterruptedException e) \{
    System.out.println(\"my sleep was interrupted\");
\}" shape=ellipse]
106 [label="17:CtTryImpl@try \{
    Thread.sleep(10);
\} catch (InterruptedException e) \{
    System.out.println(\"my sleep was interrupted\");
\}" shape=ellipse]
107 [label="22:CtTypeReferenceImpl@GregorianCalendar" shape=ellipse]
108 [label="22:CtTypeReferenceImpl@GregorianCalendar" shape=ellipse]
109 [label="22:CtConstructorCallImpl@new GregorianCalendar()" shape=ellipse]
110 [label="22:CtVirtualElement@now" shape=ellipse]
111 [label="22:CtLocalVariableImpl@GregorianCalendar now = new GregorianCalendar()" shape=ellipse]
112 [label="23:CtExecutableReferenceImpl@getTime()" shape=ellipse]
113 [label="23:CtVirtualElement@getTime" shape=ellipse]
114 [label="23:CtExecutableReferenceImpl@getTime()" shape=ellipse]
115 [label="23:CtVirtualElement@getTime" shape=ellipse]
116 [label="23:CtVariableReadImpl@now" shape=ellipse]
117 [label="23:CtInvocationImpl@now.getTime()" shape=ellipse]
118 [label="23:CtInvocationImpl@now.getTime().getTime()" shape=ellipse]
119 [label="23:CtExecutableReferenceImpl@getTime()" shape=ellipse]
120 [label="23:CtVirtualElement@getTime" shape=ellipse]
121 [label="23:CtExecutableReferenceImpl@getTime()" shape=ellipse]
122 [label="23:CtVirtualElement@getTime" shape=ellipse]
123 [label="23:CtVariableReadImpl@startwait" shape=ellipse]
124 [label="23:CtInvocationImpl@startwait.getTime()" shape=ellipse]
125 [label="23:CtInvocationImpl@startwait.getTime().getTime()" shape=ellipse]
126 [label="23:CtBinaryOperatorImpl@(now.getTime().getTime() - startwait.getTime().getTime())" shape=ellipse]
127 [label="23:CtFieldReadImpl@MAX_BUILD_TIME" shape=ellipse]
128 [label="23:CtBinaryOperatorImpl@(now.getTime().getTime() - startwait.getTime().getTime()) > MAX_BUILD_TIME" shape=ellipse]
129 [label="24:CtExecutableReferenceImpl@println(char[])" shape=ellipse]
130 [label="24:CtVirtualElement@println" shape=ellipse]
131 [label="24:CtTypeAccessImpl@System" shape=ellipse]
132 [label="24:CtFieldReadImpl@System.out" shape=ellipse]
133 [label="24:CtFieldReferenceImpl@java.lang.System.out" shape=ellipse]
134 [label="25:CtLiteralImpl@\"aborting wait, too long \"" shape=ellipse]
135 [label="25:CtExecutableReferenceImpl@getTime()" shape=ellipse]
136 [label="25:CtVirtualElement@getTime" shape=ellipse]
137 [label="25:CtExecutableReferenceImpl@getTime()" shape=ellipse]
138 [label="25:CtVirtualElement@getTime" shape=ellipse]
139 [label="25:CtVariableReadImpl@now" shape=ellipse]
140 [label="25:CtInvocationImpl@now.getTime()" shape=ellipse]
141 [label="25:CtInvocationImpl@now.getTime().getTime()" shape=ellipse]
142 [label="25:CtExecutableReferenceImpl@getTime()" shape=ellipse]
143 [label="25:CtVirtualElement@getTime" shape=ellipse]
144 [label="25:CtExecutableReferenceImpl@getTime()" shape=ellipse]
145 [label="25:CtVirtualElement@getTime" shape=ellipse]
146 [label="25:CtVariableReadImpl@startwait" shape=ellipse]
147 [label="25:CtInvocationImpl@startwait.getTime()" shape=ellipse]
148 [label="25:CtInvocationImpl@startwait.getTime().getTime()" shape=ellipse]
149 [label="25:CtBinaryOperatorImpl@(now.getTime().getTime() - startwait.getTime().getTime())" shape=ellipse]
150 [label="25:CtBinaryOperatorImpl@(\"aborting wait, too long \" + (now.getTime().getTime() - startwait.getTime().getTime()))" shape=ellipse]
151 [label="26:CtLiteralImpl@\"milliseconds\"" shape=ellipse]
152 [label="25:CtBinaryOperatorImpl@(\"aborting wait, too long \" + (now.getTime().getTime() - startwait.getTime().getTime())) + \"milliseconds\"" shape=ellipse]
153 [label="24:CtInvocationImpl@System.out.println((\"aborting wait, too long \" + (now.getTime().getTime() - startwait.getTime().getTime())) + \"milliseconds\")" shape=ellipse]
154 [label="27:CtBreakImpl@break" shape=ellipse]
155 [label="23:CtBlockImpl@\{
    System.out.println((\"aborting wait, too long \" + (now.getTime().getTime() - startwait.getTime().getTime())) + \"milliseconds\");
    break;
\}" shape=ellipse]
156 [label="23:CtIfImpl@if ((now.getTime().getTime() - startwait.getTime().getTime()) > MAX_BUILD_TIME) \{
    System.out.println((\"aborting wait, too long \" + (now.getTime().getTime() - startwait.getTime().getTime())) + \"milliseconds\");
    break;
\}" shape=ellipse]
157 [label="16:CtBlockImpl@\{
    try \{
        Thread.sleep(10);
    \} catch (InterruptedException e) \{
        System.out.println(\"my sleep was interrupted\");
    \}
    GregorianCalendar now = new GregorianCalendar();
    if ((now.getTime().getTime() - startwait.getTime().getTime()) > MAX_BUILD_TIME) \{
        System.out.println((\"aborting wait, too long \" + (now.getTime().getTime() - startwait.getTime().getTime())) + \"milliseconds\");
        break;
    \}
\}" shape=ellipse]
158 [label="16:CtWhileImpl@while (!buildFinished) \{
    try \{
        Thread.sleep(10);
    \} catch (InterruptedException e) \{
        System.out.println(\"my sleep was interrupted\");
    \}
    GregorianCalendar now = new GregorianCalendar();
    if ((now.getTime().getTime() - startwait.getTime().getTime()) > MAX_BUILD_TIME) \{
        System.out.println((\"aborting wait, too long \" + (now.getTime().getTime() - startwait.getTime().getTime())) + \"milliseconds\");
        break;
    \}
\} " shape=ellipse]
159 [label="31:CtExecutableReferenceImpl@sleep(long)" shape=ellipse]
160 [label="31:CtVirtualElement@sleep" shape=ellipse]
161 [label="31:CtTypeAccessImpl@Thread" shape=ellipse]
162 [label="31:CtFieldReadImpl@TIME_TO_WAIT" shape=ellipse]
163 [label="31:CtLiteralImpl@1000" shape=ellipse]
164 [label="31:CtBinaryOperatorImpl@(TIME_TO_WAIT * 1000)" shape=ellipse]
165 [label="31:CtFieldReadImpl@SECURITY_MARGIN" shape=ellipse]
166 [label="31:CtBinaryOperatorImpl@(TIME_TO_WAIT * 1000) + SECURITY_MARGIN" shape=ellipse]
167 [label="31:CtInvocationImpl@Thread.sleep((TIME_TO_WAIT * 1000) + SECURITY_MARGIN)" shape=ellipse]
168 [label="30:CtBlockImpl@\{
    Thread.sleep((TIME_TO_WAIT * 1000) + SECURITY_MARGIN);
\}" shape=ellipse]
169 [label="32:CtVirtualElement@e" shape=ellipse]
170 [label="32:CtTypeReferenceImpl@InterruptedException" shape=ellipse]
171 [label="32:CtCatchVariableImpl@InterruptedException e" shape=ellipse]
172 [label="33:CtExecutableReferenceImpl@println(java.lang.String)" shape=ellipse]
173 [label="33:CtVirtualElement@println" shape=ellipse]
174 [label="33:CtTypeAccessImpl@System" shape=ellipse]
175 [label="33:CtFieldReadImpl@System.out" shape=ellipse]
176 [label="33:CtFieldReferenceImpl@java.lang.System.out" shape=ellipse]
177 [label="33:CtLiteralImpl@\"my sleep was interrupted\"" shape=ellipse]
178 [label="33:CtInvocationImpl@System.out.println(\"my sleep was interrupted\")" shape=ellipse]
179 [label="32:CtBlockImpl@\{
    System.out.println(\"my sleep was interrupted\");
\}" shape=ellipse]
180 [label="32:CtCatchImpl@ catch (InterruptedException e) \{
    System.out.println(\"my sleep was interrupted\");
\}" shape=ellipse]
181 [label="30:CtTryImpl@try \{
    Thread.sleep((TIME_TO_WAIT * 1000) + SECURITY_MARGIN);
\} catch (InterruptedException e) \{
    System.out.println(\"my sleep was interrupted\");
\}" shape=ellipse]
182 [label="35:CtTypeReferenceImpl@long" shape=ellipse]
183 [label="35:CtExecutableReferenceImpl@getTimeElapsed()" shape=ellipse]
184 [label="35:CtVirtualElement@getTimeElapsed" shape=ellipse]
185 [label="35:CtFieldReadImpl@myBuild" shape=ellipse]
186 [label="35:CtInvocationImpl@myBuild.getTimeElapsed()" shape=ellipse]
187 [label="35:CtVirtualElement@elapsed" shape=ellipse]
188 [label="35:CtLocalVariableImpl@long elapsed = myBuild.getTimeElapsed()" shape=ellipse]
189 [label="36:CtExecutableReferenceImpl@assertTrue(java.lang.String,<unknown>)" shape=ellipse]
190 [label="36:CtVirtualElement@assertTrue" shape=ellipse]
191 [label="37:CtLiteralImpl@\"we waited more than the process lasted\"" shape=ellipse]
192 [label="38:CtFieldReadImpl@TIME_TO_WAIT" shape=ellipse]
193 [label="38:CtLiteralImpl@1000" shape=ellipse]
194 [label="38:CtBinaryOperatorImpl@(TIME_TO_WAIT * 1000)" shape=ellipse]
195 [label="38:CtFieldReadImpl@SECURITY_MARGIN" shape=ellipse]
196 [label="38:CtBinaryOperatorImpl@((TIME_TO_WAIT * 1000) + SECURITY_MARGIN)" shape=ellipse]
197 [label="38:CtVariableReadImpl@elapsed" shape=ellipse]
198 [label="38:CtBinaryOperatorImpl@((TIME_TO_WAIT * 1000) + SECURITY_MARGIN) > elapsed" shape=ellipse]
199 [label="36:CtInvocationImpl@assertTrue(\"we waited more than the process lasted\", ((TIME_TO_WAIT * 1000) + SECURITY_MARGIN) > elapsed)" shape=ellipse]
200 [label="39:CtFieldWriteImpl@logFile" shape=ellipse]
201 [label="39:CtTypeReferenceImpl@File" shape=ellipse]
202 [label="39:CtExecutableReferenceImpl@getAbsolutePath()" shape=ellipse]
203 [label="39:CtVirtualElement@getAbsolutePath" shape=ellipse]
204 [label="39:CtFieldReadImpl@logFile" shape=ellipse]
205 [label="39:CtInvocationImpl@logFile.getAbsolutePath()" shape=ellipse]
206 [label="39:CtConstructorCallImpl@new File(logFile.getAbsolutePath())" shape=ellipse]
207 [label="39:CtAssignmentImpl@logFile = new File(logFile.getAbsolutePath())" shape=ellipse]
208 [label="40:CtExecutableReferenceImpl@assertTrue(java.lang.String,<unknown>)" shape=ellipse]
209 [label="40:CtVirtualElement@assertTrue" shape=ellipse]
210 [label="40:CtLiteralImpl@\"log file found after spawn\"" shape=ellipse]
211 [label="40:CtExecutableReferenceImpl@exists()" shape=ellipse]
212 [label="40:CtVirtualElement@exists" shape=ellipse]
213 [label="40:CtFieldReadImpl@logFile" shape=ellipse]
214 [label="40:CtInvocationImpl@logFile.exists()" shape=ellipse]
215 [label="40:CtInvocationImpl@assertTrue(\"log file found after spawn\", logFile.exists())" shape=ellipse]
216 [label="2:CtBlockImpl@\{
    project.executeTarget(\"init\");
    if (project.getProperty(\"test.can.run\") == null) \{
        return;
    \}
    myBuild = new MonitoredBuild(new File(System.getProperty(\"root\"), BUILD_FILE), \"spawn\");
    FileUtils fileutils = FileUtils.newFileUtils();
    logFile = fileutils.createTempFile(\"spawn\", \"log\", project.getBaseDir());
    assertTrue(\"log file not existing\", !logFile.exists());
    myBuild.setTimeToWait(TIME_TO_WAIT);
    myBuild.setLogFile(logFile.getAbsolutePath());
    myBuild.addBuildListener(new MonitoredBuildListener());
    myBuild.start();
    GregorianCalendar startwait = new GregorianCalendar();
    while (!buildFinished) \{
        try \{
            Thread.sleep(10);
        \} catch (InterruptedException e) \{
            System.out.println(\"my sleep was interrupted\");
        \}
        GregorianCalendar now = new GregorianCalendar();
        if ((now.getTime().getTime() - startwait.getTime().getTime()) > MAX_BUILD_TIME) \{
            System.out.println((\"aborting wait, too long \" + (now.getTime().getTime() - startwait.getTime().getTime())) + \"milliseconds\");
            break;
        \}
    \} 
    try \{
        Thread.sleep((TIME_TO_WAIT * 1000) + SECURITY_MARGIN);
    \} catch (InterruptedException e) \{
        System.out.println(\"my sleep was interrupted\");
    \}
    long elapsed = myBuild.getTimeElapsed();
    assertTrue(\"we waited more than the process lasted\", ((TIME_TO_WAIT * 1000) + SECURITY_MARGIN) > elapsed);
    logFile = new File(logFile.getAbsolutePath());
    assertTrue(\"log file found after spawn\", logFile.exists());
\}" shape=ellipse]
217 [label="2:CtMethodImpl@public void testspawn() \{
    project.executeTarget(\"init\");
    if (project.getProperty(\"test.can.run\") == null) \{
        return;
    \}
    myBuild = new MonitoredBuild(new File(System.getProperty(\"root\"), BUILD_FILE), \"spawn\");
    FileUtils fileutils = FileUtils.newFileUtils();
    logFile = fileutils.createTempFile(\"spawn\", \"log\", project.getBaseDir());
    assertTrue(\"log file not existing\", !logFile.exists());
    myBuild.setTimeToWait(TIME_TO_WAIT);
    myBuild.setLogFile(logFile.getAbsolutePath());
    myBuild.addBuildListener(new MonitoredBuildListener());
    myBuild.start();
    GregorianCalendar startwait = new GregorianCalendar();
    while (!buildFinished) \{
        try \{
            Thread.sleep(10);
        \} catch (InterruptedException e) \{
            System.out.println(\"my sleep was interrupted\");
        \}
        GregorianCalendar now = new GregorianCalendar();
        if ((now.getTime().getTime() - startwait.getTime().getTime()) > MAX_BUILD_TIME) \{
            System.out.println((\"aborting wait, too long \" + (now.getTime().getTime() - startwait.getTime().getTime())) + \"milliseconds\");
            break;
        \}
    \} 
    try \{
        Thread.sleep((TIME_TO_WAIT * 1000) + SECURITY_MARGIN);
    \} catch (InterruptedException e) \{
        System.out.println(\"my sleep was interrupted\");
    \}
    long elapsed = myBuild.getTimeElapsed();
    assertTrue(\"we waited more than the process lasted\", ((TIME_TO_WAIT * 1000) + SECURITY_MARGIN) > elapsed);
    logFile = new File(logFile.getAbsolutePath());
    assertTrue(\"log file found after spawn\", logFile.exists());
\}" shape=ellipse]
218 [label="8:Delete@DELETE" shape=ellipse]
219 [label="9:Delete@DELETE" shape=ellipse]
220 [label="8:Insert@INSERT" shape=ellipse]
221 [label="8:CtTypeAccessImpl@FILE_UTILS" shape=ellipse]
6 -> 3 [label="AST"];
6 -> 4 [label="AST"];
6 -> 2 [label="AST"];
6 -> 5 [label="AST"];
11 -> 8 [label="AST"];
11 -> 9 [label="AST"];
11 -> 7 [label="AST"];
11 -> 10 [label="AST"];
13 -> 11 [label="AST"];
13 -> 12 [label="AST"];
13 -> 15 [label="Control Dep"];
13 -> 14 [label="Control Dep"];
15 -> 14 [label="AST"];
16 -> 13 [label="AST"];
16 -> 15 [label="AST"];
17 -> 60 [label="Define-Use"];
17 -> 65 [label="Define-Use"];
17 -> 73 [label="Define-Use"];
17 -> 79 [label="Define-Use"];
17 -> 185 [label="Define-Use"];
24 -> 21 [label="AST"];
24 -> 22 [label="AST"];
24 -> 20 [label="AST"];
24 -> 23 [label="AST"];
25 -> 17 [label="Data Dep"];
26 -> 24 [label="AST"];
26 -> 25 [label="AST"];
28 -> 26 [label="AST"];
28 -> 27 [label="AST"];
29 -> 17 [label="AST"];
29 -> 28 [label="AST"];
34 -> 32 [label="AST"];
34 -> 33 [label="AST"];
34 -> 31 [label="AST"];
35 -> 40 [label="Define-Use"];
36 -> 35 [label="AST"];
36 -> 30 [label="AST"];
36 -> 34 [label="AST"];
36 -> 218 [label="Action"];
37 -> 54 [label="Define-Use"];
37 -> 68 [label="Define-Use"];
40 -> 37 [label="Data Dep"];
40 -> 219 [label="Action"];
45 -> 37 [label="Data Dep"];
46 -> 44 [label="AST"];
46 -> 45 [label="AST"];
46 -> 43 [label="AST"];
47 -> 39 [label="AST"];
47 -> 40 [label="AST"];
47 -> 38 [label="AST"];
47 -> 41 [label="AST"];
47 -> 42 [label="AST"];
47 -> 46 [label="AST"];
47 -> 220 [label="Action"];
48 -> 37 [label="AST"];
48 -> 47 [label="AST"];
55 -> 53 [label="AST"];
55 -> 54 [label="AST"];
55 -> 52 [label="AST"];
56 -> 55 [label="AST"];
57 -> 50 [label="AST"];
57 -> 49 [label="AST"];
57 -> 51 [label="AST"];
57 -> 56 [label="AST"];
62 -> 59 [label="AST"];
62 -> 60 [label="AST"];
62 -> 58 [label="AST"];
62 -> 61 [label="AST"];
69 -> 67 [label="AST"];
69 -> 68 [label="AST"];
69 -> 66 [label="AST"];
70 -> 64 [label="AST"];
70 -> 65 [label="AST"];
70 -> 63 [label="AST"];
70 -> 69 [label="AST"];
76 -> 72 [label="AST"];
76 -> 73 [label="AST"];
76 -> 71 [label="AST"];
76 -> 75 [label="AST"];
80 -> 78 [label="AST"];
80 -> 79 [label="AST"];
80 -> 77 [label="AST"];
84 -> 123 [label="Define-Use"];
84 -> 146 [label="Define-Use"];
85 -> 84 [label="AST"];
85 -> 81 [label="AST"];
85 -> 83 [label="AST"];
87 -> 86 [label="AST"];
87 -> 157 [label="Control Dep"];
87 -> 106 [label="Control Dep"];
87 -> 93 [label="Control Dep"];
87 -> 92 [label="Control Dep"];
87 -> 88 [label="Control Dep"];
87 -> 90 [label="Control Dep"];
87 -> 91 [label="Control Dep"];
87 -> 105 [label="Control Dep"];
87 -> 96 [label="Control Dep"];
87 -> 111 [label="Control Dep"];
87 -> 109 [label="Control Dep"];
87 -> 156 [label="Control Dep"];
87 -> 128 [label="Control Dep"];
87 -> 126 [label="Control Dep"];
87 -> 118 [label="Control Dep"];
87 -> 112 [label="Control Dep"];
87 -> 117 [label="Control Dep"];
87 -> 114 [label="Control Dep"];
87 -> 116 [label="Control Dep"];
87 -> 125 [label="Control Dep"];
87 -> 119 [label="Control Dep"];
87 -> 124 [label="Control Dep"];
87 -> 121 [label="Control Dep"];
87 -> 123 [label="Control Dep"];
87 -> 127 [label="Control Dep"];
92 -> 89 [label="AST"];
92 -> 90 [label="AST"];
92 -> 88 [label="AST"];
92 -> 91 [label="AST"];
93 -> 92 [label="AST"];
96 -> 94 [label="AST"];
96 -> 95 [label="AST"];
96 -> 104 [label="Control Dep"];
96 -> 103 [label="Control Dep"];
96 -> 97 [label="Control Dep"];
96 -> 100 [label="Control Dep"];
96 -> 99 [label="Control Dep"];
96 -> 102 [label="Control Dep"];
100 -> 99 [label="AST"];
100 -> 101 [label="AST"];
103 -> 98 [label="AST"];
103 -> 100 [label="AST"];
103 -> 97 [label="AST"];
103 -> 102 [label="AST"];
104 -> 103 [label="AST"];
105 -> 96 [label="AST"];
105 -> 104 [label="AST"];
106 -> 93 [label="AST"];
106 -> 105 [label="AST"];
110 -> 116 [label="Define-Use"];
110 -> 139 [label="Define-Use"];
111 -> 110 [label="AST"];
111 -> 107 [label="AST"];
111 -> 109 [label="AST"];
117 -> 115 [label="AST"];
117 -> 116 [label="AST"];
117 -> 114 [label="AST"];
118 -> 113 [label="AST"];
118 -> 117 [label="AST"];
118 -> 112 [label="AST"];
124 -> 122 [label="AST"];
124 -> 123 [label="AST"];
124 -> 121 [label="AST"];
125 -> 120 [label="AST"];
125 -> 124 [label="AST"];
125 -> 119 [label="AST"];
126 -> 118 [label="AST"];
126 -> 125 [label="AST"];
128 -> 126 [label="AST"];
128 -> 127 [label="AST"];
128 -> 155 [label="Control Dep"];
128 -> 153 [label="Control Dep"];
128 -> 129 [label="Control Dep"];
128 -> 132 [label="Control Dep"];
128 -> 131 [label="Control Dep"];
128 -> 152 [label="Control Dep"];
128 -> 150 [label="Control Dep"];
128 -> 134 [label="Control Dep"];
128 -> 149 [label="Control Dep"];
128 -> 141 [label="Control Dep"];
128 -> 135 [label="Control Dep"];
128 -> 140 [label="Control Dep"];
128 -> 137 [label="Control Dep"];
128 -> 139 [label="Control Dep"];
128 -> 148 [label="Control Dep"];
128 -> 142 [label="Control Dep"];
128 -> 147 [label="Control Dep"];
128 -> 144 [label="Control Dep"];
128 -> 146 [label="Control Dep"];
128 -> 151 [label="Control Dep"];
128 -> 154 [label="Control Dep"];
132 -> 131 [label="AST"];
132 -> 133 [label="AST"];
140 -> 138 [label="AST"];
140 -> 139 [label="AST"];
140 -> 137 [label="AST"];
141 -> 136 [label="AST"];
141 -> 140 [label="AST"];
141 -> 135 [label="AST"];
147 -> 145 [label="AST"];
147 -> 146 [label="AST"];
147 -> 144 [label="AST"];
148 -> 143 [label="AST"];
148 -> 147 [label="AST"];
148 -> 142 [label="AST"];
149 -> 141 [label="AST"];
149 -> 148 [label="AST"];
150 -> 134 [label="AST"];
150 -> 149 [label="AST"];
152 -> 150 [label="AST"];
152 -> 151 [label="AST"];
153 -> 130 [label="AST"];
153 -> 132 [label="AST"];
153 -> 129 [label="AST"];
153 -> 152 [label="AST"];
155 -> 153 [label="AST"];
155 -> 154 [label="AST"];
156 -> 128 [label="AST"];
156 -> 155 [label="AST"];
157 -> 106 [label="AST"];
157 -> 111 [label="AST"];
157 -> 156 [label="AST"];
158 -> 87 [label="AST"];
158 -> 157 [label="AST"];
164 -> 162 [label="AST"];
164 -> 163 [label="AST"];
166 -> 164 [label="AST"];
166 -> 165 [label="AST"];
167 -> 160 [label="AST"];
167 -> 161 [label="AST"];
167 -> 159 [label="AST"];
167 -> 166 [label="AST"];
168 -> 167 [label="AST"];
171 -> 169 [label="AST"];
171 -> 170 [label="AST"];
171 -> 179 [label="Control Dep"];
171 -> 178 [label="Control Dep"];
171 -> 172 [label="Control Dep"];
171 -> 175 [label="Control Dep"];
171 -> 174 [label="Control Dep"];
171 -> 177 [label="Control Dep"];
175 -> 174 [label="AST"];
175 -> 176 [label="AST"];
178 -> 173 [label="AST"];
178 -> 175 [label="AST"];
178 -> 172 [label="AST"];
178 -> 177 [label="AST"];
179 -> 178 [label="AST"];
180 -> 171 [label="AST"];
180 -> 179 [label="AST"];
181 -> 168 [label="AST"];
181 -> 180 [label="AST"];
185 -> 187 [label="Data Dep"];
186 -> 184 [label="AST"];
186 -> 185 [label="AST"];
186 -> 183 [label="AST"];
187 -> 197 [label="Define-Use"];
188 -> 187 [label="AST"];
188 -> 182 [label="AST"];
188 -> 186 [label="AST"];
194 -> 192 [label="AST"];
194 -> 193 [label="AST"];
196 -> 194 [label="AST"];
196 -> 195 [label="AST"];
198 -> 196 [label="AST"];
198 -> 197 [label="AST"];
199 -> 190 [label="AST"];
199 -> 189 [label="AST"];
199 -> 191 [label="AST"];
199 -> 198 [label="AST"];
200 -> 213 [label="Define-Use"];
204 -> 200 [label="Data Dep"];
205 -> 203 [label="AST"];
205 -> 204 [label="AST"];
205 -> 202 [label="AST"];
206 -> 205 [label="AST"];
207 -> 200 [label="AST"];
207 -> 206 [label="AST"];
214 -> 212 [label="AST"];
214 -> 213 [label="AST"];
214 -> 211 [label="AST"];
215 -> 209 [label="AST"];
215 -> 208 [label="AST"];
215 -> 210 [label="AST"];
215 -> 214 [label="AST"];
216 -> 6 [label="AST"];
216 -> 16 [label="AST"];
216 -> 29 [label="AST"];
216 -> 36 [label="AST"];
216 -> 48 [label="AST"];
216 -> 57 [label="AST"];
216 -> 62 [label="AST"];
216 -> 70 [label="AST"];
216 -> 76 [label="AST"];
216 -> 80 [label="AST"];
216 -> 85 [label="AST"];
216 -> 158 [label="AST"];
216 -> 181 [label="AST"];
216 -> 188 [label="AST"];
216 -> 199 [label="AST"];
216 -> 207 [label="AST"];
216 -> 215 [label="AST"];
217 -> 1 [label="AST"];
217 -> 0 [label="AST"];
217 -> 216 [label="AST"];
220 -> 221 [label="Action"];
}