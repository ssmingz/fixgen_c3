digraph "createIndexList#?,ZipOutputStream" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@createIndexList" shape=ellipse]
2 [label="2:CtParameterImpl@ZipOutputStream zOut" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@ZipOutputStream" shape=ellipse]
4 [label="2:CtTypeReferenceImpl@IOException" shape=ellipse]
5 [label="3:CtTypeReferenceImpl@ByteArrayOutputStream" shape=ellipse]
6 [label="3:CtTypeReferenceImpl@ByteArrayOutputStream" shape=ellipse]
7 [label="3:CtConstructorCallImpl@new ByteArrayOutputStream()" shape=ellipse]
8 [label="3:CtVirtualElement@baos" shape=ellipse]
9 [label="3:CtLocalVariableImpl@ByteArrayOutputStream baos = new ByteArrayOutputStream()" shape=ellipse]
10 [label="4:CtTypeReferenceImpl@PrintWriter" shape=ellipse]
11 [label="4:CtTypeReferenceImpl@PrintWriter" shape=ellipse]
12 [label="4:CtTypeReferenceImpl@OutputStreamWriter" shape=ellipse]
13 [label="4:CtVariableReadImpl@baos" shape=ellipse]
14 [label="4:CtLiteralImpl@\"UTF8\"" shape=ellipse]
15 [label="4:CtConstructorCallImpl@new OutputStreamWriter(baos, \"UTF8\")" shape=ellipse]
16 [label="4:CtConstructorCallImpl@new PrintWriter(new OutputStreamWriter(baos, \"UTF8\"))" shape=ellipse]
17 [label="4:CtVirtualElement@writer" shape=ellipse]
18 [label="4:CtLocalVariableImpl@PrintWriter writer = new PrintWriter(new OutputStreamWriter(baos, \"UTF8\"))" shape=ellipse]
19 [label="5:CtExecutableReferenceImpl@println(java.lang.String)" shape=ellipse]
20 [label="5:CtVirtualElement@println" shape=ellipse]
21 [label="5:CtVariableReadImpl@writer" shape=ellipse]
22 [label="5:CtLiteralImpl@\"JarIndex-Version: 1.0\"" shape=ellipse]
23 [label="5:CtInvocationImpl@writer.println(\"JarIndex-Version: 1.0\")" shape=ellipse]
24 [label="6:CtExecutableReferenceImpl@println()" shape=ellipse]
25 [label="6:CtVirtualElement@println" shape=ellipse]
26 [label="6:CtVariableReadImpl@writer" shape=ellipse]
27 [label="6:CtInvocationImpl@writer.println()" shape=ellipse]
28 [label="7:CtExecutableReferenceImpl@println()" shape=ellipse]
29 [label="7:CtVirtualElement@println" shape=ellipse]
30 [label="7:CtVariableReadImpl@writer" shape=ellipse]
31 [label="7:CtExecutableReferenceImpl@getName()" shape=ellipse]
32 [label="7:CtVirtualElement@getName" shape=ellipse]
33 [label="7:CtFieldReadImpl@zipFile" shape=ellipse]
34 [label="7:CtInvocationImpl@zipFile.getName()" shape=ellipse]
35 [label="7:CtInvocationImpl@writer.println(zipFile.getName())" shape=ellipse]
36 [label="8:CtExecutableReferenceImpl@writeIndexLikeList(ArrayList,<unknown>,<unknown>)" shape=ellipse]
37 [label="8:CtVirtualElement@writeIndexLikeList" shape=ellipse]
38 [label="8:CtTypeReferenceImpl@ArrayList" shape=ellipse]
39 [label="8:CtExecutableReferenceImpl@keySet()" shape=ellipse]
40 [label="8:CtVirtualElement@keySet" shape=ellipse]
41 [label="8:CtFieldReadImpl@addedDirs" shape=ellipse]
42 [label="8:CtInvocationImpl@addedDirs.keySet()" shape=ellipse]
43 [label="8:CtConstructorCallImpl@new ArrayList(addedDirs.keySet())" shape=ellipse]
44 [label="8:CtFieldReadImpl@rootEntries" shape=ellipse]
45 [label="8:CtVariableReadImpl@writer" shape=ellipse]
46 [label="8:CtInvocationImpl@writeIndexLikeList(new ArrayList(addedDirs.keySet()), rootEntries, writer)" shape=ellipse]
47 [label="9:CtExecutableReferenceImpl@println()" shape=ellipse]
48 [label="9:CtVirtualElement@println" shape=ellipse]
49 [label="9:CtVariableReadImpl@writer" shape=ellipse]
50 [label="9:CtInvocationImpl@writer.println()" shape=ellipse]
51 [label="10:CtFieldReadImpl@indexJars" shape=ellipse]
52 [label="10:CtLiteralImpl@null" shape=ellipse]
53 [label="10:CtBinaryOperatorImpl@indexJars != null" shape=ellipse]
54 [label="11:CtTypeReferenceImpl@Manifest" shape=ellipse]
55 [label="11:CtExecutableReferenceImpl@createManifest()" shape=ellipse]
56 [label="11:CtVirtualElement@createManifest" shape=ellipse]
57 [label="11:CtInvocationImpl@createManifest()" shape=ellipse]
58 [label="11:CtVirtualElement@mf" shape=ellipse]
59 [label="11:CtLocalVariableImpl@Manifest mf = createManifest()" shape=ellipse]
60 [label="12:CtTypeReferenceImpl@Manifest.Attribute" shape=ellipse]
61 [label="12:CtTypeReferenceImpl@Manifest" shape=ellipse]
62 [label="12:CtExecutableReferenceImpl@getAttribute()" shape=ellipse]
63 [label="12:CtVirtualElement@getAttribute" shape=ellipse]
64 [label="12:CtExecutableReferenceImpl@getMainSection()" shape=ellipse]
65 [label="12:CtVirtualElement@getMainSection" shape=ellipse]
66 [label="12:CtVariableReadImpl@mf" shape=ellipse]
67 [label="12:CtInvocationImpl@mf.getMainSection()" shape=ellipse]
68 [label="12:CtTypeAccessImpl@ATTRIBUTE_CLASSPATH" shape=ellipse]
69 [label="12:CtInvocationImpl@mf.getMainSection().getAttribute(ATTRIBUTE_CLASSPATH)" shape=ellipse]
70 [label="12:CtVirtualElement@classpath" shape=ellipse]
71 [label="12:CtLocalVariableImpl@Manifest.Attribute classpath = mf.getMainSection().getAttribute(ATTRIBUTE_CLASSPATH)" shape=ellipse]
72 [label="13:CtVirtualElement@String[]" shape=ellipse]
73 [label="13:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
74 [label="13:CtLiteralImpl@null" shape=ellipse]
75 [label="13:CtVirtualElement@cpEntries" shape=ellipse]
76 [label="13:CtLocalVariableImpl@String[] cpEntries = null" shape=ellipse]
77 [label="14:CtVariableReadImpl@classpath" shape=ellipse]
78 [label="14:CtLiteralImpl@null" shape=ellipse]
79 [label="14:CtBinaryOperatorImpl@(classpath != null)" shape=ellipse]
80 [label="14:CtExecutableReferenceImpl@getValue()" shape=ellipse]
81 [label="14:CtVirtualElement@getValue" shape=ellipse]
82 [label="14:CtVariableReadImpl@classpath" shape=ellipse]
83 [label="14:CtInvocationImpl@classpath.getValue()" shape=ellipse]
84 [label="14:CtLiteralImpl@null" shape=ellipse]
85 [label="14:CtBinaryOperatorImpl@(classpath.getValue() != null)" shape=ellipse]
86 [label="14:CtBinaryOperatorImpl@(classpath != null) && (classpath.getValue() != null)" shape=ellipse]
87 [label="15:CtTypeReferenceImpl@StringTokenizer" shape=ellipse]
88 [label="15:CtTypeReferenceImpl@StringTokenizer" shape=ellipse]
89 [label="15:CtExecutableReferenceImpl@getValue()" shape=ellipse]
90 [label="15:CtVirtualElement@getValue" shape=ellipse]
91 [label="15:CtVariableReadImpl@classpath" shape=ellipse]
92 [label="15:CtInvocationImpl@classpath.getValue()" shape=ellipse]
93 [label="15:CtLiteralImpl@\" \"" shape=ellipse]
94 [label="15:CtConstructorCallImpl@new StringTokenizer(classpath.getValue(), \" \")" shape=ellipse]
95 [label="15:CtVirtualElement@tok" shape=ellipse]
96 [label="15:CtLocalVariableImpl@StringTokenizer tok = new StringTokenizer(classpath.getValue(), \" \")" shape=ellipse]
97 [label="16:CtVariableWriteImpl@cpEntries" shape=ellipse]
98 [label="16:CtNewArrayImpl@new String[tok.countTokens()]" shape=ellipse]
99 [label="16:CtInvocationImpl@tok.countTokens()" shape=ellipse]
100 [label="16:CtAssignmentImpl@cpEntries = new String[tok.countTokens()]" shape=ellipse]
101 [label="17:CtTypeReferenceImpl@int" shape=ellipse]
102 [label="17:CtLiteralImpl@0" shape=ellipse]
103 [label="17:CtVirtualElement@c" shape=ellipse]
104 [label="17:CtLocalVariableImpl@int c = 0" shape=ellipse]
105 [label="18:CtExecutableReferenceImpl@hasMoreTokens()" shape=ellipse]
106 [label="18:CtVirtualElement@hasMoreTokens" shape=ellipse]
107 [label="18:CtVariableReadImpl@tok" shape=ellipse]
108 [label="18:CtInvocationImpl@tok.hasMoreTokens()" shape=ellipse]
109 [label="19:CtVariableReadImpl@cpEntries" shape=ellipse]
110 [label="19:CtVariableWriteImpl@c" shape=ellipse]
111 [label="19:CtUnaryOperatorImpl@c++" shape=ellipse]
112 [label="19:CtArrayWriteImpl@cpEntries[c++]" shape=ellipse]
113 [label="19:CtExecutableReferenceImpl@nextToken()" shape=ellipse]
114 [label="19:CtVirtualElement@nextToken" shape=ellipse]
115 [label="19:CtVariableReadImpl@tok" shape=ellipse]
116 [label="19:CtInvocationImpl@tok.nextToken()" shape=ellipse]
117 [label="19:CtAssignmentImpl@cpEntries[c++] = tok.nextToken()" shape=ellipse]
118 [label="18:CtBlockImpl@\{
    cpEntries[c++] = tok.nextToken();
\}" shape=ellipse]
119 [label="18:CtWhileImpl@while (tok.hasMoreTokens()) \{
    cpEntries[c++] = tok.nextToken();
\} " shape=ellipse]
120 [label="14:CtBlockImpl@\{
    StringTokenizer tok = new StringTokenizer(classpath.getValue(), \" \");
    cpEntries = new String[tok.countTokens()];
    int c = 0;
    while (tok.hasMoreTokens()) \{
        cpEntries[c++] = tok.nextToken();
    \} 
\}" shape=ellipse]
121 [label="14:CtIfImpl@if ((classpath != null) && (classpath.getValue() != null)) \{
    StringTokenizer tok = new StringTokenizer(classpath.getValue(), \" \");
    cpEntries = new String[tok.countTokens()];
    int c = 0;
    while (tok.hasMoreTokens()) \{
        cpEntries[c++] = tok.nextToken();
    \} 
\}" shape=ellipse]
122 [label="22:CtVirtualElement@String[]" shape=ellipse]
123 [label="22:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
124 [label="22:CtExecutableReferenceImpl@list()" shape=ellipse]
125 [label="22:CtVirtualElement@list" shape=ellipse]
126 [label="22:CtFieldReadImpl@indexJars" shape=ellipse]
127 [label="22:CtInvocationImpl@indexJars.list()" shape=ellipse]
128 [label="22:CtVirtualElement@indexJarEntries" shape=ellipse]
129 [label="22:CtLocalVariableImpl@String[] indexJarEntries = indexJars.list()" shape=ellipse]
130 [label="23:CtTypeReferenceImpl@int" shape=ellipse]
131 [label="23:CtLiteralImpl@0" shape=ellipse]
132 [label="23:CtVirtualElement@i" shape=ellipse]
133 [label="23:CtLocalVariableImpl@int i = 0" shape=ellipse]
134 [label="23:CtVariableReadImpl@i" shape=ellipse]
135 [label="23:CtVariableReadImpl@indexJarEntries" shape=ellipse]
136 [label="23:CtLocalVariableReferenceImpl@indexJarEntries" shape=ellipse]
137 [label="23:CtFieldReadImpl@indexJarEntries.length" shape=ellipse]
138 [label="23:CtBinaryOperatorImpl@i < indexJarEntries.length" shape=ellipse]
139 [label="23:CtVariableWriteImpl@i" shape=ellipse]
140 [label="23:CtUnaryOperatorImpl@i++" shape=ellipse]
141 [label="24:CtTypeReferenceImpl@String" shape=ellipse]
142 [label="24:CtExecutableReferenceImpl@findJarName(java.lang.String,java.lang.String[])" shape=ellipse]
143 [label="24:CtVirtualElement@findJarName" shape=ellipse]
144 [label="24:CtVariableReadImpl@indexJarEntries" shape=ellipse]
145 [label="24:CtVariableReadImpl@i" shape=ellipse]
146 [label="24:CtArrayReadImpl@indexJarEntries[i]" shape=ellipse]
147 [label="24:CtVariableReadImpl@cpEntries" shape=ellipse]
148 [label="24:CtInvocationImpl@findJarName(indexJarEntries[i], cpEntries)" shape=ellipse]
149 [label="24:CtVirtualElement@name" shape=ellipse]
150 [label="24:CtLocalVariableImpl@String name = findJarName(indexJarEntries[i], cpEntries)" shape=ellipse]
151 [label="25:CtVariableReadImpl@name" shape=ellipse]
152 [label="25:CtLiteralImpl@null" shape=ellipse]
153 [label="25:CtBinaryOperatorImpl@name != null" shape=ellipse]
154 [label="26:CtTypeReferenceImpl@ArrayList" shape=ellipse]
155 [label="26:CtTypeReferenceImpl@ArrayList" shape=ellipse]
156 [label="26:CtConstructorCallImpl@new ArrayList()" shape=ellipse]
157 [label="26:CtVirtualElement@dirs" shape=ellipse]
158 [label="26:CtLocalVariableImpl@ArrayList dirs = new ArrayList()" shape=ellipse]
159 [label="27:CtTypeReferenceImpl@ArrayList" shape=ellipse]
160 [label="27:CtTypeReferenceImpl@ArrayList" shape=ellipse]
161 [label="27:CtConstructorCallImpl@new ArrayList()" shape=ellipse]
162 [label="27:CtVirtualElement@files" shape=ellipse]
163 [label="27:CtLocalVariableImpl@ArrayList files = new ArrayList()" shape=ellipse]
164 [label="28:CtExecutableReferenceImpl@grabFilesAndDirs(java.lang.String,<unknown>,<unknown>)" shape=ellipse]
165 [label="28:CtVirtualElement@grabFilesAndDirs" shape=ellipse]
166 [label="28:CtVariableReadImpl@indexJarEntries" shape=ellipse]
167 [label="28:CtVariableReadImpl@i" shape=ellipse]
168 [label="28:CtArrayReadImpl@indexJarEntries[i]" shape=ellipse]
169 [label="28:CtVariableReadImpl@dirs" shape=ellipse]
170 [label="28:CtVariableReadImpl@files" shape=ellipse]
171 [label="28:CtInvocationImpl@grabFilesAndDirs(indexJarEntries[i], dirs, files)" shape=ellipse]
172 [label="29:CtExecutableReferenceImpl@size()" shape=ellipse]
173 [label="29:CtVirtualElement@size" shape=ellipse]
174 [label="29:CtVariableReadImpl@dirs" shape=ellipse]
175 [label="29:CtInvocationImpl@dirs.size()" shape=ellipse]
176 [label="29:CtExecutableReferenceImpl@size()" shape=ellipse]
177 [label="29:CtVirtualElement@size" shape=ellipse]
178 [label="29:CtVariableReadImpl@files" shape=ellipse]
179 [label="29:CtInvocationImpl@files.size()" shape=ellipse]
180 [label="29:CtBinaryOperatorImpl@(dirs.size() + files.size())" shape=ellipse]
181 [label="29:CtLiteralImpl@0" shape=ellipse]
182 [label="29:CtBinaryOperatorImpl@(dirs.size() + files.size()) > 0" shape=ellipse]
183 [label="30:CtExecutableReferenceImpl@println(java.lang.String)" shape=ellipse]
184 [label="30:CtVirtualElement@println" shape=ellipse]
185 [label="30:CtVariableReadImpl@writer" shape=ellipse]
186 [label="30:CtVariableReadImpl@name" shape=ellipse]
187 [label="30:CtInvocationImpl@writer.println(name)" shape=ellipse]
188 [label="31:CtExecutableReferenceImpl@writeIndexLikeList(<unknown>,<unknown>,<unknown>)" shape=ellipse]
189 [label="31:CtVirtualElement@writeIndexLikeList" shape=ellipse]
190 [label="31:CtVariableReadImpl@dirs" shape=ellipse]
191 [label="31:CtVariableReadImpl@files" shape=ellipse]
192 [label="31:CtVariableReadImpl@writer" shape=ellipse]
193 [label="31:CtInvocationImpl@writeIndexLikeList(dirs, files, writer)" shape=ellipse]
194 [label="32:CtExecutableReferenceImpl@println()" shape=ellipse]
195 [label="32:CtVirtualElement@println" shape=ellipse]
196 [label="32:CtVariableReadImpl@writer" shape=ellipse]
197 [label="32:CtInvocationImpl@writer.println()" shape=ellipse]
198 [label="29:CtBlockImpl@\{
    writer.println(name);
    writeIndexLikeList(dirs, files, writer);
    writer.println();
\}" shape=ellipse]
199 [label="29:CtIfImpl@if ((dirs.size() + files.size()) > 0) \{
    writer.println(name);
    writeIndexLikeList(dirs, files, writer);
    writer.println();
\}" shape=ellipse]
200 [label="25:CtBlockImpl@\{
    ArrayList dirs = new ArrayList();
    ArrayList files = new ArrayList();
    grabFilesAndDirs(indexJarEntries[i], dirs, files);
    if ((dirs.size() + files.size()) > 0) \{
        writer.println(name);
        writeIndexLikeList(dirs, files, writer);
        writer.println();
    \}
\}" shape=ellipse]
201 [label="25:CtIfImpl@if (name != null) \{
    ArrayList dirs = new ArrayList();
    ArrayList files = new ArrayList();
    grabFilesAndDirs(indexJarEntries[i], dirs, files);
    if ((dirs.size() + files.size()) > 0) \{
        writer.println(name);
        writeIndexLikeList(dirs, files, writer);
        writer.println();
    \}
\}" shape=ellipse]
202 [label="23:CtBlockImpl@\{
    String name = findJarName(indexJarEntries[i], cpEntries);
    if (name != null) \{
        ArrayList dirs = new ArrayList();
        ArrayList files = new ArrayList();
        grabFilesAndDirs(indexJarEntries[i], dirs, files);
        if ((dirs.size() + files.size()) > 0) \{
            writer.println(name);
            writeIndexLikeList(dirs, files, writer);
            writer.println();
        \}
    \}
\}" shape=ellipse]
203 [label="23:CtForImpl@for (int i = 0; i < indexJarEntries.length; i++) \{
    String name = findJarName(indexJarEntries[i], cpEntries);
    if (name != null) \{
        ArrayList dirs = new ArrayList();
        ArrayList files = new ArrayList();
        grabFilesAndDirs(indexJarEntries[i], dirs, files);
        if ((dirs.size() + files.size()) > 0) \{
            writer.println(name);
            writeIndexLikeList(dirs, files, writer);
            writer.println();
        \}
    \}
\}" shape=ellipse]
204 [label="10:CtBlockImpl@\{
    Manifest mf = createManifest();
    Manifest.Attribute classpath = mf.getMainSection().getAttribute(ATTRIBUTE_CLASSPATH);
    String[] cpEntries = null;
    if ((classpath != null) && (classpath.getValue() != null)) \{
        StringTokenizer tok = new StringTokenizer(classpath.getValue(), \" \");
        cpEntries = new String[tok.countTokens()];
        int c = 0;
        while (tok.hasMoreTokens()) \{
            cpEntries[c++] = tok.nextToken();
        \} 
    \}
    String[] indexJarEntries = indexJars.list();
    for (int i = 0; i < indexJarEntries.length; i++) \{
        String name = findJarName(indexJarEntries[i], cpEntries);
        if (name != null) \{
            ArrayList dirs = new ArrayList();
            ArrayList files = new ArrayList();
            grabFilesAndDirs(indexJarEntries[i], dirs, files);
            if ((dirs.size() + files.size()) > 0) \{
                writer.println(name);
                writeIndexLikeList(dirs, files, writer);
                writer.println();
            \}
        \}
    \}
\}" shape=ellipse]
205 [label="10:CtIfImpl@if (indexJars != null) \{
    Manifest mf = createManifest();
    Manifest.Attribute classpath = mf.getMainSection().getAttribute(ATTRIBUTE_CLASSPATH);
    String[] cpEntries = null;
    if ((classpath != null) && (classpath.getValue() != null)) \{
        StringTokenizer tok = new StringTokenizer(classpath.getValue(), \" \");
        cpEntries = new String[tok.countTokens()];
        int c = 0;
        while (tok.hasMoreTokens()) \{
            cpEntries[c++] = tok.nextToken();
        \} 
    \}
    String[] indexJarEntries = indexJars.list();
    for (int i = 0; i < indexJarEntries.length; i++) \{
        String name = findJarName(indexJarEntries[i], cpEntries);
        if (name != null) \{
            ArrayList dirs = new ArrayList();
            ArrayList files = new ArrayList();
            grabFilesAndDirs(indexJarEntries[i], dirs, files);
            if ((dirs.size() + files.size()) > 0) \{
                writer.println(name);
                writeIndexLikeList(dirs, files, writer);
                writer.println();
            \}
        \}
    \}
\}" shape=ellipse]
206 [label="37:CtExecutableReferenceImpl@close()" shape=ellipse]
207 [label="37:CtVirtualElement@close" shape=ellipse]
208 [label="37:CtVariableReadImpl@writer" shape=ellipse]
209 [label="37:CtInvocationImpl@writer.close()" shape=ellipse]
210 [label="38:CtTypeReferenceImpl@ByteArrayInputStream" shape=ellipse]
211 [label="38:CtTypeReferenceImpl@ByteArrayInputStream" shape=ellipse]
212 [label="38:CtExecutableReferenceImpl@toByteArray()" shape=ellipse]
213 [label="38:CtVirtualElement@toByteArray" shape=ellipse]
214 [label="38:CtVariableReadImpl@baos" shape=ellipse]
215 [label="38:CtInvocationImpl@baos.toByteArray()" shape=ellipse]
216 [label="38:CtConstructorCallImpl@new ByteArrayInputStream(baos.toByteArray())" shape=ellipse]
217 [label="38:CtVirtualElement@bais" shape=ellipse]
218 [label="38:CtLocalVariableImpl@ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())" shape=ellipse]
219 [label="40:CtExecutableReferenceImpl@zipFile(ByteArrayInputStream,ZipOutputStream,long,<unknown>)" shape=ellipse]
220 [label="40:CtVirtualElement@zipFile" shape=ellipse]
221 [label="40:CtSuperAccessImpl@super" shape=ellipse]
222 [label="40:CtVariableReadImpl@bais" shape=ellipse]
223 [label="40:CtVariableReadImpl@zOut" shape=ellipse]
224 [label="40:CtTypeAccessImpl@INDEX_NAME" shape=ellipse]
225 [label="40:CtExecutableReferenceImpl@currentTimeMillis()" shape=ellipse]
226 [label="40:CtVirtualElement@currentTimeMillis" shape=ellipse]
227 [label="40:CtTypeAccessImpl@System" shape=ellipse]
228 [label="40:CtInvocationImpl@System.currentTimeMillis()" shape=ellipse]
229 [label="40:CtLiteralImpl@null" shape=ellipse]
230 [label="40:CtTypeAccessImpl@DEFAULT_FILE_MODE" shape=ellipse]
231 [label="40:CtInvocationImpl@super.zipFile(bais, zOut, INDEX_NAME, System.currentTimeMillis(), null, DEFAULT_FILE_MODE)" shape=ellipse]
232 [label="39:CtBlockImpl@\{
    super.zipFile(bais, zOut, INDEX_NAME, System.currentTimeMillis(), null, DEFAULT_FILE_MODE);
\}" shape=ellipse]
233 [label="42:CtExecutableReferenceImpl@close(ByteArrayInputStream)" shape=ellipse]
234 [label="42:CtVirtualElement@close" shape=ellipse]
235 [label="42:CtTypeAccessImpl@FileUtils" shape=ellipse]
236 [label="42:CtVariableReadImpl@bais" shape=ellipse]
237 [label="42:CtInvocationImpl@FileUtils.close(bais)" shape=ellipse]
238 [label="41:CtBlockImpl@\{
    FileUtils.close(bais);
\}" shape=ellipse]
239 [label="39:CtTryImpl@try \{
    super.zipFile(bais, zOut, INDEX_NAME, System.currentTimeMillis(), null, DEFAULT_FILE_MODE);
\} finally \{
    FileUtils.close(bais);
\}" shape=ellipse]
240 [label="2:CtBlockImpl@\{
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    PrintWriter writer = new PrintWriter(new OutputStreamWriter(baos, \"UTF8\"));
    writer.println(\"JarIndex-Version: 1.0\");
    writer.println();
    writer.println(zipFile.getName());
    writeIndexLikeList(new ArrayList(addedDirs.keySet()), rootEntries, writer);
    writer.println();
    if (indexJars != null) \{
        Manifest mf = createManifest();
        Manifest.Attribute classpath = mf.getMainSection().getAttribute(ATTRIBUTE_CLASSPATH);
        String[] cpEntries = null;
        if ((classpath != null) && (classpath.getValue() != null)) \{
            StringTokenizer tok = new StringTokenizer(classpath.getValue(), \" \");
            cpEntries = new String[tok.countTokens()];
            int c = 0;
            while (tok.hasMoreTokens()) \{
                cpEntries[c++] = tok.nextToken();
            \} 
        \}
        String[] indexJarEntries = indexJars.list();
        for (int i = 0; i < indexJarEntries.length; i++) \{
            String name = findJarName(indexJarEntries[i], cpEntries);
            if (name != null) \{
                ArrayList dirs = new ArrayList();
                ArrayList files = new ArrayList();
                grabFilesAndDirs(indexJarEntries[i], dirs, files);
                if ((dirs.size() + files.size()) > 0) \{
                    writer.println(name);
                    writeIndexLikeList(dirs, files, writer);
                    writer.println();
                \}
            \}
        \}
    \}
    writer.close();
    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
    try \{
        super.zipFile(bais, zOut, INDEX_NAME, System.currentTimeMillis(), null, DEFAULT_FILE_MODE);
    \} finally \{
        FileUtils.close(bais);
    \}
\}" shape=ellipse]
241 [label="2:CtMethodImpl@private void createIndexList(ZipOutputStream zOut) throws IOException \{
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    PrintWriter writer = new PrintWriter(new OutputStreamWriter(baos, \"UTF8\"));
    writer.println(\"JarIndex-Version: 1.0\");
    writer.println();
    writer.println(zipFile.getName());
    writeIndexLikeList(new ArrayList(addedDirs.keySet()), rootEntries, writer);
    writer.println();
    if (indexJars != null) \{
        Manifest mf = createManifest();
        Manifest.Attribute classpath = mf.getMainSection().getAttribute(ATTRIBUTE_CLASSPATH);
        String[] cpEntries = null;
        if ((classpath != null) && (classpath.getValue() != null)) \{
            StringTokenizer tok = new StringTokenizer(classpath.getValue(), \" \");
            cpEntries = new String[tok.countTokens()];
            int c = 0;
            while (tok.hasMoreTokens()) \{
                cpEntries[c++] = tok.nextToken();
            \} 
        \}
        String[] indexJarEntries = indexJars.list();
        for (int i = 0; i < indexJarEntries.length; i++) \{
            String name = findJarName(indexJarEntries[i], cpEntries);
            if (name != null) \{
                ArrayList dirs = new ArrayList();
                ArrayList files = new ArrayList();
                grabFilesAndDirs(indexJarEntries[i], dirs, files);
                if ((dirs.size() + files.size()) > 0) \{
                    writer.println(name);
                    writeIndexLikeList(dirs, files, writer);
                    writer.println();
                \}
            \}
        \}
    \}
    writer.close();
    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
    try \{
        super.zipFile(bais, zOut, INDEX_NAME, System.currentTimeMillis(), null, DEFAULT_FILE_MODE);
    \} finally \{
        FileUtils.close(bais);
    \}
\}" shape=ellipse]
242 [label="37:Insert@INSERT" shape=ellipse]
243 [label="37:CtIfImpl@if (writer.checkError()) \{
    throw new IOException(\"Encountered an error writing jar index\");
\}" shape=ellipse]
2 -> 3 [label="AST"];
8 -> 13 [label="Define-Use"];
8 -> 214 [label="Define-Use"];
9 -> 8 [label="AST"];
9 -> 5 [label="AST"];
9 -> 7 [label="AST"];
13 -> 17 [label="Data Dep"];
15 -> 13 [label="AST"];
15 -> 14 [label="AST"];
16 -> 15 [label="AST"];
17 -> 21 [label="Define-Use"];
17 -> 26 [label="Define-Use"];
17 -> 30 [label="Define-Use"];
17 -> 45 [label="Define-Use"];
17 -> 49 [label="Define-Use"];
17 -> 185 [label="Define-Use"];
17 -> 192 [label="Define-Use"];
17 -> 196 [label="Define-Use"];
17 -> 208 [label="Define-Use"];
18 -> 17 [label="AST"];
18 -> 10 [label="AST"];
18 -> 16 [label="AST"];
23 -> 20 [label="AST"];
23 -> 21 [label="AST"];
23 -> 19 [label="AST"];
23 -> 22 [label="AST"];
27 -> 25 [label="AST"];
27 -> 26 [label="AST"];
27 -> 24 [label="AST"];
34 -> 32 [label="AST"];
34 -> 33 [label="AST"];
34 -> 31 [label="AST"];
35 -> 29 [label="AST"];
35 -> 30 [label="AST"];
35 -> 28 [label="AST"];
35 -> 34 [label="AST"];
42 -> 40 [label="AST"];
42 -> 41 [label="AST"];
42 -> 39 [label="AST"];
43 -> 42 [label="AST"];
46 -> 37 [label="AST"];
46 -> 36 [label="AST"];
46 -> 43 [label="AST"];
46 -> 44 [label="AST"];
46 -> 45 [label="AST"];
50 -> 48 [label="AST"];
50 -> 49 [label="AST"];
50 -> 47 [label="AST"];
53 -> 51 [label="AST"];
53 -> 52 [label="AST"];
53 -> 204 [label="Control Dep"];
53 -> 59 [label="Control Dep"];
53 -> 57 [label="Control Dep"];
53 -> 55 [label="Control Dep"];
53 -> 71 [label="Control Dep"];
53 -> 69 [label="Control Dep"];
53 -> 62 [label="Control Dep"];
53 -> 67 [label="Control Dep"];
53 -> 64 [label="Control Dep"];
53 -> 66 [label="Control Dep"];
53 -> 68 [label="Control Dep"];
53 -> 76 [label="Control Dep"];
53 -> 73 [label="Control Dep"];
53 -> 74 [label="Control Dep"];
53 -> 121 [label="Control Dep"];
53 -> 86 [label="Control Dep"];
53 -> 79 [label="Control Dep"];
53 -> 77 [label="Control Dep"];
53 -> 78 [label="Control Dep"];
53 -> 85 [label="Control Dep"];
53 -> 83 [label="Control Dep"];
53 -> 80 [label="Control Dep"];
53 -> 82 [label="Control Dep"];
53 -> 84 [label="Control Dep"];
53 -> 129 [label="Control Dep"];
53 -> 123 [label="Control Dep"];
53 -> 127 [label="Control Dep"];
53 -> 124 [label="Control Dep"];
53 -> 126 [label="Control Dep"];
53 -> 203 [label="Control Dep"];
53 -> 133 [label="Control Dep"];
53 -> 131 [label="Control Dep"];
53 -> 138 [label="Control Dep"];
53 -> 134 [label="Control Dep"];
53 -> 137 [label="Control Dep"];
53 -> 135 [label="Control Dep"];
53 -> 140 [label="Control Dep"];
53 -> 139 [label="Control Dep"];
57 -> 56 [label="AST"];
57 -> 55 [label="AST"];
58 -> 66 [label="Define-Use"];
59 -> 58 [label="AST"];
59 -> 54 [label="AST"];
59 -> 57 [label="AST"];
60 -> 61 [label="AST"];
66 -> 70 [label="Data Dep"];
67 -> 65 [label="AST"];
67 -> 66 [label="AST"];
67 -> 64 [label="AST"];
69 -> 63 [label="AST"];
69 -> 67 [label="AST"];
69 -> 62 [label="AST"];
69 -> 68 [label="AST"];
70 -> 77 [label="Define-Use"];
70 -> 82 [label="Define-Use"];
70 -> 91 [label="Define-Use"];
71 -> 70 [label="AST"];
71 -> 60 [label="AST"];
71 -> 69 [label="AST"];
73 -> 72 [label="AST"];
75 -> 109 [label="Define-Use"];
75 -> 147 [label="Define-Use"];
76 -> 75 [label="AST"];
76 -> 73 [label="AST"];
76 -> 74 [label="AST"];
79 -> 77 [label="AST"];
79 -> 78 [label="AST"];
83 -> 81 [label="AST"];
83 -> 82 [label="AST"];
83 -> 80 [label="AST"];
85 -> 83 [label="AST"];
85 -> 84 [label="AST"];
86 -> 79 [label="AST"];
86 -> 85 [label="AST"];
86 -> 120 [label="Control Dep"];
86 -> 96 [label="Control Dep"];
86 -> 94 [label="Control Dep"];
86 -> 92 [label="Control Dep"];
86 -> 89 [label="Control Dep"];
86 -> 91 [label="Control Dep"];
86 -> 93 [label="Control Dep"];
86 -> 100 [label="Control Dep"];
86 -> 97 [label="Control Dep"];
86 -> 98 [label="Control Dep"];
86 -> 104 [label="Control Dep"];
86 -> 102 [label="Control Dep"];
86 -> 119 [label="Control Dep"];
86 -> 108 [label="Control Dep"];
86 -> 105 [label="Control Dep"];
86 -> 107 [label="Control Dep"];
91 -> 95 [label="Data Dep"];
92 -> 90 [label="AST"];
92 -> 91 [label="AST"];
92 -> 89 [label="AST"];
94 -> 92 [label="AST"];
94 -> 93 [label="AST"];
95 -> 107 [label="Define-Use"];
95 -> 115 [label="Define-Use"];
96 -> 95 [label="AST"];
96 -> 87 [label="AST"];
96 -> 94 [label="AST"];
97 -> 109 [label="Define-Use"];
97 -> 147 [label="Define-Use"];
98 -> 99 [label="AST"];
100 -> 97 [label="AST"];
100 -> 98 [label="AST"];
104 -> 103 [label="AST"];
104 -> 101 [label="AST"];
104 -> 102 [label="AST"];
108 -> 106 [label="AST"];
108 -> 107 [label="AST"];
108 -> 105 [label="AST"];
108 -> 118 [label="Control Dep"];
108 -> 117 [label="Control Dep"];
108 -> 112 [label="Control Dep"];
108 -> 109 [label="Control Dep"];
108 -> 111 [label="Control Dep"];
108 -> 110 [label="Control Dep"];
108 -> 116 [label="Control Dep"];
108 -> 113 [label="Control Dep"];
108 -> 115 [label="Control Dep"];
111 -> 110 [label="AST"];
112 -> 109 [label="AST"];
112 -> 111 [label="AST"];
115 -> 112 [label="Data Dep"];
116 -> 114 [label="AST"];
116 -> 115 [label="AST"];
116 -> 113 [label="AST"];
117 -> 112 [label="AST"];
117 -> 116 [label="AST"];
118 -> 117 [label="AST"];
119 -> 108 [label="AST"];
119 -> 118 [label="AST"];
120 -> 96 [label="AST"];
120 -> 100 [label="AST"];
120 -> 104 [label="AST"];
120 -> 119 [label="AST"];
121 -> 86 [label="AST"];
121 -> 120 [label="AST"];
123 -> 122 [label="AST"];
126 -> 128 [label="Data Dep"];
127 -> 125 [label="AST"];
127 -> 126 [label="AST"];
127 -> 124 [label="AST"];
128 -> 135 [label="Define-Use"];
128 -> 144 [label="Define-Use"];
128 -> 146 [label="Define-Use"];
128 -> 166 [label="Define-Use"];
128 -> 168 [label="Define-Use"];
129 -> 128 [label="AST"];
129 -> 123 [label="AST"];
129 -> 127 [label="AST"];
132 -> 134 [label="Define-Use"];
132 -> 145 [label="Define-Use"];
132 -> 167 [label="Define-Use"];
133 -> 132 [label="AST"];
133 -> 130 [label="AST"];
133 -> 131 [label="AST"];
135 -> 136 [label="AST"];
137 -> 135 [label="AST"];
138 -> 134 [label="AST"];
138 -> 137 [label="AST"];
138 -> 202 [label="Control Dep"];
138 -> 150 [label="Control Dep"];
138 -> 148 [label="Control Dep"];
138 -> 142 [label="Control Dep"];
138 -> 146 [label="Control Dep"];
138 -> 144 [label="Control Dep"];
138 -> 145 [label="Control Dep"];
138 -> 147 [label="Control Dep"];
138 -> 201 [label="Control Dep"];
138 -> 153 [label="Control Dep"];
138 -> 151 [label="Control Dep"];
138 -> 152 [label="Control Dep"];
139 -> 145 [label="Define-Use"];
139 -> 167 [label="Define-Use"];
140 -> 139 [label="AST"];
146 -> 144 [label="AST"];
146 -> 145 [label="AST"];
146 -> 149 [label="Data Dep"];
147 -> 149 [label="Data Dep"];
148 -> 143 [label="AST"];
148 -> 142 [label="AST"];
148 -> 146 [label="AST"];
148 -> 147 [label="AST"];
149 -> 151 [label="Define-Use"];
149 -> 186 [label="Define-Use"];
150 -> 149 [label="AST"];
150 -> 141 [label="AST"];
150 -> 148 [label="AST"];
153 -> 151 [label="AST"];
153 -> 152 [label="AST"];
153 -> 200 [label="Control Dep"];
153 -> 158 [label="Control Dep"];
153 -> 156 [label="Control Dep"];
153 -> 163 [label="Control Dep"];
153 -> 161 [label="Control Dep"];
153 -> 171 [label="Control Dep"];
153 -> 164 [label="Control Dep"];
153 -> 168 [label="Control Dep"];
153 -> 166 [label="Control Dep"];
153 -> 167 [label="Control Dep"];
153 -> 169 [label="Control Dep"];
153 -> 170 [label="Control Dep"];
153 -> 199 [label="Control Dep"];
153 -> 182 [label="Control Dep"];
153 -> 180 [label="Control Dep"];
153 -> 175 [label="Control Dep"];
153 -> 172 [label="Control Dep"];
153 -> 174 [label="Control Dep"];
153 -> 179 [label="Control Dep"];
153 -> 176 [label="Control Dep"];
153 -> 178 [label="Control Dep"];
153 -> 181 [label="Control Dep"];
157 -> 169 [label="Define-Use"];
157 -> 174 [label="Define-Use"];
157 -> 190 [label="Define-Use"];
158 -> 157 [label="AST"];
158 -> 154 [label="AST"];
158 -> 156 [label="AST"];
162 -> 170 [label="Define-Use"];
162 -> 178 [label="Define-Use"];
162 -> 191 [label="Define-Use"];
163 -> 162 [label="AST"];
163 -> 159 [label="AST"];
163 -> 161 [label="AST"];
168 -> 166 [label="AST"];
168 -> 167 [label="AST"];
171 -> 165 [label="AST"];
171 -> 164 [label="AST"];
171 -> 168 [label="AST"];
171 -> 169 [label="AST"];
171 -> 170 [label="AST"];
175 -> 173 [label="AST"];
175 -> 174 [label="AST"];
175 -> 172 [label="AST"];
179 -> 177 [label="AST"];
179 -> 178 [label="AST"];
179 -> 176 [label="AST"];
180 -> 175 [label="AST"];
180 -> 179 [label="AST"];
182 -> 180 [label="AST"];
182 -> 181 [label="AST"];
182 -> 198 [label="Control Dep"];
182 -> 187 [label="Control Dep"];
182 -> 183 [label="Control Dep"];
182 -> 185 [label="Control Dep"];
182 -> 186 [label="Control Dep"];
182 -> 193 [label="Control Dep"];
182 -> 188 [label="Control Dep"];
182 -> 190 [label="Control Dep"];
182 -> 191 [label="Control Dep"];
182 -> 192 [label="Control Dep"];
182 -> 197 [label="Control Dep"];
182 -> 194 [label="Control Dep"];
182 -> 196 [label="Control Dep"];
187 -> 184 [label="AST"];
187 -> 185 [label="AST"];
187 -> 183 [label="AST"];
187 -> 186 [label="AST"];
193 -> 189 [label="AST"];
193 -> 188 [label="AST"];
193 -> 190 [label="AST"];
193 -> 191 [label="AST"];
193 -> 192 [label="AST"];
197 -> 195 [label="AST"];
197 -> 196 [label="AST"];
197 -> 194 [label="AST"];
198 -> 187 [label="AST"];
198 -> 193 [label="AST"];
198 -> 197 [label="AST"];
199 -> 182 [label="AST"];
199 -> 198 [label="AST"];
200 -> 158 [label="AST"];
200 -> 163 [label="AST"];
200 -> 171 [label="AST"];
200 -> 199 [label="AST"];
201 -> 153 [label="AST"];
201 -> 200 [label="AST"];
202 -> 150 [label="AST"];
202 -> 201 [label="AST"];
203 -> 133 [label="AST"];
203 -> 138 [label="AST"];
203 -> 140 [label="AST"];
203 -> 202 [label="AST"];
204 -> 59 [label="AST"];
204 -> 71 [label="AST"];
204 -> 76 [label="AST"];
204 -> 121 [label="AST"];
204 -> 129 [label="AST"];
204 -> 203 [label="AST"];
205 -> 53 [label="AST"];
205 -> 204 [label="AST"];
209 -> 207 [label="AST"];
209 -> 208 [label="AST"];
209 -> 206 [label="AST"];
214 -> 217 [label="Data Dep"];
215 -> 213 [label="AST"];
215 -> 214 [label="AST"];
215 -> 212 [label="AST"];
216 -> 215 [label="AST"];
217 -> 222 [label="Define-Use"];
217 -> 236 [label="Define-Use"];
218 -> 217 [label="AST"];
218 -> 210 [label="AST"];
218 -> 216 [label="AST"];
228 -> 226 [label="AST"];
228 -> 227 [label="AST"];
228 -> 225 [label="AST"];
231 -> 220 [label="AST"];
231 -> 221 [label="AST"];
231 -> 219 [label="AST"];
231 -> 222 [label="AST"];
231 -> 223 [label="AST"];
231 -> 224 [label="AST"];
231 -> 228 [label="AST"];
231 -> 229 [label="AST"];
231 -> 230 [label="AST"];
232 -> 231 [label="AST"];
237 -> 234 [label="AST"];
237 -> 235 [label="AST"];
237 -> 233 [label="AST"];
237 -> 236 [label="AST"];
238 -> 237 [label="AST"];
239 -> 232 [label="AST"];
239 -> 238 [label="AST"];
240 -> 9 [label="AST"];
240 -> 18 [label="AST"];
240 -> 23 [label="AST"];
240 -> 27 [label="AST"];
240 -> 35 [label="AST"];
240 -> 46 [label="AST"];
240 -> 50 [label="AST"];
240 -> 205 [label="AST"];
240 -> 209 [label="AST"];
240 -> 218 [label="AST"];
240 -> 239 [label="AST"];
241 -> 1 [label="AST"];
241 -> 0 [label="AST"];
241 -> 2 [label="AST"];
241 -> 4 [label="AST"];
241 -> 240 [label="AST"];
241 -> 242 [label="Action"];
242 -> 243 [label="Action"];
}