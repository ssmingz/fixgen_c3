digraph "execute#?" {
0 [label="2:CtTypeReferenceImpl@boolean" shape=ellipse]
1 [label="2:CtVirtualElement@execute" shape=ellipse]
2 [label="2:CtTypeReferenceImpl@TaskException" shape=ellipse]
3 [label="3:CtExecutableReferenceImpl@debug(java.lang.String)" shape=ellipse]
4 [label="3:CtVirtualElement@debug" shape=ellipse]
5 [label="3:CtExecutableReferenceImpl@getLogger()" shape=ellipse]
6 [label="3:CtVirtualElement@getLogger" shape=ellipse]
7 [label="3:CtInvocationImpl@getLogger()" shape=ellipse]
8 [label="3:CtLiteralImpl@\"Using SUN rmic compiler\"" shape=ellipse]
9 [label="3:CtInvocationImpl@getLogger().debug(\"Using SUN rmic compiler\")" shape=ellipse]
10 [label="4:CtTypeReferenceImpl@Commandline" shape=ellipse]
11 [label="4:CtExecutableReferenceImpl@setupRmicCommand()" shape=ellipse]
12 [label="4:CtVirtualElement@setupRmicCommand" shape=ellipse]
13 [label="4:CtInvocationImpl@setupRmicCommand()" shape=ellipse]
14 [label="4:CtVirtualElement@cmd" shape=ellipse]
15 [label="4:CtLocalVariableImpl@Commandline cmd = setupRmicCommand()" shape=ellipse]
16 [label="6:CtTypeReferenceImpl@Class" shape=ellipse]
17 [label="6:CtExecutableReferenceImpl@forName(java.lang.String)" shape=ellipse]
18 [label="6:CtVirtualElement@forName" shape=ellipse]
19 [label="6:CtTypeAccessImpl@Class" shape=ellipse]
20 [label="6:CtLiteralImpl@\"sun.rmi.rmic.Main\"" shape=ellipse]
21 [label="6:CtInvocationImpl@Class.forName(\"sun.rmi.rmic.Main\")" shape=ellipse]
22 [label="6:CtVirtualElement@c" shape=ellipse]
23 [label="6:CtLocalVariableImpl@Class c = Class.forName(\"sun.rmi.rmic.Main\")" shape=ellipse]
24 [label="7:CtTypeReferenceImpl@Constructor" shape=ellipse]
25 [label="7:CtExecutableReferenceImpl@getConstructor(java.lang.Class[])" shape=ellipse]
26 [label="7:CtVirtualElement@getConstructor" shape=ellipse]
27 [label="7:CtVariableReadImpl@c" shape=ellipse]
28 [label="7:CtNewArrayImpl@new Class[]\{ OutputStream.class, String.class \}" shape=ellipse]
29 [label="7:CtFieldReadImpl@OutputStream.class" shape=ellipse]
30 [label="7:CtFieldReadImpl@String.class" shape=ellipse]
31 [label="7:CtInvocationImpl@c.getConstructor(new Class[]\{ OutputStream.class, String.class \})" shape=ellipse]
32 [label="7:CtVirtualElement@cons" shape=ellipse]
33 [label="7:CtLocalVariableImpl@Constructor cons = c.getConstructor(new Class[]\{ OutputStream.class, String.class \})" shape=ellipse]
34 [label="8:CtTypeReferenceImpl@Object" shape=ellipse]
35 [label="8:CtExecutableReferenceImpl@newInstance(java.lang.Object[])" shape=ellipse]
36 [label="8:CtVirtualElement@newInstance" shape=ellipse]
37 [label="8:CtVariableReadImpl@cons" shape=ellipse]
38 [label="8:CtNewArrayImpl@new Object[]\{ System.out, \"rmic\" \}" shape=ellipse]
39 [label="8:CtFieldReadImpl@System.out" shape=ellipse]
40 [label="8:CtLiteralImpl@\"rmic\"" shape=ellipse]
41 [label="8:CtInvocationImpl@cons.newInstance(new Object[]\{ System.out, \"rmic\" \})" shape=ellipse]
42 [label="8:CtVirtualElement@rmic" shape=ellipse]
43 [label="8:CtLocalVariableImpl@Object rmic = cons.newInstance(new Object[]\{ System.out, \"rmic\" \})" shape=ellipse]
44 [label="9:CtTypeReferenceImpl@Method" shape=ellipse]
45 [label="9:CtExecutableReferenceImpl@getMethod(java.lang.String,java.lang.Class[])" shape=ellipse]
46 [label="9:CtVirtualElement@getMethod" shape=ellipse]
47 [label="9:CtVariableReadImpl@c" shape=ellipse]
48 [label="9:CtLiteralImpl@\"compile\"" shape=ellipse]
49 [label="9:CtNewArrayImpl@new Class[]\{ String[].class \}" shape=ellipse]
50 [label="9:CtFieldReadImpl@String[].class" shape=ellipse]
51 [label="9:CtInvocationImpl@c.getMethod(\"compile\", new Class[]\{ String[].class \})" shape=ellipse]
52 [label="9:CtVirtualElement@doRmic" shape=ellipse]
53 [label="9:CtLocalVariableImpl@Method doRmic = c.getMethod(\"compile\", new Class[]\{ String[].class \})" shape=ellipse]
54 [label="10:CtTypeReferenceImpl@Boolean" shape=ellipse]
55 [label="10:CtExecutableReferenceImpl@invoke(java.lang.Object,java.lang.Object[])" shape=ellipse]
56 [label="10:CtVirtualElement@invoke" shape=ellipse]
57 [label="10:CtVariableReadImpl@doRmic" shape=ellipse]
58 [label="10:CtVariableReadImpl@rmic" shape=ellipse]
59 [label="10:CtNewArrayImpl@new Object[]\{ cmd.getArguments() \}" shape=ellipse]
60 [label="10:CtInvocationImpl@cmd.getArguments()" shape=ellipse]
61 [label="10:CtInvocationImpl@((Boolean) (doRmic.invoke(rmic, new Object[]\{ cmd.getArguments() \})))" shape=ellipse]
62 [label="10:CtTypeReferenceImpl@Boolean" shape=ellipse]
63 [label="10:CtVirtualElement@ok" shape=ellipse]
64 [label="10:CtLocalVariableImpl@Boolean ok = ((Boolean) (doRmic.invoke(rmic, new Object[]\{ cmd.getArguments() \})))" shape=ellipse]
65 [label="11:CtExecutableReferenceImpl@booleanValue()" shape=ellipse]
66 [label="11:CtVirtualElement@booleanValue" shape=ellipse]
67 [label="11:CtVariableReadImpl@ok" shape=ellipse]
68 [label="11:CtInvocationImpl@ok.booleanValue()" shape=ellipse]
69 [label="11:CtReturnImpl@return ok.booleanValue()" shape=ellipse]
70 [label="5:CtBlockImpl@\{
    Class c = Class.forName(\"sun.rmi.rmic.Main\");
    Constructor cons = c.getConstructor(new Class[]\{ OutputStream.class, String.class \});
    Object rmic = cons.newInstance(new Object[]\{ System.out, \"rmic\" \});
    Method doRmic = c.getMethod(\"compile\", new Class[]\{ String[].class \});
    Boolean ok = ((Boolean) (doRmic.invoke(rmic, new Object[]\{ cmd.getArguments() \})));
    return ok.booleanValue();
\}" shape=ellipse]
71 [label="12:CtVirtualElement@ex" shape=ellipse]
72 [label="12:CtTypeReferenceImpl@ClassNotFoundException" shape=ellipse]
73 [label="12:CtCatchVariableImpl@ClassNotFoundException ex" shape=ellipse]
74 [label="13:CtTypeReferenceImpl@TaskException" shape=ellipse]
75 [label="14:CtLiteralImpl@\"Cannot use SUN rmic, as it is not available\"" shape=ellipse]
76 [label="15:CtLiteralImpl@\" A common solution is to set the environment variable\"" shape=ellipse]
77 [label="14:CtBinaryOperatorImpl@(\"Cannot use SUN rmic, as it is not available\" + \" A common solution is to set the environment variable\")" shape=ellipse]
78 [label="16:CtLiteralImpl@\" JAVA_HOME or CLASSPATH.\"" shape=ellipse]
79 [label="14:CtBinaryOperatorImpl@(\"Cannot use SUN rmic, as it is not available\" + \" A common solution is to set the environment variable\") + \" JAVA_HOME or CLASSPATH.\"" shape=ellipse]
80 [label="13:CtConstructorCallImpl@new TaskException((\"Cannot use SUN rmic, as it is not available\" + \" A common solution is to set the environment variable\") + \" JAVA_HOME or CLASSPATH.\")" shape=ellipse]
81 [label="13:CtThrowImpl@throw new TaskException((\"Cannot use SUN rmic, as it is not available\" + \" A common solution is to set the environment variable\") + \" JAVA_HOME or CLASSPATH.\")" shape=ellipse]
82 [label="12:CtBlockImpl@\{
    throw new TaskException((\"Cannot use SUN rmic, as it is not available\" + \" A common solution is to set the environment variable\") + \" JAVA_HOME or CLASSPATH.\");
\}" shape=ellipse]
83 [label="12:CtCatchImpl@ catch (ClassNotFoundException ex) \{
    throw new TaskException((\"Cannot use SUN rmic, as it is not available\" + \" A common solution is to set the environment variable\") + \" JAVA_HOME or CLASSPATH.\");
\}" shape=ellipse]
84 [label="17:CtVirtualElement@ex" shape=ellipse]
85 [label="17:CtTypeReferenceImpl@Exception" shape=ellipse]
86 [label="17:CtCatchVariableImpl@Exception ex" shape=ellipse]
87 [label="18:CtVariableReadImpl@ex" shape=ellipse]
88 [label="18:CtTypeAccessImpl@TaskException" shape=ellipse]
89 [label="18:CtTypeReferenceImpl@TaskException" shape=ellipse]
90 [label="18:CtBinaryOperatorImpl@ex instanceof TaskException" shape=ellipse]
91 [label="19:CtVariableReadImpl@((TaskException) (ex))" shape=ellipse]
92 [label="19:CtTypeReferenceImpl@TaskException" shape=ellipse]
93 [label="19:CtThrowImpl@throw ((TaskException) (ex))" shape=ellipse]
94 [label="18:CtBlockImpl@\{
    throw ((TaskException) (ex));
\}" shape=ellipse]
95 [label="21:CtTypeReferenceImpl@TaskException" shape=ellipse]
96 [label="21:CtLiteralImpl@\"Error starting SUN rmic: \"" shape=ellipse]
97 [label="21:CtVariableReadImpl@ex" shape=ellipse]
98 [label="21:CtConstructorCallImpl@new TaskException(\"Error starting SUN rmic: \", ex)" shape=ellipse]
99 [label="21:CtThrowImpl@throw new TaskException(\"Error starting SUN rmic: \", ex)" shape=ellipse]
100 [label="20:CtBlockImpl@\{
    throw new TaskException(\"Error starting SUN rmic: \", ex);
\}" shape=ellipse]
101 [label="18:CtIfImpl@if (ex instanceof TaskException) \{
    throw ((TaskException) (ex));
\} else \{
    throw new TaskException(\"Error starting SUN rmic: \", ex);
\}" shape=ellipse]
102 [label="17:CtBlockImpl@\{
    if (ex instanceof TaskException) \{
        throw ((TaskException) (ex));
    \} else \{
        throw new TaskException(\"Error starting SUN rmic: \", ex);
    \}
\}" shape=ellipse]
103 [label="17:CtCatchImpl@ catch (Exception ex) \{
    if (ex instanceof TaskException) \{
        throw ((TaskException) (ex));
    \} else \{
        throw new TaskException(\"Error starting SUN rmic: \", ex);
    \}
\}" shape=ellipse]
104 [label="5:CtTryImpl@try \{
    Class c = Class.forName(\"sun.rmi.rmic.Main\");
    Constructor cons = c.getConstructor(new Class[]\{ OutputStream.class, String.class \});
    Object rmic = cons.newInstance(new Object[]\{ System.out, \"rmic\" \});
    Method doRmic = c.getMethod(\"compile\", new Class[]\{ String[].class \});
    Boolean ok = ((Boolean) (doRmic.invoke(rmic, new Object[]\{ cmd.getArguments() \})));
    return ok.booleanValue();
\} catch (ClassNotFoundException ex) \{
    throw new TaskException((\"Cannot use SUN rmic, as it is not available\" + \" A common solution is to set the environment variable\") + \" JAVA_HOME or CLASSPATH.\");
\} catch (Exception ex) \{
    if (ex instanceof TaskException) \{
        throw ((TaskException) (ex));
    \} else \{
        throw new TaskException(\"Error starting SUN rmic: \", ex);
    \}
\}" shape=ellipse]
105 [label="2:CtBlockImpl@\{
    getLogger().debug(\"Using SUN rmic compiler\");
    Commandline cmd = setupRmicCommand();
    try \{
        Class c = Class.forName(\"sun.rmi.rmic.Main\");
        Constructor cons = c.getConstructor(new Class[]\{ OutputStream.class, String.class \});
        Object rmic = cons.newInstance(new Object[]\{ System.out, \"rmic\" \});
        Method doRmic = c.getMethod(\"compile\", new Class[]\{ String[].class \});
        Boolean ok = ((Boolean) (doRmic.invoke(rmic, new Object[]\{ cmd.getArguments() \})));
        return ok.booleanValue();
    \} catch (ClassNotFoundException ex) \{
        throw new TaskException((\"Cannot use SUN rmic, as it is not available\" + \" A common solution is to set the environment variable\") + \" JAVA_HOME or CLASSPATH.\");
    \} catch (Exception ex) \{
        if (ex instanceof TaskException) \{
            throw ((TaskException) (ex));
        \} else \{
            throw new TaskException(\"Error starting SUN rmic: \", ex);
        \}
    \}
\}" shape=ellipse]
106 [label="2:CtMethodImpl@public boolean execute() throws TaskException \{
    getLogger().debug(\"Using SUN rmic compiler\");
    Commandline cmd = setupRmicCommand();
    try \{
        Class c = Class.forName(\"sun.rmi.rmic.Main\");
        Constructor cons = c.getConstructor(new Class[]\{ OutputStream.class, String.class \});
        Object rmic = cons.newInstance(new Object[]\{ System.out, \"rmic\" \});
        Method doRmic = c.getMethod(\"compile\", new Class[]\{ String[].class \});
        Boolean ok = ((Boolean) (doRmic.invoke(rmic, new Object[]\{ cmd.getArguments() \})));
        return ok.booleanValue();
    \} catch (ClassNotFoundException ex) \{
        throw new TaskException((\"Cannot use SUN rmic, as it is not available\" + \" A common solution is to set the environment variable\") + \" JAVA_HOME or CLASSPATH.\");
    \} catch (Exception ex) \{
        if (ex instanceof TaskException) \{
            throw ((TaskException) (ex));
        \} else \{
            throw new TaskException(\"Error starting SUN rmic: \", ex);
        \}
    \}
\}" shape=ellipse]
107 [label="3:Update@UPDATE" shape=ellipse]
108 [label="3:CtInvocationImpl@getTaskContext()" shape=ellipse]
7 -> 6 [label="AST"];
7 -> 5 [label="AST"];
7 -> 107 [label="Action"];
9 -> 4 [label="AST"];
9 -> 7 [label="AST"];
9 -> 3 [label="AST"];
9 -> 8 [label="AST"];
13 -> 12 [label="AST"];
13 -> 11 [label="AST"];
15 -> 14 [label="AST"];
15 -> 10 [label="AST"];
15 -> 13 [label="AST"];
21 -> 18 [label="AST"];
21 -> 19 [label="AST"];
21 -> 17 [label="AST"];
21 -> 20 [label="AST"];
22 -> 27 [label="Define-Use"];
22 -> 47 [label="Define-Use"];
23 -> 22 [label="AST"];
23 -> 16 [label="AST"];
23 -> 21 [label="AST"];
27 -> 32 [label="Data Dep"];
28 -> 29 [label="AST"];
28 -> 30 [label="AST"];
29 -> 32 [label="Data Dep"];
30 -> 32 [label="Data Dep"];
31 -> 26 [label="AST"];
31 -> 27 [label="AST"];
31 -> 25 [label="AST"];
31 -> 28 [label="AST"];
32 -> 37 [label="Define-Use"];
33 -> 32 [label="AST"];
33 -> 24 [label="AST"];
33 -> 31 [label="AST"];
37 -> 42 [label="Data Dep"];
38 -> 39 [label="AST"];
38 -> 40 [label="AST"];
39 -> 42 [label="Data Dep"];
41 -> 36 [label="AST"];
41 -> 37 [label="AST"];
41 -> 35 [label="AST"];
41 -> 38 [label="AST"];
42 -> 58 [label="Define-Use"];
43 -> 42 [label="AST"];
43 -> 34 [label="AST"];
43 -> 41 [label="AST"];
47 -> 52 [label="Data Dep"];
49 -> 50 [label="AST"];
50 -> 52 [label="Data Dep"];
51 -> 46 [label="AST"];
51 -> 47 [label="AST"];
51 -> 45 [label="AST"];
51 -> 48 [label="AST"];
51 -> 49 [label="AST"];
52 -> 57 [label="Define-Use"];
53 -> 52 [label="AST"];
53 -> 44 [label="AST"];
53 -> 51 [label="AST"];
57 -> 63 [label="Data Dep"];
58 -> 63 [label="Data Dep"];
59 -> 60 [label="AST"];
61 -> 56 [label="AST"];
61 -> 62 [label="AST"];
61 -> 57 [label="AST"];
61 -> 55 [label="AST"];
61 -> 58 [label="AST"];
61 -> 59 [label="AST"];
63 -> 67 [label="Define-Use"];
64 -> 63 [label="AST"];
64 -> 54 [label="AST"];
64 -> 61 [label="AST"];
68 -> 66 [label="AST"];
68 -> 67 [label="AST"];
68 -> 65 [label="AST"];
69 -> 68 [label="AST"];
70 -> 23 [label="AST"];
70 -> 33 [label="AST"];
70 -> 43 [label="AST"];
70 -> 53 [label="AST"];
70 -> 64 [label="AST"];
70 -> 69 [label="AST"];
73 -> 71 [label="AST"];
73 -> 72 [label="AST"];
73 -> 82 [label="Control Dep"];
73 -> 81 [label="Control Dep"];
73 -> 80 [label="Control Dep"];
73 -> 79 [label="Control Dep"];
73 -> 77 [label="Control Dep"];
73 -> 75 [label="Control Dep"];
73 -> 76 [label="Control Dep"];
73 -> 78 [label="Control Dep"];
77 -> 75 [label="AST"];
77 -> 76 [label="AST"];
79 -> 77 [label="AST"];
79 -> 78 [label="AST"];
80 -> 79 [label="AST"];
81 -> 80 [label="AST"];
82 -> 81 [label="AST"];
83 -> 73 [label="AST"];
83 -> 82 [label="AST"];
84 -> 87 [label="Define-Use"];
84 -> 91 [label="Define-Use"];
84 -> 97 [label="Define-Use"];
86 -> 84 [label="AST"];
86 -> 85 [label="AST"];
86 -> 102 [label="Control Dep"];
86 -> 101 [label="Control Dep"];
86 -> 90 [label="Control Dep"];
86 -> 87 [label="Control Dep"];
86 -> 88 [label="Control Dep"];
88 -> 89 [label="AST"];
90 -> 87 [label="AST"];
90 -> 88 [label="AST"];
90 -> 94 [label="Control Dep"];
90 -> 93 [label="Control Dep"];
90 -> 91 [label="Control Dep"];
90 -> 100 [label="Control Dep"];
90 -> 99 [label="Control Dep"];
90 -> 98 [label="Control Dep"];
90 -> 96 [label="Control Dep"];
90 -> 97 [label="Control Dep"];
91 -> 92 [label="AST"];
93 -> 91 [label="AST"];
94 -> 93 [label="AST"];
98 -> 96 [label="AST"];
98 -> 97 [label="AST"];
99 -> 98 [label="AST"];
100 -> 99 [label="AST"];
101 -> 90 [label="AST"];
101 -> 94 [label="AST"];
101 -> 100 [label="AST"];
102 -> 101 [label="AST"];
103 -> 86 [label="AST"];
103 -> 102 [label="AST"];
104 -> 70 [label="AST"];
104 -> 83 [label="AST"];
104 -> 103 [label="AST"];
105 -> 9 [label="AST"];
105 -> 15 [label="AST"];
105 -> 104 [label="AST"];
106 -> 1 [label="AST"];
106 -> 0 [label="AST"];
106 -> 2 [label="AST"];
106 -> 105 [label="AST"];
107 -> 108 [label="Action"];
}