digraph "execute#?" {
0 [label="2:CtTypeReferenceImpl@boolean" shape=ellipse]
1 [label="2:CtVirtualElement@execute" shape=ellipse]
2 [label="2:CtTypeReferenceImpl@TaskException" shape=ellipse]
3 [label="3:CtExecutableReferenceImpl@debug(java.lang.String)" shape=ellipse]
4 [label="3:CtVirtualElement@debug" shape=ellipse]
5 [label="3:CtExecutableReferenceImpl@getLogger()" shape=ellipse]
6 [label="3:CtVirtualElement@getLogger" shape=ellipse]
7 [label="3:CtInvocationImpl@getLogger()" shape=ellipse]
8 [label="3:CtLiteralImpl@\"Using jasper compiler\"" shape=ellipse]
9 [label="3:CtInvocationImpl@getLogger().debug(\"Using jasper compiler\")" shape=ellipse]
10 [label="4:CtTypeReferenceImpl@Commandline" shape=ellipse]
11 [label="4:CtExecutableReferenceImpl@setupJasperCommand()" shape=ellipse]
12 [label="4:CtVirtualElement@setupJasperCommand" shape=ellipse]
13 [label="4:CtInvocationImpl@setupJasperCommand()" shape=ellipse]
14 [label="4:CtVirtualElement@cmd" shape=ellipse]
15 [label="4:CtLocalVariableImpl@Commandline cmd = setupJasperCommand()" shape=ellipse]
16 [label="6:CtTypeReferenceImpl@Java" shape=ellipse]
17 [label="6:CtLiteralImpl@null" shape=ellipse]
18 [label="6:CtVirtualElement@java" shape=ellipse]
19 [label="6:CtLocalVariableImpl@Java java = null" shape=ellipse]
20 [label="7:CtExecutableReferenceImpl@getClasspath()" shape=ellipse]
21 [label="7:CtVirtualElement@getClasspath" shape=ellipse]
22 [label="7:CtExecutableReferenceImpl@getJspc()" shape=ellipse]
23 [label="7:CtVirtualElement@getJspc" shape=ellipse]
24 [label="7:CtInvocationImpl@getJspc()" shape=ellipse]
25 [label="7:CtInvocationImpl@getJspc().getClasspath()" shape=ellipse]
26 [label="7:CtLiteralImpl@null" shape=ellipse]
27 [label="7:CtBinaryOperatorImpl@getJspc().getClasspath() != null" shape=ellipse]
28 [label="8:CtExecutableReferenceImpl@addClasspath()" shape=ellipse]
29 [label="8:CtVirtualElement@addClasspath" shape=ellipse]
30 [label="8:CtVariableReadImpl@java" shape=ellipse]
31 [label="8:CtExecutableReferenceImpl@getClasspath()" shape=ellipse]
32 [label="8:CtVirtualElement@getClasspath" shape=ellipse]
33 [label="8:CtExecutableReferenceImpl@getJspc()" shape=ellipse]
34 [label="8:CtVirtualElement@getJspc" shape=ellipse]
35 [label="8:CtInvocationImpl@getJspc()" shape=ellipse]
36 [label="8:CtInvocationImpl@getJspc().getClasspath()" shape=ellipse]
37 [label="8:CtInvocationImpl@java.addClasspath(getJspc().getClasspath())" shape=ellipse]
38 [label="7:CtBlockImpl@\{
    java.addClasspath(getJspc().getClasspath());
\}" shape=ellipse]
39 [label="7:CtIfImpl@if (getJspc().getClasspath() != null) \{
    java.addClasspath(getJspc().getClasspath());
\}" shape=ellipse]
40 [label="10:CtExecutableReferenceImpl@setClassname(java.lang.String)" shape=ellipse]
41 [label="10:CtVirtualElement@setClassname" shape=ellipse]
42 [label="10:CtVariableReadImpl@java" shape=ellipse]
43 [label="10:CtLiteralImpl@\"org.apache.jasper.JspC\"" shape=ellipse]
44 [label="10:CtInvocationImpl@java.setClassname(\"org.apache.jasper.JspC\")" shape=ellipse]
45 [label="11:CtVirtualElement@String[]" shape=ellipse]
46 [label="11:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
47 [label="11:CtExecutableReferenceImpl@getArguments()" shape=ellipse]
48 [label="11:CtVirtualElement@getArguments" shape=ellipse]
49 [label="11:CtVariableReadImpl@cmd" shape=ellipse]
50 [label="11:CtInvocationImpl@cmd.getArguments()" shape=ellipse]
51 [label="11:CtVirtualElement@args" shape=ellipse]
52 [label="11:CtLocalVariableImpl@String args[] = cmd.getArguments()" shape=ellipse]
53 [label="12:CtTypeReferenceImpl@int" shape=ellipse]
54 [label="12:CtLiteralImpl@0" shape=ellipse]
55 [label="12:CtVirtualElement@i" shape=ellipse]
56 [label="12:CtLocalVariableImpl@int i = 0" shape=ellipse]
57 [label="12:CtVariableReadImpl@i" shape=ellipse]
58 [label="12:CtVariableReadImpl@args" shape=ellipse]
59 [label="12:CtLocalVariableReferenceImpl@args" shape=ellipse]
60 [label="12:CtFieldReadImpl@args.length" shape=ellipse]
61 [label="12:CtBinaryOperatorImpl@i < args.length" shape=ellipse]
62 [label="12:CtVariableWriteImpl@i" shape=ellipse]
63 [label="12:CtUnaryOperatorImpl@i++" shape=ellipse]
64 [label="13:CtExecutableReferenceImpl@addArg(Argument)" shape=ellipse]
65 [label="13:CtVirtualElement@addArg" shape=ellipse]
66 [label="13:CtVariableReadImpl@java" shape=ellipse]
67 [label="13:CtTypeReferenceImpl@Argument" shape=ellipse]
68 [label="13:CtVariableReadImpl@args" shape=ellipse]
69 [label="13:CtVariableReadImpl@i" shape=ellipse]
70 [label="13:CtArrayReadImpl@args[i]" shape=ellipse]
71 [label="13:CtConstructorCallImpl@new Argument(args[i])" shape=ellipse]
72 [label="13:CtInvocationImpl@java.addArg(new Argument(args[i]))" shape=ellipse]
73 [label="12:CtBlockImpl@\{
    java.addArg(new Argument(args[i]));
\}" shape=ellipse]
74 [label="12:CtForImpl@for (int i = 0; i < args.length; i++) \{
    java.addArg(new Argument(args[i]));
\}" shape=ellipse]
75 [label="15:CtExecutableReferenceImpl@execute()" shape=ellipse]
76 [label="15:CtVirtualElement@execute" shape=ellipse]
77 [label="15:CtVariableReadImpl@java" shape=ellipse]
78 [label="15:CtInvocationImpl@java.execute()" shape=ellipse]
79 [label="16:CtLiteralImpl@true" shape=ellipse]
80 [label="16:CtReturnImpl@return true" shape=ellipse]
81 [label="5:CtBlockImpl@\{
    Java java = null;
    if (getJspc().getClasspath() != null) \{
        java.addClasspath(getJspc().getClasspath());
    \}
    java.setClassname(\"org.apache.jasper.JspC\");
    String args[] = cmd.getArguments();
    for (int i = 0; i < args.length; i++) \{
        java.addArg(new Argument(args[i]));
    \}
    java.execute();
    return true;
\}" shape=ellipse]
82 [label="17:CtVirtualElement@ex" shape=ellipse]
83 [label="17:CtTypeReferenceImpl@Exception" shape=ellipse]
84 [label="17:CtCatchVariableImpl@Exception ex" shape=ellipse]
85 [label="18:CtVariableReadImpl@ex" shape=ellipse]
86 [label="18:CtTypeAccessImpl@TaskException" shape=ellipse]
87 [label="18:CtTypeReferenceImpl@TaskException" shape=ellipse]
88 [label="18:CtBinaryOperatorImpl@ex instanceof TaskException" shape=ellipse]
89 [label="19:CtVariableReadImpl@((TaskException) (ex))" shape=ellipse]
90 [label="19:CtTypeReferenceImpl@TaskException" shape=ellipse]
91 [label="19:CtThrowImpl@throw ((TaskException) (ex))" shape=ellipse]
92 [label="18:CtBlockImpl@\{
    throw ((TaskException) (ex));
\}" shape=ellipse]
93 [label="21:CtTypeReferenceImpl@TaskException" shape=ellipse]
94 [label="21:CtLiteralImpl@\"Error running jsp compiler: \"" shape=ellipse]
95 [label="21:CtVariableReadImpl@ex" shape=ellipse]
96 [label="21:CtConstructorCallImpl@new TaskException(\"Error running jsp compiler: \", ex)" shape=ellipse]
97 [label="21:CtThrowImpl@throw new TaskException(\"Error running jsp compiler: \", ex)" shape=ellipse]
98 [label="20:CtBlockImpl@\{
    throw new TaskException(\"Error running jsp compiler: \", ex);
\}" shape=ellipse]
99 [label="18:CtIfImpl@if (ex instanceof TaskException) \{
    throw ((TaskException) (ex));
\} else \{
    throw new TaskException(\"Error running jsp compiler: \", ex);
\}" shape=ellipse]
100 [label="17:CtBlockImpl@\{
    if (ex instanceof TaskException) \{
        throw ((TaskException) (ex));
    \} else \{
        throw new TaskException(\"Error running jsp compiler: \", ex);
    \}
\}" shape=ellipse]
101 [label="17:CtCatchImpl@ catch (Exception ex) \{
    if (ex instanceof TaskException) \{
        throw ((TaskException) (ex));
    \} else \{
        throw new TaskException(\"Error running jsp compiler: \", ex);
    \}
\}" shape=ellipse]
102 [label="5:CtTryImpl@try \{
    Java java = null;
    if (getJspc().getClasspath() != null) \{
        java.addClasspath(getJspc().getClasspath());
    \}
    java.setClassname(\"org.apache.jasper.JspC\");
    String args[] = cmd.getArguments();
    for (int i = 0; i < args.length; i++) \{
        java.addArg(new Argument(args[i]));
    \}
    java.execute();
    return true;
\} catch (Exception ex) \{
    if (ex instanceof TaskException) \{
        throw ((TaskException) (ex));
    \} else \{
        throw new TaskException(\"Error running jsp compiler: \", ex);
    \}
\}" shape=ellipse]
103 [label="2:CtBlockImpl@\{
    getLogger().debug(\"Using jasper compiler\");
    Commandline cmd = setupJasperCommand();
    try \{
        Java java = null;
        if (getJspc().getClasspath() != null) \{
            java.addClasspath(getJspc().getClasspath());
        \}
        java.setClassname(\"org.apache.jasper.JspC\");
        String args[] = cmd.getArguments();
        for (int i = 0; i < args.length; i++) \{
            java.addArg(new Argument(args[i]));
        \}
        java.execute();
        return true;
    \} catch (Exception ex) \{
        if (ex instanceof TaskException) \{
            throw ((TaskException) (ex));
        \} else \{
            throw new TaskException(\"Error running jsp compiler: \", ex);
        \}
    \}
\}" shape=ellipse]
104 [label="2:CtMethodImpl@public boolean execute() throws TaskException \{
    getLogger().debug(\"Using jasper compiler\");
    Commandline cmd = setupJasperCommand();
    try \{
        Java java = null;
        if (getJspc().getClasspath() != null) \{
            java.addClasspath(getJspc().getClasspath());
        \}
        java.setClassname(\"org.apache.jasper.JspC\");
        String args[] = cmd.getArguments();
        for (int i = 0; i < args.length; i++) \{
            java.addArg(new Argument(args[i]));
        \}
        java.execute();
        return true;
    \} catch (Exception ex) \{
        if (ex instanceof TaskException) \{
            throw ((TaskException) (ex));
        \} else \{
            throw new TaskException(\"Error running jsp compiler: \", ex);
        \}
    \}
\}" shape=ellipse]
105 [label="3:Update@UPDATE" shape=ellipse]
106 [label="3:CtInvocationImpl@getTaskContext()" shape=ellipse]
7 -> 6 [label="AST"];
7 -> 5 [label="AST"];
7 -> 105 [label="Action"];
9 -> 4 [label="AST"];
9 -> 7 [label="AST"];
9 -> 3 [label="AST"];
9 -> 8 [label="AST"];
13 -> 12 [label="AST"];
13 -> 11 [label="AST"];
14 -> 49 [label="Define-Use"];
15 -> 14 [label="AST"];
15 -> 10 [label="AST"];
15 -> 13 [label="AST"];
18 -> 30 [label="Define-Use"];
18 -> 42 [label="Define-Use"];
18 -> 66 [label="Define-Use"];
18 -> 77 [label="Define-Use"];
19 -> 18 [label="AST"];
19 -> 16 [label="AST"];
19 -> 17 [label="AST"];
24 -> 23 [label="AST"];
24 -> 22 [label="AST"];
25 -> 21 [label="AST"];
25 -> 24 [label="AST"];
25 -> 20 [label="AST"];
27 -> 25 [label="AST"];
27 -> 26 [label="AST"];
27 -> 38 [label="Control Dep"];
27 -> 37 [label="Control Dep"];
27 -> 28 [label="Control Dep"];
27 -> 30 [label="Control Dep"];
27 -> 36 [label="Control Dep"];
27 -> 31 [label="Control Dep"];
27 -> 35 [label="Control Dep"];
27 -> 33 [label="Control Dep"];
35 -> 34 [label="AST"];
35 -> 33 [label="AST"];
36 -> 32 [label="AST"];
36 -> 35 [label="AST"];
36 -> 31 [label="AST"];
37 -> 29 [label="AST"];
37 -> 30 [label="AST"];
37 -> 28 [label="AST"];
37 -> 36 [label="AST"];
38 -> 37 [label="AST"];
39 -> 27 [label="AST"];
39 -> 38 [label="AST"];
44 -> 41 [label="AST"];
44 -> 42 [label="AST"];
44 -> 40 [label="AST"];
44 -> 43 [label="AST"];
46 -> 45 [label="AST"];
49 -> 51 [label="Data Dep"];
50 -> 48 [label="AST"];
50 -> 49 [label="AST"];
50 -> 47 [label="AST"];
51 -> 58 [label="Define-Use"];
51 -> 68 [label="Define-Use"];
51 -> 70 [label="Define-Use"];
52 -> 51 [label="AST"];
52 -> 46 [label="AST"];
52 -> 50 [label="AST"];
55 -> 57 [label="Define-Use"];
56 -> 55 [label="AST"];
56 -> 53 [label="AST"];
56 -> 54 [label="AST"];
58 -> 59 [label="AST"];
60 -> 58 [label="AST"];
61 -> 57 [label="AST"];
61 -> 60 [label="AST"];
61 -> 73 [label="Control Dep"];
61 -> 72 [label="Control Dep"];
61 -> 64 [label="Control Dep"];
61 -> 66 [label="Control Dep"];
61 -> 71 [label="Control Dep"];
61 -> 70 [label="Control Dep"];
61 -> 68 [label="Control Dep"];
61 -> 69 [label="Control Dep"];
62 -> 69 [label="Define-Use"];
63 -> 62 [label="AST"];
70 -> 68 [label="AST"];
70 -> 69 [label="AST"];
71 -> 70 [label="AST"];
72 -> 65 [label="AST"];
72 -> 66 [label="AST"];
72 -> 64 [label="AST"];
72 -> 71 [label="AST"];
73 -> 72 [label="AST"];
74 -> 56 [label="AST"];
74 -> 61 [label="AST"];
74 -> 63 [label="AST"];
74 -> 73 [label="AST"];
78 -> 76 [label="AST"];
78 -> 77 [label="AST"];
78 -> 75 [label="AST"];
80 -> 79 [label="AST"];
81 -> 19 [label="AST"];
81 -> 39 [label="AST"];
81 -> 44 [label="AST"];
81 -> 52 [label="AST"];
81 -> 74 [label="AST"];
81 -> 78 [label="AST"];
81 -> 80 [label="AST"];
82 -> 85 [label="Define-Use"];
82 -> 89 [label="Define-Use"];
82 -> 95 [label="Define-Use"];
84 -> 82 [label="AST"];
84 -> 83 [label="AST"];
84 -> 100 [label="Control Dep"];
84 -> 99 [label="Control Dep"];
84 -> 88 [label="Control Dep"];
84 -> 85 [label="Control Dep"];
84 -> 86 [label="Control Dep"];
86 -> 87 [label="AST"];
88 -> 85 [label="AST"];
88 -> 86 [label="AST"];
88 -> 92 [label="Control Dep"];
88 -> 91 [label="Control Dep"];
88 -> 89 [label="Control Dep"];
88 -> 98 [label="Control Dep"];
88 -> 97 [label="Control Dep"];
88 -> 96 [label="Control Dep"];
88 -> 94 [label="Control Dep"];
88 -> 95 [label="Control Dep"];
89 -> 90 [label="AST"];
91 -> 89 [label="AST"];
92 -> 91 [label="AST"];
96 -> 94 [label="AST"];
96 -> 95 [label="AST"];
97 -> 96 [label="AST"];
98 -> 97 [label="AST"];
99 -> 88 [label="AST"];
99 -> 92 [label="AST"];
99 -> 98 [label="AST"];
100 -> 99 [label="AST"];
101 -> 84 [label="AST"];
101 -> 100 [label="AST"];
102 -> 81 [label="AST"];
102 -> 101 [label="AST"];
103 -> 9 [label="AST"];
103 -> 15 [label="AST"];
103 -> 102 [label="AST"];
104 -> 1 [label="AST"];
104 -> 0 [label="AST"];
104 -> 2 [label="AST"];
104 -> 103 [label="AST"];
105 -> 106 [label="Action"];
}