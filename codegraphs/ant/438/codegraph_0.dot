digraph "testPropertyExpansion#?" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@testPropertyExpansion" shape=ellipse]
2 [label="3:CtExecutableReferenceImpl@executeTarget(java.lang.String)" shape=ellipse]
3 [label="3:CtVirtualElement@executeTarget" shape=ellipse]
4 [label="3:CtLiteralImpl@\"testPropertyExpansion\"" shape=ellipse]
5 [label="3:CtInvocationImpl@executeTarget(\"testPropertyExpansion\")" shape=ellipse]
6 [label="4:CtExecutableReferenceImpl@assertTrue(java.lang.String,<unknown>)" shape=ellipse]
7 [label="4:CtVirtualElement@assertTrue" shape=ellipse]
8 [label="4:CtLiteralImpl@\"attribute worked\"" shape=ellipse]
9 [label="4:CtExecutableReferenceImpl@indexOf(java.lang.String)" shape=ellipse]
10 [label="4:CtVirtualElement@indexOf" shape=ellipse]
11 [label="4:CtExecutableReferenceImpl@getLog()" shape=ellipse]
12 [label="4:CtVirtualElement@getLog" shape=ellipse]
13 [label="4:CtInvocationImpl@getLog()" shape=ellipse]
14 [label="4:CtLiteralImpl@\"As attribute: it worked\"" shape=ellipse]
15 [label="4:CtInvocationImpl@getLog().indexOf(\"As attribute: it worked\")" shape=ellipse]
16 [label="4:CtLiteralImpl@1" shape=ellipse]
17 [label="4:CtUnaryOperatorImpl@(-1)" shape=ellipse]
18 [label="4:CtBinaryOperatorImpl@getLog().indexOf(\"As attribute: it worked\") > (-1)" shape=ellipse]
19 [label="4:CtInvocationImpl@assertTrue(\"attribute worked\", getLog().indexOf(\"As attribute: it worked\") > (-1))" shape=ellipse]
20 [label="5:CtExecutableReferenceImpl@assertTrue(java.lang.String,<unknown>)" shape=ellipse]
21 [label="5:CtVirtualElement@assertTrue" shape=ellipse]
22 [label="5:CtLiteralImpl@\"nested text worked\"" shape=ellipse]
23 [label="5:CtExecutableReferenceImpl@indexOf(java.lang.String)" shape=ellipse]
24 [label="5:CtVirtualElement@indexOf" shape=ellipse]
25 [label="5:CtExecutableReferenceImpl@getLog()" shape=ellipse]
26 [label="5:CtVirtualElement@getLog" shape=ellipse]
27 [label="5:CtInvocationImpl@getLog()" shape=ellipse]
28 [label="5:CtLiteralImpl@\"As nested text: it worked\"" shape=ellipse]
29 [label="5:CtInvocationImpl@getLog().indexOf(\"As nested text: it worked\")" shape=ellipse]
30 [label="5:CtLiteralImpl@1" shape=ellipse]
31 [label="5:CtUnaryOperatorImpl@(-1)" shape=ellipse]
32 [label="5:CtBinaryOperatorImpl@getLog().indexOf(\"As nested text: it worked\") > (-1)" shape=ellipse]
33 [label="5:CtInvocationImpl@assertTrue(\"nested text worked\", getLog().indexOf(\"As nested text: it worked\") > (-1))" shape=ellipse]
34 [label="2:CtBlockImpl@\{
    executeTarget(\"testPropertyExpansion\");
    assertTrue(\"attribute worked\", getLog().indexOf(\"As attribute: it worked\") > (-1));
    assertTrue(\"nested text worked\", getLog().indexOf(\"As nested text: it worked\") > (-1));
\}" shape=ellipse]
35 [label="2:CtMethodImpl@public void testPropertyExpansion() \{
    executeTarget(\"testPropertyExpansion\");
    assertTrue(\"attribute worked\", getLog().indexOf(\"As attribute: it worked\") > (-1));
    assertTrue(\"nested text worked\", getLog().indexOf(\"As nested text: it worked\") > (-1));
\}" shape=ellipse]
36 [label="2:Insert@INSERT" shape=ellipse]
37 [label="2:CtAnnotationImpl@@Test" shape=ellipse]
38 [label="4:Insert@INSERT" shape=ellipse]
39 [label="4:CtFieldReadImpl@buildRule" shape=ellipse]
40 [label="5:Insert@INSERT" shape=ellipse]
41 [label="5:CtFieldReadImpl@buildRule" shape=ellipse]
42 [label="7:Insert@INSERT" shape=ellipse]
43 [label="7:CtFieldReadImpl@buildRule" shape=ellipse]
5 -> 3 [label="AST"];
5 -> 2 [label="AST"];
5 -> 4 [label="AST"];
5 -> 38 [label="Action"];
13 -> 12 [label="AST"];
13 -> 11 [label="AST"];
13 -> 40 [label="Action"];
15 -> 10 [label="AST"];
15 -> 13 [label="AST"];
15 -> 9 [label="AST"];
15 -> 14 [label="AST"];
17 -> 16 [label="AST"];
18 -> 15 [label="AST"];
18 -> 17 [label="AST"];
19 -> 7 [label="AST"];
19 -> 6 [label="AST"];
19 -> 8 [label="AST"];
19 -> 18 [label="AST"];
27 -> 26 [label="AST"];
27 -> 25 [label="AST"];
27 -> 42 [label="Action"];
29 -> 24 [label="AST"];
29 -> 27 [label="AST"];
29 -> 23 [label="AST"];
29 -> 28 [label="AST"];
31 -> 30 [label="AST"];
32 -> 29 [label="AST"];
32 -> 31 [label="AST"];
33 -> 21 [label="AST"];
33 -> 20 [label="AST"];
33 -> 22 [label="AST"];
33 -> 32 [label="AST"];
34 -> 5 [label="AST"];
34 -> 19 [label="AST"];
34 -> 33 [label="AST"];
35 -> 1 [label="AST"];
35 -> 0 [label="AST"];
35 -> 34 [label="AST"];
35 -> 36 [label="Action"];
36 -> 37 [label="Action"];
38 -> 39 [label="Action"];
40 -> 41 [label="Action"];
42 -> 43 [label="Action"];
}