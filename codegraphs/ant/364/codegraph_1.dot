digraph "determineDependencies#?" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@determineDependencies" shape=ellipse]
2 [label="2:CtTypeReferenceImpl@IOException" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@TaskException" shape=ellipse]
4 [label="3:CtFieldWriteImpl@affectedClassMap" shape=ellipse]
5 [label="3:CtTypeReferenceImpl@Hashtable" shape=ellipse]
6 [label="3:CtConstructorCallImpl@new Hashtable()" shape=ellipse]
7 [label="3:CtAssignmentImpl@affectedClassMap = new Hashtable()" shape=ellipse]
8 [label="4:CtFieldWriteImpl@classFileInfoMap" shape=ellipse]
9 [label="4:CtTypeReferenceImpl@Hashtable" shape=ellipse]
10 [label="4:CtConstructorCallImpl@new Hashtable()" shape=ellipse]
11 [label="4:CtAssignmentImpl@classFileInfoMap = new Hashtable()" shape=ellipse]
12 [label="5:CtTypeReferenceImpl@boolean" shape=ellipse]
13 [label="5:CtLiteralImpl@false" shape=ellipse]
14 [label="5:CtVirtualElement@cacheDirty" shape=ellipse]
15 [label="5:CtLocalVariableImpl@boolean cacheDirty = false" shape=ellipse]
16 [label="6:CtTypeReferenceImpl@Hashtable" shape=ellipse]
17 [label="6:CtTypeReferenceImpl@Hashtable" shape=ellipse]
18 [label="6:CtConstructorCallImpl@new Hashtable()" shape=ellipse]
19 [label="6:CtVirtualElement@dependencyMap" shape=ellipse]
20 [label="6:CtLocalVariableImpl@Hashtable dependencyMap = new Hashtable()" shape=ellipse]
21 [label="7:CtTypeReferenceImpl@File" shape=ellipse]
22 [label="7:CtLiteralImpl@null" shape=ellipse]
23 [label="7:CtVirtualElement@depCacheFile" shape=ellipse]
24 [label="7:CtLocalVariableImpl@File depCacheFile = null" shape=ellipse]
25 [label="8:CtTypeReferenceImpl@boolean" shape=ellipse]
26 [label="8:CtLiteralImpl@true" shape=ellipse]
27 [label="8:CtVirtualElement@depCacheFileExists" shape=ellipse]
28 [label="8:CtLocalVariableImpl@boolean depCacheFileExists = true" shape=ellipse]
29 [label="9:CtTypeReferenceImpl@long" shape=ellipse]
30 [label="9:CtTypeAccessImpl@Long" shape=ellipse]
31 [label="9:CtFieldReadImpl@Long.MAX_VALUE" shape=ellipse]
32 [label="9:CtFieldReferenceImpl@java.lang.Long.MAX_VALUE" shape=ellipse]
33 [label="9:CtVirtualElement@depCacheFileLastModified" shape=ellipse]
34 [label="9:CtLocalVariableImpl@long depCacheFileLastModified = Long.MAX_VALUE" shape=ellipse]
35 [label="10:CtFieldReadImpl@cache" shape=ellipse]
36 [label="10:CtLiteralImpl@null" shape=ellipse]
37 [label="10:CtBinaryOperatorImpl@cache != null" shape=ellipse]
38 [label="11:CtVariableWriteImpl@dependencyMap" shape=ellipse]
39 [label="11:CtExecutableReferenceImpl@readCachedDependencies()" shape=ellipse]
40 [label="11:CtVirtualElement@readCachedDependencies" shape=ellipse]
41 [label="11:CtInvocationImpl@readCachedDependencies()" shape=ellipse]
42 [label="11:CtAssignmentImpl@dependencyMap = readCachedDependencies()" shape=ellipse]
43 [label="12:CtVariableWriteImpl@depCacheFile" shape=ellipse]
44 [label="12:CtTypeReferenceImpl@File" shape=ellipse]
45 [label="12:CtFieldReadImpl@cache" shape=ellipse]
46 [label="12:CtFieldReadImpl@CACHE_FILE_NAME" shape=ellipse]
47 [label="12:CtConstructorCallImpl@new File(cache, CACHE_FILE_NAME)" shape=ellipse]
48 [label="12:CtAssignmentImpl@depCacheFile = new File(cache, CACHE_FILE_NAME)" shape=ellipse]
49 [label="13:CtVariableWriteImpl@depCacheFileExists" shape=ellipse]
50 [label="13:CtExecutableReferenceImpl@exists()" shape=ellipse]
51 [label="13:CtVirtualElement@exists" shape=ellipse]
52 [label="13:CtVariableReadImpl@depCacheFile" shape=ellipse]
53 [label="13:CtInvocationImpl@depCacheFile.exists()" shape=ellipse]
54 [label="13:CtAssignmentImpl@depCacheFileExists = depCacheFile.exists()" shape=ellipse]
55 [label="14:CtVariableWriteImpl@depCacheFileLastModified" shape=ellipse]
56 [label="14:CtExecutableReferenceImpl@lastModified()" shape=ellipse]
57 [label="14:CtVirtualElement@lastModified" shape=ellipse]
58 [label="14:CtVariableReadImpl@depCacheFile" shape=ellipse]
59 [label="14:CtInvocationImpl@depCacheFile.lastModified()" shape=ellipse]
60 [label="14:CtAssignmentImpl@depCacheFileLastModified = depCacheFile.lastModified()" shape=ellipse]
61 [label="10:CtBlockImpl@\{
    dependencyMap = readCachedDependencies();
    depCacheFile = new File(cache, CACHE_FILE_NAME);
    depCacheFileExists = depCacheFile.exists();
    depCacheFileLastModified = depCacheFile.lastModified();
\}" shape=ellipse]
62 [label="10:CtIfImpl@if (cache != null) \{
    dependencyMap = readCachedDependencies();
    depCacheFile = new File(cache, CACHE_FILE_NAME);
    depCacheFileExists = depCacheFile.exists();
    depCacheFileLastModified = depCacheFile.lastModified();
\}" shape=ellipse]
63 [label="16:CtTypeReferenceImpl@Iterator" shape=ellipse]
64 [label="16:CtExecutableReferenceImpl@iterator()" shape=ellipse]
65 [label="16:CtVirtualElement@iterator" shape=ellipse]
66 [label="16:CtExecutableReferenceImpl@getClassFiles(<unknown>)" shape=ellipse]
67 [label="16:CtVirtualElement@getClassFiles" shape=ellipse]
68 [label="16:CtFieldReadImpl@destPath" shape=ellipse]
69 [label="16:CtInvocationImpl@getClassFiles(destPath)" shape=ellipse]
70 [label="16:CtInvocationImpl@getClassFiles(destPath).iterator()" shape=ellipse]
71 [label="16:CtVirtualElement@e" shape=ellipse]
72 [label="16:CtLocalVariableImpl@Iterator e = getClassFiles(destPath).iterator()" shape=ellipse]
73 [label="16:CtExecutableReferenceImpl@hasNext()" shape=ellipse]
74 [label="16:CtVirtualElement@hasNext" shape=ellipse]
75 [label="16:CtVariableReadImpl@e" shape=ellipse]
76 [label="16:CtInvocationImpl@e.hasNext()" shape=ellipse]
77 [label="17:CtTypeReferenceImpl@ClassFileInfo" shape=ellipse]
78 [label="17:CtExecutableReferenceImpl@next()" shape=ellipse]
79 [label="17:CtVirtualElement@next" shape=ellipse]
80 [label="17:CtVariableReadImpl@e" shape=ellipse]
81 [label="17:CtInvocationImpl@((ClassFileInfo) (e.next()))" shape=ellipse]
82 [label="17:CtTypeReferenceImpl@ClassFileInfo" shape=ellipse]
83 [label="17:CtVirtualElement@info" shape=ellipse]
84 [label="17:CtLocalVariableImpl@ClassFileInfo info = ((ClassFileInfo) (e.next()))" shape=ellipse]
85 [label="18:CtExecutableReferenceImpl@debug()" shape=ellipse]
86 [label="18:CtVirtualElement@debug" shape=ellipse]
87 [label="18:CtExecutableReferenceImpl@getLogger()" shape=ellipse]
88 [label="18:CtVirtualElement@getLogger" shape=ellipse]
89 [label="18:CtInvocationImpl@getLogger()" shape=ellipse]
90 [label="18:CtLiteralImpl@\"Adding class info for \"" shape=ellipse]
91 [label="18:CtVariableReadImpl@info" shape=ellipse]
92 [label="18:CtLocalVariableReferenceImpl@info" shape=ellipse]
93 [label="18:CtFieldReadImpl@info.className" shape=ellipse]
94 [label="18:CtBinaryOperatorImpl@\"Adding class info for \" + info.className" shape=ellipse]
95 [label="18:CtInvocationImpl@getLogger().debug(\"Adding class info for \" + info.className)" shape=ellipse]
96 [label="19:CtExecutableReferenceImpl@put(ClassFileInfo)" shape=ellipse]
97 [label="19:CtVirtualElement@put" shape=ellipse]
98 [label="19:CtFieldReadImpl@classFileInfoMap" shape=ellipse]
99 [label="19:CtVariableReadImpl@info" shape=ellipse]
100 [label="19:CtLocalVariableReferenceImpl@info" shape=ellipse]
101 [label="19:CtFieldReadImpl@info.className" shape=ellipse]
102 [label="19:CtVariableReadImpl@info" shape=ellipse]
103 [label="19:CtInvocationImpl@classFileInfoMap.put(info.className, info)" shape=ellipse]
104 [label="20:CtTypeReferenceImpl@ArrayList" shape=ellipse]
105 [label="20:CtLiteralImpl@null" shape=ellipse]
106 [label="20:CtVirtualElement@dependencyList" shape=ellipse]
107 [label="20:CtLocalVariableImpl@ArrayList dependencyList = null" shape=ellipse]
108 [label="21:CtFieldReadImpl@cache" shape=ellipse]
109 [label="21:CtLiteralImpl@null" shape=ellipse]
110 [label="21:CtBinaryOperatorImpl@cache != null" shape=ellipse]
111 [label="22:CtVariableReadImpl@depCacheFileExists" shape=ellipse]
112 [label="22:CtVariableReadImpl@depCacheFileLastModified" shape=ellipse]
113 [label="22:CtExecutableReferenceImpl@lastModified()" shape=ellipse]
114 [label="22:CtVirtualElement@lastModified" shape=ellipse]
115 [label="22:CtVariableReadImpl@info" shape=ellipse]
116 [label="22:CtLocalVariableReferenceImpl@info" shape=ellipse]
117 [label="22:CtFieldReadImpl@info.absoluteFile" shape=ellipse]
118 [label="22:CtInvocationImpl@info.absoluteFile.lastModified()" shape=ellipse]
119 [label="22:CtBinaryOperatorImpl@(depCacheFileLastModified > info.absoluteFile.lastModified())" shape=ellipse]
120 [label="22:CtBinaryOperatorImpl@depCacheFileExists && (depCacheFileLastModified > info.absoluteFile.lastModified())" shape=ellipse]
121 [label="23:CtVariableWriteImpl@dependencyList" shape=ellipse]
122 [label="23:CtExecutableReferenceImpl@get()" shape=ellipse]
123 [label="23:CtVirtualElement@get" shape=ellipse]
124 [label="23:CtVariableReadImpl@dependencyMap" shape=ellipse]
125 [label="23:CtVariableReadImpl@info" shape=ellipse]
126 [label="23:CtLocalVariableReferenceImpl@info" shape=ellipse]
127 [label="23:CtFieldReadImpl@info.className" shape=ellipse]
128 [label="23:CtInvocationImpl@((ArrayList) (dependencyMap.get(info.className)))" shape=ellipse]
129 [label="23:CtTypeReferenceImpl@ArrayList" shape=ellipse]
130 [label="23:CtAssignmentImpl@dependencyList = ((ArrayList) (dependencyMap.get(info.className)))" shape=ellipse]
131 [label="22:CtBlockImpl@\{
    dependencyList = ((ArrayList) (dependencyMap.get(info.className)));
\}" shape=ellipse]
132 [label="22:CtIfImpl@if (depCacheFileExists && (depCacheFileLastModified > info.absoluteFile.lastModified())) \{
    dependencyList = ((ArrayList) (dependencyMap.get(info.className)));
\}" shape=ellipse]
133 [label="21:CtBlockImpl@\{
    if (depCacheFileExists && (depCacheFileLastModified > info.absoluteFile.lastModified())) \{
        dependencyList = ((ArrayList) (dependencyMap.get(info.className)));
    \}
\}" shape=ellipse]
134 [label="21:CtIfImpl@if (cache != null) \{
    if (depCacheFileExists && (depCacheFileLastModified > info.absoluteFile.lastModified())) \{
        dependencyList = ((ArrayList) (dependencyMap.get(info.className)));
    \}
\}" shape=ellipse]
135 [label="26:CtVariableReadImpl@dependencyList" shape=ellipse]
136 [label="26:CtLiteralImpl@null" shape=ellipse]
137 [label="26:CtBinaryOperatorImpl@dependencyList == null" shape=ellipse]
138 [label="27:CtTypeReferenceImpl@FileInputStream" shape=ellipse]
139 [label="27:CtLiteralImpl@null" shape=ellipse]
140 [label="27:CtVirtualElement@inFileStream" shape=ellipse]
141 [label="27:CtLocalVariableImpl@FileInputStream inFileStream = null" shape=ellipse]
142 [label="29:CtVariableWriteImpl@inFileStream" shape=ellipse]
143 [label="29:CtTypeReferenceImpl@FileInputStream" shape=ellipse]
144 [label="29:CtVariableReadImpl@info" shape=ellipse]
145 [label="29:CtLocalVariableReferenceImpl@info" shape=ellipse]
146 [label="29:CtFieldReadImpl@info.absoluteFile" shape=ellipse]
147 [label="29:CtConstructorCallImpl@new FileInputStream(info.absoluteFile)" shape=ellipse]
148 [label="29:CtAssignmentImpl@inFileStream = new FileInputStream(info.absoluteFile)" shape=ellipse]
149 [label="30:CtTypeReferenceImpl@ClassFile" shape=ellipse]
150 [label="30:CtTypeReferenceImpl@ClassFile" shape=ellipse]
151 [label="30:CtConstructorCallImpl@new ClassFile()" shape=ellipse]
152 [label="30:CtVirtualElement@classFile" shape=ellipse]
153 [label="30:CtLocalVariableImpl@ClassFile classFile = new ClassFile()" shape=ellipse]
154 [label="31:CtExecutableReferenceImpl@read(FileInputStream)" shape=ellipse]
155 [label="31:CtVirtualElement@read" shape=ellipse]
156 [label="31:CtVariableReadImpl@classFile" shape=ellipse]
157 [label="31:CtVariableReadImpl@inFileStream" shape=ellipse]
158 [label="31:CtInvocationImpl@classFile.read(inFileStream)" shape=ellipse]
159 [label="32:CtVariableWriteImpl@dependencyList" shape=ellipse]
160 [label="32:CtExecutableReferenceImpl@getClassRefs()" shape=ellipse]
161 [label="32:CtVirtualElement@getClassRefs" shape=ellipse]
162 [label="32:CtVariableReadImpl@classFile" shape=ellipse]
163 [label="32:CtInvocationImpl@classFile.getClassRefs()" shape=ellipse]
164 [label="32:CtAssignmentImpl@dependencyList = classFile.getClassRefs()" shape=ellipse]
165 [label="33:CtVariableReadImpl@dependencyList" shape=ellipse]
166 [label="33:CtLiteralImpl@null" shape=ellipse]
167 [label="33:CtBinaryOperatorImpl@dependencyList != null" shape=ellipse]
168 [label="34:CtVariableWriteImpl@cacheDirty" shape=ellipse]
169 [label="34:CtLiteralImpl@true" shape=ellipse]
170 [label="34:CtAssignmentImpl@cacheDirty = true" shape=ellipse]
171 [label="35:CtExecutableReferenceImpl@put(ArrayList)" shape=ellipse]
172 [label="35:CtVirtualElement@put" shape=ellipse]
173 [label="35:CtVariableReadImpl@dependencyMap" shape=ellipse]
174 [label="35:CtVariableReadImpl@info" shape=ellipse]
175 [label="35:CtLocalVariableReferenceImpl@info" shape=ellipse]
176 [label="35:CtFieldReadImpl@info.className" shape=ellipse]
177 [label="35:CtVariableReadImpl@dependencyList" shape=ellipse]
178 [label="35:CtInvocationImpl@dependencyMap.put(info.className, dependencyList)" shape=ellipse]
179 [label="33:CtBlockImpl@\{
    cacheDirty = true;
    dependencyMap.put(info.className, dependencyList);
\}" shape=ellipse]
180 [label="33:CtIfImpl@if (dependencyList != null) \{
    cacheDirty = true;
    dependencyMap.put(info.className, dependencyList);
\}" shape=ellipse]
181 [label="28:CtBlockImpl@\{
    inFileStream = new FileInputStream(info.absoluteFile);
    ClassFile classFile = new ClassFile();
    classFile.read(inFileStream);
    dependencyList = classFile.getClassRefs();
    if (dependencyList != null) \{
        cacheDirty = true;
        dependencyMap.put(info.className, dependencyList);
    \}
\}" shape=ellipse]
182 [label="38:CtVariableReadImpl@inFileStream" shape=ellipse]
183 [label="38:CtLiteralImpl@null" shape=ellipse]
184 [label="38:CtBinaryOperatorImpl@inFileStream != null" shape=ellipse]
185 [label="39:CtExecutableReferenceImpl@close()" shape=ellipse]
186 [label="39:CtVirtualElement@close" shape=ellipse]
187 [label="39:CtVariableReadImpl@inFileStream" shape=ellipse]
188 [label="39:CtInvocationImpl@inFileStream.close()" shape=ellipse]
189 [label="38:CtBlockImpl@\{
    inFileStream.close();
\}" shape=ellipse]
190 [label="38:CtIfImpl@if (inFileStream != null) \{
    inFileStream.close();
\}" shape=ellipse]
191 [label="37:CtBlockImpl@\{
    if (inFileStream != null) \{
        inFileStream.close();
    \}
\}" shape=ellipse]
192 [label="28:CtTryImpl@try \{
    inFileStream = new FileInputStream(info.absoluteFile);
    ClassFile classFile = new ClassFile();
    classFile.read(inFileStream);
    dependencyList = classFile.getClassRefs();
    if (dependencyList != null) \{
        cacheDirty = true;
        dependencyMap.put(info.className, dependencyList);
    \}
\} finally \{
    if (inFileStream != null) \{
        inFileStream.close();
    \}
\}" shape=ellipse]
193 [label="26:CtBlockImpl@\{
    FileInputStream inFileStream = null;
    try \{
        inFileStream = new FileInputStream(info.absoluteFile);
        ClassFile classFile = new ClassFile();
        classFile.read(inFileStream);
        dependencyList = classFile.getClassRefs();
        if (dependencyList != null) \{
            cacheDirty = true;
            dependencyMap.put(info.className, dependencyList);
        \}
    \} finally \{
        if (inFileStream != null) \{
            inFileStream.close();
        \}
    \}
\}" shape=ellipse]
194 [label="26:CtIfImpl@if (dependencyList == null) \{
    FileInputStream inFileStream = null;
    try \{
        inFileStream = new FileInputStream(info.absoluteFile);
        ClassFile classFile = new ClassFile();
        classFile.read(inFileStream);
        dependencyList = classFile.getClassRefs();
        if (dependencyList != null) \{
            cacheDirty = true;
            dependencyMap.put(info.className, dependencyList);
        \}
    \} finally \{
        if (inFileStream != null) \{
            inFileStream.close();
        \}
    \}
\}" shape=ellipse]
195 [label="43:CtTypeReferenceImpl@Iterator" shape=ellipse]
196 [label="43:CtExecutableReferenceImpl@iterator()" shape=ellipse]
197 [label="43:CtVirtualElement@iterator" shape=ellipse]
198 [label="43:CtVariableReadImpl@dependencyList" shape=ellipse]
199 [label="43:CtInvocationImpl@dependencyList.iterator()" shape=ellipse]
200 [label="43:CtVirtualElement@depEnum" shape=ellipse]
201 [label="43:CtLocalVariableImpl@Iterator depEnum = dependencyList.iterator()" shape=ellipse]
202 [label="43:CtExecutableReferenceImpl@hasNext()" shape=ellipse]
203 [label="43:CtVirtualElement@hasNext" shape=ellipse]
204 [label="43:CtVariableReadImpl@depEnum" shape=ellipse]
205 [label="43:CtInvocationImpl@depEnum.hasNext()" shape=ellipse]
206 [label="44:CtTypeReferenceImpl@String" shape=ellipse]
207 [label="44:CtExecutableReferenceImpl@next()" shape=ellipse]
208 [label="44:CtVirtualElement@next" shape=ellipse]
209 [label="44:CtVariableReadImpl@depEnum" shape=ellipse]
210 [label="44:CtInvocationImpl@((String) (depEnum.next()))" shape=ellipse]
211 [label="44:CtTypeReferenceImpl@String" shape=ellipse]
212 [label="44:CtVirtualElement@dependentClass" shape=ellipse]
213 [label="44:CtLocalVariableImpl@String dependentClass = ((String) (depEnum.next()))" shape=ellipse]
214 [label="45:CtTypeReferenceImpl@Hashtable" shape=ellipse]
215 [label="45:CtExecutableReferenceImpl@get(java.lang.String)" shape=ellipse]
216 [label="45:CtVirtualElement@get" shape=ellipse]
217 [label="45:CtFieldReadImpl@affectedClassMap" shape=ellipse]
218 [label="45:CtVariableReadImpl@dependentClass" shape=ellipse]
219 [label="45:CtInvocationImpl@((Hashtable) (affectedClassMap.get(dependentClass)))" shape=ellipse]
220 [label="45:CtTypeReferenceImpl@Hashtable" shape=ellipse]
221 [label="45:CtVirtualElement@affectedClasses" shape=ellipse]
222 [label="45:CtLocalVariableImpl@Hashtable affectedClasses = ((Hashtable) (affectedClassMap.get(dependentClass)))" shape=ellipse]
223 [label="46:CtVariableReadImpl@affectedClasses" shape=ellipse]
224 [label="46:CtLiteralImpl@null" shape=ellipse]
225 [label="46:CtBinaryOperatorImpl@affectedClasses == null" shape=ellipse]
226 [label="47:CtVariableWriteImpl@affectedClasses" shape=ellipse]
227 [label="47:CtTypeReferenceImpl@Hashtable" shape=ellipse]
228 [label="47:CtConstructorCallImpl@new Hashtable()" shape=ellipse]
229 [label="47:CtAssignmentImpl@affectedClasses = new Hashtable()" shape=ellipse]
230 [label="48:CtExecutableReferenceImpl@put(java.lang.String,Hashtable)" shape=ellipse]
231 [label="48:CtVirtualElement@put" shape=ellipse]
232 [label="48:CtFieldReadImpl@affectedClassMap" shape=ellipse]
233 [label="48:CtVariableReadImpl@dependentClass" shape=ellipse]
234 [label="48:CtVariableReadImpl@affectedClasses" shape=ellipse]
235 [label="48:CtInvocationImpl@affectedClassMap.put(dependentClass, affectedClasses)" shape=ellipse]
236 [label="46:CtBlockImpl@\{
    affectedClasses = new Hashtable();
    affectedClassMap.put(dependentClass, affectedClasses);
\}" shape=ellipse]
237 [label="46:CtIfImpl@if (affectedClasses == null) \{
    affectedClasses = new Hashtable();
    affectedClassMap.put(dependentClass, affectedClasses);
\}" shape=ellipse]
238 [label="50:CtExecutableReferenceImpl@put(ClassFileInfo)" shape=ellipse]
239 [label="50:CtVirtualElement@put" shape=ellipse]
240 [label="50:CtVariableReadImpl@affectedClasses" shape=ellipse]
241 [label="50:CtVariableReadImpl@info" shape=ellipse]
242 [label="50:CtLocalVariableReferenceImpl@info" shape=ellipse]
243 [label="50:CtFieldReadImpl@info.className" shape=ellipse]
244 [label="50:CtVariableReadImpl@info" shape=ellipse]
245 [label="50:CtInvocationImpl@affectedClasses.put(info.className, info)" shape=ellipse]
246 [label="43:CtBlockImpl@\{
    String dependentClass = ((String) (depEnum.next()));
    Hashtable affectedClasses = ((Hashtable) (affectedClassMap.get(dependentClass)));
    if (affectedClasses == null) \{
        affectedClasses = new Hashtable();
        affectedClassMap.put(dependentClass, affectedClasses);
    \}
    affectedClasses.put(info.className, info);
\}" shape=ellipse]
247 [label="43:CtForImpl@for (Iterator depEnum = dependencyList.iterator(); depEnum.hasNext();) \{
    String dependentClass = ((String) (depEnum.next()));
    Hashtable affectedClasses = ((Hashtable) (affectedClassMap.get(dependentClass)));
    if (affectedClasses == null) \{
        affectedClasses = new Hashtable();
        affectedClassMap.put(dependentClass, affectedClasses);
    \}
    affectedClasses.put(info.className, info);
\}" shape=ellipse]
248 [label="16:CtBlockImpl@\{
    ClassFileInfo info = ((ClassFileInfo) (e.next()));
    getLogger().debug(\"Adding class info for \" + info.className);
    classFileInfoMap.put(info.className, info);
    ArrayList dependencyList = null;
    if (cache != null) \{
        if (depCacheFileExists && (depCacheFileLastModified > info.absoluteFile.lastModified())) \{
            dependencyList = ((ArrayList) (dependencyMap.get(info.className)));
        \}
    \}
    if (dependencyList == null) \{
        FileInputStream inFileStream = null;
        try \{
            inFileStream = new FileInputStream(info.absoluteFile);
            ClassFile classFile = new ClassFile();
            classFile.read(inFileStream);
            dependencyList = classFile.getClassRefs();
            if (dependencyList != null) \{
                cacheDirty = true;
                dependencyMap.put(info.className, dependencyList);
            \}
        \} finally \{
            if (inFileStream != null) \{
                inFileStream.close();
            \}
        \}
    \}
    for (Iterator depEnum = dependencyList.iterator(); depEnum.hasNext();) \{
        String dependentClass = ((String) (depEnum.next()));
        Hashtable affectedClasses = ((Hashtable) (affectedClassMap.get(dependentClass)));
        if (affectedClasses == null) \{
            affectedClasses = new Hashtable();
            affectedClassMap.put(dependentClass, affectedClasses);
        \}
        affectedClasses.put(info.className, info);
    \}
\}" shape=ellipse]
249 [label="16:CtForImpl@for (Iterator e = getClassFiles(destPath).iterator(); e.hasNext();) \{
    ClassFileInfo info = ((ClassFileInfo) (e.next()));
    getLogger().debug(\"Adding class info for \" + info.className);
    classFileInfoMap.put(info.className, info);
    ArrayList dependencyList = null;
    if (cache != null) \{
        if (depCacheFileExists && (depCacheFileLastModified > info.absoluteFile.lastModified())) \{
            dependencyList = ((ArrayList) (dependencyMap.get(info.className)));
        \}
    \}
    if (dependencyList == null) \{
        FileInputStream inFileStream = null;
        try \{
            inFileStream = new FileInputStream(info.absoluteFile);
            ClassFile classFile = new ClassFile();
            classFile.read(inFileStream);
            dependencyList = classFile.getClassRefs();
            if (dependencyList != null) \{
                cacheDirty = true;
                dependencyMap.put(info.className, dependencyList);
            \}
        \} finally \{
            if (inFileStream != null) \{
                inFileStream.close();
            \}
        \}
    \}
    for (Iterator depEnum = dependencyList.iterator(); depEnum.hasNext();) \{
        String dependentClass = ((String) (depEnum.next()));
        Hashtable affectedClasses = ((Hashtable) (affectedClassMap.get(dependentClass)));
        if (affectedClasses == null) \{
            affectedClasses = new Hashtable();
            affectedClassMap.put(dependentClass, affectedClasses);
        \}
        affectedClasses.put(info.className, info);
    \}
\}" shape=ellipse]
250 [label="53:CtFieldWriteImpl@classpathDependencies" shape=ellipse]
251 [label="53:CtLiteralImpl@null" shape=ellipse]
252 [label="53:CtAssignmentImpl@classpathDependencies = null" shape=ellipse]
253 [label="54:CtFieldReadImpl@dependClasspath" shape=ellipse]
254 [label="54:CtLiteralImpl@null" shape=ellipse]
255 [label="54:CtBinaryOperatorImpl@dependClasspath != null" shape=ellipse]
256 [label="55:CtFieldWriteImpl@classpathDependencies" shape=ellipse]
257 [label="55:CtTypeReferenceImpl@Hashtable" shape=ellipse]
258 [label="55:CtConstructorCallImpl@new Hashtable()" shape=ellipse]
259 [label="55:CtAssignmentImpl@classpathDependencies = new Hashtable()" shape=ellipse]
260 [label="56:CtTypeReferenceImpl@ClassLoader" shape=ellipse]
261 [label="56:CtTypeReferenceImpl@URLClassLoader" shape=ellipse]
262 [label="56:CtExecutableReferenceImpl@toURLs()" shape=ellipse]
263 [label="56:CtVirtualElement@toURLs" shape=ellipse]
264 [label="56:CtFieldReadImpl@dependClasspath" shape=ellipse]
265 [label="56:CtInvocationImpl@dependClasspath.toURLs()" shape=ellipse]
266 [label="56:CtConstructorCallImpl@new URLClassLoader(dependClasspath.toURLs())" shape=ellipse]
267 [label="56:CtVirtualElement@classLoader" shape=ellipse]
268 [label="56:CtLocalVariableImpl@final ClassLoader classLoader = new URLClassLoader(dependClasspath.toURLs())" shape=ellipse]
269 [label="57:CtTypeReferenceImpl@Hashtable" shape=ellipse]
270 [label="57:CtTypeReferenceImpl@Hashtable" shape=ellipse]
271 [label="57:CtConstructorCallImpl@new Hashtable()" shape=ellipse]
272 [label="57:CtVirtualElement@classpathFileCache" shape=ellipse]
273 [label="57:CtLocalVariableImpl@Hashtable classpathFileCache = new Hashtable()" shape=ellipse]
274 [label="58:CtTypeReferenceImpl@Object" shape=ellipse]
275 [label="58:CtTypeReferenceImpl@Object" shape=ellipse]
276 [label="58:CtConstructorCallImpl@new Object()" shape=ellipse]
277 [label="58:CtVirtualElement@nullFileMarker" shape=ellipse]
278 [label="58:CtLocalVariableImpl@Object nullFileMarker = new Object()" shape=ellipse]
279 [label="59:CtTypeReferenceImpl@Enumeration" shape=ellipse]
280 [label="59:CtExecutableReferenceImpl@keys()" shape=ellipse]
281 [label="59:CtVirtualElement@keys" shape=ellipse]
282 [label="59:CtVariableReadImpl@dependencyMap" shape=ellipse]
283 [label="59:CtInvocationImpl@dependencyMap.keys()" shape=ellipse]
284 [label="59:CtVirtualElement@e" shape=ellipse]
285 [label="59:CtLocalVariableImpl@Enumeration e = dependencyMap.keys()" shape=ellipse]
286 [label="59:CtExecutableReferenceImpl@hasMoreElements()" shape=ellipse]
287 [label="59:CtVirtualElement@hasMoreElements" shape=ellipse]
288 [label="59:CtVariableReadImpl@e" shape=ellipse]
289 [label="59:CtInvocationImpl@e.hasMoreElements()" shape=ellipse]
290 [label="60:CtTypeReferenceImpl@String" shape=ellipse]
291 [label="60:CtExecutableReferenceImpl@nextElement()" shape=ellipse]
292 [label="60:CtVirtualElement@nextElement" shape=ellipse]
293 [label="60:CtVariableReadImpl@e" shape=ellipse]
294 [label="60:CtInvocationImpl@((String) (e.nextElement()))" shape=ellipse]
295 [label="60:CtTypeReferenceImpl@String" shape=ellipse]
296 [label="60:CtVirtualElement@className" shape=ellipse]
297 [label="60:CtLocalVariableImpl@String className = ((String) (e.nextElement()))" shape=ellipse]
298 [label="61:CtTypeReferenceImpl@ArrayList" shape=ellipse]
299 [label="61:CtExecutableReferenceImpl@get(java.lang.String)" shape=ellipse]
300 [label="61:CtVirtualElement@get" shape=ellipse]
301 [label="61:CtVariableReadImpl@dependencyMap" shape=ellipse]
302 [label="61:CtVariableReadImpl@className" shape=ellipse]
303 [label="61:CtInvocationImpl@((ArrayList) (dependencyMap.get(className)))" shape=ellipse]
304 [label="61:CtTypeReferenceImpl@ArrayList" shape=ellipse]
305 [label="61:CtVirtualElement@dependencyList" shape=ellipse]
306 [label="61:CtLocalVariableImpl@ArrayList dependencyList = ((ArrayList) (dependencyMap.get(className)))" shape=ellipse]
307 [label="62:CtTypeReferenceImpl@Hashtable" shape=ellipse]
308 [label="62:CtTypeReferenceImpl@Hashtable" shape=ellipse]
309 [label="62:CtConstructorCallImpl@new Hashtable()" shape=ellipse]
310 [label="62:CtVirtualElement@dependencies" shape=ellipse]
311 [label="62:CtLocalVariableImpl@Hashtable dependencies = new Hashtable()" shape=ellipse]
312 [label="63:CtExecutableReferenceImpl@put(java.lang.String,Hashtable)" shape=ellipse]
313 [label="63:CtVirtualElement@put" shape=ellipse]
314 [label="63:CtFieldReadImpl@classpathDependencies" shape=ellipse]
315 [label="63:CtVariableReadImpl@className" shape=ellipse]
316 [label="63:CtVariableReadImpl@dependencies" shape=ellipse]
317 [label="63:CtInvocationImpl@classpathDependencies.put(className, dependencies)" shape=ellipse]
318 [label="64:CtTypeReferenceImpl@Iterator" shape=ellipse]
319 [label="64:CtExecutableReferenceImpl@iterator()" shape=ellipse]
320 [label="64:CtVirtualElement@iterator" shape=ellipse]
321 [label="64:CtVariableReadImpl@dependencyList" shape=ellipse]
322 [label="64:CtInvocationImpl@dependencyList.iterator()" shape=ellipse]
323 [label="64:CtVirtualElement@e2" shape=ellipse]
324 [label="64:CtLocalVariableImpl@Iterator e2 = dependencyList.iterator()" shape=ellipse]
325 [label="64:CtExecutableReferenceImpl@hasNext()" shape=ellipse]
326 [label="64:CtVirtualElement@hasNext" shape=ellipse]
327 [label="64:CtVariableReadImpl@e2" shape=ellipse]
328 [label="64:CtInvocationImpl@e2.hasNext()" shape=ellipse]
329 [label="65:CtTypeReferenceImpl@String" shape=ellipse]
330 [label="65:CtExecutableReferenceImpl@next()" shape=ellipse]
331 [label="65:CtVirtualElement@next" shape=ellipse]
332 [label="65:CtVariableReadImpl@e2" shape=ellipse]
333 [label="65:CtInvocationImpl@((String) (e2.next()))" shape=ellipse]
334 [label="65:CtTypeReferenceImpl@String" shape=ellipse]
335 [label="65:CtVirtualElement@dependency" shape=ellipse]
336 [label="65:CtLocalVariableImpl@String dependency = ((String) (e2.next()))" shape=ellipse]
337 [label="66:CtTypeReferenceImpl@Object" shape=ellipse]
338 [label="66:CtExecutableReferenceImpl@get(java.lang.String)" shape=ellipse]
339 [label="66:CtVirtualElement@get" shape=ellipse]
340 [label="66:CtVariableReadImpl@classpathFileCache" shape=ellipse]
341 [label="66:CtVariableReadImpl@dependency" shape=ellipse]
342 [label="66:CtInvocationImpl@classpathFileCache.get(dependency)" shape=ellipse]
343 [label="66:CtVirtualElement@classpathFileObject" shape=ellipse]
344 [label="66:CtLocalVariableImpl@Object classpathFileObject = classpathFileCache.get(dependency)" shape=ellipse]
345 [label="67:CtVariableReadImpl@classpathFileObject" shape=ellipse]
346 [label="67:CtLiteralImpl@null" shape=ellipse]
347 [label="67:CtBinaryOperatorImpl@classpathFileObject == null" shape=ellipse]
348 [label="68:CtVariableWriteImpl@classpathFileObject" shape=ellipse]
349 [label="68:CtVariableReadImpl@nullFileMarker" shape=ellipse]
350 [label="68:CtAssignmentImpl@classpathFileObject = nullFileMarker" shape=ellipse]
351 [label="69:CtExecutableReferenceImpl@startsWith(java.lang.String)" shape=ellipse]
352 [label="69:CtVirtualElement@startsWith" shape=ellipse]
353 [label="69:CtVariableReadImpl@dependency" shape=ellipse]
354 [label="69:CtLiteralImpl@\"java.\"" shape=ellipse]
355 [label="69:CtInvocationImpl@dependency.startsWith(\"java.\")" shape=ellipse]
356 [label="69:CtUnaryOperatorImpl@(!dependency.startsWith(\"java.\"))" shape=ellipse]
357 [label="69:CtExecutableReferenceImpl@startsWith(java.lang.String)" shape=ellipse]
358 [label="69:CtVirtualElement@startsWith" shape=ellipse]
359 [label="69:CtVariableReadImpl@dependency" shape=ellipse]
360 [label="69:CtLiteralImpl@\"javax.\"" shape=ellipse]
361 [label="69:CtInvocationImpl@dependency.startsWith(\"javax.\")" shape=ellipse]
362 [label="69:CtUnaryOperatorImpl@(!dependency.startsWith(\"javax.\"))" shape=ellipse]
363 [label="69:CtBinaryOperatorImpl@(!dependency.startsWith(\"java.\")) && (!dependency.startsWith(\"javax.\"))" shape=ellipse]
364 [label="70:CtTypeReferenceImpl@String" shape=ellipse]
365 [label="70:CtExecutableReferenceImpl@replace(char,char)" shape=ellipse]
366 [label="70:CtVirtualElement@replace" shape=ellipse]
367 [label="70:CtVariableReadImpl@dependency" shape=ellipse]
368 [label="70:CtLiteralImpl@'.'" shape=ellipse]
369 [label="70:CtLiteralImpl@'/'" shape=ellipse]
370 [label="70:CtInvocationImpl@dependency.replace('.', '/')" shape=ellipse]
371 [label="70:CtLiteralImpl@\".class\"" shape=ellipse]
372 [label="70:CtBinaryOperatorImpl@dependency.replace('.', '/') + \".class\"" shape=ellipse]
373 [label="70:CtVirtualElement@name" shape=ellipse]
374 [label="70:CtLocalVariableImpl@final String name = dependency.replace('.', '/') + \".class\"" shape=ellipse]
375 [label="71:CtTypeReferenceImpl@URL" shape=ellipse]
376 [label="71:CtExecutableReferenceImpl@getResource(java.lang.String)" shape=ellipse]
377 [label="71:CtVirtualElement@getResource" shape=ellipse]
378 [label="71:CtVariableReadImpl@classLoader" shape=ellipse]
379 [label="71:CtVariableReadImpl@name" shape=ellipse]
380 [label="71:CtInvocationImpl@classLoader.getResource(name)" shape=ellipse]
381 [label="71:CtVirtualElement@classURL" shape=ellipse]
382 [label="71:CtLocalVariableImpl@URL classURL = classLoader.getResource(name)" shape=ellipse]
383 [label="72:CtVariableReadImpl@classURL" shape=ellipse]
384 [label="72:CtLiteralImpl@null" shape=ellipse]
385 [label="72:CtBinaryOperatorImpl@classURL != null" shape=ellipse]
386 [label="73:CtExecutableReferenceImpl@equals(java.lang.String)" shape=ellipse]
387 [label="73:CtVirtualElement@equals" shape=ellipse]
388 [label="73:CtExecutableReferenceImpl@getProtocol()" shape=ellipse]
389 [label="73:CtVirtualElement@getProtocol" shape=ellipse]
390 [label="73:CtVariableReadImpl@classURL" shape=ellipse]
391 [label="73:CtInvocationImpl@classURL.getProtocol()" shape=ellipse]
392 [label="73:CtLiteralImpl@\"jar\"" shape=ellipse]
393 [label="73:CtInvocationImpl@classURL.getProtocol().equals(\"jar\")" shape=ellipse]
394 [label="74:CtTypeReferenceImpl@String" shape=ellipse]
395 [label="74:CtExecutableReferenceImpl@getFile()" shape=ellipse]
396 [label="74:CtVirtualElement@getFile" shape=ellipse]
397 [label="74:CtVariableReadImpl@classURL" shape=ellipse]
398 [label="74:CtInvocationImpl@classURL.getFile()" shape=ellipse]
399 [label="74:CtVirtualElement@jarFilePath" shape=ellipse]
400 [label="74:CtLocalVariableImpl@String jarFilePath = classURL.getFile()" shape=ellipse]
401 [label="75:CtExecutableReferenceImpl@startsWith(java.lang.String)" shape=ellipse]
402 [label="75:CtVirtualElement@startsWith" shape=ellipse]
403 [label="75:CtVariableReadImpl@jarFilePath" shape=ellipse]
404 [label="75:CtLiteralImpl@\"file:\"" shape=ellipse]
405 [label="75:CtInvocationImpl@jarFilePath.startsWith(\"file:\")" shape=ellipse]
406 [label="76:CtTypeReferenceImpl@int" shape=ellipse]
407 [label="76:CtExecutableReferenceImpl@indexOf(int)" shape=ellipse]
408 [label="76:CtVirtualElement@indexOf" shape=ellipse]
409 [label="76:CtVariableReadImpl@jarFilePath" shape=ellipse]
410 [label="76:CtLiteralImpl@'!'" shape=ellipse]
411 [label="76:CtInvocationImpl@jarFilePath.indexOf('!')" shape=ellipse]
412 [label="76:CtVirtualElement@classMarker" shape=ellipse]
413 [label="76:CtLocalVariableImpl@int classMarker = jarFilePath.indexOf('!')" shape=ellipse]
414 [label="77:CtVariableWriteImpl@jarFilePath" shape=ellipse]
415 [label="77:CtExecutableReferenceImpl@substring(int,int)" shape=ellipse]
416 [label="77:CtVirtualElement@substring" shape=ellipse]
417 [label="77:CtVariableReadImpl@jarFilePath" shape=ellipse]
418 [label="77:CtLiteralImpl@5" shape=ellipse]
419 [label="77:CtVariableReadImpl@classMarker" shape=ellipse]
420 [label="77:CtInvocationImpl@jarFilePath.substring(5, classMarker)" shape=ellipse]
421 [label="77:CtAssignmentImpl@jarFilePath = jarFilePath.substring(5, classMarker)" shape=ellipse]
422 [label="75:CtBlockImpl@\{
    int classMarker = jarFilePath.indexOf('!');
    jarFilePath = jarFilePath.substring(5, classMarker);
\}" shape=ellipse]
423 [label="75:CtIfImpl@if (jarFilePath.startsWith(\"file:\")) \{
    int classMarker = jarFilePath.indexOf('!');
    jarFilePath = jarFilePath.substring(5, classMarker);
\}" shape=ellipse]
424 [label="79:CtVariableWriteImpl@classpathFileObject" shape=ellipse]
425 [label="79:CtTypeReferenceImpl@File" shape=ellipse]
426 [label="79:CtVariableReadImpl@jarFilePath" shape=ellipse]
427 [label="79:CtConstructorCallImpl@new File(jarFilePath)" shape=ellipse]
428 [label="79:CtAssignmentImpl@classpathFileObject = new File(jarFilePath)" shape=ellipse]
429 [label="73:CtBlockImpl@\{
    String jarFilePath = classURL.getFile();
    if (jarFilePath.startsWith(\"file:\")) \{
        int classMarker = jarFilePath.indexOf('!');
        jarFilePath = jarFilePath.substring(5, classMarker);
    \}
    classpathFileObject = new File(jarFilePath);
\}" shape=ellipse]
430 [label="80:CtExecutableReferenceImpl@equals(java.lang.String)" shape=ellipse]
431 [label="80:CtVirtualElement@equals" shape=ellipse]
432 [label="80:CtExecutableReferenceImpl@getProtocol()" shape=ellipse]
433 [label="80:CtVirtualElement@getProtocol" shape=ellipse]
434 [label="80:CtVariableReadImpl@classURL" shape=ellipse]
435 [label="80:CtInvocationImpl@classURL.getProtocol()" shape=ellipse]
436 [label="80:CtLiteralImpl@\"file\"" shape=ellipse]
437 [label="80:CtInvocationImpl@classURL.getProtocol().equals(\"file\")" shape=ellipse]
438 [label="81:CtTypeReferenceImpl@String" shape=ellipse]
439 [label="81:CtExecutableReferenceImpl@getFile()" shape=ellipse]
440 [label="81:CtVirtualElement@getFile" shape=ellipse]
441 [label="81:CtVariableReadImpl@classURL" shape=ellipse]
442 [label="81:CtInvocationImpl@classURL.getFile()" shape=ellipse]
443 [label="81:CtVirtualElement@classFilePath" shape=ellipse]
444 [label="81:CtLocalVariableImpl@String classFilePath = classURL.getFile()" shape=ellipse]
445 [label="82:CtVariableWriteImpl@classpathFileObject" shape=ellipse]
446 [label="82:CtTypeReferenceImpl@File" shape=ellipse]
447 [label="82:CtVariableReadImpl@classFilePath" shape=ellipse]
448 [label="82:CtConstructorCallImpl@new File(classFilePath)" shape=ellipse]
449 [label="82:CtAssignmentImpl@classpathFileObject = new File(classFilePath)" shape=ellipse]
450 [label="80:CtBlockImpl@\{
    String classFilePath = classURL.getFile();
    classpathFileObject = new File(classFilePath);
\}" shape=ellipse]
451 [label="80:CtIfImpl@if (classURL.getProtocol().equals(\"file\")) \{
    String classFilePath = classURL.getFile();
    classpathFileObject = new File(classFilePath);
\}" shape=ellipse]
452 [label="80:CtBlockImpl@
    if (classURL.getProtocol().equals(\"file\")) \{
        String classFilePath = classURL.getFile();
        classpathFileObject = new File(classFilePath);
    \}
" shape=ellipse]
453 [label="73:CtIfImpl@if (classURL.getProtocol().equals(\"jar\")) \{
    String jarFilePath = classURL.getFile();
    if (jarFilePath.startsWith(\"file:\")) \{
        int classMarker = jarFilePath.indexOf('!');
        jarFilePath = jarFilePath.substring(5, classMarker);
    \}
    classpathFileObject = new File(jarFilePath);
\} else if (classURL.getProtocol().equals(\"file\")) \{
    String classFilePath = classURL.getFile();
    classpathFileObject = new File(classFilePath);
\}" shape=ellipse]
454 [label="85:CtExecutableReferenceImpl@debug(java.lang.String)" shape=ellipse]
455 [label="84:CtVirtualElement@debug" shape=ellipse]
456 [label="84:CtExecutableReferenceImpl@getLogger()" shape=ellipse]
457 [label="84:CtVirtualElement@getLogger" shape=ellipse]
458 [label="84:CtInvocationImpl@getLogger()" shape=ellipse]
459 [label="86:CtLiteralImpl@\"Class \"" shape=ellipse]
460 [label="86:CtVariableReadImpl@className" shape=ellipse]
461 [label="86:CtBinaryOperatorImpl@(\"Class \" + className)" shape=ellipse]
462 [label="86:CtLiteralImpl@\" depends on \"" shape=ellipse]
463 [label="86:CtBinaryOperatorImpl@((\"Class \" + className) + \" depends on \")" shape=ellipse]
464 [label="86:CtVariableReadImpl@classpathFileObject" shape=ellipse]
465 [label="86:CtBinaryOperatorImpl@(((\"Class \" + className) + \" depends on \") + classpathFileObject)" shape=ellipse]
466 [label="87:CtLiteralImpl@\" due to \"" shape=ellipse]
467 [label="86:CtBinaryOperatorImpl@((((\"Class \" + className) + \" depends on \") + classpathFileObject) + \" due to \")" shape=ellipse]
468 [label="88:CtVariableReadImpl@dependency" shape=ellipse]
469 [label="86:CtBinaryOperatorImpl@((((\"Class \" + className) + \" depends on \") + classpathFileObject) + \" due to \") + dependency" shape=ellipse]
470 [label="84:CtInvocationImpl@getLogger().debug(((((\"Class \" + className) + \" depends on \") + classpathFileObject) + \" due to \") + dependency)" shape=ellipse]
471 [label="72:CtBlockImpl@\{
    if (classURL.getProtocol().equals(\"jar\")) \{
        String jarFilePath = classURL.getFile();
        if (jarFilePath.startsWith(\"file:\")) \{
            int classMarker = jarFilePath.indexOf('!');
            jarFilePath = jarFilePath.substring(5, classMarker);
        \}
        classpathFileObject = new File(jarFilePath);
    \} else if (classURL.getProtocol().equals(\"file\")) \{
        String classFilePath = classURL.getFile();
        classpathFileObject = new File(classFilePath);
    \}
    getLogger().debug(((((\"Class \" + className) + \" depends on \") + classpathFileObject) + \" due to \") + dependency);
\}" shape=ellipse]
472 [label="72:CtIfImpl@if (classURL != null) \{
    if (classURL.getProtocol().equals(\"jar\")) \{
        String jarFilePath = classURL.getFile();
        if (jarFilePath.startsWith(\"file:\")) \{
            int classMarker = jarFilePath.indexOf('!');
            jarFilePath = jarFilePath.substring(5, classMarker);
        \}
        classpathFileObject = new File(jarFilePath);
    \} else if (classURL.getProtocol().equals(\"file\")) \{
        String classFilePath = classURL.getFile();
        classpathFileObject = new File(classFilePath);
    \}
    getLogger().debug(((((\"Class \" + className) + \" depends on \") + classpathFileObject) + \" due to \") + dependency);
\}" shape=ellipse]
473 [label="69:CtBlockImpl@\{
    final String name = dependency.replace('.', '/') + \".class\";
    URL classURL = classLoader.getResource(name);
    if (classURL != null) \{
        if (classURL.getProtocol().equals(\"jar\")) \{
            String jarFilePath = classURL.getFile();
            if (jarFilePath.startsWith(\"file:\")) \{
                int classMarker = jarFilePath.indexOf('!');
                jarFilePath = jarFilePath.substring(5, classMarker);
            \}
            classpathFileObject = new File(jarFilePath);
        \} else if (classURL.getProtocol().equals(\"file\")) \{
            String classFilePath = classURL.getFile();
            classpathFileObject = new File(classFilePath);
        \}
        getLogger().debug(((((\"Class \" + className) + \" depends on \") + classpathFileObject) + \" due to \") + dependency);
    \}
\}" shape=ellipse]
474 [label="69:CtIfImpl@if ((!dependency.startsWith(\"java.\")) && (!dependency.startsWith(\"javax.\"))) \{
    final String name = dependency.replace('.', '/') + \".class\";
    URL classURL = classLoader.getResource(name);
    if (classURL != null) \{
        if (classURL.getProtocol().equals(\"jar\")) \{
            String jarFilePath = classURL.getFile();
            if (jarFilePath.startsWith(\"file:\")) \{
                int classMarker = jarFilePath.indexOf('!');
                jarFilePath = jarFilePath.substring(5, classMarker);
            \}
            classpathFileObject = new File(jarFilePath);
        \} else if (classURL.getProtocol().equals(\"file\")) \{
            String classFilePath = classURL.getFile();
            classpathFileObject = new File(classFilePath);
        \}
        getLogger().debug(((((\"Class \" + className) + \" depends on \") + classpathFileObject) + \" due to \") + dependency);
    \}
\}" shape=ellipse]
475 [label="91:CtExecutableReferenceImpl@put(java.lang.String,java.lang.Object)" shape=ellipse]
476 [label="91:CtVirtualElement@put" shape=ellipse]
477 [label="91:CtVariableReadImpl@classpathFileCache" shape=ellipse]
478 [label="91:CtVariableReadImpl@dependency" shape=ellipse]
479 [label="91:CtVariableReadImpl@classpathFileObject" shape=ellipse]
480 [label="91:CtInvocationImpl@classpathFileCache.put(dependency, classpathFileObject)" shape=ellipse]
481 [label="67:CtBlockImpl@\{
    classpathFileObject = nullFileMarker;
    if ((!dependency.startsWith(\"java.\")) && (!dependency.startsWith(\"javax.\"))) \{
        final String name = dependency.replace('.', '/') + \".class\";
        URL classURL = classLoader.getResource(name);
        if (classURL != null) \{
            if (classURL.getProtocol().equals(\"jar\")) \{
                String jarFilePath = classURL.getFile();
                if (jarFilePath.startsWith(\"file:\")) \{
                    int classMarker = jarFilePath.indexOf('!');
                    jarFilePath = jarFilePath.substring(5, classMarker);
                \}
                classpathFileObject = new File(jarFilePath);
            \} else if (classURL.getProtocol().equals(\"file\")) \{
                String classFilePath = classURL.getFile();
                classpathFileObject = new File(classFilePath);
            \}
            getLogger().debug(((((\"Class \" + className) + \" depends on \") + classpathFileObject) + \" due to \") + dependency);
        \}
    \}
    classpathFileCache.put(dependency, classpathFileObject);
\}" shape=ellipse]
482 [label="67:CtIfImpl@if (classpathFileObject == null) \{
    classpathFileObject = nullFileMarker;
    if ((!dependency.startsWith(\"java.\")) && (!dependency.startsWith(\"javax.\"))) \{
        final String name = dependency.replace('.', '/') + \".class\";
        URL classURL = classLoader.getResource(name);
        if (classURL != null) \{
            if (classURL.getProtocol().equals(\"jar\")) \{
                String jarFilePath = classURL.getFile();
                if (jarFilePath.startsWith(\"file:\")) \{
                    int classMarker = jarFilePath.indexOf('!');
                    jarFilePath = jarFilePath.substring(5, classMarker);
                \}
                classpathFileObject = new File(jarFilePath);
            \} else if (classURL.getProtocol().equals(\"file\")) \{
                String classFilePath = classURL.getFile();
                classpathFileObject = new File(classFilePath);
            \}
            getLogger().debug(((((\"Class \" + className) + \" depends on \") + classpathFileObject) + \" due to \") + dependency);
        \}
    \}
    classpathFileCache.put(dependency, classpathFileObject);
\}" shape=ellipse]
483 [label="93:CtVariableReadImpl@classpathFileObject" shape=ellipse]
484 [label="93:CtLiteralImpl@null" shape=ellipse]
485 [label="93:CtBinaryOperatorImpl@(classpathFileObject != null)" shape=ellipse]
486 [label="93:CtVariableReadImpl@classpathFileObject" shape=ellipse]
487 [label="93:CtVariableReadImpl@nullFileMarker" shape=ellipse]
488 [label="93:CtBinaryOperatorImpl@(classpathFileObject != nullFileMarker)" shape=ellipse]
489 [label="93:CtBinaryOperatorImpl@(classpathFileObject != null) && (classpathFileObject != nullFileMarker)" shape=ellipse]
490 [label="94:CtTypeReferenceImpl@File" shape=ellipse]
491 [label="94:CtVariableReadImpl@((File) (classpathFileObject))" shape=ellipse]
492 [label="94:CtTypeReferenceImpl@File" shape=ellipse]
493 [label="94:CtVirtualElement@jarFile" shape=ellipse]
494 [label="94:CtLocalVariableImpl@File jarFile = ((File) (classpathFileObject))" shape=ellipse]
495 [label="95:CtExecutableReferenceImpl@put(File,File)" shape=ellipse]
496 [label="95:CtVirtualElement@put" shape=ellipse]
497 [label="95:CtVariableReadImpl@dependencies" shape=ellipse]
498 [label="95:CtVariableReadImpl@jarFile" shape=ellipse]
499 [label="95:CtVariableReadImpl@jarFile" shape=ellipse]
500 [label="95:CtInvocationImpl@dependencies.put(jarFile, jarFile)" shape=ellipse]
501 [label="93:CtBlockImpl@\{
    File jarFile = ((File) (classpathFileObject));
    dependencies.put(jarFile, jarFile);
\}" shape=ellipse]
502 [label="93:CtIfImpl@if ((classpathFileObject != null) && (classpathFileObject != nullFileMarker)) \{
    File jarFile = ((File) (classpathFileObject));
    dependencies.put(jarFile, jarFile);
\}" shape=ellipse]
503 [label="64:CtBlockImpl@\{
    String dependency = ((String) (e2.next()));
    Object classpathFileObject = classpathFileCache.get(dependency);
    if (classpathFileObject == null) \{
        classpathFileObject = nullFileMarker;
        if ((!dependency.startsWith(\"java.\")) && (!dependency.startsWith(\"javax.\"))) \{
            final String name = dependency.replace('.', '/') + \".class\";
            URL classURL = classLoader.getResource(name);
            if (classURL != null) \{
                if (classURL.getProtocol().equals(\"jar\")) \{
                    String jarFilePath = classURL.getFile();
                    if (jarFilePath.startsWith(\"file:\")) \{
                        int classMarker = jarFilePath.indexOf('!');
                        jarFilePath = jarFilePath.substring(5, classMarker);
                    \}
                    classpathFileObject = new File(jarFilePath);
                \} else if (classURL.getProtocol().equals(\"file\")) \{
                    String classFilePath = classURL.getFile();
                    classpathFileObject = new File(classFilePath);
                \}
                getLogger().debug(((((\"Class \" + className) + \" depends on \") + classpathFileObject) + \" due to \") + dependency);
            \}
        \}
        classpathFileCache.put(dependency, classpathFileObject);
    \}
    if ((classpathFileObject != null) && (classpathFileObject != nullFileMarker)) \{
        File jarFile = ((File) (classpathFileObject));
        dependencies.put(jarFile, jarFile);
    \}
\}" shape=ellipse]
504 [label="64:CtForImpl@for (Iterator e2 = dependencyList.iterator(); e2.hasNext();) \{
    String dependency = ((String) (e2.next()));
    Object classpathFileObject = classpathFileCache.get(dependency);
    if (classpathFileObject == null) \{
        classpathFileObject = nullFileMarker;
        if ((!dependency.startsWith(\"java.\")) && (!dependency.startsWith(\"javax.\"))) \{
            final String name = dependency.replace('.', '/') + \".class\";
            URL classURL = classLoader.getResource(name);
            if (classURL != null) \{
                if (classURL.getProtocol().equals(\"jar\")) \{
                    String jarFilePath = classURL.getFile();
                    if (jarFilePath.startsWith(\"file:\")) \{
                        int classMarker = jarFilePath.indexOf('!');
                        jarFilePath = jarFilePath.substring(5, classMarker);
                    \}
                    classpathFileObject = new File(jarFilePath);
                \} else if (classURL.getProtocol().equals(\"file\")) \{
                    String classFilePath = classURL.getFile();
                    classpathFileObject = new File(classFilePath);
                \}
                getLogger().debug(((((\"Class \" + className) + \" depends on \") + classpathFileObject) + \" due to \") + dependency);
            \}
        \}
        classpathFileCache.put(dependency, classpathFileObject);
    \}
    if ((classpathFileObject != null) && (classpathFileObject != nullFileMarker)) \{
        File jarFile = ((File) (classpathFileObject));
        dependencies.put(jarFile, jarFile);
    \}
\}" shape=ellipse]
505 [label="59:CtBlockImpl@\{
    String className = ((String) (e.nextElement()));
    ArrayList dependencyList = ((ArrayList) (dependencyMap.get(className)));
    Hashtable dependencies = new Hashtable();
    classpathDependencies.put(className, dependencies);
    for (Iterator e2 = dependencyList.iterator(); e2.hasNext();) \{
        String dependency = ((String) (e2.next()));
        Object classpathFileObject = classpathFileCache.get(dependency);
        if (classpathFileObject == null) \{
            classpathFileObject = nullFileMarker;
            if ((!dependency.startsWith(\"java.\")) && (!dependency.startsWith(\"javax.\"))) \{
                final String name = dependency.replace('.', '/') + \".class\";
                URL classURL = classLoader.getResource(name);
                if (classURL != null) \{
                    if (classURL.getProtocol().equals(\"jar\")) \{
                        String jarFilePath = classURL.getFile();
                        if (jarFilePath.startsWith(\"file:\")) \{
                            int classMarker = jarFilePath.indexOf('!');
                            jarFilePath = jarFilePath.substring(5, classMarker);
                        \}
                        classpathFileObject = new File(jarFilePath);
                    \} else if (classURL.getProtocol().equals(\"file\")) \{
                        String classFilePath = classURL.getFile();
                        classpathFileObject = new File(classFilePath);
                    \}
                    getLogger().debug(((((\"Class \" + className) + \" depends on \") + classpathFileObject) + \" due to \") + dependency);
                \}
            \}
            classpathFileCache.put(dependency, classpathFileObject);
        \}
        if ((classpathFileObject != null) && (classpathFileObject != nullFileMarker)) \{
            File jarFile = ((File) (classpathFileObject));
            dependencies.put(jarFile, jarFile);
        \}
    \}
\}" shape=ellipse]
506 [label="59:CtForImpl@for (Enumeration e = dependencyMap.keys(); e.hasMoreElements();) \{
    String className = ((String) (e.nextElement()));
    ArrayList dependencyList = ((ArrayList) (dependencyMap.get(className)));
    Hashtable dependencies = new Hashtable();
    classpathDependencies.put(className, dependencies);
    for (Iterator e2 = dependencyList.iterator(); e2.hasNext();) \{
        String dependency = ((String) (e2.next()));
        Object classpathFileObject = classpathFileCache.get(dependency);
        if (classpathFileObject == null) \{
            classpathFileObject = nullFileMarker;
            if ((!dependency.startsWith(\"java.\")) && (!dependency.startsWith(\"javax.\"))) \{
                final String name = dependency.replace('.', '/') + \".class\";
                URL classURL = classLoader.getResource(name);
                if (classURL != null) \{
                    if (classURL.getProtocol().equals(\"jar\")) \{
                        String jarFilePath = classURL.getFile();
                        if (jarFilePath.startsWith(\"file:\")) \{
                            int classMarker = jarFilePath.indexOf('!');
                            jarFilePath = jarFilePath.substring(5, classMarker);
                        \}
                        classpathFileObject = new File(jarFilePath);
                    \} else if (classURL.getProtocol().equals(\"file\")) \{
                        String classFilePath = classURL.getFile();
                        classpathFileObject = new File(classFilePath);
                    \}
                    getLogger().debug(((((\"Class \" + className) + \" depends on \") + classpathFileObject) + \" due to \") + dependency);
                \}
            \}
            classpathFileCache.put(dependency, classpathFileObject);
        \}
        if ((classpathFileObject != null) && (classpathFileObject != nullFileMarker)) \{
            File jarFile = ((File) (classpathFileObject));
            dependencies.put(jarFile, jarFile);
        \}
    \}
\}" shape=ellipse]
507 [label="54:CtBlockImpl@\{
    classpathDependencies = new Hashtable();
    final ClassLoader classLoader = new URLClassLoader(dependClasspath.toURLs());
    Hashtable classpathFileCache = new Hashtable();
    Object nullFileMarker = new Object();
    for (Enumeration e = dependencyMap.keys(); e.hasMoreElements();) \{
        String className = ((String) (e.nextElement()));
        ArrayList dependencyList = ((ArrayList) (dependencyMap.get(className)));
        Hashtable dependencies = new Hashtable();
        classpathDependencies.put(className, dependencies);
        for (Iterator e2 = dependencyList.iterator(); e2.hasNext();) \{
            String dependency = ((String) (e2.next()));
            Object classpathFileObject = classpathFileCache.get(dependency);
            if (classpathFileObject == null) \{
                classpathFileObject = nullFileMarker;
                if ((!dependency.startsWith(\"java.\")) && (!dependency.startsWith(\"javax.\"))) \{
                    final String name = dependency.replace('.', '/') + \".class\";
                    URL classURL = classLoader.getResource(name);
                    if (classURL != null) \{
                        if (classURL.getProtocol().equals(\"jar\")) \{
                            String jarFilePath = classURL.getFile();
                            if (jarFilePath.startsWith(\"file:\")) \{
                                int classMarker = jarFilePath.indexOf('!');
                                jarFilePath = jarFilePath.substring(5, classMarker);
                            \}
                            classpathFileObject = new File(jarFilePath);
                        \} else if (classURL.getProtocol().equals(\"file\")) \{
                            String classFilePath = classURL.getFile();
                            classpathFileObject = new File(classFilePath);
                        \}
                        getLogger().debug(((((\"Class \" + className) + \" depends on \") + classpathFileObject) + \" due to \") + dependency);
                    \}
                \}
                classpathFileCache.put(dependency, classpathFileObject);
            \}
            if ((classpathFileObject != null) && (classpathFileObject != nullFileMarker)) \{
                File jarFile = ((File) (classpathFileObject));
                dependencies.put(jarFile, jarFile);
            \}
        \}
    \}
\}" shape=ellipse]
508 [label="54:CtIfImpl@if (dependClasspath != null) \{
    classpathDependencies = new Hashtable();
    final ClassLoader classLoader = new URLClassLoader(dependClasspath.toURLs());
    Hashtable classpathFileCache = new Hashtable();
    Object nullFileMarker = new Object();
    for (Enumeration e = dependencyMap.keys(); e.hasMoreElements();) \{
        String className = ((String) (e.nextElement()));
        ArrayList dependencyList = ((ArrayList) (dependencyMap.get(className)));
        Hashtable dependencies = new Hashtable();
        classpathDependencies.put(className, dependencies);
        for (Iterator e2 = dependencyList.iterator(); e2.hasNext();) \{
            String dependency = ((String) (e2.next()));
            Object classpathFileObject = classpathFileCache.get(dependency);
            if (classpathFileObject == null) \{
                classpathFileObject = nullFileMarker;
                if ((!dependency.startsWith(\"java.\")) && (!dependency.startsWith(\"javax.\"))) \{
                    final String name = dependency.replace('.', '/') + \".class\";
                    URL classURL = classLoader.getResource(name);
                    if (classURL != null) \{
                        if (classURL.getProtocol().equals(\"jar\")) \{
                            String jarFilePath = classURL.getFile();
                            if (jarFilePath.startsWith(\"file:\")) \{
                                int classMarker = jarFilePath.indexOf('!');
                                jarFilePath = jarFilePath.substring(5, classMarker);
                            \}
                            classpathFileObject = new File(jarFilePath);
                        \} else if (classURL.getProtocol().equals(\"file\")) \{
                            String classFilePath = classURL.getFile();
                            classpathFileObject = new File(classFilePath);
                        \}
                        getLogger().debug(((((\"Class \" + className) + \" depends on \") + classpathFileObject) + \" due to \") + dependency);
                    \}
                \}
                classpathFileCache.put(dependency, classpathFileObject);
            \}
            if ((classpathFileObject != null) && (classpathFileObject != nullFileMarker)) \{
                File jarFile = ((File) (classpathFileObject));
                dependencies.put(jarFile, jarFile);
            \}
        \}
    \}
\}" shape=ellipse]
509 [label="100:CtFieldReadImpl@cache" shape=ellipse]
510 [label="100:CtLiteralImpl@null" shape=ellipse]
511 [label="100:CtBinaryOperatorImpl@(cache != null)" shape=ellipse]
512 [label="100:CtVariableReadImpl@cacheDirty" shape=ellipse]
513 [label="100:CtBinaryOperatorImpl@(cache != null) && cacheDirty" shape=ellipse]
514 [label="101:CtExecutableReferenceImpl@writeCachedDependencies(<unknown>)" shape=ellipse]
515 [label="101:CtVirtualElement@writeCachedDependencies" shape=ellipse]
516 [label="101:CtVariableReadImpl@dependencyMap" shape=ellipse]
517 [label="101:CtInvocationImpl@writeCachedDependencies(dependencyMap)" shape=ellipse]
518 [label="100:CtBlockImpl@\{
    writeCachedDependencies(dependencyMap);
\}" shape=ellipse]
519 [label="100:CtIfImpl@if ((cache != null) && cacheDirty) \{
    writeCachedDependencies(dependencyMap);
\}" shape=ellipse]
520 [label="2:CtBlockImpl@\{
    affectedClassMap = new Hashtable();
    classFileInfoMap = new Hashtable();
    boolean cacheDirty = false;
    Hashtable dependencyMap = new Hashtable();
    File depCacheFile = null;
    boolean depCacheFileExists = true;
    long depCacheFileLastModified = Long.MAX_VALUE;
    if (cache != null) \{
        dependencyMap = readCachedDependencies();
        depCacheFile = new File(cache, CACHE_FILE_NAME);
        depCacheFileExists = depCacheFile.exists();
        depCacheFileLastModified = depCacheFile.lastModified();
    \}
    for (Iterator e = getClassFiles(destPath).iterator(); e.hasNext();) \{
        ClassFileInfo info = ((ClassFileInfo) (e.next()));
        getLogger().debug(\"Adding class info for \" + info.className);
        classFileInfoMap.put(info.className, info);
        ArrayList dependencyList = null;
        if (cache != null) \{
            if (depCacheFileExists && (depCacheFileLastModified > info.absoluteFile.lastModified())) \{
                dependencyList = ((ArrayList) (dependencyMap.get(info.className)));
            \}
        \}
        if (dependencyList == null) \{
            FileInputStream inFileStream = null;
            try \{
                inFileStream = new FileInputStream(info.absoluteFile);
                ClassFile classFile = new ClassFile();
                classFile.read(inFileStream);
                dependencyList = classFile.getClassRefs();
                if (dependencyList != null) \{
                    cacheDirty = true;
                    dependencyMap.put(info.className, dependencyList);
                \}
            \} finally \{
                if (inFileStream != null) \{
                    inFileStream.close();
                \}
            \}
        \}
        for (Iterator depEnum = dependencyList.iterator(); depEnum.hasNext();) \{
            String dependentClass = ((String) (depEnum.next()));
            Hashtable affectedClasses = ((Hashtable) (affectedClassMap.get(dependentClass)));
            if (affectedClasses == null) \{
                affectedClasses = new Hashtable();
                affectedClassMap.put(dependentClass, affectedClasses);
            \}
            affectedClasses.put(info.className, info);
        \}
    \}
    classpathDependencies = null;
    if (dependClasspath != null) \{
        classpathDependencies = new Hashtable();
        final ClassLoader classLoader = new URLClassLoader(dependClasspath.toURLs());
        Hashtable classpathFileCache = new Hashtable();
        Object nullFileMarker = new Object();
        for (Enumeration e = dependencyMap.keys(); e.hasMoreElements();) \{
            String className = ((String) (e.nextElement()));
            ArrayList dependencyList = ((ArrayList) (dependencyMap.get(className)));
            Hashtable dependencies = new Hashtable();
            classpathDependencies.put(className, dependencies);
            for (Iterator e2 = dependencyList.iterator(); e2.hasNext();) \{
                String dependency = ((String) (e2.next()));
                Object classpathFileObject = classpathFileCache.get(dependency);
                if (classpathFileObject == null) \{
                    classpathFileObject = nullFileMarker;
                    if ((!dependency.startsWith(\"java.\")) && (!dependency.startsWith(\"javax.\"))) \{
                        final String name = dependency.replace('.', '/') + \".class\";
                        URL classURL = classLoader.getResource(name);
                        if (classURL != null) \{
                            if (classURL.getProtocol().equals(\"jar\")) \{
                                String jarFilePath = classURL.getFile();
                                if (jarFilePath.startsWith(\"file:\")) \{
                                    int classMarker = jarFilePath.indexOf('!');
                                    jarFilePath = jarFilePath.substring(5, classMarker);
                                \}
                                classpathFileObject = new File(jarFilePath);
                            \} else if (classURL.getProtocol().equals(\"file\")) \{
                                String classFilePath = classURL.getFile();
                                classpathFileObject = new File(classFilePath);
                            \}
                            getLogger().debug(((((\"Class \" + className) + \" depends on \") + classpathFileObject) + \" due to \") + dependency);
                        \}
                    \}
                    classpathFileCache.put(dependency, classpathFileObject);
                \}
                if ((classpathFileObject != null) && (classpathFileObject != nullFileMarker)) \{
                    File jarFile = ((File) (classpathFileObject));
                    dependencies.put(jarFile, jarFile);
                \}
            \}
        \}
    \}
    if ((cache != null) && cacheDirty) \{
        writeCachedDependencies(dependencyMap);
    \}
\}" shape=ellipse]
521 [label="2:CtMethodImpl@private void determineDependencies() throws IOException, TaskException \{
    affectedClassMap = new Hashtable();
    classFileInfoMap = new Hashtable();
    boolean cacheDirty = false;
    Hashtable dependencyMap = new Hashtable();
    File depCacheFile = null;
    boolean depCacheFileExists = true;
    long depCacheFileLastModified = Long.MAX_VALUE;
    if (cache != null) \{
        dependencyMap = readCachedDependencies();
        depCacheFile = new File(cache, CACHE_FILE_NAME);
        depCacheFileExists = depCacheFile.exists();
        depCacheFileLastModified = depCacheFile.lastModified();
    \}
    for (Iterator e = getClassFiles(destPath).iterator(); e.hasNext();) \{
        ClassFileInfo info = ((ClassFileInfo) (e.next()));
        getLogger().debug(\"Adding class info for \" + info.className);
        classFileInfoMap.put(info.className, info);
        ArrayList dependencyList = null;
        if (cache != null) \{
            if (depCacheFileExists && (depCacheFileLastModified > info.absoluteFile.lastModified())) \{
                dependencyList = ((ArrayList) (dependencyMap.get(info.className)));
            \}
        \}
        if (dependencyList == null) \{
            FileInputStream inFileStream = null;
            try \{
                inFileStream = new FileInputStream(info.absoluteFile);
                ClassFile classFile = new ClassFile();
                classFile.read(inFileStream);
                dependencyList = classFile.getClassRefs();
                if (dependencyList != null) \{
                    cacheDirty = true;
                    dependencyMap.put(info.className, dependencyList);
                \}
            \} finally \{
                if (inFileStream != null) \{
                    inFileStream.close();
                \}
            \}
        \}
        for (Iterator depEnum = dependencyList.iterator(); depEnum.hasNext();) \{
            String dependentClass = ((String) (depEnum.next()));
            Hashtable affectedClasses = ((Hashtable) (affectedClassMap.get(dependentClass)));
            if (affectedClasses == null) \{
                affectedClasses = new Hashtable();
                affectedClassMap.put(dependentClass, affectedClasses);
            \}
            affectedClasses.put(info.className, info);
        \}
    \}
    classpathDependencies = null;
    if (dependClasspath != null) \{
        classpathDependencies = new Hashtable();
        final ClassLoader classLoader = new URLClassLoader(dependClasspath.toURLs());
        Hashtable classpathFileCache = new Hashtable();
        Object nullFileMarker = new Object();
        for (Enumeration e = dependencyMap.keys(); e.hasMoreElements();) \{
            String className = ((String) (e.nextElement()));
            ArrayList dependencyList = ((ArrayList) (dependencyMap.get(className)));
            Hashtable dependencies = new Hashtable();
            classpathDependencies.put(className, dependencies);
            for (Iterator e2 = dependencyList.iterator(); e2.hasNext();) \{
                String dependency = ((String) (e2.next()));
                Object classpathFileObject = classpathFileCache.get(dependency);
                if (classpathFileObject == null) \{
                    classpathFileObject = nullFileMarker;
                    if ((!dependency.startsWith(\"java.\")) && (!dependency.startsWith(\"javax.\"))) \{
                        final String name = dependency.replace('.', '/') + \".class\";
                        URL classURL = classLoader.getResource(name);
                        if (classURL != null) \{
                            if (classURL.getProtocol().equals(\"jar\")) \{
                                String jarFilePath = classURL.getFile();
                                if (jarFilePath.startsWith(\"file:\")) \{
                                    int classMarker = jarFilePath.indexOf('!');
                                    jarFilePath = jarFilePath.substring(5, classMarker);
                                \}
                                classpathFileObject = new File(jarFilePath);
                            \} else if (classURL.getProtocol().equals(\"file\")) \{
                                String classFilePath = classURL.getFile();
                                classpathFileObject = new File(classFilePath);
                            \}
                            getLogger().debug(((((\"Class \" + className) + \" depends on \") + classpathFileObject) + \" due to \") + dependency);
                        \}
                    \}
                    classpathFileCache.put(dependency, classpathFileObject);
                \}
                if ((classpathFileObject != null) && (classpathFileObject != nullFileMarker)) \{
                    File jarFile = ((File) (classpathFileObject));
                    dependencies.put(jarFile, jarFile);
                \}
            \}
        \}
    \}
    if ((cache != null) && cacheDirty) \{
        writeCachedDependencies(dependencyMap);
    \}
\}" shape=ellipse]
522 [label="56:Update@UPDATE" shape=ellipse]
523 [label="56:CtLocalVariableImpl@final URL[] urls = PathUtil.toURLs(dependClasspath)" shape=ellipse]
524 [label="56:Update@UPDATE" shape=ellipse]
525 [label="56:CtArrayTypeReferenceImpl@URL[]" shape=ellipse]
526 [label="57:Insert@INSERT" shape=ellipse]
527 [label="57:CtLocalVariableImpl@final ClassLoader classLoader = new URLClassLoader(urls)" shape=ellipse]
528 [label="56:Insert@INSERT" shape=ellipse]
529 [label="56:CtTypeAccessImpl@PathUtil" shape=ellipse]
530 [label="56:Move@MOVE" shape=ellipse]
531 [label="56:Move@MOVE" shape=ellipse]
4 -> 217 [label="Define-Use"];
4 -> 232 [label="Define-Use"];
7 -> 4 [label="AST"];
7 -> 6 [label="AST"];
8 -> 98 [label="Define-Use"];
11 -> 8 [label="AST"];
11 -> 10 [label="AST"];
14 -> 512 [label="Define-Use"];
15 -> 14 [label="AST"];
15 -> 12 [label="AST"];
15 -> 13 [label="AST"];
19 -> 124 [label="Define-Use"];
19 -> 173 [label="Define-Use"];
19 -> 282 [label="Define-Use"];
19 -> 301 [label="Define-Use"];
19 -> 516 [label="Define-Use"];
20 -> 19 [label="AST"];
20 -> 16 [label="AST"];
20 -> 18 [label="AST"];
23 -> 52 [label="Define-Use"];
23 -> 58 [label="Define-Use"];
24 -> 23 [label="AST"];
24 -> 21 [label="AST"];
24 -> 22 [label="AST"];
27 -> 111 [label="Define-Use"];
28 -> 27 [label="AST"];
28 -> 25 [label="AST"];
28 -> 26 [label="AST"];
31 -> 30 [label="AST"];
31 -> 32 [label="AST"];
31 -> 33 [label="Data Dep"];
33 -> 112 [label="Define-Use"];
34 -> 33 [label="AST"];
34 -> 29 [label="AST"];
34 -> 31 [label="AST"];
37 -> 35 [label="AST"];
37 -> 36 [label="AST"];
37 -> 61 [label="Control Dep"];
37 -> 42 [label="Control Dep"];
37 -> 38 [label="Control Dep"];
37 -> 41 [label="Control Dep"];
37 -> 39 [label="Control Dep"];
37 -> 48 [label="Control Dep"];
37 -> 43 [label="Control Dep"];
37 -> 47 [label="Control Dep"];
37 -> 45 [label="Control Dep"];
37 -> 46 [label="Control Dep"];
37 -> 54 [label="Control Dep"];
37 -> 49 [label="Control Dep"];
37 -> 53 [label="Control Dep"];
37 -> 50 [label="Control Dep"];
37 -> 52 [label="Control Dep"];
37 -> 60 [label="Control Dep"];
37 -> 55 [label="Control Dep"];
37 -> 59 [label="Control Dep"];
37 -> 56 [label="Control Dep"];
37 -> 58 [label="Control Dep"];
38 -> 124 [label="Define-Use"];
38 -> 173 [label="Define-Use"];
38 -> 282 [label="Define-Use"];
38 -> 301 [label="Define-Use"];
38 -> 516 [label="Define-Use"];
41 -> 40 [label="AST"];
41 -> 39 [label="AST"];
42 -> 38 [label="AST"];
42 -> 41 [label="AST"];
43 -> 52 [label="Define-Use"];
43 -> 58 [label="Define-Use"];
45 -> 43 [label="Data Dep"];
46 -> 43 [label="Data Dep"];
47 -> 45 [label="AST"];
47 -> 46 [label="AST"];
48 -> 43 [label="AST"];
48 -> 47 [label="AST"];
49 -> 111 [label="Define-Use"];
52 -> 49 [label="Data Dep"];
53 -> 51 [label="AST"];
53 -> 52 [label="AST"];
53 -> 50 [label="AST"];
54 -> 49 [label="AST"];
54 -> 53 [label="AST"];
55 -> 112 [label="Define-Use"];
58 -> 55 [label="Data Dep"];
59 -> 57 [label="AST"];
59 -> 58 [label="AST"];
59 -> 56 [label="AST"];
60 -> 55 [label="AST"];
60 -> 59 [label="AST"];
61 -> 42 [label="AST"];
61 -> 48 [label="AST"];
61 -> 54 [label="AST"];
61 -> 60 [label="AST"];
62 -> 37 [label="AST"];
62 -> 61 [label="AST"];
68 -> 71 [label="Data Dep"];
69 -> 67 [label="AST"];
69 -> 66 [label="AST"];
69 -> 68 [label="AST"];
70 -> 65 [label="AST"];
70 -> 69 [label="AST"];
70 -> 64 [label="AST"];
71 -> 75 [label="Define-Use"];
71 -> 80 [label="Define-Use"];
71 -> 288 [label="Define-Use"];
71 -> 293 [label="Define-Use"];
72 -> 71 [label="AST"];
72 -> 63 [label="AST"];
72 -> 70 [label="AST"];
76 -> 74 [label="AST"];
76 -> 75 [label="AST"];
76 -> 73 [label="AST"];
76 -> 248 [label="Control Dep"];
76 -> 84 [label="Control Dep"];
76 -> 81 [label="Control Dep"];
76 -> 78 [label="Control Dep"];
76 -> 80 [label="Control Dep"];
76 -> 95 [label="Control Dep"];
76 -> 85 [label="Control Dep"];
76 -> 89 [label="Control Dep"];
76 -> 87 [label="Control Dep"];
76 -> 94 [label="Control Dep"];
76 -> 90 [label="Control Dep"];
76 -> 93 [label="Control Dep"];
76 -> 91 [label="Control Dep"];
76 -> 103 [label="Control Dep"];
76 -> 96 [label="Control Dep"];
76 -> 98 [label="Control Dep"];
76 -> 101 [label="Control Dep"];
76 -> 99 [label="Control Dep"];
76 -> 102 [label="Control Dep"];
76 -> 107 [label="Control Dep"];
76 -> 105 [label="Control Dep"];
76 -> 134 [label="Control Dep"];
76 -> 110 [label="Control Dep"];
76 -> 108 [label="Control Dep"];
76 -> 109 [label="Control Dep"];
76 -> 194 [label="Control Dep"];
76 -> 137 [label="Control Dep"];
76 -> 135 [label="Control Dep"];
76 -> 136 [label="Control Dep"];
76 -> 247 [label="Control Dep"];
76 -> 201 [label="Control Dep"];
76 -> 199 [label="Control Dep"];
76 -> 196 [label="Control Dep"];
76 -> 198 [label="Control Dep"];
76 -> 205 [label="Control Dep"];
76 -> 202 [label="Control Dep"];
76 -> 204 [label="Control Dep"];
80 -> 83 [label="Data Dep"];
81 -> 79 [label="AST"];
81 -> 82 [label="AST"];
81 -> 80 [label="AST"];
81 -> 78 [label="AST"];
83 -> 91 [label="Define-Use"];
83 -> 99 [label="Define-Use"];
83 -> 102 [label="Define-Use"];
83 -> 115 [label="Define-Use"];
83 -> 125 [label="Define-Use"];
83 -> 144 [label="Define-Use"];
83 -> 174 [label="Define-Use"];
83 -> 241 [label="Define-Use"];
83 -> 244 [label="Define-Use"];
84 -> 83 [label="AST"];
84 -> 77 [label="AST"];
84 -> 81 [label="AST"];
89 -> 88 [label="AST"];
89 -> 87 [label="AST"];
91 -> 92 [label="AST"];
93 -> 91 [label="AST"];
94 -> 90 [label="AST"];
94 -> 93 [label="AST"];
95 -> 86 [label="AST"];
95 -> 89 [label="AST"];
95 -> 85 [label="AST"];
95 -> 94 [label="AST"];
99 -> 100 [label="AST"];
101 -> 99 [label="AST"];
103 -> 97 [label="AST"];
103 -> 98 [label="AST"];
103 -> 96 [label="AST"];
103 -> 101 [label="AST"];
103 -> 102 [label="AST"];
106 -> 135 [label="Define-Use"];
107 -> 106 [label="AST"];
107 -> 104 [label="AST"];
107 -> 105 [label="AST"];
110 -> 108 [label="AST"];
110 -> 109 [label="AST"];
110 -> 133 [label="Control Dep"];
110 -> 132 [label="Control Dep"];
110 -> 120 [label="Control Dep"];
110 -> 111 [label="Control Dep"];
110 -> 119 [label="Control Dep"];
110 -> 112 [label="Control Dep"];
110 -> 118 [label="Control Dep"];
110 -> 113 [label="Control Dep"];
110 -> 117 [label="Control Dep"];
110 -> 115 [label="Control Dep"];
115 -> 116 [label="AST"];
117 -> 115 [label="AST"];
118 -> 114 [label="AST"];
118 -> 117 [label="AST"];
118 -> 113 [label="AST"];
119 -> 112 [label="AST"];
119 -> 118 [label="AST"];
120 -> 111 [label="AST"];
120 -> 119 [label="AST"];
120 -> 131 [label="Control Dep"];
120 -> 130 [label="Control Dep"];
120 -> 121 [label="Control Dep"];
120 -> 128 [label="Control Dep"];
120 -> 122 [label="Control Dep"];
120 -> 124 [label="Control Dep"];
120 -> 127 [label="Control Dep"];
120 -> 125 [label="Control Dep"];
121 -> 135 [label="Define-Use"];
124 -> 121 [label="Data Dep"];
125 -> 126 [label="AST"];
127 -> 125 [label="AST"];
127 -> 121 [label="Data Dep"];
128 -> 123 [label="AST"];
128 -> 129 [label="AST"];
128 -> 124 [label="AST"];
128 -> 122 [label="AST"];
128 -> 127 [label="AST"];
130 -> 121 [label="AST"];
130 -> 128 [label="AST"];
131 -> 130 [label="AST"];
132 -> 120 [label="AST"];
132 -> 131 [label="AST"];
133 -> 132 [label="AST"];
134 -> 110 [label="AST"];
134 -> 133 [label="AST"];
137 -> 135 [label="AST"];
137 -> 136 [label="AST"];
137 -> 193 [label="Control Dep"];
137 -> 141 [label="Control Dep"];
137 -> 139 [label="Control Dep"];
137 -> 192 [label="Control Dep"];
137 -> 181 [label="Control Dep"];
137 -> 148 [label="Control Dep"];
137 -> 142 [label="Control Dep"];
137 -> 147 [label="Control Dep"];
137 -> 146 [label="Control Dep"];
137 -> 144 [label="Control Dep"];
137 -> 153 [label="Control Dep"];
137 -> 151 [label="Control Dep"];
137 -> 158 [label="Control Dep"];
137 -> 154 [label="Control Dep"];
137 -> 156 [label="Control Dep"];
137 -> 157 [label="Control Dep"];
137 -> 164 [label="Control Dep"];
137 -> 159 [label="Control Dep"];
137 -> 163 [label="Control Dep"];
137 -> 160 [label="Control Dep"];
137 -> 162 [label="Control Dep"];
137 -> 180 [label="Control Dep"];
137 -> 167 [label="Control Dep"];
137 -> 165 [label="Control Dep"];
137 -> 166 [label="Control Dep"];
137 -> 191 [label="Control Dep"];
137 -> 190 [label="Control Dep"];
137 -> 184 [label="Control Dep"];
137 -> 182 [label="Control Dep"];
137 -> 183 [label="Control Dep"];
141 -> 140 [label="AST"];
141 -> 138 [label="AST"];
141 -> 139 [label="AST"];
142 -> 157 [label="Define-Use"];
142 -> 182 [label="Define-Use"];
142 -> 187 [label="Define-Use"];
144 -> 145 [label="AST"];
146 -> 144 [label="AST"];
146 -> 142 [label="Data Dep"];
147 -> 146 [label="AST"];
148 -> 142 [label="AST"];
148 -> 147 [label="AST"];
152 -> 156 [label="Define-Use"];
152 -> 162 [label="Define-Use"];
153 -> 152 [label="AST"];
153 -> 149 [label="AST"];
153 -> 151 [label="AST"];
158 -> 155 [label="AST"];
158 -> 156 [label="AST"];
158 -> 154 [label="AST"];
158 -> 157 [label="AST"];
159 -> 165 [label="Define-Use"];
159 -> 177 [label="Define-Use"];
159 -> 198 [label="Define-Use"];
162 -> 159 [label="Data Dep"];
163 -> 161 [label="AST"];
163 -> 162 [label="AST"];
163 -> 160 [label="AST"];
164 -> 159 [label="AST"];
164 -> 163 [label="AST"];
167 -> 165 [label="AST"];
167 -> 166 [label="AST"];
167 -> 179 [label="Control Dep"];
167 -> 170 [label="Control Dep"];
167 -> 168 [label="Control Dep"];
167 -> 169 [label="Control Dep"];
167 -> 178 [label="Control Dep"];
167 -> 171 [label="Control Dep"];
167 -> 173 [label="Control Dep"];
167 -> 176 [label="Control Dep"];
167 -> 174 [label="Control Dep"];
167 -> 177 [label="Control Dep"];
168 -> 512 [label="Define-Use"];
170 -> 168 [label="AST"];
170 -> 169 [label="AST"];
174 -> 175 [label="AST"];
176 -> 174 [label="AST"];
178 -> 172 [label="AST"];
178 -> 173 [label="AST"];
178 -> 171 [label="AST"];
178 -> 176 [label="AST"];
178 -> 177 [label="AST"];
179 -> 170 [label="AST"];
179 -> 178 [label="AST"];
180 -> 167 [label="AST"];
180 -> 179 [label="AST"];
181 -> 148 [label="AST"];
181 -> 153 [label="AST"];
181 -> 158 [label="AST"];
181 -> 164 [label="AST"];
181 -> 180 [label="AST"];
184 -> 182 [label="AST"];
184 -> 183 [label="AST"];
184 -> 189 [label="Control Dep"];
184 -> 188 [label="Control Dep"];
184 -> 185 [label="Control Dep"];
184 -> 187 [label="Control Dep"];
188 -> 186 [label="AST"];
188 -> 187 [label="AST"];
188 -> 185 [label="AST"];
189 -> 188 [label="AST"];
190 -> 184 [label="AST"];
190 -> 189 [label="AST"];
191 -> 190 [label="AST"];
192 -> 181 [label="AST"];
192 -> 191 [label="AST"];
193 -> 141 [label="AST"];
193 -> 192 [label="AST"];
194 -> 137 [label="AST"];
194 -> 193 [label="AST"];
198 -> 200 [label="Data Dep"];
199 -> 197 [label="AST"];
199 -> 198 [label="AST"];
199 -> 196 [label="AST"];
200 -> 204 [label="Define-Use"];
200 -> 209 [label="Define-Use"];
201 -> 200 [label="AST"];
201 -> 195 [label="AST"];
201 -> 199 [label="AST"];
205 -> 203 [label="AST"];
205 -> 204 [label="AST"];
205 -> 202 [label="AST"];
205 -> 246 [label="Control Dep"];
205 -> 213 [label="Control Dep"];
205 -> 210 [label="Control Dep"];
205 -> 207 [label="Control Dep"];
205 -> 209 [label="Control Dep"];
205 -> 222 [label="Control Dep"];
205 -> 219 [label="Control Dep"];
205 -> 215 [label="Control Dep"];
205 -> 217 [label="Control Dep"];
205 -> 218 [label="Control Dep"];
205 -> 237 [label="Control Dep"];
205 -> 225 [label="Control Dep"];
205 -> 223 [label="Control Dep"];
205 -> 224 [label="Control Dep"];
205 -> 245 [label="Control Dep"];
205 -> 238 [label="Control Dep"];
205 -> 240 [label="Control Dep"];
205 -> 243 [label="Control Dep"];
205 -> 241 [label="Control Dep"];
205 -> 244 [label="Control Dep"];
209 -> 212 [label="Data Dep"];
210 -> 208 [label="AST"];
210 -> 211 [label="AST"];
210 -> 209 [label="AST"];
210 -> 207 [label="AST"];
212 -> 218 [label="Define-Use"];
212 -> 233 [label="Define-Use"];
213 -> 212 [label="AST"];
213 -> 206 [label="AST"];
213 -> 210 [label="AST"];
217 -> 221 [label="Data Dep"];
218 -> 221 [label="Data Dep"];
219 -> 216 [label="AST"];
219 -> 220 [label="AST"];
219 -> 217 [label="AST"];
219 -> 215 [label="AST"];
219 -> 218 [label="AST"];
221 -> 223 [label="Define-Use"];
221 -> 234 [label="Define-Use"];
221 -> 240 [label="Define-Use"];
222 -> 221 [label="AST"];
222 -> 214 [label="AST"];
222 -> 219 [label="AST"];
225 -> 223 [label="AST"];
225 -> 224 [label="AST"];
225 -> 236 [label="Control Dep"];
225 -> 229 [label="Control Dep"];
225 -> 226 [label="Control Dep"];
225 -> 228 [label="Control Dep"];
225 -> 235 [label="Control Dep"];
225 -> 230 [label="Control Dep"];
225 -> 232 [label="Control Dep"];
225 -> 233 [label="Control Dep"];
225 -> 234 [label="Control Dep"];
226 -> 234 [label="Define-Use"];
226 -> 240 [label="Define-Use"];
229 -> 226 [label="AST"];
229 -> 228 [label="AST"];
235 -> 231 [label="AST"];
235 -> 232 [label="AST"];
235 -> 230 [label="AST"];
235 -> 233 [label="AST"];
235 -> 234 [label="AST"];
236 -> 229 [label="AST"];
236 -> 235 [label="AST"];
237 -> 225 [label="AST"];
237 -> 236 [label="AST"];
241 -> 242 [label="AST"];
243 -> 241 [label="AST"];
245 -> 239 [label="AST"];
245 -> 240 [label="AST"];
245 -> 238 [label="AST"];
245 -> 243 [label="AST"];
245 -> 244 [label="AST"];
246 -> 213 [label="AST"];
246 -> 222 [label="AST"];
246 -> 237 [label="AST"];
246 -> 245 [label="AST"];
247 -> 201 [label="AST"];
247 -> 205 [label="AST"];
247 -> 246 [label="AST"];
248 -> 84 [label="AST"];
248 -> 95 [label="AST"];
248 -> 103 [label="AST"];
248 -> 107 [label="AST"];
248 -> 134 [label="AST"];
248 -> 194 [label="AST"];
248 -> 247 [label="AST"];
249 -> 72 [label="AST"];
249 -> 76 [label="AST"];
249 -> 248 [label="AST"];
250 -> 314 [label="Define-Use"];
252 -> 250 [label="AST"];
252 -> 251 [label="AST"];
255 -> 253 [label="AST"];
255 -> 254 [label="AST"];
255 -> 507 [label="Control Dep"];
255 -> 259 [label="Control Dep"];
255 -> 256 [label="Control Dep"];
255 -> 258 [label="Control Dep"];
255 -> 268 [label="Control Dep"];
255 -> 266 [label="Control Dep"];
255 -> 265 [label="Control Dep"];
255 -> 262 [label="Control Dep"];
255 -> 264 [label="Control Dep"];
255 -> 273 [label="Control Dep"];
255 -> 271 [label="Control Dep"];
255 -> 278 [label="Control Dep"];
255 -> 276 [label="Control Dep"];
255 -> 506 [label="Control Dep"];
255 -> 285 [label="Control Dep"];
255 -> 283 [label="Control Dep"];
255 -> 280 [label="Control Dep"];
255 -> 282 [label="Control Dep"];
255 -> 289 [label="Control Dep"];
255 -> 286 [label="Control Dep"];
255 -> 288 [label="Control Dep"];
256 -> 314 [label="Define-Use"];
259 -> 256 [label="AST"];
259 -> 258 [label="AST"];
260 -> 524 [label="Action"];
264 -> 267 [label="Data Dep"];
265 -> 263 [label="AST"];
265 -> 264 [label="AST"];
265 -> 262 [label="AST"];
265 -> 528 [label="Action"];
265 -> 530 [label="Action"];
266 -> 265 [label="AST"];
267 -> 378 [label="Define-Use"];
268 -> 267 [label="AST"];
268 -> 260 [label="AST"];
268 -> 266 [label="AST"];
268 -> 522 [label="Action"];
272 -> 340 [label="Define-Use"];
272 -> 477 [label="Define-Use"];
273 -> 272 [label="AST"];
273 -> 269 [label="AST"];
273 -> 271 [label="AST"];
277 -> 349 [label="Define-Use"];
277 -> 487 [label="Define-Use"];
278 -> 277 [label="AST"];
278 -> 274 [label="AST"];
278 -> 276 [label="AST"];
282 -> 284 [label="Data Dep"];
283 -> 281 [label="AST"];
283 -> 282 [label="AST"];
283 -> 280 [label="AST"];
284 -> 288 [label="Define-Use"];
284 -> 293 [label="Define-Use"];
285 -> 284 [label="AST"];
285 -> 279 [label="AST"];
285 -> 283 [label="AST"];
289 -> 287 [label="AST"];
289 -> 288 [label="AST"];
289 -> 286 [label="AST"];
289 -> 505 [label="Control Dep"];
289 -> 297 [label="Control Dep"];
289 -> 294 [label="Control Dep"];
289 -> 291 [label="Control Dep"];
289 -> 293 [label="Control Dep"];
289 -> 306 [label="Control Dep"];
289 -> 303 [label="Control Dep"];
289 -> 299 [label="Control Dep"];
289 -> 301 [label="Control Dep"];
289 -> 302 [label="Control Dep"];
289 -> 311 [label="Control Dep"];
289 -> 309 [label="Control Dep"];
289 -> 317 [label="Control Dep"];
289 -> 312 [label="Control Dep"];
289 -> 314 [label="Control Dep"];
289 -> 315 [label="Control Dep"];
289 -> 316 [label="Control Dep"];
289 -> 504 [label="Control Dep"];
289 -> 324 [label="Control Dep"];
289 -> 322 [label="Control Dep"];
289 -> 319 [label="Control Dep"];
289 -> 321 [label="Control Dep"];
289 -> 328 [label="Control Dep"];
289 -> 325 [label="Control Dep"];
289 -> 327 [label="Control Dep"];
293 -> 296 [label="Data Dep"];
294 -> 292 [label="AST"];
294 -> 295 [label="AST"];
294 -> 293 [label="AST"];
294 -> 291 [label="AST"];
296 -> 302 [label="Define-Use"];
296 -> 315 [label="Define-Use"];
296 -> 460 [label="Define-Use"];
297 -> 296 [label="AST"];
297 -> 290 [label="AST"];
297 -> 294 [label="AST"];
301 -> 305 [label="Data Dep"];
302 -> 305 [label="Data Dep"];
303 -> 300 [label="AST"];
303 -> 304 [label="AST"];
303 -> 301 [label="AST"];
303 -> 299 [label="AST"];
303 -> 302 [label="AST"];
305 -> 321 [label="Define-Use"];
306 -> 305 [label="AST"];
306 -> 298 [label="AST"];
306 -> 303 [label="AST"];
310 -> 316 [label="Define-Use"];
310 -> 497 [label="Define-Use"];
311 -> 310 [label="AST"];
311 -> 307 [label="AST"];
311 -> 309 [label="AST"];
317 -> 313 [label="AST"];
317 -> 314 [label="AST"];
317 -> 312 [label="AST"];
317 -> 315 [label="AST"];
317 -> 316 [label="AST"];
321 -> 323 [label="Data Dep"];
322 -> 320 [label="AST"];
322 -> 321 [label="AST"];
322 -> 319 [label="AST"];
323 -> 327 [label="Define-Use"];
323 -> 332 [label="Define-Use"];
324 -> 323 [label="AST"];
324 -> 318 [label="AST"];
324 -> 322 [label="AST"];
328 -> 326 [label="AST"];
328 -> 327 [label="AST"];
328 -> 325 [label="AST"];
328 -> 503 [label="Control Dep"];
328 -> 336 [label="Control Dep"];
328 -> 333 [label="Control Dep"];
328 -> 330 [label="Control Dep"];
328 -> 332 [label="Control Dep"];
328 -> 344 [label="Control Dep"];
328 -> 342 [label="Control Dep"];
328 -> 338 [label="Control Dep"];
328 -> 340 [label="Control Dep"];
328 -> 341 [label="Control Dep"];
328 -> 482 [label="Control Dep"];
328 -> 347 [label="Control Dep"];
328 -> 345 [label="Control Dep"];
328 -> 346 [label="Control Dep"];
328 -> 502 [label="Control Dep"];
328 -> 489 [label="Control Dep"];
328 -> 485 [label="Control Dep"];
328 -> 483 [label="Control Dep"];
328 -> 484 [label="Control Dep"];
328 -> 488 [label="Control Dep"];
328 -> 486 [label="Control Dep"];
328 -> 487 [label="Control Dep"];
332 -> 335 [label="Data Dep"];
333 -> 331 [label="AST"];
333 -> 334 [label="AST"];
333 -> 332 [label="AST"];
333 -> 330 [label="AST"];
335 -> 341 [label="Define-Use"];
335 -> 353 [label="Define-Use"];
335 -> 359 [label="Define-Use"];
335 -> 367 [label="Define-Use"];
335 -> 468 [label="Define-Use"];
335 -> 478 [label="Define-Use"];
336 -> 335 [label="AST"];
336 -> 329 [label="AST"];
336 -> 333 [label="AST"];
340 -> 343 [label="Data Dep"];
341 -> 343 [label="Data Dep"];
342 -> 339 [label="AST"];
342 -> 340 [label="AST"];
342 -> 338 [label="AST"];
342 -> 341 [label="AST"];
343 -> 345 [label="Define-Use"];
343 -> 464 [label="Define-Use"];
343 -> 479 [label="Define-Use"];
343 -> 483 [label="Define-Use"];
343 -> 486 [label="Define-Use"];
343 -> 491 [label="Define-Use"];
344 -> 343 [label="AST"];
344 -> 337 [label="AST"];
344 -> 342 [label="AST"];
347 -> 345 [label="AST"];
347 -> 346 [label="AST"];
347 -> 481 [label="Control Dep"];
347 -> 350 [label="Control Dep"];
347 -> 348 [label="Control Dep"];
347 -> 349 [label="Control Dep"];
347 -> 474 [label="Control Dep"];
347 -> 363 [label="Control Dep"];
347 -> 356 [label="Control Dep"];
347 -> 355 [label="Control Dep"];
347 -> 351 [label="Control Dep"];
347 -> 353 [label="Control Dep"];
347 -> 354 [label="Control Dep"];
347 -> 362 [label="Control Dep"];
347 -> 361 [label="Control Dep"];
347 -> 357 [label="Control Dep"];
347 -> 359 [label="Control Dep"];
347 -> 360 [label="Control Dep"];
347 -> 480 [label="Control Dep"];
347 -> 475 [label="Control Dep"];
347 -> 477 [label="Control Dep"];
347 -> 478 [label="Control Dep"];
347 -> 479 [label="Control Dep"];
348 -> 464 [label="Define-Use"];
348 -> 479 [label="Define-Use"];
348 -> 483 [label="Define-Use"];
348 -> 486 [label="Define-Use"];
348 -> 491 [label="Define-Use"];
349 -> 348 [label="Data Dep"];
350 -> 348 [label="AST"];
350 -> 349 [label="AST"];
355 -> 352 [label="AST"];
355 -> 353 [label="AST"];
355 -> 351 [label="AST"];
355 -> 354 [label="AST"];
356 -> 355 [label="AST"];
361 -> 358 [label="AST"];
361 -> 359 [label="AST"];
361 -> 357 [label="AST"];
361 -> 360 [label="AST"];
362 -> 361 [label="AST"];
363 -> 356 [label="AST"];
363 -> 362 [label="AST"];
363 -> 473 [label="Control Dep"];
363 -> 374 [label="Control Dep"];
363 -> 372 [label="Control Dep"];
363 -> 370 [label="Control Dep"];
363 -> 365 [label="Control Dep"];
363 -> 367 [label="Control Dep"];
363 -> 368 [label="Control Dep"];
363 -> 369 [label="Control Dep"];
363 -> 371 [label="Control Dep"];
363 -> 382 [label="Control Dep"];
363 -> 380 [label="Control Dep"];
363 -> 376 [label="Control Dep"];
363 -> 378 [label="Control Dep"];
363 -> 379 [label="Control Dep"];
363 -> 472 [label="Control Dep"];
363 -> 385 [label="Control Dep"];
363 -> 383 [label="Control Dep"];
363 -> 384 [label="Control Dep"];
367 -> 373 [label="Data Dep"];
370 -> 366 [label="AST"];
370 -> 367 [label="AST"];
370 -> 365 [label="AST"];
370 -> 368 [label="AST"];
370 -> 369 [label="AST"];
372 -> 370 [label="AST"];
372 -> 371 [label="AST"];
373 -> 379 [label="Define-Use"];
374 -> 373 [label="AST"];
374 -> 364 [label="AST"];
374 -> 372 [label="AST"];
378 -> 381 [label="Data Dep"];
379 -> 381 [label="Data Dep"];
380 -> 377 [label="AST"];
380 -> 378 [label="AST"];
380 -> 376 [label="AST"];
380 -> 379 [label="AST"];
381 -> 383 [label="Define-Use"];
381 -> 390 [label="Define-Use"];
381 -> 397 [label="Define-Use"];
381 -> 434 [label="Define-Use"];
381 -> 441 [label="Define-Use"];
382 -> 381 [label="AST"];
382 -> 375 [label="AST"];
382 -> 380 [label="AST"];
385 -> 383 [label="AST"];
385 -> 384 [label="AST"];
385 -> 471 [label="Control Dep"];
385 -> 453 [label="Control Dep"];
385 -> 393 [label="Control Dep"];
385 -> 386 [label="Control Dep"];
385 -> 391 [label="Control Dep"];
385 -> 388 [label="Control Dep"];
385 -> 390 [label="Control Dep"];
385 -> 392 [label="Control Dep"];
385 -> 470 [label="Control Dep"];
385 -> 454 [label="Control Dep"];
385 -> 458 [label="Control Dep"];
385 -> 456 [label="Control Dep"];
385 -> 469 [label="Control Dep"];
385 -> 467 [label="Control Dep"];
385 -> 465 [label="Control Dep"];
385 -> 463 [label="Control Dep"];
385 -> 461 [label="Control Dep"];
385 -> 459 [label="Control Dep"];
385 -> 460 [label="Control Dep"];
385 -> 462 [label="Control Dep"];
385 -> 464 [label="Control Dep"];
385 -> 466 [label="Control Dep"];
385 -> 468 [label="Control Dep"];
391 -> 389 [label="AST"];
391 -> 390 [label="AST"];
391 -> 388 [label="AST"];
393 -> 387 [label="AST"];
393 -> 391 [label="AST"];
393 -> 386 [label="AST"];
393 -> 392 [label="AST"];
393 -> 429 [label="Control Dep"];
393 -> 400 [label="Control Dep"];
393 -> 398 [label="Control Dep"];
393 -> 395 [label="Control Dep"];
393 -> 397 [label="Control Dep"];
393 -> 423 [label="Control Dep"];
393 -> 405 [label="Control Dep"];
393 -> 401 [label="Control Dep"];
393 -> 403 [label="Control Dep"];
393 -> 404 [label="Control Dep"];
393 -> 428 [label="Control Dep"];
393 -> 424 [label="Control Dep"];
393 -> 427 [label="Control Dep"];
393 -> 426 [label="Control Dep"];
393 -> 452 [label="Control Dep"];
393 -> 451 [label="Control Dep"];
393 -> 437 [label="Control Dep"];
393 -> 430 [label="Control Dep"];
393 -> 435 [label="Control Dep"];
393 -> 432 [label="Control Dep"];
393 -> 434 [label="Control Dep"];
393 -> 436 [label="Control Dep"];
397 -> 399 [label="Data Dep"];
398 -> 396 [label="AST"];
398 -> 397 [label="AST"];
398 -> 395 [label="AST"];
399 -> 403 [label="Define-Use"];
399 -> 409 [label="Define-Use"];
399 -> 417 [label="Define-Use"];
399 -> 426 [label="Define-Use"];
400 -> 399 [label="AST"];
400 -> 394 [label="AST"];
400 -> 398 [label="AST"];
405 -> 402 [label="AST"];
405 -> 403 [label="AST"];
405 -> 401 [label="AST"];
405 -> 404 [label="AST"];
405 -> 422 [label="Control Dep"];
405 -> 413 [label="Control Dep"];
405 -> 411 [label="Control Dep"];
405 -> 407 [label="Control Dep"];
405 -> 409 [label="Control Dep"];
405 -> 410 [label="Control Dep"];
405 -> 421 [label="Control Dep"];
405 -> 414 [label="Control Dep"];
405 -> 420 [label="Control Dep"];
405 -> 415 [label="Control Dep"];
405 -> 417 [label="Control Dep"];
405 -> 418 [label="Control Dep"];
405 -> 419 [label="Control Dep"];
409 -> 412 [label="Data Dep"];
411 -> 408 [label="AST"];
411 -> 409 [label="AST"];
411 -> 407 [label="AST"];
411 -> 410 [label="AST"];
412 -> 419 [label="Define-Use"];
413 -> 412 [label="AST"];
413 -> 406 [label="AST"];
413 -> 411 [label="AST"];
414 -> 426 [label="Define-Use"];
417 -> 414 [label="Data Dep"];
419 -> 414 [label="Data Dep"];
420 -> 416 [label="AST"];
420 -> 417 [label="AST"];
420 -> 415 [label="AST"];
420 -> 418 [label="AST"];
420 -> 419 [label="AST"];
421 -> 414 [label="AST"];
421 -> 420 [label="AST"];
422 -> 413 [label="AST"];
422 -> 421 [label="AST"];
423 -> 405 [label="AST"];
423 -> 422 [label="AST"];
424 -> 464 [label="Define-Use"];
424 -> 479 [label="Define-Use"];
424 -> 483 [label="Define-Use"];
424 -> 486 [label="Define-Use"];
424 -> 491 [label="Define-Use"];
426 -> 424 [label="Data Dep"];
427 -> 426 [label="AST"];
428 -> 424 [label="AST"];
428 -> 427 [label="AST"];
429 -> 400 [label="AST"];
429 -> 423 [label="AST"];
429 -> 428 [label="AST"];
435 -> 433 [label="AST"];
435 -> 434 [label="AST"];
435 -> 432 [label="AST"];
437 -> 431 [label="AST"];
437 -> 435 [label="AST"];
437 -> 430 [label="AST"];
437 -> 436 [label="AST"];
437 -> 450 [label="Control Dep"];
437 -> 444 [label="Control Dep"];
437 -> 442 [label="Control Dep"];
437 -> 439 [label="Control Dep"];
437 -> 441 [label="Control Dep"];
437 -> 449 [label="Control Dep"];
437 -> 445 [label="Control Dep"];
437 -> 448 [label="Control Dep"];
437 -> 447 [label="Control Dep"];
441 -> 443 [label="Data Dep"];
442 -> 440 [label="AST"];
442 -> 441 [label="AST"];
442 -> 439 [label="AST"];
443 -> 447 [label="Define-Use"];
444 -> 443 [label="AST"];
444 -> 438 [label="AST"];
444 -> 442 [label="AST"];
445 -> 464 [label="Define-Use"];
445 -> 479 [label="Define-Use"];
445 -> 483 [label="Define-Use"];
445 -> 486 [label="Define-Use"];
445 -> 491 [label="Define-Use"];
447 -> 445 [label="Data Dep"];
448 -> 447 [label="AST"];
449 -> 445 [label="AST"];
449 -> 448 [label="AST"];
450 -> 444 [label="AST"];
450 -> 449 [label="AST"];
451 -> 437 [label="AST"];
451 -> 450 [label="AST"];
452 -> 451 [label="AST"];
453 -> 393 [label="AST"];
453 -> 429 [label="AST"];
453 -> 452 [label="AST"];
458 -> 457 [label="AST"];
458 -> 456 [label="AST"];
461 -> 459 [label="AST"];
461 -> 460 [label="AST"];
463 -> 461 [label="AST"];
463 -> 462 [label="AST"];
465 -> 463 [label="AST"];
465 -> 464 [label="AST"];
467 -> 465 [label="AST"];
467 -> 466 [label="AST"];
469 -> 467 [label="AST"];
469 -> 468 [label="AST"];
470 -> 455 [label="AST"];
470 -> 458 [label="AST"];
470 -> 454 [label="AST"];
470 -> 469 [label="AST"];
471 -> 453 [label="AST"];
471 -> 470 [label="AST"];
472 -> 385 [label="AST"];
472 -> 471 [label="AST"];
473 -> 374 [label="AST"];
473 -> 382 [label="AST"];
473 -> 472 [label="AST"];
474 -> 363 [label="AST"];
474 -> 473 [label="AST"];
480 -> 476 [label="AST"];
480 -> 477 [label="AST"];
480 -> 475 [label="AST"];
480 -> 478 [label="AST"];
480 -> 479 [label="AST"];
481 -> 350 [label="AST"];
481 -> 474 [label="AST"];
481 -> 480 [label="AST"];
482 -> 347 [label="AST"];
482 -> 481 [label="AST"];
485 -> 483 [label="AST"];
485 -> 484 [label="AST"];
488 -> 486 [label="AST"];
488 -> 487 [label="AST"];
489 -> 485 [label="AST"];
489 -> 488 [label="AST"];
489 -> 501 [label="Control Dep"];
489 -> 494 [label="Control Dep"];
489 -> 491 [label="Control Dep"];
489 -> 500 [label="Control Dep"];
489 -> 495 [label="Control Dep"];
489 -> 497 [label="Control Dep"];
489 -> 498 [label="Control Dep"];
489 -> 499 [label="Control Dep"];
491 -> 492 [label="AST"];
491 -> 493 [label="Data Dep"];
493 -> 498 [label="Define-Use"];
493 -> 499 [label="Define-Use"];
494 -> 493 [label="AST"];
494 -> 490 [label="AST"];
494 -> 491 [label="AST"];
500 -> 496 [label="AST"];
500 -> 497 [label="AST"];
500 -> 495 [label="AST"];
500 -> 498 [label="AST"];
500 -> 499 [label="AST"];
501 -> 494 [label="AST"];
501 -> 500 [label="AST"];
502 -> 489 [label="AST"];
502 -> 501 [label="AST"];
503 -> 336 [label="AST"];
503 -> 344 [label="AST"];
503 -> 482 [label="AST"];
503 -> 502 [label="AST"];
504 -> 324 [label="AST"];
504 -> 328 [label="AST"];
504 -> 503 [label="AST"];
505 -> 297 [label="AST"];
505 -> 306 [label="AST"];
505 -> 311 [label="AST"];
505 -> 317 [label="AST"];
505 -> 504 [label="AST"];
506 -> 285 [label="AST"];
506 -> 289 [label="AST"];
506 -> 505 [label="AST"];
507 -> 259 [label="AST"];
507 -> 268 [label="AST"];
507 -> 273 [label="AST"];
507 -> 278 [label="AST"];
507 -> 506 [label="AST"];
507 -> 526 [label="Action"];
508 -> 255 [label="AST"];
508 -> 507 [label="AST"];
511 -> 509 [label="AST"];
511 -> 510 [label="AST"];
513 -> 511 [label="AST"];
513 -> 512 [label="AST"];
513 -> 518 [label="Control Dep"];
513 -> 517 [label="Control Dep"];
513 -> 514 [label="Control Dep"];
513 -> 516 [label="Control Dep"];
517 -> 515 [label="AST"];
517 -> 514 [label="AST"];
517 -> 516 [label="AST"];
518 -> 517 [label="AST"];
519 -> 513 [label="AST"];
519 -> 518 [label="AST"];
520 -> 7 [label="AST"];
520 -> 11 [label="AST"];
520 -> 15 [label="AST"];
520 -> 20 [label="AST"];
520 -> 24 [label="AST"];
520 -> 28 [label="AST"];
520 -> 34 [label="AST"];
520 -> 62 [label="AST"];
520 -> 249 [label="AST"];
520 -> 252 [label="AST"];
520 -> 508 [label="AST"];
520 -> 519 [label="AST"];
521 -> 1 [label="AST"];
521 -> 0 [label="AST"];
521 -> 2 [label="AST"];
521 -> 3 [label="AST"];
521 -> 520 [label="AST"];
522 -> 523 [label="Action"];
523 -> 525 [label="AST"];
524 -> 525 [label="Action"];
526 -> 527 [label="Action"];
528 -> 529 [label="Action"];
530 -> 268 [label="Action"];
531 -> 527 [label="Action"];
}