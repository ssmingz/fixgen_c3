digraph "Pattern" {
0 [label="execute#?#15:UPDATE
execute#?#18:UPDATE" shape=ellipse]
1 [label="execute#?#15:toExecute.createArgument().setValue(command)
execute#?#18:toExecute.createArgument().setValue(pack)" shape=ellipse]
2 [label="execute#?#2:\{
    Commandline toExecute = new Commandline();
    toExecute.setExecutable(\"cvs\");
    if (cvsRoot != null) \{
        toExecute.createArgument().setValue(\"-d\");
        toExecute.createArgument().setValue(cvsRoot);
    \}
    if (noexec) \{
        toExecute.createArgument().setValue(\"-n\");
    \}
    if (quiet) \{
        toExecute.createArgument().setValue(\"-q\");
    \}
    toExecute.createArgument().setValue(command);
    toExecute.addArguments(cmd.getCommandline());
    if (pack != null) \{
        toExecute.createArgument().setValue(pack);
    \}
    Execute exe = new Execute(new LogStreamHandler(this, Project.MSG_INFO, Project.MSG_WARN), null);
    exe.setAntRun(project);
    if (dest == null) \{
        dest = project.getBaseDir();
    \}
    exe.setWorkingDirectory(dest);
    exe.setCommandline(toExecute.getCommandline());
    try \{
        exe.execute();
    \} catch (IOException e) \{
        throw new BuildException(e, location);
    \}
\}
execute#?#17:\{
    toExecute.createArgument().setValue(pack);
\}" shape=ellipse]
3 [label="execute#?#2:public void execute() throws BuildException \{
    Commandline toExecute = new Commandline();
    toExecute.setExecutable(\"cvs\");
    if (cvsRoot != null) \{
        toExecute.createArgument().setValue(\"-d\");
        toExecute.createArgument().setValue(cvsRoot);
    \}
    if (noexec) \{
        toExecute.createArgument().setValue(\"-n\");
    \}
    if (quiet) \{
        toExecute.createArgument().setValue(\"-q\");
    \}
    toExecute.createArgument().setValue(command);
    toExecute.addArguments(cmd.getCommandline());
    if (pack != null) \{
        toExecute.createArgument().setValue(pack);
    \}
    Execute exe = new Execute(new LogStreamHandler(this, Project.MSG_INFO, Project.MSG_WARN), null);
    exe.setAntRun(project);
    if (dest == null) \{
        dest = project.getBaseDir();
    \}
    exe.setWorkingDirectory(dest);
    exe.setCommandline(toExecute.getCommandline());
    try \{
        exe.execute();
    \} catch (IOException e) \{
        throw new BuildException(e, location);
    \}
\}" shape=ellipse]
4 [label="execute#?#3:Commandline toExecute = new Commandline()" shape=ellipse]
5 [label="execute#?#4:toExecute.setExecutable(\"cvs\")" shape=ellipse]
6 [label="execute#?#5:if (cvsRoot != null) \{
    toExecute.createArgument().setValue(\"-d\");
    toExecute.createArgument().setValue(cvsRoot);
\}" shape=ellipse]
7 [label="execute#?#9:if (noexec) \{
    toExecute.createArgument().setValue(\"-n\");
\}" shape=ellipse]
8 [label="execute#?#12:if (quiet) \{
    toExecute.createArgument().setValue(\"-q\");
\}" shape=ellipse]
9 [label="execute#?#16:toExecute.addArguments(cmd.getCommandline())" shape=ellipse]
10 [label="execute#?#17:if (pack != null) \{
    toExecute.createArgument().setValue(pack);
\}" shape=ellipse]
11 [label="execute#?#20:Execute exe = new Execute(new LogStreamHandler(this, Project.MSG_INFO, Project.MSG_WARN), null)" shape=ellipse]
12 [label="execute#?#21:exe.setAntRun(project)" shape=ellipse]
13 [label="execute#?#22:if (dest == null) \{
    dest = project.getBaseDir();
\}" shape=ellipse]
14 [label="execute#?#25:exe.setWorkingDirectory(dest)" shape=ellipse]
15 [label="execute#?#26:exe.setCommandline(toExecute.getCommandline())" shape=ellipse]
16 [label="execute#?#27:try \{
    exe.execute();
\} catch (IOException e) \{
    throw new BuildException(e, location);
\}" shape=ellipse]
17 [label="execute#?#15:setValue
execute#?#18:setValue" shape=ellipse]
18 [label="execute#?#15:toExecute.createArgument()
execute#?#18:toExecute.createArgument()" shape=ellipse]
19 [label="execute#?#15:createArgument" shape=ellipse]
20 [label="execute#?#15:toExecute
execute#?#18:toExecute" shape=ellipse]
21 [label="execute#?#15:createArgument()
execute#?#18:createArgument()" shape=ellipse]
22 [label="execute#?#15:setValue()
execute#?#18:setValue()" shape=ellipse]
23 [label="execute#?#15:command
execute#?#18:pack" shape=ellipse]
24 [label="execute#?#-1:command" shape=ellipse]
25 [label="execute#?#15:toExecute.createArgument().setLine(command)
execute#?#18:toExecute.createArgument().setLine(pack)" shape=ellipse]
26 [label="execute#?#17:if (pack != null) \{
    toExecute.createArgument().setValue(pack);
\}" shape=ellipse]
27 [label="execute#?#17:pack" shape=ellipse]
28 [label="execute#?#17:pack != null" shape=ellipse]
29 [label="execute#?#17:null" shape=ellipse]
0 -> 25 [label="Action:2"];
1 -> 0 [label="Action:2"];
1 -> 17 [label="AST:2"];
1 -> 18 [label="AST:2"];
1 -> 22 [label="AST:2"];
1 -> 23 [label="AST:2"];
2 -> 1 [label="AST:2"];
2 -> 4 [label="AST:1"];
2 -> 5 [label="AST:1"];
2 -> 6 [label="AST:1"];
2 -> 7 [label="AST:1"];
2 -> 8 [label="AST:1"];
2 -> 9 [label="AST:1"];
2 -> 10 [label="AST:1"];
2 -> 11 [label="AST:1"];
2 -> 12 [label="AST:1"];
2 -> 13 [label="AST:1"];
2 -> 14 [label="AST:1"];
2 -> 15 [label="AST:1"];
2 -> 16 [label="AST:1"];
3 -> 2 [label="AST:1"];
18 -> 19 [label="AST:1"];
18 -> 20 [label="AST:2"];
18 -> 21 [label="AST:2"];
23 -> 24 [label="AST:1"];
26 -> 28 [label="AST:1"];
26 -> 2 [label="AST:1"];
28 -> 27 [label="AST:1"];
28 -> 29 [label="AST:1"];
28 -> 2 [label="Control Dep:1"];
28 -> 1 [label="Control Dep:1"];
28 -> 22 [label="Control Dep:1"];
28 -> 18 [label="Control Dep:1"];
28 -> 21 [label="Control Dep:1"];
28 -> 20 [label="Control Dep:1"];
28 -> 23 [label="Control Dep:1"];
}