digraph "execute#?" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@execute" shape=ellipse]
2 [label="2:CtTypeReferenceImpl@BuildException" shape=ellipse]
3 [label="3:CtTypeReferenceImpl@Commandline" shape=ellipse]
4 [label="3:CtTypeReferenceImpl@Commandline" shape=ellipse]
5 [label="3:CtConstructorCallImpl@new Commandline()" shape=ellipse]
6 [label="3:CtVirtualElement@toExecute" shape=ellipse]
7 [label="3:CtLocalVariableImpl@Commandline toExecute = new Commandline()" shape=ellipse]
8 [label="4:CtExecutableReferenceImpl@setExecutable(java.lang.String)" shape=ellipse]
9 [label="4:CtVirtualElement@setExecutable" shape=ellipse]
10 [label="4:CtVariableReadImpl@toExecute" shape=ellipse]
11 [label="4:CtLiteralImpl@\"cvs\"" shape=ellipse]
12 [label="4:CtInvocationImpl@toExecute.setExecutable(\"cvs\")" shape=ellipse]
13 [label="5:CtFieldReadImpl@cvsRoot" shape=ellipse]
14 [label="5:CtLiteralImpl@null" shape=ellipse]
15 [label="5:CtBinaryOperatorImpl@cvsRoot != null" shape=ellipse]
16 [label="6:CtExecutableReferenceImpl@setValue(java.lang.String)" shape=ellipse]
17 [label="6:CtVirtualElement@setValue" shape=ellipse]
18 [label="6:CtExecutableReferenceImpl@createArgument()" shape=ellipse]
19 [label="6:CtVirtualElement@createArgument" shape=ellipse]
20 [label="6:CtVariableReadImpl@toExecute" shape=ellipse]
21 [label="6:CtInvocationImpl@toExecute.createArgument()" shape=ellipse]
22 [label="6:CtLiteralImpl@\"-d\"" shape=ellipse]
23 [label="6:CtInvocationImpl@toExecute.createArgument().setValue(\"-d\")" shape=ellipse]
24 [label="7:CtExecutableReferenceImpl@setValue()" shape=ellipse]
25 [label="7:CtVirtualElement@setValue" shape=ellipse]
26 [label="7:CtExecutableReferenceImpl@createArgument()" shape=ellipse]
27 [label="7:CtVirtualElement@createArgument" shape=ellipse]
28 [label="7:CtVariableReadImpl@toExecute" shape=ellipse]
29 [label="7:CtInvocationImpl@toExecute.createArgument()" shape=ellipse]
30 [label="7:CtFieldReadImpl@cvsRoot" shape=ellipse]
31 [label="7:CtInvocationImpl@toExecute.createArgument().setValue(cvsRoot)" shape=ellipse]
32 [label="5:CtBlockImpl@\{
    toExecute.createArgument().setValue(\"-d\");
    toExecute.createArgument().setValue(cvsRoot);
\}" shape=ellipse]
33 [label="5:CtIfImpl@if (cvsRoot != null) \{
    toExecute.createArgument().setValue(\"-d\");
    toExecute.createArgument().setValue(cvsRoot);
\}" shape=ellipse]
34 [label="9:CtFieldReadImpl@noexec" shape=ellipse]
35 [label="10:CtExecutableReferenceImpl@setValue(java.lang.String)" shape=ellipse]
36 [label="10:CtVirtualElement@setValue" shape=ellipse]
37 [label="10:CtExecutableReferenceImpl@createArgument()" shape=ellipse]
38 [label="10:CtVirtualElement@createArgument" shape=ellipse]
39 [label="10:CtVariableReadImpl@toExecute" shape=ellipse]
40 [label="10:CtInvocationImpl@toExecute.createArgument()" shape=ellipse]
41 [label="10:CtLiteralImpl@\"-n\"" shape=ellipse]
42 [label="10:CtInvocationImpl@toExecute.createArgument().setValue(\"-n\")" shape=ellipse]
43 [label="9:CtBlockImpl@\{
    toExecute.createArgument().setValue(\"-n\");
\}" shape=ellipse]
44 [label="9:CtIfImpl@if (noexec) \{
    toExecute.createArgument().setValue(\"-n\");
\}" shape=ellipse]
45 [label="12:CtFieldReadImpl@quiet" shape=ellipse]
46 [label="13:CtExecutableReferenceImpl@setValue(java.lang.String)" shape=ellipse]
47 [label="13:CtVirtualElement@setValue" shape=ellipse]
48 [label="13:CtExecutableReferenceImpl@createArgument()" shape=ellipse]
49 [label="13:CtVirtualElement@createArgument" shape=ellipse]
50 [label="13:CtVariableReadImpl@toExecute" shape=ellipse]
51 [label="13:CtInvocationImpl@toExecute.createArgument()" shape=ellipse]
52 [label="13:CtLiteralImpl@\"-q\"" shape=ellipse]
53 [label="13:CtInvocationImpl@toExecute.createArgument().setValue(\"-q\")" shape=ellipse]
54 [label="12:CtBlockImpl@\{
    toExecute.createArgument().setValue(\"-q\");
\}" shape=ellipse]
55 [label="12:CtIfImpl@if (quiet) \{
    toExecute.createArgument().setValue(\"-q\");
\}" shape=ellipse]
56 [label="15:CtExecutableReferenceImpl@setValue()" shape=ellipse]
57 [label="15:CtVirtualElement@setValue" shape=ellipse]
58 [label="15:CtExecutableReferenceImpl@createArgument()" shape=ellipse]
59 [label="15:CtVirtualElement@createArgument" shape=ellipse]
60 [label="15:CtVariableReadImpl@toExecute" shape=ellipse]
61 [label="15:CtInvocationImpl@toExecute.createArgument()" shape=ellipse]
62 [label="15:CtFieldReadImpl@command" shape=ellipse]
63 [label="15:CtInvocationImpl@toExecute.createArgument().setValue(command)" shape=ellipse]
64 [label="16:CtExecutableReferenceImpl@addArguments()" shape=ellipse]
65 [label="16:CtVirtualElement@addArguments" shape=ellipse]
66 [label="16:CtVariableReadImpl@toExecute" shape=ellipse]
67 [label="16:CtExecutableReferenceImpl@getCommandline()" shape=ellipse]
68 [label="16:CtVirtualElement@getCommandline" shape=ellipse]
69 [label="16:CtFieldReadImpl@cmd" shape=ellipse]
70 [label="16:CtInvocationImpl@cmd.getCommandline()" shape=ellipse]
71 [label="16:CtInvocationImpl@toExecute.addArguments(cmd.getCommandline())" shape=ellipse]
72 [label="17:CtFieldReadImpl@pack" shape=ellipse]
73 [label="17:CtLiteralImpl@null" shape=ellipse]
74 [label="17:CtBinaryOperatorImpl@pack != null" shape=ellipse]
75 [label="18:CtExecutableReferenceImpl@setValue()" shape=ellipse]
76 [label="18:CtVirtualElement@setValue" shape=ellipse]
77 [label="18:CtExecutableReferenceImpl@createArgument()" shape=ellipse]
78 [label="18:CtVirtualElement@createArgument" shape=ellipse]
79 [label="18:CtVariableReadImpl@toExecute" shape=ellipse]
80 [label="18:CtInvocationImpl@toExecute.createArgument()" shape=ellipse]
81 [label="18:CtFieldReadImpl@pack" shape=ellipse]
82 [label="18:CtInvocationImpl@toExecute.createArgument().setValue(pack)" shape=ellipse]
83 [label="17:CtBlockImpl@\{
    toExecute.createArgument().setValue(pack);
\}" shape=ellipse]
84 [label="17:CtIfImpl@if (pack != null) \{
    toExecute.createArgument().setValue(pack);
\}" shape=ellipse]
85 [label="20:CtTypeReferenceImpl@Execute" shape=ellipse]
86 [label="20:CtTypeReferenceImpl@Execute" shape=ellipse]
87 [label="20:CtTypeReferenceImpl@LogStreamHandler" shape=ellipse]
88 [label="20:CtThisAccessImpl@this" shape=ellipse]
89 [label="20:CtFieldReadImpl@Project.MSG_INFO" shape=ellipse]
90 [label="20:CtFieldReadImpl@Project.MSG_WARN" shape=ellipse]
91 [label="20:CtConstructorCallImpl@new LogStreamHandler(this, Project.MSG_INFO, Project.MSG_WARN)" shape=ellipse]
92 [label="20:CtLiteralImpl@null" shape=ellipse]
93 [label="20:CtConstructorCallImpl@new Execute(new LogStreamHandler(this, Project.MSG_INFO, Project.MSG_WARN), null)" shape=ellipse]
94 [label="20:CtVirtualElement@exe" shape=ellipse]
95 [label="20:CtLocalVariableImpl@Execute exe = new Execute(new LogStreamHandler(this, Project.MSG_INFO, Project.MSG_WARN), null)" shape=ellipse]
96 [label="21:CtExecutableReferenceImpl@setAntRun()" shape=ellipse]
97 [label="21:CtVirtualElement@setAntRun" shape=ellipse]
98 [label="21:CtVariableReadImpl@exe" shape=ellipse]
99 [label="21:CtFieldReadImpl@project" shape=ellipse]
100 [label="21:CtInvocationImpl@exe.setAntRun(project)" shape=ellipse]
101 [label="22:CtFieldReadImpl@dest" shape=ellipse]
102 [label="22:CtLiteralImpl@null" shape=ellipse]
103 [label="22:CtBinaryOperatorImpl@dest == null" shape=ellipse]
104 [label="23:CtFieldWriteImpl@dest" shape=ellipse]
105 [label="23:CtExecutableReferenceImpl@getBaseDir()" shape=ellipse]
106 [label="23:CtVirtualElement@getBaseDir" shape=ellipse]
107 [label="23:CtFieldReadImpl@project" shape=ellipse]
108 [label="23:CtInvocationImpl@project.getBaseDir()" shape=ellipse]
109 [label="23:CtAssignmentImpl@dest = project.getBaseDir()" shape=ellipse]
110 [label="22:CtBlockImpl@\{
    dest = project.getBaseDir();
\}" shape=ellipse]
111 [label="22:CtIfImpl@if (dest == null) \{
    dest = project.getBaseDir();
\}" shape=ellipse]
112 [label="25:CtExecutableReferenceImpl@setWorkingDirectory()" shape=ellipse]
113 [label="25:CtVirtualElement@setWorkingDirectory" shape=ellipse]
114 [label="25:CtVariableReadImpl@exe" shape=ellipse]
115 [label="25:CtFieldReadImpl@dest" shape=ellipse]
116 [label="25:CtInvocationImpl@exe.setWorkingDirectory(dest)" shape=ellipse]
117 [label="26:CtExecutableReferenceImpl@setCommandline()" shape=ellipse]
118 [label="26:CtVirtualElement@setCommandline" shape=ellipse]
119 [label="26:CtVariableReadImpl@exe" shape=ellipse]
120 [label="26:CtExecutableReferenceImpl@getCommandline()" shape=ellipse]
121 [label="26:CtVirtualElement@getCommandline" shape=ellipse]
122 [label="26:CtVariableReadImpl@toExecute" shape=ellipse]
123 [label="26:CtInvocationImpl@toExecute.getCommandline()" shape=ellipse]
124 [label="26:CtInvocationImpl@exe.setCommandline(toExecute.getCommandline())" shape=ellipse]
125 [label="28:CtExecutableReferenceImpl@execute()" shape=ellipse]
126 [label="28:CtVirtualElement@execute" shape=ellipse]
127 [label="28:CtVariableReadImpl@exe" shape=ellipse]
128 [label="28:CtInvocationImpl@exe.execute()" shape=ellipse]
129 [label="27:CtBlockImpl@\{
    exe.execute();
\}" shape=ellipse]
130 [label="29:CtVirtualElement@e" shape=ellipse]
131 [label="29:CtTypeReferenceImpl@IOException" shape=ellipse]
132 [label="29:CtCatchVariableImpl@IOException e" shape=ellipse]
133 [label="30:CtTypeReferenceImpl@BuildException" shape=ellipse]
134 [label="30:CtVariableReadImpl@e" shape=ellipse]
135 [label="30:CtFieldReadImpl@location" shape=ellipse]
136 [label="30:CtConstructorCallImpl@new BuildException(e, location)" shape=ellipse]
137 [label="30:CtThrowImpl@throw new BuildException(e, location)" shape=ellipse]
138 [label="29:CtBlockImpl@\{
    throw new BuildException(e, location);
\}" shape=ellipse]
139 [label="29:CtCatchImpl@ catch (IOException e) \{
    throw new BuildException(e, location);
\}" shape=ellipse]
140 [label="27:CtTryImpl@try \{
    exe.execute();
\} catch (IOException e) \{
    throw new BuildException(e, location);
\}" shape=ellipse]
141 [label="2:CtBlockImpl@\{
    Commandline toExecute = new Commandline();
    toExecute.setExecutable(\"cvs\");
    if (cvsRoot != null) \{
        toExecute.createArgument().setValue(\"-d\");
        toExecute.createArgument().setValue(cvsRoot);
    \}
    if (noexec) \{
        toExecute.createArgument().setValue(\"-n\");
    \}
    if (quiet) \{
        toExecute.createArgument().setValue(\"-q\");
    \}
    toExecute.createArgument().setValue(command);
    toExecute.addArguments(cmd.getCommandline());
    if (pack != null) \{
        toExecute.createArgument().setValue(pack);
    \}
    Execute exe = new Execute(new LogStreamHandler(this, Project.MSG_INFO, Project.MSG_WARN), null);
    exe.setAntRun(project);
    if (dest == null) \{
        dest = project.getBaseDir();
    \}
    exe.setWorkingDirectory(dest);
    exe.setCommandline(toExecute.getCommandline());
    try \{
        exe.execute();
    \} catch (IOException e) \{
        throw new BuildException(e, location);
    \}
\}" shape=ellipse]
142 [label="2:CtMethodImpl@public void execute() throws BuildException \{
    Commandline toExecute = new Commandline();
    toExecute.setExecutable(\"cvs\");
    if (cvsRoot != null) \{
        toExecute.createArgument().setValue(\"-d\");
        toExecute.createArgument().setValue(cvsRoot);
    \}
    if (noexec) \{
        toExecute.createArgument().setValue(\"-n\");
    \}
    if (quiet) \{
        toExecute.createArgument().setValue(\"-q\");
    \}
    toExecute.createArgument().setValue(command);
    toExecute.addArguments(cmd.getCommandline());
    if (pack != null) \{
        toExecute.createArgument().setValue(pack);
    \}
    Execute exe = new Execute(new LogStreamHandler(this, Project.MSG_INFO, Project.MSG_WARN), null);
    exe.setAntRun(project);
    if (dest == null) \{
        dest = project.getBaseDir();
    \}
    exe.setWorkingDirectory(dest);
    exe.setCommandline(toExecute.getCommandline());
    try \{
        exe.execute();
    \} catch (IOException e) \{
        throw new BuildException(e, location);
    \}
\}" shape=ellipse]
143 [label="15:Update@UPDATE" shape=ellipse]
144 [label="15:CtInvocationImpl@toExecute.createArgument().setLine(command)" shape=ellipse]
6 -> 10 [label="Define-Use"];
6 -> 20 [label="Define-Use"];
6 -> 28 [label="Define-Use"];
6 -> 39 [label="Define-Use"];
6 -> 50 [label="Define-Use"];
6 -> 60 [label="Define-Use"];
6 -> 66 [label="Define-Use"];
6 -> 79 [label="Define-Use"];
6 -> 122 [label="Define-Use"];
7 -> 6 [label="AST"];
7 -> 3 [label="AST"];
7 -> 5 [label="AST"];
12 -> 9 [label="AST"];
12 -> 10 [label="AST"];
12 -> 8 [label="AST"];
12 -> 11 [label="AST"];
15 -> 13 [label="AST"];
15 -> 14 [label="AST"];
15 -> 32 [label="Control Dep"];
15 -> 23 [label="Control Dep"];
15 -> 16 [label="Control Dep"];
15 -> 21 [label="Control Dep"];
15 -> 18 [label="Control Dep"];
15 -> 20 [label="Control Dep"];
15 -> 22 [label="Control Dep"];
15 -> 31 [label="Control Dep"];
15 -> 24 [label="Control Dep"];
15 -> 29 [label="Control Dep"];
15 -> 26 [label="Control Dep"];
15 -> 28 [label="Control Dep"];
15 -> 30 [label="Control Dep"];
21 -> 19 [label="AST"];
21 -> 20 [label="AST"];
21 -> 18 [label="AST"];
23 -> 17 [label="AST"];
23 -> 21 [label="AST"];
23 -> 16 [label="AST"];
23 -> 22 [label="AST"];
29 -> 27 [label="AST"];
29 -> 28 [label="AST"];
29 -> 26 [label="AST"];
31 -> 25 [label="AST"];
31 -> 29 [label="AST"];
31 -> 24 [label="AST"];
31 -> 30 [label="AST"];
32 -> 23 [label="AST"];
32 -> 31 [label="AST"];
33 -> 15 [label="AST"];
33 -> 32 [label="AST"];
34 -> 43 [label="Control Dep"];
34 -> 42 [label="Control Dep"];
34 -> 35 [label="Control Dep"];
34 -> 40 [label="Control Dep"];
34 -> 37 [label="Control Dep"];
34 -> 39 [label="Control Dep"];
34 -> 41 [label="Control Dep"];
40 -> 38 [label="AST"];
40 -> 39 [label="AST"];
40 -> 37 [label="AST"];
42 -> 36 [label="AST"];
42 -> 40 [label="AST"];
42 -> 35 [label="AST"];
42 -> 41 [label="AST"];
43 -> 42 [label="AST"];
44 -> 34 [label="AST"];
44 -> 43 [label="AST"];
45 -> 54 [label="Control Dep"];
45 -> 53 [label="Control Dep"];
45 -> 46 [label="Control Dep"];
45 -> 51 [label="Control Dep"];
45 -> 48 [label="Control Dep"];
45 -> 50 [label="Control Dep"];
45 -> 52 [label="Control Dep"];
51 -> 49 [label="AST"];
51 -> 50 [label="AST"];
51 -> 48 [label="AST"];
53 -> 47 [label="AST"];
53 -> 51 [label="AST"];
53 -> 46 [label="AST"];
53 -> 52 [label="AST"];
54 -> 53 [label="AST"];
55 -> 45 [label="AST"];
55 -> 54 [label="AST"];
61 -> 59 [label="AST"];
61 -> 60 [label="AST"];
61 -> 58 [label="AST"];
63 -> 57 [label="AST"];
63 -> 61 [label="AST"];
63 -> 56 [label="AST"];
63 -> 62 [label="AST"];
63 -> 143 [label="Action"];
70 -> 68 [label="AST"];
70 -> 69 [label="AST"];
70 -> 67 [label="AST"];
71 -> 65 [label="AST"];
71 -> 66 [label="AST"];
71 -> 64 [label="AST"];
71 -> 70 [label="AST"];
74 -> 72 [label="AST"];
74 -> 73 [label="AST"];
74 -> 83 [label="Control Dep"];
74 -> 82 [label="Control Dep"];
74 -> 75 [label="Control Dep"];
74 -> 80 [label="Control Dep"];
74 -> 77 [label="Control Dep"];
74 -> 79 [label="Control Dep"];
74 -> 81 [label="Control Dep"];
80 -> 78 [label="AST"];
80 -> 79 [label="AST"];
80 -> 77 [label="AST"];
82 -> 76 [label="AST"];
82 -> 80 [label="AST"];
82 -> 75 [label="AST"];
82 -> 81 [label="AST"];
83 -> 82 [label="AST"];
84 -> 74 [label="AST"];
84 -> 83 [label="AST"];
88 -> 94 [label="Data Dep"];
89 -> 94 [label="Data Dep"];
90 -> 94 [label="Data Dep"];
91 -> 88 [label="AST"];
91 -> 89 [label="AST"];
91 -> 90 [label="AST"];
93 -> 91 [label="AST"];
93 -> 92 [label="AST"];
94 -> 98 [label="Define-Use"];
94 -> 114 [label="Define-Use"];
94 -> 119 [label="Define-Use"];
94 -> 127 [label="Define-Use"];
95 -> 94 [label="AST"];
95 -> 85 [label="AST"];
95 -> 93 [label="AST"];
100 -> 97 [label="AST"];
100 -> 98 [label="AST"];
100 -> 96 [label="AST"];
100 -> 99 [label="AST"];
103 -> 101 [label="AST"];
103 -> 102 [label="AST"];
103 -> 110 [label="Control Dep"];
103 -> 109 [label="Control Dep"];
103 -> 104 [label="Control Dep"];
103 -> 108 [label="Control Dep"];
103 -> 105 [label="Control Dep"];
103 -> 107 [label="Control Dep"];
104 -> 115 [label="Define-Use"];
107 -> 104 [label="Data Dep"];
108 -> 106 [label="AST"];
108 -> 107 [label="AST"];
108 -> 105 [label="AST"];
109 -> 104 [label="AST"];
109 -> 108 [label="AST"];
110 -> 109 [label="AST"];
111 -> 103 [label="AST"];
111 -> 110 [label="AST"];
116 -> 113 [label="AST"];
116 -> 114 [label="AST"];
116 -> 112 [label="AST"];
116 -> 115 [label="AST"];
123 -> 121 [label="AST"];
123 -> 122 [label="AST"];
123 -> 120 [label="AST"];
124 -> 118 [label="AST"];
124 -> 119 [label="AST"];
124 -> 117 [label="AST"];
124 -> 123 [label="AST"];
128 -> 126 [label="AST"];
128 -> 127 [label="AST"];
128 -> 125 [label="AST"];
129 -> 128 [label="AST"];
130 -> 134 [label="Define-Use"];
132 -> 130 [label="AST"];
132 -> 131 [label="AST"];
132 -> 138 [label="Control Dep"];
132 -> 137 [label="Control Dep"];
132 -> 136 [label="Control Dep"];
132 -> 134 [label="Control Dep"];
132 -> 135 [label="Control Dep"];
136 -> 134 [label="AST"];
136 -> 135 [label="AST"];
137 -> 136 [label="AST"];
138 -> 137 [label="AST"];
139 -> 132 [label="AST"];
139 -> 138 [label="AST"];
140 -> 129 [label="AST"];
140 -> 139 [label="AST"];
141 -> 7 [label="AST"];
141 -> 12 [label="AST"];
141 -> 33 [label="AST"];
141 -> 44 [label="AST"];
141 -> 55 [label="AST"];
141 -> 63 [label="AST"];
141 -> 71 [label="AST"];
141 -> 84 [label="AST"];
141 -> 95 [label="AST"];
141 -> 100 [label="AST"];
141 -> 111 [label="AST"];
141 -> 116 [label="AST"];
141 -> 124 [label="AST"];
141 -> 140 [label="AST"];
142 -> 1 [label="AST"];
142 -> 0 [label="AST"];
142 -> 2 [label="AST"];
142 -> 141 [label="AST"];
143 -> 144 [label="Action"];
}