digraph "Pattern" {
0 [label="executeAsForked#?,CommandlineJava#31:UPDATE
execute#?#15:UPDATE
_execute#?,ExecuteStreamHandler#12:UPDATE
execute#?#40:UPDATE" shape=ellipse]
1 [label="executeAsForked#?,CommandlineJava#31:log(\"Executing: \" + commandline.toString(), MSG_VERBOSE)
execute#?#15:log(cmdl.toString(), MSG_VERBOSE)
_execute#?,ExecuteStreamHandler#12:log(cmdl.toString(), MSG_VERBOSE)
execute#?#40:log(cmdl.toString(), MSG_VERBOSE)" shape=ellipse]
2 [label="executeAsForked#?,CommandlineJava#2:\{
    createClasspath();
    if (getClasspath().toString().length() > 0) \{
        createJvmarg(commandline).setValue(\"-classpath\");
        createJvmarg(commandline).setValue(getClasspath().toString());
    \}
    if (getOutputFile() != null) \{
        commandline.createArgument().setValue(\"-file\");
        commandline.createArgument().setValue(_outputFile.getPath());
    \}
    PathTokenizer sourcesPath = new PathTokenizer(getSourcespath().toString());
    while (sourcesPath.hasMoreTokens()) \{
        File f = new File(sourcesPath.nextToken());
        if ((!f.exists()) || (!f.isDirectory())) \{
            throw new TaskException((\"\\"\" + f.getPath()) + \"\\" does not represent a valid directory. JDepend would fail.\");
        \}
        commandline.createArgument().setValue(f.getPath());
    \} 
    final Execute exe = new Execute();
    exe.setOutput(new LogOutputStream(this, Project.MSG_INFO));
    exe.setError(new LogOutputStream(this, Project.MSG_WARN));
    exe.setCommandline(commandline.getCommandline());
    if (getDir() != null) \{
        exe.setWorkingDirectory(getDir());
    \}
    if (getOutputFile() != null) \{
        getLogger().info(\"Output to be stored in \" + getOutputFile().getPath());
    \}
    log(\"Executing: \" + commandline.toString(), MSG_VERBOSE);
    try \{
        return exe.execute();
    \} catch (IOException e) \{
        throw new TaskException(\"Process fork failed.\", e);
    \}
\}
execute#?#5:\{
    Commandline cmdl = new Commandline();
    cmdl.setExecutable(new File(home, \"jpcovmerge\").getAbsolutePath());
    if (verbose) \{
        cmdl.createArgument().setValue(\"-v\");
    \}
    cmdl.createArgument().setValue(\"-jp_paramfile=\" + paramfile.getAbsolutePath());
    final Execute exe = new Execute();
    exe.setOutput(new LogOutputStream(this, Project.MSG_INFO));
    exe.setError(new LogOutputStream(this, Project.MSG_WARN));
    log(cmdl.toString(), MSG_VERBOSE);
    exe.setCommandline(cmdl.getCommandline());
    int exitValue = exe.execute();
    if (exitValue != 0) \{
        throw new TaskException((\"JProbe Coverage Merging failed (\" + exitValue) + \")\");
    \}
\}
_execute#?,ExecuteStreamHandler#2:\{
    String pathname = target.getAbsolutePath();
    int pos = pathname.length() - \".jj\".length();
    pathname = pathname.substring(0, pos) + \".java\";
    File javaFile = new File(pathname);
    if (javaFile.exists() && (target.lastModified() < javaFile.lastModified())) \{
        getLogger().info((\"Target is already build - skipping (\" + target) + \")\");
        return;
    \}
    final Execute process = new Execute(handler);
    log(cmdl.toString(), MSG_VERBOSE);
    process.setCommandline(cmdl.getCommandline());
    try \{
        if (process.execute() != 0) \{
            throw new TaskException(\"Metamata task failed.\");
        \}
    \} catch (IOException e) \{
        throw new TaskException(\"Failed to launch Metamata task: \" + e);
    \}
\}
execute#?#2:\{
    Enumeration iter = optionalAttrs.keys();
    while (iter.hasMoreElements()) \{
        String name = ((String) (iter.nextElement()));
        Object value = optionalAttrs.get(name);
        cmdl.createArgument().setValue(((\"-\" + name) + \":\") + value.toString());
    \} 
    if ((target == null) || (!target.isFile())) \{
        throw new TaskException(\"Invalid target: \" + target);
    \}
    if (outputDirectory == null) \{
        outputDirectory = new File(target.getParent());
    \}
    if (!outputDirectory.isDirectory()) \{
        throw new TaskException((\"'outputdirectory' \" + outputDirectory) + \" is not a directory.\");
    \}
    cmdl.createArgument().setValue(\"-OUTPUT_DIRECTORY:\" + outputDirectory.getAbsolutePath().replace('\\', '/'));
    String targetName = target.getName();
    final File javaFile = new File(outputDirectory, targetName.substring(0, targetName.indexOf(\".jjt\")) + \".jj\");
    if (javaFile.exists() && (target.lastModified() < javaFile.lastModified())) \{
        getLogger().info((\"Target is already built - skipping (\" + target) + \")\");
        return;
    \}
    cmdl.createArgument().setValue(target.getAbsolutePath());
    if ((javaccHome == null) || (!javaccHome.isDirectory())) \{
        throw new TaskException(\"Javacchome not set.\");
    \}
    final Path classpath = cmdl.createClasspath(getProject());
    classpath.createPathElement().setPath(javaccHome.getAbsolutePath() + \"/JavaCC.zip\");
    classpath.addJavaRuntime();
    final Argument arg = cmdl.createVmArgument();
    arg.setValue(\"-mx140M\");
    arg.setValue(\"-Dinstall.root=\" + javaccHome.getAbsolutePath());
    final Execute exe = new Execute();
    exe.setOutput(new LogOutputStream(this, Project.MSG_INFO));
    exe.setError(new LogOutputStream(this, Project.MSG_INFO));
    log(cmdl.toString(), MSG_VERBOSE);
    exe.setCommandline(cmdl.getCommandline());
    try \{
        if (exe.execute() != 0) \{
            throw new TaskException(\"JJTree failed.\");
        \}
    \} catch (IOException e) \{
        throw new TaskException(\"Failed to launch JJTree: \" + e);
    \}
\}" shape=ellipse]
3 [label="executeAsForked#?,CommandlineJava#2:public int executeAsForked(CommandlineJava commandline) throws TaskException \{
    createClasspath();
    if (getClasspath().toString().length() > 0) \{
        createJvmarg(commandline).setValue(\"-classpath\");
        createJvmarg(commandline).setValue(getClasspath().toString());
    \}
    if (getOutputFile() != null) \{
        commandline.createArgument().setValue(\"-file\");
        commandline.createArgument().setValue(_outputFile.getPath());
    \}
    PathTokenizer sourcesPath = new PathTokenizer(getSourcespath().toString());
    while (sourcesPath.hasMoreTokens()) \{
        File f = new File(sourcesPath.nextToken());
        if ((!f.exists()) || (!f.isDirectory())) \{
            throw new TaskException((\"\\"\" + f.getPath()) + \"\\" does not represent a valid directory. JDepend would fail.\");
        \}
        commandline.createArgument().setValue(f.getPath());
    \} 
    final Execute exe = new Execute();
    exe.setOutput(new LogOutputStream(this, Project.MSG_INFO));
    exe.setError(new LogOutputStream(this, Project.MSG_WARN));
    exe.setCommandline(commandline.getCommandline());
    if (getDir() != null) \{
        exe.setWorkingDirectory(getDir());
    \}
    if (getOutputFile() != null) \{
        getLogger().info(\"Output to be stored in \" + getOutputFile().getPath());
    \}
    log(\"Executing: \" + commandline.toString(), MSG_VERBOSE);
    try \{
        return exe.execute();
    \} catch (IOException e) \{
        throw new TaskException(\"Process fork failed.\", e);
    \}
\}
_execute#?,ExecuteStreamHandler#2:protected void _execute(ExecuteStreamHandler handler) throws TaskException \{
    String pathname = target.getAbsolutePath();
    int pos = pathname.length() - \".jj\".length();
    pathname = pathname.substring(0, pos) + \".java\";
    File javaFile = new File(pathname);
    if (javaFile.exists() && (target.lastModified() < javaFile.lastModified())) \{
        getLogger().info((\"Target is already build - skipping (\" + target) + \")\");
        return;
    \}
    final Execute process = new Execute(handler);
    log(cmdl.toString(), MSG_VERBOSE);
    process.setCommandline(cmdl.getCommandline());
    try \{
        if (process.execute() != 0) \{
            throw new TaskException(\"Metamata task failed.\");
        \}
    \} catch (IOException e) \{
        throw new TaskException(\"Failed to launch Metamata task: \" + e);
    \}
\}
execute#?#2:public void execute() throws TaskException \{
    Enumeration iter = optionalAttrs.keys();
    while (iter.hasMoreElements()) \{
        String name = ((String) (iter.nextElement()));
        Object value = optionalAttrs.get(name);
        cmdl.createArgument().setValue(((\"-\" + name) + \":\") + value.toString());
    \} 
    if ((target == null) || (!target.isFile())) \{
        throw new TaskException(\"Invalid target: \" + target);
    \}
    if (outputDirectory == null) \{
        outputDirectory = new File(target.getParent());
    \}
    if (!outputDirectory.isDirectory()) \{
        throw new TaskException((\"'outputdirectory' \" + outputDirectory) + \" is not a directory.\");
    \}
    cmdl.createArgument().setValue(\"-OUTPUT_DIRECTORY:\" + outputDirectory.getAbsolutePath().replace('\\', '/'));
    String targetName = target.getName();
    final File javaFile = new File(outputDirectory, targetName.substring(0, targetName.indexOf(\".jjt\")) + \".jj\");
    if (javaFile.exists() && (target.lastModified() < javaFile.lastModified())) \{
        getLogger().info((\"Target is already built - skipping (\" + target) + \")\");
        return;
    \}
    cmdl.createArgument().setValue(target.getAbsolutePath());
    if ((javaccHome == null) || (!javaccHome.isDirectory())) \{
        throw new TaskException(\"Javacchome not set.\");
    \}
    final Path classpath = cmdl.createClasspath(getProject());
    classpath.createPathElement().setPath(javaccHome.getAbsolutePath() + \"/JavaCC.zip\");
    classpath.addJavaRuntime();
    final Argument arg = cmdl.createVmArgument();
    arg.setValue(\"-mx140M\");
    arg.setValue(\"-Dinstall.root=\" + javaccHome.getAbsolutePath());
    final Execute exe = new Execute();
    exe.setOutput(new LogOutputStream(this, Project.MSG_INFO));
    exe.setError(new LogOutputStream(this, Project.MSG_INFO));
    log(cmdl.toString(), MSG_VERBOSE);
    exe.setCommandline(cmdl.getCommandline());
    try \{
        if (exe.execute() != 0) \{
            throw new TaskException(\"JJTree failed.\");
        \}
    \} catch (IOException e) \{
        throw new TaskException(\"Failed to launch JJTree: \" + e);
    \}
\}" shape=ellipse]
4 [label="executeAsForked#?,CommandlineJava#3:createClasspath()
execute#?#16:exe.setCommandline(cmdl.getCommandline())
_execute#?,ExecuteStreamHandler#13:process.setCommandline(cmdl.getCommandline())
execute#?#33:classpath.addJavaRuntime()" shape=ellipse]
5 [label="executeAsForked#?,CommandlineJava#4:if (getClasspath().toString().length() > 0) \{
    createJvmarg(commandline).setValue(\"-classpath\");
    createJvmarg(commandline).setValue(getClasspath().toString());
\}
execute#?#8:if (verbose) \{
    cmdl.createArgument().setValue(\"-v\");
\}
_execute#?,ExecuteStreamHandler#14:try \{
    if (process.execute() != 0) \{
        throw new TaskException(\"Metamata task failed.\");
    \}
\} catch (IOException e) \{
    throw new TaskException(\"Failed to launch Metamata task: \" + e);
\}
execute#?#31:final Path classpath = cmdl.createClasspath(getProject())" shape=ellipse]
6 [label="executeAsForked#?,CommandlineJava#8:if (getOutputFile() != null) \{
    commandline.createArgument().setValue(\"-file\");
    commandline.createArgument().setValue(_outputFile.getPath());
\}
execute#?#18:if (exitValue != 0) \{
    throw new TaskException((\"JProbe Coverage Merging failed (\" + exitValue) + \")\");
\}
_execute#?,ExecuteStreamHandler#3:String pathname = target.getAbsolutePath()
execute#?#12:if (outputDirectory == null) \{
    outputDirectory = new File(target.getParent());
\}" shape=ellipse]
7 [label="executeAsForked#?,CommandlineJava#12:PathTokenizer sourcesPath = new PathTokenizer(getSourcespath().toString())
execute#?#17:int exitValue = exe.execute()
_execute#?,ExecuteStreamHandler#11:final Execute process = new Execute(handler)
execute#?#3:Enumeration iter = optionalAttrs.keys()" shape=ellipse]
8 [label="executeAsForked#?,CommandlineJava#13:while (sourcesPath.hasMoreTokens()) \{
    File f = new File(sourcesPath.nextToken());
    if ((!f.exists()) || (!f.isDirectory())) \{
        throw new TaskException((\"\\"\" + f.getPath()) + \"\\" does not represent a valid directory. JDepend would fail.\");
    \}
    commandline.createArgument().setValue(f.getPath());
\} 
execute#?#4:while (iter.hasMoreElements()) \{
    String name = ((String) (iter.nextElement()));
    Object value = optionalAttrs.get(name);
    cmdl.createArgument().setValue(((\"-\" + name) + \":\") + value.toString());
\} " shape=ellipse]
9 [label="executeAsForked#?,CommandlineJava#21:final Execute exe = new Execute()
execute#?#12:final Execute exe = new Execute()
_execute#?,ExecuteStreamHandler#6:File javaFile = new File(pathname)
execute#?#37:final Execute exe = new Execute()" shape=ellipse]
10 [label="executeAsForked#?,CommandlineJava#22:exe.setOutput(new LogOutputStream(this, Project.MSG_INFO))
execute#?#13:exe.setOutput(new LogOutputStream(this, Project.MSG_INFO))
execute#?#38:exe.setOutput(new LogOutputStream(this, Project.MSG_INFO))" shape=ellipse]
11 [label="executeAsForked#?,CommandlineJava#23:exe.setError(new LogOutputStream(this, Project.MSG_WARN))
execute#?#14:exe.setError(new LogOutputStream(this, Project.MSG_WARN))
execute#?#39:exe.setError(new LogOutputStream(this, Project.MSG_INFO))" shape=ellipse]
12 [label="executeAsForked#?,CommandlineJava#24:exe.setCommandline(commandline.getCommandline())
execute#?#7:cmdl.setExecutable(new File(home, \"jpcovmerge\").getAbsolutePath())
execute#?#41:exe.setCommandline(cmdl.getCommandline())" shape=ellipse]
13 [label="executeAsForked#?,CommandlineJava#25:if (getDir() != null) \{
    exe.setWorkingDirectory(getDir());
\}
execute#?#6:Commandline cmdl = new Commandline()
_execute#?,ExecuteStreamHandler#7:if (javaFile.exists() && (target.lastModified() < javaFile.lastModified())) \{
    getLogger().info((\"Target is already build - skipping (\" + target) + \")\");
    return;
\}
execute#?#28:if ((javaccHome == null) || (!javaccHome.isDirectory())) \{
    throw new TaskException(\"Javacchome not set.\");
\}" shape=ellipse]
14 [label="executeAsForked#?,CommandlineJava#28:if (getOutputFile() != null) \{
    getLogger().info(\"Output to be stored in \" + getOutputFile().getPath());
\}
_execute#?,ExecuteStreamHandler#5:pathname = pathname.substring(0, pos) + \".java\"
execute#?#9:if ((target == null) || (!target.isFile())) \{
    throw new TaskException(\"Invalid target: \" + target);
\}" shape=ellipse]
15 [label="executeAsForked#?,CommandlineJava#32:try \{
    return exe.execute();
\} catch (IOException e) \{
    throw new TaskException(\"Process fork failed.\", e);
\}
_execute#?,ExecuteStreamHandler#4:int pos = pathname.length() - \".jj\".length()
execute#?#42:try \{
    if (exe.execute() != 0) \{
        throw new TaskException(\"JJTree failed.\");
    \}
\} catch (IOException e) \{
    throw new TaskException(\"Failed to launch JJTree: \" + e);
\}" shape=ellipse]
16 [label="executeAsForked#?,CommandlineJava#31:log
execute#?#15:log
_execute#?,ExecuteStreamHandler#12:log
execute#?#40:log" shape=ellipse]
17 [label="executeAsForked#?,CommandlineJava#-1:
execute#?#-1:
_execute#?,ExecuteStreamHandler#-1:
execute#?#-1:" shape=ellipse]
18 [label="executeAsForked#?,CommandlineJava#-1:PlaceHold
execute#?#-1:PlaceHold
_execute#?,ExecuteStreamHandler#-1:PlaceHold
execute#?#-1:PlaceHold" shape=ellipse]
19 [label="executeAsForked#?,CommandlineJava#-1:PlaceHold
execute#?#-1:PlaceHold
_execute#?,ExecuteStreamHandler#-1:PlaceHold
execute#?#-1:PlaceHold" shape=ellipse]
20 [label="executeAsForked#?,CommandlineJava#31:log(<unknown>,<unknown>)
execute#?#15:log(<unknown>,<unknown>)
_execute#?,ExecuteStreamHandler#12:log(<unknown>,<unknown>)
execute#?#40:log(<unknown>,<unknown>)" shape=ellipse]
21 [label="executeAsForked#?,CommandlineJava#-1:null
execute#?#-1:null
_execute#?,ExecuteStreamHandler#-1:null
execute#?#-1:null" shape=ellipse]
22 [label="executeAsForked#?,CommandlineJava#-1:null
execute#?#-1:null
_execute#?,ExecuteStreamHandler#-1:null
execute#?#-1:null" shape=ellipse]
23 [label="executeAsForked#?,CommandlineJava#31:\"Executing: \" + commandline.toString()" shape=ellipse]
24 [label="executeAsForked#?,CommandlineJava#31:\"Executing: \"
_execute#?,ExecuteStreamHandler#12:cmdl
execute#?#40:cmdl" shape=ellipse]
25 [label="executeAsForked#?,CommandlineJava#31:commandline.toString()" shape=ellipse]
26 [label="executeAsForked#?,CommandlineJava#31:MSG_VERBOSE
execute#?#15:MSG_VERBOSE
_execute#?,ExecuteStreamHandler#12:MSG_VERBOSE
execute#?#40:MSG_VERBOSE" shape=ellipse]
27 [label="executeAsForked#?,CommandlineJava#-1:MSG_VERBOSE
execute#?#-1:MSG_VERBOSE
_execute#?,ExecuteStreamHandler#-1:MSG_VERBOSE
execute#?#-1:MSG_VERBOSE" shape=ellipse]
28 [label="executeAsForked#?,CommandlineJava#31:getLogger().debug(\"Executing: \" + commandline.toString())
execute#?#15:getLogger().debug(cmdl.toString())
_execute#?,ExecuteStreamHandler#12:getLogger().debug(cmdl.toString())
execute#?#40:getLogger().debug(cmdl.toString())" shape=ellipse]
29 [label="execute#?#5:try \{
    Commandline cmdl = new Commandline();
    cmdl.setExecutable(new File(home, \"jpcovmerge\").getAbsolutePath());
    if (verbose) \{
        cmdl.createArgument().setValue(\"-v\");
    \}
    cmdl.createArgument().setValue(\"-jp_paramfile=\" + paramfile.getAbsolutePath());
    final Execute exe = new Execute();
    exe.setOutput(new LogOutputStream(this, Project.MSG_INFO));
    exe.setError(new LogOutputStream(this, Project.MSG_WARN));
    log(cmdl.toString(), MSG_VERBOSE);
    exe.setCommandline(cmdl.getCommandline());
    int exitValue = exe.execute();
    if (exitValue != 0) \{
        throw new TaskException((\"JProbe Coverage Merging failed (\" + exitValue) + \")\");
    \}
\} catch (IOException e) \{
    throw new TaskException(\"Failed to run JProbe Coverage Merge: \" + e);
\} finally \{
    paramfile.delete();
\}" shape=ellipse]
30 [label="execute#?#15:cmdl.toString()" shape=ellipse]
31 [label="execute#?#15:cmdl" shape=ellipse]
32 [label="execute#?#15:toString
_execute#?,ExecuteStreamHandler#12:toString
execute#?#40:toString" shape=ellipse]
33 [label="execute#?#15:toString()
_execute#?,ExecuteStreamHandler#12:toString()
execute#?#40:toString()" shape=ellipse]
34 [label="execute#?#11:cmdl.createArgument().setValue(\"-jp_paramfile=\" + paramfile.getAbsolutePath())" shape=ellipse]
35 [label="_execute#?,ExecuteStreamHandler#12:cmdl.toString()" shape=ellipse]
36 [label="execute#?#32:classpath.createPathElement().setPath(javaccHome.getAbsolutePath() + \"/JavaCC.zip\")" shape=ellipse]
37 [label="execute#?#36:arg.setValue(\"-Dinstall.root=\" + javaccHome.getAbsolutePath())" shape=ellipse]
38 [label="execute#?#20:String targetName = target.getName()" shape=ellipse]
39 [label="execute#?#21:final File javaFile = new File(outputDirectory, targetName.substring(0, targetName.indexOf(\".jjt\")) + \".jj\")" shape=ellipse]
40 [label="execute#?#23:if (javaFile.exists() && (target.lastModified() < javaFile.lastModified())) \{
    getLogger().info((\"Target is already built - skipping (\" + target) + \")\");
    return;
\}" shape=ellipse]
41 [label="execute#?#34:final Argument arg = cmdl.createVmArgument()" shape=ellipse]
42 [label="execute#?#15:if (!outputDirectory.isDirectory()) \{
    throw new TaskException((\"'outputdirectory' \" + outputDirectory) + \" is not a directory.\");
\}" shape=ellipse]
43 [label="execute#?#35:arg.setValue(\"-mx140M\")" shape=ellipse]
44 [label="execute#?#18:cmdl.createArgument().setValue(\"-OUTPUT_DIRECTORY:\" + outputDirectory.getAbsolutePath().replace('\\', '/'))" shape=ellipse]
45 [label="execute#?#27:cmdl.createArgument().setValue(target.getAbsolutePath())" shape=ellipse]
46 [label="execute#?#40:cmdl.toString()" shape=ellipse]
0 -> 28 [label="Action:4"];
1 -> 0 [label="Action:4"];
1 -> 16 [label="AST:4"];
1 -> 17 [label="AST:4"];
1 -> 20 [label="AST:4"];
1 -> 23 [label="AST:1"];
1 -> 26 [label="AST:4"];
1 -> 30 [label="AST:1"];
1 -> 35 [label="AST:1"];
1 -> 46 [label="AST:1"];
2 -> 1 [label="AST:4"];
2 -> 4 [label="AST:4"];
2 -> 5 [label="AST:4"];
2 -> 6 [label="AST:4"];
2 -> 7 [label="AST:4"];
2 -> 8 [label="AST:2"];
2 -> 9 [label="AST:4"];
2 -> 10 [label="AST:3"];
2 -> 11 [label="AST:3"];
2 -> 12 [label="AST:3"];
2 -> 13 [label="AST:4"];
2 -> 14 [label="AST:3"];
2 -> 15 [label="AST:3"];
2 -> 34 [label="AST:1"];
2 -> 36 [label="AST:1"];
2 -> 37 [label="AST:1"];
2 -> 38 [label="AST:1"];
2 -> 39 [label="AST:1"];
2 -> 40 [label="AST:1"];
2 -> 41 [label="AST:1"];
2 -> 42 [label="AST:1"];
2 -> 43 [label="AST:1"];
2 -> 44 [label="AST:1"];
2 -> 45 [label="AST:1"];
3 -> 2 [label="AST:3"];
17 -> 18 [label="AST:4"];
17 -> 19 [label="AST:4"];
20 -> 21 [label="AST:4"];
20 -> 22 [label="AST:4"];
23 -> 24 [label="AST:1"];
23 -> 25 [label="AST:1"];
26 -> 27 [label="AST:4"];
29 -> 2 [label="AST:1"];
30 -> 32 [label="AST:1"];
30 -> 31 [label="AST:1"];
30 -> 33 [label="AST:1"];
35 -> 32 [label="AST:1"];
35 -> 24 [label="AST:1"];
35 -> 33 [label="AST:1"];
46 -> 32 [label="AST:1"];
46 -> 24 [label="AST:1"];
46 -> 33 [label="AST:1"];
}