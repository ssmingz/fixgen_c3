digraph "execute#?" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@execute" shape=ellipse]
2 [label="2:CtTypeReferenceImpl@TaskException" shape=ellipse]
3 [label="3:CtExecutableReferenceImpl@checkOptions()" shape=ellipse]
4 [label="3:CtVirtualElement@checkOptions" shape=ellipse]
5 [label="3:CtInvocationImpl@checkOptions()" shape=ellipse]
6 [label="4:CtTypeReferenceImpl@File" shape=ellipse]
7 [label="4:CtExecutableReferenceImpl@createParamFile()" shape=ellipse]
8 [label="4:CtVirtualElement@createParamFile" shape=ellipse]
9 [label="4:CtInvocationImpl@createParamFile()" shape=ellipse]
10 [label="4:CtVirtualElement@paramfile" shape=ellipse]
11 [label="4:CtLocalVariableImpl@File paramfile = createParamFile()" shape=ellipse]
12 [label="6:CtTypeReferenceImpl@Commandline" shape=ellipse]
13 [label="6:CtTypeReferenceImpl@Commandline" shape=ellipse]
14 [label="6:CtConstructorCallImpl@new Commandline()" shape=ellipse]
15 [label="6:CtVirtualElement@cmdl" shape=ellipse]
16 [label="6:CtLocalVariableImpl@Commandline cmdl = new Commandline()" shape=ellipse]
17 [label="7:CtExecutableReferenceImpl@setExecutable()" shape=ellipse]
18 [label="7:CtVirtualElement@setExecutable" shape=ellipse]
19 [label="7:CtVariableReadImpl@cmdl" shape=ellipse]
20 [label="7:CtExecutableReferenceImpl@getAbsolutePath()" shape=ellipse]
21 [label="7:CtVirtualElement@getAbsolutePath" shape=ellipse]
22 [label="7:CtTypeReferenceImpl@File" shape=ellipse]
23 [label="7:CtFieldReadImpl@home" shape=ellipse]
24 [label="7:CtLiteralImpl@\"jpcovmerge\"" shape=ellipse]
25 [label="7:CtConstructorCallImpl@new File(home, \"jpcovmerge\")" shape=ellipse]
26 [label="7:CtInvocationImpl@new File(home, \"jpcovmerge\").getAbsolutePath()" shape=ellipse]
27 [label="7:CtInvocationImpl@cmdl.setExecutable(new File(home, \"jpcovmerge\").getAbsolutePath())" shape=ellipse]
28 [label="8:CtFieldReadImpl@verbose" shape=ellipse]
29 [label="9:CtExecutableReferenceImpl@setValue(java.lang.String)" shape=ellipse]
30 [label="9:CtVirtualElement@setValue" shape=ellipse]
31 [label="9:CtExecutableReferenceImpl@createArgument()" shape=ellipse]
32 [label="9:CtVirtualElement@createArgument" shape=ellipse]
33 [label="9:CtVariableReadImpl@cmdl" shape=ellipse]
34 [label="9:CtInvocationImpl@cmdl.createArgument()" shape=ellipse]
35 [label="9:CtLiteralImpl@\"-v\"" shape=ellipse]
36 [label="9:CtInvocationImpl@cmdl.createArgument().setValue(\"-v\")" shape=ellipse]
37 [label="8:CtBlockImpl@\{
    cmdl.createArgument().setValue(\"-v\");
\}" shape=ellipse]
38 [label="8:CtIfImpl@if (verbose) \{
    cmdl.createArgument().setValue(\"-v\");
\}" shape=ellipse]
39 [label="11:CtExecutableReferenceImpl@setValue()" shape=ellipse]
40 [label="11:CtVirtualElement@setValue" shape=ellipse]
41 [label="11:CtExecutableReferenceImpl@createArgument()" shape=ellipse]
42 [label="11:CtVirtualElement@createArgument" shape=ellipse]
43 [label="11:CtVariableReadImpl@cmdl" shape=ellipse]
44 [label="11:CtInvocationImpl@cmdl.createArgument()" shape=ellipse]
45 [label="11:CtLiteralImpl@\"-jp_paramfile=\"" shape=ellipse]
46 [label="11:CtExecutableReferenceImpl@getAbsolutePath()" shape=ellipse]
47 [label="11:CtVirtualElement@getAbsolutePath" shape=ellipse]
48 [label="11:CtVariableReadImpl@paramfile" shape=ellipse]
49 [label="11:CtInvocationImpl@paramfile.getAbsolutePath()" shape=ellipse]
50 [label="11:CtBinaryOperatorImpl@\"-jp_paramfile=\" + paramfile.getAbsolutePath()" shape=ellipse]
51 [label="11:CtInvocationImpl@cmdl.createArgument().setValue(\"-jp_paramfile=\" + paramfile.getAbsolutePath())" shape=ellipse]
52 [label="12:CtTypeReferenceImpl@Execute" shape=ellipse]
53 [label="12:CtTypeReferenceImpl@Execute" shape=ellipse]
54 [label="12:CtConstructorCallImpl@new Execute()" shape=ellipse]
55 [label="12:CtVirtualElement@exe" shape=ellipse]
56 [label="12:CtLocalVariableImpl@final Execute exe = new Execute()" shape=ellipse]
57 [label="13:CtExecutableReferenceImpl@setOutput(LogOutputStream)" shape=ellipse]
58 [label="13:CtVirtualElement@setOutput" shape=ellipse]
59 [label="13:CtVariableReadImpl@exe" shape=ellipse]
60 [label="13:CtTypeReferenceImpl@LogOutputStream" shape=ellipse]
61 [label="13:CtThisAccessImpl@this" shape=ellipse]
62 [label="13:CtFieldReadImpl@Project.MSG_INFO" shape=ellipse]
63 [label="13:CtConstructorCallImpl@new LogOutputStream(this, Project.MSG_INFO)" shape=ellipse]
64 [label="13:CtInvocationImpl@exe.setOutput(new LogOutputStream(this, Project.MSG_INFO))" shape=ellipse]
65 [label="14:CtExecutableReferenceImpl@setError(LogOutputStream)" shape=ellipse]
66 [label="14:CtVirtualElement@setError" shape=ellipse]
67 [label="14:CtVariableReadImpl@exe" shape=ellipse]
68 [label="14:CtTypeReferenceImpl@LogOutputStream" shape=ellipse]
69 [label="14:CtThisAccessImpl@this" shape=ellipse]
70 [label="14:CtFieldReadImpl@Project.MSG_WARN" shape=ellipse]
71 [label="14:CtConstructorCallImpl@new LogOutputStream(this, Project.MSG_WARN)" shape=ellipse]
72 [label="14:CtInvocationImpl@exe.setError(new LogOutputStream(this, Project.MSG_WARN))" shape=ellipse]
73 [label="15:CtExecutableReferenceImpl@log(<unknown>,<unknown>)" shape=ellipse]
74 [label="15:CtVirtualElement@log" shape=ellipse]
75 [label="15:CtExecutableReferenceImpl@toString()" shape=ellipse]
76 [label="15:CtVirtualElement@toString" shape=ellipse]
77 [label="15:CtVariableReadImpl@cmdl" shape=ellipse]
78 [label="15:CtInvocationImpl@cmdl.toString()" shape=ellipse]
79 [label="15:CtTypeAccessImpl@MSG_VERBOSE" shape=ellipse]
80 [label="15:CtInvocationImpl@log(cmdl.toString(), MSG_VERBOSE)" shape=ellipse]
81 [label="16:CtExecutableReferenceImpl@setCommandline()" shape=ellipse]
82 [label="16:CtVirtualElement@setCommandline" shape=ellipse]
83 [label="16:CtVariableReadImpl@exe" shape=ellipse]
84 [label="16:CtExecutableReferenceImpl@getCommandline()" shape=ellipse]
85 [label="16:CtVirtualElement@getCommandline" shape=ellipse]
86 [label="16:CtVariableReadImpl@cmdl" shape=ellipse]
87 [label="16:CtInvocationImpl@cmdl.getCommandline()" shape=ellipse]
88 [label="16:CtInvocationImpl@exe.setCommandline(cmdl.getCommandline())" shape=ellipse]
89 [label="17:CtTypeReferenceImpl@int" shape=ellipse]
90 [label="17:CtExecutableReferenceImpl@execute()" shape=ellipse]
91 [label="17:CtVirtualElement@execute" shape=ellipse]
92 [label="17:CtVariableReadImpl@exe" shape=ellipse]
93 [label="17:CtInvocationImpl@exe.execute()" shape=ellipse]
94 [label="17:CtVirtualElement@exitValue" shape=ellipse]
95 [label="17:CtLocalVariableImpl@int exitValue = exe.execute()" shape=ellipse]
96 [label="18:CtVariableReadImpl@exitValue" shape=ellipse]
97 [label="18:CtLiteralImpl@0" shape=ellipse]
98 [label="18:CtBinaryOperatorImpl@exitValue != 0" shape=ellipse]
99 [label="19:CtTypeReferenceImpl@TaskException" shape=ellipse]
100 [label="19:CtLiteralImpl@\"JProbe Coverage Merging failed (\"" shape=ellipse]
101 [label="19:CtVariableReadImpl@exitValue" shape=ellipse]
102 [label="19:CtBinaryOperatorImpl@(\"JProbe Coverage Merging failed (\" + exitValue)" shape=ellipse]
103 [label="19:CtLiteralImpl@\")\"" shape=ellipse]
104 [label="19:CtBinaryOperatorImpl@(\"JProbe Coverage Merging failed (\" + exitValue) + \")\"" shape=ellipse]
105 [label="19:CtConstructorCallImpl@new TaskException((\"JProbe Coverage Merging failed (\" + exitValue) + \")\")" shape=ellipse]
106 [label="19:CtThrowImpl@throw new TaskException((\"JProbe Coverage Merging failed (\" + exitValue) + \")\")" shape=ellipse]
107 [label="18:CtBlockImpl@\{
    throw new TaskException((\"JProbe Coverage Merging failed (\" + exitValue) + \")\");
\}" shape=ellipse]
108 [label="18:CtIfImpl@if (exitValue != 0) \{
    throw new TaskException((\"JProbe Coverage Merging failed (\" + exitValue) + \")\");
\}" shape=ellipse]
109 [label="5:CtBlockImpl@\{
    Commandline cmdl = new Commandline();
    cmdl.setExecutable(new File(home, \"jpcovmerge\").getAbsolutePath());
    if (verbose) \{
        cmdl.createArgument().setValue(\"-v\");
    \}
    cmdl.createArgument().setValue(\"-jp_paramfile=\" + paramfile.getAbsolutePath());
    final Execute exe = new Execute();
    exe.setOutput(new LogOutputStream(this, Project.MSG_INFO));
    exe.setError(new LogOutputStream(this, Project.MSG_WARN));
    log(cmdl.toString(), MSG_VERBOSE);
    exe.setCommandline(cmdl.getCommandline());
    int exitValue = exe.execute();
    if (exitValue != 0) \{
        throw new TaskException((\"JProbe Coverage Merging failed (\" + exitValue) + \")\");
    \}
\}" shape=ellipse]
110 [label="21:CtVirtualElement@e" shape=ellipse]
111 [label="21:CtTypeReferenceImpl@IOException" shape=ellipse]
112 [label="21:CtCatchVariableImpl@IOException e" shape=ellipse]
113 [label="22:CtTypeReferenceImpl@TaskException" shape=ellipse]
114 [label="22:CtLiteralImpl@\"Failed to run JProbe Coverage Merge: \"" shape=ellipse]
115 [label="22:CtVariableReadImpl@e" shape=ellipse]
116 [label="22:CtBinaryOperatorImpl@\"Failed to run JProbe Coverage Merge: \" + e" shape=ellipse]
117 [label="22:CtConstructorCallImpl@new TaskException(\"Failed to run JProbe Coverage Merge: \" + e)" shape=ellipse]
118 [label="22:CtThrowImpl@throw new TaskException(\"Failed to run JProbe Coverage Merge: \" + e)" shape=ellipse]
119 [label="21:CtBlockImpl@\{
    throw new TaskException(\"Failed to run JProbe Coverage Merge: \" + e);
\}" shape=ellipse]
120 [label="21:CtCatchImpl@ catch (IOException e) \{
    throw new TaskException(\"Failed to run JProbe Coverage Merge: \" + e);
\}" shape=ellipse]
121 [label="24:CtExecutableReferenceImpl@delete()" shape=ellipse]
122 [label="24:CtVirtualElement@delete" shape=ellipse]
123 [label="24:CtVariableReadImpl@paramfile" shape=ellipse]
124 [label="24:CtInvocationImpl@paramfile.delete()" shape=ellipse]
125 [label="23:CtBlockImpl@\{
    paramfile.delete();
\}" shape=ellipse]
126 [label="5:CtTryImpl@try \{
    Commandline cmdl = new Commandline();
    cmdl.setExecutable(new File(home, \"jpcovmerge\").getAbsolutePath());
    if (verbose) \{
        cmdl.createArgument().setValue(\"-v\");
    \}
    cmdl.createArgument().setValue(\"-jp_paramfile=\" + paramfile.getAbsolutePath());
    final Execute exe = new Execute();
    exe.setOutput(new LogOutputStream(this, Project.MSG_INFO));
    exe.setError(new LogOutputStream(this, Project.MSG_WARN));
    log(cmdl.toString(), MSG_VERBOSE);
    exe.setCommandline(cmdl.getCommandline());
    int exitValue = exe.execute();
    if (exitValue != 0) \{
        throw new TaskException((\"JProbe Coverage Merging failed (\" + exitValue) + \")\");
    \}
\} catch (IOException e) \{
    throw new TaskException(\"Failed to run JProbe Coverage Merge: \" + e);
\} finally \{
    paramfile.delete();
\}" shape=ellipse]
127 [label="2:CtBlockImpl@\{
    checkOptions();
    File paramfile = createParamFile();
    try \{
        Commandline cmdl = new Commandline();
        cmdl.setExecutable(new File(home, \"jpcovmerge\").getAbsolutePath());
        if (verbose) \{
            cmdl.createArgument().setValue(\"-v\");
        \}
        cmdl.createArgument().setValue(\"-jp_paramfile=\" + paramfile.getAbsolutePath());
        final Execute exe = new Execute();
        exe.setOutput(new LogOutputStream(this, Project.MSG_INFO));
        exe.setError(new LogOutputStream(this, Project.MSG_WARN));
        log(cmdl.toString(), MSG_VERBOSE);
        exe.setCommandline(cmdl.getCommandline());
        int exitValue = exe.execute();
        if (exitValue != 0) \{
            throw new TaskException((\"JProbe Coverage Merging failed (\" + exitValue) + \")\");
        \}
    \} catch (IOException e) \{
        throw new TaskException(\"Failed to run JProbe Coverage Merge: \" + e);
    \} finally \{
        paramfile.delete();
    \}
\}" shape=ellipse]
128 [label="2:CtMethodImpl@public void execute() throws TaskException \{
    checkOptions();
    File paramfile = createParamFile();
    try \{
        Commandline cmdl = new Commandline();
        cmdl.setExecutable(new File(home, \"jpcovmerge\").getAbsolutePath());
        if (verbose) \{
            cmdl.createArgument().setValue(\"-v\");
        \}
        cmdl.createArgument().setValue(\"-jp_paramfile=\" + paramfile.getAbsolutePath());
        final Execute exe = new Execute();
        exe.setOutput(new LogOutputStream(this, Project.MSG_INFO));
        exe.setError(new LogOutputStream(this, Project.MSG_WARN));
        log(cmdl.toString(), MSG_VERBOSE);
        exe.setCommandline(cmdl.getCommandline());
        int exitValue = exe.execute();
        if (exitValue != 0) \{
            throw new TaskException((\"JProbe Coverage Merging failed (\" + exitValue) + \")\");
        \}
    \} catch (IOException e) \{
        throw new TaskException(\"Failed to run JProbe Coverage Merge: \" + e);
    \} finally \{
        paramfile.delete();
    \}
\}" shape=ellipse]
129 [label="15:Update@UPDATE" shape=ellipse]
130 [label="15:CtInvocationImpl@getLogger().debug(cmdl.toString())" shape=ellipse]
5 -> 4 [label="AST"];
5 -> 3 [label="AST"];
9 -> 8 [label="AST"];
9 -> 7 [label="AST"];
10 -> 48 [label="Define-Use"];
10 -> 123 [label="Define-Use"];
11 -> 10 [label="AST"];
11 -> 6 [label="AST"];
11 -> 9 [label="AST"];
15 -> 19 [label="Define-Use"];
15 -> 33 [label="Define-Use"];
15 -> 43 [label="Define-Use"];
15 -> 77 [label="Define-Use"];
15 -> 86 [label="Define-Use"];
16 -> 15 [label="AST"];
16 -> 12 [label="AST"];
16 -> 14 [label="AST"];
25 -> 23 [label="AST"];
25 -> 24 [label="AST"];
26 -> 21 [label="AST"];
26 -> 25 [label="AST"];
26 -> 20 [label="AST"];
27 -> 18 [label="AST"];
27 -> 19 [label="AST"];
27 -> 17 [label="AST"];
27 -> 26 [label="AST"];
28 -> 37 [label="Control Dep"];
28 -> 36 [label="Control Dep"];
28 -> 29 [label="Control Dep"];
28 -> 34 [label="Control Dep"];
28 -> 31 [label="Control Dep"];
28 -> 33 [label="Control Dep"];
28 -> 35 [label="Control Dep"];
34 -> 32 [label="AST"];
34 -> 33 [label="AST"];
34 -> 31 [label="AST"];
36 -> 30 [label="AST"];
36 -> 34 [label="AST"];
36 -> 29 [label="AST"];
36 -> 35 [label="AST"];
37 -> 36 [label="AST"];
38 -> 28 [label="AST"];
38 -> 37 [label="AST"];
44 -> 42 [label="AST"];
44 -> 43 [label="AST"];
44 -> 41 [label="AST"];
49 -> 47 [label="AST"];
49 -> 48 [label="AST"];
49 -> 46 [label="AST"];
50 -> 45 [label="AST"];
50 -> 49 [label="AST"];
51 -> 40 [label="AST"];
51 -> 44 [label="AST"];
51 -> 39 [label="AST"];
51 -> 50 [label="AST"];
55 -> 59 [label="Define-Use"];
55 -> 67 [label="Define-Use"];
55 -> 83 [label="Define-Use"];
55 -> 92 [label="Define-Use"];
56 -> 55 [label="AST"];
56 -> 52 [label="AST"];
56 -> 54 [label="AST"];
63 -> 61 [label="AST"];
63 -> 62 [label="AST"];
64 -> 58 [label="AST"];
64 -> 59 [label="AST"];
64 -> 57 [label="AST"];
64 -> 63 [label="AST"];
71 -> 69 [label="AST"];
71 -> 70 [label="AST"];
72 -> 66 [label="AST"];
72 -> 67 [label="AST"];
72 -> 65 [label="AST"];
72 -> 71 [label="AST"];
78 -> 76 [label="AST"];
78 -> 77 [label="AST"];
78 -> 75 [label="AST"];
80 -> 74 [label="AST"];
80 -> 73 [label="AST"];
80 -> 78 [label="AST"];
80 -> 79 [label="AST"];
80 -> 129 [label="Action"];
87 -> 85 [label="AST"];
87 -> 86 [label="AST"];
87 -> 84 [label="AST"];
88 -> 82 [label="AST"];
88 -> 83 [label="AST"];
88 -> 81 [label="AST"];
88 -> 87 [label="AST"];
92 -> 94 [label="Data Dep"];
93 -> 91 [label="AST"];
93 -> 92 [label="AST"];
93 -> 90 [label="AST"];
94 -> 96 [label="Define-Use"];
94 -> 101 [label="Define-Use"];
95 -> 94 [label="AST"];
95 -> 89 [label="AST"];
95 -> 93 [label="AST"];
98 -> 96 [label="AST"];
98 -> 97 [label="AST"];
98 -> 107 [label="Control Dep"];
98 -> 106 [label="Control Dep"];
98 -> 105 [label="Control Dep"];
98 -> 104 [label="Control Dep"];
98 -> 102 [label="Control Dep"];
98 -> 100 [label="Control Dep"];
98 -> 101 [label="Control Dep"];
98 -> 103 [label="Control Dep"];
102 -> 100 [label="AST"];
102 -> 101 [label="AST"];
104 -> 102 [label="AST"];
104 -> 103 [label="AST"];
105 -> 104 [label="AST"];
106 -> 105 [label="AST"];
107 -> 106 [label="AST"];
108 -> 98 [label="AST"];
108 -> 107 [label="AST"];
109 -> 16 [label="AST"];
109 -> 27 [label="AST"];
109 -> 38 [label="AST"];
109 -> 51 [label="AST"];
109 -> 56 [label="AST"];
109 -> 64 [label="AST"];
109 -> 72 [label="AST"];
109 -> 80 [label="AST"];
109 -> 88 [label="AST"];
109 -> 95 [label="AST"];
109 -> 108 [label="AST"];
110 -> 115 [label="Define-Use"];
112 -> 110 [label="AST"];
112 -> 111 [label="AST"];
112 -> 119 [label="Control Dep"];
112 -> 118 [label="Control Dep"];
112 -> 117 [label="Control Dep"];
112 -> 116 [label="Control Dep"];
112 -> 114 [label="Control Dep"];
112 -> 115 [label="Control Dep"];
116 -> 114 [label="AST"];
116 -> 115 [label="AST"];
117 -> 116 [label="AST"];
118 -> 117 [label="AST"];
119 -> 118 [label="AST"];
120 -> 112 [label="AST"];
120 -> 119 [label="AST"];
124 -> 122 [label="AST"];
124 -> 123 [label="AST"];
124 -> 121 [label="AST"];
125 -> 124 [label="AST"];
126 -> 109 [label="AST"];
126 -> 120 [label="AST"];
126 -> 125 [label="AST"];
127 -> 5 [label="AST"];
127 -> 11 [label="AST"];
127 -> 126 [label="AST"];
128 -> 1 [label="AST"];
128 -> 0 [label="AST"];
128 -> 2 [label="AST"];
128 -> 127 [label="AST"];
129 -> 130 [label="Action"];
}