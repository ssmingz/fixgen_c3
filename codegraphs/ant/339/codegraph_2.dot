digraph "execute#?" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@execute" shape=ellipse]
2 [label="2:CtTypeReferenceImpl@TaskException" shape=ellipse]
3 [label="3:CtTypeReferenceImpl@Enumeration" shape=ellipse]
4 [label="3:CtExecutableReferenceImpl@keys()" shape=ellipse]
5 [label="3:CtVirtualElement@keys" shape=ellipse]
6 [label="3:CtFieldReadImpl@optionalAttrs" shape=ellipse]
7 [label="3:CtInvocationImpl@optionalAttrs.keys()" shape=ellipse]
8 [label="3:CtVirtualElement@iter" shape=ellipse]
9 [label="3:CtLocalVariableImpl@Enumeration iter = optionalAttrs.keys()" shape=ellipse]
10 [label="4:CtExecutableReferenceImpl@hasMoreElements()" shape=ellipse]
11 [label="4:CtVirtualElement@hasMoreElements" shape=ellipse]
12 [label="4:CtVariableReadImpl@iter" shape=ellipse]
13 [label="4:CtInvocationImpl@iter.hasMoreElements()" shape=ellipse]
14 [label="5:CtTypeReferenceImpl@String" shape=ellipse]
15 [label="5:CtExecutableReferenceImpl@nextElement()" shape=ellipse]
16 [label="5:CtVirtualElement@nextElement" shape=ellipse]
17 [label="5:CtVariableReadImpl@iter" shape=ellipse]
18 [label="5:CtInvocationImpl@((String) (iter.nextElement()))" shape=ellipse]
19 [label="5:CtTypeReferenceImpl@String" shape=ellipse]
20 [label="5:CtVirtualElement@name" shape=ellipse]
21 [label="5:CtLocalVariableImpl@String name = ((String) (iter.nextElement()))" shape=ellipse]
22 [label="6:CtTypeReferenceImpl@Object" shape=ellipse]
23 [label="6:CtExecutableReferenceImpl@get(java.lang.String)" shape=ellipse]
24 [label="6:CtVirtualElement@get" shape=ellipse]
25 [label="6:CtFieldReadImpl@optionalAttrs" shape=ellipse]
26 [label="6:CtVariableReadImpl@name" shape=ellipse]
27 [label="6:CtInvocationImpl@optionalAttrs.get(name)" shape=ellipse]
28 [label="6:CtVirtualElement@value" shape=ellipse]
29 [label="6:CtLocalVariableImpl@Object value = optionalAttrs.get(name)" shape=ellipse]
30 [label="7:CtExecutableReferenceImpl@setValue(java.lang.String)" shape=ellipse]
31 [label="7:CtVirtualElement@setValue" shape=ellipse]
32 [label="7:CtExecutableReferenceImpl@createArgument()" shape=ellipse]
33 [label="7:CtVirtualElement@createArgument" shape=ellipse]
34 [label="7:CtFieldReadImpl@cmdl" shape=ellipse]
35 [label="7:CtInvocationImpl@cmdl.createArgument()" shape=ellipse]
36 [label="7:CtLiteralImpl@\"-\"" shape=ellipse]
37 [label="7:CtVariableReadImpl@name" shape=ellipse]
38 [label="7:CtBinaryOperatorImpl@(\"-\" + name)" shape=ellipse]
39 [label="7:CtLiteralImpl@\":\"" shape=ellipse]
40 [label="7:CtBinaryOperatorImpl@((\"-\" + name) + \":\")" shape=ellipse]
41 [label="7:CtExecutableReferenceImpl@toString()" shape=ellipse]
42 [label="7:CtVirtualElement@toString" shape=ellipse]
43 [label="7:CtVariableReadImpl@value" shape=ellipse]
44 [label="7:CtInvocationImpl@value.toString()" shape=ellipse]
45 [label="7:CtBinaryOperatorImpl@((\"-\" + name) + \":\") + value.toString()" shape=ellipse]
46 [label="7:CtInvocationImpl@cmdl.createArgument().setValue(((\"-\" + name) + \":\") + value.toString())" shape=ellipse]
47 [label="4:CtBlockImpl@\{
    String name = ((String) (iter.nextElement()));
    Object value = optionalAttrs.get(name);
    cmdl.createArgument().setValue(((\"-\" + name) + \":\") + value.toString());
\}" shape=ellipse]
48 [label="4:CtWhileImpl@while (iter.hasMoreElements()) \{
    String name = ((String) (iter.nextElement()));
    Object value = optionalAttrs.get(name);
    cmdl.createArgument().setValue(((\"-\" + name) + \":\") + value.toString());
\} " shape=ellipse]
49 [label="9:CtFieldReadImpl@target" shape=ellipse]
50 [label="9:CtLiteralImpl@null" shape=ellipse]
51 [label="9:CtBinaryOperatorImpl@(target == null)" shape=ellipse]
52 [label="9:CtExecutableReferenceImpl@isFile()" shape=ellipse]
53 [label="9:CtVirtualElement@isFile" shape=ellipse]
54 [label="9:CtFieldReadImpl@target" shape=ellipse]
55 [label="9:CtInvocationImpl@target.isFile()" shape=ellipse]
56 [label="9:CtUnaryOperatorImpl@(!target.isFile())" shape=ellipse]
57 [label="9:CtBinaryOperatorImpl@(target == null) || (!target.isFile())" shape=ellipse]
58 [label="10:CtTypeReferenceImpl@TaskException" shape=ellipse]
59 [label="10:CtLiteralImpl@\"Invalid target: \"" shape=ellipse]
60 [label="10:CtFieldReadImpl@target" shape=ellipse]
61 [label="10:CtBinaryOperatorImpl@\"Invalid target: \" + target" shape=ellipse]
62 [label="10:CtConstructorCallImpl@new TaskException(\"Invalid target: \" + target)" shape=ellipse]
63 [label="10:CtThrowImpl@throw new TaskException(\"Invalid target: \" + target)" shape=ellipse]
64 [label="9:CtBlockImpl@\{
    throw new TaskException(\"Invalid target: \" + target);
\}" shape=ellipse]
65 [label="9:CtIfImpl@if ((target == null) || (!target.isFile())) \{
    throw new TaskException(\"Invalid target: \" + target);
\}" shape=ellipse]
66 [label="12:CtFieldReadImpl@outputDirectory" shape=ellipse]
67 [label="12:CtLiteralImpl@null" shape=ellipse]
68 [label="12:CtBinaryOperatorImpl@outputDirectory == null" shape=ellipse]
69 [label="13:CtFieldWriteImpl@outputDirectory" shape=ellipse]
70 [label="13:CtTypeReferenceImpl@File" shape=ellipse]
71 [label="13:CtExecutableReferenceImpl@getParent()" shape=ellipse]
72 [label="13:CtVirtualElement@getParent" shape=ellipse]
73 [label="13:CtFieldReadImpl@target" shape=ellipse]
74 [label="13:CtInvocationImpl@target.getParent()" shape=ellipse]
75 [label="13:CtConstructorCallImpl@new File(target.getParent())" shape=ellipse]
76 [label="13:CtAssignmentImpl@outputDirectory = new File(target.getParent())" shape=ellipse]
77 [label="12:CtBlockImpl@\{
    outputDirectory = new File(target.getParent());
\}" shape=ellipse]
78 [label="12:CtIfImpl@if (outputDirectory == null) \{
    outputDirectory = new File(target.getParent());
\}" shape=ellipse]
79 [label="15:CtExecutableReferenceImpl@isDirectory()" shape=ellipse]
80 [label="15:CtVirtualElement@isDirectory" shape=ellipse]
81 [label="15:CtFieldReadImpl@outputDirectory" shape=ellipse]
82 [label="15:CtInvocationImpl@outputDirectory.isDirectory()" shape=ellipse]
83 [label="15:CtUnaryOperatorImpl@!outputDirectory.isDirectory()" shape=ellipse]
84 [label="16:CtTypeReferenceImpl@TaskException" shape=ellipse]
85 [label="16:CtLiteralImpl@\"'outputdirectory' \"" shape=ellipse]
86 [label="16:CtFieldReadImpl@outputDirectory" shape=ellipse]
87 [label="16:CtBinaryOperatorImpl@(\"'outputdirectory' \" + outputDirectory)" shape=ellipse]
88 [label="16:CtLiteralImpl@\" is not a directory.\"" shape=ellipse]
89 [label="16:CtBinaryOperatorImpl@(\"'outputdirectory' \" + outputDirectory) + \" is not a directory.\"" shape=ellipse]
90 [label="16:CtConstructorCallImpl@new TaskException((\"'outputdirectory' \" + outputDirectory) + \" is not a directory.\")" shape=ellipse]
91 [label="16:CtThrowImpl@throw new TaskException((\"'outputdirectory' \" + outputDirectory) + \" is not a directory.\")" shape=ellipse]
92 [label="15:CtBlockImpl@\{
    throw new TaskException((\"'outputdirectory' \" + outputDirectory) + \" is not a directory.\");
\}" shape=ellipse]
93 [label="15:CtIfImpl@if (!outputDirectory.isDirectory()) \{
    throw new TaskException((\"'outputdirectory' \" + outputDirectory) + \" is not a directory.\");
\}" shape=ellipse]
94 [label="19:CtExecutableReferenceImpl@setValue()" shape=ellipse]
95 [label="18:CtVirtualElement@setValue" shape=ellipse]
96 [label="18:CtExecutableReferenceImpl@createArgument()" shape=ellipse]
97 [label="18:CtVirtualElement@createArgument" shape=ellipse]
98 [label="18:CtFieldReadImpl@cmdl" shape=ellipse]
99 [label="18:CtInvocationImpl@cmdl.createArgument()" shape=ellipse]
100 [label="19:CtLiteralImpl@\"-OUTPUT_DIRECTORY:\"" shape=ellipse]
101 [label="19:CtExecutableReferenceImpl@replace(char,char)" shape=ellipse]
102 [label="19:CtVirtualElement@replace" shape=ellipse]
103 [label="19:CtExecutableReferenceImpl@getAbsolutePath()" shape=ellipse]
104 [label="19:CtVirtualElement@getAbsolutePath" shape=ellipse]
105 [label="19:CtFieldReadImpl@outputDirectory" shape=ellipse]
106 [label="19:CtInvocationImpl@outputDirectory.getAbsolutePath()" shape=ellipse]
107 [label="19:CtLiteralImpl@'\\'" shape=ellipse]
108 [label="19:CtLiteralImpl@'/'" shape=ellipse]
109 [label="19:CtInvocationImpl@outputDirectory.getAbsolutePath().replace('\\', '/')" shape=ellipse]
110 [label="19:CtBinaryOperatorImpl@\"-OUTPUT_DIRECTORY:\" + outputDirectory.getAbsolutePath().replace('\\', '/')" shape=ellipse]
111 [label="18:CtInvocationImpl@cmdl.createArgument().setValue(\"-OUTPUT_DIRECTORY:\" + outputDirectory.getAbsolutePath().replace('\\', '/'))" shape=ellipse]
112 [label="20:CtTypeReferenceImpl@String" shape=ellipse]
113 [label="20:CtExecutableReferenceImpl@getName()" shape=ellipse]
114 [label="20:CtVirtualElement@getName" shape=ellipse]
115 [label="20:CtFieldReadImpl@target" shape=ellipse]
116 [label="20:CtInvocationImpl@target.getName()" shape=ellipse]
117 [label="20:CtVirtualElement@targetName" shape=ellipse]
118 [label="20:CtLocalVariableImpl@String targetName = target.getName()" shape=ellipse]
119 [label="21:CtTypeReferenceImpl@File" shape=ellipse]
120 [label="22:CtTypeReferenceImpl@File" shape=ellipse]
121 [label="22:CtFieldReadImpl@outputDirectory" shape=ellipse]
122 [label="22:CtExecutableReferenceImpl@substring(int,int)" shape=ellipse]
123 [label="22:CtVirtualElement@substring" shape=ellipse]
124 [label="22:CtVariableReadImpl@targetName" shape=ellipse]
125 [label="22:CtLiteralImpl@0" shape=ellipse]
126 [label="22:CtExecutableReferenceImpl@indexOf(java.lang.String)" shape=ellipse]
127 [label="22:CtVirtualElement@indexOf" shape=ellipse]
128 [label="22:CtVariableReadImpl@targetName" shape=ellipse]
129 [label="22:CtLiteralImpl@\".jjt\"" shape=ellipse]
130 [label="22:CtInvocationImpl@targetName.indexOf(\".jjt\")" shape=ellipse]
131 [label="22:CtInvocationImpl@targetName.substring(0, targetName.indexOf(\".jjt\"))" shape=ellipse]
132 [label="22:CtLiteralImpl@\".jj\"" shape=ellipse]
133 [label="22:CtBinaryOperatorImpl@targetName.substring(0, targetName.indexOf(\".jjt\")) + \".jj\"" shape=ellipse]
134 [label="22:CtConstructorCallImpl@new File(outputDirectory, targetName.substring(0, targetName.indexOf(\".jjt\")) + \".jj\")" shape=ellipse]
135 [label="21:CtVirtualElement@javaFile" shape=ellipse]
136 [label="21:CtLocalVariableImpl@final File javaFile = new File(outputDirectory, targetName.substring(0, targetName.indexOf(\".jjt\")) + \".jj\")" shape=ellipse]
137 [label="23:CtExecutableReferenceImpl@exists()" shape=ellipse]
138 [label="23:CtVirtualElement@exists" shape=ellipse]
139 [label="23:CtVariableReadImpl@javaFile" shape=ellipse]
140 [label="23:CtInvocationImpl@javaFile.exists()" shape=ellipse]
141 [label="23:CtExecutableReferenceImpl@lastModified()" shape=ellipse]
142 [label="23:CtVirtualElement@lastModified" shape=ellipse]
143 [label="23:CtFieldReadImpl@target" shape=ellipse]
144 [label="23:CtInvocationImpl@target.lastModified()" shape=ellipse]
145 [label="23:CtExecutableReferenceImpl@lastModified()" shape=ellipse]
146 [label="23:CtVirtualElement@lastModified" shape=ellipse]
147 [label="23:CtVariableReadImpl@javaFile" shape=ellipse]
148 [label="23:CtInvocationImpl@javaFile.lastModified()" shape=ellipse]
149 [label="23:CtBinaryOperatorImpl@(target.lastModified() < javaFile.lastModified())" shape=ellipse]
150 [label="23:CtBinaryOperatorImpl@javaFile.exists() && (target.lastModified() < javaFile.lastModified())" shape=ellipse]
151 [label="24:CtExecutableReferenceImpl@info()" shape=ellipse]
152 [label="24:CtVirtualElement@info" shape=ellipse]
153 [label="24:CtExecutableReferenceImpl@getLogger()" shape=ellipse]
154 [label="24:CtVirtualElement@getLogger" shape=ellipse]
155 [label="24:CtInvocationImpl@getLogger()" shape=ellipse]
156 [label="24:CtLiteralImpl@\"Target is already built - skipping (\"" shape=ellipse]
157 [label="24:CtFieldReadImpl@target" shape=ellipse]
158 [label="24:CtBinaryOperatorImpl@(\"Target is already built - skipping (\" + target)" shape=ellipse]
159 [label="24:CtLiteralImpl@\")\"" shape=ellipse]
160 [label="24:CtBinaryOperatorImpl@(\"Target is already built - skipping (\" + target) + \")\"" shape=ellipse]
161 [label="24:CtInvocationImpl@getLogger().info((\"Target is already built - skipping (\" + target) + \")\")" shape=ellipse]
162 [label="25:CtReturnImpl@return" shape=ellipse]
163 [label="23:CtBlockImpl@\{
    getLogger().info((\"Target is already built - skipping (\" + target) + \")\");
    return;
\}" shape=ellipse]
164 [label="23:CtIfImpl@if (javaFile.exists() && (target.lastModified() < javaFile.lastModified())) \{
    getLogger().info((\"Target is already built - skipping (\" + target) + \")\");
    return;
\}" shape=ellipse]
165 [label="27:CtExecutableReferenceImpl@setValue()" shape=ellipse]
166 [label="27:CtVirtualElement@setValue" shape=ellipse]
167 [label="27:CtExecutableReferenceImpl@createArgument()" shape=ellipse]
168 [label="27:CtVirtualElement@createArgument" shape=ellipse]
169 [label="27:CtFieldReadImpl@cmdl" shape=ellipse]
170 [label="27:CtInvocationImpl@cmdl.createArgument()" shape=ellipse]
171 [label="27:CtExecutableReferenceImpl@getAbsolutePath()" shape=ellipse]
172 [label="27:CtVirtualElement@getAbsolutePath" shape=ellipse]
173 [label="27:CtFieldReadImpl@target" shape=ellipse]
174 [label="27:CtInvocationImpl@target.getAbsolutePath()" shape=ellipse]
175 [label="27:CtInvocationImpl@cmdl.createArgument().setValue(target.getAbsolutePath())" shape=ellipse]
176 [label="28:CtFieldReadImpl@javaccHome" shape=ellipse]
177 [label="28:CtLiteralImpl@null" shape=ellipse]
178 [label="28:CtBinaryOperatorImpl@(javaccHome == null)" shape=ellipse]
179 [label="28:CtExecutableReferenceImpl@isDirectory()" shape=ellipse]
180 [label="28:CtVirtualElement@isDirectory" shape=ellipse]
181 [label="28:CtFieldReadImpl@javaccHome" shape=ellipse]
182 [label="28:CtInvocationImpl@javaccHome.isDirectory()" shape=ellipse]
183 [label="28:CtUnaryOperatorImpl@(!javaccHome.isDirectory())" shape=ellipse]
184 [label="28:CtBinaryOperatorImpl@(javaccHome == null) || (!javaccHome.isDirectory())" shape=ellipse]
185 [label="29:CtTypeReferenceImpl@TaskException" shape=ellipse]
186 [label="29:CtLiteralImpl@\"Javacchome not set.\"" shape=ellipse]
187 [label="29:CtConstructorCallImpl@new TaskException(\"Javacchome not set.\")" shape=ellipse]
188 [label="29:CtThrowImpl@throw new TaskException(\"Javacchome not set.\")" shape=ellipse]
189 [label="28:CtBlockImpl@\{
    throw new TaskException(\"Javacchome not set.\");
\}" shape=ellipse]
190 [label="28:CtIfImpl@if ((javaccHome == null) || (!javaccHome.isDirectory())) \{
    throw new TaskException(\"Javacchome not set.\");
\}" shape=ellipse]
191 [label="31:CtTypeReferenceImpl@Path" shape=ellipse]
192 [label="31:CtExecutableReferenceImpl@createClasspath()" shape=ellipse]
193 [label="31:CtVirtualElement@createClasspath" shape=ellipse]
194 [label="31:CtFieldReadImpl@cmdl" shape=ellipse]
195 [label="31:CtExecutableReferenceImpl@getProject()" shape=ellipse]
196 [label="31:CtVirtualElement@getProject" shape=ellipse]
197 [label="31:CtInvocationImpl@getProject()" shape=ellipse]
198 [label="31:CtInvocationImpl@cmdl.createClasspath(getProject())" shape=ellipse]
199 [label="31:CtVirtualElement@classpath" shape=ellipse]
200 [label="31:CtLocalVariableImpl@final Path classpath = cmdl.createClasspath(getProject())" shape=ellipse]
201 [label="32:CtExecutableReferenceImpl@setPath()" shape=ellipse]
202 [label="32:CtVirtualElement@setPath" shape=ellipse]
203 [label="32:CtExecutableReferenceImpl@createPathElement()" shape=ellipse]
204 [label="32:CtVirtualElement@createPathElement" shape=ellipse]
205 [label="32:CtVariableReadImpl@classpath" shape=ellipse]
206 [label="32:CtInvocationImpl@classpath.createPathElement()" shape=ellipse]
207 [label="32:CtExecutableReferenceImpl@getAbsolutePath()" shape=ellipse]
208 [label="32:CtVirtualElement@getAbsolutePath" shape=ellipse]
209 [label="32:CtFieldReadImpl@javaccHome" shape=ellipse]
210 [label="32:CtInvocationImpl@javaccHome.getAbsolutePath()" shape=ellipse]
211 [label="32:CtLiteralImpl@\"/JavaCC.zip\"" shape=ellipse]
212 [label="32:CtBinaryOperatorImpl@javaccHome.getAbsolutePath() + \"/JavaCC.zip\"" shape=ellipse]
213 [label="32:CtInvocationImpl@classpath.createPathElement().setPath(javaccHome.getAbsolutePath() + \"/JavaCC.zip\")" shape=ellipse]
214 [label="33:CtExecutableReferenceImpl@addJavaRuntime()" shape=ellipse]
215 [label="33:CtVirtualElement@addJavaRuntime" shape=ellipse]
216 [label="33:CtVariableReadImpl@classpath" shape=ellipse]
217 [label="33:CtInvocationImpl@classpath.addJavaRuntime()" shape=ellipse]
218 [label="34:CtTypeReferenceImpl@Argument" shape=ellipse]
219 [label="34:CtExecutableReferenceImpl@createVmArgument()" shape=ellipse]
220 [label="34:CtVirtualElement@createVmArgument" shape=ellipse]
221 [label="34:CtFieldReadImpl@cmdl" shape=ellipse]
222 [label="34:CtInvocationImpl@cmdl.createVmArgument()" shape=ellipse]
223 [label="34:CtVirtualElement@arg" shape=ellipse]
224 [label="34:CtLocalVariableImpl@final Argument arg = cmdl.createVmArgument()" shape=ellipse]
225 [label="35:CtExecutableReferenceImpl@setValue(java.lang.String)" shape=ellipse]
226 [label="35:CtVirtualElement@setValue" shape=ellipse]
227 [label="35:CtVariableReadImpl@arg" shape=ellipse]
228 [label="35:CtLiteralImpl@\"-mx140M\"" shape=ellipse]
229 [label="35:CtInvocationImpl@arg.setValue(\"-mx140M\")" shape=ellipse]
230 [label="36:CtExecutableReferenceImpl@setValue()" shape=ellipse]
231 [label="36:CtVirtualElement@setValue" shape=ellipse]
232 [label="36:CtVariableReadImpl@arg" shape=ellipse]
233 [label="36:CtLiteralImpl@\"-Dinstall.root=\"" shape=ellipse]
234 [label="36:CtExecutableReferenceImpl@getAbsolutePath()" shape=ellipse]
235 [label="36:CtVirtualElement@getAbsolutePath" shape=ellipse]
236 [label="36:CtFieldReadImpl@javaccHome" shape=ellipse]
237 [label="36:CtInvocationImpl@javaccHome.getAbsolutePath()" shape=ellipse]
238 [label="36:CtBinaryOperatorImpl@\"-Dinstall.root=\" + javaccHome.getAbsolutePath()" shape=ellipse]
239 [label="36:CtInvocationImpl@arg.setValue(\"-Dinstall.root=\" + javaccHome.getAbsolutePath())" shape=ellipse]
240 [label="37:CtTypeReferenceImpl@Execute" shape=ellipse]
241 [label="37:CtTypeReferenceImpl@Execute" shape=ellipse]
242 [label="37:CtConstructorCallImpl@new Execute()" shape=ellipse]
243 [label="37:CtVirtualElement@exe" shape=ellipse]
244 [label="37:CtLocalVariableImpl@final Execute exe = new Execute()" shape=ellipse]
245 [label="38:CtExecutableReferenceImpl@setOutput(LogOutputStream)" shape=ellipse]
246 [label="38:CtVirtualElement@setOutput" shape=ellipse]
247 [label="38:CtVariableReadImpl@exe" shape=ellipse]
248 [label="38:CtTypeReferenceImpl@LogOutputStream" shape=ellipse]
249 [label="38:CtThisAccessImpl@this" shape=ellipse]
250 [label="38:CtFieldReadImpl@Project.MSG_INFO" shape=ellipse]
251 [label="38:CtConstructorCallImpl@new LogOutputStream(this, Project.MSG_INFO)" shape=ellipse]
252 [label="38:CtInvocationImpl@exe.setOutput(new LogOutputStream(this, Project.MSG_INFO))" shape=ellipse]
253 [label="39:CtExecutableReferenceImpl@setError(LogOutputStream)" shape=ellipse]
254 [label="39:CtVirtualElement@setError" shape=ellipse]
255 [label="39:CtVariableReadImpl@exe" shape=ellipse]
256 [label="39:CtTypeReferenceImpl@LogOutputStream" shape=ellipse]
257 [label="39:CtThisAccessImpl@this" shape=ellipse]
258 [label="39:CtFieldReadImpl@Project.MSG_INFO" shape=ellipse]
259 [label="39:CtConstructorCallImpl@new LogOutputStream(this, Project.MSG_INFO)" shape=ellipse]
260 [label="39:CtInvocationImpl@exe.setError(new LogOutputStream(this, Project.MSG_INFO))" shape=ellipse]
261 [label="40:CtExecutableReferenceImpl@log(<unknown>,<unknown>)" shape=ellipse]
262 [label="40:CtVirtualElement@log" shape=ellipse]
263 [label="40:CtExecutableReferenceImpl@toString()" shape=ellipse]
264 [label="40:CtVirtualElement@toString" shape=ellipse]
265 [label="40:CtFieldReadImpl@cmdl" shape=ellipse]
266 [label="40:CtInvocationImpl@cmdl.toString()" shape=ellipse]
267 [label="40:CtTypeAccessImpl@MSG_VERBOSE" shape=ellipse]
268 [label="40:CtInvocationImpl@log(cmdl.toString(), MSG_VERBOSE)" shape=ellipse]
269 [label="41:CtExecutableReferenceImpl@setCommandline()" shape=ellipse]
270 [label="41:CtVirtualElement@setCommandline" shape=ellipse]
271 [label="41:CtVariableReadImpl@exe" shape=ellipse]
272 [label="41:CtExecutableReferenceImpl@getCommandline()" shape=ellipse]
273 [label="41:CtVirtualElement@getCommandline" shape=ellipse]
274 [label="41:CtFieldReadImpl@cmdl" shape=ellipse]
275 [label="41:CtInvocationImpl@cmdl.getCommandline()" shape=ellipse]
276 [label="41:CtInvocationImpl@exe.setCommandline(cmdl.getCommandline())" shape=ellipse]
277 [label="43:CtExecutableReferenceImpl@execute()" shape=ellipse]
278 [label="43:CtVirtualElement@execute" shape=ellipse]
279 [label="43:CtVariableReadImpl@exe" shape=ellipse]
280 [label="43:CtInvocationImpl@exe.execute()" shape=ellipse]
281 [label="43:CtLiteralImpl@0" shape=ellipse]
282 [label="43:CtBinaryOperatorImpl@exe.execute() != 0" shape=ellipse]
283 [label="44:CtTypeReferenceImpl@TaskException" shape=ellipse]
284 [label="44:CtLiteralImpl@\"JJTree failed.\"" shape=ellipse]
285 [label="44:CtConstructorCallImpl@new TaskException(\"JJTree failed.\")" shape=ellipse]
286 [label="44:CtThrowImpl@throw new TaskException(\"JJTree failed.\")" shape=ellipse]
287 [label="43:CtBlockImpl@\{
    throw new TaskException(\"JJTree failed.\");
\}" shape=ellipse]
288 [label="43:CtIfImpl@if (exe.execute() != 0) \{
    throw new TaskException(\"JJTree failed.\");
\}" shape=ellipse]
289 [label="42:CtBlockImpl@\{
    if (exe.execute() != 0) \{
        throw new TaskException(\"JJTree failed.\");
    \}
\}" shape=ellipse]
290 [label="46:CtVirtualElement@e" shape=ellipse]
291 [label="46:CtTypeReferenceImpl@IOException" shape=ellipse]
292 [label="46:CtCatchVariableImpl@IOException e" shape=ellipse]
293 [label="47:CtTypeReferenceImpl@TaskException" shape=ellipse]
294 [label="47:CtLiteralImpl@\"Failed to launch JJTree: \"" shape=ellipse]
295 [label="47:CtVariableReadImpl@e" shape=ellipse]
296 [label="47:CtBinaryOperatorImpl@\"Failed to launch JJTree: \" + e" shape=ellipse]
297 [label="47:CtConstructorCallImpl@new TaskException(\"Failed to launch JJTree: \" + e)" shape=ellipse]
298 [label="47:CtThrowImpl@throw new TaskException(\"Failed to launch JJTree: \" + e)" shape=ellipse]
299 [label="46:CtBlockImpl@\{
    throw new TaskException(\"Failed to launch JJTree: \" + e);
\}" shape=ellipse]
300 [label="46:CtCatchImpl@ catch (IOException e) \{
    throw new TaskException(\"Failed to launch JJTree: \" + e);
\}" shape=ellipse]
301 [label="42:CtTryImpl@try \{
    if (exe.execute() != 0) \{
        throw new TaskException(\"JJTree failed.\");
    \}
\} catch (IOException e) \{
    throw new TaskException(\"Failed to launch JJTree: \" + e);
\}" shape=ellipse]
302 [label="2:CtBlockImpl@\{
    Enumeration iter = optionalAttrs.keys();
    while (iter.hasMoreElements()) \{
        String name = ((String) (iter.nextElement()));
        Object value = optionalAttrs.get(name);
        cmdl.createArgument().setValue(((\"-\" + name) + \":\") + value.toString());
    \} 
    if ((target == null) || (!target.isFile())) \{
        throw new TaskException(\"Invalid target: \" + target);
    \}
    if (outputDirectory == null) \{
        outputDirectory = new File(target.getParent());
    \}
    if (!outputDirectory.isDirectory()) \{
        throw new TaskException((\"'outputdirectory' \" + outputDirectory) + \" is not a directory.\");
    \}
    cmdl.createArgument().setValue(\"-OUTPUT_DIRECTORY:\" + outputDirectory.getAbsolutePath().replace('\\', '/'));
    String targetName = target.getName();
    final File javaFile = new File(outputDirectory, targetName.substring(0, targetName.indexOf(\".jjt\")) + \".jj\");
    if (javaFile.exists() && (target.lastModified() < javaFile.lastModified())) \{
        getLogger().info((\"Target is already built - skipping (\" + target) + \")\");
        return;
    \}
    cmdl.createArgument().setValue(target.getAbsolutePath());
    if ((javaccHome == null) || (!javaccHome.isDirectory())) \{
        throw new TaskException(\"Javacchome not set.\");
    \}
    final Path classpath = cmdl.createClasspath(getProject());
    classpath.createPathElement().setPath(javaccHome.getAbsolutePath() + \"/JavaCC.zip\");
    classpath.addJavaRuntime();
    final Argument arg = cmdl.createVmArgument();
    arg.setValue(\"-mx140M\");
    arg.setValue(\"-Dinstall.root=\" + javaccHome.getAbsolutePath());
    final Execute exe = new Execute();
    exe.setOutput(new LogOutputStream(this, Project.MSG_INFO));
    exe.setError(new LogOutputStream(this, Project.MSG_INFO));
    log(cmdl.toString(), MSG_VERBOSE);
    exe.setCommandline(cmdl.getCommandline());
    try \{
        if (exe.execute() != 0) \{
            throw new TaskException(\"JJTree failed.\");
        \}
    \} catch (IOException e) \{
        throw new TaskException(\"Failed to launch JJTree: \" + e);
    \}
\}" shape=ellipse]
303 [label="2:CtMethodImpl@public void execute() throws TaskException \{
    Enumeration iter = optionalAttrs.keys();
    while (iter.hasMoreElements()) \{
        String name = ((String) (iter.nextElement()));
        Object value = optionalAttrs.get(name);
        cmdl.createArgument().setValue(((\"-\" + name) + \":\") + value.toString());
    \} 
    if ((target == null) || (!target.isFile())) \{
        throw new TaskException(\"Invalid target: \" + target);
    \}
    if (outputDirectory == null) \{
        outputDirectory = new File(target.getParent());
    \}
    if (!outputDirectory.isDirectory()) \{
        throw new TaskException((\"'outputdirectory' \" + outputDirectory) + \" is not a directory.\");
    \}
    cmdl.createArgument().setValue(\"-OUTPUT_DIRECTORY:\" + outputDirectory.getAbsolutePath().replace('\\', '/'));
    String targetName = target.getName();
    final File javaFile = new File(outputDirectory, targetName.substring(0, targetName.indexOf(\".jjt\")) + \".jj\");
    if (javaFile.exists() && (target.lastModified() < javaFile.lastModified())) \{
        getLogger().info((\"Target is already built - skipping (\" + target) + \")\");
        return;
    \}
    cmdl.createArgument().setValue(target.getAbsolutePath());
    if ((javaccHome == null) || (!javaccHome.isDirectory())) \{
        throw new TaskException(\"Javacchome not set.\");
    \}
    final Path classpath = cmdl.createClasspath(getProject());
    classpath.createPathElement().setPath(javaccHome.getAbsolutePath() + \"/JavaCC.zip\");
    classpath.addJavaRuntime();
    final Argument arg = cmdl.createVmArgument();
    arg.setValue(\"-mx140M\");
    arg.setValue(\"-Dinstall.root=\" + javaccHome.getAbsolutePath());
    final Execute exe = new Execute();
    exe.setOutput(new LogOutputStream(this, Project.MSG_INFO));
    exe.setError(new LogOutputStream(this, Project.MSG_INFO));
    log(cmdl.toString(), MSG_VERBOSE);
    exe.setCommandline(cmdl.getCommandline());
    try \{
        if (exe.execute() != 0) \{
            throw new TaskException(\"JJTree failed.\");
        \}
    \} catch (IOException e) \{
        throw new TaskException(\"Failed to launch JJTree: \" + e);
    \}
\}" shape=ellipse]
304 [label="40:Update@UPDATE" shape=ellipse]
305 [label="40:CtInvocationImpl@getLogger().debug(cmdl.toString())" shape=ellipse]
6 -> 8 [label="Data Dep"];
7 -> 5 [label="AST"];
7 -> 6 [label="AST"];
7 -> 4 [label="AST"];
8 -> 12 [label="Define-Use"];
8 -> 17 [label="Define-Use"];
9 -> 8 [label="AST"];
9 -> 3 [label="AST"];
9 -> 7 [label="AST"];
13 -> 11 [label="AST"];
13 -> 12 [label="AST"];
13 -> 10 [label="AST"];
13 -> 47 [label="Control Dep"];
13 -> 21 [label="Control Dep"];
13 -> 18 [label="Control Dep"];
13 -> 15 [label="Control Dep"];
13 -> 17 [label="Control Dep"];
13 -> 29 [label="Control Dep"];
13 -> 27 [label="Control Dep"];
13 -> 23 [label="Control Dep"];
13 -> 25 [label="Control Dep"];
13 -> 26 [label="Control Dep"];
13 -> 46 [label="Control Dep"];
13 -> 30 [label="Control Dep"];
13 -> 35 [label="Control Dep"];
13 -> 32 [label="Control Dep"];
13 -> 34 [label="Control Dep"];
13 -> 45 [label="Control Dep"];
13 -> 40 [label="Control Dep"];
13 -> 38 [label="Control Dep"];
13 -> 36 [label="Control Dep"];
13 -> 37 [label="Control Dep"];
13 -> 39 [label="Control Dep"];
13 -> 44 [label="Control Dep"];
13 -> 41 [label="Control Dep"];
13 -> 43 [label="Control Dep"];
17 -> 20 [label="Data Dep"];
18 -> 16 [label="AST"];
18 -> 19 [label="AST"];
18 -> 17 [label="AST"];
18 -> 15 [label="AST"];
20 -> 26 [label="Define-Use"];
20 -> 37 [label="Define-Use"];
21 -> 20 [label="AST"];
21 -> 14 [label="AST"];
21 -> 18 [label="AST"];
25 -> 28 [label="Data Dep"];
26 -> 28 [label="Data Dep"];
27 -> 24 [label="AST"];
27 -> 25 [label="AST"];
27 -> 23 [label="AST"];
27 -> 26 [label="AST"];
28 -> 43 [label="Define-Use"];
29 -> 28 [label="AST"];
29 -> 22 [label="AST"];
29 -> 27 [label="AST"];
35 -> 33 [label="AST"];
35 -> 34 [label="AST"];
35 -> 32 [label="AST"];
38 -> 36 [label="AST"];
38 -> 37 [label="AST"];
40 -> 38 [label="AST"];
40 -> 39 [label="AST"];
44 -> 42 [label="AST"];
44 -> 43 [label="AST"];
44 -> 41 [label="AST"];
45 -> 40 [label="AST"];
45 -> 44 [label="AST"];
46 -> 31 [label="AST"];
46 -> 35 [label="AST"];
46 -> 30 [label="AST"];
46 -> 45 [label="AST"];
47 -> 21 [label="AST"];
47 -> 29 [label="AST"];
47 -> 46 [label="AST"];
48 -> 13 [label="AST"];
48 -> 47 [label="AST"];
51 -> 49 [label="AST"];
51 -> 50 [label="AST"];
55 -> 53 [label="AST"];
55 -> 54 [label="AST"];
55 -> 52 [label="AST"];
56 -> 55 [label="AST"];
57 -> 51 [label="AST"];
57 -> 56 [label="AST"];
57 -> 64 [label="Control Dep"];
57 -> 63 [label="Control Dep"];
57 -> 62 [label="Control Dep"];
57 -> 61 [label="Control Dep"];
57 -> 59 [label="Control Dep"];
57 -> 60 [label="Control Dep"];
61 -> 59 [label="AST"];
61 -> 60 [label="AST"];
62 -> 61 [label="AST"];
63 -> 62 [label="AST"];
64 -> 63 [label="AST"];
65 -> 57 [label="AST"];
65 -> 64 [label="AST"];
68 -> 66 [label="AST"];
68 -> 67 [label="AST"];
68 -> 77 [label="Control Dep"];
68 -> 76 [label="Control Dep"];
68 -> 69 [label="Control Dep"];
68 -> 75 [label="Control Dep"];
68 -> 74 [label="Control Dep"];
68 -> 71 [label="Control Dep"];
68 -> 73 [label="Control Dep"];
69 -> 81 [label="Define-Use"];
69 -> 86 [label="Define-Use"];
69 -> 105 [label="Define-Use"];
69 -> 121 [label="Define-Use"];
73 -> 69 [label="Data Dep"];
74 -> 72 [label="AST"];
74 -> 73 [label="AST"];
74 -> 71 [label="AST"];
75 -> 74 [label="AST"];
76 -> 69 [label="AST"];
76 -> 75 [label="AST"];
77 -> 76 [label="AST"];
78 -> 68 [label="AST"];
78 -> 77 [label="AST"];
82 -> 80 [label="AST"];
82 -> 81 [label="AST"];
82 -> 79 [label="AST"];
83 -> 82 [label="AST"];
83 -> 92 [label="Control Dep"];
83 -> 91 [label="Control Dep"];
83 -> 90 [label="Control Dep"];
83 -> 89 [label="Control Dep"];
83 -> 87 [label="Control Dep"];
83 -> 85 [label="Control Dep"];
83 -> 86 [label="Control Dep"];
83 -> 88 [label="Control Dep"];
87 -> 85 [label="AST"];
87 -> 86 [label="AST"];
89 -> 87 [label="AST"];
89 -> 88 [label="AST"];
90 -> 89 [label="AST"];
91 -> 90 [label="AST"];
92 -> 91 [label="AST"];
93 -> 83 [label="AST"];
93 -> 92 [label="AST"];
99 -> 97 [label="AST"];
99 -> 98 [label="AST"];
99 -> 96 [label="AST"];
106 -> 104 [label="AST"];
106 -> 105 [label="AST"];
106 -> 103 [label="AST"];
109 -> 102 [label="AST"];
109 -> 106 [label="AST"];
109 -> 101 [label="AST"];
109 -> 107 [label="AST"];
109 -> 108 [label="AST"];
110 -> 100 [label="AST"];
110 -> 109 [label="AST"];
111 -> 95 [label="AST"];
111 -> 99 [label="AST"];
111 -> 94 [label="AST"];
111 -> 110 [label="AST"];
115 -> 117 [label="Data Dep"];
116 -> 114 [label="AST"];
116 -> 115 [label="AST"];
116 -> 113 [label="AST"];
117 -> 124 [label="Define-Use"];
117 -> 128 [label="Define-Use"];
118 -> 117 [label="AST"];
118 -> 112 [label="AST"];
118 -> 116 [label="AST"];
121 -> 135 [label="Data Dep"];
124 -> 135 [label="Data Dep"];
128 -> 135 [label="Data Dep"];
130 -> 127 [label="AST"];
130 -> 128 [label="AST"];
130 -> 126 [label="AST"];
130 -> 129 [label="AST"];
131 -> 123 [label="AST"];
131 -> 124 [label="AST"];
131 -> 122 [label="AST"];
131 -> 125 [label="AST"];
131 -> 130 [label="AST"];
133 -> 131 [label="AST"];
133 -> 132 [label="AST"];
134 -> 121 [label="AST"];
134 -> 133 [label="AST"];
135 -> 139 [label="Define-Use"];
135 -> 147 [label="Define-Use"];
136 -> 135 [label="AST"];
136 -> 119 [label="AST"];
136 -> 134 [label="AST"];
140 -> 138 [label="AST"];
140 -> 139 [label="AST"];
140 -> 137 [label="AST"];
144 -> 142 [label="AST"];
144 -> 143 [label="AST"];
144 -> 141 [label="AST"];
148 -> 146 [label="AST"];
148 -> 147 [label="AST"];
148 -> 145 [label="AST"];
149 -> 144 [label="AST"];
149 -> 148 [label="AST"];
150 -> 140 [label="AST"];
150 -> 149 [label="AST"];
150 -> 163 [label="Control Dep"];
150 -> 161 [label="Control Dep"];
150 -> 151 [label="Control Dep"];
150 -> 155 [label="Control Dep"];
150 -> 153 [label="Control Dep"];
150 -> 160 [label="Control Dep"];
150 -> 158 [label="Control Dep"];
150 -> 156 [label="Control Dep"];
150 -> 157 [label="Control Dep"];
150 -> 159 [label="Control Dep"];
150 -> 162 [label="Control Dep"];
155 -> 154 [label="AST"];
155 -> 153 [label="AST"];
158 -> 156 [label="AST"];
158 -> 157 [label="AST"];
160 -> 158 [label="AST"];
160 -> 159 [label="AST"];
161 -> 152 [label="AST"];
161 -> 155 [label="AST"];
161 -> 151 [label="AST"];
161 -> 160 [label="AST"];
163 -> 161 [label="AST"];
163 -> 162 [label="AST"];
164 -> 150 [label="AST"];
164 -> 163 [label="AST"];
170 -> 168 [label="AST"];
170 -> 169 [label="AST"];
170 -> 167 [label="AST"];
174 -> 172 [label="AST"];
174 -> 173 [label="AST"];
174 -> 171 [label="AST"];
175 -> 166 [label="AST"];
175 -> 170 [label="AST"];
175 -> 165 [label="AST"];
175 -> 174 [label="AST"];
178 -> 176 [label="AST"];
178 -> 177 [label="AST"];
182 -> 180 [label="AST"];
182 -> 181 [label="AST"];
182 -> 179 [label="AST"];
183 -> 182 [label="AST"];
184 -> 178 [label="AST"];
184 -> 183 [label="AST"];
184 -> 189 [label="Control Dep"];
184 -> 188 [label="Control Dep"];
184 -> 187 [label="Control Dep"];
184 -> 186 [label="Control Dep"];
187 -> 186 [label="AST"];
188 -> 187 [label="AST"];
189 -> 188 [label="AST"];
190 -> 184 [label="AST"];
190 -> 189 [label="AST"];
194 -> 199 [label="Data Dep"];
197 -> 196 [label="AST"];
197 -> 195 [label="AST"];
198 -> 193 [label="AST"];
198 -> 194 [label="AST"];
198 -> 192 [label="AST"];
198 -> 197 [label="AST"];
199 -> 205 [label="Define-Use"];
199 -> 216 [label="Define-Use"];
200 -> 199 [label="AST"];
200 -> 191 [label="AST"];
200 -> 198 [label="AST"];
206 -> 204 [label="AST"];
206 -> 205 [label="AST"];
206 -> 203 [label="AST"];
210 -> 208 [label="AST"];
210 -> 209 [label="AST"];
210 -> 207 [label="AST"];
212 -> 210 [label="AST"];
212 -> 211 [label="AST"];
213 -> 202 [label="AST"];
213 -> 206 [label="AST"];
213 -> 201 [label="AST"];
213 -> 212 [label="AST"];
217 -> 215 [label="AST"];
217 -> 216 [label="AST"];
217 -> 214 [label="AST"];
221 -> 223 [label="Data Dep"];
222 -> 220 [label="AST"];
222 -> 221 [label="AST"];
222 -> 219 [label="AST"];
223 -> 227 [label="Define-Use"];
223 -> 232 [label="Define-Use"];
224 -> 223 [label="AST"];
224 -> 218 [label="AST"];
224 -> 222 [label="AST"];
229 -> 226 [label="AST"];
229 -> 227 [label="AST"];
229 -> 225 [label="AST"];
229 -> 228 [label="AST"];
237 -> 235 [label="AST"];
237 -> 236 [label="AST"];
237 -> 234 [label="AST"];
238 -> 233 [label="AST"];
238 -> 237 [label="AST"];
239 -> 231 [label="AST"];
239 -> 232 [label="AST"];
239 -> 230 [label="AST"];
239 -> 238 [label="AST"];
243 -> 247 [label="Define-Use"];
243 -> 255 [label="Define-Use"];
243 -> 271 [label="Define-Use"];
243 -> 279 [label="Define-Use"];
244 -> 243 [label="AST"];
244 -> 240 [label="AST"];
244 -> 242 [label="AST"];
251 -> 249 [label="AST"];
251 -> 250 [label="AST"];
252 -> 246 [label="AST"];
252 -> 247 [label="AST"];
252 -> 245 [label="AST"];
252 -> 251 [label="AST"];
259 -> 257 [label="AST"];
259 -> 258 [label="AST"];
260 -> 254 [label="AST"];
260 -> 255 [label="AST"];
260 -> 253 [label="AST"];
260 -> 259 [label="AST"];
266 -> 264 [label="AST"];
266 -> 265 [label="AST"];
266 -> 263 [label="AST"];
268 -> 262 [label="AST"];
268 -> 261 [label="AST"];
268 -> 266 [label="AST"];
268 -> 267 [label="AST"];
268 -> 304 [label="Action"];
275 -> 273 [label="AST"];
275 -> 274 [label="AST"];
275 -> 272 [label="AST"];
276 -> 270 [label="AST"];
276 -> 271 [label="AST"];
276 -> 269 [label="AST"];
276 -> 275 [label="AST"];
280 -> 278 [label="AST"];
280 -> 279 [label="AST"];
280 -> 277 [label="AST"];
282 -> 280 [label="AST"];
282 -> 281 [label="AST"];
282 -> 287 [label="Control Dep"];
282 -> 286 [label="Control Dep"];
282 -> 285 [label="Control Dep"];
282 -> 284 [label="Control Dep"];
285 -> 284 [label="AST"];
286 -> 285 [label="AST"];
287 -> 286 [label="AST"];
288 -> 282 [label="AST"];
288 -> 287 [label="AST"];
289 -> 288 [label="AST"];
290 -> 295 [label="Define-Use"];
292 -> 290 [label="AST"];
292 -> 291 [label="AST"];
292 -> 299 [label="Control Dep"];
292 -> 298 [label="Control Dep"];
292 -> 297 [label="Control Dep"];
292 -> 296 [label="Control Dep"];
292 -> 294 [label="Control Dep"];
292 -> 295 [label="Control Dep"];
296 -> 294 [label="AST"];
296 -> 295 [label="AST"];
297 -> 296 [label="AST"];
298 -> 297 [label="AST"];
299 -> 298 [label="AST"];
300 -> 292 [label="AST"];
300 -> 299 [label="AST"];
301 -> 289 [label="AST"];
301 -> 300 [label="AST"];
302 -> 9 [label="AST"];
302 -> 48 [label="AST"];
302 -> 65 [label="AST"];
302 -> 78 [label="AST"];
302 -> 93 [label="AST"];
302 -> 111 [label="AST"];
302 -> 118 [label="AST"];
302 -> 136 [label="AST"];
302 -> 164 [label="AST"];
302 -> 175 [label="AST"];
302 -> 190 [label="AST"];
302 -> 200 [label="AST"];
302 -> 213 [label="AST"];
302 -> 217 [label="AST"];
302 -> 224 [label="AST"];
302 -> 229 [label="AST"];
302 -> 239 [label="AST"];
302 -> 244 [label="AST"];
302 -> 252 [label="AST"];
302 -> 260 [label="AST"];
302 -> 268 [label="AST"];
302 -> 276 [label="AST"];
302 -> 301 [label="AST"];
303 -> 1 [label="AST"];
303 -> 0 [label="AST"];
303 -> 2 [label="AST"];
303 -> 302 [label="AST"];
304 -> 305 [label="Action"];
}