digraph "formatError#?,String,Test,Throwable" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@formatError" shape=ellipse]
2 [label="2:CtParameterImpl@String type" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
4 [label="2:CtParameterImpl@Test test" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@Test" shape=ellipse]
6 [label="2:CtParameterImpl@Throwable error" shape=ellipse]
7 [label="2:CtTypeReferenceImpl@Throwable" shape=ellipse]
8 [label="3:CtVariableReadImpl@test" shape=ellipse]
9 [label="3:CtLiteralImpl@null" shape=ellipse]
10 [label="3:CtBinaryOperatorImpl@test != null" shape=ellipse]
11 [label="4:CtExecutableReferenceImpl@endTest(<unknown>)" shape=ellipse]
12 [label="4:CtVirtualElement@endTest" shape=ellipse]
13 [label="4:CtVariableReadImpl@test" shape=ellipse]
14 [label="4:CtInvocationImpl@endTest(test)" shape=ellipse]
15 [label="3:CtBlockImpl@\{
    endTest(test);
\}" shape=ellipse]
16 [label="3:CtIfImpl@if (test != null) \{
    endTest(test);
\}" shape=ellipse]
17 [label="7:CtExecutableReferenceImpl@write()" shape=ellipse]
18 [label="7:CtVirtualElement@write" shape=ellipse]
19 [label="7:CtFieldReadImpl@resultWriter" shape=ellipse]
20 [label="7:CtExecutableReferenceImpl@formatTest(<unknown>)" shape=ellipse]
21 [label="7:CtVirtualElement@formatTest" shape=ellipse]
22 [label="7:CtVariableReadImpl@test" shape=ellipse]
23 [label="7:CtInvocationImpl@formatTest(test)" shape=ellipse]
24 [label="7:CtVariableReadImpl@type" shape=ellipse]
25 [label="7:CtBinaryOperatorImpl@formatTest(test) + type" shape=ellipse]
26 [label="7:CtInvocationImpl@resultWriter.write(formatTest(test) + type)" shape=ellipse]
27 [label="8:CtExecutableReferenceImpl@newLine()" shape=ellipse]
28 [label="8:CtVirtualElement@newLine" shape=ellipse]
29 [label="8:CtFieldReadImpl@resultWriter" shape=ellipse]
30 [label="8:CtInvocationImpl@resultWriter.newLine()" shape=ellipse]
31 [label="9:CtExecutableReferenceImpl@write(java.lang.String)" shape=ellipse]
32 [label="9:CtVirtualElement@write" shape=ellipse]
33 [label="9:CtFieldReadImpl@resultWriter" shape=ellipse]
34 [label="9:CtExecutableReferenceImpl@getMessage()" shape=ellipse]
35 [label="9:CtVirtualElement@getMessage" shape=ellipse]
36 [label="9:CtVariableReadImpl@error" shape=ellipse]
37 [label="9:CtInvocationImpl@error.getMessage()" shape=ellipse]
38 [label="9:CtInvocationImpl@resultWriter.write(error.getMessage())" shape=ellipse]
39 [label="10:CtExecutableReferenceImpl@newLine()" shape=ellipse]
40 [label="10:CtVirtualElement@newLine" shape=ellipse]
41 [label="10:CtFieldReadImpl@resultWriter" shape=ellipse]
42 [label="10:CtInvocationImpl@resultWriter.newLine()" shape=ellipse]
43 [label="11:CtTypeReferenceImpl@String" shape=ellipse]
44 [label="11:CtExecutableReferenceImpl@getFilteredTrace(java.lang.Throwable)" shape=ellipse]
45 [label="11:CtVirtualElement@getFilteredTrace" shape=ellipse]
46 [label="11:CtTypeAccessImpl@JUnitTestRunner" shape=ellipse]
47 [label="11:CtVariableReadImpl@error" shape=ellipse]
48 [label="11:CtInvocationImpl@JUnitTestRunner.getFilteredTrace(error)" shape=ellipse]
49 [label="11:CtVirtualElement@strace" shape=ellipse]
50 [label="11:CtLocalVariableImpl@String strace = JUnitTestRunner.getFilteredTrace(error)" shape=ellipse]
51 [label="12:CtExecutableReferenceImpl@write(java.lang.String)" shape=ellipse]
52 [label="12:CtVirtualElement@write" shape=ellipse]
53 [label="12:CtFieldReadImpl@resultWriter" shape=ellipse]
54 [label="12:CtVariableReadImpl@strace" shape=ellipse]
55 [label="12:CtInvocationImpl@resultWriter.write(strace)" shape=ellipse]
56 [label="13:CtExecutableReferenceImpl@newLine()" shape=ellipse]
57 [label="13:CtVirtualElement@newLine" shape=ellipse]
58 [label="13:CtFieldReadImpl@resultWriter" shape=ellipse]
59 [label="13:CtInvocationImpl@resultWriter.newLine()" shape=ellipse]
60 [label="14:CtExecutableReferenceImpl@newLine()" shape=ellipse]
61 [label="14:CtVirtualElement@newLine" shape=ellipse]
62 [label="14:CtFieldReadImpl@resultWriter" shape=ellipse]
63 [label="14:CtInvocationImpl@resultWriter.newLine()" shape=ellipse]
64 [label="6:CtBlockImpl@\{
    resultWriter.write(formatTest(test) + type);
    resultWriter.newLine();
    resultWriter.write(error.getMessage());
    resultWriter.newLine();
    String strace = JUnitTestRunner.getFilteredTrace(error);
    resultWriter.write(strace);
    resultWriter.newLine();
    resultWriter.newLine();
\}" shape=ellipse]
65 [label="15:CtVirtualElement@ex" shape=ellipse]
66 [label="15:CtTypeReferenceImpl@IOException" shape=ellipse]
67 [label="15:CtCatchVariableImpl@IOException ex" shape=ellipse]
68 [label="16:CtTypeReferenceImpl@BuildException" shape=ellipse]
69 [label="16:CtVariableReadImpl@ex" shape=ellipse]
70 [label="16:CtConstructorCallImpl@new BuildException(ex)" shape=ellipse]
71 [label="16:CtThrowImpl@throw new BuildException(ex)" shape=ellipse]
72 [label="15:CtBlockImpl@\{
    throw new BuildException(ex);
\}" shape=ellipse]
73 [label="15:CtCatchImpl@ catch (IOException ex) \{
    throw new BuildException(ex);
\}" shape=ellipse]
74 [label="6:CtTryImpl@try \{
    resultWriter.write(formatTest(test) + type);
    resultWriter.newLine();
    resultWriter.write(error.getMessage());
    resultWriter.newLine();
    String strace = JUnitTestRunner.getFilteredTrace(error);
    resultWriter.write(strace);
    resultWriter.newLine();
    resultWriter.newLine();
\} catch (IOException ex) \{
    throw new BuildException(ex);
\}" shape=ellipse]
75 [label="2:CtBlockImpl@\{
    if (test != null) \{
        endTest(test);
    \}
    try \{
        resultWriter.write(formatTest(test) + type);
        resultWriter.newLine();
        resultWriter.write(error.getMessage());
        resultWriter.newLine();
        String strace = JUnitTestRunner.getFilteredTrace(error);
        resultWriter.write(strace);
        resultWriter.newLine();
        resultWriter.newLine();
    \} catch (IOException ex) \{
        throw new BuildException(ex);
    \}
\}" shape=ellipse]
76 [label="2:CtMethodImpl@protected synchronized void formatError(String type, Test test, Throwable error) \{
    if (test != null) \{
        endTest(test);
    \}
    try \{
        resultWriter.write(formatTest(test) + type);
        resultWriter.newLine();
        resultWriter.write(error.getMessage());
        resultWriter.newLine();
        String strace = JUnitTestRunner.getFilteredTrace(error);
        resultWriter.write(strace);
        resultWriter.newLine();
        resultWriter.newLine();
    \} catch (IOException ex) \{
        throw new BuildException(ex);
    \}
\}" shape=ellipse]
77 [label="9:Update@UPDATE" shape=ellipse]
78 [label="9:CtInvocationImpl@String.valueOf(error.getMessage())" shape=ellipse]
79 [label="9:Insert@INSERT" shape=ellipse]
80 [label="9:CtInvocationImpl@resultWriter.write(String.valueOf(error.getMessage()))" shape=ellipse]
81 [label="9:Move@MOVE" shape=ellipse]
82 [label="9:Move@MOVE" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
6 -> 7 [label="AST"];
10 -> 8 [label="AST"];
10 -> 9 [label="AST"];
10 -> 15 [label="Control Dep"];
10 -> 14 [label="Control Dep"];
10 -> 11 [label="Control Dep"];
10 -> 13 [label="Control Dep"];
14 -> 12 [label="AST"];
14 -> 11 [label="AST"];
14 -> 13 [label="AST"];
15 -> 14 [label="AST"];
16 -> 10 [label="AST"];
16 -> 15 [label="AST"];
23 -> 21 [label="AST"];
23 -> 20 [label="AST"];
23 -> 22 [label="AST"];
25 -> 23 [label="AST"];
25 -> 24 [label="AST"];
26 -> 18 [label="AST"];
26 -> 19 [label="AST"];
26 -> 17 [label="AST"];
26 -> 25 [label="AST"];
30 -> 28 [label="AST"];
30 -> 29 [label="AST"];
30 -> 27 [label="AST"];
33 -> 81 [label="Action"];
37 -> 35 [label="AST"];
37 -> 36 [label="AST"];
37 -> 34 [label="AST"];
38 -> 32 [label="AST"];
38 -> 33 [label="AST"];
38 -> 31 [label="AST"];
38 -> 37 [label="AST"];
38 -> 77 [label="Action"];
38 -> 82 [label="Action"];
42 -> 40 [label="AST"];
42 -> 41 [label="AST"];
42 -> 39 [label="AST"];
47 -> 49 [label="Data Dep"];
48 -> 45 [label="AST"];
48 -> 46 [label="AST"];
48 -> 44 [label="AST"];
48 -> 47 [label="AST"];
49 -> 54 [label="Define-Use"];
50 -> 49 [label="AST"];
50 -> 43 [label="AST"];
50 -> 48 [label="AST"];
55 -> 52 [label="AST"];
55 -> 53 [label="AST"];
55 -> 51 [label="AST"];
55 -> 54 [label="AST"];
59 -> 57 [label="AST"];
59 -> 58 [label="AST"];
59 -> 56 [label="AST"];
63 -> 61 [label="AST"];
63 -> 62 [label="AST"];
63 -> 60 [label="AST"];
64 -> 26 [label="AST"];
64 -> 30 [label="AST"];
64 -> 38 [label="AST"];
64 -> 42 [label="AST"];
64 -> 50 [label="AST"];
64 -> 55 [label="AST"];
64 -> 59 [label="AST"];
64 -> 63 [label="AST"];
65 -> 69 [label="Define-Use"];
67 -> 65 [label="AST"];
67 -> 66 [label="AST"];
67 -> 72 [label="Control Dep"];
67 -> 71 [label="Control Dep"];
67 -> 70 [label="Control Dep"];
67 -> 69 [label="Control Dep"];
70 -> 69 [label="AST"];
71 -> 70 [label="AST"];
72 -> 71 [label="AST"];
73 -> 67 [label="AST"];
73 -> 72 [label="AST"];
74 -> 64 [label="AST"];
74 -> 73 [label="AST"];
74 -> 79 [label="Action"];
75 -> 16 [label="AST"];
75 -> 74 [label="AST"];
76 -> 1 [label="AST"];
76 -> 0 [label="AST"];
76 -> 2 [label="AST"];
76 -> 4 [label="AST"];
76 -> 6 [label="AST"];
76 -> 75 [label="AST"];
77 -> 78 [label="Action"];
79 -> 80 [label="Action"];
80 -> 78 [label="AST"];
81 -> 80 [label="Action"];
82 -> 80 [label="Action"];
}