digraph "formatError#?,String,Test,Throwable" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@formatError" shape=ellipse]
2 [label="2:CtParameterImpl@String type" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
4 [label="2:CtParameterImpl@Test test" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@Test" shape=ellipse]
6 [label="2:CtParameterImpl@Throwable t" shape=ellipse]
7 [label="2:CtTypeReferenceImpl@Throwable" shape=ellipse]
8 [label="3:CtFieldReadImpl@wri" shape=ellipse]
9 [label="4:CtVariableReadImpl@test" shape=ellipse]
10 [label="4:CtLiteralImpl@null" shape=ellipse]
11 [label="4:CtBinaryOperatorImpl@test != null" shape=ellipse]
12 [label="5:CtExecutableReferenceImpl@endTest(<unknown>)" shape=ellipse]
13 [label="5:CtVirtualElement@endTest" shape=ellipse]
14 [label="5:CtVariableReadImpl@test" shape=ellipse]
15 [label="5:CtInvocationImpl@endTest(test)" shape=ellipse]
16 [label="6:CtExecutableReferenceImpl@put(Test,java.lang.Boolean)" shape=ellipse]
17 [label="6:CtVirtualElement@put" shape=ellipse]
18 [label="6:CtFieldReadImpl@failed" shape=ellipse]
19 [label="6:CtVariableReadImpl@test" shape=ellipse]
20 [label="6:CtTypeAccessImpl@Boolean" shape=ellipse]
21 [label="6:CtFieldReadImpl@Boolean.TRUE" shape=ellipse]
22 [label="6:CtFieldReferenceImpl@java.lang.Boolean.TRUE" shape=ellipse]
23 [label="6:CtInvocationImpl@failed.put(test, Boolean.TRUE)" shape=ellipse]
24 [label="4:CtBlockImpl@\{
    endTest(test);
    failed.put(test, Boolean.TRUE);
\}" shape=ellipse]
25 [label="4:CtIfImpl@if (test != null) \{
    endTest(test);
    failed.put(test, Boolean.TRUE);
\}" shape=ellipse]
26 [label="9:CtExecutableReferenceImpl@write(java.lang.String)" shape=ellipse]
27 [label="9:CtVirtualElement@write" shape=ellipse]
28 [label="9:CtFieldReadImpl@wri" shape=ellipse]
29 [label="9:CtVariableReadImpl@type" shape=ellipse]
30 [label="9:CtInvocationImpl@wri.write(type)" shape=ellipse]
31 [label="10:CtExecutableReferenceImpl@newLine()" shape=ellipse]
32 [label="10:CtVirtualElement@newLine" shape=ellipse]
33 [label="10:CtFieldReadImpl@wri" shape=ellipse]
34 [label="10:CtInvocationImpl@wri.newLine()" shape=ellipse]
35 [label="11:CtExecutableReferenceImpl@write(java.lang.String)" shape=ellipse]
36 [label="11:CtVirtualElement@write" shape=ellipse]
37 [label="11:CtFieldReadImpl@wri" shape=ellipse]
38 [label="11:CtExecutableReferenceImpl@getMessage()" shape=ellipse]
39 [label="11:CtVirtualElement@getMessage" shape=ellipse]
40 [label="11:CtVariableReadImpl@t" shape=ellipse]
41 [label="11:CtInvocationImpl@t.getMessage()" shape=ellipse]
42 [label="11:CtInvocationImpl@wri.write(t.getMessage())" shape=ellipse]
43 [label="12:CtExecutableReferenceImpl@newLine()" shape=ellipse]
44 [label="12:CtVirtualElement@newLine" shape=ellipse]
45 [label="12:CtFieldReadImpl@wri" shape=ellipse]
46 [label="12:CtInvocationImpl@wri.newLine()" shape=ellipse]
47 [label="13:CtTypeReferenceImpl@String" shape=ellipse]
48 [label="13:CtExecutableReferenceImpl@getFilteredTrace(java.lang.Throwable)" shape=ellipse]
49 [label="13:CtVirtualElement@getFilteredTrace" shape=ellipse]
50 [label="13:CtTypeAccessImpl@JUnitTestRunner" shape=ellipse]
51 [label="13:CtVariableReadImpl@t" shape=ellipse]
52 [label="13:CtInvocationImpl@JUnitTestRunner.getFilteredTrace(t)" shape=ellipse]
53 [label="13:CtVirtualElement@strace" shape=ellipse]
54 [label="13:CtLocalVariableImpl@String strace = JUnitTestRunner.getFilteredTrace(t)" shape=ellipse]
55 [label="14:CtExecutableReferenceImpl@write(java.lang.String)" shape=ellipse]
56 [label="14:CtVirtualElement@write" shape=ellipse]
57 [label="14:CtFieldReadImpl@wri" shape=ellipse]
58 [label="14:CtVariableReadImpl@strace" shape=ellipse]
59 [label="14:CtInvocationImpl@wri.write(strace)" shape=ellipse]
60 [label="15:CtExecutableReferenceImpl@newLine()" shape=ellipse]
61 [label="15:CtVirtualElement@newLine" shape=ellipse]
62 [label="15:CtFieldReadImpl@wri" shape=ellipse]
63 [label="15:CtInvocationImpl@wri.newLine()" shape=ellipse]
64 [label="8:CtBlockImpl@\{
    wri.write(type);
    wri.newLine();
    wri.write(t.getMessage());
    wri.newLine();
    String strace = JUnitTestRunner.getFilteredTrace(t);
    wri.write(strace);
    wri.newLine();
\}" shape=ellipse]
65 [label="16:CtVirtualElement@ex" shape=ellipse]
66 [label="16:CtTypeReferenceImpl@IOException" shape=ellipse]
67 [label="16:CtCatchVariableImpl@IOException ex" shape=ellipse]
68 [label="17:CtTypeReferenceImpl@BuildException" shape=ellipse]
69 [label="17:CtVariableReadImpl@ex" shape=ellipse]
70 [label="17:CtConstructorCallImpl@new BuildException(ex)" shape=ellipse]
71 [label="17:CtThrowImpl@throw new BuildException(ex)" shape=ellipse]
72 [label="16:CtBlockImpl@\{
    throw new BuildException(ex);
\}" shape=ellipse]
73 [label="16:CtCatchImpl@ catch (IOException ex) \{
    throw new BuildException(ex);
\}" shape=ellipse]
74 [label="8:CtTryImpl@try \{
    wri.write(type);
    wri.newLine();
    wri.write(t.getMessage());
    wri.newLine();
    String strace = JUnitTestRunner.getFilteredTrace(t);
    wri.write(strace);
    wri.newLine();
\} catch (IOException ex) \{
    throw new BuildException(ex);
\}" shape=ellipse]
75 [label="3:CtBlockImpl@\{
    if (test != null) \{
        endTest(test);
        failed.put(test, Boolean.TRUE);
    \}
    try \{
        wri.write(type);
        wri.newLine();
        wri.write(t.getMessage());
        wri.newLine();
        String strace = JUnitTestRunner.getFilteredTrace(t);
        wri.write(strace);
        wri.newLine();
    \} catch (IOException ex) \{
        throw new BuildException(ex);
    \}
\}" shape=ellipse]
76 [label="3:CtSynchronizedImpl@synchronized(wri) \{
    if (test != null) \{
        endTest(test);
        failed.put(test, Boolean.TRUE);
    \}
    try \{
        wri.write(type);
        wri.newLine();
        wri.write(t.getMessage());
        wri.newLine();
        String strace = JUnitTestRunner.getFilteredTrace(t);
        wri.write(strace);
        wri.newLine();
    \} catch (IOException ex) \{
        throw new BuildException(ex);
    \}
\}" shape=ellipse]
77 [label="2:CtBlockImpl@\{
    synchronized(wri) \{
        if (test != null) \{
            endTest(test);
            failed.put(test, Boolean.TRUE);
        \}
        try \{
            wri.write(type);
            wri.newLine();
            wri.write(t.getMessage());
            wri.newLine();
            String strace = JUnitTestRunner.getFilteredTrace(t);
            wri.write(strace);
            wri.newLine();
        \} catch (IOException ex) \{
            throw new BuildException(ex);
        \}
    \}
\}" shape=ellipse]
78 [label="2:CtMethodImpl@private void formatError(String type, Test test, Throwable t) \{
    synchronized(wri) \{
        if (test != null) \{
            endTest(test);
            failed.put(test, Boolean.TRUE);
        \}
        try \{
            wri.write(type);
            wri.newLine();
            wri.write(t.getMessage());
            wri.newLine();
            String strace = JUnitTestRunner.getFilteredTrace(t);
            wri.write(strace);
            wri.newLine();
        \} catch (IOException ex) \{
            throw new BuildException(ex);
        \}
    \}
\}" shape=ellipse]
79 [label="11:Update@UPDATE" shape=ellipse]
80 [label="11:CtInvocationImpl@String.valueOf(t.getMessage())" shape=ellipse]
81 [label="11:Insert@INSERT" shape=ellipse]
82 [label="11:CtInvocationImpl@wri.write(String.valueOf(t.getMessage()))" shape=ellipse]
83 [label="11:Move@MOVE" shape=ellipse]
84 [label="11:Move@MOVE" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
6 -> 7 [label="AST"];
8 -> 75 [label="Control Dep"];
8 -> 25 [label="Control Dep"];
8 -> 11 [label="Control Dep"];
8 -> 9 [label="Control Dep"];
8 -> 10 [label="Control Dep"];
8 -> 74 [label="Control Dep"];
8 -> 64 [label="Control Dep"];
8 -> 30 [label="Control Dep"];
8 -> 26 [label="Control Dep"];
8 -> 28 [label="Control Dep"];
8 -> 29 [label="Control Dep"];
8 -> 34 [label="Control Dep"];
8 -> 31 [label="Control Dep"];
8 -> 33 [label="Control Dep"];
8 -> 42 [label="Control Dep"];
8 -> 35 [label="Control Dep"];
8 -> 37 [label="Control Dep"];
8 -> 41 [label="Control Dep"];
8 -> 38 [label="Control Dep"];
8 -> 40 [label="Control Dep"];
8 -> 46 [label="Control Dep"];
8 -> 43 [label="Control Dep"];
8 -> 45 [label="Control Dep"];
8 -> 54 [label="Control Dep"];
8 -> 52 [label="Control Dep"];
8 -> 48 [label="Control Dep"];
8 -> 50 [label="Control Dep"];
8 -> 51 [label="Control Dep"];
8 -> 59 [label="Control Dep"];
8 -> 55 [label="Control Dep"];
8 -> 57 [label="Control Dep"];
8 -> 58 [label="Control Dep"];
8 -> 63 [label="Control Dep"];
8 -> 60 [label="Control Dep"];
8 -> 62 [label="Control Dep"];
8 -> 73 [label="Control Dep"];
8 -> 67 [label="Control Dep"];
11 -> 9 [label="AST"];
11 -> 10 [label="AST"];
11 -> 24 [label="Control Dep"];
11 -> 15 [label="Control Dep"];
11 -> 12 [label="Control Dep"];
11 -> 14 [label="Control Dep"];
11 -> 23 [label="Control Dep"];
11 -> 16 [label="Control Dep"];
11 -> 18 [label="Control Dep"];
11 -> 19 [label="Control Dep"];
11 -> 21 [label="Control Dep"];
11 -> 20 [label="Control Dep"];
15 -> 13 [label="AST"];
15 -> 12 [label="AST"];
15 -> 14 [label="AST"];
21 -> 20 [label="AST"];
21 -> 22 [label="AST"];
23 -> 17 [label="AST"];
23 -> 18 [label="AST"];
23 -> 16 [label="AST"];
23 -> 19 [label="AST"];
23 -> 21 [label="AST"];
24 -> 15 [label="AST"];
24 -> 23 [label="AST"];
25 -> 11 [label="AST"];
25 -> 24 [label="AST"];
30 -> 27 [label="AST"];
30 -> 28 [label="AST"];
30 -> 26 [label="AST"];
30 -> 29 [label="AST"];
34 -> 32 [label="AST"];
34 -> 33 [label="AST"];
34 -> 31 [label="AST"];
37 -> 83 [label="Action"];
41 -> 39 [label="AST"];
41 -> 40 [label="AST"];
41 -> 38 [label="AST"];
42 -> 36 [label="AST"];
42 -> 37 [label="AST"];
42 -> 35 [label="AST"];
42 -> 41 [label="AST"];
42 -> 79 [label="Action"];
42 -> 84 [label="Action"];
46 -> 44 [label="AST"];
46 -> 45 [label="AST"];
46 -> 43 [label="AST"];
51 -> 53 [label="Data Dep"];
52 -> 49 [label="AST"];
52 -> 50 [label="AST"];
52 -> 48 [label="AST"];
52 -> 51 [label="AST"];
53 -> 58 [label="Define-Use"];
54 -> 53 [label="AST"];
54 -> 47 [label="AST"];
54 -> 52 [label="AST"];
59 -> 56 [label="AST"];
59 -> 57 [label="AST"];
59 -> 55 [label="AST"];
59 -> 58 [label="AST"];
63 -> 61 [label="AST"];
63 -> 62 [label="AST"];
63 -> 60 [label="AST"];
64 -> 30 [label="AST"];
64 -> 34 [label="AST"];
64 -> 42 [label="AST"];
64 -> 46 [label="AST"];
64 -> 54 [label="AST"];
64 -> 59 [label="AST"];
64 -> 63 [label="AST"];
65 -> 69 [label="Define-Use"];
67 -> 65 [label="AST"];
67 -> 66 [label="AST"];
67 -> 72 [label="Control Dep"];
67 -> 71 [label="Control Dep"];
67 -> 70 [label="Control Dep"];
67 -> 69 [label="Control Dep"];
70 -> 69 [label="AST"];
71 -> 70 [label="AST"];
72 -> 71 [label="AST"];
73 -> 67 [label="AST"];
73 -> 72 [label="AST"];
74 -> 64 [label="AST"];
74 -> 73 [label="AST"];
74 -> 81 [label="Action"];
75 -> 25 [label="AST"];
75 -> 74 [label="AST"];
76 -> 8 [label="AST"];
76 -> 75 [label="AST"];
77 -> 76 [label="AST"];
78 -> 1 [label="AST"];
78 -> 0 [label="AST"];
78 -> 2 [label="AST"];
78 -> 4 [label="AST"];
78 -> 6 [label="AST"];
78 -> 77 [label="AST"];
79 -> 80 [label="Action"];
81 -> 82 [label="Action"];
82 -> 80 [label="AST"];
83 -> 82 [label="Action"];
84 -> 82 [label="Action"];
}