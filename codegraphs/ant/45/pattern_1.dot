digraph "Pattern" {
0 [label="formatError#?,String,Test,Throwable#9:INSERT
formatError#?,String,Test,Throwable#11:INSERT" shape=ellipse]
1 [label="formatError#?,String,Test,Throwable#6:try \{
    resultWriter.write(formatTest(test) + type);
    resultWriter.newLine();
    resultWriter.write(error.getMessage());
    resultWriter.newLine();
    String strace = JUnitTestRunner.getFilteredTrace(error);
    resultWriter.write(strace);
    resultWriter.newLine();
    resultWriter.newLine();
\} catch (IOException ex) \{
    throw new BuildException(ex);
\}
formatError#?,String,Test,Throwable#8:try \{
    wri.write(type);
    wri.newLine();
    wri.write(t.getMessage());
    wri.newLine();
    String strace = JUnitTestRunner.getFilteredTrace(t);
    wri.write(strace);
    wri.newLine();
\} catch (IOException ex) \{
    throw new BuildException(ex);
\}" shape=ellipse]
2 [label="formatError#?,String,Test,Throwable#2:\{
    if (test != null) \{
        endTest(test);
    \}
    try \{
        resultWriter.write(formatTest(test) + type);
        resultWriter.newLine();
        resultWriter.write(error.getMessage());
        resultWriter.newLine();
        String strace = JUnitTestRunner.getFilteredTrace(error);
        resultWriter.write(strace);
        resultWriter.newLine();
        resultWriter.newLine();
    \} catch (IOException ex) \{
        throw new BuildException(ex);
    \}
\}
formatError#?,String,Test,Throwable#3:\{
    if (test != null) \{
        endTest(test);
        failed.put(test, Boolean.TRUE);
    \}
    try \{
        wri.write(type);
        wri.newLine();
        wri.write(t.getMessage());
        wri.newLine();
        String strace = JUnitTestRunner.getFilteredTrace(t);
        wri.write(strace);
        wri.newLine();
    \} catch (IOException ex) \{
        throw new BuildException(ex);
    \}
\}" shape=ellipse]
3 [label="formatError#?,String,Test,Throwable#2:protected synchronized void formatError(String type, Test test, Throwable error) \{
    if (test != null) \{
        endTest(test);
    \}
    try \{
        resultWriter.write(formatTest(test) + type);
        resultWriter.newLine();
        resultWriter.write(error.getMessage());
        resultWriter.newLine();
        String strace = JUnitTestRunner.getFilteredTrace(error);
        resultWriter.write(strace);
        resultWriter.newLine();
        resultWriter.newLine();
    \} catch (IOException ex) \{
        throw new BuildException(ex);
    \}
\}" shape=ellipse]
4 [label="formatError#?,String,Test,Throwable#3:if (test != null) \{
    endTest(test);
\}
formatError#?,String,Test,Throwable#4:if (test != null) \{
    endTest(test);
    failed.put(test, Boolean.TRUE);
\}" shape=ellipse]
5 [label="formatError#?,String,Test,Throwable#6:\{
    resultWriter.write(formatTest(test) + type);
    resultWriter.newLine();
    resultWriter.write(error.getMessage());
    resultWriter.newLine();
    String strace = JUnitTestRunner.getFilteredTrace(error);
    resultWriter.write(strace);
    resultWriter.newLine();
    resultWriter.newLine();
\}
formatError#?,String,Test,Throwable#8:\{
    wri.write(type);
    wri.newLine();
    wri.write(t.getMessage());
    wri.newLine();
    String strace = JUnitTestRunner.getFilteredTrace(t);
    wri.write(strace);
    wri.newLine();
\}" shape=ellipse]
6 [label="formatError#?,String,Test,Throwable#7:resultWriter.write(formatTest(test) + type)
formatError#?,String,Test,Throwable#9:wri.write(type)" shape=ellipse]
7 [label="formatError#?,String,Test,Throwable#8:resultWriter.newLine()
formatError#?,String,Test,Throwable#10:wri.newLine()" shape=ellipse]
8 [label="formatError#?,String,Test,Throwable#9:resultWriter.write(error.getMessage())
formatError#?,String,Test,Throwable#11:wri.write(t.getMessage())" shape=ellipse]
9 [label="formatError#?,String,Test,Throwable#10:resultWriter.newLine()
formatError#?,String,Test,Throwable#12:wri.newLine()" shape=ellipse]
10 [label="formatError#?,String,Test,Throwable#11:String strace = JUnitTestRunner.getFilteredTrace(error)
formatError#?,String,Test,Throwable#13:String strace = JUnitTestRunner.getFilteredTrace(t)" shape=ellipse]
11 [label="formatError#?,String,Test,Throwable#12:resultWriter.write(strace)
formatError#?,String,Test,Throwable#14:wri.write(strace)" shape=ellipse]
12 [label="formatError#?,String,Test,Throwable#13:resultWriter.newLine()
formatError#?,String,Test,Throwable#15:wri.newLine()" shape=ellipse]
13 [label="formatError#?,String,Test,Throwable#14:resultWriter.newLine()" shape=ellipse]
14 [label="formatError#?,String,Test,Throwable#15: catch (IOException ex) \{
    throw new BuildException(ex);
\}
formatError#?,String,Test,Throwable#16: catch (IOException ex) \{
    throw new BuildException(ex);
\}" shape=ellipse]
15 [label="formatError#?,String,Test,Throwable#15:IOException ex
formatError#?,String,Test,Throwable#16:IOException ex" shape=ellipse]
16 [label="formatError#?,String,Test,Throwable#15:\{
    throw new BuildException(ex);
\}" shape=ellipse]
17 [label="formatError#?,String,Test,Throwable#9:resultWriter.write(String.valueOf(error.getMessage()))
formatError#?,String,Test,Throwable#11:wri.write(String.valueOf(t.getMessage()))" shape=ellipse]
18 [label="formatError#?,String,Test,Throwable#9:MOVE
formatError#?,String,Test,Throwable#11:MOVE" shape=ellipse]
19 [label="formatError#?,String,Test,Throwable#9:resultWriter
formatError#?,String,Test,Throwable#11:wri" shape=ellipse]
20 [label="formatError#?,String,Test,Throwable#9:MOVE
formatError#?,String,Test,Throwable#11:MOVE" shape=ellipse]
21 [label="formatError#?,String,Test,Throwable#10:wri" shape=ellipse]
22 [label="formatError#?,String,Test,Throwable#11:t" shape=ellipse]
23 [label="formatError#?,String,Test,Throwable#9:wri" shape=ellipse]
24 [label="formatError#?,String,Test,Throwable#9:type" shape=ellipse]
25 [label="formatError#?,String,Test,Throwable#13:t" shape=ellipse]
26 [label="formatError#?,String,Test,Throwable#11:write(java.lang.String)" shape=ellipse]
27 [label="formatError#?,String,Test,Throwable#15:newLine()" shape=ellipse]
28 [label="formatError#?,String,Test,Throwable#11:getMessage()" shape=ellipse]
29 [label="formatError#?,String,Test,Throwable#10:newLine()" shape=ellipse]
30 [label="formatError#?,String,Test,Throwable#13:JUnitTestRunner" shape=ellipse]
31 [label="formatError#?,String,Test,Throwable#-1:wri" shape=ellipse]
32 [label="formatError#?,String,Test,Throwable#13:getFilteredTrace(java.lang.Throwable)" shape=ellipse]
33 [label="formatError#?,String,Test,Throwable#4:null" shape=ellipse]
34 [label="formatError#?,String,Test,Throwable#12:wri" shape=ellipse]
35 [label="formatError#?,String,Test,Throwable#14:wri" shape=ellipse]
36 [label="formatError#?,String,Test,Throwable#13:JUnitTestRunner.getFilteredTrace(t)" shape=ellipse]
37 [label="formatError#?,String,Test,Throwable#14:strace" shape=ellipse]
38 [label="formatError#?,String,Test,Throwable#3:synchronized(wri) \{
    if (test != null) \{
        endTest(test);
        failed.put(test, Boolean.TRUE);
    \}
    try \{
        wri.write(type);
        wri.newLine();
        wri.write(t.getMessage());
        wri.newLine();
        String strace = JUnitTestRunner.getFilteredTrace(t);
        wri.write(strace);
        wri.newLine();
    \} catch (IOException ex) \{
        throw new BuildException(ex);
    \}
\}" shape=ellipse]
39 [label="formatError#?,String,Test,Throwable#3:wri" shape=ellipse]
40 [label="formatError#?,String,Test,Throwable#4:test" shape=ellipse]
41 [label="formatError#?,String,Test,Throwable#12:newLine()" shape=ellipse]
42 [label="formatError#?,String,Test,Throwable#4:test != null" shape=ellipse]
43 [label="formatError#?,String,Test,Throwable#11:t.getMessage()" shape=ellipse]
44 [label="formatError#?,String,Test,Throwable#15:wri" shape=ellipse]
45 [label="formatError#?,String,Test,Throwable#14:write(java.lang.String)" shape=ellipse]
46 [label="formatError#?,String,Test,Throwable#9:write(java.lang.String)" shape=ellipse]
0 -> 17 [label="Action:2"];
1 -> 0 [label="Action:2"];
1 -> 5 [label="AST:2"];
1 -> 14 [label="AST:2"];
2 -> 1 [label="AST:2"];
2 -> 4 [label="AST:2"];
3 -> 2 [label="AST:1"];
4 -> 42 [label="AST:1"];
5 -> 6 [label="AST:2"];
5 -> 7 [label="AST:2"];
5 -> 8 [label="AST:2"];
5 -> 9 [label="AST:2"];
5 -> 10 [label="AST:2"];
5 -> 11 [label="AST:2"];
5 -> 12 [label="AST:2"];
5 -> 13 [label="AST:1"];
6 -> 23 [label="AST:1"];
6 -> 24 [label="AST:1"];
6 -> 46 [label="AST:1"];
7 -> 21 [label="AST:1"];
7 -> 29 [label="AST:1"];
8 -> 19 [label="AST:2"];
8 -> 20 [label="Action:2"];
8 -> 26 [label="AST:1"];
8 -> 43 [label="AST:1"];
9 -> 34 [label="AST:1"];
9 -> 41 [label="AST:1"];
10 -> 36 [label="AST:1"];
11 -> 35 [label="AST:1"];
11 -> 37 [label="AST:1"];
11 -> 45 [label="AST:1"];
12 -> 27 [label="AST:1"];
12 -> 44 [label="AST:1"];
14 -> 15 [label="AST:2"];
14 -> 16 [label="AST:1"];
15 -> 16 [label="Control Dep:1"];
18 -> 17 [label="Action:2"];
19 -> 18 [label="Action:2"];
20 -> 17 [label="Action:2"];
36 -> 25 [label="AST:1"];
36 -> 30 [label="AST:1"];
36 -> 32 [label="AST:1"];
38 -> 39 [label="AST:1"];
38 -> 2 [label="AST:1"];
39 -> 21 [label="Control Dep:1"];
39 -> 22 [label="Control Dep:1"];
39 -> 23 [label="Control Dep:1"];
39 -> 24 [label="Control Dep:1"];
39 -> 25 [label="Control Dep:1"];
39 -> 26 [label="Control Dep:1"];
39 -> 27 [label="Control Dep:1"];
39 -> 28 [label="Control Dep:1"];
39 -> 29 [label="Control Dep:1"];
39 -> 30 [label="Control Dep:1"];
39 -> 31 [label="AST:1"];
39 -> 32 [label="Control Dep:1"];
39 -> 33 [label="Control Dep:1"];
39 -> 34 [label="Control Dep:1"];
39 -> 35 [label="Control Dep:1"];
39 -> 36 [label="Control Dep:1"];
39 -> 37 [label="Control Dep:1"];
39 -> 2 [label="Control Dep:1"];
39 -> 4 [label="Control Dep:1"];
39 -> 42 [label="Control Dep:1"];
39 -> 40 [label="Control Dep:1"];
39 -> 1 [label="Control Dep:1"];
39 -> 5 [label="Control Dep:1"];
39 -> 6 [label="Control Dep:1"];
39 -> 46 [label="Control Dep:1"];
39 -> 7 [label="Control Dep:1"];
39 -> 8 [label="Control Dep:1"];
39 -> 19 [label="Control Dep:1"];
39 -> 43 [label="Control Dep:1"];
39 -> 9 [label="Control Dep:1"];
39 -> 41 [label="Control Dep:1"];
39 -> 10 [label="Control Dep:1"];
39 -> 11 [label="Control Dep:1"];
39 -> 45 [label="Control Dep:1"];
39 -> 12 [label="Control Dep:1"];
39 -> 44 [label="Control Dep:1"];
39 -> 14 [label="Control Dep:1"];
39 -> 15 [label="Control Dep:1"];
42 -> 33 [label="AST:1"];
42 -> 40 [label="AST:1"];
43 -> 22 [label="AST:1"];
43 -> 28 [label="AST:1"];
}