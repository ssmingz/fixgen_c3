digraph "JUnitTestRunner#?,JUnitTest,boolean,boolean,ClassLoader" {
0 [label="2:CtVirtualElement@JUnitTestRunner" shape=ellipse]
1 [label="3:CtParameterImpl@JUnitTest test" shape=ellipse]
2 [label="3:CtTypeReferenceImpl@JUnitTest" shape=ellipse]
3 [label="3:CtParameterImpl@boolean haltOnError" shape=ellipse]
4 [label="3:CtTypeReferenceImpl@boolean" shape=ellipse]
5 [label="3:CtParameterImpl@boolean haltOnFailure" shape=ellipse]
6 [label="3:CtTypeReferenceImpl@boolean" shape=ellipse]
7 [label="3:CtParameterImpl@ClassLoader loader" shape=ellipse]
8 [label="3:CtTypeReferenceImpl@ClassLoader" shape=ellipse]
9 [label="4:CtFieldWriteImpl@this.junitTest" shape=ellipse]
10 [label="4:CtThisAccessImpl@this" shape=ellipse]
11 [label="4:CtVariableReadImpl@test" shape=ellipse]
12 [label="4:CtAssignmentImpl@this.junitTest = test" shape=ellipse]
13 [label="5:CtFieldWriteImpl@this.haltOnError" shape=ellipse]
14 [label="5:CtThisAccessImpl@this" shape=ellipse]
15 [label="5:CtVariableReadImpl@haltOnError" shape=ellipse]
16 [label="5:CtAssignmentImpl@this.haltOnError = haltOnError" shape=ellipse]
17 [label="6:CtFieldWriteImpl@this.haltOnFailure" shape=ellipse]
18 [label="6:CtThisAccessImpl@this" shape=ellipse]
19 [label="6:CtVariableReadImpl@haltOnFailure" shape=ellipse]
20 [label="6:CtAssignmentImpl@this.haltOnFailure = haltOnFailure" shape=ellipse]
21 [label="8:CtTypeReferenceImpl@Class" shape=ellipse]
22 [label="8:CtLiteralImpl@null" shape=ellipse]
23 [label="8:CtVirtualElement@testClass" shape=ellipse]
24 [label="8:CtLocalVariableImpl@Class testClass = null" shape=ellipse]
25 [label="9:CtVariableReadImpl@loader" shape=ellipse]
26 [label="9:CtLiteralImpl@null" shape=ellipse]
27 [label="9:CtBinaryOperatorImpl@loader == null" shape=ellipse]
28 [label="10:CtVariableWriteImpl@testClass" shape=ellipse]
29 [label="10:CtExecutableReferenceImpl@forName(java.lang.String)" shape=ellipse]
30 [label="10:CtVirtualElement@forName" shape=ellipse]
31 [label="10:CtTypeAccessImpl@Class" shape=ellipse]
32 [label="10:CtExecutableReferenceImpl@getName()" shape=ellipse]
33 [label="10:CtVirtualElement@getName" shape=ellipse]
34 [label="10:CtVariableReadImpl@test" shape=ellipse]
35 [label="10:CtInvocationImpl@test.getName()" shape=ellipse]
36 [label="10:CtInvocationImpl@Class.forName(test.getName())" shape=ellipse]
37 [label="10:CtAssignmentImpl@testClass = Class.forName(test.getName())" shape=ellipse]
38 [label="9:CtBlockImpl@\{
    testClass = Class.forName(test.getName());
\}" shape=ellipse]
39 [label="12:CtVariableWriteImpl@testClass" shape=ellipse]
40 [label="12:CtExecutableReferenceImpl@loadClass(java.lang.String)" shape=ellipse]
41 [label="12:CtVirtualElement@loadClass" shape=ellipse]
42 [label="12:CtVariableReadImpl@loader" shape=ellipse]
43 [label="12:CtExecutableReferenceImpl@getName()" shape=ellipse]
44 [label="12:CtVirtualElement@getName" shape=ellipse]
45 [label="12:CtVariableReadImpl@test" shape=ellipse]
46 [label="12:CtInvocationImpl@test.getName()" shape=ellipse]
47 [label="12:CtInvocationImpl@loader.loadClass(test.getName())" shape=ellipse]
48 [label="12:CtAssignmentImpl@testClass = loader.loadClass(test.getName())" shape=ellipse]
49 [label="11:CtBlockImpl@\{
    testClass = loader.loadClass(test.getName());
\}" shape=ellipse]
50 [label="9:CtIfImpl@if (loader == null) \{
    testClass = Class.forName(test.getName());
\} else \{
    testClass = loader.loadClass(test.getName());
\}" shape=ellipse]
51 [label="14:CtTypeReferenceImpl@Method" shape=ellipse]
52 [label="14:CtLiteralImpl@null" shape=ellipse]
53 [label="14:CtVirtualElement@suiteMethod" shape=ellipse]
54 [label="14:CtLocalVariableImpl@Method suiteMethod = null" shape=ellipse]
55 [label="16:CtVariableWriteImpl@suiteMethod" shape=ellipse]
56 [label="16:CtExecutableReferenceImpl@getMethod(java.lang.String,java.lang.Class[])" shape=ellipse]
57 [label="16:CtVirtualElement@getMethod" shape=ellipse]
58 [label="16:CtVariableReadImpl@testClass" shape=ellipse]
59 [label="16:CtLiteralImpl@\"suite\"" shape=ellipse]
60 [label="16:CtNewArrayImpl@new Class[0]" shape=ellipse]
61 [label="16:CtLiteralImpl@0" shape=ellipse]
62 [label="16:CtInvocationImpl@testClass.getMethod(\"suite\", new Class[0])" shape=ellipse]
63 [label="16:CtAssignmentImpl@suiteMethod = testClass.getMethod(\"suite\", new Class[0])" shape=ellipse]
64 [label="15:CtBlockImpl@\{
    suiteMethod = testClass.getMethod(\"suite\", new Class[0]);
\}" shape=ellipse]
65 [label="17:CtVirtualElement@e" shape=ellipse]
66 [label="17:CtTypeReferenceImpl@Exception" shape=ellipse]
67 [label="17:CtCatchVariableImpl@Exception e" shape=ellipse]
68 [label="17:CtBlockImpl@\{
\}" shape=ellipse]
69 [label="17:CtCatchImpl@ catch (Exception e) \{
\}" shape=ellipse]
70 [label="15:CtTryImpl@try \{
    suiteMethod = testClass.getMethod(\"suite\", new Class[0]);
\} catch (Exception e) \{
\}" shape=ellipse]
71 [label="19:CtVariableReadImpl@suiteMethod" shape=ellipse]
72 [label="19:CtLiteralImpl@null" shape=ellipse]
73 [label="19:CtBinaryOperatorImpl@suiteMethod != null" shape=ellipse]
74 [label="20:CtFieldWriteImpl@suite" shape=ellipse]
75 [label="20:CtExecutableReferenceImpl@invoke(<unknown>,java.lang.Class[])" shape=ellipse]
76 [label="20:CtVirtualElement@invoke" shape=ellipse]
77 [label="20:CtVariableReadImpl@suiteMethod" shape=ellipse]
78 [label="20:CtLiteralImpl@null" shape=ellipse]
79 [label="20:CtNewArrayImpl@new Class[0]" shape=ellipse]
80 [label="20:CtLiteralImpl@0" shape=ellipse]
81 [label="20:CtInvocationImpl@((Test) (suiteMethod.invoke(null, new Class[0])))" shape=ellipse]
82 [label="20:CtTypeReferenceImpl@Test" shape=ellipse]
83 [label="20:CtAssignmentImpl@suite = ((Test) (suiteMethod.invoke(null, new Class[0])))" shape=ellipse]
84 [label="19:CtBlockImpl@\{
    suite = ((Test) (suiteMethod.invoke(null, new Class[0])));
\}" shape=ellipse]
85 [label="22:CtFieldWriteImpl@suite" shape=ellipse]
86 [label="22:CtTypeReferenceImpl@TestSuite" shape=ellipse]
87 [label="22:CtVariableReadImpl@testClass" shape=ellipse]
88 [label="22:CtConstructorCallImpl@new TestSuite(testClass)" shape=ellipse]
89 [label="22:CtAssignmentImpl@suite = new TestSuite(testClass)" shape=ellipse]
90 [label="21:CtBlockImpl@\{
    suite = new TestSuite(testClass);
\}" shape=ellipse]
91 [label="19:CtIfImpl@if (suiteMethod != null) \{
    suite = ((Test) (suiteMethod.invoke(null, new Class[0])));
\} else \{
    suite = new TestSuite(testClass);
\}" shape=ellipse]
92 [label="7:CtBlockImpl@\{
    Class testClass = null;
    if (loader == null) \{
        testClass = Class.forName(test.getName());
    \} else \{
        testClass = loader.loadClass(test.getName());
    \}
    Method suiteMethod = null;
    try \{
        suiteMethod = testClass.getMethod(\"suite\", new Class[0]);
    \} catch (Exception e) \{
    \}
    if (suiteMethod != null) \{
        suite = ((Test) (suiteMethod.invoke(null, new Class[0])));
    \} else \{
        suite = new TestSuite(testClass);
    \}
\}" shape=ellipse]
93 [label="24:CtVirtualElement@e" shape=ellipse]
94 [label="24:CtTypeReferenceImpl@Exception" shape=ellipse]
95 [label="24:CtCatchVariableImpl@Exception e" shape=ellipse]
96 [label="25:CtFieldWriteImpl@retCode" shape=ellipse]
97 [label="25:CtFieldReadImpl@ERRORS" shape=ellipse]
98 [label="25:CtAssignmentImpl@retCode = ERRORS" shape=ellipse]
99 [label="26:CtFieldWriteImpl@exception" shape=ellipse]
100 [label="26:CtVariableReadImpl@e" shape=ellipse]
101 [label="26:CtAssignmentImpl@exception = e" shape=ellipse]
102 [label="24:CtBlockImpl@\{
    retCode = ERRORS;
    exception = e;
\}" shape=ellipse]
103 [label="24:CtCatchImpl@ catch (Exception e) \{
    retCode = ERRORS;
    exception = e;
\}" shape=ellipse]
104 [label="7:CtTryImpl@try \{
    Class testClass = null;
    if (loader == null) \{
        testClass = Class.forName(test.getName());
    \} else \{
        testClass = loader.loadClass(test.getName());
    \}
    Method suiteMethod = null;
    try \{
        suiteMethod = testClass.getMethod(\"suite\", new Class[0]);
    \} catch (Exception e) \{
    \}
    if (suiteMethod != null) \{
        suite = ((Test) (suiteMethod.invoke(null, new Class[0])));
    \} else \{
        suite = new TestSuite(testClass);
    \}
\} catch (Exception e) \{
    retCode = ERRORS;
    exception = e;
\}" shape=ellipse]
105 [label="3:CtBlockImpl@\{
    this.junitTest = test;
    this.haltOnError = haltOnError;
    this.haltOnFailure = haltOnFailure;
    try \{
        Class testClass = null;
        if (loader == null) \{
            testClass = Class.forName(test.getName());
        \} else \{
            testClass = loader.loadClass(test.getName());
        \}
        Method suiteMethod = null;
        try \{
            suiteMethod = testClass.getMethod(\"suite\", new Class[0]);
        \} catch (Exception e) \{
        \}
        if (suiteMethod != null) \{
            suite = ((Test) (suiteMethod.invoke(null, new Class[0])));
        \} else \{
            suite = new TestSuite(testClass);
        \}
    \} catch (Exception e) \{
        retCode = ERRORS;
        exception = e;
    \}
\}" shape=ellipse]
106 [label="2:CtMethodImpl@public  JUnitTestRunner(JUnitTest test, boolean haltOnError, boolean haltOnFailure, ClassLoader loader) \{
    this.junitTest = test;
    this.haltOnError = haltOnError;
    this.haltOnFailure = haltOnFailure;
    try \{
        Class testClass = null;
        if (loader == null) \{
            testClass = Class.forName(test.getName());
        \} else \{
            testClass = loader.loadClass(test.getName());
        \}
        Method suiteMethod = null;
        try \{
            suiteMethod = testClass.getMethod(\"suite\", new Class[0]);
        \} catch (Exception e) \{
        \}
        if (suiteMethod != null) \{
            suite = ((Test) (suiteMethod.invoke(null, new Class[0])));
        \} else \{
            suite = new TestSuite(testClass);
        \}
    \} catch (Exception e) \{
        retCode = ERRORS;
        exception = e;
    \}
\}" shape=ellipse]
107 [label="13:Insert@INSERT" shape=ellipse]
108 [label="13:CtInvocationImpl@AntClassLoader.initializeClass(testClass)" shape=ellipse]
1 -> 2 [label="AST"];
3 -> 4 [label="AST"];
5 -> 6 [label="AST"];
7 -> 8 [label="AST"];
9 -> 10 [label="AST"];
11 -> 9 [label="Data Dep"];
12 -> 9 [label="AST"];
12 -> 11 [label="AST"];
13 -> 14 [label="AST"];
15 -> 13 [label="Data Dep"];
16 -> 13 [label="AST"];
16 -> 15 [label="AST"];
17 -> 18 [label="AST"];
19 -> 17 [label="Data Dep"];
20 -> 17 [label="AST"];
20 -> 19 [label="AST"];
23 -> 58 [label="Define-Use"];
23 -> 87 [label="Define-Use"];
24 -> 23 [label="AST"];
24 -> 21 [label="AST"];
24 -> 22 [label="AST"];
27 -> 25 [label="AST"];
27 -> 26 [label="AST"];
27 -> 38 [label="Control Dep"];
27 -> 37 [label="Control Dep"];
27 -> 28 [label="Control Dep"];
27 -> 36 [label="Control Dep"];
27 -> 29 [label="Control Dep"];
27 -> 31 [label="Control Dep"];
27 -> 35 [label="Control Dep"];
27 -> 32 [label="Control Dep"];
27 -> 34 [label="Control Dep"];
27 -> 49 [label="Control Dep"];
27 -> 48 [label="Control Dep"];
27 -> 39 [label="Control Dep"];
27 -> 47 [label="Control Dep"];
27 -> 40 [label="Control Dep"];
27 -> 42 [label="Control Dep"];
27 -> 46 [label="Control Dep"];
27 -> 43 [label="Control Dep"];
27 -> 45 [label="Control Dep"];
28 -> 58 [label="Define-Use"];
28 -> 87 [label="Define-Use"];
34 -> 28 [label="Data Dep"];
35 -> 33 [label="AST"];
35 -> 34 [label="AST"];
35 -> 32 [label="AST"];
36 -> 30 [label="AST"];
36 -> 31 [label="AST"];
36 -> 29 [label="AST"];
36 -> 35 [label="AST"];
37 -> 28 [label="AST"];
37 -> 36 [label="AST"];
38 -> 37 [label="AST"];
39 -> 58 [label="Define-Use"];
39 -> 87 [label="Define-Use"];
42 -> 39 [label="Data Dep"];
45 -> 39 [label="Data Dep"];
46 -> 44 [label="AST"];
46 -> 45 [label="AST"];
46 -> 43 [label="AST"];
47 -> 41 [label="AST"];
47 -> 42 [label="AST"];
47 -> 40 [label="AST"];
47 -> 46 [label="AST"];
48 -> 39 [label="AST"];
48 -> 47 [label="AST"];
49 -> 48 [label="AST"];
49 -> 107 [label="Action"];
50 -> 27 [label="AST"];
50 -> 38 [label="AST"];
50 -> 49 [label="AST"];
54 -> 53 [label="AST"];
54 -> 51 [label="AST"];
54 -> 52 [label="AST"];
55 -> 71 [label="Define-Use"];
55 -> 77 [label="Define-Use"];
58 -> 55 [label="Data Dep"];
60 -> 61 [label="AST"];
62 -> 57 [label="AST"];
62 -> 58 [label="AST"];
62 -> 56 [label="AST"];
62 -> 59 [label="AST"];
62 -> 60 [label="AST"];
63 -> 55 [label="AST"];
63 -> 62 [label="AST"];
64 -> 63 [label="AST"];
67 -> 65 [label="AST"];
67 -> 66 [label="AST"];
67 -> 68 [label="Control Dep"];
69 -> 67 [label="AST"];
69 -> 68 [label="AST"];
70 -> 64 [label="AST"];
70 -> 69 [label="AST"];
73 -> 71 [label="AST"];
73 -> 72 [label="AST"];
73 -> 84 [label="Control Dep"];
73 -> 83 [label="Control Dep"];
73 -> 74 [label="Control Dep"];
73 -> 81 [label="Control Dep"];
73 -> 75 [label="Control Dep"];
73 -> 77 [label="Control Dep"];
73 -> 78 [label="Control Dep"];
73 -> 79 [label="Control Dep"];
73 -> 90 [label="Control Dep"];
73 -> 89 [label="Control Dep"];
73 -> 85 [label="Control Dep"];
73 -> 88 [label="Control Dep"];
73 -> 87 [label="Control Dep"];
77 -> 74 [label="Data Dep"];
79 -> 80 [label="AST"];
81 -> 76 [label="AST"];
81 -> 82 [label="AST"];
81 -> 77 [label="AST"];
81 -> 75 [label="AST"];
81 -> 78 [label="AST"];
81 -> 79 [label="AST"];
83 -> 74 [label="AST"];
83 -> 81 [label="AST"];
84 -> 83 [label="AST"];
87 -> 85 [label="Data Dep"];
88 -> 87 [label="AST"];
89 -> 85 [label="AST"];
89 -> 88 [label="AST"];
90 -> 89 [label="AST"];
91 -> 73 [label="AST"];
91 -> 84 [label="AST"];
91 -> 90 [label="AST"];
92 -> 24 [label="AST"];
92 -> 50 [label="AST"];
92 -> 54 [label="AST"];
92 -> 70 [label="AST"];
92 -> 91 [label="AST"];
93 -> 100 [label="Define-Use"];
95 -> 93 [label="AST"];
95 -> 94 [label="AST"];
95 -> 102 [label="Control Dep"];
95 -> 98 [label="Control Dep"];
95 -> 96 [label="Control Dep"];
95 -> 97 [label="Control Dep"];
95 -> 101 [label="Control Dep"];
95 -> 99 [label="Control Dep"];
95 -> 100 [label="Control Dep"];
97 -> 96 [label="Data Dep"];
98 -> 96 [label="AST"];
98 -> 97 [label="AST"];
100 -> 99 [label="Data Dep"];
101 -> 99 [label="AST"];
101 -> 100 [label="AST"];
102 -> 98 [label="AST"];
102 -> 101 [label="AST"];
103 -> 95 [label="AST"];
103 -> 102 [label="AST"];
104 -> 92 [label="AST"];
104 -> 103 [label="AST"];
105 -> 12 [label="AST"];
105 -> 16 [label="AST"];
105 -> 20 [label="AST"];
105 -> 104 [label="AST"];
106 -> 0 [label="AST"];
106 -> 1 [label="AST"];
106 -> 3 [label="AST"];
106 -> 5 [label="AST"];
106 -> 7 [label="AST"];
106 -> 105 [label="AST"];
107 -> 108 [label="Action"];
}