digraph "addToIncludeFileMap#?,File" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@addToIncludeFileMap" shape=ellipse]
2 [label="2:CtParameterImpl@File file" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@File" shape=ellipse]
4 [label="2:CtTypeReferenceImpl@BuildException" shape=ellipse]
5 [label="3:CtVariableReadImpl@file" shape=ellipse]
6 [label="3:CtLiteralImpl@null" shape=ellipse]
7 [label="3:CtBinaryOperatorImpl@file != null" shape=ellipse]
8 [label="4:CtExecutableReferenceImpl@exists()" shape=ellipse]
9 [label="4:CtVirtualElement@exists" shape=ellipse]
10 [label="4:CtVariableReadImpl@file" shape=ellipse]
11 [label="4:CtInvocationImpl@file.exists()" shape=ellipse]
12 [label="5:CtFieldReadImpl@property" shape=ellipse]
13 [label="5:CtLiteralImpl@null" shape=ellipse]
14 [label="5:CtBinaryOperatorImpl@property == null" shape=ellipse]
15 [label="6:CtTypeReferenceImpl@File" shape=ellipse]
16 [label="6:CtTypeReferenceImpl@File" shape=ellipse]
17 [label="6:CtExecutableReferenceImpl@getParent()" shape=ellipse]
18 [label="6:CtVirtualElement@getParent" shape=ellipse]
19 [label="6:CtVariableReadImpl@file" shape=ellipse]
20 [label="6:CtInvocationImpl@file.getParent()" shape=ellipse]
21 [label="6:CtExecutableReferenceImpl@getName()" shape=ellipse]
22 [label="6:CtVirtualElement@getName" shape=ellipse]
23 [label="6:CtVariableReadImpl@file" shape=ellipse]
24 [label="6:CtInvocationImpl@file.getName()" shape=ellipse]
25 [label="6:CtFieldReadImpl@fileext" shape=ellipse]
26 [label="6:CtBinaryOperatorImpl@file.getName() + fileext" shape=ellipse]
27 [label="6:CtConstructorCallImpl@new File(file.getParent(), file.getName() + fileext)" shape=ellipse]
28 [label="6:CtVirtualElement@dest" shape=ellipse]
29 [label="6:CtLocalVariableImpl@File dest = new File(file.getParent(), file.getName() + fileext)" shape=ellipse]
30 [label="7:CtFieldReadImpl@forceOverwrite" shape=ellipse]
31 [label="7:CtFieldReadImpl@isCondition" shape=ellipse]
32 [label="7:CtBinaryOperatorImpl@(forceOverwrite || isCondition)" shape=ellipse]
33 [label="7:CtExecutableReferenceImpl@lastModified()" shape=ellipse]
34 [label="7:CtVirtualElement@lastModified" shape=ellipse]
35 [label="7:CtVariableReadImpl@file" shape=ellipse]
36 [label="7:CtInvocationImpl@file.lastModified()" shape=ellipse]
37 [label="7:CtExecutableReferenceImpl@lastModified()" shape=ellipse]
38 [label="7:CtVirtualElement@lastModified" shape=ellipse]
39 [label="7:CtVariableReadImpl@dest" shape=ellipse]
40 [label="7:CtInvocationImpl@dest.lastModified()" shape=ellipse]
41 [label="7:CtBinaryOperatorImpl@(file.lastModified() > dest.lastModified())" shape=ellipse]
42 [label="7:CtBinaryOperatorImpl@(forceOverwrite || isCondition) || (file.lastModified() > dest.lastModified())" shape=ellipse]
43 [label="8:CtExecutableReferenceImpl@put(File,File)" shape=ellipse]
44 [label="8:CtVirtualElement@put" shape=ellipse]
45 [label="8:CtFieldReadImpl@includeFileMap" shape=ellipse]
46 [label="8:CtVariableReadImpl@file" shape=ellipse]
47 [label="8:CtVariableReadImpl@dest" shape=ellipse]
48 [label="8:CtInvocationImpl@includeFileMap.put(file, dest)" shape=ellipse]
49 [label="7:CtBlockImpl@\{
    includeFileMap.put(file, dest);
\}" shape=ellipse]
50 [label="10:CtExecutableReferenceImpl@log(<unknown>,<unknown>)" shape=ellipse]
51 [label="10:CtVirtualElement@log" shape=ellipse]
52 [label="10:CtVariableReadImpl@file" shape=ellipse]
53 [label="10:CtLiteralImpl@\" omitted as \"" shape=ellipse]
54 [label="10:CtBinaryOperatorImpl@(file + \" omitted as \")" shape=ellipse]
55 [label="10:CtVariableReadImpl@dest" shape=ellipse]
56 [label="10:CtBinaryOperatorImpl@((file + \" omitted as \") + dest)" shape=ellipse]
57 [label="10:CtLiteralImpl@\" is up to date.\"" shape=ellipse]
58 [label="10:CtBinaryOperatorImpl@((file + \" omitted as \") + dest) + \" is up to date.\"" shape=ellipse]
59 [label="10:CtTypeAccessImpl@MSG_VERBOSE" shape=ellipse]
60 [label="10:CtInvocationImpl@log(((file + \" omitted as \") + dest) + \" is up to date.\", MSG_VERBOSE)" shape=ellipse]
61 [label="9:CtBlockImpl@\{
    log(((file + \" omitted as \") + dest) + \" is up to date.\", MSG_VERBOSE);
\}" shape=ellipse]
62 [label="7:CtIfImpl@if ((forceOverwrite || isCondition) || (file.lastModified() > dest.lastModified())) \{
    includeFileMap.put(file, dest);
\} else \{
    log(((file + \" omitted as \") + dest) + \" is up to date.\", MSG_VERBOSE);
\}" shape=ellipse]
63 [label="5:CtBlockImpl@\{
    File dest = new File(file.getParent(), file.getName() + fileext);
    if ((forceOverwrite || isCondition) || (file.lastModified() > dest.lastModified())) \{
        includeFileMap.put(file, dest);
    \} else \{
        log(((file + \" omitted as \") + dest) + \" is up to date.\", MSG_VERBOSE);
    \}
\}" shape=ellipse]
64 [label="13:CtExecutableReferenceImpl@put(File)" shape=ellipse]
65 [label="13:CtVirtualElement@put" shape=ellipse]
66 [label="13:CtFieldReadImpl@includeFileMap" shape=ellipse]
67 [label="13:CtVariableReadImpl@file" shape=ellipse]
68 [label="13:CtFieldReadImpl@property" shape=ellipse]
69 [label="13:CtInvocationImpl@includeFileMap.put(file, property)" shape=ellipse]
70 [label="12:CtBlockImpl@\{
    includeFileMap.put(file, property);
\}" shape=ellipse]
71 [label="5:CtIfImpl@if (property == null) \{
    File dest = new File(file.getParent(), file.getName() + fileext);
    if ((forceOverwrite || isCondition) || (file.lastModified() > dest.lastModified())) \{
        includeFileMap.put(file, dest);
    \} else \{
        log(((file + \" omitted as \") + dest) + \" is up to date.\", MSG_VERBOSE);
    \}
\} else \{
    includeFileMap.put(file, property);
\}" shape=ellipse]
72 [label="4:CtBlockImpl@\{
    if (property == null) \{
        File dest = new File(file.getParent(), file.getName() + fileext);
        if ((forceOverwrite || isCondition) || (file.lastModified() > dest.lastModified())) \{
            includeFileMap.put(file, dest);
        \} else \{
            log(((file + \" omitted as \") + dest) + \" is up to date.\", MSG_VERBOSE);
        \}
    \} else \{
        includeFileMap.put(file, property);
    \}
\}" shape=ellipse]
73 [label="16:CtTypeReferenceImpl@String" shape=ellipse]
74 [label="17:CtLiteralImpl@\"Could not find file \"" shape=ellipse]
75 [label="17:CtExecutableReferenceImpl@getAbsolutePath()" shape=ellipse]
76 [label="17:CtVirtualElement@getAbsolutePath" shape=ellipse]
77 [label="17:CtVariableReadImpl@file" shape=ellipse]
78 [label="17:CtInvocationImpl@file.getAbsolutePath()" shape=ellipse]
79 [label="17:CtBinaryOperatorImpl@(\"Could not find file \" + file.getAbsolutePath())" shape=ellipse]
80 [label="17:CtLiteralImpl@\" to generate checksum for.\"" shape=ellipse]
81 [label="17:CtBinaryOperatorImpl@(\"Could not find file \" + file.getAbsolutePath()) + \" to generate checksum for.\"" shape=ellipse]
82 [label="16:CtVirtualElement@message" shape=ellipse]
83 [label="16:CtLocalVariableImpl@String message = (\"Could not find file \" + file.getAbsolutePath()) + \" to generate checksum for.\"" shape=ellipse]
84 [label="18:CtExecutableReferenceImpl@log(java.lang.String)" shape=ellipse]
85 [label="18:CtVirtualElement@log" shape=ellipse]
86 [label="18:CtVariableReadImpl@message" shape=ellipse]
87 [label="18:CtInvocationImpl@log(message)" shape=ellipse]
88 [label="19:CtTypeReferenceImpl@BuildException" shape=ellipse]
89 [label="19:CtVariableReadImpl@message" shape=ellipse]
90 [label="19:CtFieldReadImpl@location" shape=ellipse]
91 [label="19:CtConstructorCallImpl@new BuildException(message, location)" shape=ellipse]
92 [label="19:CtThrowImpl@throw new BuildException(message, location)" shape=ellipse]
93 [label="15:CtBlockImpl@\{
    String message = (\"Could not find file \" + file.getAbsolutePath()) + \" to generate checksum for.\";
    log(message);
    throw new BuildException(message, location);
\}" shape=ellipse]
94 [label="4:CtIfImpl@if (file.exists()) \{
    if (property == null) \{
        File dest = new File(file.getParent(), file.getName() + fileext);
        if ((forceOverwrite || isCondition) || (file.lastModified() > dest.lastModified())) \{
            includeFileMap.put(file, dest);
        \} else \{
            log(((file + \" omitted as \") + dest) + \" is up to date.\", MSG_VERBOSE);
        \}
    \} else \{
        includeFileMap.put(file, property);
    \}
\} else \{
    String message = (\"Could not find file \" + file.getAbsolutePath()) + \" to generate checksum for.\";
    log(message);
    throw new BuildException(message, location);
\}" shape=ellipse]
95 [label="3:CtBlockImpl@\{
    if (file.exists()) \{
        if (property == null) \{
            File dest = new File(file.getParent(), file.getName() + fileext);
            if ((forceOverwrite || isCondition) || (file.lastModified() > dest.lastModified())) \{
                includeFileMap.put(file, dest);
            \} else \{
                log(((file + \" omitted as \") + dest) + \" is up to date.\", MSG_VERBOSE);
            \}
        \} else \{
            includeFileMap.put(file, property);
        \}
    \} else \{
        String message = (\"Could not find file \" + file.getAbsolutePath()) + \" to generate checksum for.\";
        log(message);
        throw new BuildException(message, location);
    \}
\}" shape=ellipse]
96 [label="3:CtIfImpl@if (file != null) \{
    if (file.exists()) \{
        if (property == null) \{
            File dest = new File(file.getParent(), file.getName() + fileext);
            if ((forceOverwrite || isCondition) || (file.lastModified() > dest.lastModified())) \{
                includeFileMap.put(file, dest);
            \} else \{
                log(((file + \" omitted as \") + dest) + \" is up to date.\", MSG_VERBOSE);
            \}
        \} else \{
            includeFileMap.put(file, property);
        \}
    \} else \{
        String message = (\"Could not find file \" + file.getAbsolutePath()) + \" to generate checksum for.\";
        log(message);
        throw new BuildException(message, location);
    \}
\}" shape=ellipse]
97 [label="2:CtBlockImpl@\{
    if (file != null) \{
        if (file.exists()) \{
            if (property == null) \{
                File dest = new File(file.getParent(), file.getName() + fileext);
                if ((forceOverwrite || isCondition) || (file.lastModified() > dest.lastModified())) \{
                    includeFileMap.put(file, dest);
                \} else \{
                    log(((file + \" omitted as \") + dest) + \" is up to date.\", MSG_VERBOSE);
                \}
            \} else \{
                includeFileMap.put(file, property);
            \}
        \} else \{
            String message = (\"Could not find file \" + file.getAbsolutePath()) + \" to generate checksum for.\";
            log(message);
            throw new BuildException(message, location);
        \}
    \}
\}" shape=ellipse]
98 [label="2:CtMethodImpl@private void addToIncludeFileMap(File file) throws BuildException \{
    if (file != null) \{
        if (file.exists()) \{
            if (property == null) \{
                File dest = new File(file.getParent(), file.getName() + fileext);
                if ((forceOverwrite || isCondition) || (file.lastModified() > dest.lastModified())) \{
                    includeFileMap.put(file, dest);
                \} else \{
                    log(((file + \" omitted as \") + dest) + \" is up to date.\", MSG_VERBOSE);
                \}
            \} else \{
                includeFileMap.put(file, property);
            \}
        \} else \{
            String message = (\"Could not find file \" + file.getAbsolutePath()) + \" to generate checksum for.\";
            log(message);
            throw new BuildException(message, location);
        \}
    \}
\}" shape=ellipse]
99 [label="19:Delete@DELETE" shape=ellipse]
100 [label="19:Insert@INSERT" shape=ellipse]
101 [label="19:CtInvocationImpl@getLocation()" shape=ellipse]
2 -> 3 [label="AST"];
7 -> 5 [label="AST"];
7 -> 6 [label="AST"];
7 -> 95 [label="Control Dep"];
7 -> 94 [label="Control Dep"];
7 -> 11 [label="Control Dep"];
7 -> 8 [label="Control Dep"];
7 -> 10 [label="Control Dep"];
11 -> 9 [label="AST"];
11 -> 10 [label="AST"];
11 -> 8 [label="AST"];
11 -> 72 [label="Control Dep"];
11 -> 71 [label="Control Dep"];
11 -> 14 [label="Control Dep"];
11 -> 12 [label="Control Dep"];
11 -> 13 [label="Control Dep"];
11 -> 93 [label="Control Dep"];
11 -> 83 [label="Control Dep"];
11 -> 81 [label="Control Dep"];
11 -> 79 [label="Control Dep"];
11 -> 74 [label="Control Dep"];
11 -> 78 [label="Control Dep"];
11 -> 75 [label="Control Dep"];
11 -> 77 [label="Control Dep"];
11 -> 80 [label="Control Dep"];
11 -> 87 [label="Control Dep"];
11 -> 84 [label="Control Dep"];
11 -> 86 [label="Control Dep"];
11 -> 92 [label="Control Dep"];
11 -> 91 [label="Control Dep"];
11 -> 89 [label="Control Dep"];
11 -> 90 [label="Control Dep"];
14 -> 12 [label="AST"];
14 -> 13 [label="AST"];
14 -> 63 [label="Control Dep"];
14 -> 29 [label="Control Dep"];
14 -> 27 [label="Control Dep"];
14 -> 20 [label="Control Dep"];
14 -> 17 [label="Control Dep"];
14 -> 19 [label="Control Dep"];
14 -> 26 [label="Control Dep"];
14 -> 24 [label="Control Dep"];
14 -> 21 [label="Control Dep"];
14 -> 23 [label="Control Dep"];
14 -> 25 [label="Control Dep"];
14 -> 62 [label="Control Dep"];
14 -> 42 [label="Control Dep"];
14 -> 32 [label="Control Dep"];
14 -> 30 [label="Control Dep"];
14 -> 31 [label="Control Dep"];
14 -> 41 [label="Control Dep"];
14 -> 36 [label="Control Dep"];
14 -> 33 [label="Control Dep"];
14 -> 35 [label="Control Dep"];
14 -> 40 [label="Control Dep"];
14 -> 37 [label="Control Dep"];
14 -> 39 [label="Control Dep"];
14 -> 70 [label="Control Dep"];
14 -> 69 [label="Control Dep"];
14 -> 64 [label="Control Dep"];
14 -> 66 [label="Control Dep"];
14 -> 67 [label="Control Dep"];
14 -> 68 [label="Control Dep"];
19 -> 28 [label="Data Dep"];
20 -> 18 [label="AST"];
20 -> 19 [label="AST"];
20 -> 17 [label="AST"];
23 -> 28 [label="Data Dep"];
24 -> 22 [label="AST"];
24 -> 23 [label="AST"];
24 -> 21 [label="AST"];
25 -> 28 [label="Data Dep"];
26 -> 24 [label="AST"];
26 -> 25 [label="AST"];
27 -> 20 [label="AST"];
27 -> 26 [label="AST"];
28 -> 39 [label="Define-Use"];
28 -> 47 [label="Define-Use"];
28 -> 55 [label="Define-Use"];
29 -> 28 [label="AST"];
29 -> 15 [label="AST"];
29 -> 27 [label="AST"];
32 -> 30 [label="AST"];
32 -> 31 [label="AST"];
36 -> 34 [label="AST"];
36 -> 35 [label="AST"];
36 -> 33 [label="AST"];
40 -> 38 [label="AST"];
40 -> 39 [label="AST"];
40 -> 37 [label="AST"];
41 -> 36 [label="AST"];
41 -> 40 [label="AST"];
42 -> 32 [label="AST"];
42 -> 41 [label="AST"];
42 -> 49 [label="Control Dep"];
42 -> 48 [label="Control Dep"];
42 -> 43 [label="Control Dep"];
42 -> 45 [label="Control Dep"];
42 -> 46 [label="Control Dep"];
42 -> 47 [label="Control Dep"];
42 -> 61 [label="Control Dep"];
42 -> 60 [label="Control Dep"];
42 -> 50 [label="Control Dep"];
42 -> 58 [label="Control Dep"];
42 -> 56 [label="Control Dep"];
42 -> 54 [label="Control Dep"];
42 -> 52 [label="Control Dep"];
42 -> 53 [label="Control Dep"];
42 -> 55 [label="Control Dep"];
42 -> 57 [label="Control Dep"];
42 -> 59 [label="Control Dep"];
48 -> 44 [label="AST"];
48 -> 45 [label="AST"];
48 -> 43 [label="AST"];
48 -> 46 [label="AST"];
48 -> 47 [label="AST"];
49 -> 48 [label="AST"];
54 -> 52 [label="AST"];
54 -> 53 [label="AST"];
56 -> 54 [label="AST"];
56 -> 55 [label="AST"];
58 -> 56 [label="AST"];
58 -> 57 [label="AST"];
60 -> 51 [label="AST"];
60 -> 50 [label="AST"];
60 -> 58 [label="AST"];
60 -> 59 [label="AST"];
61 -> 60 [label="AST"];
62 -> 42 [label="AST"];
62 -> 49 [label="AST"];
62 -> 61 [label="AST"];
63 -> 29 [label="AST"];
63 -> 62 [label="AST"];
69 -> 65 [label="AST"];
69 -> 66 [label="AST"];
69 -> 64 [label="AST"];
69 -> 67 [label="AST"];
69 -> 68 [label="AST"];
70 -> 69 [label="AST"];
71 -> 14 [label="AST"];
71 -> 63 [label="AST"];
71 -> 70 [label="AST"];
72 -> 71 [label="AST"];
77 -> 82 [label="Data Dep"];
78 -> 76 [label="AST"];
78 -> 77 [label="AST"];
78 -> 75 [label="AST"];
79 -> 74 [label="AST"];
79 -> 78 [label="AST"];
81 -> 79 [label="AST"];
81 -> 80 [label="AST"];
82 -> 86 [label="Define-Use"];
82 -> 89 [label="Define-Use"];
83 -> 82 [label="AST"];
83 -> 73 [label="AST"];
83 -> 81 [label="AST"];
87 -> 85 [label="AST"];
87 -> 84 [label="AST"];
87 -> 86 [label="AST"];
90 -> 99 [label="Action"];
91 -> 89 [label="AST"];
91 -> 90 [label="AST"];
91 -> 100 [label="Action"];
92 -> 91 [label="AST"];
93 -> 83 [label="AST"];
93 -> 87 [label="AST"];
93 -> 92 [label="AST"];
94 -> 11 [label="AST"];
94 -> 72 [label="AST"];
94 -> 93 [label="AST"];
95 -> 94 [label="AST"];
96 -> 7 [label="AST"];
96 -> 95 [label="AST"];
97 -> 96 [label="AST"];
98 -> 1 [label="AST"];
98 -> 0 [label="AST"];
98 -> 2 [label="AST"];
98 -> 4 [label="AST"];
98 -> 97 [label="AST"];
100 -> 101 [label="Action"];
}