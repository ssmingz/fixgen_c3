digraph "getImplementation#?" {
0 [label="2:CtTypeReferenceImpl@FileNameMapper" shape=ellipse]
1 [label="2:CtVirtualElement@getImplementation" shape=ellipse]
2 [label="2:CtTypeReferenceImpl@BuildException" shape=ellipse]
3 [label="3:CtExecutableReferenceImpl@isReference()" shape=ellipse]
4 [label="3:CtVirtualElement@isReference" shape=ellipse]
5 [label="3:CtInvocationImpl@isReference()" shape=ellipse]
6 [label="4:CtExecutableReferenceImpl@getImplementation()" shape=ellipse]
7 [label="4:CtVirtualElement@getImplementation" shape=ellipse]
8 [label="4:CtExecutableReferenceImpl@getRef()" shape=ellipse]
9 [label="4:CtVirtualElement@getRef" shape=ellipse]
10 [label="4:CtInvocationImpl@getRef()" shape=ellipse]
11 [label="4:CtInvocationImpl@getRef().getImplementation()" shape=ellipse]
12 [label="4:CtReturnImpl@return getRef().getImplementation()" shape=ellipse]
13 [label="3:CtBlockImpl@\{
    return getRef().getImplementation();
\}" shape=ellipse]
14 [label="3:CtIfImpl@if (isReference()) \{
    return getRef().getImplementation();
\}" shape=ellipse]
15 [label="6:CtFieldReadImpl@type" shape=ellipse]
16 [label="6:CtLiteralImpl@null" shape=ellipse]
17 [label="6:CtBinaryOperatorImpl@type == null" shape=ellipse]
18 [label="7:CtTypeReferenceImpl@BuildException" shape=ellipse]
19 [label="7:CtLiteralImpl@\"type attribute is required\"" shape=ellipse]
20 [label="7:CtConstructorCallImpl@new BuildException(\"type attribute is required\")" shape=ellipse]
21 [label="7:CtThrowImpl@throw new BuildException(\"type attribute is required\")" shape=ellipse]
22 [label="6:CtBlockImpl@\{
    throw new BuildException(\"type attribute is required\");
\}" shape=ellipse]
23 [label="6:CtIfImpl@if (type == null) \{
    throw new BuildException(\"type attribute is required\");
\}" shape=ellipse]
24 [label="10:CtTypeReferenceImpl@Class" shape=ellipse]
25 [label="10:CtExecutableReferenceImpl@forName(java.lang.String)" shape=ellipse]
26 [label="10:CtVirtualElement@forName" shape=ellipse]
27 [label="10:CtTypeAccessImpl@Class" shape=ellipse]
28 [label="10:CtExecutableReferenceImpl@getImplementation()" shape=ellipse]
29 [label="10:CtVirtualElement@getImplementation" shape=ellipse]
30 [label="10:CtFieldReadImpl@type" shape=ellipse]
31 [label="10:CtInvocationImpl@type.getImplementation()" shape=ellipse]
32 [label="10:CtInvocationImpl@Class.forName(type.getImplementation())" shape=ellipse]
33 [label="10:CtVirtualElement@c" shape=ellipse]
34 [label="10:CtLocalVariableImpl@Class c = Class.forName(type.getImplementation())" shape=ellipse]
35 [label="11:CtTypeReferenceImpl@FileNameMapper" shape=ellipse]
36 [label="11:CtExecutableReferenceImpl@newInstance()" shape=ellipse]
37 [label="11:CtVirtualElement@newInstance" shape=ellipse]
38 [label="11:CtVariableReadImpl@c" shape=ellipse]
39 [label="11:CtInvocationImpl@((FileNameMapper) (c.newInstance()))" shape=ellipse]
40 [label="11:CtTypeReferenceImpl@FileNameMapper" shape=ellipse]
41 [label="11:CtVirtualElement@m" shape=ellipse]
42 [label="11:CtLocalVariableImpl@FileNameMapper m = ((FileNameMapper) (c.newInstance()))" shape=ellipse]
43 [label="12:CtExecutableReferenceImpl@setFrom()" shape=ellipse]
44 [label="12:CtVirtualElement@setFrom" shape=ellipse]
45 [label="12:CtVariableReadImpl@m" shape=ellipse]
46 [label="12:CtFieldReadImpl@from" shape=ellipse]
47 [label="12:CtInvocationImpl@m.setFrom(from)" shape=ellipse]
48 [label="13:CtExecutableReferenceImpl@setTo()" shape=ellipse]
49 [label="13:CtVirtualElement@setTo" shape=ellipse]
50 [label="13:CtVariableReadImpl@m" shape=ellipse]
51 [label="13:CtFieldReadImpl@to" shape=ellipse]
52 [label="13:CtInvocationImpl@m.setTo(to)" shape=ellipse]
53 [label="14:CtVariableReadImpl@m" shape=ellipse]
54 [label="14:CtReturnImpl@return m" shape=ellipse]
55 [label="9:CtBlockImpl@\{
    Class c = Class.forName(type.getImplementation());
    FileNameMapper m = ((FileNameMapper) (c.newInstance()));
    m.setFrom(from);
    m.setTo(to);
    return m;
\}" shape=ellipse]
56 [label="15:CtVirtualElement@t" shape=ellipse]
57 [label="15:CtTypeReferenceImpl@Throwable" shape=ellipse]
58 [label="15:CtCatchVariableImpl@Throwable t" shape=ellipse]
59 [label="16:CtTypeReferenceImpl@BuildException" shape=ellipse]
60 [label="16:CtVariableReadImpl@t" shape=ellipse]
61 [label="16:CtConstructorCallImpl@new BuildException(t)" shape=ellipse]
62 [label="16:CtThrowImpl@throw new BuildException(t)" shape=ellipse]
63 [label="15:CtBlockImpl@\{
    throw new BuildException(t);
\}" shape=ellipse]
64 [label="15:CtCatchImpl@ catch (Throwable t) \{
    throw new BuildException(t);
\}" shape=ellipse]
65 [label="9:CtTryImpl@try \{
    Class c = Class.forName(type.getImplementation());
    FileNameMapper m = ((FileNameMapper) (c.newInstance()));
    m.setFrom(from);
    m.setTo(to);
    return m;
\} catch (Throwable t) \{
    throw new BuildException(t);
\}" shape=ellipse]
66 [label="2:CtBlockImpl@\{
    if (isReference()) \{
        return getRef().getImplementation();
    \}
    if (type == null) \{
        throw new BuildException(\"type attribute is required\");
    \}
    try \{
        Class c = Class.forName(type.getImplementation());
        FileNameMapper m = ((FileNameMapper) (c.newInstance()));
        m.setFrom(from);
        m.setTo(to);
        return m;
    \} catch (Throwable t) \{
        throw new BuildException(t);
    \}
\}" shape=ellipse]
67 [label="2:CtMethodImpl@public FileNameMapper getImplementation() throws BuildException \{
    if (isReference()) \{
        return getRef().getImplementation();
    \}
    if (type == null) \{
        throw new BuildException(\"type attribute is required\");
    \}
    try \{
        Class c = Class.forName(type.getImplementation());
        FileNameMapper m = ((FileNameMapper) (c.newInstance()));
        m.setFrom(from);
        m.setTo(to);
        return m;
    \} catch (Throwable t) \{
        throw new BuildException(t);
    \}
\}" shape=ellipse]
68 [label="15:Insert@INSERT" shape=ellipse]
69 [label="15:CtCatchImpl@ catch (BuildException be) \{
    throw be;
\}" shape=ellipse]
5 -> 4 [label="AST"];
5 -> 3 [label="AST"];
5 -> 13 [label="Control Dep"];
5 -> 12 [label="Control Dep"];
5 -> 11 [label="Control Dep"];
5 -> 6 [label="Control Dep"];
5 -> 10 [label="Control Dep"];
5 -> 8 [label="Control Dep"];
10 -> 9 [label="AST"];
10 -> 8 [label="AST"];
11 -> 7 [label="AST"];
11 -> 10 [label="AST"];
11 -> 6 [label="AST"];
12 -> 11 [label="AST"];
13 -> 12 [label="AST"];
14 -> 5 [label="AST"];
14 -> 13 [label="AST"];
17 -> 15 [label="AST"];
17 -> 16 [label="AST"];
17 -> 22 [label="Control Dep"];
17 -> 21 [label="Control Dep"];
17 -> 20 [label="Control Dep"];
17 -> 19 [label="Control Dep"];
20 -> 19 [label="AST"];
21 -> 20 [label="AST"];
22 -> 21 [label="AST"];
23 -> 17 [label="AST"];
23 -> 22 [label="AST"];
30 -> 33 [label="Data Dep"];
31 -> 29 [label="AST"];
31 -> 30 [label="AST"];
31 -> 28 [label="AST"];
32 -> 26 [label="AST"];
32 -> 27 [label="AST"];
32 -> 25 [label="AST"];
32 -> 31 [label="AST"];
33 -> 38 [label="Define-Use"];
34 -> 33 [label="AST"];
34 -> 24 [label="AST"];
34 -> 32 [label="AST"];
38 -> 41 [label="Data Dep"];
39 -> 37 [label="AST"];
39 -> 40 [label="AST"];
39 -> 38 [label="AST"];
39 -> 36 [label="AST"];
41 -> 45 [label="Define-Use"];
41 -> 50 [label="Define-Use"];
41 -> 53 [label="Define-Use"];
42 -> 41 [label="AST"];
42 -> 35 [label="AST"];
42 -> 39 [label="AST"];
47 -> 44 [label="AST"];
47 -> 45 [label="AST"];
47 -> 43 [label="AST"];
47 -> 46 [label="AST"];
52 -> 49 [label="AST"];
52 -> 50 [label="AST"];
52 -> 48 [label="AST"];
52 -> 51 [label="AST"];
54 -> 53 [label="AST"];
55 -> 34 [label="AST"];
55 -> 42 [label="AST"];
55 -> 47 [label="AST"];
55 -> 52 [label="AST"];
55 -> 54 [label="AST"];
56 -> 60 [label="Define-Use"];
58 -> 56 [label="AST"];
58 -> 57 [label="AST"];
58 -> 63 [label="Control Dep"];
58 -> 62 [label="Control Dep"];
58 -> 61 [label="Control Dep"];
58 -> 60 [label="Control Dep"];
61 -> 60 [label="AST"];
62 -> 61 [label="AST"];
63 -> 62 [label="AST"];
64 -> 58 [label="AST"];
64 -> 63 [label="AST"];
65 -> 55 [label="AST"];
65 -> 64 [label="AST"];
65 -> 68 [label="Action"];
66 -> 14 [label="AST"];
66 -> 23 [label="AST"];
66 -> 65 [label="AST"];
67 -> 1 [label="AST"];
67 -> 0 [label="AST"];
67 -> 2 [label="AST"];
67 -> 66 [label="AST"];
68 -> 69 [label="Action"];
}