digraph "execute#?" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@execute" shape=ellipse]
2 [label="2:CtTypeReferenceImpl@BuildException" shape=ellipse]
3 [label="4:CtTypeReferenceImpl@Method" shape=ellipse]
4 [label="4:CtExecutableReferenceImpl@getMethod(java.lang.String,java.lang.Class[])" shape=ellipse]
5 [label="4:CtVirtualElement@getMethod" shape=ellipse]
6 [label="4:CtExecutableReferenceImpl@getClass()" shape=ellipse]
7 [label="4:CtVirtualElement@getClass" shape=ellipse]
8 [label="4:CtFieldReadImpl@proxy" shape=ellipse]
9 [label="4:CtInvocationImpl@proxy.getClass()" shape=ellipse]
10 [label="4:CtLiteralImpl@\"setLocation\"" shape=ellipse]
11 [label="4:CtNewArrayImpl@new Class[]\{ Location.class \}" shape=ellipse]
12 [label="4:CtFieldReadImpl@Location.class" shape=ellipse]
13 [label="4:CtInvocationImpl@proxy.getClass().getMethod(\"setLocation\", new Class[]\{ Location.class \})" shape=ellipse]
14 [label="4:CtVirtualElement@setLocationM" shape=ellipse]
15 [label="4:CtLocalVariableImpl@Method setLocationM = proxy.getClass().getMethod(\"setLocation\", new Class[]\{ Location.class \})" shape=ellipse]
16 [label="5:CtVariableReadImpl@setLocationM" shape=ellipse]
17 [label="5:CtLiteralImpl@null" shape=ellipse]
18 [label="5:CtBinaryOperatorImpl@setLocationM != null" shape=ellipse]
19 [label="6:CtExecutableReferenceImpl@invoke(java.lang.Object[])" shape=ellipse]
20 [label="6:CtVirtualElement@invoke" shape=ellipse]
21 [label="6:CtVariableReadImpl@setLocationM" shape=ellipse]
22 [label="6:CtFieldReadImpl@proxy" shape=ellipse]
23 [label="6:CtNewArrayImpl@new Object[]\{ getLocation() \}" shape=ellipse]
24 [label="6:CtInvocationImpl@getLocation()" shape=ellipse]
25 [label="6:CtInvocationImpl@setLocationM.invoke(proxy, new Object[]\{ getLocation() \})" shape=ellipse]
26 [label="5:CtBlockImpl@\{
    setLocationM.invoke(proxy, new Object[]\{ getLocation() \});
\}" shape=ellipse]
27 [label="5:CtIfImpl@if (setLocationM != null) \{
    setLocationM.invoke(proxy, new Object[]\{ getLocation() \});
\}" shape=ellipse]
28 [label="3:CtBlockImpl@\{
    Method setLocationM = proxy.getClass().getMethod(\"setLocation\", new Class[]\{ Location.class \});
    if (setLocationM != null) \{
        setLocationM.invoke(proxy, new Object[]\{ getLocation() \});
    \}
\}" shape=ellipse]
29 [label="8:CtVirtualElement@e" shape=ellipse]
30 [label="8:CtTypeReferenceImpl@NoSuchMethodException" shape=ellipse]
31 [label="8:CtCatchVariableImpl@NoSuchMethodException e" shape=ellipse]
32 [label="8:CtBlockImpl@\{
\}" shape=ellipse]
33 [label="8:CtCatchImpl@ catch (NoSuchMethodException e) \{
\}" shape=ellipse]
34 [label="9:CtVirtualElement@ex" shape=ellipse]
35 [label="9:CtTypeReferenceImpl@Exception" shape=ellipse]
36 [label="9:CtCatchVariableImpl@Exception ex" shape=ellipse]
37 [label="10:CtExecutableReferenceImpl@log(<unknown>,<unknown>)" shape=ellipse]
38 [label="10:CtVirtualElement@log" shape=ellipse]
39 [label="10:CtLiteralImpl@\"Error setting location in \"" shape=ellipse]
40 [label="10:CtExecutableReferenceImpl@getClass()" shape=ellipse]
41 [label="10:CtVirtualElement@getClass" shape=ellipse]
42 [label="10:CtFieldReadImpl@proxy" shape=ellipse]
43 [label="10:CtInvocationImpl@proxy.getClass()" shape=ellipse]
44 [label="10:CtBinaryOperatorImpl@\"Error setting location in \" + proxy.getClass()" shape=ellipse]
45 [label="10:CtTypeAccessImpl@MSG_ERR" shape=ellipse]
46 [label="10:CtInvocationImpl@log(\"Error setting location in \" + proxy.getClass(), MSG_ERR)" shape=ellipse]
47 [label="11:CtTypeReferenceImpl@BuildException" shape=ellipse]
48 [label="11:CtVariableReadImpl@ex" shape=ellipse]
49 [label="11:CtConstructorCallImpl@new BuildException(ex)" shape=ellipse]
50 [label="11:CtThrowImpl@throw new BuildException(ex)" shape=ellipse]
51 [label="9:CtBlockImpl@\{
    log(\"Error setting location in \" + proxy.getClass(), MSG_ERR);
    throw new BuildException(ex);
\}" shape=ellipse]
52 [label="9:CtCatchImpl@ catch (Exception ex) \{
    log(\"Error setting location in \" + proxy.getClass(), MSG_ERR);
    throw new BuildException(ex);
\}" shape=ellipse]
53 [label="3:CtTryImpl@try \{
    Method setLocationM = proxy.getClass().getMethod(\"setLocation\", new Class[]\{ Location.class \});
    if (setLocationM != null) \{
        setLocationM.invoke(proxy, new Object[]\{ getLocation() \});
    \}
\} catch (NoSuchMethodException e) \{
\} catch (Exception ex) \{
    log(\"Error setting location in \" + proxy.getClass(), MSG_ERR);
    throw new BuildException(ex);
\}" shape=ellipse]
54 [label="14:CtTypeReferenceImpl@Method" shape=ellipse]
55 [label="14:CtExecutableReferenceImpl@getMethod(java.lang.String,java.lang.Class[])" shape=ellipse]
56 [label="14:CtVirtualElement@getMethod" shape=ellipse]
57 [label="14:CtExecutableReferenceImpl@getClass()" shape=ellipse]
58 [label="14:CtVirtualElement@getClass" shape=ellipse]
59 [label="14:CtFieldReadImpl@proxy" shape=ellipse]
60 [label="14:CtInvocationImpl@proxy.getClass()" shape=ellipse]
61 [label="14:CtLiteralImpl@\"setProject\"" shape=ellipse]
62 [label="14:CtNewArrayImpl@new Class[]\{ Project.class \}" shape=ellipse]
63 [label="14:CtFieldReadImpl@Project.class" shape=ellipse]
64 [label="14:CtInvocationImpl@proxy.getClass().getMethod(\"setProject\", new Class[]\{ Project.class \})" shape=ellipse]
65 [label="14:CtVirtualElement@setProjectM" shape=ellipse]
66 [label="14:CtLocalVariableImpl@Method setProjectM = proxy.getClass().getMethod(\"setProject\", new Class[]\{ Project.class \})" shape=ellipse]
67 [label="15:CtVariableReadImpl@setProjectM" shape=ellipse]
68 [label="15:CtLiteralImpl@null" shape=ellipse]
69 [label="15:CtBinaryOperatorImpl@setProjectM != null" shape=ellipse]
70 [label="16:CtExecutableReferenceImpl@invoke(java.lang.Object[])" shape=ellipse]
71 [label="16:CtVirtualElement@invoke" shape=ellipse]
72 [label="16:CtVariableReadImpl@setProjectM" shape=ellipse]
73 [label="16:CtFieldReadImpl@proxy" shape=ellipse]
74 [label="16:CtNewArrayImpl@new Object[]\{ getProject() \}" shape=ellipse]
75 [label="16:CtInvocationImpl@getProject()" shape=ellipse]
76 [label="16:CtInvocationImpl@setProjectM.invoke(proxy, new Object[]\{ getProject() \})" shape=ellipse]
77 [label="15:CtBlockImpl@\{
    setProjectM.invoke(proxy, new Object[]\{ getProject() \});
\}" shape=ellipse]
78 [label="15:CtIfImpl@if (setProjectM != null) \{
    setProjectM.invoke(proxy, new Object[]\{ getProject() \});
\}" shape=ellipse]
79 [label="13:CtBlockImpl@\{
    Method setProjectM = proxy.getClass().getMethod(\"setProject\", new Class[]\{ Project.class \});
    if (setProjectM != null) \{
        setProjectM.invoke(proxy, new Object[]\{ getProject() \});
    \}
\}" shape=ellipse]
80 [label="18:CtVirtualElement@e" shape=ellipse]
81 [label="18:CtTypeReferenceImpl@NoSuchMethodException" shape=ellipse]
82 [label="18:CtCatchVariableImpl@NoSuchMethodException e" shape=ellipse]
83 [label="18:CtBlockImpl@\{
\}" shape=ellipse]
84 [label="18:CtCatchImpl@ catch (NoSuchMethodException e) \{
\}" shape=ellipse]
85 [label="19:CtVirtualElement@ex" shape=ellipse]
86 [label="19:CtTypeReferenceImpl@Exception" shape=ellipse]
87 [label="19:CtCatchVariableImpl@Exception ex" shape=ellipse]
88 [label="20:CtExecutableReferenceImpl@log(<unknown>,<unknown>)" shape=ellipse]
89 [label="20:CtVirtualElement@log" shape=ellipse]
90 [label="20:CtLiteralImpl@\"Error setting project in \"" shape=ellipse]
91 [label="20:CtExecutableReferenceImpl@getClass()" shape=ellipse]
92 [label="20:CtVirtualElement@getClass" shape=ellipse]
93 [label="20:CtFieldReadImpl@proxy" shape=ellipse]
94 [label="20:CtInvocationImpl@proxy.getClass()" shape=ellipse]
95 [label="20:CtBinaryOperatorImpl@\"Error setting project in \" + proxy.getClass()" shape=ellipse]
96 [label="20:CtTypeAccessImpl@MSG_ERR" shape=ellipse]
97 [label="20:CtInvocationImpl@log(\"Error setting project in \" + proxy.getClass(), MSG_ERR)" shape=ellipse]
98 [label="21:CtTypeReferenceImpl@BuildException" shape=ellipse]
99 [label="21:CtVariableReadImpl@ex" shape=ellipse]
100 [label="21:CtConstructorCallImpl@new BuildException(ex)" shape=ellipse]
101 [label="21:CtThrowImpl@throw new BuildException(ex)" shape=ellipse]
102 [label="19:CtBlockImpl@\{
    log(\"Error setting project in \" + proxy.getClass(), MSG_ERR);
    throw new BuildException(ex);
\}" shape=ellipse]
103 [label="19:CtCatchImpl@ catch (Exception ex) \{
    log(\"Error setting project in \" + proxy.getClass(), MSG_ERR);
    throw new BuildException(ex);
\}" shape=ellipse]
104 [label="13:CtTryImpl@try \{
    Method setProjectM = proxy.getClass().getMethod(\"setProject\", new Class[]\{ Project.class \});
    if (setProjectM != null) \{
        setProjectM.invoke(proxy, new Object[]\{ getProject() \});
    \}
\} catch (NoSuchMethodException e) \{
\} catch (Exception ex) \{
    log(\"Error setting project in \" + proxy.getClass(), MSG_ERR);
    throw new BuildException(ex);
\}" shape=ellipse]
105 [label="24:CtExecutableReferenceImpl@execute()" shape=ellipse]
106 [label="24:CtVirtualElement@execute" shape=ellipse]
107 [label="24:CtTypeAccessImpl@DispatchUtils" shape=ellipse]
108 [label="24:CtFieldReadImpl@proxy" shape=ellipse]
109 [label="24:CtInvocationImpl@DispatchUtils.execute(proxy)" shape=ellipse]
110 [label="23:CtBlockImpl@\{
    DispatchUtils.execute(proxy);
\}" shape=ellipse]
111 [label="25:CtVirtualElement@ex" shape=ellipse]
112 [label="25:CtTypeReferenceImpl@Exception" shape=ellipse]
113 [label="25:CtCatchVariableImpl@Exception ex" shape=ellipse]
114 [label="26:CtExecutableReferenceImpl@log(<unknown>,<unknown>)" shape=ellipse]
115 [label="26:CtVirtualElement@log" shape=ellipse]
116 [label="26:CtLiteralImpl@\"Error in \"" shape=ellipse]
117 [label="26:CtExecutableReferenceImpl@getClass()" shape=ellipse]
118 [label="26:CtVirtualElement@getClass" shape=ellipse]
119 [label="26:CtFieldReadImpl@proxy" shape=ellipse]
120 [label="26:CtInvocationImpl@proxy.getClass()" shape=ellipse]
121 [label="26:CtBinaryOperatorImpl@\"Error in \" + proxy.getClass()" shape=ellipse]
122 [label="26:CtTypeAccessImpl@MSG_VERBOSE" shape=ellipse]
123 [label="26:CtInvocationImpl@log(\"Error in \" + proxy.getClass(), MSG_VERBOSE)" shape=ellipse]
124 [label="27:CtTypeReferenceImpl@BuildException" shape=ellipse]
125 [label="27:CtVariableReadImpl@ex" shape=ellipse]
126 [label="27:CtConstructorCallImpl@new BuildException(ex)" shape=ellipse]
127 [label="27:CtThrowImpl@throw new BuildException(ex)" shape=ellipse]
128 [label="25:CtBlockImpl@\{
    log(\"Error in \" + proxy.getClass(), MSG_VERBOSE);
    throw new BuildException(ex);
\}" shape=ellipse]
129 [label="25:CtCatchImpl@ catch (Exception ex) \{
    log(\"Error in \" + proxy.getClass(), MSG_VERBOSE);
    throw new BuildException(ex);
\}" shape=ellipse]
130 [label="23:CtTryImpl@try \{
    DispatchUtils.execute(proxy);
\} catch (Exception ex) \{
    log(\"Error in \" + proxy.getClass(), MSG_VERBOSE);
    throw new BuildException(ex);
\}" shape=ellipse]
131 [label="2:CtBlockImpl@\{
    try \{
        Method setLocationM = proxy.getClass().getMethod(\"setLocation\", new Class[]\{ Location.class \});
        if (setLocationM != null) \{
            setLocationM.invoke(proxy, new Object[]\{ getLocation() \});
        \}
    \} catch (NoSuchMethodException e) \{
    \} catch (Exception ex) \{
        log(\"Error setting location in \" + proxy.getClass(), MSG_ERR);
        throw new BuildException(ex);
    \}
    try \{
        Method setProjectM = proxy.getClass().getMethod(\"setProject\", new Class[]\{ Project.class \});
        if (setProjectM != null) \{
            setProjectM.invoke(proxy, new Object[]\{ getProject() \});
        \}
    \} catch (NoSuchMethodException e) \{
    \} catch (Exception ex) \{
        log(\"Error setting project in \" + proxy.getClass(), MSG_ERR);
        throw new BuildException(ex);
    \}
    try \{
        DispatchUtils.execute(proxy);
    \} catch (Exception ex) \{
        log(\"Error in \" + proxy.getClass(), MSG_VERBOSE);
        throw new BuildException(ex);
    \}
\}" shape=ellipse]
132 [label="2:CtMethodImpl@public void execute() throws BuildException \{
    try \{
        Method setLocationM = proxy.getClass().getMethod(\"setLocation\", new Class[]\{ Location.class \});
        if (setLocationM != null) \{
            setLocationM.invoke(proxy, new Object[]\{ getLocation() \});
        \}
    \} catch (NoSuchMethodException e) \{
    \} catch (Exception ex) \{
        log(\"Error setting location in \" + proxy.getClass(), MSG_ERR);
        throw new BuildException(ex);
    \}
    try \{
        Method setProjectM = proxy.getClass().getMethod(\"setProject\", new Class[]\{ Project.class \});
        if (setProjectM != null) \{
            setProjectM.invoke(proxy, new Object[]\{ getProject() \});
        \}
    \} catch (NoSuchMethodException e) \{
    \} catch (Exception ex) \{
        log(\"Error setting project in \" + proxy.getClass(), MSG_ERR);
        throw new BuildException(ex);
    \}
    try \{
        DispatchUtils.execute(proxy);
    \} catch (Exception ex) \{
        log(\"Error in \" + proxy.getClass(), MSG_VERBOSE);
        throw new BuildException(ex);
    \}
\}" shape=ellipse]
133 [label="25:Insert@INSERT" shape=ellipse]
134 [label="25:CtCatchImpl@ catch (BuildException be) \{
    throw be;
\}" shape=ellipse]
8 -> 14 [label="Data Dep"];
9 -> 7 [label="AST"];
9 -> 8 [label="AST"];
9 -> 6 [label="AST"];
11 -> 12 [label="AST"];
12 -> 14 [label="Data Dep"];
13 -> 5 [label="AST"];
13 -> 9 [label="AST"];
13 -> 4 [label="AST"];
13 -> 10 [label="AST"];
13 -> 11 [label="AST"];
14 -> 16 [label="Define-Use"];
14 -> 21 [label="Define-Use"];
15 -> 14 [label="AST"];
15 -> 3 [label="AST"];
15 -> 13 [label="AST"];
18 -> 16 [label="AST"];
18 -> 17 [label="AST"];
18 -> 26 [label="Control Dep"];
18 -> 25 [label="Control Dep"];
18 -> 19 [label="Control Dep"];
18 -> 21 [label="Control Dep"];
18 -> 22 [label="Control Dep"];
18 -> 23 [label="Control Dep"];
23 -> 24 [label="AST"];
25 -> 20 [label="AST"];
25 -> 21 [label="AST"];
25 -> 19 [label="AST"];
25 -> 22 [label="AST"];
25 -> 23 [label="AST"];
26 -> 25 [label="AST"];
27 -> 18 [label="AST"];
27 -> 26 [label="AST"];
28 -> 15 [label="AST"];
28 -> 27 [label="AST"];
31 -> 29 [label="AST"];
31 -> 30 [label="AST"];
31 -> 32 [label="Control Dep"];
33 -> 31 [label="AST"];
33 -> 32 [label="AST"];
34 -> 48 [label="Define-Use"];
36 -> 34 [label="AST"];
36 -> 35 [label="AST"];
36 -> 51 [label="Control Dep"];
36 -> 46 [label="Control Dep"];
36 -> 37 [label="Control Dep"];
36 -> 44 [label="Control Dep"];
36 -> 39 [label="Control Dep"];
36 -> 43 [label="Control Dep"];
36 -> 40 [label="Control Dep"];
36 -> 42 [label="Control Dep"];
36 -> 45 [label="Control Dep"];
36 -> 50 [label="Control Dep"];
36 -> 49 [label="Control Dep"];
36 -> 48 [label="Control Dep"];
43 -> 41 [label="AST"];
43 -> 42 [label="AST"];
43 -> 40 [label="AST"];
44 -> 39 [label="AST"];
44 -> 43 [label="AST"];
46 -> 38 [label="AST"];
46 -> 37 [label="AST"];
46 -> 44 [label="AST"];
46 -> 45 [label="AST"];
49 -> 48 [label="AST"];
50 -> 49 [label="AST"];
51 -> 46 [label="AST"];
51 -> 50 [label="AST"];
52 -> 36 [label="AST"];
52 -> 51 [label="AST"];
53 -> 28 [label="AST"];
53 -> 33 [label="AST"];
53 -> 52 [label="AST"];
59 -> 65 [label="Data Dep"];
60 -> 58 [label="AST"];
60 -> 59 [label="AST"];
60 -> 57 [label="AST"];
62 -> 63 [label="AST"];
63 -> 65 [label="Data Dep"];
64 -> 56 [label="AST"];
64 -> 60 [label="AST"];
64 -> 55 [label="AST"];
64 -> 61 [label="AST"];
64 -> 62 [label="AST"];
65 -> 67 [label="Define-Use"];
65 -> 72 [label="Define-Use"];
66 -> 65 [label="AST"];
66 -> 54 [label="AST"];
66 -> 64 [label="AST"];
69 -> 67 [label="AST"];
69 -> 68 [label="AST"];
69 -> 77 [label="Control Dep"];
69 -> 76 [label="Control Dep"];
69 -> 70 [label="Control Dep"];
69 -> 72 [label="Control Dep"];
69 -> 73 [label="Control Dep"];
69 -> 74 [label="Control Dep"];
74 -> 75 [label="AST"];
76 -> 71 [label="AST"];
76 -> 72 [label="AST"];
76 -> 70 [label="AST"];
76 -> 73 [label="AST"];
76 -> 74 [label="AST"];
77 -> 76 [label="AST"];
78 -> 69 [label="AST"];
78 -> 77 [label="AST"];
79 -> 66 [label="AST"];
79 -> 78 [label="AST"];
82 -> 80 [label="AST"];
82 -> 81 [label="AST"];
82 -> 83 [label="Control Dep"];
84 -> 82 [label="AST"];
84 -> 83 [label="AST"];
85 -> 99 [label="Define-Use"];
87 -> 85 [label="AST"];
87 -> 86 [label="AST"];
87 -> 102 [label="Control Dep"];
87 -> 97 [label="Control Dep"];
87 -> 88 [label="Control Dep"];
87 -> 95 [label="Control Dep"];
87 -> 90 [label="Control Dep"];
87 -> 94 [label="Control Dep"];
87 -> 91 [label="Control Dep"];
87 -> 93 [label="Control Dep"];
87 -> 96 [label="Control Dep"];
87 -> 101 [label="Control Dep"];
87 -> 100 [label="Control Dep"];
87 -> 99 [label="Control Dep"];
94 -> 92 [label="AST"];
94 -> 93 [label="AST"];
94 -> 91 [label="AST"];
95 -> 90 [label="AST"];
95 -> 94 [label="AST"];
97 -> 89 [label="AST"];
97 -> 88 [label="AST"];
97 -> 95 [label="AST"];
97 -> 96 [label="AST"];
100 -> 99 [label="AST"];
101 -> 100 [label="AST"];
102 -> 97 [label="AST"];
102 -> 101 [label="AST"];
103 -> 87 [label="AST"];
103 -> 102 [label="AST"];
104 -> 79 [label="AST"];
104 -> 84 [label="AST"];
104 -> 103 [label="AST"];
109 -> 106 [label="AST"];
109 -> 107 [label="AST"];
109 -> 105 [label="AST"];
109 -> 108 [label="AST"];
110 -> 109 [label="AST"];
111 -> 125 [label="Define-Use"];
113 -> 111 [label="AST"];
113 -> 112 [label="AST"];
113 -> 128 [label="Control Dep"];
113 -> 123 [label="Control Dep"];
113 -> 114 [label="Control Dep"];
113 -> 121 [label="Control Dep"];
113 -> 116 [label="Control Dep"];
113 -> 120 [label="Control Dep"];
113 -> 117 [label="Control Dep"];
113 -> 119 [label="Control Dep"];
113 -> 122 [label="Control Dep"];
113 -> 127 [label="Control Dep"];
113 -> 126 [label="Control Dep"];
113 -> 125 [label="Control Dep"];
120 -> 118 [label="AST"];
120 -> 119 [label="AST"];
120 -> 117 [label="AST"];
121 -> 116 [label="AST"];
121 -> 120 [label="AST"];
123 -> 115 [label="AST"];
123 -> 114 [label="AST"];
123 -> 121 [label="AST"];
123 -> 122 [label="AST"];
126 -> 125 [label="AST"];
127 -> 126 [label="AST"];
128 -> 123 [label="AST"];
128 -> 127 [label="AST"];
129 -> 113 [label="AST"];
129 -> 128 [label="AST"];
130 -> 110 [label="AST"];
130 -> 129 [label="AST"];
130 -> 133 [label="Action"];
131 -> 53 [label="AST"];
131 -> 104 [label="AST"];
131 -> 130 [label="AST"];
132 -> 1 [label="AST"];
132 -> 0 [label="AST"];
132 -> 2 [label="AST"];
132 -> 131 [label="AST"];
133 -> 134 [label="Action"];
}