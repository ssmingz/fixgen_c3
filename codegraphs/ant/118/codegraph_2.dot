digraph "execute#?" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@execute" shape=ellipse]
2 [label="2:CtTypeReferenceImpl@BuildException" shape=ellipse]
3 [label="3:CtExecutableReferenceImpl@equals(java.lang.Object)" shape=ellipse]
4 [label="3:CtVirtualElement@equals" shape=ellipse]
5 [label="3:CtLiteralImpl@\"expand\"" shape=ellipse]
6 [label="3:CtFieldReadImpl@taskType" shape=ellipse]
7 [label="3:CtInvocationImpl@\"expand\".equals(taskType)" shape=ellipse]
8 [label="4:CtExecutableReferenceImpl@log(java.lang.String)" shape=ellipse]
9 [label="4:CtVirtualElement@log" shape=ellipse]
10 [label="4:CtLiteralImpl@\"!! expand is deprecated. Use unzip instead. !!\"" shape=ellipse]
11 [label="4:CtInvocationImpl@log(\"!! expand is deprecated. Use unzip instead. !!\")" shape=ellipse]
12 [label="3:CtBlockImpl@\{
    log(\"!! expand is deprecated. Use unzip instead. !!\");
\}" shape=ellipse]
13 [label="3:CtIfImpl@if (\"expand\".equals(taskType)) \{
    log(\"!! expand is deprecated. Use unzip instead. !!\");
\}" shape=ellipse]
14 [label="6:CtTypeReferenceImpl@Touch" shape=ellipse]
15 [label="6:CtExecutableReferenceImpl@createTask(java.lang.String)" shape=ellipse]
16 [label="6:CtVirtualElement@createTask" shape=ellipse]
17 [label="6:CtFieldReadImpl@project" shape=ellipse]
18 [label="6:CtLiteralImpl@\"touch\"" shape=ellipse]
19 [label="6:CtInvocationImpl@((Touch) (project.createTask(\"touch\")))" shape=ellipse]
20 [label="6:CtTypeReferenceImpl@Touch" shape=ellipse]
21 [label="6:CtVirtualElement@touch" shape=ellipse]
22 [label="6:CtLocalVariableImpl@Touch touch = ((Touch) (project.createTask(\"touch\")))" shape=ellipse]
23 [label="7:CtExecutableReferenceImpl@setOwningTarget()" shape=ellipse]
24 [label="7:CtVirtualElement@setOwningTarget" shape=ellipse]
25 [label="7:CtVariableReadImpl@touch" shape=ellipse]
26 [label="7:CtFieldReadImpl@target" shape=ellipse]
27 [label="7:CtInvocationImpl@touch.setOwningTarget(target)" shape=ellipse]
28 [label="8:CtExecutableReferenceImpl@setTaskName()" shape=ellipse]
29 [label="8:CtVirtualElement@setTaskName" shape=ellipse]
30 [label="8:CtVariableReadImpl@touch" shape=ellipse]
31 [label="8:CtExecutableReferenceImpl@getTaskName()" shape=ellipse]
32 [label="8:CtVirtualElement@getTaskName" shape=ellipse]
33 [label="8:CtInvocationImpl@getTaskName()" shape=ellipse]
34 [label="8:CtInvocationImpl@touch.setTaskName(getTaskName())" shape=ellipse]
35 [label="9:CtExecutableReferenceImpl@setLocation()" shape=ellipse]
36 [label="9:CtVirtualElement@setLocation" shape=ellipse]
37 [label="9:CtVariableReadImpl@touch" shape=ellipse]
38 [label="9:CtExecutableReferenceImpl@getLocation()" shape=ellipse]
39 [label="9:CtVirtualElement@getLocation" shape=ellipse]
40 [label="9:CtInvocationImpl@getLocation()" shape=ellipse]
41 [label="9:CtInvocationImpl@touch.setLocation(getLocation())" shape=ellipse]
42 [label="10:CtFieldReadImpl@source" shape=ellipse]
43 [label="10:CtLiteralImpl@null" shape=ellipse]
44 [label="10:CtBinaryOperatorImpl@source == null" shape=ellipse]
45 [label="11:CtTypeReferenceImpl@BuildException" shape=ellipse]
46 [label="11:CtLiteralImpl@\"Source attribute must be specified\"" shape=ellipse]
47 [label="11:CtConstructorCallImpl@new BuildException(\"Source attribute must be specified\")" shape=ellipse]
48 [label="11:CtThrowImpl@throw new BuildException(\"Source attribute must be specified\")" shape=ellipse]
49 [label="10:CtBlockImpl@\{
    throw new BuildException(\"Source attribute must be specified\");
\}" shape=ellipse]
50 [label="10:CtIfImpl@if (source == null) \{
    throw new BuildException(\"Source attribute must be specified\");
\}" shape=ellipse]
51 [label="13:CtExecutableReferenceImpl@isDirectory()" shape=ellipse]
52 [label="13:CtVirtualElement@isDirectory" shape=ellipse]
53 [label="13:CtFieldReadImpl@source" shape=ellipse]
54 [label="13:CtInvocationImpl@source.isDirectory()" shape=ellipse]
55 [label="14:CtTypeReferenceImpl@DirectoryScanner" shape=ellipse]
56 [label="14:CtExecutableReferenceImpl@getDirectoryScanner()" shape=ellipse]
57 [label="14:CtVirtualElement@getDirectoryScanner" shape=ellipse]
58 [label="14:CtSuperAccessImpl@super" shape=ellipse]
59 [label="14:CtFieldReadImpl@source" shape=ellipse]
60 [label="14:CtInvocationImpl@super.getDirectoryScanner(source)" shape=ellipse]
61 [label="14:CtVirtualElement@ds" shape=ellipse]
62 [label="14:CtLocalVariableImpl@DirectoryScanner ds = super.getDirectoryScanner(source)" shape=ellipse]
63 [label="15:CtVirtualElement@String[]" shape=ellipse]
64 [label="15:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
65 [label="15:CtExecutableReferenceImpl@getIncludedFiles()" shape=ellipse]
66 [label="15:CtVirtualElement@getIncludedFiles" shape=ellipse]
67 [label="15:CtVariableReadImpl@ds" shape=ellipse]
68 [label="15:CtInvocationImpl@ds.getIncludedFiles()" shape=ellipse]
69 [label="15:CtVirtualElement@files" shape=ellipse]
70 [label="15:CtLocalVariableImpl@String[] files = ds.getIncludedFiles()" shape=ellipse]
71 [label="16:CtTypeReferenceImpl@int" shape=ellipse]
72 [label="16:CtLiteralImpl@0" shape=ellipse]
73 [label="16:CtVirtualElement@i" shape=ellipse]
74 [label="16:CtLocalVariableImpl@int i = 0" shape=ellipse]
75 [label="16:CtVariableReadImpl@i" shape=ellipse]
76 [label="16:CtVariableReadImpl@files" shape=ellipse]
77 [label="16:CtLocalVariableReferenceImpl@files" shape=ellipse]
78 [label="16:CtFieldReadImpl@files.length" shape=ellipse]
79 [label="16:CtBinaryOperatorImpl@i < files.length" shape=ellipse]
80 [label="16:CtVariableWriteImpl@i" shape=ellipse]
81 [label="16:CtUnaryOperatorImpl@++i" shape=ellipse]
82 [label="17:CtTypeReferenceImpl@File" shape=ellipse]
83 [label="17:CtTypeReferenceImpl@File" shape=ellipse]
84 [label="17:CtFieldReadImpl@source" shape=ellipse]
85 [label="17:CtVariableReadImpl@files" shape=ellipse]
86 [label="17:CtVariableReadImpl@i" shape=ellipse]
87 [label="17:CtArrayReadImpl@files[i]" shape=ellipse]
88 [label="17:CtConstructorCallImpl@new File(source, files[i])" shape=ellipse]
89 [label="17:CtVirtualElement@file" shape=ellipse]
90 [label="17:CtLocalVariableImpl@File file = new File(source, files[i])" shape=ellipse]
91 [label="18:CtExecutableReferenceImpl@expandFile(<unknown>,<unknown>,<unknown>)" shape=ellipse]
92 [label="18:CtVirtualElement@expandFile" shape=ellipse]
93 [label="18:CtVariableReadImpl@touch" shape=ellipse]
94 [label="18:CtVariableReadImpl@file" shape=ellipse]
95 [label="18:CtFieldReadImpl@dest" shape=ellipse]
96 [label="18:CtInvocationImpl@expandFile(touch, file, dest)" shape=ellipse]
97 [label="16:CtBlockImpl@\{
    File file = new File(source, files[i]);
    expandFile(touch, file, dest);
\}" shape=ellipse]
98 [label="16:CtForImpl@for (int i = 0; i < files.length; ++i) \{
    File file = new File(source, files[i]);
    expandFile(touch, file, dest);
\}" shape=ellipse]
99 [label="13:CtBlockImpl@\{
    DirectoryScanner ds = super.getDirectoryScanner(source);
    String[] files = ds.getIncludedFiles();
    for (int i = 0; i < files.length; ++i) \{
        File file = new File(source, files[i]);
        expandFile(touch, file, dest);
    \}
\}" shape=ellipse]
100 [label="21:CtExecutableReferenceImpl@expandFile(<unknown>,<unknown>,<unknown>)" shape=ellipse]
101 [label="21:CtVirtualElement@expandFile" shape=ellipse]
102 [label="21:CtVariableReadImpl@touch" shape=ellipse]
103 [label="21:CtFieldReadImpl@source" shape=ellipse]
104 [label="21:CtFieldReadImpl@dest" shape=ellipse]
105 [label="21:CtInvocationImpl@expandFile(touch, source, dest)" shape=ellipse]
106 [label="20:CtBlockImpl@\{
    expandFile(touch, source, dest);
\}" shape=ellipse]
107 [label="13:CtIfImpl@if (source.isDirectory()) \{
    DirectoryScanner ds = super.getDirectoryScanner(source);
    String[] files = ds.getIncludedFiles();
    for (int i = 0; i < files.length; ++i) \{
        File file = new File(source, files[i]);
        expandFile(touch, file, dest);
    \}
\} else \{
    expandFile(touch, source, dest);
\}" shape=ellipse]
108 [label="2:CtBlockImpl@\{
    if (\"expand\".equals(taskType)) \{
        log(\"!! expand is deprecated. Use unzip instead. !!\");
    \}
    Touch touch = ((Touch) (project.createTask(\"touch\")));
    touch.setOwningTarget(target);
    touch.setTaskName(getTaskName());
    touch.setLocation(getLocation());
    if (source == null) \{
        throw new BuildException(\"Source attribute must be specified\");
    \}
    if (source.isDirectory()) \{
        DirectoryScanner ds = super.getDirectoryScanner(source);
        String[] files = ds.getIncludedFiles();
        for (int i = 0; i < files.length; ++i) \{
            File file = new File(source, files[i]);
            expandFile(touch, file, dest);
        \}
    \} else \{
        expandFile(touch, source, dest);
    \}
\}" shape=ellipse]
109 [label="2:CtMethodImpl@public void execute() throws BuildException \{
    if (\"expand\".equals(taskType)) \{
        log(\"!! expand is deprecated. Use unzip instead. !!\");
    \}
    Touch touch = ((Touch) (project.createTask(\"touch\")));
    touch.setOwningTarget(target);
    touch.setTaskName(getTaskName());
    touch.setLocation(getLocation());
    if (source == null) \{
        throw new BuildException(\"Source attribute must be specified\");
    \}
    if (source.isDirectory()) \{
        DirectoryScanner ds = super.getDirectoryScanner(source);
        String[] files = ds.getIncludedFiles();
        for (int i = 0; i < files.length; ++i) \{
            File file = new File(source, files[i]);
            expandFile(touch, file, dest);
        \}
    \} else \{
        expandFile(touch, source, dest);
    \}
\}" shape=ellipse]
110 [label="13:Insert@INSERT" shape=ellipse]
111 [label="13:CtIfImpl@if (dest == null) \{
    throw new BuildException(\"Dest attribute must be specified\");
\}" shape=ellipse]
7 -> 4 [label="AST"];
7 -> 5 [label="AST"];
7 -> 3 [label="AST"];
7 -> 6 [label="AST"];
7 -> 12 [label="Control Dep"];
7 -> 11 [label="Control Dep"];
7 -> 8 [label="Control Dep"];
7 -> 10 [label="Control Dep"];
11 -> 9 [label="AST"];
11 -> 8 [label="AST"];
11 -> 10 [label="AST"];
12 -> 11 [label="AST"];
13 -> 7 [label="AST"];
13 -> 12 [label="AST"];
17 -> 21 [label="Data Dep"];
19 -> 16 [label="AST"];
19 -> 20 [label="AST"];
19 -> 17 [label="AST"];
19 -> 15 [label="AST"];
19 -> 18 [label="AST"];
21 -> 25 [label="Define-Use"];
21 -> 30 [label="Define-Use"];
21 -> 37 [label="Define-Use"];
21 -> 93 [label="Define-Use"];
21 -> 102 [label="Define-Use"];
22 -> 21 [label="AST"];
22 -> 14 [label="AST"];
22 -> 19 [label="AST"];
27 -> 24 [label="AST"];
27 -> 25 [label="AST"];
27 -> 23 [label="AST"];
27 -> 26 [label="AST"];
33 -> 32 [label="AST"];
33 -> 31 [label="AST"];
34 -> 29 [label="AST"];
34 -> 30 [label="AST"];
34 -> 28 [label="AST"];
34 -> 33 [label="AST"];
40 -> 39 [label="AST"];
40 -> 38 [label="AST"];
41 -> 36 [label="AST"];
41 -> 37 [label="AST"];
41 -> 35 [label="AST"];
41 -> 40 [label="AST"];
44 -> 42 [label="AST"];
44 -> 43 [label="AST"];
44 -> 49 [label="Control Dep"];
44 -> 48 [label="Control Dep"];
44 -> 47 [label="Control Dep"];
44 -> 46 [label="Control Dep"];
47 -> 46 [label="AST"];
48 -> 47 [label="AST"];
49 -> 48 [label="AST"];
50 -> 44 [label="AST"];
50 -> 49 [label="AST"];
54 -> 52 [label="AST"];
54 -> 53 [label="AST"];
54 -> 51 [label="AST"];
54 -> 99 [label="Control Dep"];
54 -> 62 [label="Control Dep"];
54 -> 60 [label="Control Dep"];
54 -> 56 [label="Control Dep"];
54 -> 58 [label="Control Dep"];
54 -> 59 [label="Control Dep"];
54 -> 70 [label="Control Dep"];
54 -> 64 [label="Control Dep"];
54 -> 68 [label="Control Dep"];
54 -> 65 [label="Control Dep"];
54 -> 67 [label="Control Dep"];
54 -> 98 [label="Control Dep"];
54 -> 74 [label="Control Dep"];
54 -> 72 [label="Control Dep"];
54 -> 79 [label="Control Dep"];
54 -> 75 [label="Control Dep"];
54 -> 78 [label="Control Dep"];
54 -> 76 [label="Control Dep"];
54 -> 81 [label="Control Dep"];
54 -> 80 [label="Control Dep"];
54 -> 106 [label="Control Dep"];
54 -> 105 [label="Control Dep"];
54 -> 100 [label="Control Dep"];
54 -> 102 [label="Control Dep"];
54 -> 103 [label="Control Dep"];
54 -> 104 [label="Control Dep"];
58 -> 61 [label="Data Dep"];
59 -> 61 [label="Data Dep"];
60 -> 57 [label="AST"];
60 -> 58 [label="AST"];
60 -> 56 [label="AST"];
60 -> 59 [label="AST"];
61 -> 67 [label="Define-Use"];
62 -> 61 [label="AST"];
62 -> 55 [label="AST"];
62 -> 60 [label="AST"];
64 -> 63 [label="AST"];
67 -> 69 [label="Data Dep"];
68 -> 66 [label="AST"];
68 -> 67 [label="AST"];
68 -> 65 [label="AST"];
69 -> 76 [label="Define-Use"];
69 -> 85 [label="Define-Use"];
69 -> 87 [label="Define-Use"];
70 -> 69 [label="AST"];
70 -> 64 [label="AST"];
70 -> 68 [label="AST"];
73 -> 75 [label="Define-Use"];
73 -> 86 [label="Define-Use"];
74 -> 73 [label="AST"];
74 -> 71 [label="AST"];
74 -> 72 [label="AST"];
76 -> 77 [label="AST"];
78 -> 76 [label="AST"];
79 -> 75 [label="AST"];
79 -> 78 [label="AST"];
79 -> 97 [label="Control Dep"];
79 -> 90 [label="Control Dep"];
79 -> 88 [label="Control Dep"];
79 -> 84 [label="Control Dep"];
79 -> 87 [label="Control Dep"];
79 -> 85 [label="Control Dep"];
79 -> 86 [label="Control Dep"];
79 -> 96 [label="Control Dep"];
79 -> 91 [label="Control Dep"];
79 -> 93 [label="Control Dep"];
79 -> 94 [label="Control Dep"];
79 -> 95 [label="Control Dep"];
80 -> 86 [label="Define-Use"];
81 -> 80 [label="AST"];
84 -> 89 [label="Data Dep"];
87 -> 85 [label="AST"];
87 -> 86 [label="AST"];
87 -> 89 [label="Data Dep"];
88 -> 84 [label="AST"];
88 -> 87 [label="AST"];
89 -> 94 [label="Define-Use"];
90 -> 89 [label="AST"];
90 -> 82 [label="AST"];
90 -> 88 [label="AST"];
96 -> 92 [label="AST"];
96 -> 91 [label="AST"];
96 -> 93 [label="AST"];
96 -> 94 [label="AST"];
96 -> 95 [label="AST"];
97 -> 90 [label="AST"];
97 -> 96 [label="AST"];
98 -> 74 [label="AST"];
98 -> 79 [label="AST"];
98 -> 81 [label="AST"];
98 -> 97 [label="AST"];
99 -> 62 [label="AST"];
99 -> 70 [label="AST"];
99 -> 98 [label="AST"];
105 -> 101 [label="AST"];
105 -> 100 [label="AST"];
105 -> 102 [label="AST"];
105 -> 103 [label="AST"];
105 -> 104 [label="AST"];
106 -> 105 [label="AST"];
107 -> 54 [label="AST"];
107 -> 99 [label="AST"];
107 -> 106 [label="AST"];
108 -> 13 [label="AST"];
108 -> 22 [label="AST"];
108 -> 27 [label="AST"];
108 -> 34 [label="AST"];
108 -> 41 [label="AST"];
108 -> 50 [label="AST"];
108 -> 107 [label="AST"];
109 -> 1 [label="AST"];
109 -> 0 [label="AST"];
109 -> 2 [label="AST"];
109 -> 108 [label="AST"];
109 -> 110 [label="Action"];
110 -> 111 [label="Action"];
}