digraph "Pattern" {
0 [label="testXmlns#?#3:UPDATE
testDelay#?#3:UPDATE" shape=ellipse]
1 [label="testXmlns#?#3:expectLog(\"xmlns\", \"MyTask called\")
testDelay#?#3:expectLogContaining(\"delay\", \"MyTask called\")" shape=ellipse]
2 [label="testXmlns#?#2:\{
    expectLog(\"xmlns\", \"MyTask called\");
\}
testDelay#?#2:\{
    expectLogContaining(\"delay\", \"MyTask called\");
\}" shape=ellipse]
3 [label="testXmlns#?#2:public void testXmlns() \{
    expectLog(\"xmlns\", \"MyTask called\");
\}
testDelay#?#2:public void testDelay() \{
    expectLogContaining(\"delay\", \"MyTask called\");
\}" shape=ellipse]
4 [label="testXmlns#?#3:expectLog
testDelay#?#3:expectLogContaining" shape=ellipse]
5 [label="testXmlns#?#-1:
testDelay#?#-1:" shape=ellipse]
6 [label="testXmlns#?#-1:PlaceHold
testDelay#?#-1:PlaceHold" shape=ellipse]
7 [label="testXmlns#?#-1:PlaceHold
testDelay#?#-1:PlaceHold" shape=ellipse]
8 [label="testXmlns#?#3:expectLog(java.lang.String,java.lang.String)
testDelay#?#3:expectLogContaining(java.lang.String,java.lang.String)" shape=ellipse]
9 [label="testXmlns#?#-1:String
testDelay#?#-1:String" shape=ellipse]
10 [label="testXmlns#?#-1:String
testDelay#?#-1:String" shape=ellipse]
11 [label="testXmlns#?#3:\"xmlns\"
testDelay#?#3:\"MyTask called\"" shape=ellipse]
12 [label="testXmlns#?#-1:String
testDelay#?#-1:String" shape=ellipse]
13 [label="testXmlns#?#3:\"MyTask called\"
testDelay#?#3:\"delay\"" shape=ellipse]
14 [label="testXmlns#?#-1:String
testDelay#?#-1:String" shape=ellipse]
15 [label="testXmlns#?#5:assertEquals(\"MyTask called\", buildRule.getLog())
testDelay#?#5:assertContains(\"MyTask called\", buildRule.getLog())" shape=ellipse]
0 -> 15 [label="Action:2"];
1 -> 0 [label="Action:2"];
1 -> 4 [label="AST:2"];
1 -> 5 [label="AST:2"];
1 -> 8 [label="AST:2"];
1 -> 11 [label="AST:2"];
1 -> 13 [label="AST:2"];
2 -> 1 [label="AST:2"];
3 -> 2 [label="AST:2"];
5 -> 6 [label="AST:2"];
5 -> 7 [label="AST:2"];
8 -> 9 [label="AST:2"];
8 -> 10 [label="AST:2"];
11 -> 12 [label="AST:2"];
13 -> 14 [label="AST:2"];
}