digraph "Pattern" {
0 [label="testImplicitNotOptional#?#2:INSERT
testIsfalseIncomplete1#?#2:INSERT
testFilesmatchIncomplete#?#2:INSERT
testConditionEmpty#?#2:INSERT
testContainsIncomplete1#?#2:INSERT
testContainsIncomplete2#?#2:INSERT
testIstrueIncomplete1#?#2:INSERT
testImplicitExplicit#?#2:INSERT
testConditionIncomplete#?#2:INSERT
testNegationIncomplete#?#2:INSERT" shape=ellipse]
1 [label="testImplicitNotOptional#?#2:public void testImplicitNotOptional() \{
    expectSpecificBuildException(\"implicit.notoptional\", \"Missing nested elements for implicit element implicit\", \"Missing nested elements for implicit element implicit\");
\}
testIsfalseIncomplete1#?#2:public void testIsfalseIncomplete1() \{
    expectSpecificBuildException(\"isfalse-incomplete\", \"Missing attribute\", \"Nothing to test for falsehood\");
\}
testFilesmatchIncomplete#?#2:public void testFilesmatchIncomplete() \{
    expectSpecificBuildException(\"filesmatch-incomplete\", \"Missing file2 attribute\", \"both file1 and file2 are required in filesmatch\");
\}
testConditionEmpty#?#2:public void testConditionEmpty() \{
    expectSpecificBuildException(\"condition-empty\", \"no conditions\", \"You must nest a condition into <condition>\");
\}
testContainsIncomplete1#?#2:public void testContainsIncomplete1() \{
    expectSpecificBuildException(\"contains-incomplete1\", \"Missing contains attribute\", \"both string and substring are required in contains\");
\}
testContainsIncomplete2#?#2:public void testContainsIncomplete2() \{
    expectSpecificBuildException(\"contains-incomplete2\", \"Missing contains attribute\", \"both string and substring are required in contains\");
\}
testIstrueIncomplete1#?#2:public void testIstrueIncomplete1() \{
    expectSpecificBuildException(\"istrue-incomplete\", \"Missing attribute\", \"Nothing to test for truth\");
\}
testImplicitExplicit#?#2:public void testImplicitExplicit() \{
    expectSpecificBuildException(\"implicit.explicit\", \"Only one element allowed when using implicit elements\", \"Only one element allowed when using implicit elements\");
\}
testConditionIncomplete#?#2:public void testConditionIncomplete() \{
    expectSpecificBuildException(\"condition-incomplete\", \"property attribute has been omitted\", \"The property attribute is required.\");
\}
testNegationIncomplete#?#2:public void testNegationIncomplete() \{
    expectSpecificBuildException(\"negationincomplete\", \"no conditions in <not>\", \"You must nest a condition into <not>\");
\}" shape=ellipse]
2 [label="testImplicitNotOptional#?#2:testImplicitNotOptional
testIsfalseIncomplete1#?#2:testIsfalseIncomplete1
testFilesmatchIncomplete#?#2:testFilesmatchIncomplete
testConditionEmpty#?#2:testConditionEmpty
testContainsIncomplete1#?#2:testContainsIncomplete1
testContainsIncomplete2#?#2:testContainsIncomplete2
testIstrueIncomplete1#?#2:testIstrueIncomplete1
testImplicitExplicit#?#2:testImplicitExplicit
testConditionIncomplete#?#2:testConditionIncomplete
testNegationIncomplete#?#2:testNegationIncomplete" shape=ellipse]
3 [label="testImplicitNotOptional#?#2:void
testIsfalseIncomplete1#?#2:void
testFilesmatchIncomplete#?#2:void
testConditionEmpty#?#2:void
testContainsIncomplete1#?#2:void
testContainsIncomplete2#?#2:void
testIstrueIncomplete1#?#2:void
testImplicitExplicit#?#2:void
testConditionIncomplete#?#2:void
testNegationIncomplete#?#2:void" shape=ellipse]
4 [label="testImplicitNotOptional#?#2:\{
    expectSpecificBuildException(\"implicit.notoptional\", \"Missing nested elements for implicit element implicit\", \"Missing nested elements for implicit element implicit\");
\}
testIsfalseIncomplete1#?#2:\{
    expectSpecificBuildException(\"isfalse-incomplete\", \"Missing attribute\", \"Nothing to test for falsehood\");
\}
testFilesmatchIncomplete#?#2:\{
    expectSpecificBuildException(\"filesmatch-incomplete\", \"Missing file2 attribute\", \"both file1 and file2 are required in filesmatch\");
\}
testConditionEmpty#?#2:\{
    expectSpecificBuildException(\"condition-empty\", \"no conditions\", \"You must nest a condition into <condition>\");
\}
testContainsIncomplete1#?#2:\{
    expectSpecificBuildException(\"contains-incomplete1\", \"Missing contains attribute\", \"both string and substring are required in contains\");
\}
testContainsIncomplete2#?#2:\{
    expectSpecificBuildException(\"contains-incomplete2\", \"Missing contains attribute\", \"both string and substring are required in contains\");
\}
testIstrueIncomplete1#?#2:\{
    expectSpecificBuildException(\"istrue-incomplete\", \"Missing attribute\", \"Nothing to test for truth\");
\}
testImplicitExplicit#?#2:\{
    expectSpecificBuildException(\"implicit.explicit\", \"Only one element allowed when using implicit elements\", \"Only one element allowed when using implicit elements\");
\}
testConditionIncomplete#?#2:\{
    expectSpecificBuildException(\"condition-incomplete\", \"property attribute has been omitted\", \"The property attribute is required.\");
\}
testNegationIncomplete#?#2:\{
    expectSpecificBuildException(\"negationincomplete\", \"no conditions in <not>\", \"You must nest a condition into <not>\");
\}" shape=ellipse]
5 [label="testImplicitNotOptional#?#3:expectSpecificBuildException(\"implicit.notoptional\", \"Missing nested elements for implicit element implicit\", \"Missing nested elements for implicit element implicit\")
testIsfalseIncomplete1#?#3:expectSpecificBuildException(\"isfalse-incomplete\", \"Missing attribute\", \"Nothing to test for falsehood\")
testFilesmatchIncomplete#?#3:expectSpecificBuildException(\"filesmatch-incomplete\", \"Missing file2 attribute\", \"both file1 and file2 are required in filesmatch\")
testConditionEmpty#?#3:expectSpecificBuildException(\"condition-empty\", \"no conditions\", \"You must nest a condition into <condition>\")
testContainsIncomplete1#?#3:expectSpecificBuildException(\"contains-incomplete1\", \"Missing contains attribute\", \"both string and substring are required in contains\")
testContainsIncomplete2#?#3:expectSpecificBuildException(\"contains-incomplete2\", \"Missing contains attribute\", \"both string and substring are required in contains\")
testIstrueIncomplete1#?#3:expectSpecificBuildException(\"istrue-incomplete\", \"Missing attribute\", \"Nothing to test for truth\")
testImplicitExplicit#?#3:expectSpecificBuildException(\"implicit.explicit\", \"Only one element allowed when using implicit elements\", \"Only one element allowed when using implicit elements\")
testConditionIncomplete#?#3:expectSpecificBuildException(\"condition-incomplete\", \"property attribute has been omitted\", \"The property attribute is required.\")
testNegationIncomplete#?#3:expectSpecificBuildException(\"negationincomplete\", \"no conditions in <not>\", \"You must nest a condition into <not>\")" shape=ellipse]
6 [label="testImplicitNotOptional#?#2:public
testIsfalseIncomplete1#?#2:public
testFilesmatchIncomplete#?#2:public
testConditionEmpty#?#2:public
testContainsIncomplete1#?#2:public
testContainsIncomplete2#?#2:public
testIstrueIncomplete1#?#2:public
testImplicitExplicit#?#2:public
testConditionIncomplete#?#2:public
testNegationIncomplete#?#2:public" shape=ellipse]
7 [label="testImplicitNotOptional#?#2:VE: Modifiers_Method
testIsfalseIncomplete1#?#2:VE: Modifiers_Method
testFilesmatchIncomplete#?#2:VE: Modifiers_Method
testConditionEmpty#?#2:VE: Modifiers_Method
testContainsIncomplete1#?#2:VE: Modifiers_Method
testContainsIncomplete2#?#2:VE: Modifiers_Method
testIstrueIncomplete1#?#2:VE: Modifiers_Method
testImplicitExplicit#?#2:VE: Modifiers_Method
testConditionIncomplete#?#2:VE: Modifiers_Method
testNegationIncomplete#?#2:VE: Modifiers_Method" shape=ellipse]
8 [label="testImplicitNotOptional#?#4:INSERT
testIsfalseIncomplete1#?#4:INSERT
testFilesmatchIncomplete#?#4:INSERT
testConditionEmpty#?#4:INSERT
testContainsIncomplete1#?#4:INSERT
testContainsIncomplete2#?#4:INSERT
testIstrueIncomplete1#?#4:INSERT
testImplicitExplicit#?#4:INSERT
testConditionIncomplete#?#4:INSERT
testNegationIncomplete#?#4:INSERT" shape=ellipse]
9 [label="testImplicitNotOptional#?#4:try \{
    buildRule.executeTarget(\"implicit.notoptional\");
    fail(\"BuildException expected: Missing nested elements for implicit element implicit\");
\} catch (BuildException ex) \{
    assertEquals(\"Missing nested elements for implicit element implicit\", ex.getMessage());
\}
testIsfalseIncomplete1#?#4:try \{
    buildRule.executeTarget(\"isfalse-incomplete\");
    fail(\"BuildException should have been thrown - Missing attribute\");
\} catch (BuildException ex) \{
    assertEquals(\"Nothing to test for falsehood\", ex.getMessage());
\}
testFilesmatchIncomplete#?#4:try \{
    buildRule.executeTarget(\"filesmatch-incomplete\");
    fail(\"Build exception should have been thrown - Missing file2 attirbute\");
\} catch (BuildException ex) \{
    assertEquals(\"both file1 and file2 are required in filesmatch\", ex.getMessage());
\}
testConditionEmpty#?#4:try \{
    buildRule.executeTarget(\"condition-empty\");
    fail(\"BuildException should have been thrown - no conditions\");
\} catch (BuildException ex) \{
    assertEquals(\"You must nest a condition into <condition>\", ex.getMessage());
\}
testContainsIncomplete1#?#4:try \{
    buildRule.executeTarget(\"contains-incomplete1\");
    fail(\"BuildException should have been thrown - Missing contains attribute\");
\} catch (BuildException ex) \{
    assertEquals(\"both string and substring are required in contains\", ex.getMessage());
\}
testContainsIncomplete2#?#4:try \{
    buildRule.executeTarget(\"contains-incomplete2\");
    fail(\"BuildException should have been thrown - Missing contains attribute\");
\} catch (BuildException ex) \{
    assertEquals(\"both string and substring are required in contains\", ex.getMessage());
\}
testIstrueIncomplete1#?#4:try \{
    buildRule.executeTarget(\"istrue-incomplete\");
    fail(\"BuildException should have been thrown - Missing attribute\");
\} catch (BuildException ex) \{
    assertEquals(\"Nothing to test for truth\", ex.getMessage());
\}
testImplicitExplicit#?#4:try \{
    buildRule.executeTarget(\"implicit.explicit\");
    fail(\"BuildException expected: Only one element allowed when using implicit elements\");
\} catch (BuildException ex) \{
    assertEquals(\"Only one element allowed when using implicit elements\", ex.getMessage());
\}
testConditionIncomplete#?#4:try \{
    buildRule.executeTarget(\"condition-incomplete\");
    fail(\"BuildException should have been thrown - property attribute has been omitted\");
\} catch (BuildException ex) \{
    assertEquals(\"The property attribute is required.\", ex.getMessage());
\}
testNegationIncomplete#?#4:try \{
    buildRule.executeTarget(\"negationincomplete\");
    fail(\"BuildException should have been thrown - no conditions in <not>\");
\} catch (BuildException ex) \{
    assertEquals(\"You must nest a condition into <not>\", ex.getMessage());
\}" shape=ellipse]
10 [label="testImplicitNotOptional#?#2:@Test
testIsfalseIncomplete1#?#2:@Test
testFilesmatchIncomplete#?#2:@Test
testConditionEmpty#?#2:@Test
testContainsIncomplete1#?#2:@Test
testContainsIncomplete2#?#2:@Test
testIstrueIncomplete1#?#2:@Test
testImplicitExplicit#?#2:@Test
testConditionIncomplete#?#2:@Test
testNegationIncomplete#?#2:@Test" shape=ellipse]
0 -> 10 [label="Action:10"];
1 -> 0 [label="Action:10"];
1 -> 2 [label="AST:10"];
1 -> 3 [label="AST:10"];
1 -> 4 [label="AST:10"];
1 -> 6 [label="AST:10"];
1 -> 7 [label="AST:10"];
1 -> 8 [label="Action:10"];
4 -> 5 [label="AST:10"];
8 -> 9 [label="Action:10"];
}