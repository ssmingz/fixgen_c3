digraph "sendString#?,String,boolean" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@sendString" shape=ellipse]
2 [label="2:CtParameterImpl@String s" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
4 [label="2:CtParameterImpl@boolean echoString" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@boolean" shape=ellipse]
6 [label="3:CtTypeReferenceImpl@OutputStream" shape=ellipse]
7 [label="3:CtExecutableReferenceImpl@getOutputStream()" shape=ellipse]
8 [label="3:CtVirtualElement@getOutputStream" shape=ellipse]
9 [label="3:CtThisAccessImpl@this" shape=ellipse]
10 [label="3:CtInvocationImpl@this.getOutputStream()" shape=ellipse]
11 [label="3:CtVirtualElement@os" shape=ellipse]
12 [label="3:CtLocalVariableImpl@OutputStream os = this.getOutputStream()" shape=ellipse]
13 [label="5:CtExecutableReferenceImpl@write(byte[])" shape=ellipse]
14 [label="5:CtVirtualElement@write" shape=ellipse]
15 [label="5:CtVariableReadImpl@os" shape=ellipse]
16 [label="5:CtExecutableReferenceImpl@getBytes()" shape=ellipse]
17 [label="5:CtVirtualElement@getBytes" shape=ellipse]
18 [label="5:CtVariableReadImpl@s" shape=ellipse]
19 [label="5:CtLiteralImpl@\"\n\"" shape=ellipse]
20 [label="5:CtBinaryOperatorImpl@(s + \"\n\")" shape=ellipse]
21 [label="5:CtInvocationImpl@(s + \"\n\").getBytes()" shape=ellipse]
22 [label="5:CtInvocationImpl@os.write((s + \"\n\").getBytes())" shape=ellipse]
23 [label="6:CtVariableReadImpl@echoString" shape=ellipse]
24 [label="7:CtExecutableReferenceImpl@log(java.lang.String,<unknown>)" shape=ellipse]
25 [label="7:CtVirtualElement@log" shape=ellipse]
26 [label="7:CtVariableReadImpl@s" shape=ellipse]
27 [label="7:CtTypeAccessImpl@MSG_INFO" shape=ellipse]
28 [label="7:CtInvocationImpl@log(s, MSG_INFO)" shape=ellipse]
29 [label="6:CtBlockImpl@\{
    log(s, MSG_INFO);
\}" shape=ellipse]
30 [label="6:CtIfImpl@if (echoString) \{
    log(s, MSG_INFO);
\}" shape=ellipse]
31 [label="9:CtExecutableReferenceImpl@flush()" shape=ellipse]
32 [label="9:CtVirtualElement@flush" shape=ellipse]
33 [label="9:CtVariableReadImpl@os" shape=ellipse]
34 [label="9:CtInvocationImpl@os.flush()" shape=ellipse]
35 [label="4:CtBlockImpl@\{
    os.write((s + \"\n\").getBytes());
    if (echoString) \{
        log(s, MSG_INFO);
    \}
    os.flush();
\}" shape=ellipse]
36 [label="10:CtVirtualElement@e" shape=ellipse]
37 [label="10:CtTypeReferenceImpl@Exception" shape=ellipse]
38 [label="10:CtCatchVariableImpl@Exception e" shape=ellipse]
39 [label="11:CtTypeReferenceImpl@BuildException" shape=ellipse]
40 [label="11:CtVariableReadImpl@e" shape=ellipse]
41 [label="11:CtConstructorCallImpl@new BuildException(e)" shape=ellipse]
42 [label="11:CtThrowImpl@throw new BuildException(e)" shape=ellipse]
43 [label="10:CtBlockImpl@\{
    throw new BuildException(e);
\}" shape=ellipse]
44 [label="10:CtCatchImpl@ catch (Exception e) \{
    throw new BuildException(e);
\}" shape=ellipse]
45 [label="4:CtTryImpl@try \{
    os.write((s + \"\n\").getBytes());
    if (echoString) \{
        log(s, MSG_INFO);
    \}
    os.flush();
\} catch (Exception e) \{
    throw new BuildException(e);
\}" shape=ellipse]
46 [label="2:CtBlockImpl@\{
    OutputStream os = this.getOutputStream();
    try \{
        os.write((s + \"\n\").getBytes());
        if (echoString) \{
            log(s, MSG_INFO);
        \}
        os.flush();
    \} catch (Exception e) \{
        throw new BuildException(e);
    \}
\}" shape=ellipse]
47 [label="2:CtMethodImpl@public void sendString(String s, boolean echoString) \{
    OutputStream os = this.getOutputStream();
    try \{
        os.write((s + \"\n\").getBytes());
        if (echoString) \{
            log(s, MSG_INFO);
        \}
        os.flush();
    \} catch (Exception e) \{
        throw new BuildException(e);
    \}
\}" shape=ellipse]
48 [label="11:Update@UPDATE" shape=ellipse]
49 [label="11:CtConstructorCallImpl@new BuildException(\"Error\", e)" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
9 -> 11 [label="Data Dep"];
10 -> 8 [label="AST"];
10 -> 9 [label="AST"];
10 -> 7 [label="AST"];
11 -> 15 [label="Define-Use"];
11 -> 33 [label="Define-Use"];
12 -> 11 [label="AST"];
12 -> 6 [label="AST"];
12 -> 10 [label="AST"];
20 -> 18 [label="AST"];
20 -> 19 [label="AST"];
21 -> 17 [label="AST"];
21 -> 20 [label="AST"];
21 -> 16 [label="AST"];
22 -> 14 [label="AST"];
22 -> 15 [label="AST"];
22 -> 13 [label="AST"];
22 -> 21 [label="AST"];
23 -> 29 [label="Control Dep"];
23 -> 28 [label="Control Dep"];
23 -> 24 [label="Control Dep"];
23 -> 26 [label="Control Dep"];
23 -> 27 [label="Control Dep"];
28 -> 25 [label="AST"];
28 -> 24 [label="AST"];
28 -> 26 [label="AST"];
28 -> 27 [label="AST"];
29 -> 28 [label="AST"];
30 -> 23 [label="AST"];
30 -> 29 [label="AST"];
34 -> 32 [label="AST"];
34 -> 33 [label="AST"];
34 -> 31 [label="AST"];
35 -> 22 [label="AST"];
35 -> 30 [label="AST"];
35 -> 34 [label="AST"];
36 -> 40 [label="Define-Use"];
38 -> 36 [label="AST"];
38 -> 37 [label="AST"];
38 -> 43 [label="Control Dep"];
38 -> 42 [label="Control Dep"];
38 -> 41 [label="Control Dep"];
38 -> 40 [label="Control Dep"];
41 -> 40 [label="AST"];
41 -> 48 [label="Action"];
42 -> 41 [label="AST"];
43 -> 42 [label="AST"];
44 -> 38 [label="AST"];
44 -> 43 [label="AST"];
45 -> 35 [label="AST"];
45 -> 44 [label="AST"];
46 -> 12 [label="AST"];
46 -> 45 [label="AST"];
47 -> 1 [label="AST"];
47 -> 0 [label="AST"];
47 -> 2 [label="AST"];
47 -> 4 [label="AST"];
47 -> 46 [label="AST"];
48 -> 49 [label="Action"];
}