digraph "execute#?" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@execute" shape=ellipse]
2 [label="2:CtTypeReferenceImpl@BuildException" shape=ellipse]
3 [label="4:CtExecutableReferenceImpl@addBeans(<unknown>)" shape=ellipse]
4 [label="4:CtVirtualElement@addBeans" shape=ellipse]
5 [label="4:CtExecutableReferenceImpl@getProperties()" shape=ellipse]
6 [label="4:CtVirtualElement@getProperties" shape=ellipse]
7 [label="4:CtFieldReadImpl@project" shape=ellipse]
8 [label="4:CtInvocationImpl@project.getProperties()" shape=ellipse]
9 [label="4:CtInvocationImpl@addBeans(project.getProperties())" shape=ellipse]
10 [label="5:CtExecutableReferenceImpl@addBeans(<unknown>)" shape=ellipse]
11 [label="5:CtVirtualElement@addBeans" shape=ellipse]
12 [label="5:CtExecutableReferenceImpl@getUserProperties()" shape=ellipse]
13 [label="5:CtVirtualElement@getUserProperties" shape=ellipse]
14 [label="5:CtFieldReadImpl@project" shape=ellipse]
15 [label="5:CtInvocationImpl@project.getUserProperties()" shape=ellipse]
16 [label="5:CtInvocationImpl@addBeans(project.getUserProperties())" shape=ellipse]
17 [label="6:CtExecutableReferenceImpl@addBeans(<unknown>)" shape=ellipse]
18 [label="6:CtVirtualElement@addBeans" shape=ellipse]
19 [label="6:CtExecutableReferenceImpl@getTargets()" shape=ellipse]
20 [label="6:CtVirtualElement@getTargets" shape=ellipse]
21 [label="6:CtFieldReadImpl@project" shape=ellipse]
22 [label="6:CtInvocationImpl@project.getTargets()" shape=ellipse]
23 [label="6:CtInvocationImpl@addBeans(project.getTargets())" shape=ellipse]
24 [label="7:CtExecutableReferenceImpl@addBeans(<unknown>)" shape=ellipse]
25 [label="7:CtVirtualElement@addBeans" shape=ellipse]
26 [label="7:CtExecutableReferenceImpl@getReferences()" shape=ellipse]
27 [label="7:CtVirtualElement@getReferences" shape=ellipse]
28 [label="7:CtFieldReadImpl@project" shape=ellipse]
29 [label="7:CtInvocationImpl@project.getReferences()" shape=ellipse]
30 [label="7:CtInvocationImpl@addBeans(project.getReferences())" shape=ellipse]
31 [label="8:CtExecutableReferenceImpl@put(java.lang.String)" shape=ellipse]
32 [label="8:CtVirtualElement@put" shape=ellipse]
33 [label="8:CtFieldReadImpl@beans" shape=ellipse]
34 [label="8:CtLiteralImpl@\"project\"" shape=ellipse]
35 [label="8:CtExecutableReferenceImpl@getProject()" shape=ellipse]
36 [label="8:CtVirtualElement@getProject" shape=ellipse]
37 [label="8:CtInvocationImpl@getProject()" shape=ellipse]
38 [label="8:CtInvocationImpl@beans.put(\"project\", getProject())" shape=ellipse]
39 [label="9:CtExecutableReferenceImpl@put(java.lang.String,PlaceHold)" shape=ellipse]
40 [label="9:CtVirtualElement@put" shape=ellipse]
41 [label="9:CtFieldReadImpl@beans" shape=ellipse]
42 [label="9:CtLiteralImpl@\"self\"" shape=ellipse]
43 [label="9:CtThisAccessImpl@this" shape=ellipse]
44 [label="9:CtInvocationImpl@beans.put(\"self\", this)" shape=ellipse]
45 [label="10:CtTypeReferenceImpl@BSFManager" shape=ellipse]
46 [label="10:CtTypeReferenceImpl@BSFManager" shape=ellipse]
47 [label="10:CtConstructorCallImpl@new BSFManager()" shape=ellipse]
48 [label="10:CtVirtualElement@manager" shape=ellipse]
49 [label="10:CtLocalVariableImpl@BSFManager manager = new BSFManager()" shape=ellipse]
50 [label="11:CtTypeReferenceImpl@Enumeration" shape=ellipse]
51 [label="11:CtExecutableReferenceImpl@keys()" shape=ellipse]
52 [label="11:CtVirtualElement@keys" shape=ellipse]
53 [label="11:CtFieldReadImpl@beans" shape=ellipse]
54 [label="11:CtInvocationImpl@beans.keys()" shape=ellipse]
55 [label="11:CtVirtualElement@e" shape=ellipse]
56 [label="11:CtLocalVariableImpl@Enumeration e = beans.keys()" shape=ellipse]
57 [label="11:CtExecutableReferenceImpl@hasMoreElements()" shape=ellipse]
58 [label="11:CtVirtualElement@hasMoreElements" shape=ellipse]
59 [label="11:CtVariableReadImpl@e" shape=ellipse]
60 [label="11:CtInvocationImpl@e.hasMoreElements()" shape=ellipse]
61 [label="12:CtTypeReferenceImpl@String" shape=ellipse]
62 [label="12:CtExecutableReferenceImpl@nextElement()" shape=ellipse]
63 [label="12:CtVirtualElement@nextElement" shape=ellipse]
64 [label="12:CtVariableReadImpl@e" shape=ellipse]
65 [label="12:CtInvocationImpl@((String) (e.nextElement()))" shape=ellipse]
66 [label="12:CtTypeReferenceImpl@String" shape=ellipse]
67 [label="12:CtVirtualElement@key" shape=ellipse]
68 [label="12:CtLocalVariableImpl@String key = ((String) (e.nextElement()))" shape=ellipse]
69 [label="13:CtTypeReferenceImpl@Object" shape=ellipse]
70 [label="13:CtExecutableReferenceImpl@get(java.lang.String)" shape=ellipse]
71 [label="13:CtVirtualElement@get" shape=ellipse]
72 [label="13:CtFieldReadImpl@beans" shape=ellipse]
73 [label="13:CtVariableReadImpl@key" shape=ellipse]
74 [label="13:CtInvocationImpl@beans.get(key)" shape=ellipse]
75 [label="13:CtVirtualElement@value" shape=ellipse]
76 [label="13:CtLocalVariableImpl@Object value = beans.get(key)" shape=ellipse]
77 [label="14:CtExecutableReferenceImpl@declareBean(java.lang.String,java.lang.Object,java.lang.Class)" shape=ellipse]
78 [label="14:CtVirtualElement@declareBean" shape=ellipse]
79 [label="14:CtVariableReadImpl@manager" shape=ellipse]
80 [label="14:CtVariableReadImpl@key" shape=ellipse]
81 [label="14:CtVariableReadImpl@value" shape=ellipse]
82 [label="14:CtExecutableReferenceImpl@getClass()" shape=ellipse]
83 [label="14:CtVirtualElement@getClass" shape=ellipse]
84 [label="14:CtVariableReadImpl@value" shape=ellipse]
85 [label="14:CtInvocationImpl@value.getClass()" shape=ellipse]
86 [label="14:CtInvocationImpl@manager.declareBean(key, value, value.getClass())" shape=ellipse]
87 [label="11:CtBlockImpl@\{
    String key = ((String) (e.nextElement()));
    Object value = beans.get(key);
    manager.declareBean(key, value, value.getClass());
\}" shape=ellipse]
88 [label="11:CtForImpl@for (Enumeration e = beans.keys(); e.hasMoreElements();) \{
    String key = ((String) (e.nextElement()));
    Object value = beans.get(key);
    manager.declareBean(key, value, value.getClass());
\}" shape=ellipse]
89 [label="16:CtExecutableReferenceImpl@exec(java.lang.String,int,int)" shape=ellipse]
90 [label="16:CtVirtualElement@exec" shape=ellipse]
91 [label="16:CtVariableReadImpl@manager" shape=ellipse]
92 [label="16:CtFieldReadImpl@language" shape=ellipse]
93 [label="16:CtLiteralImpl@\"<ANT>\"" shape=ellipse]
94 [label="16:CtLiteralImpl@0" shape=ellipse]
95 [label="16:CtLiteralImpl@0" shape=ellipse]
96 [label="16:CtFieldReadImpl@script" shape=ellipse]
97 [label="16:CtInvocationImpl@manager.exec(language, \"<ANT>\", 0, 0, script)" shape=ellipse]
98 [label="3:CtBlockImpl@\{
    addBeans(project.getProperties());
    addBeans(project.getUserProperties());
    addBeans(project.getTargets());
    addBeans(project.getReferences());
    beans.put(\"project\", getProject());
    beans.put(\"self\", this);
    BSFManager manager = new BSFManager();
    for (Enumeration e = beans.keys(); e.hasMoreElements();) \{
        String key = ((String) (e.nextElement()));
        Object value = beans.get(key);
        manager.declareBean(key, value, value.getClass());
    \}
    manager.exec(language, \"<ANT>\", 0, 0, script);
\}" shape=ellipse]
99 [label="17:CtVirtualElement@be" shape=ellipse]
100 [label="17:CtTypeReferenceImpl@BSFException" shape=ellipse]
101 [label="17:CtCatchVariableImpl@BSFException be" shape=ellipse]
102 [label="18:CtTypeReferenceImpl@Throwable" shape=ellipse]
103 [label="18:CtVariableReadImpl@be" shape=ellipse]
104 [label="18:CtVirtualElement@t" shape=ellipse]
105 [label="18:CtLocalVariableImpl@Throwable t = be" shape=ellipse]
106 [label="19:CtTypeReferenceImpl@Throwable" shape=ellipse]
107 [label="19:CtExecutableReferenceImpl@getTargetException()" shape=ellipse]
108 [label="19:CtVirtualElement@getTargetException" shape=ellipse]
109 [label="19:CtVariableReadImpl@be" shape=ellipse]
110 [label="19:CtInvocationImpl@be.getTargetException()" shape=ellipse]
111 [label="19:CtVirtualElement@te" shape=ellipse]
112 [label="19:CtLocalVariableImpl@Throwable te = be.getTargetException()" shape=ellipse]
113 [label="20:CtVariableReadImpl@te" shape=ellipse]
114 [label="20:CtLiteralImpl@null" shape=ellipse]
115 [label="20:CtBinaryOperatorImpl@te != null" shape=ellipse]
116 [label="21:CtVariableReadImpl@te" shape=ellipse]
117 [label="21:CtTypeAccessImpl@BuildException" shape=ellipse]
118 [label="21:CtTypeReferenceImpl@BuildException" shape=ellipse]
119 [label="21:CtBinaryOperatorImpl@te instanceof BuildException" shape=ellipse]
120 [label="22:CtVariableReadImpl@((BuildException) (te))" shape=ellipse]
121 [label="22:CtTypeReferenceImpl@BuildException" shape=ellipse]
122 [label="22:CtThrowImpl@throw ((BuildException) (te))" shape=ellipse]
123 [label="21:CtBlockImpl@\{
    throw ((BuildException) (te));
\}" shape=ellipse]
124 [label="24:CtVariableWriteImpl@t" shape=ellipse]
125 [label="24:CtVariableReadImpl@te" shape=ellipse]
126 [label="24:CtAssignmentImpl@t = te" shape=ellipse]
127 [label="23:CtBlockImpl@\{
    t = te;
\}" shape=ellipse]
128 [label="21:CtIfImpl@if (te instanceof BuildException) \{
    throw ((BuildException) (te));
\} else \{
    t = te;
\}" shape=ellipse]
129 [label="20:CtBlockImpl@\{
    if (te instanceof BuildException) \{
        throw ((BuildException) (te));
    \} else \{
        t = te;
    \}
\}" shape=ellipse]
130 [label="20:CtIfImpl@if (te != null) \{
    if (te instanceof BuildException) \{
        throw ((BuildException) (te));
    \} else \{
        t = te;
    \}
\}" shape=ellipse]
131 [label="27:CtTypeReferenceImpl@BuildException" shape=ellipse]
132 [label="27:CtVariableReadImpl@t" shape=ellipse]
133 [label="27:CtConstructorCallImpl@new BuildException(t)" shape=ellipse]
134 [label="27:CtThrowImpl@throw new BuildException(t)" shape=ellipse]
135 [label="17:CtBlockImpl@\{
    Throwable t = be;
    Throwable te = be.getTargetException();
    if (te != null) \{
        if (te instanceof BuildException) \{
            throw ((BuildException) (te));
        \} else \{
            t = te;
        \}
    \}
    throw new BuildException(t);
\}" shape=ellipse]
136 [label="17:CtCatchImpl@ catch (BSFException be) \{
    Throwable t = be;
    Throwable te = be.getTargetException();
    if (te != null) \{
        if (te instanceof BuildException) \{
            throw ((BuildException) (te));
        \} else \{
            t = te;
        \}
    \}
    throw new BuildException(t);
\}" shape=ellipse]
137 [label="3:CtTryImpl@try \{
    addBeans(project.getProperties());
    addBeans(project.getUserProperties());
    addBeans(project.getTargets());
    addBeans(project.getReferences());
    beans.put(\"project\", getProject());
    beans.put(\"self\", this);
    BSFManager manager = new BSFManager();
    for (Enumeration e = beans.keys(); e.hasMoreElements();) \{
        String key = ((String) (e.nextElement()));
        Object value = beans.get(key);
        manager.declareBean(key, value, value.getClass());
    \}
    manager.exec(language, \"<ANT>\", 0, 0, script);
\} catch (BSFException be) \{
    Throwable t = be;
    Throwable te = be.getTargetException();
    if (te != null) \{
        if (te instanceof BuildException) \{
            throw ((BuildException) (te));
        \} else \{
            t = te;
        \}
    \}
    throw new BuildException(t);
\}" shape=ellipse]
138 [label="2:CtBlockImpl@\{
    try \{
        addBeans(project.getProperties());
        addBeans(project.getUserProperties());
        addBeans(project.getTargets());
        addBeans(project.getReferences());
        beans.put(\"project\", getProject());
        beans.put(\"self\", this);
        BSFManager manager = new BSFManager();
        for (Enumeration e = beans.keys(); e.hasMoreElements();) \{
            String key = ((String) (e.nextElement()));
            Object value = beans.get(key);
            manager.declareBean(key, value, value.getClass());
        \}
        manager.exec(language, \"<ANT>\", 0, 0, script);
    \} catch (BSFException be) \{
        Throwable t = be;
        Throwable te = be.getTargetException();
        if (te != null) \{
            if (te instanceof BuildException) \{
                throw ((BuildException) (te));
            \} else \{
                t = te;
            \}
        \}
        throw new BuildException(t);
    \}
\}" shape=ellipse]
139 [label="2:CtMethodImpl@public void execute() throws BuildException \{
    try \{
        addBeans(project.getProperties());
        addBeans(project.getUserProperties());
        addBeans(project.getTargets());
        addBeans(project.getReferences());
        beans.put(\"project\", getProject());
        beans.put(\"self\", this);
        BSFManager manager = new BSFManager();
        for (Enumeration e = beans.keys(); e.hasMoreElements();) \{
            String key = ((String) (e.nextElement()));
            Object value = beans.get(key);
            manager.declareBean(key, value, value.getClass());
        \}
        manager.exec(language, \"<ANT>\", 0, 0, script);
    \} catch (BSFException be) \{
        Throwable t = be;
        Throwable te = be.getTargetException();
        if (te != null) \{
            if (te instanceof BuildException) \{
                throw ((BuildException) (te));
            \} else \{
                t = te;
            \}
        \}
        throw new BuildException(t);
    \}
\}" shape=ellipse]
140 [label="27:Update@UPDATE" shape=ellipse]
141 [label="27:CtConstructorCallImpl@new BuildException(\"Error\", t)" shape=ellipse]
8 -> 6 [label="AST"];
8 -> 7 [label="AST"];
8 -> 5 [label="AST"];
9 -> 4 [label="AST"];
9 -> 3 [label="AST"];
9 -> 8 [label="AST"];
15 -> 13 [label="AST"];
15 -> 14 [label="AST"];
15 -> 12 [label="AST"];
16 -> 11 [label="AST"];
16 -> 10 [label="AST"];
16 -> 15 [label="AST"];
22 -> 20 [label="AST"];
22 -> 21 [label="AST"];
22 -> 19 [label="AST"];
23 -> 18 [label="AST"];
23 -> 17 [label="AST"];
23 -> 22 [label="AST"];
29 -> 27 [label="AST"];
29 -> 28 [label="AST"];
29 -> 26 [label="AST"];
30 -> 25 [label="AST"];
30 -> 24 [label="AST"];
30 -> 29 [label="AST"];
37 -> 36 [label="AST"];
37 -> 35 [label="AST"];
38 -> 32 [label="AST"];
38 -> 33 [label="AST"];
38 -> 31 [label="AST"];
38 -> 34 [label="AST"];
38 -> 37 [label="AST"];
44 -> 40 [label="AST"];
44 -> 41 [label="AST"];
44 -> 39 [label="AST"];
44 -> 42 [label="AST"];
44 -> 43 [label="AST"];
48 -> 79 [label="Define-Use"];
48 -> 91 [label="Define-Use"];
49 -> 48 [label="AST"];
49 -> 45 [label="AST"];
49 -> 47 [label="AST"];
53 -> 55 [label="Data Dep"];
54 -> 52 [label="AST"];
54 -> 53 [label="AST"];
54 -> 51 [label="AST"];
55 -> 59 [label="Define-Use"];
55 -> 64 [label="Define-Use"];
56 -> 55 [label="AST"];
56 -> 50 [label="AST"];
56 -> 54 [label="AST"];
60 -> 58 [label="AST"];
60 -> 59 [label="AST"];
60 -> 57 [label="AST"];
60 -> 87 [label="Control Dep"];
60 -> 68 [label="Control Dep"];
60 -> 65 [label="Control Dep"];
60 -> 62 [label="Control Dep"];
60 -> 64 [label="Control Dep"];
60 -> 76 [label="Control Dep"];
60 -> 74 [label="Control Dep"];
60 -> 70 [label="Control Dep"];
60 -> 72 [label="Control Dep"];
60 -> 73 [label="Control Dep"];
60 -> 86 [label="Control Dep"];
60 -> 77 [label="Control Dep"];
60 -> 79 [label="Control Dep"];
60 -> 80 [label="Control Dep"];
60 -> 81 [label="Control Dep"];
60 -> 85 [label="Control Dep"];
60 -> 82 [label="Control Dep"];
60 -> 84 [label="Control Dep"];
64 -> 67 [label="Data Dep"];
65 -> 63 [label="AST"];
65 -> 66 [label="AST"];
65 -> 64 [label="AST"];
65 -> 62 [label="AST"];
67 -> 73 [label="Define-Use"];
67 -> 80 [label="Define-Use"];
68 -> 67 [label="AST"];
68 -> 61 [label="AST"];
68 -> 65 [label="AST"];
72 -> 75 [label="Data Dep"];
73 -> 75 [label="Data Dep"];
74 -> 71 [label="AST"];
74 -> 72 [label="AST"];
74 -> 70 [label="AST"];
74 -> 73 [label="AST"];
75 -> 81 [label="Define-Use"];
75 -> 84 [label="Define-Use"];
76 -> 75 [label="AST"];
76 -> 69 [label="AST"];
76 -> 74 [label="AST"];
85 -> 83 [label="AST"];
85 -> 84 [label="AST"];
85 -> 82 [label="AST"];
86 -> 78 [label="AST"];
86 -> 79 [label="AST"];
86 -> 77 [label="AST"];
86 -> 80 [label="AST"];
86 -> 81 [label="AST"];
86 -> 85 [label="AST"];
87 -> 68 [label="AST"];
87 -> 76 [label="AST"];
87 -> 86 [label="AST"];
88 -> 56 [label="AST"];
88 -> 60 [label="AST"];
88 -> 87 [label="AST"];
97 -> 90 [label="AST"];
97 -> 91 [label="AST"];
97 -> 89 [label="AST"];
97 -> 92 [label="AST"];
97 -> 93 [label="AST"];
97 -> 94 [label="AST"];
97 -> 95 [label="AST"];
97 -> 96 [label="AST"];
98 -> 9 [label="AST"];
98 -> 16 [label="AST"];
98 -> 23 [label="AST"];
98 -> 30 [label="AST"];
98 -> 38 [label="AST"];
98 -> 44 [label="AST"];
98 -> 49 [label="AST"];
98 -> 88 [label="AST"];
98 -> 97 [label="AST"];
99 -> 103 [label="Define-Use"];
99 -> 109 [label="Define-Use"];
101 -> 99 [label="AST"];
101 -> 100 [label="AST"];
101 -> 135 [label="Control Dep"];
101 -> 105 [label="Control Dep"];
101 -> 103 [label="Control Dep"];
101 -> 112 [label="Control Dep"];
101 -> 110 [label="Control Dep"];
101 -> 107 [label="Control Dep"];
101 -> 109 [label="Control Dep"];
101 -> 130 [label="Control Dep"];
101 -> 115 [label="Control Dep"];
101 -> 113 [label="Control Dep"];
101 -> 114 [label="Control Dep"];
101 -> 134 [label="Control Dep"];
101 -> 133 [label="Control Dep"];
101 -> 132 [label="Control Dep"];
103 -> 104 [label="Data Dep"];
104 -> 132 [label="Define-Use"];
105 -> 104 [label="AST"];
105 -> 102 [label="AST"];
105 -> 103 [label="AST"];
109 -> 111 [label="Data Dep"];
110 -> 108 [label="AST"];
110 -> 109 [label="AST"];
110 -> 107 [label="AST"];
111 -> 113 [label="Define-Use"];
111 -> 116 [label="Define-Use"];
111 -> 120 [label="Define-Use"];
111 -> 125 [label="Define-Use"];
112 -> 111 [label="AST"];
112 -> 106 [label="AST"];
112 -> 110 [label="AST"];
115 -> 113 [label="AST"];
115 -> 114 [label="AST"];
115 -> 129 [label="Control Dep"];
115 -> 128 [label="Control Dep"];
115 -> 119 [label="Control Dep"];
115 -> 116 [label="Control Dep"];
115 -> 117 [label="Control Dep"];
117 -> 118 [label="AST"];
119 -> 116 [label="AST"];
119 -> 117 [label="AST"];
119 -> 123 [label="Control Dep"];
119 -> 122 [label="Control Dep"];
119 -> 120 [label="Control Dep"];
119 -> 127 [label="Control Dep"];
119 -> 126 [label="Control Dep"];
119 -> 124 [label="Control Dep"];
119 -> 125 [label="Control Dep"];
120 -> 121 [label="AST"];
122 -> 120 [label="AST"];
123 -> 122 [label="AST"];
124 -> 132 [label="Define-Use"];
125 -> 124 [label="Data Dep"];
126 -> 124 [label="AST"];
126 -> 125 [label="AST"];
127 -> 126 [label="AST"];
128 -> 119 [label="AST"];
128 -> 123 [label="AST"];
128 -> 127 [label="AST"];
129 -> 128 [label="AST"];
130 -> 115 [label="AST"];
130 -> 129 [label="AST"];
133 -> 132 [label="AST"];
133 -> 140 [label="Action"];
134 -> 133 [label="AST"];
135 -> 105 [label="AST"];
135 -> 112 [label="AST"];
135 -> 130 [label="AST"];
135 -> 134 [label="AST"];
136 -> 101 [label="AST"];
136 -> 135 [label="AST"];
137 -> 98 [label="AST"];
137 -> 136 [label="AST"];
138 -> 137 [label="AST"];
139 -> 1 [label="AST"];
139 -> 0 [label="AST"];
139 -> 2 [label="AST"];
139 -> 138 [label="AST"];
140 -> 141 [label="Action"];
}