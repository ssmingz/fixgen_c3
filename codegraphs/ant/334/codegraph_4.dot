digraph "setSrc#?,String" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@setSrc" shape=ellipse]
2 [label="2:CtParameterImpl@String fileName" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
4 [label="3:CtTypeReferenceImpl@File" shape=ellipse]
5 [label="3:CtTypeReferenceImpl@File" shape=ellipse]
6 [label="3:CtVariableReadImpl@fileName" shape=ellipse]
7 [label="3:CtConstructorCallImpl@new File(fileName)" shape=ellipse]
8 [label="3:CtVirtualElement@file" shape=ellipse]
9 [label="3:CtLocalVariableImpl@File file = new File(fileName)" shape=ellipse]
10 [label="4:CtExecutableReferenceImpl@exists()" shape=ellipse]
11 [label="4:CtVirtualElement@exists" shape=ellipse]
12 [label="4:CtVariableReadImpl@file" shape=ellipse]
13 [label="4:CtInvocationImpl@file.exists()" shape=ellipse]
14 [label="4:CtUnaryOperatorImpl@!file.exists()" shape=ellipse]
15 [label="5:CtTypeReferenceImpl@BuildException" shape=ellipse]
16 [label="5:CtLiteralImpl@\"file \"" shape=ellipse]
17 [label="5:CtVariableReadImpl@fileName" shape=ellipse]
18 [label="5:CtBinaryOperatorImpl@(\"file \" + fileName)" shape=ellipse]
19 [label="5:CtLiteralImpl@\" not found.\"" shape=ellipse]
20 [label="5:CtBinaryOperatorImpl@(\"file \" + fileName) + \" not found.\"" shape=ellipse]
21 [label="5:CtConstructorCallImpl@new BuildException((\"file \" + fileName) + \" not found.\")" shape=ellipse]
22 [label="5:CtThrowImpl@throw new BuildException((\"file \" + fileName) + \" not found.\")" shape=ellipse]
23 [label="4:CtBlockImpl@\{
    throw new BuildException((\"file \" + fileName) + \" not found.\");
\}" shape=ellipse]
24 [label="4:CtIfImpl@if (!file.exists()) \{
    throw new BuildException((\"file \" + fileName) + \" not found.\");
\}" shape=ellipse]
25 [label="7:CtTypeReferenceImpl@int" shape=ellipse]
26 [label="7:CtExecutableReferenceImpl@length()" shape=ellipse]
27 [label="7:CtVirtualElement@length" shape=ellipse]
28 [label="7:CtVariableReadImpl@file" shape=ellipse]
29 [label="7:CtInvocationImpl@((int) (file.length()))" shape=ellipse]
30 [label="7:CtTypeReferenceImpl@int" shape=ellipse]
31 [label="7:CtVirtualElement@count" shape=ellipse]
32 [label="7:CtLocalVariableImpl@int count = ((int) (file.length()))" shape=ellipse]
33 [label="8:CtVirtualElement@byte[]" shape=ellipse]
34 [label="8:CtArrayTypeReferenceImpl@byte[]" shape=ellipse]
35 [label="8:CtNewArrayImpl@new byte[count]" shape=ellipse]
36 [label="8:CtVariableReadImpl@count" shape=ellipse]
37 [label="8:CtVirtualElement@data" shape=ellipse]
38 [label="8:CtLocalVariableImpl@byte data[] = new byte[count]" shape=ellipse]
39 [label="10:CtTypeReferenceImpl@FileInputStream" shape=ellipse]
40 [label="10:CtTypeReferenceImpl@FileInputStream" shape=ellipse]
41 [label="10:CtVariableReadImpl@file" shape=ellipse]
42 [label="10:CtConstructorCallImpl@new FileInputStream(file)" shape=ellipse]
43 [label="10:CtVirtualElement@inStream" shape=ellipse]
44 [label="10:CtLocalVariableImpl@FileInputStream inStream = new FileInputStream(file)" shape=ellipse]
45 [label="11:CtExecutableReferenceImpl@read(byte[])" shape=ellipse]
46 [label="11:CtVirtualElement@read" shape=ellipse]
47 [label="11:CtVariableReadImpl@inStream" shape=ellipse]
48 [label="11:CtVariableReadImpl@data" shape=ellipse]
49 [label="11:CtInvocationImpl@inStream.read(data)" shape=ellipse]
50 [label="12:CtExecutableReferenceImpl@close()" shape=ellipse]
51 [label="12:CtVirtualElement@close" shape=ellipse]
52 [label="12:CtVariableReadImpl@inStream" shape=ellipse]
53 [label="12:CtInvocationImpl@inStream.close()" shape=ellipse]
54 [label="9:CtBlockImpl@\{
    FileInputStream inStream = new FileInputStream(file);
    inStream.read(data);
    inStream.close();
\}" shape=ellipse]
55 [label="13:CtVirtualElement@e" shape=ellipse]
56 [label="13:CtTypeReferenceImpl@IOException" shape=ellipse]
57 [label="13:CtCatchVariableImpl@IOException e" shape=ellipse]
58 [label="14:CtTypeReferenceImpl@BuildException" shape=ellipse]
59 [label="14:CtVariableReadImpl@e" shape=ellipse]
60 [label="14:CtConstructorCallImpl@new BuildException(e)" shape=ellipse]
61 [label="14:CtThrowImpl@throw new BuildException(e)" shape=ellipse]
62 [label="13:CtBlockImpl@\{
    throw new BuildException(e);
\}" shape=ellipse]
63 [label="13:CtCatchImpl@ catch (IOException e) \{
    throw new BuildException(e);
\}" shape=ellipse]
64 [label="9:CtTryImpl@try \{
    FileInputStream inStream = new FileInputStream(file);
    inStream.read(data);
    inStream.close();
\} catch (IOException e) \{
    throw new BuildException(e);
\}" shape=ellipse]
65 [label="16:CtFieldWriteImpl@script" shape=ellipse]
66 [label="16:CtTypeReferenceImpl@String" shape=ellipse]
67 [label="16:CtVariableReadImpl@data" shape=ellipse]
68 [label="16:CtConstructorCallImpl@new String(data)" shape=ellipse]
69 [label="16:CtOperatorAssignmentImpl@script += new String(data)" shape=ellipse]
70 [label="2:CtBlockImpl@\{
    File file = new File(fileName);
    if (!file.exists()) \{
        throw new BuildException((\"file \" + fileName) + \" not found.\");
    \}
    int count = ((int) (file.length()));
    byte data[] = new byte[count];
    try \{
        FileInputStream inStream = new FileInputStream(file);
        inStream.read(data);
        inStream.close();
    \} catch (IOException e) \{
        throw new BuildException(e);
    \}
    script += new String(data);
\}" shape=ellipse]
71 [label="2:CtMethodImpl@public void setSrc(String fileName) \{
    File file = new File(fileName);
    if (!file.exists()) \{
        throw new BuildException((\"file \" + fileName) + \" not found.\");
    \}
    int count = ((int) (file.length()));
    byte data[] = new byte[count];
    try \{
        FileInputStream inStream = new FileInputStream(file);
        inStream.read(data);
        inStream.close();
    \} catch (IOException e) \{
        throw new BuildException(e);
    \}
    script += new String(data);
\}" shape=ellipse]
72 [label="14:Insert@INSERT" shape=ellipse]
73 [label="14:CtLiteralImpl@\"Error\"" shape=ellipse]
2 -> 3 [label="AST"];
6 -> 8 [label="Data Dep"];
7 -> 6 [label="AST"];
8 -> 12 [label="Define-Use"];
8 -> 28 [label="Define-Use"];
8 -> 41 [label="Define-Use"];
9 -> 8 [label="AST"];
9 -> 4 [label="AST"];
9 -> 7 [label="AST"];
13 -> 11 [label="AST"];
13 -> 12 [label="AST"];
13 -> 10 [label="AST"];
14 -> 13 [label="AST"];
14 -> 23 [label="Control Dep"];
14 -> 22 [label="Control Dep"];
14 -> 21 [label="Control Dep"];
14 -> 20 [label="Control Dep"];
14 -> 18 [label="Control Dep"];
14 -> 16 [label="Control Dep"];
14 -> 17 [label="Control Dep"];
14 -> 19 [label="Control Dep"];
18 -> 16 [label="AST"];
18 -> 17 [label="AST"];
20 -> 18 [label="AST"];
20 -> 19 [label="AST"];
21 -> 20 [label="AST"];
22 -> 21 [label="AST"];
23 -> 22 [label="AST"];
24 -> 14 [label="AST"];
24 -> 23 [label="AST"];
28 -> 31 [label="Data Dep"];
29 -> 27 [label="AST"];
29 -> 30 [label="AST"];
29 -> 28 [label="AST"];
29 -> 26 [label="AST"];
32 -> 31 [label="AST"];
32 -> 25 [label="AST"];
32 -> 29 [label="AST"];
34 -> 33 [label="AST"];
35 -> 36 [label="AST"];
36 -> 37 [label="Data Dep"];
37 -> 48 [label="Define-Use"];
37 -> 67 [label="Define-Use"];
38 -> 37 [label="AST"];
38 -> 34 [label="AST"];
38 -> 35 [label="AST"];
41 -> 43 [label="Data Dep"];
42 -> 41 [label="AST"];
43 -> 47 [label="Define-Use"];
43 -> 52 [label="Define-Use"];
44 -> 43 [label="AST"];
44 -> 39 [label="AST"];
44 -> 42 [label="AST"];
49 -> 46 [label="AST"];
49 -> 47 [label="AST"];
49 -> 45 [label="AST"];
49 -> 48 [label="AST"];
53 -> 51 [label="AST"];
53 -> 52 [label="AST"];
53 -> 50 [label="AST"];
54 -> 44 [label="AST"];
54 -> 49 [label="AST"];
54 -> 53 [label="AST"];
55 -> 59 [label="Define-Use"];
57 -> 55 [label="AST"];
57 -> 56 [label="AST"];
57 -> 62 [label="Control Dep"];
57 -> 61 [label="Control Dep"];
57 -> 60 [label="Control Dep"];
57 -> 59 [label="Control Dep"];
60 -> 59 [label="AST"];
60 -> 72 [label="Action"];
61 -> 60 [label="AST"];
62 -> 61 [label="AST"];
63 -> 57 [label="AST"];
63 -> 62 [label="AST"];
64 -> 54 [label="AST"];
64 -> 63 [label="AST"];
67 -> 65 [label="Data Dep"];
68 -> 67 [label="AST"];
69 -> 65 [label="AST"];
69 -> 68 [label="AST"];
70 -> 9 [label="AST"];
70 -> 24 [label="AST"];
70 -> 32 [label="AST"];
70 -> 38 [label="AST"];
70 -> 64 [label="AST"];
70 -> 69 [label="AST"];
71 -> 1 [label="AST"];
71 -> 0 [label="AST"];
71 -> 2 [label="AST"];
71 -> 70 [label="AST"];
72 -> 73 [label="Action"];
}