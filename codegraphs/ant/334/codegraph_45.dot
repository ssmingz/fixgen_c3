digraph "start#?" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@start" shape=ellipse]
2 [label="2:CtTypeReferenceImpl@BuildException" shape=ellipse]
3 [label="4:CtFieldReadImpl@p4input" shape=ellipse]
4 [label="4:CtLiteralImpl@null" shape=ellipse]
5 [label="4:CtBinaryOperatorImpl@(p4input != null)" shape=ellipse]
6 [label="4:CtExecutableReferenceImpl@length()" shape=ellipse]
7 [label="4:CtVirtualElement@length" shape=ellipse]
8 [label="4:CtFieldReadImpl@p4input" shape=ellipse]
9 [label="4:CtInvocationImpl@p4input.length()" shape=ellipse]
10 [label="4:CtLiteralImpl@0" shape=ellipse]
11 [label="4:CtBinaryOperatorImpl@(p4input.length() > 0)" shape=ellipse]
12 [label="4:CtBinaryOperatorImpl@((p4input != null) && (p4input.length() > 0))" shape=ellipse]
13 [label="4:CtFieldReadImpl@os" shape=ellipse]
14 [label="4:CtLiteralImpl@null" shape=ellipse]
15 [label="4:CtBinaryOperatorImpl@(os != null)" shape=ellipse]
16 [label="4:CtBinaryOperatorImpl@((p4input != null) && (p4input.length() > 0)) && (os != null)" shape=ellipse]
17 [label="5:CtExecutableReferenceImpl@write()" shape=ellipse]
18 [label="5:CtVirtualElement@write" shape=ellipse]
19 [label="5:CtFieldReadImpl@os" shape=ellipse]
20 [label="5:CtExecutableReferenceImpl@getBytes()" shape=ellipse]
21 [label="5:CtVirtualElement@getBytes" shape=ellipse]
22 [label="5:CtFieldReadImpl@p4input" shape=ellipse]
23 [label="5:CtInvocationImpl@p4input.getBytes()" shape=ellipse]
24 [label="5:CtInvocationImpl@os.write(p4input.getBytes())" shape=ellipse]
25 [label="6:CtExecutableReferenceImpl@flush()" shape=ellipse]
26 [label="6:CtVirtualElement@flush" shape=ellipse]
27 [label="6:CtFieldReadImpl@os" shape=ellipse]
28 [label="6:CtInvocationImpl@os.flush()" shape=ellipse]
29 [label="7:CtExecutableReferenceImpl@close()" shape=ellipse]
30 [label="7:CtVirtualElement@close" shape=ellipse]
31 [label="7:CtFieldReadImpl@os" shape=ellipse]
32 [label="7:CtInvocationImpl@os.close()" shape=ellipse]
33 [label="4:CtBlockImpl@\{
    os.write(p4input.getBytes());
    os.flush();
    os.close();
\}" shape=ellipse]
34 [label="4:CtIfImpl@if (((p4input != null) && (p4input.length() > 0)) && (os != null)) \{
    os.write(p4input.getBytes());
    os.flush();
    os.close();
\}" shape=ellipse]
35 [label="9:CtTypeReferenceImpl@BufferedReader" shape=ellipse]
36 [label="10:CtTypeReferenceImpl@BufferedReader" shape=ellipse]
37 [label="10:CtTypeReferenceImpl@InputStreamReader" shape=ellipse]
38 [label="10:CtTypeReferenceImpl@SequenceInputStream" shape=ellipse]
39 [label="10:CtFieldReadImpl@is" shape=ellipse]
40 [label="10:CtFieldReadImpl@es" shape=ellipse]
41 [label="10:CtConstructorCallImpl@new SequenceInputStream(is, es)" shape=ellipse]
42 [label="10:CtConstructorCallImpl@new InputStreamReader(new SequenceInputStream(is, es))" shape=ellipse]
43 [label="10:CtConstructorCallImpl@new BufferedReader(new InputStreamReader(new SequenceInputStream(is, es)))" shape=ellipse]
44 [label="9:CtVirtualElement@input" shape=ellipse]
45 [label="9:CtLocalVariableImpl@BufferedReader input = new BufferedReader(new InputStreamReader(new SequenceInputStream(is, es)))" shape=ellipse]
46 [label="11:CtTypeReferenceImpl@String" shape=ellipse]
47 [label="11:CtVirtualElement@line" shape=ellipse]
48 [label="11:CtLocalVariableImpl@String line" shape=ellipse]
49 [label="12:CtVariableWriteImpl@line" shape=ellipse]
50 [label="12:CtExecutableReferenceImpl@readLine()" shape=ellipse]
51 [label="12:CtVirtualElement@readLine" shape=ellipse]
52 [label="12:CtVariableReadImpl@input" shape=ellipse]
53 [label="12:CtInvocationImpl@input.readLine()" shape=ellipse]
54 [label="12:CtAssignmentImpl@(line = input.readLine())" shape=ellipse]
55 [label="12:CtLiteralImpl@null" shape=ellipse]
56 [label="12:CtBinaryOperatorImpl@(line = input.readLine()) != null" shape=ellipse]
57 [label="13:CtExecutableReferenceImpl@process(java.lang.String)" shape=ellipse]
58 [label="13:CtVirtualElement@process" shape=ellipse]
59 [label="13:CtVariableReadImpl@line" shape=ellipse]
60 [label="13:CtInvocationImpl@process(line)" shape=ellipse]
61 [label="12:CtBlockImpl@\{
    process(line);
\}" shape=ellipse]
62 [label="12:CtWhileImpl@while ((line = input.readLine()) != null) \{
    process(line);
\} " shape=ellipse]
63 [label="15:CtExecutableReferenceImpl@close()" shape=ellipse]
64 [label="15:CtVirtualElement@close" shape=ellipse]
65 [label="15:CtVariableReadImpl@input" shape=ellipse]
66 [label="15:CtInvocationImpl@input.close()" shape=ellipse]
67 [label="3:CtBlockImpl@\{
    if (((p4input != null) && (p4input.length() > 0)) && (os != null)) \{
        os.write(p4input.getBytes());
        os.flush();
        os.close();
    \}
    BufferedReader input = new BufferedReader(new InputStreamReader(new SequenceInputStream(is, es)));
    String line;
    while ((line = input.readLine()) != null) \{
        process(line);
    \} 
    input.close();
\}" shape=ellipse]
68 [label="16:CtVirtualElement@e" shape=ellipse]
69 [label="16:CtTypeReferenceImpl@Exception" shape=ellipse]
70 [label="16:CtCatchVariableImpl@Exception e" shape=ellipse]
71 [label="17:CtTypeReferenceImpl@BuildException" shape=ellipse]
72 [label="17:CtVariableReadImpl@e" shape=ellipse]
73 [label="17:CtConstructorCallImpl@new BuildException(e)" shape=ellipse]
74 [label="17:CtThrowImpl@throw new BuildException(e)" shape=ellipse]
75 [label="16:CtBlockImpl@\{
    throw new BuildException(e);
\}" shape=ellipse]
76 [label="16:CtCatchImpl@ catch (Exception e) \{
    throw new BuildException(e);
\}" shape=ellipse]
77 [label="3:CtTryImpl@try \{
    if (((p4input != null) && (p4input.length() > 0)) && (os != null)) \{
        os.write(p4input.getBytes());
        os.flush();
        os.close();
    \}
    BufferedReader input = new BufferedReader(new InputStreamReader(new SequenceInputStream(is, es)));
    String line;
    while ((line = input.readLine()) != null) \{
        process(line);
    \} 
    input.close();
\} catch (Exception e) \{
    throw new BuildException(e);
\}" shape=ellipse]
78 [label="2:CtBlockImpl@\{
    try \{
        if (((p4input != null) && (p4input.length() > 0)) && (os != null)) \{
            os.write(p4input.getBytes());
            os.flush();
            os.close();
        \}
        BufferedReader input = new BufferedReader(new InputStreamReader(new SequenceInputStream(is, es)));
        String line;
        while ((line = input.readLine()) != null) \{
            process(line);
        \} 
        input.close();
    \} catch (Exception e) \{
        throw new BuildException(e);
    \}
\}" shape=ellipse]
79 [label="2:CtMethodImpl@public void start() throws BuildException \{
    try \{
        if (((p4input != null) && (p4input.length() > 0)) && (os != null)) \{
            os.write(p4input.getBytes());
            os.flush();
            os.close();
        \}
        BufferedReader input = new BufferedReader(new InputStreamReader(new SequenceInputStream(is, es)));
        String line;
        while ((line = input.readLine()) != null) \{
            process(line);
        \} 
        input.close();
    \} catch (Exception e) \{
        throw new BuildException(e);
    \}
\}" shape=ellipse]
80 [label="17:Update@UPDATE" shape=ellipse]
81 [label="17:CtConstructorCallImpl@new BuildException(\"Error\", e)" shape=ellipse]
5 -> 3 [label="AST"];
5 -> 4 [label="AST"];
9 -> 7 [label="AST"];
9 -> 8 [label="AST"];
9 -> 6 [label="AST"];
11 -> 9 [label="AST"];
11 -> 10 [label="AST"];
12 -> 5 [label="AST"];
12 -> 11 [label="AST"];
15 -> 13 [label="AST"];
15 -> 14 [label="AST"];
16 -> 12 [label="AST"];
16 -> 15 [label="AST"];
16 -> 33 [label="Control Dep"];
16 -> 24 [label="Control Dep"];
16 -> 17 [label="Control Dep"];
16 -> 19 [label="Control Dep"];
16 -> 23 [label="Control Dep"];
16 -> 20 [label="Control Dep"];
16 -> 22 [label="Control Dep"];
16 -> 28 [label="Control Dep"];
16 -> 25 [label="Control Dep"];
16 -> 27 [label="Control Dep"];
16 -> 32 [label="Control Dep"];
16 -> 29 [label="Control Dep"];
16 -> 31 [label="Control Dep"];
23 -> 21 [label="AST"];
23 -> 22 [label="AST"];
23 -> 20 [label="AST"];
24 -> 18 [label="AST"];
24 -> 19 [label="AST"];
24 -> 17 [label="AST"];
24 -> 23 [label="AST"];
28 -> 26 [label="AST"];
28 -> 27 [label="AST"];
28 -> 25 [label="AST"];
32 -> 30 [label="AST"];
32 -> 31 [label="AST"];
32 -> 29 [label="AST"];
33 -> 24 [label="AST"];
33 -> 28 [label="AST"];
33 -> 32 [label="AST"];
34 -> 16 [label="AST"];
34 -> 33 [label="AST"];
39 -> 44 [label="Data Dep"];
40 -> 44 [label="Data Dep"];
41 -> 39 [label="AST"];
41 -> 40 [label="AST"];
42 -> 41 [label="AST"];
43 -> 42 [label="AST"];
44 -> 52 [label="Define-Use"];
44 -> 65 [label="Define-Use"];
45 -> 44 [label="AST"];
45 -> 35 [label="AST"];
45 -> 43 [label="AST"];
48 -> 47 [label="AST"];
48 -> 46 [label="AST"];
49 -> 59 [label="Define-Use"];
52 -> 49 [label="Data Dep"];
53 -> 51 [label="AST"];
53 -> 52 [label="AST"];
53 -> 50 [label="AST"];
54 -> 49 [label="AST"];
54 -> 53 [label="AST"];
56 -> 54 [label="AST"];
56 -> 55 [label="AST"];
56 -> 61 [label="Control Dep"];
56 -> 60 [label="Control Dep"];
56 -> 57 [label="Control Dep"];
56 -> 59 [label="Control Dep"];
60 -> 58 [label="AST"];
60 -> 57 [label="AST"];
60 -> 59 [label="AST"];
61 -> 60 [label="AST"];
62 -> 56 [label="AST"];
62 -> 61 [label="AST"];
66 -> 64 [label="AST"];
66 -> 65 [label="AST"];
66 -> 63 [label="AST"];
67 -> 34 [label="AST"];
67 -> 45 [label="AST"];
67 -> 48 [label="AST"];
67 -> 62 [label="AST"];
67 -> 66 [label="AST"];
68 -> 72 [label="Define-Use"];
70 -> 68 [label="AST"];
70 -> 69 [label="AST"];
70 -> 75 [label="Control Dep"];
70 -> 74 [label="Control Dep"];
70 -> 73 [label="Control Dep"];
70 -> 72 [label="Control Dep"];
73 -> 72 [label="AST"];
73 -> 80 [label="Action"];
74 -> 73 [label="AST"];
75 -> 74 [label="AST"];
76 -> 70 [label="AST"];
76 -> 75 [label="AST"];
77 -> 67 [label="AST"];
77 -> 76 [label="AST"];
78 -> 77 [label="AST"];
79 -> 1 [label="AST"];
79 -> 0 [label="AST"];
79 -> 2 [label="AST"];
79 -> 78 [label="AST"];
80 -> 81 [label="Action"];
}