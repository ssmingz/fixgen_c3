digraph "execute#?" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@execute" shape=ellipse]
2 [label="2:CtTypeReferenceImpl@BuildException" shape=ellipse]
3 [label="4:CtExecutableReferenceImpl@validate()" shape=ellipse]
4 [label="4:CtVirtualElement@validate" shape=ellipse]
5 [label="4:CtInvocationImpl@validate()" shape=ellipse]
6 [label="5:CtTypeReferenceImpl@long" shape=ellipse]
7 [label="5:CtExecutableReferenceImpl@getSleepTime()" shape=ellipse]
8 [label="5:CtVirtualElement@getSleepTime" shape=ellipse]
9 [label="5:CtInvocationImpl@getSleepTime()" shape=ellipse]
10 [label="5:CtVirtualElement@sleepTime" shape=ellipse]
11 [label="5:CtLocalVariableImpl@long sleepTime = getSleepTime()" shape=ellipse]
12 [label="6:CtExecutableReferenceImpl@log(java.lang.String,<unknown>)" shape=ellipse]
13 [label="6:CtVirtualElement@log" shape=ellipse]
14 [label="6:CtLiteralImpl@\"sleeping for \"" shape=ellipse]
15 [label="6:CtVariableReadImpl@sleepTime" shape=ellipse]
16 [label="6:CtBinaryOperatorImpl@(\"sleeping for \" + sleepTime)" shape=ellipse]
17 [label="6:CtLiteralImpl@\" milliseconds\"" shape=ellipse]
18 [label="6:CtBinaryOperatorImpl@(\"sleeping for \" + sleepTime) + \" milliseconds\"" shape=ellipse]
19 [label="6:CtTypeAccessImpl@MSG_VERBOSE" shape=ellipse]
20 [label="6:CtInvocationImpl@log((\"sleeping for \" + sleepTime) + \" milliseconds\", MSG_VERBOSE)" shape=ellipse]
21 [label="7:CtExecutableReferenceImpl@doSleep(long)" shape=ellipse]
22 [label="7:CtVirtualElement@doSleep" shape=ellipse]
23 [label="7:CtVariableReadImpl@sleepTime" shape=ellipse]
24 [label="7:CtInvocationImpl@doSleep(sleepTime)" shape=ellipse]
25 [label="3:CtBlockImpl@\{
    validate();
    long sleepTime = getSleepTime();
    log((\"sleeping for \" + sleepTime) + \" milliseconds\", MSG_VERBOSE);
    doSleep(sleepTime);
\}" shape=ellipse]
26 [label="8:CtVirtualElement@e" shape=ellipse]
27 [label="8:CtTypeReferenceImpl@Exception" shape=ellipse]
28 [label="8:CtCatchVariableImpl@Exception e" shape=ellipse]
29 [label="9:CtFieldReadImpl@failOnError" shape=ellipse]
30 [label="10:CtTypeReferenceImpl@BuildException" shape=ellipse]
31 [label="10:CtVariableReadImpl@e" shape=ellipse]
32 [label="10:CtConstructorCallImpl@new BuildException(e)" shape=ellipse]
33 [label="10:CtThrowImpl@throw new BuildException(e)" shape=ellipse]
34 [label="9:CtBlockImpl@\{
    throw new BuildException(e);
\}" shape=ellipse]
35 [label="12:CtTypeReferenceImpl@String" shape=ellipse]
36 [label="12:CtExecutableReferenceImpl@toString()" shape=ellipse]
37 [label="12:CtVirtualElement@toString" shape=ellipse]
38 [label="12:CtVariableReadImpl@e" shape=ellipse]
39 [label="12:CtInvocationImpl@e.toString()" shape=ellipse]
40 [label="12:CtVirtualElement@text" shape=ellipse]
41 [label="12:CtLocalVariableImpl@String text = e.toString()" shape=ellipse]
42 [label="13:CtExecutableReferenceImpl@log(java.lang.String,<unknown>)" shape=ellipse]
43 [label="13:CtVirtualElement@log" shape=ellipse]
44 [label="13:CtVariableReadImpl@text" shape=ellipse]
45 [label="13:CtTypeAccessImpl@MSG_ERR" shape=ellipse]
46 [label="13:CtInvocationImpl@log(text, MSG_ERR)" shape=ellipse]
47 [label="11:CtBlockImpl@\{
    String text = e.toString();
    log(text, MSG_ERR);
\}" shape=ellipse]
48 [label="9:CtIfImpl@if (failOnError) \{
    throw new BuildException(e);
\} else \{
    String text = e.toString();
    log(text, MSG_ERR);
\}" shape=ellipse]
49 [label="8:CtBlockImpl@\{
    if (failOnError) \{
        throw new BuildException(e);
    \} else \{
        String text = e.toString();
        log(text, MSG_ERR);
    \}
\}" shape=ellipse]
50 [label="8:CtCatchImpl@ catch (Exception e) \{
    if (failOnError) \{
        throw new BuildException(e);
    \} else \{
        String text = e.toString();
        log(text, MSG_ERR);
    \}
\}" shape=ellipse]
51 [label="3:CtTryImpl@try \{
    validate();
    long sleepTime = getSleepTime();
    log((\"sleeping for \" + sleepTime) + \" milliseconds\", MSG_VERBOSE);
    doSleep(sleepTime);
\} catch (Exception e) \{
    if (failOnError) \{
        throw new BuildException(e);
    \} else \{
        String text = e.toString();
        log(text, MSG_ERR);
    \}
\}" shape=ellipse]
52 [label="2:CtBlockImpl@\{
    try \{
        validate();
        long sleepTime = getSleepTime();
        log((\"sleeping for \" + sleepTime) + \" milliseconds\", MSG_VERBOSE);
        doSleep(sleepTime);
    \} catch (Exception e) \{
        if (failOnError) \{
            throw new BuildException(e);
        \} else \{
            String text = e.toString();
            log(text, MSG_ERR);
        \}
    \}
\}" shape=ellipse]
53 [label="2:CtMethodImpl@public void execute() throws BuildException \{
    try \{
        validate();
        long sleepTime = getSleepTime();
        log((\"sleeping for \" + sleepTime) + \" milliseconds\", MSG_VERBOSE);
        doSleep(sleepTime);
    \} catch (Exception e) \{
        if (failOnError) \{
            throw new BuildException(e);
        \} else \{
            String text = e.toString();
            log(text, MSG_ERR);
        \}
    \}
\}" shape=ellipse]
54 [label="10:Update@UPDATE" shape=ellipse]
55 [label="10:CtConstructorCallImpl@new BuildException(\"Error\", e)" shape=ellipse]
5 -> 4 [label="AST"];
5 -> 3 [label="AST"];
9 -> 8 [label="AST"];
9 -> 7 [label="AST"];
10 -> 15 [label="Define-Use"];
10 -> 23 [label="Define-Use"];
11 -> 10 [label="AST"];
11 -> 6 [label="AST"];
11 -> 9 [label="AST"];
16 -> 14 [label="AST"];
16 -> 15 [label="AST"];
18 -> 16 [label="AST"];
18 -> 17 [label="AST"];
20 -> 13 [label="AST"];
20 -> 12 [label="AST"];
20 -> 18 [label="AST"];
20 -> 19 [label="AST"];
24 -> 22 [label="AST"];
24 -> 21 [label="AST"];
24 -> 23 [label="AST"];
25 -> 5 [label="AST"];
25 -> 11 [label="AST"];
25 -> 20 [label="AST"];
25 -> 24 [label="AST"];
26 -> 31 [label="Define-Use"];
26 -> 38 [label="Define-Use"];
28 -> 26 [label="AST"];
28 -> 27 [label="AST"];
28 -> 49 [label="Control Dep"];
28 -> 48 [label="Control Dep"];
28 -> 29 [label="Control Dep"];
29 -> 34 [label="Control Dep"];
29 -> 33 [label="Control Dep"];
29 -> 32 [label="Control Dep"];
29 -> 31 [label="Control Dep"];
29 -> 47 [label="Control Dep"];
29 -> 41 [label="Control Dep"];
29 -> 39 [label="Control Dep"];
29 -> 36 [label="Control Dep"];
29 -> 38 [label="Control Dep"];
29 -> 46 [label="Control Dep"];
29 -> 42 [label="Control Dep"];
29 -> 44 [label="Control Dep"];
29 -> 45 [label="Control Dep"];
32 -> 31 [label="AST"];
32 -> 54 [label="Action"];
33 -> 32 [label="AST"];
34 -> 33 [label="AST"];
38 -> 40 [label="Data Dep"];
39 -> 37 [label="AST"];
39 -> 38 [label="AST"];
39 -> 36 [label="AST"];
40 -> 44 [label="Define-Use"];
41 -> 40 [label="AST"];
41 -> 35 [label="AST"];
41 -> 39 [label="AST"];
46 -> 43 [label="AST"];
46 -> 42 [label="AST"];
46 -> 44 [label="AST"];
46 -> 45 [label="AST"];
47 -> 41 [label="AST"];
47 -> 46 [label="AST"];
48 -> 29 [label="AST"];
48 -> 34 [label="AST"];
48 -> 47 [label="AST"];
49 -> 48 [label="AST"];
50 -> 28 [label="AST"];
50 -> 49 [label="AST"];
51 -> 25 [label="AST"];
51 -> 50 [label="AST"];
52 -> 51 [label="AST"];
53 -> 1 [label="AST"];
53 -> 0 [label="AST"];
53 -> 2 [label="AST"];
53 -> 52 [label="AST"];
54 -> 55 [label="Action"];
}