digraph "nextLine#?" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@nextLine" shape=ellipse]
2 [label="2:CtTypeReferenceImpl@BuildException" shape=ellipse]
3 [label="3:CtTypeReferenceImpl@int" shape=ellipse]
4 [label="3:CtLiteralImpl@1" shape=ellipse]
5 [label="3:CtUnaryOperatorImpl@-1" shape=ellipse]
6 [label="3:CtVirtualElement@ch" shape=ellipse]
7 [label="3:CtLocalVariableImpl@int ch = -1" shape=ellipse]
8 [label="4:CtTypeReferenceImpl@int" shape=ellipse]
9 [label="4:CtLiteralImpl@0" shape=ellipse]
10 [label="4:CtVirtualElement@eolcount" shape=ellipse]
11 [label="4:CtLocalVariableImpl@int eolcount = 0" shape=ellipse]
12 [label="5:CtExecutableReferenceImpl@setLength(int)" shape=ellipse]
13 [label="5:CtVirtualElement@setLength" shape=ellipse]
14 [label="5:CtFieldReadImpl@eolStr" shape=ellipse]
15 [label="5:CtLiteralImpl@0" shape=ellipse]
16 [label="5:CtInvocationImpl@eolStr.setLength(0)" shape=ellipse]
17 [label="6:CtExecutableReferenceImpl@setLength(int)" shape=ellipse]
18 [label="6:CtVirtualElement@setLength" shape=ellipse]
19 [label="6:CtFieldReadImpl@line" shape=ellipse]
20 [label="6:CtLiteralImpl@0" shape=ellipse]
21 [label="6:CtInvocationImpl@line.setLength(0)" shape=ellipse]
22 [label="8:CtVariableWriteImpl@ch" shape=ellipse]
23 [label="8:CtExecutableReferenceImpl@read()" shape=ellipse]
24 [label="8:CtVirtualElement@read" shape=ellipse]
25 [label="8:CtFieldReadImpl@reader" shape=ellipse]
26 [label="8:CtInvocationImpl@reader.read()" shape=ellipse]
27 [label="8:CtAssignmentImpl@ch = reader.read()" shape=ellipse]
28 [label="9:CtVariableReadImpl@ch" shape=ellipse]
29 [label="9:CtLiteralImpl@1" shape=ellipse]
30 [label="9:CtUnaryOperatorImpl@(-1)" shape=ellipse]
31 [label="9:CtBinaryOperatorImpl@(ch != (-1))" shape=ellipse]
32 [label="9:CtVariableReadImpl@ch" shape=ellipse]
33 [label="9:CtLiteralImpl@'\r'" shape=ellipse]
34 [label="9:CtBinaryOperatorImpl@(ch != '\r')" shape=ellipse]
35 [label="9:CtBinaryOperatorImpl@((ch != (-1)) && (ch != '\r'))" shape=ellipse]
36 [label="9:CtVariableReadImpl@ch" shape=ellipse]
37 [label="9:CtLiteralImpl@'\n'" shape=ellipse]
38 [label="9:CtBinaryOperatorImpl@(ch != '\n')" shape=ellipse]
39 [label="9:CtBinaryOperatorImpl@((ch != (-1)) && (ch != '\r')) && (ch != '\n')" shape=ellipse]
40 [label="10:CtExecutableReferenceImpl@append(char)" shape=ellipse]
41 [label="10:CtVirtualElement@append" shape=ellipse]
42 [label="10:CtFieldReadImpl@line" shape=ellipse]
43 [label="10:CtVariableReadImpl@((char) (ch))" shape=ellipse]
44 [label="10:CtTypeReferenceImpl@char" shape=ellipse]
45 [label="10:CtInvocationImpl@line.append(((char) (ch)))" shape=ellipse]
46 [label="11:CtVariableWriteImpl@ch" shape=ellipse]
47 [label="11:CtExecutableReferenceImpl@read()" shape=ellipse]
48 [label="11:CtVirtualElement@read" shape=ellipse]
49 [label="11:CtFieldReadImpl@reader" shape=ellipse]
50 [label="11:CtInvocationImpl@reader.read()" shape=ellipse]
51 [label="11:CtAssignmentImpl@ch = reader.read()" shape=ellipse]
52 [label="9:CtBlockImpl@\{
    line.append(((char) (ch)));
    ch = reader.read();
\}" shape=ellipse]
53 [label="9:CtWhileImpl@while (((ch != (-1)) && (ch != '\r')) && (ch != '\n')) \{
    line.append(((char) (ch)));
    ch = reader.read();
\} " shape=ellipse]
54 [label="13:CtVariableReadImpl@ch" shape=ellipse]
55 [label="13:CtLiteralImpl@1" shape=ellipse]
56 [label="13:CtUnaryOperatorImpl@(-1)" shape=ellipse]
57 [label="13:CtBinaryOperatorImpl@(ch == (-1))" shape=ellipse]
58 [label="13:CtExecutableReferenceImpl@length()" shape=ellipse]
59 [label="13:CtVirtualElement@length" shape=ellipse]
60 [label="13:CtFieldReadImpl@line" shape=ellipse]
61 [label="13:CtInvocationImpl@line.length()" shape=ellipse]
62 [label="13:CtLiteralImpl@0" shape=ellipse]
63 [label="13:CtBinaryOperatorImpl@(line.length() == 0)" shape=ellipse]
64 [label="13:CtBinaryOperatorImpl@(ch == (-1)) && (line.length() == 0)" shape=ellipse]
65 [label="14:CtFieldWriteImpl@reachedEof" shape=ellipse]
66 [label="14:CtLiteralImpl@true" shape=ellipse]
67 [label="14:CtAssignmentImpl@reachedEof = true" shape=ellipse]
68 [label="15:CtReturnImpl@return" shape=ellipse]
69 [label="13:CtBlockImpl@\{
    reachedEof = true;
    return;
\}" shape=ellipse]
70 [label="13:CtIfImpl@if ((ch == (-1)) && (line.length() == 0)) \{
    reachedEof = true;
    return;
\}" shape=ellipse]
71 [label="17:CtVariableReadImpl@((char) (ch))" shape=ellipse]
72 [label="17:CtTypeReferenceImpl@char" shape=ellipse]
73 [label="18:CtLiteralImpl@'\r'" shape=ellipse]
74 [label="19:CtVariableWriteImpl@eolcount" shape=ellipse]
75 [label="19:CtUnaryOperatorImpl@++eolcount" shape=ellipse]
76 [label="20:CtExecutableReferenceImpl@append(char)" shape=ellipse]
77 [label="20:CtVirtualElement@append" shape=ellipse]
78 [label="20:CtFieldReadImpl@eolStr" shape=ellipse]
79 [label="20:CtLiteralImpl@'\r'" shape=ellipse]
80 [label="20:CtInvocationImpl@eolStr.append('\r')" shape=ellipse]
81 [label="21:CtVariableWriteImpl@ch" shape=ellipse]
82 [label="21:CtExecutableReferenceImpl@read()" shape=ellipse]
83 [label="21:CtVirtualElement@read" shape=ellipse]
84 [label="21:CtFieldReadImpl@reader" shape=ellipse]
85 [label="21:CtInvocationImpl@reader.read()" shape=ellipse]
86 [label="21:CtAssignmentImpl@((char) (ch = reader.read()))" shape=ellipse]
87 [label="21:CtTypeReferenceImpl@char" shape=ellipse]
88 [label="22:CtLiteralImpl@'\r'" shape=ellipse]
89 [label="23:CtVariableWriteImpl@ch" shape=ellipse]
90 [label="23:CtExecutableReferenceImpl@read()" shape=ellipse]
91 [label="23:CtVirtualElement@read" shape=ellipse]
92 [label="23:CtFieldReadImpl@reader" shape=ellipse]
93 [label="23:CtInvocationImpl@reader.read()" shape=ellipse]
94 [label="23:CtAssignmentImpl@((char) (ch = reader.read()))" shape=ellipse]
95 [label="23:CtTypeReferenceImpl@char" shape=ellipse]
96 [label="23:CtLiteralImpl@'\n'" shape=ellipse]
97 [label="23:CtBinaryOperatorImpl@((char) (ch = reader.read())) == '\n'" shape=ellipse]
98 [label="24:CtVariableWriteImpl@eolcount" shape=ellipse]
99 [label="24:CtLiteralImpl@2" shape=ellipse]
100 [label="24:CtOperatorAssignmentImpl@eolcount += 2" shape=ellipse]
101 [label="25:CtExecutableReferenceImpl@append(java.lang.String)" shape=ellipse]
102 [label="25:CtVirtualElement@append" shape=ellipse]
103 [label="25:CtFieldReadImpl@eolStr" shape=ellipse]
104 [label="25:CtLiteralImpl@\"\r\n\"" shape=ellipse]
105 [label="25:CtInvocationImpl@eolStr.append(\"\r\n\")" shape=ellipse]
106 [label="23:CtBlockImpl@\{
    eolcount += 2;
    eolStr.append(\"\r\n\");
\}" shape=ellipse]
107 [label="23:CtIfImpl@if (((char) (ch = reader.read())) == '\n') \{
    eolcount += 2;
    eolStr.append(\"\r\n\");
\}" shape=ellipse]
108 [label="27:CtBreakImpl@break" shape=ellipse]
109 [label="22:CtCaseImpl@case '\r' :
    if (((char) (ch = reader.read())) == '\n') \{
        eolcount += 2;
        eolStr.append(\"\r\n\");
    \}
    break;" shape=ellipse]
110 [label="28:CtLiteralImpl@'\n'" shape=ellipse]
111 [label="29:CtVariableWriteImpl@eolcount" shape=ellipse]
112 [label="29:CtUnaryOperatorImpl@++eolcount" shape=ellipse]
113 [label="30:CtExecutableReferenceImpl@append(char)" shape=ellipse]
114 [label="30:CtVirtualElement@append" shape=ellipse]
115 [label="30:CtFieldReadImpl@eolStr" shape=ellipse]
116 [label="30:CtLiteralImpl@'\n'" shape=ellipse]
117 [label="30:CtInvocationImpl@eolStr.append('\n')" shape=ellipse]
118 [label="31:CtBreakImpl@break" shape=ellipse]
119 [label="28:CtCaseImpl@case '\n' :
    ++eolcount;
    eolStr.append('\n');
    break;" shape=ellipse]
120 [label="21:CtSwitchImpl@switch (((char) (ch = reader.read()))) \{
    case '\r' :
        if (((char) (ch = reader.read())) == '\n') \{
            eolcount += 2;
            eolStr.append(\"\r\n\");
        \}
        break;
    case '\n' :
        ++eolcount;
        eolStr.append('\n');
        break;
\}" shape=ellipse]
121 [label="33:CtBreakImpl@break" shape=ellipse]
122 [label="18:CtCaseImpl@case '\r' :
    ++eolcount;
    eolStr.append('\r');
    switch (((char) (ch = reader.read()))) \{
        case '\r' :
            if (((char) (ch = reader.read())) == '\n') \{
                eolcount += 2;
                eolStr.append(\"\r\n\");
            \}
            break;
        case '\n' :
            ++eolcount;
            eolStr.append('\n');
            break;
    \}
    break;" shape=ellipse]
123 [label="34:CtLiteralImpl@'\n'" shape=ellipse]
124 [label="35:CtVariableWriteImpl@eolcount" shape=ellipse]
125 [label="35:CtUnaryOperatorImpl@++eolcount" shape=ellipse]
126 [label="36:CtExecutableReferenceImpl@append(char)" shape=ellipse]
127 [label="36:CtVirtualElement@append" shape=ellipse]
128 [label="36:CtFieldReadImpl@eolStr" shape=ellipse]
129 [label="36:CtLiteralImpl@'\n'" shape=ellipse]
130 [label="36:CtInvocationImpl@eolStr.append('\n')" shape=ellipse]
131 [label="37:CtBreakImpl@break" shape=ellipse]
132 [label="34:CtCaseImpl@case '\n' :
    ++eolcount;
    eolStr.append('\n');
    break;" shape=ellipse]
133 [label="17:CtSwitchImpl@switch (((char) (ch))) \{
    case '\r' :
        ++eolcount;
        eolStr.append('\r');
        switch (((char) (ch = reader.read()))) \{
            case '\r' :
                if (((char) (ch = reader.read())) == '\n') \{
                    eolcount += 2;
                    eolStr.append(\"\r\n\");
                \}
                break;
            case '\n' :
                ++eolcount;
                eolStr.append('\n');
                break;
        \}
        break;
    case '\n' :
        ++eolcount;
        eolStr.append('\n');
        break;
\}" shape=ellipse]
134 [label="39:CtVariableReadImpl@eolcount" shape=ellipse]
135 [label="39:CtLiteralImpl@0" shape=ellipse]
136 [label="39:CtBinaryOperatorImpl@eolcount == 0" shape=ellipse]
137 [label="40:CtTypeReferenceImpl@int" shape=ellipse]
138 [label="40:CtExecutableReferenceImpl@length()" shape=ellipse]
139 [label="40:CtVirtualElement@length" shape=ellipse]
140 [label="40:CtFieldReadImpl@line" shape=ellipse]
141 [label="40:CtInvocationImpl@line.length()" shape=ellipse]
142 [label="40:CtVirtualElement@i" shape=ellipse]
143 [label="40:CtLocalVariableImpl@int i = line.length()" shape=ellipse]
144 [label="41:CtVariableWriteImpl@i" shape=ellipse]
145 [label="41:CtUnaryOperatorImpl@(--i)" shape=ellipse]
146 [label="41:CtLiteralImpl@0" shape=ellipse]
147 [label="41:CtBinaryOperatorImpl@((--i) >= 0)" shape=ellipse]
148 [label="41:CtExecutableReferenceImpl@charAt(int)" shape=ellipse]
149 [label="41:CtVirtualElement@charAt" shape=ellipse]
150 [label="41:CtFieldReadImpl@line" shape=ellipse]
151 [label="41:CtVariableReadImpl@i" shape=ellipse]
152 [label="41:CtInvocationImpl@line.charAt(i)" shape=ellipse]
153 [label="41:CtFieldReadImpl@CTRLZ" shape=ellipse]
154 [label="41:CtBinaryOperatorImpl@(line.charAt(i) == CTRLZ)" shape=ellipse]
155 [label="41:CtBinaryOperatorImpl@((--i) >= 0) && (line.charAt(i) == CTRLZ)" shape=ellipse]
156 [label="41:CtBlockImpl@\{
\}" shape=ellipse]
157 [label="41:CtWhileImpl@while (((--i) >= 0) && (line.charAt(i) == CTRLZ)) \{
\} " shape=ellipse]
158 [label="42:CtVariableReadImpl@i" shape=ellipse]
159 [label="42:CtExecutableReferenceImpl@length()" shape=ellipse]
160 [label="42:CtVirtualElement@length" shape=ellipse]
161 [label="42:CtFieldReadImpl@line" shape=ellipse]
162 [label="42:CtInvocationImpl@line.length()" shape=ellipse]
163 [label="42:CtLiteralImpl@1" shape=ellipse]
164 [label="42:CtBinaryOperatorImpl@(line.length() - 1)" shape=ellipse]
165 [label="42:CtBinaryOperatorImpl@i < (line.length() - 1)" shape=ellipse]
166 [label="43:CtExecutableReferenceImpl@append()" shape=ellipse]
167 [label="43:CtVirtualElement@append" shape=ellipse]
168 [label="43:CtFieldReadImpl@eofStr" shape=ellipse]
169 [label="43:CtExecutableReferenceImpl@substring(int)" shape=ellipse]
170 [label="43:CtVirtualElement@substring" shape=ellipse]
171 [label="43:CtExecutableReferenceImpl@toString()" shape=ellipse]
172 [label="43:CtVirtualElement@toString" shape=ellipse]
173 [label="43:CtFieldReadImpl@line" shape=ellipse]
174 [label="43:CtInvocationImpl@line.toString()" shape=ellipse]
175 [label="43:CtVariableReadImpl@i" shape=ellipse]
176 [label="43:CtLiteralImpl@1" shape=ellipse]
177 [label="43:CtBinaryOperatorImpl@i + 1" shape=ellipse]
178 [label="43:CtInvocationImpl@line.toString().substring(i + 1)" shape=ellipse]
179 [label="43:CtInvocationImpl@eofStr.append(line.toString().substring(i + 1))" shape=ellipse]
180 [label="44:CtVariableReadImpl@i" shape=ellipse]
181 [label="44:CtLiteralImpl@0" shape=ellipse]
182 [label="44:CtBinaryOperatorImpl@i < 0" shape=ellipse]
183 [label="45:CtExecutableReferenceImpl@setLength(int)" shape=ellipse]
184 [label="45:CtVirtualElement@setLength" shape=ellipse]
185 [label="45:CtFieldReadImpl@line" shape=ellipse]
186 [label="45:CtLiteralImpl@0" shape=ellipse]
187 [label="45:CtInvocationImpl@line.setLength(0)" shape=ellipse]
188 [label="46:CtFieldWriteImpl@reachedEof" shape=ellipse]
189 [label="46:CtLiteralImpl@true" shape=ellipse]
190 [label="46:CtAssignmentImpl@reachedEof = true" shape=ellipse]
191 [label="44:CtBlockImpl@\{
    line.setLength(0);
    reachedEof = true;
\}" shape=ellipse]
192 [label="48:CtExecutableReferenceImpl@setLength(int)" shape=ellipse]
193 [label="48:CtVirtualElement@setLength" shape=ellipse]
194 [label="48:CtFieldReadImpl@line" shape=ellipse]
195 [label="48:CtVariableReadImpl@i" shape=ellipse]
196 [label="48:CtLiteralImpl@1" shape=ellipse]
197 [label="48:CtBinaryOperatorImpl@i + 1" shape=ellipse]
198 [label="48:CtInvocationImpl@line.setLength(i + 1)" shape=ellipse]
199 [label="47:CtBlockImpl@\{
    line.setLength(i + 1);
\}" shape=ellipse]
200 [label="44:CtIfImpl@if (i < 0) \{
    line.setLength(0);
    reachedEof = true;
\} else \{
    line.setLength(i + 1);
\}" shape=ellipse]
201 [label="42:CtBlockImpl@\{
    eofStr.append(line.toString().substring(i + 1));
    if (i < 0) \{
        line.setLength(0);
        reachedEof = true;
    \} else \{
        line.setLength(i + 1);
    \}
\}" shape=ellipse]
202 [label="42:CtIfImpl@if (i < (line.length() - 1)) \{
    eofStr.append(line.toString().substring(i + 1));
    if (i < 0) \{
        line.setLength(0);
        reachedEof = true;
    \} else \{
        line.setLength(i + 1);
    \}
\}" shape=ellipse]
203 [label="39:CtBlockImpl@\{
    int i = line.length();
    while (((--i) >= 0) && (line.charAt(i) == CTRLZ)) \{
    \} 
    if (i < (line.length() - 1)) \{
        eofStr.append(line.toString().substring(i + 1));
        if (i < 0) \{
            line.setLength(0);
            reachedEof = true;
        \} else \{
            line.setLength(i + 1);
        \}
    \}
\}" shape=ellipse]
204 [label="39:CtIfImpl@if (eolcount == 0) \{
    int i = line.length();
    while (((--i) >= 0) && (line.charAt(i) == CTRLZ)) \{
    \} 
    if (i < (line.length() - 1)) \{
        eofStr.append(line.toString().substring(i + 1));
        if (i < 0) \{
            line.setLength(0);
            reachedEof = true;
        \} else \{
            line.setLength(i + 1);
        \}
    \}
\}" shape=ellipse]
205 [label="7:CtBlockImpl@\{
    ch = reader.read();
    while (((ch != (-1)) && (ch != '\r')) && (ch != '\n')) \{
        line.append(((char) (ch)));
        ch = reader.read();
    \} 
    if ((ch == (-1)) && (line.length() == 0)) \{
        reachedEof = true;
        return;
    \}
    switch (((char) (ch))) \{
        case '\r' :
            ++eolcount;
            eolStr.append('\r');
            switch (((char) (ch = reader.read()))) \{
                case '\r' :
                    if (((char) (ch = reader.read())) == '\n') \{
                        eolcount += 2;
                        eolStr.append(\"\r\n\");
                    \}
                    break;
                case '\n' :
                    ++eolcount;
                    eolStr.append('\n');
                    break;
            \}
            break;
        case '\n' :
            ++eolcount;
            eolStr.append('\n');
            break;
    \}
    if (eolcount == 0) \{
        int i = line.length();
        while (((--i) >= 0) && (line.charAt(i) == CTRLZ)) \{
        \} 
        if (i < (line.length() - 1)) \{
            eofStr.append(line.toString().substring(i + 1));
            if (i < 0) \{
                line.setLength(0);
                reachedEof = true;
            \} else \{
                line.setLength(i + 1);
            \}
        \}
    \}
\}" shape=ellipse]
206 [label="52:CtVirtualElement@e" shape=ellipse]
207 [label="52:CtTypeReferenceImpl@IOException" shape=ellipse]
208 [label="52:CtCatchVariableImpl@IOException e" shape=ellipse]
209 [label="53:CtTypeReferenceImpl@BuildException" shape=ellipse]
210 [label="53:CtVariableReadImpl@e" shape=ellipse]
211 [label="53:CtConstructorCallImpl@new BuildException(e)" shape=ellipse]
212 [label="53:CtThrowImpl@throw new BuildException(e)" shape=ellipse]
213 [label="52:CtBlockImpl@\{
    throw new BuildException(e);
\}" shape=ellipse]
214 [label="52:CtCatchImpl@ catch (IOException e) \{
    throw new BuildException(e);
\}" shape=ellipse]
215 [label="7:CtTryImpl@try \{
    ch = reader.read();
    while (((ch != (-1)) && (ch != '\r')) && (ch != '\n')) \{
        line.append(((char) (ch)));
        ch = reader.read();
    \} 
    if ((ch == (-1)) && (line.length() == 0)) \{
        reachedEof = true;
        return;
    \}
    switch (((char) (ch))) \{
        case '\r' :
            ++eolcount;
            eolStr.append('\r');
            switch (((char) (ch = reader.read()))) \{
                case '\r' :
                    if (((char) (ch = reader.read())) == '\n') \{
                        eolcount += 2;
                        eolStr.append(\"\r\n\");
                    \}
                    break;
                case '\n' :
                    ++eolcount;
                    eolStr.append('\n');
                    break;
            \}
            break;
        case '\n' :
            ++eolcount;
            eolStr.append('\n');
            break;
    \}
    if (eolcount == 0) \{
        int i = line.length();
        while (((--i) >= 0) && (line.charAt(i) == CTRLZ)) \{
        \} 
        if (i < (line.length() - 1)) \{
            eofStr.append(line.toString().substring(i + 1));
            if (i < 0) \{
                line.setLength(0);
                reachedEof = true;
            \} else \{
                line.setLength(i + 1);
            \}
        \}
    \}
\} catch (IOException e) \{
    throw new BuildException(e);
\}" shape=ellipse]
216 [label="2:CtBlockImpl@\{
    int ch = -1;
    int eolcount = 0;
    eolStr.setLength(0);
    line.setLength(0);
    try \{
        ch = reader.read();
        while (((ch != (-1)) && (ch != '\r')) && (ch != '\n')) \{
            line.append(((char) (ch)));
            ch = reader.read();
        \} 
        if ((ch == (-1)) && (line.length() == 0)) \{
            reachedEof = true;
            return;
        \}
        switch (((char) (ch))) \{
            case '\r' :
                ++eolcount;
                eolStr.append('\r');
                switch (((char) (ch = reader.read()))) \{
                    case '\r' :
                        if (((char) (ch = reader.read())) == '\n') \{
                            eolcount += 2;
                            eolStr.append(\"\r\n\");
                        \}
                        break;
                    case '\n' :
                        ++eolcount;
                        eolStr.append('\n');
                        break;
                \}
                break;
            case '\n' :
                ++eolcount;
                eolStr.append('\n');
                break;
        \}
        if (eolcount == 0) \{
            int i = line.length();
            while (((--i) >= 0) && (line.charAt(i) == CTRLZ)) \{
            \} 
            if (i < (line.length() - 1)) \{
                eofStr.append(line.toString().substring(i + 1));
                if (i < 0) \{
                    line.setLength(0);
                    reachedEof = true;
                \} else \{
                    line.setLength(i + 1);
                \}
            \}
        \}
    \} catch (IOException e) \{
        throw new BuildException(e);
    \}
\}" shape=ellipse]
217 [label="2:CtMethodImpl@protected void nextLine() throws BuildException \{
    int ch = -1;
    int eolcount = 0;
    eolStr.setLength(0);
    line.setLength(0);
    try \{
        ch = reader.read();
        while (((ch != (-1)) && (ch != '\r')) && (ch != '\n')) \{
            line.append(((char) (ch)));
            ch = reader.read();
        \} 
        if ((ch == (-1)) && (line.length() == 0)) \{
            reachedEof = true;
            return;
        \}
        switch (((char) (ch))) \{
            case '\r' :
                ++eolcount;
                eolStr.append('\r');
                switch (((char) (ch = reader.read()))) \{
                    case '\r' :
                        if (((char) (ch = reader.read())) == '\n') \{
                            eolcount += 2;
                            eolStr.append(\"\r\n\");
                        \}
                        break;
                    case '\n' :
                        ++eolcount;
                        eolStr.append('\n');
                        break;
                \}
                break;
            case '\n' :
                ++eolcount;
                eolStr.append('\n');
                break;
        \}
        if (eolcount == 0) \{
            int i = line.length();
            while (((--i) >= 0) && (line.charAt(i) == CTRLZ)) \{
            \} 
            if (i < (line.length() - 1)) \{
                eofStr.append(line.toString().substring(i + 1));
                if (i < 0) \{
                    line.setLength(0);
                    reachedEof = true;
                \} else \{
                    line.setLength(i + 1);
                \}
            \}
        \}
    \} catch (IOException e) \{
        throw new BuildException(e);
    \}
\}" shape=ellipse]
218 [label="53:Insert@INSERT" shape=ellipse]
219 [label="53:CtLiteralImpl@\"Error\"" shape=ellipse]
5 -> 4 [label="AST"];
7 -> 6 [label="AST"];
7 -> 3 [label="AST"];
7 -> 5 [label="AST"];
10 -> 134 [label="Define-Use"];
11 -> 10 [label="AST"];
11 -> 8 [label="AST"];
11 -> 9 [label="AST"];
16 -> 13 [label="AST"];
16 -> 14 [label="AST"];
16 -> 12 [label="AST"];
16 -> 15 [label="AST"];
21 -> 18 [label="AST"];
21 -> 19 [label="AST"];
21 -> 17 [label="AST"];
21 -> 20 [label="AST"];
22 -> 28 [label="Define-Use"];
22 -> 32 [label="Define-Use"];
22 -> 36 [label="Define-Use"];
22 -> 43 [label="Define-Use"];
25 -> 22 [label="Data Dep"];
26 -> 24 [label="AST"];
26 -> 25 [label="AST"];
26 -> 23 [label="AST"];
27 -> 22 [label="AST"];
27 -> 26 [label="AST"];
30 -> 29 [label="AST"];
31 -> 28 [label="AST"];
31 -> 30 [label="AST"];
34 -> 32 [label="AST"];
34 -> 33 [label="AST"];
35 -> 31 [label="AST"];
35 -> 34 [label="AST"];
38 -> 36 [label="AST"];
38 -> 37 [label="AST"];
39 -> 35 [label="AST"];
39 -> 38 [label="AST"];
39 -> 52 [label="Control Dep"];
39 -> 45 [label="Control Dep"];
39 -> 40 [label="Control Dep"];
39 -> 42 [label="Control Dep"];
39 -> 43 [label="Control Dep"];
39 -> 51 [label="Control Dep"];
39 -> 46 [label="Control Dep"];
39 -> 50 [label="Control Dep"];
39 -> 47 [label="Control Dep"];
39 -> 49 [label="Control Dep"];
43 -> 44 [label="AST"];
45 -> 41 [label="AST"];
45 -> 42 [label="AST"];
45 -> 40 [label="AST"];
45 -> 43 [label="AST"];
46 -> 54 [label="Define-Use"];
46 -> 71 [label="Define-Use"];
49 -> 46 [label="Data Dep"];
50 -> 48 [label="AST"];
50 -> 49 [label="AST"];
50 -> 47 [label="AST"];
51 -> 46 [label="AST"];
51 -> 50 [label="AST"];
52 -> 45 [label="AST"];
52 -> 51 [label="AST"];
53 -> 39 [label="AST"];
53 -> 52 [label="AST"];
56 -> 55 [label="AST"];
57 -> 54 [label="AST"];
57 -> 56 [label="AST"];
61 -> 59 [label="AST"];
61 -> 60 [label="AST"];
61 -> 58 [label="AST"];
63 -> 61 [label="AST"];
63 -> 62 [label="AST"];
64 -> 57 [label="AST"];
64 -> 63 [label="AST"];
64 -> 69 [label="Control Dep"];
64 -> 67 [label="Control Dep"];
64 -> 65 [label="Control Dep"];
64 -> 66 [label="Control Dep"];
64 -> 68 [label="Control Dep"];
67 -> 65 [label="AST"];
67 -> 66 [label="AST"];
69 -> 67 [label="AST"];
69 -> 68 [label="AST"];
70 -> 64 [label="AST"];
70 -> 69 [label="AST"];
71 -> 72 [label="AST"];
71 -> 122 [label="Control Dep"];
71 -> 73 [label="Control Dep"];
71 -> 75 [label="Control Dep"];
71 -> 74 [label="Control Dep"];
71 -> 80 [label="Control Dep"];
71 -> 76 [label="Control Dep"];
71 -> 78 [label="Control Dep"];
71 -> 79 [label="Control Dep"];
71 -> 120 [label="Control Dep"];
71 -> 86 [label="Control Dep"];
71 -> 81 [label="Control Dep"];
71 -> 85 [label="Control Dep"];
71 -> 82 [label="Control Dep"];
71 -> 84 [label="Control Dep"];
71 -> 121 [label="Control Dep"];
71 -> 132 [label="Control Dep"];
71 -> 123 [label="Control Dep"];
71 -> 125 [label="Control Dep"];
71 -> 124 [label="Control Dep"];
71 -> 130 [label="Control Dep"];
71 -> 126 [label="Control Dep"];
71 -> 128 [label="Control Dep"];
71 -> 129 [label="Control Dep"];
71 -> 131 [label="Control Dep"];
74 -> 134 [label="Define-Use"];
75 -> 74 [label="AST"];
80 -> 77 [label="AST"];
80 -> 78 [label="AST"];
80 -> 76 [label="AST"];
80 -> 79 [label="AST"];
84 -> 81 [label="Data Dep"];
85 -> 83 [label="AST"];
85 -> 84 [label="AST"];
85 -> 82 [label="AST"];
86 -> 87 [label="AST"];
86 -> 81 [label="AST"];
86 -> 85 [label="AST"];
86 -> 109 [label="Control Dep"];
86 -> 88 [label="Control Dep"];
86 -> 107 [label="Control Dep"];
86 -> 97 [label="Control Dep"];
86 -> 94 [label="Control Dep"];
86 -> 89 [label="Control Dep"];
86 -> 93 [label="Control Dep"];
86 -> 90 [label="Control Dep"];
86 -> 92 [label="Control Dep"];
86 -> 96 [label="Control Dep"];
86 -> 108 [label="Control Dep"];
86 -> 119 [label="Control Dep"];
86 -> 110 [label="Control Dep"];
86 -> 112 [label="Control Dep"];
86 -> 111 [label="Control Dep"];
86 -> 117 [label="Control Dep"];
86 -> 113 [label="Control Dep"];
86 -> 115 [label="Control Dep"];
86 -> 116 [label="Control Dep"];
86 -> 118 [label="Control Dep"];
92 -> 89 [label="Data Dep"];
93 -> 91 [label="AST"];
93 -> 92 [label="AST"];
93 -> 90 [label="AST"];
94 -> 95 [label="AST"];
94 -> 89 [label="AST"];
94 -> 93 [label="AST"];
97 -> 94 [label="AST"];
97 -> 96 [label="AST"];
97 -> 106 [label="Control Dep"];
97 -> 100 [label="Control Dep"];
97 -> 98 [label="Control Dep"];
97 -> 99 [label="Control Dep"];
97 -> 105 [label="Control Dep"];
97 -> 101 [label="Control Dep"];
97 -> 103 [label="Control Dep"];
97 -> 104 [label="Control Dep"];
98 -> 134 [label="Define-Use"];
100 -> 98 [label="AST"];
100 -> 99 [label="AST"];
105 -> 102 [label="AST"];
105 -> 103 [label="AST"];
105 -> 101 [label="AST"];
105 -> 104 [label="AST"];
106 -> 100 [label="AST"];
106 -> 105 [label="AST"];
107 -> 97 [label="AST"];
107 -> 106 [label="AST"];
109 -> 88 [label="AST"];
109 -> 107 [label="AST"];
109 -> 108 [label="AST"];
111 -> 134 [label="Define-Use"];
112 -> 111 [label="AST"];
117 -> 114 [label="AST"];
117 -> 115 [label="AST"];
117 -> 113 [label="AST"];
117 -> 116 [label="AST"];
119 -> 110 [label="AST"];
119 -> 112 [label="AST"];
119 -> 117 [label="AST"];
119 -> 118 [label="AST"];
120 -> 86 [label="AST"];
120 -> 109 [label="AST"];
120 -> 119 [label="AST"];
122 -> 73 [label="AST"];
122 -> 75 [label="AST"];
122 -> 80 [label="AST"];
122 -> 120 [label="AST"];
122 -> 121 [label="AST"];
124 -> 134 [label="Define-Use"];
125 -> 124 [label="AST"];
130 -> 127 [label="AST"];
130 -> 128 [label="AST"];
130 -> 126 [label="AST"];
130 -> 129 [label="AST"];
132 -> 123 [label="AST"];
132 -> 125 [label="AST"];
132 -> 130 [label="AST"];
132 -> 131 [label="AST"];
133 -> 71 [label="AST"];
133 -> 122 [label="AST"];
133 -> 132 [label="AST"];
136 -> 134 [label="AST"];
136 -> 135 [label="AST"];
136 -> 203 [label="Control Dep"];
136 -> 143 [label="Control Dep"];
136 -> 141 [label="Control Dep"];
136 -> 138 [label="Control Dep"];
136 -> 140 [label="Control Dep"];
136 -> 157 [label="Control Dep"];
136 -> 155 [label="Control Dep"];
136 -> 147 [label="Control Dep"];
136 -> 145 [label="Control Dep"];
136 -> 144 [label="Control Dep"];
136 -> 146 [label="Control Dep"];
136 -> 154 [label="Control Dep"];
136 -> 152 [label="Control Dep"];
136 -> 148 [label="Control Dep"];
136 -> 150 [label="Control Dep"];
136 -> 151 [label="Control Dep"];
136 -> 153 [label="Control Dep"];
136 -> 202 [label="Control Dep"];
136 -> 165 [label="Control Dep"];
136 -> 158 [label="Control Dep"];
136 -> 164 [label="Control Dep"];
136 -> 162 [label="Control Dep"];
136 -> 159 [label="Control Dep"];
136 -> 161 [label="Control Dep"];
136 -> 163 [label="Control Dep"];
140 -> 142 [label="Data Dep"];
141 -> 139 [label="AST"];
141 -> 140 [label="AST"];
141 -> 138 [label="AST"];
142 -> 151 [label="Define-Use"];
142 -> 158 [label="Define-Use"];
142 -> 175 [label="Define-Use"];
142 -> 180 [label="Define-Use"];
142 -> 195 [label="Define-Use"];
143 -> 142 [label="AST"];
143 -> 137 [label="AST"];
143 -> 141 [label="AST"];
144 -> 151 [label="Define-Use"];
144 -> 158 [label="Define-Use"];
144 -> 175 [label="Define-Use"];
144 -> 180 [label="Define-Use"];
144 -> 195 [label="Define-Use"];
145 -> 144 [label="AST"];
147 -> 145 [label="AST"];
147 -> 146 [label="AST"];
152 -> 149 [label="AST"];
152 -> 150 [label="AST"];
152 -> 148 [label="AST"];
152 -> 151 [label="AST"];
154 -> 152 [label="AST"];
154 -> 153 [label="AST"];
155 -> 147 [label="AST"];
155 -> 154 [label="AST"];
155 -> 156 [label="Control Dep"];
157 -> 155 [label="AST"];
157 -> 156 [label="AST"];
162 -> 160 [label="AST"];
162 -> 161 [label="AST"];
162 -> 159 [label="AST"];
164 -> 162 [label="AST"];
164 -> 163 [label="AST"];
165 -> 158 [label="AST"];
165 -> 164 [label="AST"];
165 -> 201 [label="Control Dep"];
165 -> 179 [label="Control Dep"];
165 -> 166 [label="Control Dep"];
165 -> 168 [label="Control Dep"];
165 -> 178 [label="Control Dep"];
165 -> 169 [label="Control Dep"];
165 -> 174 [label="Control Dep"];
165 -> 171 [label="Control Dep"];
165 -> 173 [label="Control Dep"];
165 -> 177 [label="Control Dep"];
165 -> 175 [label="Control Dep"];
165 -> 176 [label="Control Dep"];
165 -> 200 [label="Control Dep"];
165 -> 182 [label="Control Dep"];
165 -> 180 [label="Control Dep"];
165 -> 181 [label="Control Dep"];
174 -> 172 [label="AST"];
174 -> 173 [label="AST"];
174 -> 171 [label="AST"];
177 -> 175 [label="AST"];
177 -> 176 [label="AST"];
178 -> 170 [label="AST"];
178 -> 174 [label="AST"];
178 -> 169 [label="AST"];
178 -> 177 [label="AST"];
179 -> 167 [label="AST"];
179 -> 168 [label="AST"];
179 -> 166 [label="AST"];
179 -> 178 [label="AST"];
182 -> 180 [label="AST"];
182 -> 181 [label="AST"];
182 -> 191 [label="Control Dep"];
182 -> 187 [label="Control Dep"];
182 -> 183 [label="Control Dep"];
182 -> 185 [label="Control Dep"];
182 -> 186 [label="Control Dep"];
182 -> 190 [label="Control Dep"];
182 -> 188 [label="Control Dep"];
182 -> 189 [label="Control Dep"];
182 -> 199 [label="Control Dep"];
182 -> 198 [label="Control Dep"];
182 -> 192 [label="Control Dep"];
182 -> 194 [label="Control Dep"];
182 -> 197 [label="Control Dep"];
182 -> 195 [label="Control Dep"];
182 -> 196 [label="Control Dep"];
187 -> 184 [label="AST"];
187 -> 185 [label="AST"];
187 -> 183 [label="AST"];
187 -> 186 [label="AST"];
190 -> 188 [label="AST"];
190 -> 189 [label="AST"];
191 -> 187 [label="AST"];
191 -> 190 [label="AST"];
197 -> 195 [label="AST"];
197 -> 196 [label="AST"];
198 -> 193 [label="AST"];
198 -> 194 [label="AST"];
198 -> 192 [label="AST"];
198 -> 197 [label="AST"];
199 -> 198 [label="AST"];
200 -> 182 [label="AST"];
200 -> 191 [label="AST"];
200 -> 199 [label="AST"];
201 -> 179 [label="AST"];
201 -> 200 [label="AST"];
202 -> 165 [label="AST"];
202 -> 201 [label="AST"];
203 -> 143 [label="AST"];
203 -> 157 [label="AST"];
203 -> 202 [label="AST"];
204 -> 136 [label="AST"];
204 -> 203 [label="AST"];
205 -> 27 [label="AST"];
205 -> 53 [label="AST"];
205 -> 70 [label="AST"];
205 -> 133 [label="AST"];
205 -> 204 [label="AST"];
206 -> 210 [label="Define-Use"];
208 -> 206 [label="AST"];
208 -> 207 [label="AST"];
208 -> 213 [label="Control Dep"];
208 -> 212 [label="Control Dep"];
208 -> 211 [label="Control Dep"];
208 -> 210 [label="Control Dep"];
211 -> 210 [label="AST"];
211 -> 218 [label="Action"];
212 -> 211 [label="AST"];
213 -> 212 [label="AST"];
214 -> 208 [label="AST"];
214 -> 213 [label="AST"];
215 -> 205 [label="AST"];
215 -> 214 [label="AST"];
216 -> 7 [label="AST"];
216 -> 11 [label="AST"];
216 -> 16 [label="AST"];
216 -> 21 [label="AST"];
216 -> 215 [label="AST"];
217 -> 1 [label="AST"];
217 -> 0 [label="AST"];
217 -> 2 [label="AST"];
217 -> 216 [label="AST"];
218 -> 219 [label="Action"];
}