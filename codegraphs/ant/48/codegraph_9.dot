digraph "addBeans#?,Hashtable" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@addBeans" shape=ellipse]
2 [label="2:CtParameterImpl@Hashtable dictionary" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@Hashtable" shape=ellipse]
4 [label="3:CtTypeReferenceImpl@Enumeration" shape=ellipse]
5 [label="3:CtExecutableReferenceImpl@keys()" shape=ellipse]
6 [label="3:CtVirtualElement@keys" shape=ellipse]
7 [label="3:CtVariableReadImpl@dictionary" shape=ellipse]
8 [label="3:CtInvocationImpl@dictionary.keys()" shape=ellipse]
9 [label="3:CtVirtualElement@e" shape=ellipse]
10 [label="3:CtLocalVariableImpl@Enumeration e = dictionary.keys()" shape=ellipse]
11 [label="3:CtExecutableReferenceImpl@hasMoreElements()" shape=ellipse]
12 [label="3:CtVirtualElement@hasMoreElements" shape=ellipse]
13 [label="3:CtVariableReadImpl@e" shape=ellipse]
14 [label="3:CtInvocationImpl@e.hasMoreElements()" shape=ellipse]
15 [label="4:CtTypeReferenceImpl@String" shape=ellipse]
16 [label="4:CtExecutableReferenceImpl@nextElement()" shape=ellipse]
17 [label="4:CtVirtualElement@nextElement" shape=ellipse]
18 [label="4:CtVariableReadImpl@e" shape=ellipse]
19 [label="4:CtInvocationImpl@((String) (e.nextElement()))" shape=ellipse]
20 [label="4:CtTypeReferenceImpl@String" shape=ellipse]
21 [label="4:CtVirtualElement@key" shape=ellipse]
22 [label="4:CtLocalVariableImpl@String key = ((String) (e.nextElement()))" shape=ellipse]
23 [label="5:CtTypeReferenceImpl@boolean" shape=ellipse]
24 [label="5:CtExecutableReferenceImpl@length()" shape=ellipse]
25 [label="5:CtVirtualElement@length" shape=ellipse]
26 [label="5:CtVariableReadImpl@key" shape=ellipse]
27 [label="5:CtInvocationImpl@key.length()" shape=ellipse]
28 [label="5:CtLiteralImpl@0" shape=ellipse]
29 [label="5:CtBinaryOperatorImpl@(key.length() > 0)" shape=ellipse]
30 [label="5:CtExecutableReferenceImpl@isJavaIdentifierStart(char)" shape=ellipse]
31 [label="5:CtVirtualElement@isJavaIdentifierStart" shape=ellipse]
32 [label="5:CtTypeAccessImpl@Character" shape=ellipse]
33 [label="5:CtExecutableReferenceImpl@charAt(int)" shape=ellipse]
34 [label="5:CtVirtualElement@charAt" shape=ellipse]
35 [label="5:CtVariableReadImpl@key" shape=ellipse]
36 [label="5:CtLiteralImpl@0" shape=ellipse]
37 [label="5:CtInvocationImpl@key.charAt(0)" shape=ellipse]
38 [label="5:CtInvocationImpl@Character.isJavaIdentifierStart(key.charAt(0))" shape=ellipse]
39 [label="5:CtBinaryOperatorImpl@(key.length() > 0) && Character.isJavaIdentifierStart(key.charAt(0))" shape=ellipse]
40 [label="5:CtVirtualElement@isValid" shape=ellipse]
41 [label="5:CtLocalVariableImpl@boolean isValid = (key.length() > 0) && Character.isJavaIdentifierStart(key.charAt(0))" shape=ellipse]
42 [label="6:CtTypeReferenceImpl@int" shape=ellipse]
43 [label="6:CtLiteralImpl@1" shape=ellipse]
44 [label="6:CtVirtualElement@i" shape=ellipse]
45 [label="6:CtLocalVariableImpl@int i = 1" shape=ellipse]
46 [label="6:CtVariableReadImpl@isValid" shape=ellipse]
47 [label="6:CtVariableReadImpl@i" shape=ellipse]
48 [label="6:CtExecutableReferenceImpl@length()" shape=ellipse]
49 [label="6:CtVirtualElement@length" shape=ellipse]
50 [label="6:CtVariableReadImpl@key" shape=ellipse]
51 [label="6:CtInvocationImpl@key.length()" shape=ellipse]
52 [label="6:CtBinaryOperatorImpl@(i < key.length())" shape=ellipse]
53 [label="6:CtBinaryOperatorImpl@isValid && (i < key.length())" shape=ellipse]
54 [label="6:CtVariableWriteImpl@i" shape=ellipse]
55 [label="6:CtUnaryOperatorImpl@i++" shape=ellipse]
56 [label="7:CtVariableWriteImpl@isValid" shape=ellipse]
57 [label="7:CtExecutableReferenceImpl@isJavaIdentifierPart(char)" shape=ellipse]
58 [label="7:CtVirtualElement@isJavaIdentifierPart" shape=ellipse]
59 [label="7:CtTypeAccessImpl@Character" shape=ellipse]
60 [label="7:CtExecutableReferenceImpl@charAt(int)" shape=ellipse]
61 [label="7:CtVirtualElement@charAt" shape=ellipse]
62 [label="7:CtVariableReadImpl@key" shape=ellipse]
63 [label="7:CtVariableReadImpl@i" shape=ellipse]
64 [label="7:CtInvocationImpl@key.charAt(i)" shape=ellipse]
65 [label="7:CtInvocationImpl@Character.isJavaIdentifierPart(key.charAt(i))" shape=ellipse]
66 [label="7:CtAssignmentImpl@isValid = Character.isJavaIdentifierPart(key.charAt(i))" shape=ellipse]
67 [label="6:CtBlockImpl@\{
    isValid = Character.isJavaIdentifierPart(key.charAt(i));
\}" shape=ellipse]
68 [label="6:CtForImpl@for (int i = 1; isValid && (i < key.length()); i++) \{
    isValid = Character.isJavaIdentifierPart(key.charAt(i));
\}" shape=ellipse]
69 [label="9:CtVariableReadImpl@isValid" shape=ellipse]
70 [label="10:CtExecutableReferenceImpl@put(java.lang.String)" shape=ellipse]
71 [label="10:CtVirtualElement@put" shape=ellipse]
72 [label="10:CtFieldReadImpl@beans" shape=ellipse]
73 [label="10:CtVariableReadImpl@key" shape=ellipse]
74 [label="10:CtExecutableReferenceImpl@get(java.lang.String)" shape=ellipse]
75 [label="10:CtVirtualElement@get" shape=ellipse]
76 [label="10:CtVariableReadImpl@dictionary" shape=ellipse]
77 [label="10:CtVariableReadImpl@key" shape=ellipse]
78 [label="10:CtInvocationImpl@dictionary.get(key)" shape=ellipse]
79 [label="10:CtInvocationImpl@beans.put(key, dictionary.get(key))" shape=ellipse]
80 [label="9:CtBlockImpl@\{
    beans.put(key, dictionary.get(key));
\}" shape=ellipse]
81 [label="9:CtIfImpl@if (isValid) \{
    beans.put(key, dictionary.get(key));
\}" shape=ellipse]
82 [label="3:CtBlockImpl@\{
    String key = ((String) (e.nextElement()));
    boolean isValid = (key.length() > 0) && Character.isJavaIdentifierStart(key.charAt(0));
    for (int i = 1; isValid && (i < key.length()); i++) \{
        isValid = Character.isJavaIdentifierPart(key.charAt(i));
    \}
    if (isValid) \{
        beans.put(key, dictionary.get(key));
    \}
\}" shape=ellipse]
83 [label="3:CtForImpl@for (Enumeration e = dictionary.keys(); e.hasMoreElements();) \{
    String key = ((String) (e.nextElement()));
    boolean isValid = (key.length() > 0) && Character.isJavaIdentifierStart(key.charAt(0));
    for (int i = 1; isValid && (i < key.length()); i++) \{
        isValid = Character.isJavaIdentifierPart(key.charAt(i));
    \}
    if (isValid) \{
        beans.put(key, dictionary.get(key));
    \}
\}" shape=ellipse]
84 [label="2:CtBlockImpl@\{
    for (Enumeration e = dictionary.keys(); e.hasMoreElements();) \{
        String key = ((String) (e.nextElement()));
        boolean isValid = (key.length() > 0) && Character.isJavaIdentifierStart(key.charAt(0));
        for (int i = 1; isValid && (i < key.length()); i++) \{
            isValid = Character.isJavaIdentifierPart(key.charAt(i));
        \}
        if (isValid) \{
            beans.put(key, dictionary.get(key));
        \}
    \}
\}" shape=ellipse]
85 [label="2:CtMethodImpl@private void addBeans(Hashtable dictionary) \{
    for (Enumeration e = dictionary.keys(); e.hasMoreElements();) \{
        String key = ((String) (e.nextElement()));
        boolean isValid = (key.length() > 0) && Character.isJavaIdentifierStart(key.charAt(0));
        for (int i = 1; isValid && (i < key.length()); i++) \{
            isValid = Character.isJavaIdentifierPart(key.charAt(i));
        \}
        if (isValid) \{
            beans.put(key, dictionary.get(key));
        \}
    \}
\}" shape=ellipse]
86 [label="3:Update@UPDATE" shape=ellipse]
87 [label="3:CtInvocationImpl@e.hasNext()" shape=ellipse]
88 [label="3:Update@UPDATE" shape=ellipse]
89 [label="3:CtTypeReferenceImpl@Iterator" shape=ellipse]
90 [label="4:Update@UPDATE" shape=ellipse]
91 [label="4:CtInvocationImpl@((String) (e.next()))" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 88 [label="Action"];
7 -> 9 [label="Data Dep"];
8 -> 6 [label="AST"];
8 -> 7 [label="AST"];
8 -> 5 [label="AST"];
9 -> 13 [label="Define-Use"];
9 -> 18 [label="Define-Use"];
10 -> 9 [label="AST"];
10 -> 4 [label="AST"];
10 -> 8 [label="AST"];
14 -> 12 [label="AST"];
14 -> 13 [label="AST"];
14 -> 11 [label="AST"];
14 -> 82 [label="Control Dep"];
14 -> 22 [label="Control Dep"];
14 -> 19 [label="Control Dep"];
14 -> 16 [label="Control Dep"];
14 -> 18 [label="Control Dep"];
14 -> 41 [label="Control Dep"];
14 -> 39 [label="Control Dep"];
14 -> 29 [label="Control Dep"];
14 -> 27 [label="Control Dep"];
14 -> 24 [label="Control Dep"];
14 -> 26 [label="Control Dep"];
14 -> 28 [label="Control Dep"];
14 -> 38 [label="Control Dep"];
14 -> 30 [label="Control Dep"];
14 -> 32 [label="Control Dep"];
14 -> 37 [label="Control Dep"];
14 -> 33 [label="Control Dep"];
14 -> 35 [label="Control Dep"];
14 -> 36 [label="Control Dep"];
14 -> 68 [label="Control Dep"];
14 -> 45 [label="Control Dep"];
14 -> 43 [label="Control Dep"];
14 -> 53 [label="Control Dep"];
14 -> 46 [label="Control Dep"];
14 -> 52 [label="Control Dep"];
14 -> 47 [label="Control Dep"];
14 -> 51 [label="Control Dep"];
14 -> 48 [label="Control Dep"];
14 -> 50 [label="Control Dep"];
14 -> 55 [label="Control Dep"];
14 -> 54 [label="Control Dep"];
14 -> 81 [label="Control Dep"];
14 -> 69 [label="Control Dep"];
14 -> 86 [label="Action"];
18 -> 21 [label="Data Dep"];
19 -> 17 [label="AST"];
19 -> 20 [label="AST"];
19 -> 18 [label="AST"];
19 -> 16 [label="AST"];
19 -> 90 [label="Action"];
21 -> 26 [label="Define-Use"];
21 -> 35 [label="Define-Use"];
21 -> 50 [label="Define-Use"];
21 -> 62 [label="Define-Use"];
21 -> 73 [label="Define-Use"];
21 -> 77 [label="Define-Use"];
22 -> 21 [label="AST"];
22 -> 15 [label="AST"];
22 -> 19 [label="AST"];
26 -> 40 [label="Data Dep"];
27 -> 25 [label="AST"];
27 -> 26 [label="AST"];
27 -> 24 [label="AST"];
29 -> 27 [label="AST"];
29 -> 28 [label="AST"];
35 -> 40 [label="Data Dep"];
37 -> 34 [label="AST"];
37 -> 35 [label="AST"];
37 -> 33 [label="AST"];
37 -> 36 [label="AST"];
38 -> 31 [label="AST"];
38 -> 32 [label="AST"];
38 -> 30 [label="AST"];
38 -> 37 [label="AST"];
39 -> 29 [label="AST"];
39 -> 38 [label="AST"];
40 -> 46 [label="Define-Use"];
41 -> 40 [label="AST"];
41 -> 23 [label="AST"];
41 -> 39 [label="AST"];
44 -> 47 [label="Define-Use"];
45 -> 44 [label="AST"];
45 -> 42 [label="AST"];
45 -> 43 [label="AST"];
51 -> 49 [label="AST"];
51 -> 50 [label="AST"];
51 -> 48 [label="AST"];
52 -> 47 [label="AST"];
52 -> 51 [label="AST"];
53 -> 46 [label="AST"];
53 -> 52 [label="AST"];
53 -> 67 [label="Control Dep"];
53 -> 66 [label="Control Dep"];
53 -> 56 [label="Control Dep"];
53 -> 65 [label="Control Dep"];
53 -> 57 [label="Control Dep"];
53 -> 59 [label="Control Dep"];
53 -> 64 [label="Control Dep"];
53 -> 60 [label="Control Dep"];
53 -> 62 [label="Control Dep"];
53 -> 63 [label="Control Dep"];
54 -> 63 [label="Define-Use"];
55 -> 54 [label="AST"];
56 -> 69 [label="Define-Use"];
62 -> 56 [label="Data Dep"];
63 -> 56 [label="Data Dep"];
64 -> 61 [label="AST"];
64 -> 62 [label="AST"];
64 -> 60 [label="AST"];
64 -> 63 [label="AST"];
65 -> 58 [label="AST"];
65 -> 59 [label="AST"];
65 -> 57 [label="AST"];
65 -> 64 [label="AST"];
66 -> 56 [label="AST"];
66 -> 65 [label="AST"];
67 -> 66 [label="AST"];
68 -> 45 [label="AST"];
68 -> 53 [label="AST"];
68 -> 55 [label="AST"];
68 -> 67 [label="AST"];
69 -> 80 [label="Control Dep"];
69 -> 79 [label="Control Dep"];
69 -> 70 [label="Control Dep"];
69 -> 72 [label="Control Dep"];
69 -> 73 [label="Control Dep"];
69 -> 78 [label="Control Dep"];
69 -> 74 [label="Control Dep"];
69 -> 76 [label="Control Dep"];
69 -> 77 [label="Control Dep"];
78 -> 75 [label="AST"];
78 -> 76 [label="AST"];
78 -> 74 [label="AST"];
78 -> 77 [label="AST"];
79 -> 71 [label="AST"];
79 -> 72 [label="AST"];
79 -> 70 [label="AST"];
79 -> 73 [label="AST"];
79 -> 78 [label="AST"];
80 -> 79 [label="AST"];
81 -> 69 [label="AST"];
81 -> 80 [label="AST"];
82 -> 22 [label="AST"];
82 -> 41 [label="AST"];
82 -> 68 [label="AST"];
82 -> 81 [label="AST"];
83 -> 10 [label="AST"];
83 -> 14 [label="AST"];
83 -> 82 [label="AST"];
84 -> 83 [label="AST"];
85 -> 1 [label="AST"];
85 -> 0 [label="AST"];
85 -> 2 [label="AST"];
85 -> 84 [label="AST"];
86 -> 87 [label="Action"];
87 -> 91 [label="Control Dep"];
88 -> 89 [label="Action"];
90 -> 91 [label="Action"];
}