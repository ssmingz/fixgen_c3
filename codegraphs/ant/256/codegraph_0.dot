digraph "writeManifest#?,ZipOutputStream,Manifest" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@writeManifest" shape=ellipse]
2 [label="2:CtParameterImpl@ZipOutputStream zOut" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@ZipOutputStream" shape=ellipse]
4 [label="2:CtParameterImpl@Manifest manifest" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@Manifest" shape=ellipse]
6 [label="2:CtTypeReferenceImpl@IOException" shape=ellipse]
7 [label="3:CtTypeReferenceImpl@Enumeration" shape=ellipse]
8 [label="3:CtExecutableReferenceImpl@getWarnings()" shape=ellipse]
9 [label="3:CtVirtualElement@getWarnings" shape=ellipse]
10 [label="3:CtVariableReadImpl@manifest" shape=ellipse]
11 [label="3:CtInvocationImpl@manifest.getWarnings()" shape=ellipse]
12 [label="3:CtVirtualElement@e" shape=ellipse]
13 [label="3:CtLocalVariableImpl@Enumeration e = manifest.getWarnings()" shape=ellipse]
14 [label="3:CtExecutableReferenceImpl@hasMoreElements()" shape=ellipse]
15 [label="3:CtVirtualElement@hasMoreElements" shape=ellipse]
16 [label="3:CtVariableReadImpl@e" shape=ellipse]
17 [label="3:CtInvocationImpl@e.hasMoreElements()" shape=ellipse]
18 [label="4:CtExecutableReferenceImpl@log(<unknown>,<unknown>)" shape=ellipse]
19 [label="4:CtVirtualElement@log" shape=ellipse]
20 [label="4:CtLiteralImpl@\"Manifest warning: \"" shape=ellipse]
21 [label="4:CtExecutableReferenceImpl@nextElement()" shape=ellipse]
22 [label="4:CtVirtualElement@nextElement" shape=ellipse]
23 [label="4:CtVariableReadImpl@e" shape=ellipse]
24 [label="4:CtInvocationImpl@e.nextElement()" shape=ellipse]
25 [label="4:CtBinaryOperatorImpl@\"Manifest warning: \" + e.nextElement()" shape=ellipse]
26 [label="4:CtTypeAccessImpl@MSG_WARN" shape=ellipse]
27 [label="4:CtInvocationImpl@log(\"Manifest warning: \" + e.nextElement(), MSG_WARN)" shape=ellipse]
28 [label="3:CtBlockImpl@\{
    log(\"Manifest warning: \" + e.nextElement(), MSG_WARN);
\}" shape=ellipse]
29 [label="3:CtForImpl@for (Enumeration e = manifest.getWarnings(); e.hasMoreElements();) \{
    log(\"Manifest warning: \" + e.nextElement(), MSG_WARN);
\}" shape=ellipse]
30 [label="6:CtExecutableReferenceImpl@zipDir(Resource,<unknown>,java.lang.String,<unknown>,<unknown>)" shape=ellipse]
31 [label="6:CtVirtualElement@zipDir" shape=ellipse]
32 [label="6:CtLiteralImpl@((Resource) (null))" shape=ellipse]
33 [label="6:CtTypeReferenceImpl@Resource" shape=ellipse]
34 [label="6:CtVariableReadImpl@zOut" shape=ellipse]
35 [label="6:CtLiteralImpl@\"META-INF/\"" shape=ellipse]
36 [label="6:CtTypeAccessImpl@DEFAULT_DIR_MODE" shape=ellipse]
37 [label="6:CtTypeAccessImpl@JAR_MARKER" shape=ellipse]
38 [label="6:CtInvocationImpl@zipDir(((Resource) (null)), zOut, \"META-INF/\", DEFAULT_DIR_MODE, JAR_MARKER)" shape=ellipse]
39 [label="7:CtTypeReferenceImpl@ByteArrayOutputStream" shape=ellipse]
40 [label="7:CtTypeReferenceImpl@ByteArrayOutputStream" shape=ellipse]
41 [label="7:CtConstructorCallImpl@new ByteArrayOutputStream()" shape=ellipse]
42 [label="7:CtVirtualElement@baos" shape=ellipse]
43 [label="7:CtLocalVariableImpl@ByteArrayOutputStream baos = new ByteArrayOutputStream()" shape=ellipse]
44 [label="8:CtTypeReferenceImpl@OutputStreamWriter" shape=ellipse]
45 [label="8:CtTypeReferenceImpl@OutputStreamWriter" shape=ellipse]
46 [label="8:CtVariableReadImpl@baos" shape=ellipse]
47 [label="8:CtFieldReadImpl@Manifest.JAR_ENCODING" shape=ellipse]
48 [label="8:CtConstructorCallImpl@new OutputStreamWriter(baos, Manifest.JAR_ENCODING)" shape=ellipse]
49 [label="8:CtVirtualElement@osw" shape=ellipse]
50 [label="8:CtLocalVariableImpl@OutputStreamWriter osw = new OutputStreamWriter(baos, Manifest.JAR_ENCODING)" shape=ellipse]
51 [label="9:CtTypeReferenceImpl@PrintWriter" shape=ellipse]
52 [label="9:CtTypeReferenceImpl@PrintWriter" shape=ellipse]
53 [label="9:CtVariableReadImpl@osw" shape=ellipse]
54 [label="9:CtConstructorCallImpl@new PrintWriter(osw)" shape=ellipse]
55 [label="9:CtVirtualElement@writer" shape=ellipse]
56 [label="9:CtLocalVariableImpl@PrintWriter writer = new PrintWriter(osw)" shape=ellipse]
57 [label="10:CtExecutableReferenceImpl@write(PrintWriter)" shape=ellipse]
58 [label="10:CtVirtualElement@write" shape=ellipse]
59 [label="10:CtVariableReadImpl@manifest" shape=ellipse]
60 [label="10:CtVariableReadImpl@writer" shape=ellipse]
61 [label="10:CtInvocationImpl@manifest.write(writer)" shape=ellipse]
62 [label="11:CtExecutableReferenceImpl@checkError()" shape=ellipse]
63 [label="11:CtVirtualElement@checkError" shape=ellipse]
64 [label="11:CtVariableReadImpl@writer" shape=ellipse]
65 [label="11:CtInvocationImpl@writer.checkError()" shape=ellipse]
66 [label="12:CtTypeReferenceImpl@IOException" shape=ellipse]
67 [label="12:CtLiteralImpl@\"Encountered an error writing the manifest\"" shape=ellipse]
68 [label="12:CtConstructorCallImpl@new IOException(\"Encountered an error writing the manifest\")" shape=ellipse]
69 [label="12:CtThrowImpl@throw new IOException(\"Encountered an error writing the manifest\")" shape=ellipse]
70 [label="11:CtBlockImpl@\{
    throw new IOException(\"Encountered an error writing the manifest\");
\}" shape=ellipse]
71 [label="11:CtIfImpl@if (writer.checkError()) \{
    throw new IOException(\"Encountered an error writing the manifest\");
\}" shape=ellipse]
72 [label="14:CtExecutableReferenceImpl@close()" shape=ellipse]
73 [label="14:CtVirtualElement@close" shape=ellipse]
74 [label="14:CtVariableReadImpl@writer" shape=ellipse]
75 [label="14:CtInvocationImpl@writer.close()" shape=ellipse]
76 [label="15:CtTypeReferenceImpl@ByteArrayInputStream" shape=ellipse]
77 [label="15:CtTypeReferenceImpl@ByteArrayInputStream" shape=ellipse]
78 [label="15:CtExecutableReferenceImpl@toByteArray()" shape=ellipse]
79 [label="15:CtVirtualElement@toByteArray" shape=ellipse]
80 [label="15:CtVariableReadImpl@baos" shape=ellipse]
81 [label="15:CtInvocationImpl@baos.toByteArray()" shape=ellipse]
82 [label="15:CtConstructorCallImpl@new ByteArrayInputStream(baos.toByteArray())" shape=ellipse]
83 [label="15:CtVirtualElement@bais" shape=ellipse]
84 [label="15:CtLocalVariableImpl@ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())" shape=ellipse]
85 [label="17:CtExecutableReferenceImpl@zipFile(ByteArrayInputStream,ZipOutputStream,long,<unknown>)" shape=ellipse]
86 [label="17:CtVirtualElement@zipFile" shape=ellipse]
87 [label="17:CtSuperAccessImpl@super" shape=ellipse]
88 [label="17:CtVariableReadImpl@bais" shape=ellipse]
89 [label="17:CtVariableReadImpl@zOut" shape=ellipse]
90 [label="17:CtTypeAccessImpl@MANIFEST_NAME" shape=ellipse]
91 [label="17:CtExecutableReferenceImpl@currentTimeMillis()" shape=ellipse]
92 [label="17:CtVirtualElement@currentTimeMillis" shape=ellipse]
93 [label="17:CtTypeAccessImpl@System" shape=ellipse]
94 [label="17:CtInvocationImpl@System.currentTimeMillis()" shape=ellipse]
95 [label="17:CtLiteralImpl@null" shape=ellipse]
96 [label="17:CtTypeAccessImpl@DEFAULT_FILE_MODE" shape=ellipse]
97 [label="17:CtInvocationImpl@super.zipFile(bais, zOut, MANIFEST_NAME, System.currentTimeMillis(), null, DEFAULT_FILE_MODE)" shape=ellipse]
98 [label="16:CtBlockImpl@\{
    super.zipFile(bais, zOut, MANIFEST_NAME, System.currentTimeMillis(), null, DEFAULT_FILE_MODE);
\}" shape=ellipse]
99 [label="19:CtExecutableReferenceImpl@close(ByteArrayInputStream)" shape=ellipse]
100 [label="19:CtVirtualElement@close" shape=ellipse]
101 [label="19:CtTypeAccessImpl@FileUtils" shape=ellipse]
102 [label="19:CtVariableReadImpl@bais" shape=ellipse]
103 [label="19:CtInvocationImpl@FileUtils.close(bais)" shape=ellipse]
104 [label="18:CtBlockImpl@\{
    FileUtils.close(bais);
\}" shape=ellipse]
105 [label="16:CtTryImpl@try \{
    super.zipFile(bais, zOut, MANIFEST_NAME, System.currentTimeMillis(), null, DEFAULT_FILE_MODE);
\} finally \{
    FileUtils.close(bais);
\}" shape=ellipse]
106 [label="21:CtExecutableReferenceImpl@initZipOutputStream(ZipOutputStream)" shape=ellipse]
107 [label="21:CtVirtualElement@initZipOutputStream" shape=ellipse]
108 [label="21:CtSuperAccessImpl@super" shape=ellipse]
109 [label="21:CtVariableReadImpl@zOut" shape=ellipse]
110 [label="21:CtInvocationImpl@super.initZipOutputStream(zOut)" shape=ellipse]
111 [label="2:CtBlockImpl@\{
    for (Enumeration e = manifest.getWarnings(); e.hasMoreElements();) \{
        log(\"Manifest warning: \" + e.nextElement(), MSG_WARN);
    \}
    zipDir(((Resource) (null)), zOut, \"META-INF/\", DEFAULT_DIR_MODE, JAR_MARKER);
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    OutputStreamWriter osw = new OutputStreamWriter(baos, Manifest.JAR_ENCODING);
    PrintWriter writer = new PrintWriter(osw);
    manifest.write(writer);
    if (writer.checkError()) \{
        throw new IOException(\"Encountered an error writing the manifest\");
    \}
    writer.close();
    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
    try \{
        super.zipFile(bais, zOut, MANIFEST_NAME, System.currentTimeMillis(), null, DEFAULT_FILE_MODE);
    \} finally \{
        FileUtils.close(bais);
    \}
    super.initZipOutputStream(zOut);
\}" shape=ellipse]
112 [label="2:CtMethodImpl@private void writeManifest(ZipOutputStream zOut, Manifest manifest) throws IOException \{
    for (Enumeration e = manifest.getWarnings(); e.hasMoreElements();) \{
        log(\"Manifest warning: \" + e.nextElement(), MSG_WARN);
    \}
    zipDir(((Resource) (null)), zOut, \"META-INF/\", DEFAULT_DIR_MODE, JAR_MARKER);
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    OutputStreamWriter osw = new OutputStreamWriter(baos, Manifest.JAR_ENCODING);
    PrintWriter writer = new PrintWriter(osw);
    manifest.write(writer);
    if (writer.checkError()) \{
        throw new IOException(\"Encountered an error writing the manifest\");
    \}
    writer.close();
    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
    try \{
        super.zipFile(bais, zOut, MANIFEST_NAME, System.currentTimeMillis(), null, DEFAULT_FILE_MODE);
    \} finally \{
        FileUtils.close(bais);
    \}
    super.initZipOutputStream(zOut);
\}" shape=ellipse]
113 [label="18:Insert@INSERT" shape=ellipse]
114 [label="18:CtLiteralImpl@null" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
10 -> 12 [label="Data Dep"];
11 -> 9 [label="AST"];
11 -> 10 [label="AST"];
11 -> 8 [label="AST"];
12 -> 16 [label="Define-Use"];
12 -> 23 [label="Define-Use"];
13 -> 12 [label="AST"];
13 -> 7 [label="AST"];
13 -> 11 [label="AST"];
17 -> 15 [label="AST"];
17 -> 16 [label="AST"];
17 -> 14 [label="AST"];
17 -> 28 [label="Control Dep"];
17 -> 27 [label="Control Dep"];
17 -> 18 [label="Control Dep"];
17 -> 25 [label="Control Dep"];
17 -> 20 [label="Control Dep"];
17 -> 24 [label="Control Dep"];
17 -> 21 [label="Control Dep"];
17 -> 23 [label="Control Dep"];
17 -> 26 [label="Control Dep"];
24 -> 22 [label="AST"];
24 -> 23 [label="AST"];
24 -> 21 [label="AST"];
25 -> 20 [label="AST"];
25 -> 24 [label="AST"];
27 -> 19 [label="AST"];
27 -> 18 [label="AST"];
27 -> 25 [label="AST"];
27 -> 26 [label="AST"];
28 -> 27 [label="AST"];
29 -> 13 [label="AST"];
29 -> 17 [label="AST"];
29 -> 28 [label="AST"];
32 -> 33 [label="AST"];
38 -> 31 [label="AST"];
38 -> 30 [label="AST"];
38 -> 32 [label="AST"];
38 -> 34 [label="AST"];
38 -> 35 [label="AST"];
38 -> 36 [label="AST"];
38 -> 37 [label="AST"];
42 -> 46 [label="Define-Use"];
42 -> 80 [label="Define-Use"];
43 -> 42 [label="AST"];
43 -> 39 [label="AST"];
43 -> 41 [label="AST"];
46 -> 49 [label="Data Dep"];
47 -> 49 [label="Data Dep"];
48 -> 46 [label="AST"];
48 -> 47 [label="AST"];
49 -> 53 [label="Define-Use"];
50 -> 49 [label="AST"];
50 -> 44 [label="AST"];
50 -> 48 [label="AST"];
53 -> 55 [label="Data Dep"];
54 -> 53 [label="AST"];
55 -> 60 [label="Define-Use"];
55 -> 64 [label="Define-Use"];
55 -> 74 [label="Define-Use"];
56 -> 55 [label="AST"];
56 -> 51 [label="AST"];
56 -> 54 [label="AST"];
61 -> 58 [label="AST"];
61 -> 59 [label="AST"];
61 -> 57 [label="AST"];
61 -> 60 [label="AST"];
65 -> 63 [label="AST"];
65 -> 64 [label="AST"];
65 -> 62 [label="AST"];
65 -> 70 [label="Control Dep"];
65 -> 69 [label="Control Dep"];
65 -> 68 [label="Control Dep"];
65 -> 67 [label="Control Dep"];
68 -> 67 [label="AST"];
69 -> 68 [label="AST"];
70 -> 69 [label="AST"];
71 -> 65 [label="AST"];
71 -> 70 [label="AST"];
75 -> 73 [label="AST"];
75 -> 74 [label="AST"];
75 -> 72 [label="AST"];
80 -> 83 [label="Data Dep"];
81 -> 79 [label="AST"];
81 -> 80 [label="AST"];
81 -> 78 [label="AST"];
82 -> 81 [label="AST"];
83 -> 88 [label="Define-Use"];
83 -> 102 [label="Define-Use"];
84 -> 83 [label="AST"];
84 -> 76 [label="AST"];
84 -> 82 [label="AST"];
94 -> 92 [label="AST"];
94 -> 93 [label="AST"];
94 -> 91 [label="AST"];
97 -> 86 [label="AST"];
97 -> 87 [label="AST"];
97 -> 85 [label="AST"];
97 -> 88 [label="AST"];
97 -> 89 [label="AST"];
97 -> 90 [label="AST"];
97 -> 94 [label="AST"];
97 -> 95 [label="AST"];
97 -> 96 [label="AST"];
97 -> 113 [label="Action"];
98 -> 97 [label="AST"];
103 -> 100 [label="AST"];
103 -> 101 [label="AST"];
103 -> 99 [label="AST"];
103 -> 102 [label="AST"];
104 -> 103 [label="AST"];
105 -> 98 [label="AST"];
105 -> 104 [label="AST"];
110 -> 107 [label="AST"];
110 -> 108 [label="AST"];
110 -> 106 [label="AST"];
110 -> 109 [label="AST"];
111 -> 29 [label="AST"];
111 -> 38 [label="AST"];
111 -> 43 [label="AST"];
111 -> 50 [label="AST"];
111 -> 56 [label="AST"];
111 -> 61 [label="AST"];
111 -> 71 [label="AST"];
111 -> 75 [label="AST"];
111 -> 84 [label="AST"];
111 -> 105 [label="AST"];
111 -> 110 [label="AST"];
112 -> 1 [label="AST"];
112 -> 0 [label="AST"];
112 -> 2 [label="AST"];
112 -> 4 [label="AST"];
112 -> 6 [label="AST"];
112 -> 111 [label="AST"];
113 -> 114 [label="Action"];
}