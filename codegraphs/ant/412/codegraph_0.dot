digraph "configure#?,Configuration" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@configure" shape=ellipse]
2 [label="2:CtParameterImpl@final Configuration configuration" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@Configuration" shape=ellipse]
4 [label="2:CtTypeReferenceImpl@ConfigurationException" shape=ellipse]
5 [label="3:CtTypeReferenceImpl@DefaultConfiguration" shape=ellipse]
6 [label="4:CtTypeReferenceImpl@DefaultConfiguration" shape=ellipse]
7 [label="4:CtExecutableReferenceImpl@getName()" shape=ellipse]
8 [label="4:CtVirtualElement@getName" shape=ellipse]
9 [label="4:CtVariableReadImpl@configuration" shape=ellipse]
10 [label="4:CtInvocationImpl@configuration.getName()" shape=ellipse]
11 [label="4:CtExecutableReferenceImpl@getLocation()" shape=ellipse]
12 [label="4:CtVirtualElement@getLocation" shape=ellipse]
13 [label="4:CtVariableReadImpl@configuration" shape=ellipse]
14 [label="4:CtInvocationImpl@configuration.getLocation()" shape=ellipse]
15 [label="4:CtConstructorCallImpl@new DefaultConfiguration(configuration.getName(), configuration.getLocation())" shape=ellipse]
16 [label="3:CtVirtualElement@newConfiguration" shape=ellipse]
17 [label="3:CtLocalVariableImpl@final DefaultConfiguration newConfiguration = new DefaultConfiguration(configuration.getName(), configuration.getLocation())" shape=ellipse]
18 [label="5:CtVirtualElement@String[]" shape=ellipse]
19 [label="5:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
20 [label="5:CtExecutableReferenceImpl@getAttributeNames()" shape=ellipse]
21 [label="5:CtVirtualElement@getAttributeNames" shape=ellipse]
22 [label="5:CtVariableReadImpl@configuration" shape=ellipse]
23 [label="5:CtInvocationImpl@configuration.getAttributeNames()" shape=ellipse]
24 [label="5:CtVirtualElement@attributes" shape=ellipse]
25 [label="5:CtLocalVariableImpl@final String[] attributes = configuration.getAttributeNames()" shape=ellipse]
26 [label="6:CtTypeReferenceImpl@int" shape=ellipse]
27 [label="6:CtLiteralImpl@0" shape=ellipse]
28 [label="6:CtVirtualElement@i" shape=ellipse]
29 [label="6:CtLocalVariableImpl@int i = 0" shape=ellipse]
30 [label="6:CtVariableReadImpl@i" shape=ellipse]
31 [label="6:CtVariableReadImpl@attributes" shape=ellipse]
32 [label="6:CtLocalVariableReferenceImpl@attributes" shape=ellipse]
33 [label="6:CtFieldReadImpl@attributes.length" shape=ellipse]
34 [label="6:CtBinaryOperatorImpl@i < attributes.length" shape=ellipse]
35 [label="6:CtVariableWriteImpl@i" shape=ellipse]
36 [label="6:CtUnaryOperatorImpl@i++" shape=ellipse]
37 [label="7:CtTypeReferenceImpl@String" shape=ellipse]
38 [label="7:CtVariableReadImpl@attributes" shape=ellipse]
39 [label="7:CtVariableReadImpl@i" shape=ellipse]
40 [label="7:CtArrayReadImpl@attributes[i]" shape=ellipse]
41 [label="7:CtVirtualElement@name" shape=ellipse]
42 [label="7:CtLocalVariableImpl@final String name = attributes[i]" shape=ellipse]
43 [label="8:CtTypeReferenceImpl@String" shape=ellipse]
44 [label="8:CtExecutableReferenceImpl@getAttribute(java.lang.String)" shape=ellipse]
45 [label="8:CtVirtualElement@getAttribute" shape=ellipse]
46 [label="8:CtVariableReadImpl@configuration" shape=ellipse]
47 [label="8:CtVariableReadImpl@name" shape=ellipse]
48 [label="8:CtInvocationImpl@configuration.getAttribute(name)" shape=ellipse]
49 [label="8:CtVirtualElement@value" shape=ellipse]
50 [label="8:CtLocalVariableImpl@final String value = configuration.getAttribute(name)" shape=ellipse]
51 [label="9:CtExecutableReferenceImpl@equals(java.lang.Object)" shape=ellipse]
52 [label="9:CtVirtualElement@equals" shape=ellipse]
53 [label="9:CtVariableReadImpl@name" shape=ellipse]
54 [label="9:CtLiteralImpl@\"id\"" shape=ellipse]
55 [label="9:CtInvocationImpl@name.equals(\"id\")" shape=ellipse]
56 [label="9:CtExecutableReferenceImpl@equals(java.lang.Object)" shape=ellipse]
57 [label="9:CtVirtualElement@equals" shape=ellipse]
58 [label="9:CtVariableReadImpl@name" shape=ellipse]
59 [label="9:CtLiteralImpl@\"local-scope\"" shape=ellipse]
60 [label="9:CtInvocationImpl@name.equals(\"local-scope\")" shape=ellipse]
61 [label="9:CtBinaryOperatorImpl@name.equals(\"id\") || name.equals(\"local-scope\")" shape=ellipse]
62 [label="10:CtExecutableReferenceImpl@configure(Configuration)" shape=ellipse]
63 [label="10:CtVirtualElement@configure" shape=ellipse]
64 [label="10:CtThisAccessImpl@this" shape=ellipse]
65 [label="10:CtVariableReadImpl@name" shape=ellipse]
66 [label="10:CtVariableReadImpl@value" shape=ellipse]
67 [label="10:CtInvocationImpl@configure(this, name, value)" shape=ellipse]
68 [label="9:CtBlockImpl@\{
    configure(this, name, value);
\}" shape=ellipse]
69 [label="12:CtExecutableReferenceImpl@setAttribute(java.lang.String,java.lang.String)" shape=ellipse]
70 [label="12:CtVirtualElement@setAttribute" shape=ellipse]
71 [label="12:CtVariableReadImpl@newConfiguration" shape=ellipse]
72 [label="12:CtVariableReadImpl@name" shape=ellipse]
73 [label="12:CtVariableReadImpl@value" shape=ellipse]
74 [label="12:CtInvocationImpl@newConfiguration.setAttribute(name, value)" shape=ellipse]
75 [label="11:CtBlockImpl@\{
    newConfiguration.setAttribute(name, value);
\}" shape=ellipse]
76 [label="9:CtIfImpl@if (name.equals(\"id\") || name.equals(\"local-scope\")) \{
    configure(this, name, value);
\} else \{
    newConfiguration.setAttribute(name, value);
\}" shape=ellipse]
77 [label="6:CtBlockImpl@\{
    final String name = attributes[i];
    final String value = configuration.getAttribute(name);
    if (name.equals(\"id\") || name.equals(\"local-scope\")) \{
        configure(this, name, value);
    \} else \{
        newConfiguration.setAttribute(name, value);
    \}
\}" shape=ellipse]
78 [label="6:CtForImpl@for (int i = 0; i < attributes.length; i++) \{
    final String name = attributes[i];
    final String value = configuration.getAttribute(name);
    if (name.equals(\"id\") || name.equals(\"local-scope\")) \{
        configure(this, name, value);
    \} else \{
        newConfiguration.setAttribute(name, value);
    \}
\}" shape=ellipse]
79 [label="15:CtVirtualElement@Configuration[]" shape=ellipse]
80 [label="15:CtArrayTypeReferenceImpl@Configuration[]" shape=ellipse]
81 [label="15:CtExecutableReferenceImpl@getChildren()" shape=ellipse]
82 [label="15:CtVirtualElement@getChildren" shape=ellipse]
83 [label="15:CtVariableReadImpl@configuration" shape=ellipse]
84 [label="15:CtInvocationImpl@configuration.getChildren()" shape=ellipse]
85 [label="15:CtVirtualElement@children" shape=ellipse]
86 [label="15:CtLocalVariableImpl@final Configuration[] children = configuration.getChildren()" shape=ellipse]
87 [label="16:CtTypeReferenceImpl@int" shape=ellipse]
88 [label="16:CtLiteralImpl@0" shape=ellipse]
89 [label="16:CtVirtualElement@i" shape=ellipse]
90 [label="16:CtLocalVariableImpl@int i = 0" shape=ellipse]
91 [label="16:CtVariableReadImpl@i" shape=ellipse]
92 [label="16:CtVariableReadImpl@children" shape=ellipse]
93 [label="16:CtLocalVariableReferenceImpl@children" shape=ellipse]
94 [label="16:CtFieldReadImpl@children.length" shape=ellipse]
95 [label="16:CtBinaryOperatorImpl@i < children.length" shape=ellipse]
96 [label="16:CtVariableWriteImpl@i" shape=ellipse]
97 [label="16:CtUnaryOperatorImpl@i++" shape=ellipse]
98 [label="17:CtExecutableReferenceImpl@addChild()" shape=ellipse]
99 [label="17:CtVirtualElement@addChild" shape=ellipse]
100 [label="17:CtVariableReadImpl@newConfiguration" shape=ellipse]
101 [label="17:CtVariableReadImpl@children" shape=ellipse]
102 [label="17:CtVariableReadImpl@i" shape=ellipse]
103 [label="17:CtArrayReadImpl@children[i]" shape=ellipse]
104 [label="17:CtInvocationImpl@newConfiguration.addChild(children[i])" shape=ellipse]
105 [label="16:CtBlockImpl@\{
    newConfiguration.addChild(children[i]);
\}" shape=ellipse]
106 [label="16:CtForImpl@for (int i = 0; i < children.length; i++) \{
    newConfiguration.addChild(children[i]);
\}" shape=ellipse]
107 [label="20:CtFieldWriteImpl@m_value" shape=ellipse]
108 [label="20:CtExecutableReferenceImpl@newInstance(java.lang.Class,<unknown>)" shape=ellipse]
109 [label="20:CtVirtualElement@newInstance" shape=ellipse]
110 [label="20:CtFieldReadImpl@DataType.class" shape=ellipse]
111 [label="20:CtExecutableReferenceImpl@getName()" shape=ellipse]
112 [label="20:CtVirtualElement@getName" shape=ellipse]
113 [label="20:CtVariableReadImpl@configuration" shape=ellipse]
114 [label="20:CtInvocationImpl@configuration.getName()" shape=ellipse]
115 [label="20:CtInvocationImpl@newInstance(DataType.class, configuration.getName())" shape=ellipse]
116 [label="20:CtAssignmentImpl@m_value = newInstance(DataType.class, configuration.getName())" shape=ellipse]
117 [label="19:CtBlockImpl@\{
    m_value = newInstance(DataType.class, configuration.getName());
\}" shape=ellipse]
118 [label="21:CtVirtualElement@e" shape=ellipse]
119 [label="21:CtTypeReferenceImpl@Exception" shape=ellipse]
120 [label="21:CtCatchVariableImpl@final Exception e" shape=ellipse]
121 [label="22:CtTypeReferenceImpl@String" shape=ellipse]
122 [label="22:CtExecutableReferenceImpl@getString(java.lang.String)" shape=ellipse]
123 [label="22:CtVirtualElement@getString" shape=ellipse]
124 [label="22:CtTypeAccessImpl@REZ" shape=ellipse]
125 [label="22:CtLiteralImpl@\"type.no-create.error\"" shape=ellipse]
126 [label="22:CtInvocationImpl@REZ.getString(\"type.no-create.error\")" shape=ellipse]
127 [label="22:CtVirtualElement@message" shape=ellipse]
128 [label="22:CtLocalVariableImpl@final String message = REZ.getString(\"type.no-create.error\")" shape=ellipse]
129 [label="23:CtTypeReferenceImpl@ConfigurationException" shape=ellipse]
130 [label="23:CtVariableReadImpl@message" shape=ellipse]
131 [label="23:CtVariableReadImpl@e" shape=ellipse]
132 [label="23:CtConstructorCallImpl@new ConfigurationException(message, e)" shape=ellipse]
133 [label="23:CtThrowImpl@throw new ConfigurationException(message, e)" shape=ellipse]
134 [label="21:CtBlockImpl@\{
    final String message = REZ.getString(\"type.no-create.error\");
    throw new ConfigurationException(message, e);
\}" shape=ellipse]
135 [label="21:CtCatchImpl@ catch (final Exception e) \{
    final String message = REZ.getString(\"type.no-create.error\");
    throw new ConfigurationException(message, e);
\}" shape=ellipse]
136 [label="19:CtTryImpl@try \{
    m_value = newInstance(DataType.class, configuration.getName());
\} catch (final Exception e) \{
    final String message = REZ.getString(\"type.no-create.error\");
    throw new ConfigurationException(message, e);
\}" shape=ellipse]
137 [label="25:CtExecutableReferenceImpl@configure(Configuration)" shape=ellipse]
138 [label="25:CtVirtualElement@configure" shape=ellipse]
139 [label="25:CtFieldReadImpl@m_value" shape=ellipse]
140 [label="25:CtVariableReadImpl@newConfiguration" shape=ellipse]
141 [label="25:CtInvocationImpl@configure(m_value, newConfiguration)" shape=ellipse]
142 [label="2:CtBlockImpl@\{
    final DefaultConfiguration newConfiguration = new DefaultConfiguration(configuration.getName(), configuration.getLocation());
    final String[] attributes = configuration.getAttributeNames();
    for (int i = 0; i < attributes.length; i++) \{
        final String name = attributes[i];
        final String value = configuration.getAttribute(name);
        if (name.equals(\"id\") || name.equals(\"local-scope\")) \{
            configure(this, name, value);
        \} else \{
            newConfiguration.setAttribute(name, value);
        \}
    \}
    final Configuration[] children = configuration.getChildren();
    for (int i = 0; i < children.length; i++) \{
        newConfiguration.addChild(children[i]);
    \}
    try \{
        m_value = newInstance(DataType.class, configuration.getName());
    \} catch (final Exception e) \{
        final String message = REZ.getString(\"type.no-create.error\");
        throw new ConfigurationException(message, e);
    \}
    configure(m_value, newConfiguration);
\}" shape=ellipse]
143 [label="2:CtMethodImpl@public void configure(final Configuration configuration) throws ConfigurationException \{
    final DefaultConfiguration newConfiguration = new DefaultConfiguration(configuration.getName(), configuration.getLocation());
    final String[] attributes = configuration.getAttributeNames();
    for (int i = 0; i < attributes.length; i++) \{
        final String name = attributes[i];
        final String value = configuration.getAttribute(name);
        if (name.equals(\"id\") || name.equals(\"local-scope\")) \{
            configure(this, name, value);
        \} else \{
            newConfiguration.setAttribute(name, value);
        \}
    \}
    final Configuration[] children = configuration.getChildren();
    for (int i = 0; i < children.length; i++) \{
        newConfiguration.addChild(children[i]);
    \}
    try \{
        m_value = newInstance(DataType.class, configuration.getName());
    \} catch (final Exception e) \{
        final String message = REZ.getString(\"type.no-create.error\");
        throw new ConfigurationException(message, e);
    \}
    configure(m_value, newConfiguration);
\}" shape=ellipse]
144 [label="25:Update@UPDATE" shape=ellipse]
145 [label="25:CtInvocationImpl@configureElement(m_value, newConfiguration)" shape=ellipse]
146 [label="10:Update@UPDATE" shape=ellipse]
147 [label="10:CtInvocationImpl@configureAttribute(this, name, value)" shape=ellipse]
2 -> 3 [label="AST"];
9 -> 16 [label="Data Dep"];
10 -> 8 [label="AST"];
10 -> 9 [label="AST"];
10 -> 7 [label="AST"];
13 -> 16 [label="Data Dep"];
14 -> 12 [label="AST"];
14 -> 13 [label="AST"];
14 -> 11 [label="AST"];
15 -> 10 [label="AST"];
15 -> 14 [label="AST"];
16 -> 71 [label="Define-Use"];
16 -> 100 [label="Define-Use"];
16 -> 140 [label="Define-Use"];
17 -> 16 [label="AST"];
17 -> 5 [label="AST"];
17 -> 15 [label="AST"];
19 -> 18 [label="AST"];
22 -> 24 [label="Data Dep"];
23 -> 21 [label="AST"];
23 -> 22 [label="AST"];
23 -> 20 [label="AST"];
24 -> 31 [label="Define-Use"];
24 -> 38 [label="Define-Use"];
24 -> 40 [label="Define-Use"];
25 -> 24 [label="AST"];
25 -> 19 [label="AST"];
25 -> 23 [label="AST"];
28 -> 30 [label="Define-Use"];
29 -> 28 [label="AST"];
29 -> 26 [label="AST"];
29 -> 27 [label="AST"];
31 -> 32 [label="AST"];
33 -> 31 [label="AST"];
34 -> 30 [label="AST"];
34 -> 33 [label="AST"];
34 -> 77 [label="Control Dep"];
34 -> 42 [label="Control Dep"];
34 -> 40 [label="Control Dep"];
34 -> 38 [label="Control Dep"];
34 -> 39 [label="Control Dep"];
34 -> 50 [label="Control Dep"];
34 -> 48 [label="Control Dep"];
34 -> 44 [label="Control Dep"];
34 -> 46 [label="Control Dep"];
34 -> 47 [label="Control Dep"];
34 -> 76 [label="Control Dep"];
34 -> 61 [label="Control Dep"];
34 -> 55 [label="Control Dep"];
34 -> 51 [label="Control Dep"];
34 -> 53 [label="Control Dep"];
34 -> 54 [label="Control Dep"];
34 -> 60 [label="Control Dep"];
34 -> 56 [label="Control Dep"];
34 -> 58 [label="Control Dep"];
34 -> 59 [label="Control Dep"];
35 -> 39 [label="Define-Use"];
36 -> 35 [label="AST"];
40 -> 38 [label="AST"];
40 -> 39 [label="AST"];
40 -> 41 [label="Data Dep"];
41 -> 47 [label="Define-Use"];
41 -> 53 [label="Define-Use"];
41 -> 58 [label="Define-Use"];
41 -> 65 [label="Define-Use"];
41 -> 72 [label="Define-Use"];
42 -> 41 [label="AST"];
42 -> 37 [label="AST"];
42 -> 40 [label="AST"];
46 -> 49 [label="Data Dep"];
47 -> 49 [label="Data Dep"];
48 -> 45 [label="AST"];
48 -> 46 [label="AST"];
48 -> 44 [label="AST"];
48 -> 47 [label="AST"];
49 -> 66 [label="Define-Use"];
49 -> 73 [label="Define-Use"];
50 -> 49 [label="AST"];
50 -> 43 [label="AST"];
50 -> 48 [label="AST"];
55 -> 52 [label="AST"];
55 -> 53 [label="AST"];
55 -> 51 [label="AST"];
55 -> 54 [label="AST"];
60 -> 57 [label="AST"];
60 -> 58 [label="AST"];
60 -> 56 [label="AST"];
60 -> 59 [label="AST"];
61 -> 55 [label="AST"];
61 -> 60 [label="AST"];
61 -> 68 [label="Control Dep"];
61 -> 67 [label="Control Dep"];
61 -> 62 [label="Control Dep"];
61 -> 64 [label="Control Dep"];
61 -> 65 [label="Control Dep"];
61 -> 66 [label="Control Dep"];
61 -> 75 [label="Control Dep"];
61 -> 74 [label="Control Dep"];
61 -> 69 [label="Control Dep"];
61 -> 71 [label="Control Dep"];
61 -> 72 [label="Control Dep"];
61 -> 73 [label="Control Dep"];
67 -> 63 [label="AST"];
67 -> 62 [label="AST"];
67 -> 64 [label="AST"];
67 -> 65 [label="AST"];
67 -> 66 [label="AST"];
67 -> 146 [label="Action"];
68 -> 67 [label="AST"];
74 -> 70 [label="AST"];
74 -> 71 [label="AST"];
74 -> 69 [label="AST"];
74 -> 72 [label="AST"];
74 -> 73 [label="AST"];
75 -> 74 [label="AST"];
76 -> 61 [label="AST"];
76 -> 68 [label="AST"];
76 -> 75 [label="AST"];
77 -> 42 [label="AST"];
77 -> 50 [label="AST"];
77 -> 76 [label="AST"];
78 -> 29 [label="AST"];
78 -> 34 [label="AST"];
78 -> 36 [label="AST"];
78 -> 77 [label="AST"];
80 -> 79 [label="AST"];
83 -> 85 [label="Data Dep"];
84 -> 82 [label="AST"];
84 -> 83 [label="AST"];
84 -> 81 [label="AST"];
85 -> 92 [label="Define-Use"];
85 -> 101 [label="Define-Use"];
85 -> 103 [label="Define-Use"];
86 -> 85 [label="AST"];
86 -> 80 [label="AST"];
86 -> 84 [label="AST"];
89 -> 91 [label="Define-Use"];
90 -> 89 [label="AST"];
90 -> 87 [label="AST"];
90 -> 88 [label="AST"];
92 -> 93 [label="AST"];
94 -> 92 [label="AST"];
95 -> 91 [label="AST"];
95 -> 94 [label="AST"];
95 -> 105 [label="Control Dep"];
95 -> 104 [label="Control Dep"];
95 -> 98 [label="Control Dep"];
95 -> 100 [label="Control Dep"];
95 -> 103 [label="Control Dep"];
95 -> 101 [label="Control Dep"];
95 -> 102 [label="Control Dep"];
96 -> 102 [label="Define-Use"];
97 -> 96 [label="AST"];
103 -> 101 [label="AST"];
103 -> 102 [label="AST"];
104 -> 99 [label="AST"];
104 -> 100 [label="AST"];
104 -> 98 [label="AST"];
104 -> 103 [label="AST"];
105 -> 104 [label="AST"];
106 -> 90 [label="AST"];
106 -> 95 [label="AST"];
106 -> 97 [label="AST"];
106 -> 105 [label="AST"];
107 -> 139 [label="Define-Use"];
110 -> 107 [label="Data Dep"];
113 -> 107 [label="Data Dep"];
114 -> 112 [label="AST"];
114 -> 113 [label="AST"];
114 -> 111 [label="AST"];
115 -> 109 [label="AST"];
115 -> 108 [label="AST"];
115 -> 110 [label="AST"];
115 -> 114 [label="AST"];
116 -> 107 [label="AST"];
116 -> 115 [label="AST"];
117 -> 116 [label="AST"];
118 -> 131 [label="Define-Use"];
120 -> 118 [label="AST"];
120 -> 119 [label="AST"];
120 -> 134 [label="Control Dep"];
120 -> 128 [label="Control Dep"];
120 -> 126 [label="Control Dep"];
120 -> 122 [label="Control Dep"];
120 -> 124 [label="Control Dep"];
120 -> 125 [label="Control Dep"];
120 -> 133 [label="Control Dep"];
120 -> 132 [label="Control Dep"];
120 -> 130 [label="Control Dep"];
120 -> 131 [label="Control Dep"];
126 -> 123 [label="AST"];
126 -> 124 [label="AST"];
126 -> 122 [label="AST"];
126 -> 125 [label="AST"];
127 -> 130 [label="Define-Use"];
128 -> 127 [label="AST"];
128 -> 121 [label="AST"];
128 -> 126 [label="AST"];
132 -> 130 [label="AST"];
132 -> 131 [label="AST"];
133 -> 132 [label="AST"];
134 -> 128 [label="AST"];
134 -> 133 [label="AST"];
135 -> 120 [label="AST"];
135 -> 134 [label="AST"];
136 -> 117 [label="AST"];
136 -> 135 [label="AST"];
141 -> 138 [label="AST"];
141 -> 137 [label="AST"];
141 -> 139 [label="AST"];
141 -> 140 [label="AST"];
141 -> 144 [label="Action"];
142 -> 17 [label="AST"];
142 -> 25 [label="AST"];
142 -> 78 [label="AST"];
142 -> 86 [label="AST"];
142 -> 106 [label="AST"];
142 -> 136 [label="AST"];
142 -> 141 [label="AST"];
143 -> 1 [label="AST"];
143 -> 0 [label="AST"];
143 -> 2 [label="AST"];
143 -> 4 [label="AST"];
143 -> 142 [label="AST"];
144 -> 145 [label="Action"];
146 -> 147 [label="Action"];
}