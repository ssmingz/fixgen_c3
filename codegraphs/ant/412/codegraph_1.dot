digraph "configure#?,Configuration" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@configure" shape=ellipse]
2 [label="2:CtParameterImpl@final Configuration configuration" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@Configuration" shape=ellipse]
4 [label="2:CtTypeReferenceImpl@ConfigurationException" shape=ellipse]
5 [label="3:CtVirtualElement@String[]" shape=ellipse]
6 [label="3:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
7 [label="3:CtExecutableReferenceImpl@getAttributeNames()" shape=ellipse]
8 [label="3:CtVirtualElement@getAttributeNames" shape=ellipse]
9 [label="3:CtVariableReadImpl@configuration" shape=ellipse]
10 [label="3:CtInvocationImpl@configuration.getAttributeNames()" shape=ellipse]
11 [label="3:CtVirtualElement@attributes" shape=ellipse]
12 [label="3:CtLocalVariableImpl@final String[] attributes = configuration.getAttributeNames()" shape=ellipse]
13 [label="4:CtTypeReferenceImpl@int" shape=ellipse]
14 [label="4:CtLiteralImpl@0" shape=ellipse]
15 [label="4:CtVirtualElement@i" shape=ellipse]
16 [label="4:CtLocalVariableImpl@int i = 0" shape=ellipse]
17 [label="4:CtVariableReadImpl@i" shape=ellipse]
18 [label="4:CtVariableReadImpl@attributes" shape=ellipse]
19 [label="4:CtLocalVariableReferenceImpl@attributes" shape=ellipse]
20 [label="4:CtFieldReadImpl@attributes.length" shape=ellipse]
21 [label="4:CtBinaryOperatorImpl@i < attributes.length" shape=ellipse]
22 [label="4:CtVariableWriteImpl@i" shape=ellipse]
23 [label="4:CtUnaryOperatorImpl@i++" shape=ellipse]
24 [label="5:CtTypeReferenceImpl@String" shape=ellipse]
25 [label="5:CtVariableReadImpl@attributes" shape=ellipse]
26 [label="5:CtVariableReadImpl@i" shape=ellipse]
27 [label="5:CtArrayReadImpl@attributes[i]" shape=ellipse]
28 [label="5:CtVirtualElement@name" shape=ellipse]
29 [label="5:CtLocalVariableImpl@final String name = attributes[i]" shape=ellipse]
30 [label="6:CtTypeReferenceImpl@String" shape=ellipse]
31 [label="6:CtExecutableReferenceImpl@getAttribute(java.lang.String)" shape=ellipse]
32 [label="6:CtVirtualElement@getAttribute" shape=ellipse]
33 [label="6:CtVariableReadImpl@configuration" shape=ellipse]
34 [label="6:CtVariableReadImpl@name" shape=ellipse]
35 [label="6:CtInvocationImpl@configuration.getAttribute(name)" shape=ellipse]
36 [label="6:CtVirtualElement@value" shape=ellipse]
37 [label="6:CtLocalVariableImpl@final String value = configuration.getAttribute(name)" shape=ellipse]
38 [label="7:CtExecutableReferenceImpl@configure(Configuration)" shape=ellipse]
39 [label="7:CtVirtualElement@configure" shape=ellipse]
40 [label="7:CtThisAccessImpl@this" shape=ellipse]
41 [label="7:CtVariableReadImpl@name" shape=ellipse]
42 [label="7:CtVariableReadImpl@value" shape=ellipse]
43 [label="7:CtInvocationImpl@configure(this, name, value)" shape=ellipse]
44 [label="4:CtBlockImpl@\{
    final String name = attributes[i];
    final String value = configuration.getAttribute(name);
    configure(this, name, value);
\}" shape=ellipse]
45 [label="4:CtForImpl@for (int i = 0; i < attributes.length; i++) \{
    final String name = attributes[i];
    final String value = configuration.getAttribute(name);
    configure(this, name, value);
\}" shape=ellipse]
46 [label="9:CtVirtualElement@Configuration[]" shape=ellipse]
47 [label="9:CtArrayTypeReferenceImpl@Configuration[]" shape=ellipse]
48 [label="9:CtExecutableReferenceImpl@getChildren()" shape=ellipse]
49 [label="9:CtVirtualElement@getChildren" shape=ellipse]
50 [label="9:CtVariableReadImpl@configuration" shape=ellipse]
51 [label="9:CtInvocationImpl@configuration.getChildren()" shape=ellipse]
52 [label="9:CtVirtualElement@children" shape=ellipse]
53 [label="9:CtLocalVariableImpl@final Configuration[] children = configuration.getChildren()" shape=ellipse]
54 [label="10:CtLiteralImpl@1" shape=ellipse]
55 [label="10:CtVariableReadImpl@children" shape=ellipse]
56 [label="10:CtLocalVariableReferenceImpl@children" shape=ellipse]
57 [label="10:CtFieldReadImpl@children.length" shape=ellipse]
58 [label="10:CtBinaryOperatorImpl@1 == children.length" shape=ellipse]
59 [label="11:CtTypeReferenceImpl@String" shape=ellipse]
60 [label="11:CtExecutableReferenceImpl@getName()" shape=ellipse]
61 [label="11:CtVirtualElement@getName" shape=ellipse]
62 [label="11:CtVariableReadImpl@children" shape=ellipse]
63 [label="11:CtLiteralImpl@0" shape=ellipse]
64 [label="11:CtArrayReadImpl@children[0]" shape=ellipse]
65 [label="11:CtInvocationImpl@children[0].getName()" shape=ellipse]
66 [label="11:CtVirtualElement@typeName" shape=ellipse]
67 [label="11:CtLocalVariableImpl@final String typeName = children[0].getName()" shape=ellipse]
68 [label="13:CtFieldWriteImpl@m_aspectHandler" shape=ellipse]
69 [label="13:CtExecutableReferenceImpl@newInstance(java.lang.Class,java.lang.String)" shape=ellipse]
70 [label="13:CtVirtualElement@newInstance" shape=ellipse]
71 [label="13:CtFieldReadImpl@AspectHandler.class" shape=ellipse]
72 [label="13:CtVariableReadImpl@typeName" shape=ellipse]
73 [label="13:CtInvocationImpl@((AspectHandler) (newInstance(AspectHandler.class, typeName)))" shape=ellipse]
74 [label="13:CtTypeReferenceImpl@AspectHandler" shape=ellipse]
75 [label="13:CtAssignmentImpl@m_aspectHandler = ((AspectHandler) (newInstance(AspectHandler.class, typeName)))" shape=ellipse]
76 [label="12:CtBlockImpl@\{
    m_aspectHandler = ((AspectHandler) (newInstance(AspectHandler.class, typeName)));
\}" shape=ellipse]
77 [label="14:CtVirtualElement@e" shape=ellipse]
78 [label="14:CtTypeReferenceImpl@Exception" shape=ellipse]
79 [label="14:CtCatchVariableImpl@final Exception e" shape=ellipse]
80 [label="15:CtTypeReferenceImpl@String" shape=ellipse]
81 [label="15:CtExecutableReferenceImpl@getString(java.lang.String,java.lang.String)" shape=ellipse]
82 [label="15:CtVirtualElement@getString" shape=ellipse]
83 [label="15:CtTypeAccessImpl@REZ" shape=ellipse]
84 [label="15:CtLiteralImpl@\"facility.no-create.error\"" shape=ellipse]
85 [label="15:CtVariableReadImpl@typeName" shape=ellipse]
86 [label="15:CtInvocationImpl@REZ.getString(\"facility.no-create.error\", typeName)" shape=ellipse]
87 [label="15:CtVirtualElement@message" shape=ellipse]
88 [label="15:CtLocalVariableImpl@final String message = REZ.getString(\"facility.no-create.error\", typeName)" shape=ellipse]
89 [label="16:CtTypeReferenceImpl@ConfigurationException" shape=ellipse]
90 [label="16:CtVariableReadImpl@message" shape=ellipse]
91 [label="16:CtVariableReadImpl@e" shape=ellipse]
92 [label="16:CtConstructorCallImpl@new ConfigurationException(message, e)" shape=ellipse]
93 [label="16:CtThrowImpl@throw new ConfigurationException(message, e)" shape=ellipse]
94 [label="14:CtBlockImpl@\{
    final String message = REZ.getString(\"facility.no-create.error\", typeName);
    throw new ConfigurationException(message, e);
\}" shape=ellipse]
95 [label="14:CtCatchImpl@ catch (final Exception e) \{
    final String message = REZ.getString(\"facility.no-create.error\", typeName);
    throw new ConfigurationException(message, e);
\}" shape=ellipse]
96 [label="12:CtTryImpl@try \{
    m_aspectHandler = ((AspectHandler) (newInstance(AspectHandler.class, typeName)));
\} catch (final Exception e) \{
    final String message = REZ.getString(\"facility.no-create.error\", typeName);
    throw new ConfigurationException(message, e);
\}" shape=ellipse]
97 [label="18:CtExecutableReferenceImpl@configure(Configuration)" shape=ellipse]
98 [label="18:CtVirtualElement@configure" shape=ellipse]
99 [label="18:CtFieldReadImpl@m_aspectHandler" shape=ellipse]
100 [label="18:CtVariableReadImpl@children" shape=ellipse]
101 [label="18:CtLiteralImpl@0" shape=ellipse]
102 [label="18:CtArrayReadImpl@children[0]" shape=ellipse]
103 [label="18:CtInvocationImpl@configure(m_aspectHandler, children[0])" shape=ellipse]
104 [label="10:CtBlockImpl@\{
    final String typeName = children[0].getName();
    try \{
        m_aspectHandler = ((AspectHandler) (newInstance(AspectHandler.class, typeName)));
    \} catch (final Exception e) \{
        final String message = REZ.getString(\"facility.no-create.error\", typeName);
        throw new ConfigurationException(message, e);
    \}
    configure(m_aspectHandler, children[0]);
\}" shape=ellipse]
105 [label="20:CtTypeReferenceImpl@String" shape=ellipse]
106 [label="20:CtExecutableReferenceImpl@getString(java.lang.String)" shape=ellipse]
107 [label="20:CtVirtualElement@getString" shape=ellipse]
108 [label="20:CtTypeAccessImpl@REZ" shape=ellipse]
109 [label="20:CtLiteralImpl@\"facility.multi-element.error\"" shape=ellipse]
110 [label="20:CtInvocationImpl@REZ.getString(\"facility.multi-element.error\")" shape=ellipse]
111 [label="20:CtVirtualElement@message" shape=ellipse]
112 [label="20:CtLocalVariableImpl@final String message = REZ.getString(\"facility.multi-element.error\")" shape=ellipse]
113 [label="21:CtTypeReferenceImpl@ConfigurationException" shape=ellipse]
114 [label="21:CtVariableReadImpl@message" shape=ellipse]
115 [label="21:CtConstructorCallImpl@new ConfigurationException(message)" shape=ellipse]
116 [label="21:CtThrowImpl@throw new ConfigurationException(message)" shape=ellipse]
117 [label="19:CtBlockImpl@\{
    final String message = REZ.getString(\"facility.multi-element.error\");
    throw new ConfigurationException(message);
\}" shape=ellipse]
118 [label="10:CtIfImpl@if (1 == children.length) \{
    final String typeName = children[0].getName();
    try \{
        m_aspectHandler = ((AspectHandler) (newInstance(AspectHandler.class, typeName)));
    \} catch (final Exception e) \{
        final String message = REZ.getString(\"facility.no-create.error\", typeName);
        throw new ConfigurationException(message, e);
    \}
    configure(m_aspectHandler, children[0]);
\} else \{
    final String message = REZ.getString(\"facility.multi-element.error\");
    throw new ConfigurationException(message);
\}" shape=ellipse]
119 [label="2:CtBlockImpl@\{
    final String[] attributes = configuration.getAttributeNames();
    for (int i = 0; i < attributes.length; i++) \{
        final String name = attributes[i];
        final String value = configuration.getAttribute(name);
        configure(this, name, value);
    \}
    final Configuration[] children = configuration.getChildren();
    if (1 == children.length) \{
        final String typeName = children[0].getName();
        try \{
            m_aspectHandler = ((AspectHandler) (newInstance(AspectHandler.class, typeName)));
        \} catch (final Exception e) \{
            final String message = REZ.getString(\"facility.no-create.error\", typeName);
            throw new ConfigurationException(message, e);
        \}
        configure(m_aspectHandler, children[0]);
    \} else \{
        final String message = REZ.getString(\"facility.multi-element.error\");
        throw new ConfigurationException(message);
    \}
\}" shape=ellipse]
120 [label="2:CtMethodImpl@public void configure(final Configuration configuration) throws ConfigurationException \{
    final String[] attributes = configuration.getAttributeNames();
    for (int i = 0; i < attributes.length; i++) \{
        final String name = attributes[i];
        final String value = configuration.getAttribute(name);
        configure(this, name, value);
    \}
    final Configuration[] children = configuration.getChildren();
    if (1 == children.length) \{
        final String typeName = children[0].getName();
        try \{
            m_aspectHandler = ((AspectHandler) (newInstance(AspectHandler.class, typeName)));
        \} catch (final Exception e) \{
            final String message = REZ.getString(\"facility.no-create.error\", typeName);
            throw new ConfigurationException(message, e);
        \}
        configure(m_aspectHandler, children[0]);
    \} else \{
        final String message = REZ.getString(\"facility.multi-element.error\");
        throw new ConfigurationException(message);
    \}
\}" shape=ellipse]
121 [label="7:Update@UPDATE" shape=ellipse]
122 [label="7:CtInvocationImpl@configureAttribute(this, name, value)" shape=ellipse]
123 [label="18:Update@UPDATE" shape=ellipse]
124 [label="18:CtInvocationImpl@configureElement(m_aspectHandler, children[0])" shape=ellipse]
2 -> 3 [label="AST"];
6 -> 5 [label="AST"];
9 -> 11 [label="Data Dep"];
10 -> 8 [label="AST"];
10 -> 9 [label="AST"];
10 -> 7 [label="AST"];
11 -> 18 [label="Define-Use"];
11 -> 25 [label="Define-Use"];
11 -> 27 [label="Define-Use"];
12 -> 11 [label="AST"];
12 -> 6 [label="AST"];
12 -> 10 [label="AST"];
15 -> 17 [label="Define-Use"];
16 -> 15 [label="AST"];
16 -> 13 [label="AST"];
16 -> 14 [label="AST"];
18 -> 19 [label="AST"];
20 -> 18 [label="AST"];
21 -> 17 [label="AST"];
21 -> 20 [label="AST"];
21 -> 44 [label="Control Dep"];
21 -> 29 [label="Control Dep"];
21 -> 27 [label="Control Dep"];
21 -> 25 [label="Control Dep"];
21 -> 26 [label="Control Dep"];
21 -> 37 [label="Control Dep"];
21 -> 35 [label="Control Dep"];
21 -> 31 [label="Control Dep"];
21 -> 33 [label="Control Dep"];
21 -> 34 [label="Control Dep"];
21 -> 43 [label="Control Dep"];
21 -> 38 [label="Control Dep"];
21 -> 40 [label="Control Dep"];
21 -> 41 [label="Control Dep"];
21 -> 42 [label="Control Dep"];
22 -> 26 [label="Define-Use"];
23 -> 22 [label="AST"];
27 -> 25 [label="AST"];
27 -> 26 [label="AST"];
27 -> 28 [label="Data Dep"];
28 -> 34 [label="Define-Use"];
28 -> 41 [label="Define-Use"];
29 -> 28 [label="AST"];
29 -> 24 [label="AST"];
29 -> 27 [label="AST"];
33 -> 36 [label="Data Dep"];
34 -> 36 [label="Data Dep"];
35 -> 32 [label="AST"];
35 -> 33 [label="AST"];
35 -> 31 [label="AST"];
35 -> 34 [label="AST"];
36 -> 42 [label="Define-Use"];
37 -> 36 [label="AST"];
37 -> 30 [label="AST"];
37 -> 35 [label="AST"];
43 -> 39 [label="AST"];
43 -> 38 [label="AST"];
43 -> 40 [label="AST"];
43 -> 41 [label="AST"];
43 -> 42 [label="AST"];
43 -> 121 [label="Action"];
44 -> 29 [label="AST"];
44 -> 37 [label="AST"];
44 -> 43 [label="AST"];
45 -> 16 [label="AST"];
45 -> 21 [label="AST"];
45 -> 23 [label="AST"];
45 -> 44 [label="AST"];
47 -> 46 [label="AST"];
50 -> 52 [label="Data Dep"];
51 -> 49 [label="AST"];
51 -> 50 [label="AST"];
51 -> 48 [label="AST"];
52 -> 55 [label="Define-Use"];
52 -> 62 [label="Define-Use"];
52 -> 64 [label="Define-Use"];
52 -> 100 [label="Define-Use"];
52 -> 102 [label="Define-Use"];
53 -> 52 [label="AST"];
53 -> 47 [label="AST"];
53 -> 51 [label="AST"];
55 -> 56 [label="AST"];
57 -> 55 [label="AST"];
58 -> 54 [label="AST"];
58 -> 57 [label="AST"];
58 -> 104 [label="Control Dep"];
58 -> 67 [label="Control Dep"];
58 -> 65 [label="Control Dep"];
58 -> 60 [label="Control Dep"];
58 -> 64 [label="Control Dep"];
58 -> 62 [label="Control Dep"];
58 -> 63 [label="Control Dep"];
58 -> 96 [label="Control Dep"];
58 -> 76 [label="Control Dep"];
58 -> 75 [label="Control Dep"];
58 -> 68 [label="Control Dep"];
58 -> 73 [label="Control Dep"];
58 -> 69 [label="Control Dep"];
58 -> 71 [label="Control Dep"];
58 -> 72 [label="Control Dep"];
58 -> 95 [label="Control Dep"];
58 -> 79 [label="Control Dep"];
58 -> 103 [label="Control Dep"];
58 -> 97 [label="Control Dep"];
58 -> 99 [label="Control Dep"];
58 -> 102 [label="Control Dep"];
58 -> 100 [label="Control Dep"];
58 -> 101 [label="Control Dep"];
58 -> 117 [label="Control Dep"];
58 -> 112 [label="Control Dep"];
58 -> 110 [label="Control Dep"];
58 -> 106 [label="Control Dep"];
58 -> 108 [label="Control Dep"];
58 -> 109 [label="Control Dep"];
58 -> 116 [label="Control Dep"];
58 -> 115 [label="Control Dep"];
58 -> 114 [label="Control Dep"];
64 -> 62 [label="AST"];
64 -> 63 [label="AST"];
64 -> 66 [label="Data Dep"];
65 -> 61 [label="AST"];
65 -> 64 [label="AST"];
65 -> 60 [label="AST"];
66 -> 72 [label="Define-Use"];
66 -> 85 [label="Define-Use"];
67 -> 66 [label="AST"];
67 -> 59 [label="AST"];
67 -> 65 [label="AST"];
68 -> 99 [label="Define-Use"];
71 -> 68 [label="Data Dep"];
72 -> 68 [label="Data Dep"];
73 -> 70 [label="AST"];
73 -> 74 [label="AST"];
73 -> 69 [label="AST"];
73 -> 71 [label="AST"];
73 -> 72 [label="AST"];
75 -> 68 [label="AST"];
75 -> 73 [label="AST"];
76 -> 75 [label="AST"];
77 -> 91 [label="Define-Use"];
79 -> 77 [label="AST"];
79 -> 78 [label="AST"];
79 -> 94 [label="Control Dep"];
79 -> 88 [label="Control Dep"];
79 -> 86 [label="Control Dep"];
79 -> 81 [label="Control Dep"];
79 -> 83 [label="Control Dep"];
79 -> 84 [label="Control Dep"];
79 -> 85 [label="Control Dep"];
79 -> 93 [label="Control Dep"];
79 -> 92 [label="Control Dep"];
79 -> 90 [label="Control Dep"];
79 -> 91 [label="Control Dep"];
85 -> 87 [label="Data Dep"];
86 -> 82 [label="AST"];
86 -> 83 [label="AST"];
86 -> 81 [label="AST"];
86 -> 84 [label="AST"];
86 -> 85 [label="AST"];
87 -> 90 [label="Define-Use"];
87 -> 114 [label="Define-Use"];
88 -> 87 [label="AST"];
88 -> 80 [label="AST"];
88 -> 86 [label="AST"];
92 -> 90 [label="AST"];
92 -> 91 [label="AST"];
93 -> 92 [label="AST"];
94 -> 88 [label="AST"];
94 -> 93 [label="AST"];
95 -> 79 [label="AST"];
95 -> 94 [label="AST"];
96 -> 76 [label="AST"];
96 -> 95 [label="AST"];
102 -> 100 [label="AST"];
102 -> 101 [label="AST"];
103 -> 98 [label="AST"];
103 -> 97 [label="AST"];
103 -> 99 [label="AST"];
103 -> 102 [label="AST"];
103 -> 123 [label="Action"];
104 -> 67 [label="AST"];
104 -> 96 [label="AST"];
104 -> 103 [label="AST"];
110 -> 107 [label="AST"];
110 -> 108 [label="AST"];
110 -> 106 [label="AST"];
110 -> 109 [label="AST"];
111 -> 114 [label="Define-Use"];
112 -> 111 [label="AST"];
112 -> 105 [label="AST"];
112 -> 110 [label="AST"];
115 -> 114 [label="AST"];
116 -> 115 [label="AST"];
117 -> 112 [label="AST"];
117 -> 116 [label="AST"];
118 -> 58 [label="AST"];
118 -> 104 [label="AST"];
118 -> 117 [label="AST"];
119 -> 12 [label="AST"];
119 -> 45 [label="AST"];
119 -> 53 [label="AST"];
119 -> 118 [label="AST"];
120 -> 1 [label="AST"];
120 -> 0 [label="AST"];
120 -> 2 [label="AST"];
120 -> 4 [label="AST"];
120 -> 119 [label="AST"];
121 -> 122 [label="Action"];
123 -> 124 [label="Action"];
}