digraph "append#?,Path" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@append" shape=ellipse]
2 [label="2:CtParameterImpl@Path other" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@Path" shape=ellipse]
4 [label="3:CtVirtualElement@String[]" shape=ellipse]
5 [label="3:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
6 [label="3:CtExecutableReferenceImpl@list()" shape=ellipse]
7 [label="3:CtVirtualElement@list" shape=ellipse]
8 [label="3:CtVariableReadImpl@other" shape=ellipse]
9 [label="3:CtInvocationImpl@other.list()" shape=ellipse]
10 [label="3:CtVirtualElement@l" shape=ellipse]
11 [label="3:CtLocalVariableImpl@String[] l = other.list()" shape=ellipse]
12 [label="4:CtTypeReferenceImpl@int" shape=ellipse]
13 [label="4:CtLiteralImpl@0" shape=ellipse]
14 [label="4:CtVirtualElement@i" shape=ellipse]
15 [label="4:CtLocalVariableImpl@int i = 0" shape=ellipse]
16 [label="4:CtVariableReadImpl@i" shape=ellipse]
17 [label="4:CtVariableReadImpl@l" shape=ellipse]
18 [label="4:CtLocalVariableReferenceImpl@l" shape=ellipse]
19 [label="4:CtFieldReadImpl@l.length" shape=ellipse]
20 [label="4:CtBinaryOperatorImpl@i < l.length" shape=ellipse]
21 [label="4:CtVariableWriteImpl@i" shape=ellipse]
22 [label="4:CtUnaryOperatorImpl@i++" shape=ellipse]
23 [label="5:CtExecutableReferenceImpl@indexOf(java.lang.String)" shape=ellipse]
24 [label="5:CtVirtualElement@indexOf" shape=ellipse]
25 [label="5:CtFieldReadImpl@elements" shape=ellipse]
26 [label="5:CtVariableReadImpl@l" shape=ellipse]
27 [label="5:CtVariableReadImpl@i" shape=ellipse]
28 [label="5:CtArrayReadImpl@l[i]" shape=ellipse]
29 [label="5:CtInvocationImpl@elements.indexOf(l[i])" shape=ellipse]
30 [label="5:CtLiteralImpl@1" shape=ellipse]
31 [label="5:CtUnaryOperatorImpl@(-1)" shape=ellipse]
32 [label="5:CtBinaryOperatorImpl@elements.indexOf(l[i]) == (-1)" shape=ellipse]
33 [label="6:CtExecutableReferenceImpl@addElement(java.lang.String)" shape=ellipse]
34 [label="6:CtVirtualElement@addElement" shape=ellipse]
35 [label="6:CtFieldReadImpl@elements" shape=ellipse]
36 [label="6:CtVariableReadImpl@l" shape=ellipse]
37 [label="6:CtVariableReadImpl@i" shape=ellipse]
38 [label="6:CtArrayReadImpl@l[i]" shape=ellipse]
39 [label="6:CtInvocationImpl@elements.addElement(l[i])" shape=ellipse]
40 [label="5:CtBlockImpl@\{
    elements.addElement(l[i]);
\}" shape=ellipse]
41 [label="5:CtIfImpl@if (elements.indexOf(l[i]) == (-1)) \{
    elements.addElement(l[i]);
\}" shape=ellipse]
42 [label="4:CtBlockImpl@\{
    if (elements.indexOf(l[i]) == (-1)) \{
        elements.addElement(l[i]);
    \}
\}" shape=ellipse]
43 [label="4:CtForImpl@for (int i = 0; i < l.length; i++) \{
    if (elements.indexOf(l[i]) == (-1)) \{
        elements.addElement(l[i]);
    \}
\}" shape=ellipse]
44 [label="2:CtBlockImpl@\{
    String[] l = other.list();
    for (int i = 0; i < l.length; i++) \{
        if (elements.indexOf(l[i]) == (-1)) \{
            elements.addElement(l[i]);
        \}
    \}
\}" shape=ellipse]
45 [label="2:CtMethodImpl@public void append(Path other) \{
    String[] l = other.list();
    for (int i = 0; i < l.length; i++) \{
        if (elements.indexOf(l[i]) == (-1)) \{
            elements.addElement(l[i]);
        \}
    \}
\}" shape=ellipse]
46 [label="3:Insert@INSERT" shape=ellipse]
47 [label="3:CtIfImpl@if (other == null) \{
    return;
\}" shape=ellipse]
2 -> 3 [label="AST"];
5 -> 4 [label="AST"];
8 -> 10 [label="Data Dep"];
9 -> 7 [label="AST"];
9 -> 8 [label="AST"];
9 -> 6 [label="AST"];
10 -> 17 [label="Define-Use"];
10 -> 26 [label="Define-Use"];
10 -> 28 [label="Define-Use"];
10 -> 36 [label="Define-Use"];
10 -> 38 [label="Define-Use"];
11 -> 10 [label="AST"];
11 -> 5 [label="AST"];
11 -> 9 [label="AST"];
14 -> 16 [label="Define-Use"];
15 -> 14 [label="AST"];
15 -> 12 [label="AST"];
15 -> 13 [label="AST"];
17 -> 18 [label="AST"];
19 -> 17 [label="AST"];
20 -> 16 [label="AST"];
20 -> 19 [label="AST"];
20 -> 42 [label="Control Dep"];
20 -> 41 [label="Control Dep"];
20 -> 32 [label="Control Dep"];
20 -> 29 [label="Control Dep"];
20 -> 23 [label="Control Dep"];
20 -> 25 [label="Control Dep"];
20 -> 28 [label="Control Dep"];
20 -> 26 [label="Control Dep"];
20 -> 27 [label="Control Dep"];
20 -> 31 [label="Control Dep"];
20 -> 30 [label="Control Dep"];
21 -> 27 [label="Define-Use"];
21 -> 37 [label="Define-Use"];
22 -> 21 [label="AST"];
28 -> 26 [label="AST"];
28 -> 27 [label="AST"];
29 -> 24 [label="AST"];
29 -> 25 [label="AST"];
29 -> 23 [label="AST"];
29 -> 28 [label="AST"];
31 -> 30 [label="AST"];
32 -> 29 [label="AST"];
32 -> 31 [label="AST"];
32 -> 40 [label="Control Dep"];
32 -> 39 [label="Control Dep"];
32 -> 33 [label="Control Dep"];
32 -> 35 [label="Control Dep"];
32 -> 38 [label="Control Dep"];
32 -> 36 [label="Control Dep"];
32 -> 37 [label="Control Dep"];
38 -> 36 [label="AST"];
38 -> 37 [label="AST"];
39 -> 34 [label="AST"];
39 -> 35 [label="AST"];
39 -> 33 [label="AST"];
39 -> 38 [label="AST"];
40 -> 39 [label="AST"];
41 -> 32 [label="AST"];
41 -> 40 [label="AST"];
42 -> 41 [label="AST"];
43 -> 15 [label="AST"];
43 -> 20 [label="AST"];
43 -> 22 [label="AST"];
43 -> 42 [label="AST"];
44 -> 11 [label="AST"];
44 -> 43 [label="AST"];
45 -> 1 [label="AST"];
45 -> 0 [label="AST"];
45 -> 2 [label="AST"];
45 -> 44 [label="AST"];
45 -> 46 [label="Action"];
46 -> 47 [label="Action"];
}