digraph "convert#?,String,String" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@convert" shape=ellipse]
2 [label="2:CtParameterImpl@String srcName" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
4 [label="2:CtParameterImpl@String destName" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
6 [label="2:CtTypeReferenceImpl@BuildException" shape=ellipse]
7 [label="3:CtTypeReferenceImpl@File" shape=ellipse]
8 [label="3:CtVirtualElement@srcFile" shape=ellipse]
9 [label="3:CtLocalVariableImpl@File srcFile" shape=ellipse]
10 [label="4:CtTypeReferenceImpl@File" shape=ellipse]
11 [label="4:CtVirtualElement@destFile" shape=ellipse]
12 [label="4:CtLocalVariableImpl@File destFile" shape=ellipse]
13 [label="5:CtVariableWriteImpl@srcFile" shape=ellipse]
14 [label="5:CtTypeReferenceImpl@File" shape=ellipse]
15 [label="5:CtFieldReadImpl@srcDir" shape=ellipse]
16 [label="5:CtVariableReadImpl@srcName" shape=ellipse]
17 [label="5:CtConstructorCallImpl@new File(srcDir, srcName)" shape=ellipse]
18 [label="5:CtAssignmentImpl@srcFile = new File(srcDir, srcName)" shape=ellipse]
19 [label="6:CtVariableWriteImpl@destFile" shape=ellipse]
20 [label="6:CtTypeReferenceImpl@File" shape=ellipse]
21 [label="6:CtFieldReadImpl@destDir" shape=ellipse]
22 [label="6:CtVariableReadImpl@destName" shape=ellipse]
23 [label="6:CtConstructorCallImpl@new File(destDir, destName)" shape=ellipse]
24 [label="6:CtAssignmentImpl@destFile = new File(destDir, destName)" shape=ellipse]
25 [label="7:CtExecutableReferenceImpl@equals(File)" shape=ellipse]
26 [label="7:CtVirtualElement@equals" shape=ellipse]
27 [label="7:CtVariableReadImpl@srcFile" shape=ellipse]
28 [label="7:CtVariableReadImpl@destFile" shape=ellipse]
29 [label="7:CtInvocationImpl@srcFile.equals(destFile)" shape=ellipse]
30 [label="8:CtTypeReferenceImpl@BuildException" shape=ellipse]
31 [label="8:CtLiteralImpl@\"file \"" shape=ellipse]
32 [label="8:CtVariableReadImpl@srcFile" shape=ellipse]
33 [label="8:CtBinaryOperatorImpl@(\"file \" + srcFile)" shape=ellipse]
34 [label="8:CtLiteralImpl@\" would overwrite its self\"" shape=ellipse]
35 [label="8:CtBinaryOperatorImpl@(\"file \" + srcFile) + \" would overwrite its self\"" shape=ellipse]
36 [label="8:CtConstructorCallImpl@new BuildException((\"file \" + srcFile) + \" would overwrite its self\")" shape=ellipse]
37 [label="8:CtThrowImpl@throw new BuildException((\"file \" + srcFile) + \" would overwrite its self\")" shape=ellipse]
38 [label="7:CtBlockImpl@\{
    throw new BuildException((\"file \" + srcFile) + \" would overwrite its self\");
\}" shape=ellipse]
39 [label="7:CtIfImpl@if (srcFile.equals(destFile)) \{
    throw new BuildException((\"file \" + srcFile) + \" would overwrite its self\");
\}" shape=ellipse]
40 [label="10:CtTypeReferenceImpl@String" shape=ellipse]
41 [label="10:CtExecutableReferenceImpl@getParent()" shape=ellipse]
42 [label="10:CtVirtualElement@getParent" shape=ellipse]
43 [label="10:CtVariableReadImpl@destFile" shape=ellipse]
44 [label="10:CtInvocationImpl@destFile.getParent()" shape=ellipse]
45 [label="10:CtVirtualElement@parentName" shape=ellipse]
46 [label="10:CtLocalVariableImpl@String parentName = destFile.getParent()" shape=ellipse]
47 [label="11:CtVariableReadImpl@parentName" shape=ellipse]
48 [label="11:CtLiteralImpl@null" shape=ellipse]
49 [label="11:CtBinaryOperatorImpl@parentName != null" shape=ellipse]
50 [label="12:CtTypeReferenceImpl@File" shape=ellipse]
51 [label="12:CtTypeReferenceImpl@File" shape=ellipse]
52 [label="12:CtVariableReadImpl@parentName" shape=ellipse]
53 [label="12:CtConstructorCallImpl@new File(parentName)" shape=ellipse]
54 [label="12:CtVirtualElement@parentFile" shape=ellipse]
55 [label="12:CtLocalVariableImpl@File parentFile = new File(parentName)" shape=ellipse]
56 [label="13:CtExecutableReferenceImpl@exists()" shape=ellipse]
57 [label="13:CtVirtualElement@exists" shape=ellipse]
58 [label="13:CtVariableReadImpl@parentFile" shape=ellipse]
59 [label="13:CtInvocationImpl@parentFile.exists()" shape=ellipse]
60 [label="13:CtUnaryOperatorImpl@(!parentFile.exists())" shape=ellipse]
61 [label="13:CtExecutableReferenceImpl@mkdirs()" shape=ellipse]
62 [label="13:CtVirtualElement@mkdirs" shape=ellipse]
63 [label="13:CtVariableReadImpl@parentFile" shape=ellipse]
64 [label="13:CtInvocationImpl@parentFile.mkdirs()" shape=ellipse]
65 [label="13:CtUnaryOperatorImpl@(!parentFile.mkdirs())" shape=ellipse]
66 [label="13:CtBinaryOperatorImpl@(!parentFile.exists()) && (!parentFile.mkdirs())" shape=ellipse]
67 [label="14:CtTypeReferenceImpl@BuildException" shape=ellipse]
68 [label="14:CtLiteralImpl@\"cannot create parent directory \"" shape=ellipse]
69 [label="14:CtVariableReadImpl@parentName" shape=ellipse]
70 [label="14:CtBinaryOperatorImpl@\"cannot create parent directory \" + parentName" shape=ellipse]
71 [label="14:CtConstructorCallImpl@new BuildException(\"cannot create parent directory \" + parentName)" shape=ellipse]
72 [label="14:CtThrowImpl@throw new BuildException(\"cannot create parent directory \" + parentName)" shape=ellipse]
73 [label="13:CtBlockImpl@\{
    throw new BuildException(\"cannot create parent directory \" + parentName);
\}" shape=ellipse]
74 [label="13:CtIfImpl@if ((!parentFile.exists()) && (!parentFile.mkdirs())) \{
    throw new BuildException(\"cannot create parent directory \" + parentName);
\}" shape=ellipse]
75 [label="11:CtBlockImpl@\{
    File parentFile = new File(parentName);
    if ((!parentFile.exists()) && (!parentFile.mkdirs())) \{
        throw new BuildException(\"cannot create parent directory \" + parentName);
    \}
\}" shape=ellipse]
76 [label="11:CtIfImpl@if (parentName != null) \{
    File parentFile = new File(parentName);
    if ((!parentFile.exists()) && (!parentFile.mkdirs())) \{
        throw new BuildException(\"cannot create parent directory \" + parentName);
    \}
\}" shape=ellipse]
77 [label="17:CtExecutableReferenceImpl@log(java.lang.String,<unknown>)" shape=ellipse]
78 [label="17:CtVirtualElement@log" shape=ellipse]
79 [label="17:CtLiteralImpl@\"converting \"" shape=ellipse]
80 [label="17:CtVariableReadImpl@srcName" shape=ellipse]
81 [label="17:CtBinaryOperatorImpl@\"converting \" + srcName" shape=ellipse]
82 [label="17:CtTypeAccessImpl@MSG_VERBOSE" shape=ellipse]
83 [label="17:CtInvocationImpl@log(\"converting \" + srcName, MSG_VERBOSE)" shape=ellipse]
84 [label="18:CtTypeReferenceImpl@Native2AsciiAdapter" shape=ellipse]
85 [label="19:CtExecutableReferenceImpl@getAdapter(PlaceHold)" shape=ellipse]
86 [label="19:CtVirtualElement@getAdapter" shape=ellipse]
87 [label="19:CtTypeAccessImpl@Native2AsciiAdapterFactory" shape=ellipse]
88 [label="19:CtExecutableReferenceImpl@getImplementation()" shape=ellipse]
89 [label="19:CtVirtualElement@getImplementation" shape=ellipse]
90 [label="19:CtFieldReadImpl@facade" shape=ellipse]
91 [label="19:CtInvocationImpl@facade.getImplementation()" shape=ellipse]
92 [label="19:CtThisAccessImpl@this" shape=ellipse]
93 [label="19:CtInvocationImpl@Native2AsciiAdapterFactory.getAdapter(facade.getImplementation(), this)" shape=ellipse]
94 [label="18:CtVirtualElement@ad" shape=ellipse]
95 [label="18:CtLocalVariableImpl@Native2AsciiAdapter ad = Native2AsciiAdapterFactory.getAdapter(facade.getImplementation(), this)" shape=ellipse]
96 [label="20:CtExecutableReferenceImpl@convert(PlaceHold,File,File)" shape=ellipse]
97 [label="20:CtVirtualElement@convert" shape=ellipse]
98 [label="20:CtVariableReadImpl@ad" shape=ellipse]
99 [label="20:CtThisAccessImpl@this" shape=ellipse]
100 [label="20:CtVariableReadImpl@srcFile" shape=ellipse]
101 [label="20:CtVariableReadImpl@destFile" shape=ellipse]
102 [label="20:CtInvocationImpl@ad.convert(this, srcFile, destFile)" shape=ellipse]
103 [label="20:CtUnaryOperatorImpl@!ad.convert(this, srcFile, destFile)" shape=ellipse]
104 [label="21:CtTypeReferenceImpl@BuildException" shape=ellipse]
105 [label="21:CtLiteralImpl@\"conversion failed\"" shape=ellipse]
106 [label="21:CtConstructorCallImpl@new BuildException(\"conversion failed\")" shape=ellipse]
107 [label="21:CtThrowImpl@throw new BuildException(\"conversion failed\")" shape=ellipse]
108 [label="20:CtBlockImpl@\{
    throw new BuildException(\"conversion failed\");
\}" shape=ellipse]
109 [label="20:CtIfImpl@if (!ad.convert(this, srcFile, destFile)) \{
    throw new BuildException(\"conversion failed\");
\}" shape=ellipse]
110 [label="2:CtBlockImpl@\{
    File srcFile;
    File destFile;
    srcFile = new File(srcDir, srcName);
    destFile = new File(destDir, destName);
    if (srcFile.equals(destFile)) \{
        throw new BuildException((\"file \" + srcFile) + \" would overwrite its self\");
    \}
    String parentName = destFile.getParent();
    if (parentName != null) \{
        File parentFile = new File(parentName);
        if ((!parentFile.exists()) && (!parentFile.mkdirs())) \{
            throw new BuildException(\"cannot create parent directory \" + parentName);
        \}
    \}
    log(\"converting \" + srcName, MSG_VERBOSE);
    Native2AsciiAdapter ad = Native2AsciiAdapterFactory.getAdapter(facade.getImplementation(), this);
    if (!ad.convert(this, srcFile, destFile)) \{
        throw new BuildException(\"conversion failed\");
    \}
\}" shape=ellipse]
111 [label="2:CtMethodImpl@private void convert(String srcName, String destName) throws BuildException \{
    File srcFile;
    File destFile;
    srcFile = new File(srcDir, srcName);
    destFile = new File(destDir, destName);
    if (srcFile.equals(destFile)) \{
        throw new BuildException((\"file \" + srcFile) + \" would overwrite its self\");
    \}
    String parentName = destFile.getParent();
    if (parentName != null) \{
        File parentFile = new File(parentName);
        if ((!parentFile.exists()) && (!parentFile.mkdirs())) \{
            throw new BuildException(\"cannot create parent directory \" + parentName);
        \}
    \}
    log(\"converting \" + srcName, MSG_VERBOSE);
    Native2AsciiAdapter ad = Native2AsciiAdapterFactory.getAdapter(facade.getImplementation(), this);
    if (!ad.convert(this, srcFile, destFile)) \{
        throw new BuildException(\"conversion failed\");
    \}
\}" shape=ellipse]
112 [label="20:Insert@INSERT" shape=ellipse]
113 [label="20:CtInvocationImpl@createImplementationClasspath()" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
9 -> 8 [label="AST"];
9 -> 7 [label="AST"];
12 -> 11 [label="AST"];
12 -> 10 [label="AST"];
13 -> 27 [label="Define-Use"];
13 -> 32 [label="Define-Use"];
13 -> 100 [label="Define-Use"];
15 -> 13 [label="Data Dep"];
16 -> 13 [label="Data Dep"];
17 -> 15 [label="AST"];
17 -> 16 [label="AST"];
18 -> 13 [label="AST"];
18 -> 17 [label="AST"];
19 -> 28 [label="Define-Use"];
19 -> 43 [label="Define-Use"];
19 -> 101 [label="Define-Use"];
21 -> 19 [label="Data Dep"];
22 -> 19 [label="Data Dep"];
23 -> 21 [label="AST"];
23 -> 22 [label="AST"];
24 -> 19 [label="AST"];
24 -> 23 [label="AST"];
29 -> 26 [label="AST"];
29 -> 27 [label="AST"];
29 -> 25 [label="AST"];
29 -> 28 [label="AST"];
29 -> 38 [label="Control Dep"];
29 -> 37 [label="Control Dep"];
29 -> 36 [label="Control Dep"];
29 -> 35 [label="Control Dep"];
29 -> 33 [label="Control Dep"];
29 -> 31 [label="Control Dep"];
29 -> 32 [label="Control Dep"];
29 -> 34 [label="Control Dep"];
33 -> 31 [label="AST"];
33 -> 32 [label="AST"];
35 -> 33 [label="AST"];
35 -> 34 [label="AST"];
36 -> 35 [label="AST"];
37 -> 36 [label="AST"];
38 -> 37 [label="AST"];
39 -> 29 [label="AST"];
39 -> 38 [label="AST"];
43 -> 45 [label="Data Dep"];
44 -> 42 [label="AST"];
44 -> 43 [label="AST"];
44 -> 41 [label="AST"];
45 -> 47 [label="Define-Use"];
45 -> 52 [label="Define-Use"];
45 -> 69 [label="Define-Use"];
46 -> 45 [label="AST"];
46 -> 40 [label="AST"];
46 -> 44 [label="AST"];
49 -> 47 [label="AST"];
49 -> 48 [label="AST"];
49 -> 75 [label="Control Dep"];
49 -> 55 [label="Control Dep"];
49 -> 53 [label="Control Dep"];
49 -> 52 [label="Control Dep"];
49 -> 74 [label="Control Dep"];
49 -> 66 [label="Control Dep"];
49 -> 60 [label="Control Dep"];
49 -> 59 [label="Control Dep"];
49 -> 56 [label="Control Dep"];
49 -> 58 [label="Control Dep"];
49 -> 65 [label="Control Dep"];
49 -> 64 [label="Control Dep"];
49 -> 61 [label="Control Dep"];
49 -> 63 [label="Control Dep"];
52 -> 54 [label="Data Dep"];
53 -> 52 [label="AST"];
54 -> 58 [label="Define-Use"];
54 -> 63 [label="Define-Use"];
55 -> 54 [label="AST"];
55 -> 50 [label="AST"];
55 -> 53 [label="AST"];
59 -> 57 [label="AST"];
59 -> 58 [label="AST"];
59 -> 56 [label="AST"];
60 -> 59 [label="AST"];
64 -> 62 [label="AST"];
64 -> 63 [label="AST"];
64 -> 61 [label="AST"];
65 -> 64 [label="AST"];
66 -> 60 [label="AST"];
66 -> 65 [label="AST"];
66 -> 73 [label="Control Dep"];
66 -> 72 [label="Control Dep"];
66 -> 71 [label="Control Dep"];
66 -> 70 [label="Control Dep"];
66 -> 68 [label="Control Dep"];
66 -> 69 [label="Control Dep"];
70 -> 68 [label="AST"];
70 -> 69 [label="AST"];
71 -> 70 [label="AST"];
72 -> 71 [label="AST"];
73 -> 72 [label="AST"];
74 -> 66 [label="AST"];
74 -> 73 [label="AST"];
75 -> 55 [label="AST"];
75 -> 74 [label="AST"];
76 -> 49 [label="AST"];
76 -> 75 [label="AST"];
81 -> 79 [label="AST"];
81 -> 80 [label="AST"];
83 -> 78 [label="AST"];
83 -> 77 [label="AST"];
83 -> 81 [label="AST"];
83 -> 82 [label="AST"];
90 -> 94 [label="Data Dep"];
91 -> 89 [label="AST"];
91 -> 90 [label="AST"];
91 -> 88 [label="AST"];
92 -> 94 [label="Data Dep"];
93 -> 86 [label="AST"];
93 -> 87 [label="AST"];
93 -> 85 [label="AST"];
93 -> 91 [label="AST"];
93 -> 92 [label="AST"];
93 -> 112 [label="Action"];
94 -> 98 [label="Define-Use"];
95 -> 94 [label="AST"];
95 -> 84 [label="AST"];
95 -> 93 [label="AST"];
102 -> 97 [label="AST"];
102 -> 98 [label="AST"];
102 -> 96 [label="AST"];
102 -> 99 [label="AST"];
102 -> 100 [label="AST"];
102 -> 101 [label="AST"];
103 -> 102 [label="AST"];
103 -> 108 [label="Control Dep"];
103 -> 107 [label="Control Dep"];
103 -> 106 [label="Control Dep"];
103 -> 105 [label="Control Dep"];
106 -> 105 [label="AST"];
107 -> 106 [label="AST"];
108 -> 107 [label="AST"];
109 -> 103 [label="AST"];
109 -> 108 [label="AST"];
110 -> 9 [label="AST"];
110 -> 12 [label="AST"];
110 -> 18 [label="AST"];
110 -> 24 [label="AST"];
110 -> 39 [label="AST"];
110 -> 46 [label="AST"];
110 -> 76 [label="AST"];
110 -> 83 [label="AST"];
110 -> 95 [label="AST"];
110 -> 109 [label="AST"];
111 -> 1 [label="AST"];
111 -> 0 [label="AST"];
111 -> 2 [label="AST"];
111 -> 4 [label="AST"];
111 -> 6 [label="AST"];
111 -> 110 [label="AST"];
112 -> 113 [label="Action"];
}