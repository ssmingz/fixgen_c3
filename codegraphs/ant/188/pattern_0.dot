digraph "Pattern" {
0 [label="testExcepting#?#3:UPDATE
testExceptingFork#?#3:UPDATE" shape=ellipse]
1 [label="testExcepting#?#3:expectLogContaining(\"testExcepting\", \"Exception raised inside called program\")
testExceptingFork#?#3:expectLogContaining(\"testExceptingFork\", \"Java Result:\")" shape=ellipse]
2 [label="testExcepting#?#2:\{
    expectLogContaining(\"testExcepting\", \"Exception raised inside called program\");
\}
testExceptingFork#?#2:\{
    expectLogContaining(\"testExceptingFork\", \"Java Result:\");
\}" shape=ellipse]
3 [label="testExcepting#?#2:public void testExcepting() \{
    expectLogContaining(\"testExcepting\", \"Exception raised inside called program\");
\}
testExceptingFork#?#2:public void testExceptingFork() \{
    expectLogContaining(\"testExceptingFork\", \"Java Result:\");
\}" shape=ellipse]
4 [label="testExcepting#?#3:expectLogContaining
testExceptingFork#?#3:expectLogContaining" shape=ellipse]
5 [label="testExcepting#?#-1:
testExceptingFork#?#-1:" shape=ellipse]
6 [label="testExcepting#?#-1:PlaceHold
testExceptingFork#?#-1:PlaceHold" shape=ellipse]
7 [label="testExcepting#?#-1:PlaceHold
testExceptingFork#?#-1:PlaceHold" shape=ellipse]
8 [label="testExcepting#?#3:expectLogContaining(java.lang.String,java.lang.String)
testExceptingFork#?#3:expectLogContaining(java.lang.String,java.lang.String)" shape=ellipse]
9 [label="testExcepting#?#-1:String
testExceptingFork#?#-1:String" shape=ellipse]
10 [label="testExcepting#?#-1:String
testExceptingFork#?#-1:String" shape=ellipse]
11 [label="testExcepting#?#3:\"testExcepting\"
testExceptingFork#?#3:\"testExceptingFork\"" shape=ellipse]
12 [label="testExcepting#?#-1:String
testExceptingFork#?#-1:String" shape=ellipse]
13 [label="testExcepting#?#3:\"Exception raised inside called program\"
testExceptingFork#?#3:\"Java Result:\"" shape=ellipse]
14 [label="testExcepting#?#-1:String
testExceptingFork#?#-1:String" shape=ellipse]
15 [label="testExcepting#?#5:assertContains(\"Exception raised inside called program\", buildRule.getLog())
testExceptingFork#?#5:assertContains(\"Java Result:\", buildRule.getLog())" shape=ellipse]
0 -> 15 [label="Action:2"];
1 -> 0 [label="Action:2"];
1 -> 4 [label="AST:2"];
1 -> 5 [label="AST:2"];
1 -> 8 [label="AST:2"];
1 -> 11 [label="AST:2"];
1 -> 13 [label="AST:2"];
2 -> 1 [label="AST:2"];
3 -> 2 [label="AST:2"];
5 -> 6 [label="AST:2"];
5 -> 7 [label="AST:2"];
8 -> 9 [label="AST:2"];
8 -> 10 [label="AST:2"];
11 -> 12 [label="AST:2"];
13 -> 14 [label="AST:2"];
}