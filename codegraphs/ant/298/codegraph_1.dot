digraph "getResourcesToAdd#?,FileSet[],File,boolean" {
0 [label="2:CtTypeReferenceImpl@ArchiveState" shape=ellipse]
1 [label="2:CtVirtualElement@getResourcesToAdd" shape=ellipse]
2 [label="2:CtParameterImpl@FileSet[] filesets" shape=ellipse]
3 [label="2:CtArrayTypeReferenceImpl@FileSet[]" shape=ellipse]
4 [label="2:CtParameterImpl@File zipFile" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@File" shape=ellipse]
6 [label="2:CtParameterImpl@boolean needsUpdate" shape=ellipse]
7 [label="2:CtTypeReferenceImpl@boolean" shape=ellipse]
8 [label="3:CtTypeReferenceImpl@BuildException" shape=ellipse]
9 [label="4:CtVirtualElement@Resource[][]" shape=ellipse]
10 [label="4:CtArrayTypeReferenceImpl@Resource[][]" shape=ellipse]
11 [label="4:CtExecutableReferenceImpl@grabResources(<unknown>)" shape=ellipse]
12 [label="4:CtVirtualElement@grabResources" shape=ellipse]
13 [label="4:CtVariableReadImpl@filesets" shape=ellipse]
14 [label="4:CtInvocationImpl@grabResources(filesets)" shape=ellipse]
15 [label="4:CtVirtualElement@initialResources" shape=ellipse]
16 [label="4:CtLocalVariableImpl@Resource[][] initialResources = grabResources(filesets)" shape=ellipse]
17 [label="5:CtExecutableReferenceImpl@isEmpty(<unknown>)" shape=ellipse]
18 [label="5:CtVirtualElement@isEmpty" shape=ellipse]
19 [label="5:CtVariableReadImpl@initialResources" shape=ellipse]
20 [label="5:CtInvocationImpl@isEmpty(initialResources)" shape=ellipse]
21 [label="6:CtVariableReadImpl@needsUpdate" shape=ellipse]
22 [label="6:CtFieldReadImpl@doUpdate" shape=ellipse]
23 [label="6:CtBinaryOperatorImpl@needsUpdate && doUpdate" shape=ellipse]
24 [label="7:CtTypeReferenceImpl@ArchiveState" shape=ellipse]
25 [label="7:CtLiteralImpl@true" shape=ellipse]
26 [label="7:CtVariableReadImpl@initialResources" shape=ellipse]
27 [label="7:CtConstructorCallImpl@new ArchiveState(true, initialResources)" shape=ellipse]
28 [label="7:CtReturnImpl@return new ArchiveState(true, initialResources)" shape=ellipse]
29 [label="6:CtBlockImpl@\{
    return new ArchiveState(true, initialResources);
\}" shape=ellipse]
30 [label="6:CtIfImpl@if (needsUpdate && doUpdate) \{
    return new ArchiveState(true, initialResources);
\}" shape=ellipse]
31 [label="9:CtExecutableReferenceImpl@equals(java.lang.String)" shape=ellipse]
32 [label="9:CtVirtualElement@equals" shape=ellipse]
33 [label="9:CtFieldReadImpl@emptyBehavior" shape=ellipse]
34 [label="9:CtLiteralImpl@\"skip\"" shape=ellipse]
35 [label="9:CtInvocationImpl@emptyBehavior.equals(\"skip\")" shape=ellipse]
36 [label="10:CtFieldReadImpl@doUpdate" shape=ellipse]
37 [label="11:CtExecutableReferenceImpl@logOnFirstPass(<unknown>,<unknown>)" shape=ellipse]
38 [label="11:CtVirtualElement@logOnFirstPass" shape=ellipse]
39 [label="12:CtFieldReadImpl@archiveType" shape=ellipse]
40 [label="12:CtLiteralImpl@\" archive \"" shape=ellipse]
41 [label="12:CtBinaryOperatorImpl@(archiveType + \" archive \")" shape=ellipse]
42 [label="12:CtVariableReadImpl@zipFile" shape=ellipse]
43 [label="12:CtBinaryOperatorImpl@((archiveType + \" archive \") + zipFile)" shape=ellipse]
44 [label="12:CtLiteralImpl@\" not updated because no new files were\"" shape=ellipse]
45 [label="12:CtBinaryOperatorImpl@(((archiveType + \" archive \") + zipFile) + \" not updated because no new files were\")" shape=ellipse]
46 [label="13:CtLiteralImpl@\" included.\"" shape=ellipse]
47 [label="12:CtBinaryOperatorImpl@(((archiveType + \" archive \") + zipFile) + \" not updated because no new files were\") + \" included.\"" shape=ellipse]
48 [label="14:CtTypeAccessImpl@MSG_VERBOSE" shape=ellipse]
49 [label="11:CtInvocationImpl@logOnFirstPass((((archiveType + \" archive \") + zipFile) + \" not updated because no new files were\") + \" included.\", MSG_VERBOSE)" shape=ellipse]
50 [label="10:CtBlockImpl@\{
    logOnFirstPass((((archiveType + \" archive \") + zipFile) + \" not updated because no new files were\") + \" included.\", MSG_VERBOSE);
\}" shape=ellipse]
51 [label="16:CtExecutableReferenceImpl@logOnFirstPass(<unknown>,<unknown>)" shape=ellipse]
52 [label="16:CtVirtualElement@logOnFirstPass" shape=ellipse]
53 [label="17:CtLiteralImpl@\"Warning: skipping \"" shape=ellipse]
54 [label="17:CtFieldReadImpl@archiveType" shape=ellipse]
55 [label="17:CtBinaryOperatorImpl@(\"Warning: skipping \" + archiveType)" shape=ellipse]
56 [label="17:CtLiteralImpl@\" archive \"" shape=ellipse]
57 [label="17:CtBinaryOperatorImpl@((\"Warning: skipping \" + archiveType) + \" archive \")" shape=ellipse]
58 [label="17:CtVariableReadImpl@zipFile" shape=ellipse]
59 [label="17:CtBinaryOperatorImpl@(((\"Warning: skipping \" + archiveType) + \" archive \") + zipFile)" shape=ellipse]
60 [label="18:CtLiteralImpl@\" because no files were included.\"" shape=ellipse]
61 [label="17:CtBinaryOperatorImpl@(((\"Warning: skipping \" + archiveType) + \" archive \") + zipFile) + \" because no files were included.\"" shape=ellipse]
62 [label="19:CtTypeAccessImpl@MSG_WARN" shape=ellipse]
63 [label="16:CtInvocationImpl@logOnFirstPass((((\"Warning: skipping \" + archiveType) + \" archive \") + zipFile) + \" because no files were included.\", MSG_WARN)" shape=ellipse]
64 [label="15:CtBlockImpl@\{
    logOnFirstPass((((\"Warning: skipping \" + archiveType) + \" archive \") + zipFile) + \" because no files were included.\", MSG_WARN);
\}" shape=ellipse]
65 [label="10:CtIfImpl@if (doUpdate) \{
    logOnFirstPass((((archiveType + \" archive \") + zipFile) + \" not updated because no new files were\") + \" included.\", MSG_VERBOSE);
\} else \{
    logOnFirstPass((((\"Warning: skipping \" + archiveType) + \" archive \") + zipFile) + \" because no files were included.\", MSG_WARN);
\}" shape=ellipse]
66 [label="9:CtBlockImpl@\{
    if (doUpdate) \{
        logOnFirstPass((((archiveType + \" archive \") + zipFile) + \" not updated because no new files were\") + \" included.\", MSG_VERBOSE);
    \} else \{
        logOnFirstPass((((\"Warning: skipping \" + archiveType) + \" archive \") + zipFile) + \" because no files were included.\", MSG_WARN);
    \}
\}" shape=ellipse]
67 [label="21:CtExecutableReferenceImpl@equals(java.lang.String)" shape=ellipse]
68 [label="21:CtVirtualElement@equals" shape=ellipse]
69 [label="21:CtFieldReadImpl@emptyBehavior" shape=ellipse]
70 [label="21:CtLiteralImpl@\"fail\"" shape=ellipse]
71 [label="21:CtInvocationImpl@emptyBehavior.equals(\"fail\")" shape=ellipse]
72 [label="22:CtTypeReferenceImpl@BuildException" shape=ellipse]
73 [label="23:CtLiteralImpl@\"Cannot create \"" shape=ellipse]
74 [label="23:CtFieldReadImpl@archiveType" shape=ellipse]
75 [label="23:CtBinaryOperatorImpl@(\"Cannot create \" + archiveType)" shape=ellipse]
76 [label="23:CtLiteralImpl@\" archive \"" shape=ellipse]
77 [label="23:CtBinaryOperatorImpl@((\"Cannot create \" + archiveType) + \" archive \")" shape=ellipse]
78 [label="23:CtVariableReadImpl@zipFile" shape=ellipse]
79 [label="23:CtBinaryOperatorImpl@(((\"Cannot create \" + archiveType) + \" archive \") + zipFile)" shape=ellipse]
80 [label="24:CtLiteralImpl@\": no files were included.\"" shape=ellipse]
81 [label="23:CtBinaryOperatorImpl@(((\"Cannot create \" + archiveType) + \" archive \") + zipFile) + \": no files were included.\"" shape=ellipse]
82 [label="25:CtExecutableReferenceImpl@getLocation()" shape=ellipse]
83 [label="25:CtVirtualElement@getLocation" shape=ellipse]
84 [label="25:CtInvocationImpl@getLocation()" shape=ellipse]
85 [label="22:CtConstructorCallImpl@new BuildException((((\"Cannot create \" + archiveType) + \" archive \") + zipFile) + \": no files were included.\", getLocation())" shape=ellipse]
86 [label="22:CtThrowImpl@throw new BuildException((((\"Cannot create \" + archiveType) + \" archive \") + zipFile) + \": no files were included.\", getLocation())" shape=ellipse]
87 [label="21:CtBlockImpl@\{
    throw new BuildException((((\"Cannot create \" + archiveType) + \" archive \") + zipFile) + \": no files were included.\", getLocation());
\}" shape=ellipse]
88 [label="26:CtExecutableReferenceImpl@exists()" shape=ellipse]
89 [label="26:CtVirtualElement@exists" shape=ellipse]
90 [label="26:CtVariableReadImpl@zipFile" shape=ellipse]
91 [label="26:CtInvocationImpl@zipFile.exists()" shape=ellipse]
92 [label="26:CtUnaryOperatorImpl@!zipFile.exists()" shape=ellipse]
93 [label="27:CtVariableWriteImpl@needsUpdate" shape=ellipse]
94 [label="27:CtLiteralImpl@true" shape=ellipse]
95 [label="27:CtAssignmentImpl@needsUpdate = true" shape=ellipse]
96 [label="26:CtBlockImpl@\{
    needsUpdate = true;
\}" shape=ellipse]
97 [label="26:CtIfImpl@if (!zipFile.exists()) \{
    needsUpdate = true;
\}" shape=ellipse]
98 [label="26:CtBlockImpl@
    if (!zipFile.exists()) \{
        needsUpdate = true;
    \}
" shape=ellipse]
99 [label="21:CtIfImpl@if (emptyBehavior.equals(\"fail\")) \{
    throw new BuildException((((\"Cannot create \" + archiveType) + \" archive \") + zipFile) + \": no files were included.\", getLocation());
\} else if (!zipFile.exists()) \{
    needsUpdate = true;
\}" shape=ellipse]
100 [label="21:CtBlockImpl@
    if (emptyBehavior.equals(\"fail\")) \{
        throw new BuildException((((\"Cannot create \" + archiveType) + \" archive \") + zipFile) + \": no files were included.\", getLocation());
    \} else if (!zipFile.exists()) \{
        needsUpdate = true;
    \}
" shape=ellipse]
101 [label="9:CtIfImpl@if (emptyBehavior.equals(\"skip\")) \{
    if (doUpdate) \{
        logOnFirstPass((((archiveType + \" archive \") + zipFile) + \" not updated because no new files were\") + \" included.\", MSG_VERBOSE);
    \} else \{
        logOnFirstPass((((\"Warning: skipping \" + archiveType) + \" archive \") + zipFile) + \" because no files were included.\", MSG_WARN);
    \}
\} else if (emptyBehavior.equals(\"fail\")) \{
    throw new BuildException((((\"Cannot create \" + archiveType) + \" archive \") + zipFile) + \": no files were included.\", getLocation());
\} else if (!zipFile.exists()) \{
    needsUpdate = true;
\}" shape=ellipse]
102 [label="29:CtTypeReferenceImpl@ArchiveState" shape=ellipse]
103 [label="29:CtVariableReadImpl@needsUpdate" shape=ellipse]
104 [label="29:CtVariableReadImpl@initialResources" shape=ellipse]
105 [label="29:CtConstructorCallImpl@new ArchiveState(needsUpdate, initialResources)" shape=ellipse]
106 [label="29:CtReturnImpl@return new ArchiveState(needsUpdate, initialResources)" shape=ellipse]
107 [label="5:CtBlockImpl@\{
    if (needsUpdate && doUpdate) \{
        return new ArchiveState(true, initialResources);
    \}
    if (emptyBehavior.equals(\"skip\")) \{
        if (doUpdate) \{
            logOnFirstPass((((archiveType + \" archive \") + zipFile) + \" not updated because no new files were\") + \" included.\", MSG_VERBOSE);
        \} else \{
            logOnFirstPass((((\"Warning: skipping \" + archiveType) + \" archive \") + zipFile) + \" because no files were included.\", MSG_WARN);
        \}
    \} else if (emptyBehavior.equals(\"fail\")) \{
        throw new BuildException((((\"Cannot create \" + archiveType) + \" archive \") + zipFile) + \": no files were included.\", getLocation());
    \} else if (!zipFile.exists()) \{
        needsUpdate = true;
    \}
    return new ArchiveState(needsUpdate, initialResources);
\}" shape=ellipse]
108 [label="5:CtIfImpl@if (isEmpty(initialResources)) \{
    if (needsUpdate && doUpdate) \{
        return new ArchiveState(true, initialResources);
    \}
    if (emptyBehavior.equals(\"skip\")) \{
        if (doUpdate) \{
            logOnFirstPass((((archiveType + \" archive \") + zipFile) + \" not updated because no new files were\") + \" included.\", MSG_VERBOSE);
        \} else \{
            logOnFirstPass((((\"Warning: skipping \" + archiveType) + \" archive \") + zipFile) + \" because no files were included.\", MSG_WARN);
        \}
    \} else if (emptyBehavior.equals(\"fail\")) \{
        throw new BuildException((((\"Cannot create \" + archiveType) + \" archive \") + zipFile) + \": no files were included.\", getLocation());
    \} else if (!zipFile.exists()) \{
        needsUpdate = true;
    \}
    return new ArchiveState(needsUpdate, initialResources);
\}" shape=ellipse]
109 [label="31:CtExecutableReferenceImpl@exists()" shape=ellipse]
110 [label="31:CtVirtualElement@exists" shape=ellipse]
111 [label="31:CtVariableReadImpl@zipFile" shape=ellipse]
112 [label="31:CtInvocationImpl@zipFile.exists()" shape=ellipse]
113 [label="31:CtUnaryOperatorImpl@!zipFile.exists()" shape=ellipse]
114 [label="32:CtTypeReferenceImpl@ArchiveState" shape=ellipse]
115 [label="32:CtLiteralImpl@true" shape=ellipse]
116 [label="32:CtVariableReadImpl@initialResources" shape=ellipse]
117 [label="32:CtConstructorCallImpl@new ArchiveState(true, initialResources)" shape=ellipse]
118 [label="32:CtReturnImpl@return new ArchiveState(true, initialResources)" shape=ellipse]
119 [label="31:CtBlockImpl@\{
    return new ArchiveState(true, initialResources);
\}" shape=ellipse]
120 [label="31:CtIfImpl@if (!zipFile.exists()) \{
    return new ArchiveState(true, initialResources);
\}" shape=ellipse]
121 [label="34:CtVariableReadImpl@needsUpdate" shape=ellipse]
122 [label="34:CtFieldReadImpl@doUpdate" shape=ellipse]
123 [label="34:CtUnaryOperatorImpl@(!doUpdate)" shape=ellipse]
124 [label="34:CtBinaryOperatorImpl@needsUpdate && (!doUpdate)" shape=ellipse]
125 [label="35:CtTypeReferenceImpl@ArchiveState" shape=ellipse]
126 [label="35:CtLiteralImpl@true" shape=ellipse]
127 [label="35:CtVariableReadImpl@initialResources" shape=ellipse]
128 [label="35:CtConstructorCallImpl@new ArchiveState(true, initialResources)" shape=ellipse]
129 [label="35:CtReturnImpl@return new ArchiveState(true, initialResources)" shape=ellipse]
130 [label="34:CtBlockImpl@\{
    return new ArchiveState(true, initialResources);
\}" shape=ellipse]
131 [label="34:CtIfImpl@if (needsUpdate && (!doUpdate)) \{
    return new ArchiveState(true, initialResources);
\}" shape=ellipse]
132 [label="37:CtVirtualElement@Resource[][]" shape=ellipse]
133 [label="37:CtArrayTypeReferenceImpl@Resource[][]" shape=ellipse]
134 [label="37:CtNewArrayImpl@new Resource[filesets.length][]" shape=ellipse]
135 [label="37:CtFieldReadImpl@filesets.length" shape=ellipse]
136 [label="37:CtVirtualElement@newerResources" shape=ellipse]
137 [label="37:CtLocalVariableImpl@Resource[][] newerResources = new Resource[filesets.length][]" shape=ellipse]
138 [label="38:CtTypeReferenceImpl@int" shape=ellipse]
139 [label="38:CtLiteralImpl@0" shape=ellipse]
140 [label="38:CtVirtualElement@i" shape=ellipse]
141 [label="38:CtLocalVariableImpl@int i = 0" shape=ellipse]
142 [label="38:CtVariableReadImpl@i" shape=ellipse]
143 [label="38:CtVariableReadImpl@filesets" shape=ellipse]
144 [label="38:CtParameterReferenceImpl@filesets" shape=ellipse]
145 [label="38:CtFieldReadImpl@filesets.length" shape=ellipse]
146 [label="38:CtBinaryOperatorImpl@i < filesets.length" shape=ellipse]
147 [label="38:CtVariableWriteImpl@i" shape=ellipse]
148 [label="38:CtUnaryOperatorImpl@i++" shape=ellipse]
149 [label="39:CtFieldReadImpl@fileset" shape=ellipse]
150 [label="39:CtTypeAccessImpl@ZipFileSet" shape=ellipse]
151 [label="39:CtTypeReferenceImpl@ZipFileSet" shape=ellipse]
152 [label="39:CtBinaryOperatorImpl@(fileset instanceof ZipFileSet)" shape=ellipse]
153 [label="39:CtUnaryOperatorImpl@(!(fileset instanceof ZipFileSet))" shape=ellipse]
154 [label="40:CtExecutableReferenceImpl@getSrc()" shape=ellipse]
155 [label="40:CtVirtualElement@getSrc" shape=ellipse]
156 [label="40:CtFieldReadImpl@((ZipFileSet) (fileset))" shape=ellipse]
157 [label="40:CtTypeReferenceImpl@ZipFileSet" shape=ellipse]
158 [label="40:CtExecutableReferenceImpl@getProject()" shape=ellipse]
159 [label="40:CtVirtualElement@getProject" shape=ellipse]
160 [label="40:CtInvocationImpl@getProject()" shape=ellipse]
161 [label="40:CtInvocationImpl@((ZipFileSet) (fileset)).getSrc(getProject())" shape=ellipse]
162 [label="40:CtLiteralImpl@null" shape=ellipse]
163 [label="40:CtBinaryOperatorImpl@(((ZipFileSet) (fileset)).getSrc(getProject()) == null)" shape=ellipse]
164 [label="39:CtBinaryOperatorImpl@(!(fileset instanceof ZipFileSet)) || (((ZipFileSet) (fileset)).getSrc(getProject()) == null)" shape=ellipse]
165 [label="41:CtTypeReferenceImpl@File" shape=ellipse]
166 [label="41:CtExecutableReferenceImpl@getDir()" shape=ellipse]
167 [label="41:CtVirtualElement@getDir" shape=ellipse]
168 [label="41:CtVariableReadImpl@filesets" shape=ellipse]
169 [label="41:CtVariableReadImpl@i" shape=ellipse]
170 [label="41:CtArrayReadImpl@filesets[i]" shape=ellipse]
171 [label="41:CtExecutableReferenceImpl@getProject()" shape=ellipse]
172 [label="41:CtVirtualElement@getProject" shape=ellipse]
173 [label="41:CtInvocationImpl@getProject()" shape=ellipse]
174 [label="41:CtInvocationImpl@filesets[i].getDir(getProject())" shape=ellipse]
175 [label="41:CtVirtualElement@base" shape=ellipse]
176 [label="41:CtLocalVariableImpl@File base = filesets[i].getDir(getProject())" shape=ellipse]
177 [label="42:CtTypeReferenceImpl@int" shape=ellipse]
178 [label="42:CtLiteralImpl@0" shape=ellipse]
179 [label="42:CtVirtualElement@j" shape=ellipse]
180 [label="42:CtLocalVariableImpl@int j = 0" shape=ellipse]
181 [label="42:CtVariableReadImpl@j" shape=ellipse]
182 [label="42:CtVariableReadImpl@initialResources" shape=ellipse]
183 [label="42:CtVariableReadImpl@i" shape=ellipse]
184 [label="42:CtArrayReadImpl@initialResources[i]" shape=ellipse]
185 [label="42:CtFieldReadImpl@initialResources[i].length" shape=ellipse]
186 [label="42:CtBinaryOperatorImpl@j < initialResources[i].length" shape=ellipse]
187 [label="42:CtVariableWriteImpl@j" shape=ellipse]
188 [label="42:CtUnaryOperatorImpl@j++" shape=ellipse]
189 [label="43:CtTypeReferenceImpl@File" shape=ellipse]
190 [label="43:CtExecutableReferenceImpl@resolveFile(File)" shape=ellipse]
191 [label="43:CtVirtualElement@resolveFile" shape=ellipse]
192 [label="43:CtTypeAccessImpl@FILE_UTILS" shape=ellipse]
193 [label="43:CtVariableReadImpl@base" shape=ellipse]
194 [label="43:CtExecutableReferenceImpl@getName()" shape=ellipse]
195 [label="43:CtVirtualElement@getName" shape=ellipse]
196 [label="43:CtVariableReadImpl@initialResources" shape=ellipse]
197 [label="43:CtVariableReadImpl@i" shape=ellipse]
198 [label="43:CtArrayReadImpl@initialResources[i]" shape=ellipse]
199 [label="43:CtVariableReadImpl@j" shape=ellipse]
200 [label="43:CtArrayReadImpl@initialResources[i][j]" shape=ellipse]
201 [label="43:CtInvocationImpl@initialResources[i][j].getName()" shape=ellipse]
202 [label="43:CtInvocationImpl@FILE_UTILS.resolveFile(base, initialResources[i][j].getName())" shape=ellipse]
203 [label="43:CtVirtualElement@resourceAsFile" shape=ellipse]
204 [label="43:CtLocalVariableImpl@File resourceAsFile = FILE_UTILS.resolveFile(base, initialResources[i][j].getName())" shape=ellipse]
205 [label="44:CtExecutableReferenceImpl@equals(File)" shape=ellipse]
206 [label="44:CtVirtualElement@equals" shape=ellipse]
207 [label="44:CtVariableReadImpl@resourceAsFile" shape=ellipse]
208 [label="44:CtVariableReadImpl@zipFile" shape=ellipse]
209 [label="44:CtInvocationImpl@resourceAsFile.equals(zipFile)" shape=ellipse]
210 [label="45:CtTypeReferenceImpl@BuildException" shape=ellipse]
211 [label="45:CtLiteralImpl@\"A zip file cannot include \"" shape=ellipse]
212 [label="45:CtLiteralImpl@\"itself\"" shape=ellipse]
213 [label="45:CtBinaryOperatorImpl@\"A zip file cannot include \" + \"itself\"" shape=ellipse]
214 [label="45:CtExecutableReferenceImpl@getLocation()" shape=ellipse]
215 [label="45:CtVirtualElement@getLocation" shape=ellipse]
216 [label="45:CtInvocationImpl@getLocation()" shape=ellipse]
217 [label="45:CtConstructorCallImpl@new BuildException(\"A zip file cannot include \" + \"itself\", getLocation())" shape=ellipse]
218 [label="45:CtThrowImpl@throw new BuildException(\"A zip file cannot include \" + \"itself\", getLocation())" shape=ellipse]
219 [label="44:CtBlockImpl@\{
    throw new BuildException(\"A zip file cannot include \" + \"itself\", getLocation());
\}" shape=ellipse]
220 [label="44:CtIfImpl@if (resourceAsFile.equals(zipFile)) \{
    throw new BuildException(\"A zip file cannot include \" + \"itself\", getLocation());
\}" shape=ellipse]
221 [label="42:CtBlockImpl@\{
    File resourceAsFile = FILE_UTILS.resolveFile(base, initialResources[i][j].getName());
    if (resourceAsFile.equals(zipFile)) \{
        throw new BuildException(\"A zip file cannot include \" + \"itself\", getLocation());
    \}
\}" shape=ellipse]
222 [label="42:CtForImpl@for (int j = 0; j < initialResources[i].length; j++) \{
    File resourceAsFile = FILE_UTILS.resolveFile(base, initialResources[i][j].getName());
    if (resourceAsFile.equals(zipFile)) \{
        throw new BuildException(\"A zip file cannot include \" + \"itself\", getLocation());
    \}
\}" shape=ellipse]
223 [label="40:CtBlockImpl@\{
    File base = filesets[i].getDir(getProject());
    for (int j = 0; j < initialResources[i].length; j++) \{
        File resourceAsFile = FILE_UTILS.resolveFile(base, initialResources[i][j].getName());
        if (resourceAsFile.equals(zipFile)) \{
            throw new BuildException(\"A zip file cannot include \" + \"itself\", getLocation());
        \}
    \}
\}" shape=ellipse]
224 [label="39:CtIfImpl@if ((!(fileset instanceof ZipFileSet)) || (((ZipFileSet) (fileset)).getSrc(getProject()) == null)) \{
    File base = filesets[i].getDir(getProject());
    for (int j = 0; j < initialResources[i].length; j++) \{
        File resourceAsFile = FILE_UTILS.resolveFile(base, initialResources[i][j].getName());
        if (resourceAsFile.equals(zipFile)) \{
            throw new BuildException(\"A zip file cannot include \" + \"itself\", getLocation());
        \}
    \}
\}" shape=ellipse]
225 [label="38:CtBlockImpl@\{
    if ((!(fileset instanceof ZipFileSet)) || (((ZipFileSet) (fileset)).getSrc(getProject()) == null)) \{
        File base = filesets[i].getDir(getProject());
        for (int j = 0; j < initialResources[i].length; j++) \{
            File resourceAsFile = FILE_UTILS.resolveFile(base, initialResources[i][j].getName());
            if (resourceAsFile.equals(zipFile)) \{
                throw new BuildException(\"A zip file cannot include \" + \"itself\", getLocation());
            \}
        \}
    \}
\}" shape=ellipse]
226 [label="38:CtForImpl@for (int i = 0; i < filesets.length; i++) \{
    if ((!(fileset instanceof ZipFileSet)) || (((ZipFileSet) (fileset)).getSrc(getProject()) == null)) \{
        File base = filesets[i].getDir(getProject());
        for (int j = 0; j < initialResources[i].length; j++) \{
            File resourceAsFile = FILE_UTILS.resolveFile(base, initialResources[i][j].getName());
            if (resourceAsFile.equals(zipFile)) \{
                throw new BuildException(\"A zip file cannot include \" + \"itself\", getLocation());
            \}
        \}
    \}
\}" shape=ellipse]
227 [label="50:CtTypeReferenceImpl@int" shape=ellipse]
228 [label="50:CtLiteralImpl@0" shape=ellipse]
229 [label="50:CtVirtualElement@i" shape=ellipse]
230 [label="50:CtLocalVariableImpl@int i = 0" shape=ellipse]
231 [label="50:CtVariableReadImpl@i" shape=ellipse]
232 [label="50:CtVariableReadImpl@filesets" shape=ellipse]
233 [label="50:CtParameterReferenceImpl@filesets" shape=ellipse]
234 [label="50:CtFieldReadImpl@filesets.length" shape=ellipse]
235 [label="50:CtBinaryOperatorImpl@i < filesets.length" shape=ellipse]
236 [label="50:CtVariableWriteImpl@i" shape=ellipse]
237 [label="50:CtUnaryOperatorImpl@i++" shape=ellipse]
238 [label="51:CtVariableReadImpl@initialResources" shape=ellipse]
239 [label="51:CtVariableReadImpl@i" shape=ellipse]
240 [label="51:CtArrayReadImpl@initialResources[i]" shape=ellipse]
241 [label="51:CtFieldReadImpl@initialResources[i].length" shape=ellipse]
242 [label="51:CtLiteralImpl@0" shape=ellipse]
243 [label="51:CtBinaryOperatorImpl@initialResources[i].length == 0" shape=ellipse]
244 [label="52:CtVariableReadImpl@newerResources" shape=ellipse]
245 [label="52:CtVariableReadImpl@i" shape=ellipse]
246 [label="52:CtArrayWriteImpl@newerResources[i]" shape=ellipse]
247 [label="52:CtNewArrayImpl@new Resource[]\{  \}" shape=ellipse]
248 [label="52:CtAssignmentImpl@newerResources[i] = new Resource[]\{  \}" shape=ellipse]
249 [label="53:CtContinueImpl@continue" shape=ellipse]
250 [label="51:CtBlockImpl@\{
    newerResources[i] = new Resource[]\{  \};
    continue;
\}" shape=ellipse]
251 [label="51:CtIfImpl@if (initialResources[i].length == 0) \{
    newerResources[i] = new Resource[]\{  \};
    continue;
\}" shape=ellipse]
252 [label="55:CtTypeReferenceImpl@FileNameMapper" shape=ellipse]
253 [label="55:CtTypeReferenceImpl@IdentityMapper" shape=ellipse]
254 [label="55:CtConstructorCallImpl@new IdentityMapper()" shape=ellipse]
255 [label="55:CtVirtualElement@myMapper" shape=ellipse]
256 [label="55:CtLocalVariableImpl@FileNameMapper myMapper = new IdentityMapper()" shape=ellipse]
257 [label="56:CtVariableReadImpl@filesets" shape=ellipse]
258 [label="56:CtVariableReadImpl@i" shape=ellipse]
259 [label="56:CtArrayReadImpl@filesets[i]" shape=ellipse]
260 [label="56:CtTypeAccessImpl@ZipFileSet" shape=ellipse]
261 [label="56:CtTypeReferenceImpl@ZipFileSet" shape=ellipse]
262 [label="56:CtBinaryOperatorImpl@filesets[i] instanceof ZipFileSet" shape=ellipse]
263 [label="57:CtTypeReferenceImpl@ZipFileSet" shape=ellipse]
264 [label="57:CtVariableReadImpl@filesets" shape=ellipse]
265 [label="57:CtVariableReadImpl@i" shape=ellipse]
266 [label="57:CtArrayReadImpl@((ZipFileSet) (filesets[i]))" shape=ellipse]
267 [label="57:CtTypeReferenceImpl@ZipFileSet" shape=ellipse]
268 [label="57:CtVirtualElement@zfs" shape=ellipse]
269 [label="57:CtLocalVariableImpl@ZipFileSet zfs = ((ZipFileSet) (filesets[i]))" shape=ellipse]
270 [label="58:CtExecutableReferenceImpl@getFullpath()" shape=ellipse]
271 [label="58:CtVirtualElement@getFullpath" shape=ellipse]
272 [label="58:CtVariableReadImpl@zfs" shape=ellipse]
273 [label="58:CtExecutableReferenceImpl@getProject()" shape=ellipse]
274 [label="58:CtVirtualElement@getProject" shape=ellipse]
275 [label="58:CtInvocationImpl@getProject()" shape=ellipse]
276 [label="58:CtInvocationImpl@zfs.getFullpath(getProject())" shape=ellipse]
277 [label="58:CtLiteralImpl@null" shape=ellipse]
278 [label="58:CtBinaryOperatorImpl@(zfs.getFullpath(getProject()) != null)" shape=ellipse]
279 [label="59:CtExecutableReferenceImpl@equals(java.lang.String)" shape=ellipse]
280 [label="59:CtVirtualElement@equals" shape=ellipse]
281 [label="59:CtExecutableReferenceImpl@getFullpath()" shape=ellipse]
282 [label="59:CtVirtualElement@getFullpath" shape=ellipse]
283 [label="59:CtVariableReadImpl@zfs" shape=ellipse]
284 [label="59:CtExecutableReferenceImpl@getProject()" shape=ellipse]
285 [label="59:CtVirtualElement@getProject" shape=ellipse]
286 [label="59:CtInvocationImpl@getProject()" shape=ellipse]
287 [label="59:CtInvocationImpl@zfs.getFullpath(getProject())" shape=ellipse]
288 [label="59:CtLiteralImpl@\"\"" shape=ellipse]
289 [label="59:CtInvocationImpl@zfs.getFullpath(getProject()).equals(\"\")" shape=ellipse]
290 [label="59:CtUnaryOperatorImpl@(!zfs.getFullpath(getProject()).equals(\"\"))" shape=ellipse]
291 [label="58:CtBinaryOperatorImpl@(zfs.getFullpath(getProject()) != null) && (!zfs.getFullpath(getProject()).equals(\"\"))" shape=ellipse]
292 [label="60:CtTypeReferenceImpl@MergingMapper" shape=ellipse]
293 [label="60:CtTypeReferenceImpl@MergingMapper" shape=ellipse]
294 [label="60:CtConstructorCallImpl@new MergingMapper()" shape=ellipse]
295 [label="60:CtVirtualElement@fm" shape=ellipse]
296 [label="60:CtLocalVariableImpl@MergingMapper fm = new MergingMapper()" shape=ellipse]
297 [label="61:CtExecutableReferenceImpl@setTo()" shape=ellipse]
298 [label="61:CtVirtualElement@setTo" shape=ellipse]
299 [label="61:CtVariableReadImpl@fm" shape=ellipse]
300 [label="61:CtExecutableReferenceImpl@getFullpath()" shape=ellipse]
301 [label="61:CtVirtualElement@getFullpath" shape=ellipse]
302 [label="61:CtVariableReadImpl@zfs" shape=ellipse]
303 [label="61:CtExecutableReferenceImpl@getProject()" shape=ellipse]
304 [label="61:CtVirtualElement@getProject" shape=ellipse]
305 [label="61:CtInvocationImpl@getProject()" shape=ellipse]
306 [label="61:CtInvocationImpl@zfs.getFullpath(getProject())" shape=ellipse]
307 [label="61:CtInvocationImpl@fm.setTo(zfs.getFullpath(getProject()))" shape=ellipse]
308 [label="62:CtVariableWriteImpl@myMapper" shape=ellipse]
309 [label="62:CtVariableReadImpl@fm" shape=ellipse]
310 [label="62:CtAssignmentImpl@myMapper = fm" shape=ellipse]
311 [label="59:CtBlockImpl@\{
    MergingMapper fm = new MergingMapper();
    fm.setTo(zfs.getFullpath(getProject()));
    myMapper = fm;
\}" shape=ellipse]
312 [label="63:CtExecutableReferenceImpl@getPrefix()" shape=ellipse]
313 [label="63:CtVirtualElement@getPrefix" shape=ellipse]
314 [label="63:CtVariableReadImpl@zfs" shape=ellipse]
315 [label="63:CtExecutableReferenceImpl@getProject()" shape=ellipse]
316 [label="63:CtVirtualElement@getProject" shape=ellipse]
317 [label="63:CtInvocationImpl@getProject()" shape=ellipse]
318 [label="63:CtInvocationImpl@zfs.getPrefix(getProject())" shape=ellipse]
319 [label="63:CtLiteralImpl@null" shape=ellipse]
320 [label="63:CtBinaryOperatorImpl@(zfs.getPrefix(getProject()) != null)" shape=ellipse]
321 [label="64:CtExecutableReferenceImpl@equals(java.lang.String)" shape=ellipse]
322 [label="64:CtVirtualElement@equals" shape=ellipse]
323 [label="64:CtExecutableReferenceImpl@getPrefix()" shape=ellipse]
324 [label="64:CtVirtualElement@getPrefix" shape=ellipse]
325 [label="64:CtVariableReadImpl@zfs" shape=ellipse]
326 [label="64:CtExecutableReferenceImpl@getProject()" shape=ellipse]
327 [label="64:CtVirtualElement@getProject" shape=ellipse]
328 [label="64:CtInvocationImpl@getProject()" shape=ellipse]
329 [label="64:CtInvocationImpl@zfs.getPrefix(getProject())" shape=ellipse]
330 [label="64:CtLiteralImpl@\"\"" shape=ellipse]
331 [label="64:CtInvocationImpl@zfs.getPrefix(getProject()).equals(\"\")" shape=ellipse]
332 [label="64:CtUnaryOperatorImpl@(!zfs.getPrefix(getProject()).equals(\"\"))" shape=ellipse]
333 [label="63:CtBinaryOperatorImpl@(zfs.getPrefix(getProject()) != null) && (!zfs.getPrefix(getProject()).equals(\"\"))" shape=ellipse]
334 [label="65:CtTypeReferenceImpl@GlobPatternMapper" shape=ellipse]
335 [label="65:CtTypeReferenceImpl@GlobPatternMapper" shape=ellipse]
336 [label="65:CtConstructorCallImpl@new GlobPatternMapper()" shape=ellipse]
337 [label="65:CtVirtualElement@gm" shape=ellipse]
338 [label="65:CtLocalVariableImpl@GlobPatternMapper gm = new GlobPatternMapper()" shape=ellipse]
339 [label="66:CtExecutableReferenceImpl@setFrom(java.lang.String)" shape=ellipse]
340 [label="66:CtVirtualElement@setFrom" shape=ellipse]
341 [label="66:CtVariableReadImpl@gm" shape=ellipse]
342 [label="66:CtLiteralImpl@\"*\"" shape=ellipse]
343 [label="66:CtInvocationImpl@gm.setFrom(\"*\")" shape=ellipse]
344 [label="67:CtTypeReferenceImpl@String" shape=ellipse]
345 [label="67:CtExecutableReferenceImpl@getPrefix()" shape=ellipse]
346 [label="67:CtVirtualElement@getPrefix" shape=ellipse]
347 [label="67:CtVariableReadImpl@zfs" shape=ellipse]
348 [label="67:CtExecutableReferenceImpl@getProject()" shape=ellipse]
349 [label="67:CtVirtualElement@getProject" shape=ellipse]
350 [label="67:CtInvocationImpl@getProject()" shape=ellipse]
351 [label="67:CtInvocationImpl@zfs.getPrefix(getProject())" shape=ellipse]
352 [label="67:CtVirtualElement@prefix" shape=ellipse]
353 [label="67:CtLocalVariableImpl@String prefix = zfs.getPrefix(getProject())" shape=ellipse]
354 [label="68:CtExecutableReferenceImpl@endsWith(java.lang.String)" shape=ellipse]
355 [label="68:CtVirtualElement@endsWith" shape=ellipse]
356 [label="68:CtVariableReadImpl@prefix" shape=ellipse]
357 [label="68:CtLiteralImpl@\"/\"" shape=ellipse]
358 [label="68:CtInvocationImpl@prefix.endsWith(\"/\")" shape=ellipse]
359 [label="68:CtUnaryOperatorImpl@(!prefix.endsWith(\"/\"))" shape=ellipse]
360 [label="68:CtExecutableReferenceImpl@endsWith(java.lang.String)" shape=ellipse]
361 [label="68:CtVirtualElement@endsWith" shape=ellipse]
362 [label="68:CtVariableReadImpl@prefix" shape=ellipse]
363 [label="68:CtLiteralImpl@\"\\\"" shape=ellipse]
364 [label="68:CtInvocationImpl@prefix.endsWith(\"\\\")" shape=ellipse]
365 [label="68:CtUnaryOperatorImpl@(!prefix.endsWith(\"\\\"))" shape=ellipse]
366 [label="68:CtBinaryOperatorImpl@(!prefix.endsWith(\"/\")) && (!prefix.endsWith(\"\\\"))" shape=ellipse]
367 [label="69:CtVariableWriteImpl@prefix" shape=ellipse]
368 [label="69:CtLiteralImpl@\"/\"" shape=ellipse]
369 [label="69:CtOperatorAssignmentImpl@prefix += \"/\"" shape=ellipse]
370 [label="68:CtBlockImpl@\{
    prefix += \"/\";
\}" shape=ellipse]
371 [label="68:CtIfImpl@if ((!prefix.endsWith(\"/\")) && (!prefix.endsWith(\"\\\"))) \{
    prefix += \"/\";
\}" shape=ellipse]
372 [label="71:CtExecutableReferenceImpl@setTo(java.lang.String)" shape=ellipse]
373 [label="71:CtVirtualElement@setTo" shape=ellipse]
374 [label="71:CtVariableReadImpl@gm" shape=ellipse]
375 [label="71:CtVariableReadImpl@prefix" shape=ellipse]
376 [label="71:CtLiteralImpl@\"*\"" shape=ellipse]
377 [label="71:CtBinaryOperatorImpl@prefix + \"*\"" shape=ellipse]
378 [label="71:CtInvocationImpl@gm.setTo(prefix + \"*\")" shape=ellipse]
379 [label="72:CtVariableWriteImpl@myMapper" shape=ellipse]
380 [label="72:CtVariableReadImpl@gm" shape=ellipse]
381 [label="72:CtAssignmentImpl@myMapper = gm" shape=ellipse]
382 [label="64:CtBlockImpl@\{
    GlobPatternMapper gm = new GlobPatternMapper();
    gm.setFrom(\"*\");
    String prefix = zfs.getPrefix(getProject());
    if ((!prefix.endsWith(\"/\")) && (!prefix.endsWith(\"\\\"))) \{
        prefix += \"/\";
    \}
    gm.setTo(prefix + \"*\");
    myMapper = gm;
\}" shape=ellipse]
383 [label="63:CtIfImpl@if ((zfs.getPrefix(getProject()) != null) && (!zfs.getPrefix(getProject()).equals(\"\"))) \{
    GlobPatternMapper gm = new GlobPatternMapper();
    gm.setFrom(\"*\");
    String prefix = zfs.getPrefix(getProject());
    if ((!prefix.endsWith(\"/\")) && (!prefix.endsWith(\"\\\"))) \{
        prefix += \"/\";
    \}
    gm.setTo(prefix + \"*\");
    myMapper = gm;
\}" shape=ellipse]
384 [label="63:CtBlockImpl@
    if ((zfs.getPrefix(getProject()) != null) && (!zfs.getPrefix(getProject()).equals(\"\"))) \{
        GlobPatternMapper gm = new GlobPatternMapper();
        gm.setFrom(\"*\");
        String prefix = zfs.getPrefix(getProject());
        if ((!prefix.endsWith(\"/\")) && (!prefix.endsWith(\"\\\"))) \{
            prefix += \"/\";
        \}
        gm.setTo(prefix + \"*\");
        myMapper = gm;
    \}
" shape=ellipse]
385 [label="58:CtIfImpl@if ((zfs.getFullpath(getProject()) != null) && (!zfs.getFullpath(getProject()).equals(\"\"))) \{
    MergingMapper fm = new MergingMapper();
    fm.setTo(zfs.getFullpath(getProject()));
    myMapper = fm;
\} else if ((zfs.getPrefix(getProject()) != null) && (!zfs.getPrefix(getProject()).equals(\"\"))) \{
    GlobPatternMapper gm = new GlobPatternMapper();
    gm.setFrom(\"*\");
    String prefix = zfs.getPrefix(getProject());
    if ((!prefix.endsWith(\"/\")) && (!prefix.endsWith(\"\\\"))) \{
        prefix += \"/\";
    \}
    gm.setTo(prefix + \"*\");
    myMapper = gm;
\}" shape=ellipse]
386 [label="56:CtBlockImpl@\{
    ZipFileSet zfs = ((ZipFileSet) (filesets[i]));
    if ((zfs.getFullpath(getProject()) != null) && (!zfs.getFullpath(getProject()).equals(\"\"))) \{
        MergingMapper fm = new MergingMapper();
        fm.setTo(zfs.getFullpath(getProject()));
        myMapper = fm;
    \} else if ((zfs.getPrefix(getProject()) != null) && (!zfs.getPrefix(getProject()).equals(\"\"))) \{
        GlobPatternMapper gm = new GlobPatternMapper();
        gm.setFrom(\"*\");
        String prefix = zfs.getPrefix(getProject());
        if ((!prefix.endsWith(\"/\")) && (!prefix.endsWith(\"\\\"))) \{
            prefix += \"/\";
        \}
        gm.setTo(prefix + \"*\");
        myMapper = gm;
    \}
\}" shape=ellipse]
387 [label="56:CtIfImpl@if (filesets[i] instanceof ZipFileSet) \{
    ZipFileSet zfs = ((ZipFileSet) (filesets[i]));
    if ((zfs.getFullpath(getProject()) != null) && (!zfs.getFullpath(getProject()).equals(\"\"))) \{
        MergingMapper fm = new MergingMapper();
        fm.setTo(zfs.getFullpath(getProject()));
        myMapper = fm;
    \} else if ((zfs.getPrefix(getProject()) != null) && (!zfs.getPrefix(getProject()).equals(\"\"))) \{
        GlobPatternMapper gm = new GlobPatternMapper();
        gm.setFrom(\"*\");
        String prefix = zfs.getPrefix(getProject());
        if ((!prefix.endsWith(\"/\")) && (!prefix.endsWith(\"\\\"))) \{
            prefix += \"/\";
        \}
        gm.setTo(prefix + \"*\");
        myMapper = gm;
    \}
\}" shape=ellipse]
388 [label="75:CtVirtualElement@Resource[]" shape=ellipse]
389 [label="75:CtArrayTypeReferenceImpl@Resource[]" shape=ellipse]
390 [label="75:CtVariableReadImpl@initialResources" shape=ellipse]
391 [label="75:CtVariableReadImpl@i" shape=ellipse]
392 [label="75:CtArrayReadImpl@initialResources[i]" shape=ellipse]
393 [label="75:CtVirtualElement@resources" shape=ellipse]
394 [label="75:CtLocalVariableImpl@Resource[] resources = initialResources[i]" shape=ellipse]
395 [label="76:CtVariableWriteImpl@resources" shape=ellipse]
396 [label="76:CtExecutableReferenceImpl@selectFileResources(<unknown>)" shape=ellipse]
397 [label="76:CtVirtualElement@selectFileResources" shape=ellipse]
398 [label="76:CtVariableReadImpl@resources" shape=ellipse]
399 [label="76:CtInvocationImpl@selectFileResources(resources)" shape=ellipse]
400 [label="76:CtAssignmentImpl@resources = selectFileResources(resources)" shape=ellipse]
401 [label="77:CtVariableReadImpl@newerResources" shape=ellipse]
402 [label="77:CtVariableReadImpl@i" shape=ellipse]
403 [label="77:CtArrayWriteImpl@newerResources[i]" shape=ellipse]
404 [label="78:CtExecutableReferenceImpl@selectOutOfDateSources(PlaceHold,Resource[],FileNameMapper)" shape=ellipse]
405 [label="78:CtVirtualElement@selectOutOfDateSources" shape=ellipse]
406 [label="78:CtTypeAccessImpl@ResourceUtils" shape=ellipse]
407 [label="78:CtThisAccessImpl@this" shape=ellipse]
408 [label="78:CtVariableReadImpl@resources" shape=ellipse]
409 [label="78:CtVariableReadImpl@myMapper" shape=ellipse]
410 [label="78:CtExecutableReferenceImpl@getZipScanner()" shape=ellipse]
411 [label="78:CtVirtualElement@getZipScanner" shape=ellipse]
412 [label="78:CtInvocationImpl@getZipScanner()" shape=ellipse]
413 [label="78:CtInvocationImpl@ResourceUtils.selectOutOfDateSources(this, resources, myMapper, getZipScanner())" shape=ellipse]
414 [label="77:CtAssignmentImpl@newerResources[i] = ResourceUtils.selectOutOfDateSources(this, resources, myMapper, getZipScanner())" shape=ellipse]
415 [label="79:CtVariableWriteImpl@needsUpdate" shape=ellipse]
416 [label="79:CtVariableReadImpl@needsUpdate" shape=ellipse]
417 [label="79:CtVariableReadImpl@newerResources" shape=ellipse]
418 [label="79:CtVariableReadImpl@i" shape=ellipse]
419 [label="79:CtArrayReadImpl@newerResources[i]" shape=ellipse]
420 [label="79:CtFieldReadImpl@newerResources[i].length" shape=ellipse]
421 [label="79:CtLiteralImpl@0" shape=ellipse]
422 [label="79:CtBinaryOperatorImpl@(newerResources[i].length > 0)" shape=ellipse]
423 [label="79:CtBinaryOperatorImpl@needsUpdate || (newerResources[i].length > 0)" shape=ellipse]
424 [label="79:CtAssignmentImpl@needsUpdate = needsUpdate || (newerResources[i].length > 0)" shape=ellipse]
425 [label="80:CtVariableReadImpl@needsUpdate" shape=ellipse]
426 [label="80:CtFieldReadImpl@doUpdate" shape=ellipse]
427 [label="80:CtUnaryOperatorImpl@(!doUpdate)" shape=ellipse]
428 [label="80:CtBinaryOperatorImpl@needsUpdate && (!doUpdate)" shape=ellipse]
429 [label="81:CtBreakImpl@break" shape=ellipse]
430 [label="80:CtBlockImpl@\{
    break;
\}" shape=ellipse]
431 [label="80:CtIfImpl@if (needsUpdate && (!doUpdate)) \{
    break;
\}" shape=ellipse]
432 [label="50:CtBlockImpl@\{
    if (initialResources[i].length == 0) \{
        newerResources[i] = new Resource[]\{  \};
        continue;
    \}
    FileNameMapper myMapper = new IdentityMapper();
    if (filesets[i] instanceof ZipFileSet) \{
        ZipFileSet zfs = ((ZipFileSet) (filesets[i]));
        if ((zfs.getFullpath(getProject()) != null) && (!zfs.getFullpath(getProject()).equals(\"\"))) \{
            MergingMapper fm = new MergingMapper();
            fm.setTo(zfs.getFullpath(getProject()));
            myMapper = fm;
        \} else if ((zfs.getPrefix(getProject()) != null) && (!zfs.getPrefix(getProject()).equals(\"\"))) \{
            GlobPatternMapper gm = new GlobPatternMapper();
            gm.setFrom(\"*\");
            String prefix = zfs.getPrefix(getProject());
            if ((!prefix.endsWith(\"/\")) && (!prefix.endsWith(\"\\\"))) \{
                prefix += \"/\";
            \}
            gm.setTo(prefix + \"*\");
            myMapper = gm;
        \}
    \}
    Resource[] resources = initialResources[i];
    resources = selectFileResources(resources);
    newerResources[i] = ResourceUtils.selectOutOfDateSources(this, resources, myMapper, getZipScanner());
    needsUpdate = needsUpdate || (newerResources[i].length > 0);
    if (needsUpdate && (!doUpdate)) \{
        break;
    \}
\}" shape=ellipse]
433 [label="50:CtForImpl@for (int i = 0; i < filesets.length; i++) \{
    if (initialResources[i].length == 0) \{
        newerResources[i] = new Resource[]\{  \};
        continue;
    \}
    FileNameMapper myMapper = new IdentityMapper();
    if (filesets[i] instanceof ZipFileSet) \{
        ZipFileSet zfs = ((ZipFileSet) (filesets[i]));
        if ((zfs.getFullpath(getProject()) != null) && (!zfs.getFullpath(getProject()).equals(\"\"))) \{
            MergingMapper fm = new MergingMapper();
            fm.setTo(zfs.getFullpath(getProject()));
            myMapper = fm;
        \} else if ((zfs.getPrefix(getProject()) != null) && (!zfs.getPrefix(getProject()).equals(\"\"))) \{
            GlobPatternMapper gm = new GlobPatternMapper();
            gm.setFrom(\"*\");
            String prefix = zfs.getPrefix(getProject());
            if ((!prefix.endsWith(\"/\")) && (!prefix.endsWith(\"\\\"))) \{
                prefix += \"/\";
            \}
            gm.setTo(prefix + \"*\");
            myMapper = gm;
        \}
    \}
    Resource[] resources = initialResources[i];
    resources = selectFileResources(resources);
    newerResources[i] = ResourceUtils.selectOutOfDateSources(this, resources, myMapper, getZipScanner());
    needsUpdate = needsUpdate || (newerResources[i].length > 0);
    if (needsUpdate && (!doUpdate)) \{
        break;
    \}
\}" shape=ellipse]
434 [label="84:CtVariableReadImpl@needsUpdate" shape=ellipse]
435 [label="84:CtFieldReadImpl@doUpdate" shape=ellipse]
436 [label="84:CtUnaryOperatorImpl@(!doUpdate)" shape=ellipse]
437 [label="84:CtBinaryOperatorImpl@needsUpdate && (!doUpdate)" shape=ellipse]
438 [label="85:CtTypeReferenceImpl@ArchiveState" shape=ellipse]
439 [label="85:CtLiteralImpl@true" shape=ellipse]
440 [label="85:CtVariableReadImpl@initialResources" shape=ellipse]
441 [label="85:CtConstructorCallImpl@new ArchiveState(true, initialResources)" shape=ellipse]
442 [label="85:CtReturnImpl@return new ArchiveState(true, initialResources)" shape=ellipse]
443 [label="84:CtBlockImpl@\{
    return new ArchiveState(true, initialResources);
\}" shape=ellipse]
444 [label="84:CtIfImpl@if (needsUpdate && (!doUpdate)) \{
    return new ArchiveState(true, initialResources);
\}" shape=ellipse]
445 [label="87:CtTypeReferenceImpl@ArchiveState" shape=ellipse]
446 [label="87:CtVariableReadImpl@needsUpdate" shape=ellipse]
447 [label="87:CtVariableReadImpl@newerResources" shape=ellipse]
448 [label="87:CtConstructorCallImpl@new ArchiveState(needsUpdate, newerResources)" shape=ellipse]
449 [label="87:CtReturnImpl@return new ArchiveState(needsUpdate, newerResources)" shape=ellipse]
450 [label="3:CtBlockImpl@\{
    Resource[][] initialResources = grabResources(filesets);
    if (isEmpty(initialResources)) \{
        if (needsUpdate && doUpdate) \{
            return new ArchiveState(true, initialResources);
        \}
        if (emptyBehavior.equals(\"skip\")) \{
            if (doUpdate) \{
                logOnFirstPass((((archiveType + \" archive \") + zipFile) + \" not updated because no new files were\") + \" included.\", MSG_VERBOSE);
            \} else \{
                logOnFirstPass((((\"Warning: skipping \" + archiveType) + \" archive \") + zipFile) + \" because no files were included.\", MSG_WARN);
            \}
        \} else if (emptyBehavior.equals(\"fail\")) \{
            throw new BuildException((((\"Cannot create \" + archiveType) + \" archive \") + zipFile) + \": no files were included.\", getLocation());
        \} else if (!zipFile.exists()) \{
            needsUpdate = true;
        \}
        return new ArchiveState(needsUpdate, initialResources);
    \}
    if (!zipFile.exists()) \{
        return new ArchiveState(true, initialResources);
    \}
    if (needsUpdate && (!doUpdate)) \{
        return new ArchiveState(true, initialResources);
    \}
    Resource[][] newerResources = new Resource[filesets.length][];
    for (int i = 0; i < filesets.length; i++) \{
        if ((!(fileset instanceof ZipFileSet)) || (((ZipFileSet) (fileset)).getSrc(getProject()) == null)) \{
            File base = filesets[i].getDir(getProject());
            for (int j = 0; j < initialResources[i].length; j++) \{
                File resourceAsFile = FILE_UTILS.resolveFile(base, initialResources[i][j].getName());
                if (resourceAsFile.equals(zipFile)) \{
                    throw new BuildException(\"A zip file cannot include \" + \"itself\", getLocation());
                \}
            \}
        \}
    \}
    for (int i = 0; i < filesets.length; i++) \{
        if (initialResources[i].length == 0) \{
            newerResources[i] = new Resource[]\{  \};
            continue;
        \}
        FileNameMapper myMapper = new IdentityMapper();
        if (filesets[i] instanceof ZipFileSet) \{
            ZipFileSet zfs = ((ZipFileSet) (filesets[i]));
            if ((zfs.getFullpath(getProject()) != null) && (!zfs.getFullpath(getProject()).equals(\"\"))) \{
                MergingMapper fm = new MergingMapper();
                fm.setTo(zfs.getFullpath(getProject()));
                myMapper = fm;
            \} else if ((zfs.getPrefix(getProject()) != null) && (!zfs.getPrefix(getProject()).equals(\"\"))) \{
                GlobPatternMapper gm = new GlobPatternMapper();
                gm.setFrom(\"*\");
                String prefix = zfs.getPrefix(getProject());
                if ((!prefix.endsWith(\"/\")) && (!prefix.endsWith(\"\\\"))) \{
                    prefix += \"/\";
                \}
                gm.setTo(prefix + \"*\");
                myMapper = gm;
            \}
        \}
        Resource[] resources = initialResources[i];
        resources = selectFileResources(resources);
        newerResources[i] = ResourceUtils.selectOutOfDateSources(this, resources, myMapper, getZipScanner());
        needsUpdate = needsUpdate || (newerResources[i].length > 0);
        if (needsUpdate && (!doUpdate)) \{
            break;
        \}
    \}
    if (needsUpdate && (!doUpdate)) \{
        return new ArchiveState(true, initialResources);
    \}
    return new ArchiveState(needsUpdate, newerResources);
\}" shape=ellipse]
451 [label="2:CtMethodImpl@protected ArchiveState getResourcesToAdd(FileSet[] filesets, File zipFile, boolean needsUpdate) throws BuildException \{
    Resource[][] initialResources = grabResources(filesets);
    if (isEmpty(initialResources)) \{
        if (needsUpdate && doUpdate) \{
            return new ArchiveState(true, initialResources);
        \}
        if (emptyBehavior.equals(\"skip\")) \{
            if (doUpdate) \{
                logOnFirstPass((((archiveType + \" archive \") + zipFile) + \" not updated because no new files were\") + \" included.\", MSG_VERBOSE);
            \} else \{
                logOnFirstPass((((\"Warning: skipping \" + archiveType) + \" archive \") + zipFile) + \" because no files were included.\", MSG_WARN);
            \}
        \} else if (emptyBehavior.equals(\"fail\")) \{
            throw new BuildException((((\"Cannot create \" + archiveType) + \" archive \") + zipFile) + \": no files were included.\", getLocation());
        \} else if (!zipFile.exists()) \{
            needsUpdate = true;
        \}
        return new ArchiveState(needsUpdate, initialResources);
    \}
    if (!zipFile.exists()) \{
        return new ArchiveState(true, initialResources);
    \}
    if (needsUpdate && (!doUpdate)) \{
        return new ArchiveState(true, initialResources);
    \}
    Resource[][] newerResources = new Resource[filesets.length][];
    for (int i = 0; i < filesets.length; i++) \{
        if ((!(fileset instanceof ZipFileSet)) || (((ZipFileSet) (fileset)).getSrc(getProject()) == null)) \{
            File base = filesets[i].getDir(getProject());
            for (int j = 0; j < initialResources[i].length; j++) \{
                File resourceAsFile = FILE_UTILS.resolveFile(base, initialResources[i][j].getName());
                if (resourceAsFile.equals(zipFile)) \{
                    throw new BuildException(\"A zip file cannot include \" + \"itself\", getLocation());
                \}
            \}
        \}
    \}
    for (int i = 0; i < filesets.length; i++) \{
        if (initialResources[i].length == 0) \{
            newerResources[i] = new Resource[]\{  \};
            continue;
        \}
        FileNameMapper myMapper = new IdentityMapper();
        if (filesets[i] instanceof ZipFileSet) \{
            ZipFileSet zfs = ((ZipFileSet) (filesets[i]));
            if ((zfs.getFullpath(getProject()) != null) && (!zfs.getFullpath(getProject()).equals(\"\"))) \{
                MergingMapper fm = new MergingMapper();
                fm.setTo(zfs.getFullpath(getProject()));
                myMapper = fm;
            \} else if ((zfs.getPrefix(getProject()) != null) && (!zfs.getPrefix(getProject()).equals(\"\"))) \{
                GlobPatternMapper gm = new GlobPatternMapper();
                gm.setFrom(\"*\");
                String prefix = zfs.getPrefix(getProject());
                if ((!prefix.endsWith(\"/\")) && (!prefix.endsWith(\"\\\"))) \{
                    prefix += \"/\";
                \}
                gm.setTo(prefix + \"*\");
                myMapper = gm;
            \}
        \}
        Resource[] resources = initialResources[i];
        resources = selectFileResources(resources);
        newerResources[i] = ResourceUtils.selectOutOfDateSources(this, resources, myMapper, getZipScanner());
        needsUpdate = needsUpdate || (newerResources[i].length > 0);
        if (needsUpdate && (!doUpdate)) \{
            break;
        \}
    \}
    if (needsUpdate && (!doUpdate)) \{
        return new ArchiveState(true, initialResources);
    \}
    return new ArchiveState(needsUpdate, newerResources);
\}" shape=ellipse]
452 [label="76:Insert@INSERT" shape=ellipse]
453 [label="76:CtIfImpl@if (doFilesonly) \{
    resources = selectFileResources(resources);
\}" shape=ellipse]
454 [label="76:Move@MOVE" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
6 -> 7 [label="AST"];
10 -> 9 [label="AST"];
13 -> 15 [label="Data Dep"];
14 -> 12 [label="AST"];
14 -> 11 [label="AST"];
14 -> 13 [label="AST"];
15 -> 19 [label="Define-Use"];
15 -> 26 [label="Define-Use"];
15 -> 104 [label="Define-Use"];
15 -> 116 [label="Define-Use"];
15 -> 127 [label="Define-Use"];
15 -> 182 [label="Define-Use"];
15 -> 184 [label="Define-Use"];
15 -> 196 [label="Define-Use"];
15 -> 198 [label="Define-Use"];
15 -> 238 [label="Define-Use"];
15 -> 240 [label="Define-Use"];
15 -> 390 [label="Define-Use"];
15 -> 392 [label="Define-Use"];
15 -> 440 [label="Define-Use"];
16 -> 15 [label="AST"];
16 -> 10 [label="AST"];
16 -> 14 [label="AST"];
20 -> 18 [label="AST"];
20 -> 17 [label="AST"];
20 -> 19 [label="AST"];
20 -> 107 [label="Control Dep"];
20 -> 30 [label="Control Dep"];
20 -> 23 [label="Control Dep"];
20 -> 21 [label="Control Dep"];
20 -> 22 [label="Control Dep"];
20 -> 101 [label="Control Dep"];
20 -> 35 [label="Control Dep"];
20 -> 31 [label="Control Dep"];
20 -> 33 [label="Control Dep"];
20 -> 34 [label="Control Dep"];
20 -> 106 [label="Control Dep"];
20 -> 105 [label="Control Dep"];
20 -> 103 [label="Control Dep"];
20 -> 104 [label="Control Dep"];
23 -> 21 [label="AST"];
23 -> 22 [label="AST"];
23 -> 29 [label="Control Dep"];
23 -> 28 [label="Control Dep"];
23 -> 27 [label="Control Dep"];
23 -> 25 [label="Control Dep"];
23 -> 26 [label="Control Dep"];
27 -> 25 [label="AST"];
27 -> 26 [label="AST"];
28 -> 27 [label="AST"];
29 -> 28 [label="AST"];
30 -> 23 [label="AST"];
30 -> 29 [label="AST"];
35 -> 32 [label="AST"];
35 -> 33 [label="AST"];
35 -> 31 [label="AST"];
35 -> 34 [label="AST"];
35 -> 66 [label="Control Dep"];
35 -> 65 [label="Control Dep"];
35 -> 36 [label="Control Dep"];
35 -> 100 [label="Control Dep"];
35 -> 99 [label="Control Dep"];
35 -> 71 [label="Control Dep"];
35 -> 67 [label="Control Dep"];
35 -> 69 [label="Control Dep"];
35 -> 70 [label="Control Dep"];
36 -> 50 [label="Control Dep"];
36 -> 49 [label="Control Dep"];
36 -> 37 [label="Control Dep"];
36 -> 47 [label="Control Dep"];
36 -> 45 [label="Control Dep"];
36 -> 43 [label="Control Dep"];
36 -> 41 [label="Control Dep"];
36 -> 39 [label="Control Dep"];
36 -> 40 [label="Control Dep"];
36 -> 42 [label="Control Dep"];
36 -> 44 [label="Control Dep"];
36 -> 46 [label="Control Dep"];
36 -> 48 [label="Control Dep"];
36 -> 64 [label="Control Dep"];
36 -> 63 [label="Control Dep"];
36 -> 51 [label="Control Dep"];
36 -> 61 [label="Control Dep"];
36 -> 59 [label="Control Dep"];
36 -> 57 [label="Control Dep"];
36 -> 55 [label="Control Dep"];
36 -> 53 [label="Control Dep"];
36 -> 54 [label="Control Dep"];
36 -> 56 [label="Control Dep"];
36 -> 58 [label="Control Dep"];
36 -> 60 [label="Control Dep"];
36 -> 62 [label="Control Dep"];
41 -> 39 [label="AST"];
41 -> 40 [label="AST"];
43 -> 41 [label="AST"];
43 -> 42 [label="AST"];
45 -> 43 [label="AST"];
45 -> 44 [label="AST"];
47 -> 45 [label="AST"];
47 -> 46 [label="AST"];
49 -> 38 [label="AST"];
49 -> 37 [label="AST"];
49 -> 47 [label="AST"];
49 -> 48 [label="AST"];
50 -> 49 [label="AST"];
55 -> 53 [label="AST"];
55 -> 54 [label="AST"];
57 -> 55 [label="AST"];
57 -> 56 [label="AST"];
59 -> 57 [label="AST"];
59 -> 58 [label="AST"];
61 -> 59 [label="AST"];
61 -> 60 [label="AST"];
63 -> 52 [label="AST"];
63 -> 51 [label="AST"];
63 -> 61 [label="AST"];
63 -> 62 [label="AST"];
64 -> 63 [label="AST"];
65 -> 36 [label="AST"];
65 -> 50 [label="AST"];
65 -> 64 [label="AST"];
66 -> 65 [label="AST"];
71 -> 68 [label="AST"];
71 -> 69 [label="AST"];
71 -> 67 [label="AST"];
71 -> 70 [label="AST"];
71 -> 87 [label="Control Dep"];
71 -> 86 [label="Control Dep"];
71 -> 85 [label="Control Dep"];
71 -> 81 [label="Control Dep"];
71 -> 79 [label="Control Dep"];
71 -> 77 [label="Control Dep"];
71 -> 75 [label="Control Dep"];
71 -> 73 [label="Control Dep"];
71 -> 74 [label="Control Dep"];
71 -> 76 [label="Control Dep"];
71 -> 78 [label="Control Dep"];
71 -> 80 [label="Control Dep"];
71 -> 84 [label="Control Dep"];
71 -> 82 [label="Control Dep"];
71 -> 98 [label="Control Dep"];
71 -> 97 [label="Control Dep"];
71 -> 92 [label="Control Dep"];
71 -> 91 [label="Control Dep"];
71 -> 88 [label="Control Dep"];
71 -> 90 [label="Control Dep"];
75 -> 73 [label="AST"];
75 -> 74 [label="AST"];
77 -> 75 [label="AST"];
77 -> 76 [label="AST"];
79 -> 77 [label="AST"];
79 -> 78 [label="AST"];
81 -> 79 [label="AST"];
81 -> 80 [label="AST"];
84 -> 83 [label="AST"];
84 -> 82 [label="AST"];
85 -> 81 [label="AST"];
85 -> 84 [label="AST"];
86 -> 85 [label="AST"];
87 -> 86 [label="AST"];
91 -> 89 [label="AST"];
91 -> 90 [label="AST"];
91 -> 88 [label="AST"];
92 -> 91 [label="AST"];
92 -> 96 [label="Control Dep"];
92 -> 95 [label="Control Dep"];
92 -> 93 [label="Control Dep"];
92 -> 94 [label="Control Dep"];
93 -> 103 [label="Define-Use"];
93 -> 121 [label="Define-Use"];
95 -> 93 [label="AST"];
95 -> 94 [label="AST"];
96 -> 95 [label="AST"];
97 -> 92 [label="AST"];
97 -> 96 [label="AST"];
98 -> 97 [label="AST"];
99 -> 71 [label="AST"];
99 -> 87 [label="AST"];
99 -> 98 [label="AST"];
100 -> 99 [label="AST"];
101 -> 35 [label="AST"];
101 -> 66 [label="AST"];
101 -> 100 [label="AST"];
105 -> 103 [label="AST"];
105 -> 104 [label="AST"];
106 -> 105 [label="AST"];
107 -> 30 [label="AST"];
107 -> 101 [label="AST"];
107 -> 106 [label="AST"];
108 -> 20 [label="AST"];
108 -> 107 [label="AST"];
112 -> 110 [label="AST"];
112 -> 111 [label="AST"];
112 -> 109 [label="AST"];
113 -> 112 [label="AST"];
113 -> 119 [label="Control Dep"];
113 -> 118 [label="Control Dep"];
113 -> 117 [label="Control Dep"];
113 -> 115 [label="Control Dep"];
113 -> 116 [label="Control Dep"];
117 -> 115 [label="AST"];
117 -> 116 [label="AST"];
118 -> 117 [label="AST"];
119 -> 118 [label="AST"];
120 -> 113 [label="AST"];
120 -> 119 [label="AST"];
123 -> 122 [label="AST"];
124 -> 121 [label="AST"];
124 -> 123 [label="AST"];
124 -> 130 [label="Control Dep"];
124 -> 129 [label="Control Dep"];
124 -> 128 [label="Control Dep"];
124 -> 126 [label="Control Dep"];
124 -> 127 [label="Control Dep"];
128 -> 126 [label="AST"];
128 -> 127 [label="AST"];
129 -> 128 [label="AST"];
130 -> 129 [label="AST"];
131 -> 124 [label="AST"];
131 -> 130 [label="AST"];
133 -> 132 [label="AST"];
134 -> 135 [label="AST"];
135 -> 136 [label="Data Dep"];
136 -> 244 [label="Define-Use"];
136 -> 401 [label="Define-Use"];
136 -> 417 [label="Define-Use"];
136 -> 419 [label="Define-Use"];
136 -> 447 [label="Define-Use"];
137 -> 136 [label="AST"];
137 -> 133 [label="AST"];
137 -> 134 [label="AST"];
140 -> 142 [label="Define-Use"];
141 -> 140 [label="AST"];
141 -> 138 [label="AST"];
141 -> 139 [label="AST"];
143 -> 144 [label="AST"];
145 -> 143 [label="AST"];
146 -> 142 [label="AST"];
146 -> 145 [label="AST"];
146 -> 225 [label="Control Dep"];
146 -> 224 [label="Control Dep"];
146 -> 164 [label="Control Dep"];
146 -> 153 [label="Control Dep"];
146 -> 152 [label="Control Dep"];
146 -> 149 [label="Control Dep"];
146 -> 150 [label="Control Dep"];
146 -> 163 [label="Control Dep"];
146 -> 161 [label="Control Dep"];
146 -> 154 [label="Control Dep"];
146 -> 156 [label="Control Dep"];
146 -> 160 [label="Control Dep"];
146 -> 158 [label="Control Dep"];
146 -> 162 [label="Control Dep"];
147 -> 169 [label="Define-Use"];
147 -> 183 [label="Define-Use"];
147 -> 197 [label="Define-Use"];
148 -> 147 [label="AST"];
150 -> 151 [label="AST"];
152 -> 149 [label="AST"];
152 -> 150 [label="AST"];
153 -> 152 [label="AST"];
156 -> 157 [label="AST"];
160 -> 159 [label="AST"];
160 -> 158 [label="AST"];
161 -> 155 [label="AST"];
161 -> 156 [label="AST"];
161 -> 154 [label="AST"];
161 -> 160 [label="AST"];
163 -> 161 [label="AST"];
163 -> 162 [label="AST"];
164 -> 153 [label="AST"];
164 -> 163 [label="AST"];
164 -> 223 [label="Control Dep"];
164 -> 176 [label="Control Dep"];
164 -> 174 [label="Control Dep"];
164 -> 166 [label="Control Dep"];
164 -> 170 [label="Control Dep"];
164 -> 168 [label="Control Dep"];
164 -> 169 [label="Control Dep"];
164 -> 173 [label="Control Dep"];
164 -> 171 [label="Control Dep"];
164 -> 222 [label="Control Dep"];
164 -> 180 [label="Control Dep"];
164 -> 178 [label="Control Dep"];
164 -> 186 [label="Control Dep"];
164 -> 181 [label="Control Dep"];
164 -> 185 [label="Control Dep"];
164 -> 184 [label="Control Dep"];
164 -> 182 [label="Control Dep"];
164 -> 183 [label="Control Dep"];
164 -> 188 [label="Control Dep"];
164 -> 187 [label="Control Dep"];
170 -> 168 [label="AST"];
170 -> 169 [label="AST"];
170 -> 175 [label="Data Dep"];
173 -> 172 [label="AST"];
173 -> 171 [label="AST"];
174 -> 167 [label="AST"];
174 -> 170 [label="AST"];
174 -> 166 [label="AST"];
174 -> 173 [label="AST"];
175 -> 193 [label="Define-Use"];
176 -> 175 [label="AST"];
176 -> 165 [label="AST"];
176 -> 174 [label="AST"];
179 -> 181 [label="Define-Use"];
179 -> 199 [label="Define-Use"];
180 -> 179 [label="AST"];
180 -> 177 [label="AST"];
180 -> 178 [label="AST"];
184 -> 182 [label="AST"];
184 -> 183 [label="AST"];
185 -> 184 [label="AST"];
186 -> 181 [label="AST"];
186 -> 185 [label="AST"];
186 -> 221 [label="Control Dep"];
186 -> 204 [label="Control Dep"];
186 -> 202 [label="Control Dep"];
186 -> 190 [label="Control Dep"];
186 -> 192 [label="Control Dep"];
186 -> 193 [label="Control Dep"];
186 -> 201 [label="Control Dep"];
186 -> 194 [label="Control Dep"];
186 -> 200 [label="Control Dep"];
186 -> 198 [label="Control Dep"];
186 -> 196 [label="Control Dep"];
186 -> 197 [label="Control Dep"];
186 -> 199 [label="Control Dep"];
186 -> 220 [label="Control Dep"];
186 -> 209 [label="Control Dep"];
186 -> 205 [label="Control Dep"];
186 -> 207 [label="Control Dep"];
186 -> 208 [label="Control Dep"];
187 -> 199 [label="Define-Use"];
188 -> 187 [label="AST"];
193 -> 203 [label="Data Dep"];
198 -> 196 [label="AST"];
198 -> 197 [label="AST"];
200 -> 198 [label="AST"];
200 -> 199 [label="AST"];
200 -> 203 [label="Data Dep"];
201 -> 195 [label="AST"];
201 -> 200 [label="AST"];
201 -> 194 [label="AST"];
202 -> 191 [label="AST"];
202 -> 192 [label="AST"];
202 -> 190 [label="AST"];
202 -> 193 [label="AST"];
202 -> 201 [label="AST"];
203 -> 207 [label="Define-Use"];
204 -> 203 [label="AST"];
204 -> 189 [label="AST"];
204 -> 202 [label="AST"];
209 -> 206 [label="AST"];
209 -> 207 [label="AST"];
209 -> 205 [label="AST"];
209 -> 208 [label="AST"];
209 -> 219 [label="Control Dep"];
209 -> 218 [label="Control Dep"];
209 -> 217 [label="Control Dep"];
209 -> 213 [label="Control Dep"];
209 -> 211 [label="Control Dep"];
209 -> 212 [label="Control Dep"];
209 -> 216 [label="Control Dep"];
209 -> 214 [label="Control Dep"];
213 -> 211 [label="AST"];
213 -> 212 [label="AST"];
216 -> 215 [label="AST"];
216 -> 214 [label="AST"];
217 -> 213 [label="AST"];
217 -> 216 [label="AST"];
218 -> 217 [label="AST"];
219 -> 218 [label="AST"];
220 -> 209 [label="AST"];
220 -> 219 [label="AST"];
221 -> 204 [label="AST"];
221 -> 220 [label="AST"];
222 -> 180 [label="AST"];
222 -> 186 [label="AST"];
222 -> 188 [label="AST"];
222 -> 221 [label="AST"];
223 -> 176 [label="AST"];
223 -> 222 [label="AST"];
224 -> 164 [label="AST"];
224 -> 223 [label="AST"];
225 -> 224 [label="AST"];
226 -> 141 [label="AST"];
226 -> 146 [label="AST"];
226 -> 148 [label="AST"];
226 -> 225 [label="AST"];
229 -> 231 [label="Define-Use"];
230 -> 229 [label="AST"];
230 -> 227 [label="AST"];
230 -> 228 [label="AST"];
232 -> 233 [label="AST"];
234 -> 232 [label="AST"];
235 -> 231 [label="AST"];
235 -> 234 [label="AST"];
235 -> 432 [label="Control Dep"];
235 -> 251 [label="Control Dep"];
235 -> 243 [label="Control Dep"];
235 -> 241 [label="Control Dep"];
235 -> 240 [label="Control Dep"];
235 -> 238 [label="Control Dep"];
235 -> 239 [label="Control Dep"];
235 -> 242 [label="Control Dep"];
235 -> 256 [label="Control Dep"];
235 -> 254 [label="Control Dep"];
235 -> 387 [label="Control Dep"];
235 -> 262 [label="Control Dep"];
235 -> 259 [label="Control Dep"];
235 -> 257 [label="Control Dep"];
235 -> 258 [label="Control Dep"];
235 -> 260 [label="Control Dep"];
235 -> 394 [label="Control Dep"];
235 -> 389 [label="Control Dep"];
235 -> 392 [label="Control Dep"];
235 -> 390 [label="Control Dep"];
235 -> 391 [label="Control Dep"];
235 -> 400 [label="Control Dep"];
235 -> 395 [label="Control Dep"];
235 -> 399 [label="Control Dep"];
235 -> 396 [label="Control Dep"];
235 -> 398 [label="Control Dep"];
235 -> 414 [label="Control Dep"];
235 -> 403 [label="Control Dep"];
235 -> 401 [label="Control Dep"];
235 -> 402 [label="Control Dep"];
235 -> 413 [label="Control Dep"];
235 -> 404 [label="Control Dep"];
235 -> 406 [label="Control Dep"];
235 -> 407 [label="Control Dep"];
235 -> 408 [label="Control Dep"];
235 -> 409 [label="Control Dep"];
235 -> 412 [label="Control Dep"];
235 -> 410 [label="Control Dep"];
235 -> 424 [label="Control Dep"];
235 -> 415 [label="Control Dep"];
235 -> 423 [label="Control Dep"];
235 -> 416 [label="Control Dep"];
235 -> 422 [label="Control Dep"];
235 -> 420 [label="Control Dep"];
235 -> 419 [label="Control Dep"];
235 -> 417 [label="Control Dep"];
235 -> 418 [label="Control Dep"];
235 -> 421 [label="Control Dep"];
235 -> 431 [label="Control Dep"];
235 -> 428 [label="Control Dep"];
235 -> 425 [label="Control Dep"];
235 -> 427 [label="Control Dep"];
235 -> 426 [label="Control Dep"];
236 -> 239 [label="Define-Use"];
236 -> 245 [label="Define-Use"];
236 -> 258 [label="Define-Use"];
236 -> 265 [label="Define-Use"];
236 -> 391 [label="Define-Use"];
236 -> 402 [label="Define-Use"];
236 -> 418 [label="Define-Use"];
237 -> 236 [label="AST"];
240 -> 238 [label="AST"];
240 -> 239 [label="AST"];
241 -> 240 [label="AST"];
243 -> 241 [label="AST"];
243 -> 242 [label="AST"];
243 -> 250 [label="Control Dep"];
243 -> 248 [label="Control Dep"];
243 -> 246 [label="Control Dep"];
243 -> 244 [label="Control Dep"];
243 -> 245 [label="Control Dep"];
243 -> 247 [label="Control Dep"];
246 -> 244 [label="AST"];
246 -> 245 [label="AST"];
248 -> 246 [label="AST"];
248 -> 247 [label="AST"];
250 -> 248 [label="AST"];
250 -> 249 [label="AST"];
251 -> 243 [label="AST"];
251 -> 250 [label="AST"];
255 -> 409 [label="Define-Use"];
256 -> 255 [label="AST"];
256 -> 252 [label="AST"];
256 -> 254 [label="AST"];
259 -> 257 [label="AST"];
259 -> 258 [label="AST"];
260 -> 261 [label="AST"];
262 -> 259 [label="AST"];
262 -> 260 [label="AST"];
262 -> 386 [label="Control Dep"];
262 -> 269 [label="Control Dep"];
262 -> 266 [label="Control Dep"];
262 -> 264 [label="Control Dep"];
262 -> 265 [label="Control Dep"];
262 -> 385 [label="Control Dep"];
262 -> 291 [label="Control Dep"];
262 -> 278 [label="Control Dep"];
262 -> 276 [label="Control Dep"];
262 -> 270 [label="Control Dep"];
262 -> 272 [label="Control Dep"];
262 -> 275 [label="Control Dep"];
262 -> 273 [label="Control Dep"];
262 -> 277 [label="Control Dep"];
262 -> 290 [label="Control Dep"];
262 -> 289 [label="Control Dep"];
262 -> 279 [label="Control Dep"];
262 -> 287 [label="Control Dep"];
262 -> 281 [label="Control Dep"];
262 -> 283 [label="Control Dep"];
262 -> 286 [label="Control Dep"];
262 -> 284 [label="Control Dep"];
262 -> 288 [label="Control Dep"];
266 -> 267 [label="AST"];
266 -> 264 [label="AST"];
266 -> 265 [label="AST"];
266 -> 268 [label="Data Dep"];
268 -> 272 [label="Define-Use"];
268 -> 283 [label="Define-Use"];
268 -> 302 [label="Define-Use"];
268 -> 314 [label="Define-Use"];
268 -> 325 [label="Define-Use"];
268 -> 347 [label="Define-Use"];
269 -> 268 [label="AST"];
269 -> 263 [label="AST"];
269 -> 266 [label="AST"];
275 -> 274 [label="AST"];
275 -> 273 [label="AST"];
276 -> 271 [label="AST"];
276 -> 272 [label="AST"];
276 -> 270 [label="AST"];
276 -> 275 [label="AST"];
278 -> 276 [label="AST"];
278 -> 277 [label="AST"];
286 -> 285 [label="AST"];
286 -> 284 [label="AST"];
287 -> 282 [label="AST"];
287 -> 283 [label="AST"];
287 -> 281 [label="AST"];
287 -> 286 [label="AST"];
289 -> 280 [label="AST"];
289 -> 287 [label="AST"];
289 -> 279 [label="AST"];
289 -> 288 [label="AST"];
290 -> 289 [label="AST"];
291 -> 278 [label="AST"];
291 -> 290 [label="AST"];
291 -> 311 [label="Control Dep"];
291 -> 296 [label="Control Dep"];
291 -> 294 [label="Control Dep"];
291 -> 307 [label="Control Dep"];
291 -> 297 [label="Control Dep"];
291 -> 299 [label="Control Dep"];
291 -> 306 [label="Control Dep"];
291 -> 300 [label="Control Dep"];
291 -> 302 [label="Control Dep"];
291 -> 305 [label="Control Dep"];
291 -> 303 [label="Control Dep"];
291 -> 310 [label="Control Dep"];
291 -> 308 [label="Control Dep"];
291 -> 309 [label="Control Dep"];
291 -> 384 [label="Control Dep"];
291 -> 383 [label="Control Dep"];
291 -> 333 [label="Control Dep"];
291 -> 320 [label="Control Dep"];
291 -> 318 [label="Control Dep"];
291 -> 312 [label="Control Dep"];
291 -> 314 [label="Control Dep"];
291 -> 317 [label="Control Dep"];
291 -> 315 [label="Control Dep"];
291 -> 319 [label="Control Dep"];
291 -> 332 [label="Control Dep"];
291 -> 331 [label="Control Dep"];
291 -> 321 [label="Control Dep"];
291 -> 329 [label="Control Dep"];
291 -> 323 [label="Control Dep"];
291 -> 325 [label="Control Dep"];
291 -> 328 [label="Control Dep"];
291 -> 326 [label="Control Dep"];
291 -> 330 [label="Control Dep"];
295 -> 299 [label="Define-Use"];
295 -> 309 [label="Define-Use"];
296 -> 295 [label="AST"];
296 -> 292 [label="AST"];
296 -> 294 [label="AST"];
305 -> 304 [label="AST"];
305 -> 303 [label="AST"];
306 -> 301 [label="AST"];
306 -> 302 [label="AST"];
306 -> 300 [label="AST"];
306 -> 305 [label="AST"];
307 -> 298 [label="AST"];
307 -> 299 [label="AST"];
307 -> 297 [label="AST"];
307 -> 306 [label="AST"];
308 -> 409 [label="Define-Use"];
309 -> 308 [label="Data Dep"];
310 -> 308 [label="AST"];
310 -> 309 [label="AST"];
311 -> 296 [label="AST"];
311 -> 307 [label="AST"];
311 -> 310 [label="AST"];
317 -> 316 [label="AST"];
317 -> 315 [label="AST"];
318 -> 313 [label="AST"];
318 -> 314 [label="AST"];
318 -> 312 [label="AST"];
318 -> 317 [label="AST"];
320 -> 318 [label="AST"];
320 -> 319 [label="AST"];
328 -> 327 [label="AST"];
328 -> 326 [label="AST"];
329 -> 324 [label="AST"];
329 -> 325 [label="AST"];
329 -> 323 [label="AST"];
329 -> 328 [label="AST"];
331 -> 322 [label="AST"];
331 -> 329 [label="AST"];
331 -> 321 [label="AST"];
331 -> 330 [label="AST"];
332 -> 331 [label="AST"];
333 -> 320 [label="AST"];
333 -> 332 [label="AST"];
333 -> 382 [label="Control Dep"];
333 -> 338 [label="Control Dep"];
333 -> 336 [label="Control Dep"];
333 -> 343 [label="Control Dep"];
333 -> 339 [label="Control Dep"];
333 -> 341 [label="Control Dep"];
333 -> 342 [label="Control Dep"];
333 -> 353 [label="Control Dep"];
333 -> 351 [label="Control Dep"];
333 -> 345 [label="Control Dep"];
333 -> 347 [label="Control Dep"];
333 -> 350 [label="Control Dep"];
333 -> 348 [label="Control Dep"];
333 -> 371 [label="Control Dep"];
333 -> 366 [label="Control Dep"];
333 -> 359 [label="Control Dep"];
333 -> 358 [label="Control Dep"];
333 -> 354 [label="Control Dep"];
333 -> 356 [label="Control Dep"];
333 -> 357 [label="Control Dep"];
333 -> 365 [label="Control Dep"];
333 -> 364 [label="Control Dep"];
333 -> 360 [label="Control Dep"];
333 -> 362 [label="Control Dep"];
333 -> 363 [label="Control Dep"];
333 -> 378 [label="Control Dep"];
333 -> 372 [label="Control Dep"];
333 -> 374 [label="Control Dep"];
333 -> 377 [label="Control Dep"];
333 -> 375 [label="Control Dep"];
333 -> 376 [label="Control Dep"];
333 -> 381 [label="Control Dep"];
333 -> 379 [label="Control Dep"];
333 -> 380 [label="Control Dep"];
337 -> 341 [label="Define-Use"];
337 -> 374 [label="Define-Use"];
337 -> 380 [label="Define-Use"];
338 -> 337 [label="AST"];
338 -> 334 [label="AST"];
338 -> 336 [label="AST"];
343 -> 340 [label="AST"];
343 -> 341 [label="AST"];
343 -> 339 [label="AST"];
343 -> 342 [label="AST"];
347 -> 352 [label="Data Dep"];
350 -> 349 [label="AST"];
350 -> 348 [label="AST"];
351 -> 346 [label="AST"];
351 -> 347 [label="AST"];
351 -> 345 [label="AST"];
351 -> 350 [label="AST"];
352 -> 356 [label="Define-Use"];
352 -> 362 [label="Define-Use"];
352 -> 375 [label="Define-Use"];
353 -> 352 [label="AST"];
353 -> 344 [label="AST"];
353 -> 351 [label="AST"];
358 -> 355 [label="AST"];
358 -> 356 [label="AST"];
358 -> 354 [label="AST"];
358 -> 357 [label="AST"];
359 -> 358 [label="AST"];
364 -> 361 [label="AST"];
364 -> 362 [label="AST"];
364 -> 360 [label="AST"];
364 -> 363 [label="AST"];
365 -> 364 [label="AST"];
366 -> 359 [label="AST"];
366 -> 365 [label="AST"];
366 -> 370 [label="Control Dep"];
366 -> 369 [label="Control Dep"];
366 -> 367 [label="Control Dep"];
366 -> 368 [label="Control Dep"];
367 -> 375 [label="Define-Use"];
369 -> 367 [label="AST"];
369 -> 368 [label="AST"];
370 -> 369 [label="AST"];
371 -> 366 [label="AST"];
371 -> 370 [label="AST"];
377 -> 375 [label="AST"];
377 -> 376 [label="AST"];
378 -> 373 [label="AST"];
378 -> 374 [label="AST"];
378 -> 372 [label="AST"];
378 -> 377 [label="AST"];
379 -> 409 [label="Define-Use"];
380 -> 379 [label="Data Dep"];
381 -> 379 [label="AST"];
381 -> 380 [label="AST"];
382 -> 338 [label="AST"];
382 -> 343 [label="AST"];
382 -> 353 [label="AST"];
382 -> 371 [label="AST"];
382 -> 378 [label="AST"];
382 -> 381 [label="AST"];
383 -> 333 [label="AST"];
383 -> 382 [label="AST"];
384 -> 383 [label="AST"];
385 -> 291 [label="AST"];
385 -> 311 [label="AST"];
385 -> 384 [label="AST"];
386 -> 269 [label="AST"];
386 -> 385 [label="AST"];
387 -> 262 [label="AST"];
387 -> 386 [label="AST"];
389 -> 388 [label="AST"];
392 -> 390 [label="AST"];
392 -> 391 [label="AST"];
392 -> 393 [label="Data Dep"];
394 -> 393 [label="AST"];
394 -> 389 [label="AST"];
394 -> 392 [label="AST"];
395 -> 408 [label="Define-Use"];
398 -> 395 [label="Data Dep"];
399 -> 397 [label="AST"];
399 -> 396 [label="AST"];
399 -> 398 [label="AST"];
400 -> 395 [label="AST"];
400 -> 399 [label="AST"];
400 -> 454 [label="Action"];
403 -> 401 [label="AST"];
403 -> 402 [label="AST"];
407 -> 403 [label="Data Dep"];
408 -> 403 [label="Data Dep"];
409 -> 403 [label="Data Dep"];
412 -> 411 [label="AST"];
412 -> 410 [label="AST"];
413 -> 405 [label="AST"];
413 -> 406 [label="AST"];
413 -> 404 [label="AST"];
413 -> 407 [label="AST"];
413 -> 408 [label="AST"];
413 -> 409 [label="AST"];
413 -> 412 [label="AST"];
414 -> 403 [label="AST"];
414 -> 413 [label="AST"];
415 -> 425 [label="Define-Use"];
415 -> 434 [label="Define-Use"];
415 -> 446 [label="Define-Use"];
416 -> 415 [label="Data Dep"];
419 -> 417 [label="AST"];
419 -> 418 [label="AST"];
420 -> 419 [label="AST"];
420 -> 415 [label="Data Dep"];
422 -> 420 [label="AST"];
422 -> 421 [label="AST"];
423 -> 416 [label="AST"];
423 -> 422 [label="AST"];
424 -> 415 [label="AST"];
424 -> 423 [label="AST"];
427 -> 426 [label="AST"];
428 -> 425 [label="AST"];
428 -> 427 [label="AST"];
428 -> 430 [label="Control Dep"];
428 -> 429 [label="Control Dep"];
430 -> 429 [label="AST"];
431 -> 428 [label="AST"];
431 -> 430 [label="AST"];
432 -> 251 [label="AST"];
432 -> 256 [label="AST"];
432 -> 387 [label="AST"];
432 -> 394 [label="AST"];
432 -> 400 [label="AST"];
432 -> 414 [label="AST"];
432 -> 424 [label="AST"];
432 -> 431 [label="AST"];
433 -> 230 [label="AST"];
433 -> 235 [label="AST"];
433 -> 237 [label="AST"];
433 -> 432 [label="AST"];
433 -> 452 [label="Action"];
436 -> 435 [label="AST"];
437 -> 434 [label="AST"];
437 -> 436 [label="AST"];
437 -> 443 [label="Control Dep"];
437 -> 442 [label="Control Dep"];
437 -> 441 [label="Control Dep"];
437 -> 439 [label="Control Dep"];
437 -> 440 [label="Control Dep"];
441 -> 439 [label="AST"];
441 -> 440 [label="AST"];
442 -> 441 [label="AST"];
443 -> 442 [label="AST"];
444 -> 437 [label="AST"];
444 -> 443 [label="AST"];
448 -> 446 [label="AST"];
448 -> 447 [label="AST"];
449 -> 448 [label="AST"];
450 -> 16 [label="AST"];
450 -> 108 [label="AST"];
450 -> 120 [label="AST"];
450 -> 131 [label="AST"];
450 -> 137 [label="AST"];
450 -> 226 [label="AST"];
450 -> 433 [label="AST"];
450 -> 444 [label="AST"];
450 -> 449 [label="AST"];
451 -> 1 [label="AST"];
451 -> 0 [label="AST"];
451 -> 2 [label="AST"];
451 -> 4 [label="AST"];
451 -> 6 [label="AST"];
451 -> 8 [label="AST"];
451 -> 450 [label="AST"];
452 -> 453 [label="Action"];
}