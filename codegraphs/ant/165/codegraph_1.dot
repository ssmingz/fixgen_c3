digraph "execJava13#?,ExecMetaData" {
0 [label="2:CtTypeReferenceImpl@Process" shape=ellipse]
1 [label="2:CtVirtualElement@execJava13" shape=ellipse]
2 [label="2:CtParameterImpl@final ExecMetaData metaData" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@ExecMetaData" shape=ellipse]
4 [label="2:CtTypeReferenceImpl@IOException" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@ExecException" shape=ellipse]
6 [label="3:CtVirtualElement@Object[]" shape=ellipse]
7 [label="3:CtArrayTypeReferenceImpl@Object[]" shape=ellipse]
8 [label="4:CtNewArrayImpl@new Object[]\{ metaData.getCommand(), metaData.getEnvironment(), metaData.getWorkingDirectory() \}" shape=ellipse]
9 [label="5:CtInvocationImpl@metaData.getCommand()" shape=ellipse]
10 [label="5:CtInvocationImpl@metaData.getEnvironment()" shape=ellipse]
11 [label="5:CtInvocationImpl@metaData.getWorkingDirectory()" shape=ellipse]
12 [label="3:CtVirtualElement@args" shape=ellipse]
13 [label="3:CtLocalVariableImpl@final Object[] args = new Object[]\{ metaData.getCommand(), metaData.getEnvironment(), metaData.getWorkingDirectory() \}" shape=ellipse]
14 [label="8:CtExecutableReferenceImpl@invoke(java.lang.Runtime,java.lang.Object[])" shape=ellipse]
15 [label="8:CtVirtualElement@invoke" shape=ellipse]
16 [label="8:CtFieldReadImpl@c_execWithCWD" shape=ellipse]
17 [label="8:CtExecutableReferenceImpl@getRuntime()" shape=ellipse]
18 [label="8:CtVirtualElement@getRuntime" shape=ellipse]
19 [label="8:CtTypeAccessImpl@Runtime" shape=ellipse]
20 [label="8:CtInvocationImpl@Runtime.getRuntime()" shape=ellipse]
21 [label="8:CtVariableReadImpl@args" shape=ellipse]
22 [label="8:CtInvocationImpl@((Process) (c_execWithCWD.invoke(Runtime.getRuntime(), args)))" shape=ellipse]
23 [label="8:CtTypeReferenceImpl@Process" shape=ellipse]
24 [label="8:CtReturnImpl@return ((Process) (c_execWithCWD.invoke(Runtime.getRuntime(), args)))" shape=ellipse]
25 [label="7:CtBlockImpl@\{
    return ((Process) (c_execWithCWD.invoke(Runtime.getRuntime(), args)));
\}" shape=ellipse]
26 [label="9:CtVirtualElement@iae" shape=ellipse]
27 [label="9:CtTypeReferenceImpl@IllegalAccessException" shape=ellipse]
28 [label="9:CtCatchVariableImpl@final IllegalAccessException iae" shape=ellipse]
29 [label="10:CtTypeReferenceImpl@ExecException" shape=ellipse]
30 [label="10:CtExecutableReferenceImpl@getMessage()" shape=ellipse]
31 [label="10:CtVirtualElement@getMessage" shape=ellipse]
32 [label="10:CtVariableReadImpl@iae" shape=ellipse]
33 [label="10:CtInvocationImpl@iae.getMessage()" shape=ellipse]
34 [label="10:CtVariableReadImpl@iae" shape=ellipse]
35 [label="10:CtConstructorCallImpl@new ExecException(iae.getMessage(), iae)" shape=ellipse]
36 [label="10:CtThrowImpl@throw new ExecException(iae.getMessage(), iae)" shape=ellipse]
37 [label="9:CtBlockImpl@\{
    throw new ExecException(iae.getMessage(), iae);
\}" shape=ellipse]
38 [label="9:CtCatchImpl@ catch (final IllegalAccessException iae) \{
    throw new ExecException(iae.getMessage(), iae);
\}" shape=ellipse]
39 [label="11:CtVirtualElement@iae" shape=ellipse]
40 [label="11:CtTypeReferenceImpl@IllegalArgumentException" shape=ellipse]
41 [label="11:CtCatchVariableImpl@final IllegalArgumentException iae" shape=ellipse]
42 [label="12:CtTypeReferenceImpl@ExecException" shape=ellipse]
43 [label="12:CtExecutableReferenceImpl@getMessage()" shape=ellipse]
44 [label="12:CtVirtualElement@getMessage" shape=ellipse]
45 [label="12:CtVariableReadImpl@iae" shape=ellipse]
46 [label="12:CtInvocationImpl@iae.getMessage()" shape=ellipse]
47 [label="12:CtVariableReadImpl@iae" shape=ellipse]
48 [label="12:CtConstructorCallImpl@new ExecException(iae.getMessage(), iae)" shape=ellipse]
49 [label="12:CtThrowImpl@throw new ExecException(iae.getMessage(), iae)" shape=ellipse]
50 [label="11:CtBlockImpl@\{
    throw new ExecException(iae.getMessage(), iae);
\}" shape=ellipse]
51 [label="11:CtCatchImpl@ catch (final IllegalArgumentException iae) \{
    throw new ExecException(iae.getMessage(), iae);
\}" shape=ellipse]
52 [label="13:CtVirtualElement@ite" shape=ellipse]
53 [label="13:CtTypeReferenceImpl@InvocationTargetException" shape=ellipse]
54 [label="13:CtCatchVariableImpl@final InvocationTargetException ite" shape=ellipse]
55 [label="14:CtTypeReferenceImpl@Throwable" shape=ellipse]
56 [label="14:CtExecutableReferenceImpl@getTargetException()" shape=ellipse]
57 [label="14:CtVirtualElement@getTargetException" shape=ellipse]
58 [label="14:CtVariableReadImpl@ite" shape=ellipse]
59 [label="14:CtInvocationImpl@ite.getTargetException()" shape=ellipse]
60 [label="14:CtVirtualElement@t" shape=ellipse]
61 [label="14:CtLocalVariableImpl@final Throwable t = ite.getTargetException()" shape=ellipse]
62 [label="15:CtVariableReadImpl@t" shape=ellipse]
63 [label="15:CtTypeAccessImpl@IOException" shape=ellipse]
64 [label="15:CtTypeReferenceImpl@IOException" shape=ellipse]
65 [label="15:CtBinaryOperatorImpl@t instanceof IOException" shape=ellipse]
66 [label="16:CtExecutableReferenceImpl@fillInStackTrace()" shape=ellipse]
67 [label="16:CtVirtualElement@fillInStackTrace" shape=ellipse]
68 [label="16:CtVariableReadImpl@t" shape=ellipse]
69 [label="16:CtInvocationImpl@t.fillInStackTrace()" shape=ellipse]
70 [label="17:CtVariableReadImpl@((IOException) (t))" shape=ellipse]
71 [label="17:CtTypeReferenceImpl@IOException" shape=ellipse]
72 [label="17:CtThrowImpl@throw ((IOException) (t))" shape=ellipse]
73 [label="15:CtBlockImpl@\{
    t.fillInStackTrace();
    throw ((IOException) (t));
\}" shape=ellipse]
74 [label="19:CtTypeReferenceImpl@ExecException" shape=ellipse]
75 [label="19:CtExecutableReferenceImpl@getMessage()" shape=ellipse]
76 [label="19:CtVirtualElement@getMessage" shape=ellipse]
77 [label="19:CtVariableReadImpl@t" shape=ellipse]
78 [label="19:CtInvocationImpl@t.getMessage()" shape=ellipse]
79 [label="19:CtVariableReadImpl@t" shape=ellipse]
80 [label="19:CtConstructorCallImpl@new ExecException(t.getMessage(), t)" shape=ellipse]
81 [label="19:CtThrowImpl@throw new ExecException(t.getMessage(), t)" shape=ellipse]
82 [label="18:CtBlockImpl@\{
    throw new ExecException(t.getMessage(), t);
\}" shape=ellipse]
83 [label="15:CtIfImpl@if (t instanceof IOException) \{
    t.fillInStackTrace();
    throw ((IOException) (t));
\} else \{
    throw new ExecException(t.getMessage(), t);
\}" shape=ellipse]
84 [label="13:CtBlockImpl@\{
    final Throwable t = ite.getTargetException();
    if (t instanceof IOException) \{
        t.fillInStackTrace();
        throw ((IOException) (t));
    \} else \{
        throw new ExecException(t.getMessage(), t);
    \}
\}" shape=ellipse]
85 [label="13:CtCatchImpl@ catch (final InvocationTargetException ite) \{
    final Throwable t = ite.getTargetException();
    if (t instanceof IOException) \{
        t.fillInStackTrace();
        throw ((IOException) (t));
    \} else \{
        throw new ExecException(t.getMessage(), t);
    \}
\}" shape=ellipse]
86 [label="7:CtTryImpl@try \{
    return ((Process) (c_execWithCWD.invoke(Runtime.getRuntime(), args)));
\} catch (final IllegalAccessException iae) \{
    throw new ExecException(iae.getMessage(), iae);
\} catch (final IllegalArgumentException iae) \{
    throw new ExecException(iae.getMessage(), iae);
\} catch (final InvocationTargetException ite) \{
    final Throwable t = ite.getTargetException();
    if (t instanceof IOException) \{
        t.fillInStackTrace();
        throw ((IOException) (t));
    \} else \{
        throw new ExecException(t.getMessage(), t);
    \}
\}" shape=ellipse]
87 [label="2:CtBlockImpl@\{
    final Object[] args = new Object[]\{ metaData.getCommand(), metaData.getEnvironment(), metaData.getWorkingDirectory() \};
    try \{
        return ((Process) (c_execWithCWD.invoke(Runtime.getRuntime(), args)));
    \} catch (final IllegalAccessException iae) \{
        throw new ExecException(iae.getMessage(), iae);
    \} catch (final IllegalArgumentException iae) \{
        throw new ExecException(iae.getMessage(), iae);
    \} catch (final InvocationTargetException ite) \{
        final Throwable t = ite.getTargetException();
        if (t instanceof IOException) \{
            t.fillInStackTrace();
            throw ((IOException) (t));
        \} else \{
            throw new ExecException(t.getMessage(), t);
        \}
    \}
\}" shape=ellipse]
88 [label="2:CtMethodImpl@private Process execJava13(final ExecMetaData metaData) throws IOException, ExecException \{
    final Object[] args = new Object[]\{ metaData.getCommand(), metaData.getEnvironment(), metaData.getWorkingDirectory() \};
    try \{
        return ((Process) (c_execWithCWD.invoke(Runtime.getRuntime(), args)));
    \} catch (final IllegalAccessException iae) \{
        throw new ExecException(iae.getMessage(), iae);
    \} catch (final IllegalArgumentException iae) \{
        throw new ExecException(iae.getMessage(), iae);
    \} catch (final InvocationTargetException ite) \{
        final Throwable t = ite.getTargetException();
        if (t instanceof IOException) \{
            t.fillInStackTrace();
            throw ((IOException) (t));
        \} else \{
            throw new ExecException(t.getMessage(), t);
        \}
    \}
\}" shape=ellipse]
89 [label="3:Insert@INSERT" shape=ellipse]
90 [label="3:CtLocalVariableImpl@final String[] env = ExecUtil.toNativeEnvironment(metaData.getEnvironment())" shape=ellipse]
91 [label="4:Insert@INSERT" shape=ellipse]
92 [label="4:CtVariableReadImpl@env" shape=ellipse]
93 [label="5:Move@MOVE" shape=ellipse]
2 -> 3 [label="AST"];
7 -> 6 [label="AST"];
8 -> 9 [label="AST"];
8 -> 10 [label="AST"];
8 -> 11 [label="AST"];
8 -> 91 [label="Action"];
10 -> 93 [label="Action"];
12 -> 21 [label="Define-Use"];
13 -> 12 [label="AST"];
13 -> 7 [label="AST"];
13 -> 8 [label="AST"];
20 -> 18 [label="AST"];
20 -> 19 [label="AST"];
20 -> 17 [label="AST"];
22 -> 15 [label="AST"];
22 -> 23 [label="AST"];
22 -> 16 [label="AST"];
22 -> 14 [label="AST"];
22 -> 20 [label="AST"];
22 -> 21 [label="AST"];
24 -> 22 [label="AST"];
25 -> 24 [label="AST"];
26 -> 32 [label="Define-Use"];
26 -> 34 [label="Define-Use"];
28 -> 26 [label="AST"];
28 -> 27 [label="AST"];
28 -> 37 [label="Control Dep"];
28 -> 36 [label="Control Dep"];
28 -> 35 [label="Control Dep"];
28 -> 33 [label="Control Dep"];
28 -> 30 [label="Control Dep"];
28 -> 32 [label="Control Dep"];
28 -> 34 [label="Control Dep"];
33 -> 31 [label="AST"];
33 -> 32 [label="AST"];
33 -> 30 [label="AST"];
35 -> 33 [label="AST"];
35 -> 34 [label="AST"];
36 -> 35 [label="AST"];
37 -> 36 [label="AST"];
38 -> 28 [label="AST"];
38 -> 37 [label="AST"];
39 -> 45 [label="Define-Use"];
39 -> 47 [label="Define-Use"];
41 -> 39 [label="AST"];
41 -> 40 [label="AST"];
41 -> 50 [label="Control Dep"];
41 -> 49 [label="Control Dep"];
41 -> 48 [label="Control Dep"];
41 -> 46 [label="Control Dep"];
41 -> 43 [label="Control Dep"];
41 -> 45 [label="Control Dep"];
41 -> 47 [label="Control Dep"];
46 -> 44 [label="AST"];
46 -> 45 [label="AST"];
46 -> 43 [label="AST"];
48 -> 46 [label="AST"];
48 -> 47 [label="AST"];
49 -> 48 [label="AST"];
50 -> 49 [label="AST"];
51 -> 41 [label="AST"];
51 -> 50 [label="AST"];
52 -> 58 [label="Define-Use"];
54 -> 52 [label="AST"];
54 -> 53 [label="AST"];
54 -> 84 [label="Control Dep"];
54 -> 61 [label="Control Dep"];
54 -> 59 [label="Control Dep"];
54 -> 56 [label="Control Dep"];
54 -> 58 [label="Control Dep"];
54 -> 83 [label="Control Dep"];
54 -> 65 [label="Control Dep"];
54 -> 62 [label="Control Dep"];
54 -> 63 [label="Control Dep"];
58 -> 60 [label="Data Dep"];
59 -> 57 [label="AST"];
59 -> 58 [label="AST"];
59 -> 56 [label="AST"];
60 -> 62 [label="Define-Use"];
60 -> 68 [label="Define-Use"];
60 -> 70 [label="Define-Use"];
60 -> 77 [label="Define-Use"];
60 -> 79 [label="Define-Use"];
61 -> 60 [label="AST"];
61 -> 55 [label="AST"];
61 -> 59 [label="AST"];
63 -> 64 [label="AST"];
65 -> 62 [label="AST"];
65 -> 63 [label="AST"];
65 -> 73 [label="Control Dep"];
65 -> 69 [label="Control Dep"];
65 -> 66 [label="Control Dep"];
65 -> 68 [label="Control Dep"];
65 -> 72 [label="Control Dep"];
65 -> 70 [label="Control Dep"];
65 -> 82 [label="Control Dep"];
65 -> 81 [label="Control Dep"];
65 -> 80 [label="Control Dep"];
65 -> 78 [label="Control Dep"];
65 -> 75 [label="Control Dep"];
65 -> 77 [label="Control Dep"];
65 -> 79 [label="Control Dep"];
69 -> 67 [label="AST"];
69 -> 68 [label="AST"];
69 -> 66 [label="AST"];
70 -> 71 [label="AST"];
72 -> 70 [label="AST"];
73 -> 69 [label="AST"];
73 -> 72 [label="AST"];
78 -> 76 [label="AST"];
78 -> 77 [label="AST"];
78 -> 75 [label="AST"];
80 -> 78 [label="AST"];
80 -> 79 [label="AST"];
81 -> 80 [label="AST"];
82 -> 81 [label="AST"];
83 -> 65 [label="AST"];
83 -> 73 [label="AST"];
83 -> 82 [label="AST"];
84 -> 61 [label="AST"];
84 -> 83 [label="AST"];
85 -> 54 [label="AST"];
85 -> 84 [label="AST"];
86 -> 25 [label="AST"];
86 -> 38 [label="AST"];
86 -> 51 [label="AST"];
86 -> 85 [label="AST"];
87 -> 13 [label="AST"];
87 -> 86 [label="AST"];
88 -> 1 [label="AST"];
88 -> 0 [label="AST"];
88 -> 2 [label="AST"];
88 -> 4 [label="AST"];
88 -> 5 [label="AST"];
88 -> 87 [label="AST"];
88 -> 89 [label="Action"];
89 -> 90 [label="Action"];
91 -> 92 [label="Action"];
}