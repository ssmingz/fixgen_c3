digraph "buildBorlandStubs#?,Iterator" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@buildBorlandStubs" shape=ellipse]
2 [label="2:CtParameterImpl@Iterator ithomes" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@Iterator" shape=ellipse]
4 [label="3:CtTypeReferenceImpl@Execute" shape=ellipse]
5 [label="3:CtLiteralImpl@null" shape=ellipse]
6 [label="3:CtVirtualElement@execTask" shape=ellipse]
7 [label="3:CtLocalVariableImpl@Execute execTask = null" shape=ellipse]
8 [label="4:CtVariableWriteImpl@execTask" shape=ellipse]
9 [label="4:CtTypeReferenceImpl@Execute" shape=ellipse]
10 [label="4:CtThisAccessImpl@this" shape=ellipse]
11 [label="4:CtConstructorCallImpl@new Execute(this)" shape=ellipse]
12 [label="4:CtAssignmentImpl@execTask = new Execute(this)" shape=ellipse]
13 [label="5:CtTypeReferenceImpl@Project" shape=ellipse]
14 [label="5:CtExecutableReferenceImpl@getProject()" shape=ellipse]
15 [label="5:CtVirtualElement@getProject" shape=ellipse]
16 [label="5:CtExecutableReferenceImpl@getTask()" shape=ellipse]
17 [label="5:CtVirtualElement@getTask" shape=ellipse]
18 [label="5:CtInvocationImpl@getTask()" shape=ellipse]
19 [label="5:CtInvocationImpl@getTask().getProject()" shape=ellipse]
20 [label="5:CtVirtualElement@project" shape=ellipse]
21 [label="5:CtLocalVariableImpl@Project project = getTask().getProject()" shape=ellipse]
22 [label="6:CtExecutableReferenceImpl@setAntRun(Project)" shape=ellipse]
23 [label="6:CtVirtualElement@setAntRun" shape=ellipse]
24 [label="6:CtVariableReadImpl@execTask" shape=ellipse]
25 [label="6:CtVariableReadImpl@project" shape=ellipse]
26 [label="6:CtInvocationImpl@execTask.setAntRun(project)" shape=ellipse]
27 [label="7:CtExecutableReferenceImpl@setWorkingDirectory()" shape=ellipse]
28 [label="7:CtVirtualElement@setWorkingDirectory" shape=ellipse]
29 [label="7:CtVariableReadImpl@execTask" shape=ellipse]
30 [label="7:CtExecutableReferenceImpl@getBaseDir()" shape=ellipse]
31 [label="7:CtVirtualElement@getBaseDir" shape=ellipse]
32 [label="7:CtVariableReadImpl@project" shape=ellipse]
33 [label="7:CtInvocationImpl@project.getBaseDir()" shape=ellipse]
34 [label="7:CtInvocationImpl@execTask.setWorkingDirectory(project.getBaseDir())" shape=ellipse]
35 [label="8:CtTypeReferenceImpl@Commandline" shape=ellipse]
36 [label="8:CtTypeReferenceImpl@Commandline" shape=ellipse]
37 [label="8:CtConstructorCallImpl@new Commandline()" shape=ellipse]
38 [label="8:CtVirtualElement@commandline" shape=ellipse]
39 [label="8:CtLocalVariableImpl@Commandline commandline = new Commandline()" shape=ellipse]
40 [label="9:CtExecutableReferenceImpl@setExecutable()" shape=ellipse]
41 [label="9:CtVirtualElement@setExecutable" shape=ellipse]
42 [label="9:CtVariableReadImpl@commandline" shape=ellipse]
43 [label="9:CtTypeAccessImpl@JAVA2IIOP" shape=ellipse]
44 [label="9:CtInvocationImpl@commandline.setExecutable(JAVA2IIOP)" shape=ellipse]
45 [label="10:CtFieldReadImpl@java2iiopdebug" shape=ellipse]
46 [label="11:CtExecutableReferenceImpl@setValue(java.lang.String)" shape=ellipse]
47 [label="11:CtVirtualElement@setValue" shape=ellipse]
48 [label="11:CtExecutableReferenceImpl@createArgument()" shape=ellipse]
49 [label="11:CtVirtualElement@createArgument" shape=ellipse]
50 [label="11:CtVariableReadImpl@commandline" shape=ellipse]
51 [label="11:CtInvocationImpl@commandline.createArgument()" shape=ellipse]
52 [label="11:CtLiteralImpl@\"-VBJdebug\"" shape=ellipse]
53 [label="11:CtInvocationImpl@commandline.createArgument().setValue(\"-VBJdebug\")" shape=ellipse]
54 [label="10:CtBlockImpl@\{
    commandline.createArgument().setValue(\"-VBJdebug\");
\}" shape=ellipse]
55 [label="10:CtIfImpl@if (java2iiopdebug) \{
    commandline.createArgument().setValue(\"-VBJdebug\");
\}" shape=ellipse]
56 [label="13:CtExecutableReferenceImpl@setValue(java.lang.String)" shape=ellipse]
57 [label="13:CtVirtualElement@setValue" shape=ellipse]
58 [label="13:CtExecutableReferenceImpl@createArgument()" shape=ellipse]
59 [label="13:CtVirtualElement@createArgument" shape=ellipse]
60 [label="13:CtVariableReadImpl@commandline" shape=ellipse]
61 [label="13:CtInvocationImpl@commandline.createArgument()" shape=ellipse]
62 [label="13:CtLiteralImpl@\"-VBJclasspath\"" shape=ellipse]
63 [label="13:CtInvocationImpl@commandline.createArgument().setValue(\"-VBJclasspath\")" shape=ellipse]
64 [label="14:CtExecutableReferenceImpl@setPath()" shape=ellipse]
65 [label="14:CtVirtualElement@setPath" shape=ellipse]
66 [label="14:CtExecutableReferenceImpl@createArgument()" shape=ellipse]
67 [label="14:CtVirtualElement@createArgument" shape=ellipse]
68 [label="14:CtVariableReadImpl@commandline" shape=ellipse]
69 [label="14:CtInvocationImpl@commandline.createArgument()" shape=ellipse]
70 [label="14:CtExecutableReferenceImpl@getCombinedClasspath()" shape=ellipse]
71 [label="14:CtVirtualElement@getCombinedClasspath" shape=ellipse]
72 [label="14:CtInvocationImpl@getCombinedClasspath()" shape=ellipse]
73 [label="14:CtInvocationImpl@commandline.createArgument().setPath(getCombinedClasspath())" shape=ellipse]
74 [label="15:CtExecutableReferenceImpl@setValue(java.lang.String)" shape=ellipse]
75 [label="15:CtVirtualElement@setValue" shape=ellipse]
76 [label="15:CtExecutableReferenceImpl@createArgument()" shape=ellipse]
77 [label="15:CtVirtualElement@createArgument" shape=ellipse]
78 [label="15:CtVariableReadImpl@commandline" shape=ellipse]
79 [label="15:CtInvocationImpl@commandline.createArgument()" shape=ellipse]
80 [label="15:CtLiteralImpl@\"-list_files\"" shape=ellipse]
81 [label="15:CtInvocationImpl@commandline.createArgument().setValue(\"-list_files\")" shape=ellipse]
82 [label="16:CtExecutableReferenceImpl@setValue(java.lang.String)" shape=ellipse]
83 [label="16:CtVirtualElement@setValue" shape=ellipse]
84 [label="16:CtExecutableReferenceImpl@createArgument()" shape=ellipse]
85 [label="16:CtVirtualElement@createArgument" shape=ellipse]
86 [label="16:CtVariableReadImpl@commandline" shape=ellipse]
87 [label="16:CtInvocationImpl@commandline.createArgument()" shape=ellipse]
88 [label="16:CtLiteralImpl@\"-no_tie\"" shape=ellipse]
89 [label="16:CtInvocationImpl@commandline.createArgument().setValue(\"-no_tie\")" shape=ellipse]
90 [label="17:CtFieldReadImpl@java2iioparams" shape=ellipse]
91 [label="17:CtLiteralImpl@null" shape=ellipse]
92 [label="17:CtBinaryOperatorImpl@java2iioparams != null" shape=ellipse]
93 [label="18:CtExecutableReferenceImpl@log(<unknown>,int)" shape=ellipse]
94 [label="18:CtVirtualElement@log" shape=ellipse]
95 [label="18:CtLiteralImpl@\"additional  \"" shape=ellipse]
96 [label="18:CtFieldReadImpl@java2iioparams" shape=ellipse]
97 [label="18:CtBinaryOperatorImpl@(\"additional  \" + java2iioparams)" shape=ellipse]
98 [label="18:CtLiteralImpl@\" to java2iiop \"" shape=ellipse]
99 [label="18:CtBinaryOperatorImpl@(\"additional  \" + java2iioparams) + \" to java2iiop \"" shape=ellipse]
100 [label="18:CtLiteralImpl@0" shape=ellipse]
101 [label="18:CtInvocationImpl@log((\"additional  \" + java2iioparams) + \" to java2iiop \", 0)" shape=ellipse]
102 [label="19:CtExecutableReferenceImpl@setValue()" shape=ellipse]
103 [label="19:CtVirtualElement@setValue" shape=ellipse]
104 [label="19:CtExecutableReferenceImpl@createArgument()" shape=ellipse]
105 [label="19:CtVirtualElement@createArgument" shape=ellipse]
106 [label="19:CtVariableReadImpl@commandline" shape=ellipse]
107 [label="19:CtInvocationImpl@commandline.createArgument()" shape=ellipse]
108 [label="19:CtFieldReadImpl@java2iioparams" shape=ellipse]
109 [label="19:CtInvocationImpl@commandline.createArgument().setValue(java2iioparams)" shape=ellipse]
110 [label="17:CtBlockImpl@\{
    log((\"additional  \" + java2iioparams) + \" to java2iiop \", 0);
    commandline.createArgument().setValue(java2iioparams);
\}" shape=ellipse]
111 [label="17:CtIfImpl@if (java2iioparams != null) \{
    log((\"additional  \" + java2iioparams) + \" to java2iiop \", 0);
    commandline.createArgument().setValue(java2iioparams);
\}" shape=ellipse]
112 [label="21:CtExecutableReferenceImpl@setValue(java.lang.String)" shape=ellipse]
113 [label="21:CtVirtualElement@setValue" shape=ellipse]
114 [label="21:CtExecutableReferenceImpl@createArgument()" shape=ellipse]
115 [label="21:CtVirtualElement@createArgument" shape=ellipse]
116 [label="21:CtVariableReadImpl@commandline" shape=ellipse]
117 [label="21:CtInvocationImpl@commandline.createArgument()" shape=ellipse]
118 [label="21:CtLiteralImpl@\"-root_dir\"" shape=ellipse]
119 [label="21:CtInvocationImpl@commandline.createArgument().setValue(\"-root_dir\")" shape=ellipse]
120 [label="22:CtExecutableReferenceImpl@setValue()" shape=ellipse]
121 [label="22:CtVirtualElement@setValue" shape=ellipse]
122 [label="22:CtExecutableReferenceImpl@createArgument()" shape=ellipse]
123 [label="22:CtVirtualElement@createArgument" shape=ellipse]
124 [label="22:CtVariableReadImpl@commandline" shape=ellipse]
125 [label="22:CtInvocationImpl@commandline.createArgument()" shape=ellipse]
126 [label="22:CtExecutableReferenceImpl@getAbsolutePath()" shape=ellipse]
127 [label="22:CtVirtualElement@getAbsolutePath" shape=ellipse]
128 [label="22:CtExecutableReferenceImpl@getConfig()" shape=ellipse]
129 [label="22:CtVirtualElement@getConfig" shape=ellipse]
130 [label="22:CtInvocationImpl@getConfig()" shape=ellipse]
131 [label="22:CtFieldReadImpl@getConfig().srcDir" shape=ellipse]
132 [label="22:CtInvocationImpl@getConfig().srcDir.getAbsolutePath()" shape=ellipse]
133 [label="22:CtInvocationImpl@commandline.createArgument().setValue(getConfig().srcDir.getAbsolutePath())" shape=ellipse]
134 [label="23:CtExecutableReferenceImpl@setValue(java.lang.String)" shape=ellipse]
135 [label="23:CtVirtualElement@setValue" shape=ellipse]
136 [label="23:CtExecutableReferenceImpl@createArgument()" shape=ellipse]
137 [label="23:CtVirtualElement@createArgument" shape=ellipse]
138 [label="23:CtVariableReadImpl@commandline" shape=ellipse]
139 [label="23:CtInvocationImpl@commandline.createArgument()" shape=ellipse]
140 [label="23:CtLiteralImpl@\"-compile\"" shape=ellipse]
141 [label="23:CtInvocationImpl@commandline.createArgument().setValue(\"-compile\")" shape=ellipse]
142 [label="24:CtExecutableReferenceImpl@hasNext()" shape=ellipse]
143 [label="24:CtVirtualElement@hasNext" shape=ellipse]
144 [label="24:CtVariableReadImpl@ithomes" shape=ellipse]
145 [label="24:CtInvocationImpl@ithomes.hasNext()" shape=ellipse]
146 [label="25:CtExecutableReferenceImpl@setValue()" shape=ellipse]
147 [label="25:CtVirtualElement@setValue" shape=ellipse]
148 [label="25:CtExecutableReferenceImpl@createArgument()" shape=ellipse]
149 [label="25:CtVirtualElement@createArgument" shape=ellipse]
150 [label="25:CtVariableReadImpl@commandline" shape=ellipse]
151 [label="25:CtInvocationImpl@commandline.createArgument()" shape=ellipse]
152 [label="25:CtExecutableReferenceImpl@toString()" shape=ellipse]
153 [label="25:CtVirtualElement@toString" shape=ellipse]
154 [label="25:CtExecutableReferenceImpl@next()" shape=ellipse]
155 [label="25:CtVirtualElement@next" shape=ellipse]
156 [label="25:CtVariableReadImpl@ithomes" shape=ellipse]
157 [label="25:CtInvocationImpl@ithomes.next()" shape=ellipse]
158 [label="25:CtInvocationImpl@ithomes.next().toString()" shape=ellipse]
159 [label="25:CtInvocationImpl@commandline.createArgument().setValue(ithomes.next().toString())" shape=ellipse]
160 [label="24:CtBlockImpl@\{
    commandline.createArgument().setValue(ithomes.next().toString());
\}" shape=ellipse]
161 [label="24:CtWhileImpl@while (ithomes.hasNext()) \{
    commandline.createArgument().setValue(ithomes.next().toString());
\} " shape=ellipse]
162 [label="28:CtExecutableReferenceImpl@log(java.lang.String,<unknown>)" shape=ellipse]
163 [label="28:CtVirtualElement@log" shape=ellipse]
164 [label="28:CtLiteralImpl@\"Calling java2iiop\"" shape=ellipse]
165 [label="28:CtTypeAccessImpl@MSG_VERBOSE" shape=ellipse]
166 [label="28:CtInvocationImpl@log(\"Calling java2iiop\", MSG_VERBOSE)" shape=ellipse]
167 [label="29:CtExecutableReferenceImpl@log(<unknown>,<unknown>)" shape=ellipse]
168 [label="29:CtVirtualElement@log" shape=ellipse]
169 [label="29:CtExecutableReferenceImpl@describeCommand()" shape=ellipse]
170 [label="29:CtVirtualElement@describeCommand" shape=ellipse]
171 [label="29:CtVariableReadImpl@commandline" shape=ellipse]
172 [label="29:CtInvocationImpl@commandline.describeCommand()" shape=ellipse]
173 [label="29:CtTypeAccessImpl@MSG_DEBUG" shape=ellipse]
174 [label="29:CtInvocationImpl@log(commandline.describeCommand(), MSG_DEBUG)" shape=ellipse]
175 [label="30:CtExecutableReferenceImpl@setCommandline()" shape=ellipse]
176 [label="30:CtVirtualElement@setCommandline" shape=ellipse]
177 [label="30:CtVariableReadImpl@execTask" shape=ellipse]
178 [label="30:CtExecutableReferenceImpl@getCommandline()" shape=ellipse]
179 [label="30:CtVirtualElement@getCommandline" shape=ellipse]
180 [label="30:CtVariableReadImpl@commandline" shape=ellipse]
181 [label="30:CtInvocationImpl@commandline.getCommandline()" shape=ellipse]
182 [label="30:CtInvocationImpl@execTask.setCommandline(commandline.getCommandline())" shape=ellipse]
183 [label="31:CtTypeReferenceImpl@int" shape=ellipse]
184 [label="31:CtExecutableReferenceImpl@execute()" shape=ellipse]
185 [label="31:CtVirtualElement@execute" shape=ellipse]
186 [label="31:CtVariableReadImpl@execTask" shape=ellipse]
187 [label="31:CtInvocationImpl@execTask.execute()" shape=ellipse]
188 [label="31:CtVirtualElement@result" shape=ellipse]
189 [label="31:CtLocalVariableImpl@int result = execTask.execute()" shape=ellipse]
190 [label="32:CtExecutableReferenceImpl@isFailure(int)" shape=ellipse]
191 [label="32:CtVirtualElement@isFailure" shape=ellipse]
192 [label="32:CtTypeAccessImpl@Execute" shape=ellipse]
193 [label="32:CtVariableReadImpl@result" shape=ellipse]
194 [label="32:CtInvocationImpl@Execute.isFailure(result)" shape=ellipse]
195 [label="33:CtTypeReferenceImpl@String" shape=ellipse]
196 [label="33:CtLiteralImpl@\"Failed executing java2iiop (ret code is \"" shape=ellipse]
197 [label="33:CtVariableReadImpl@result" shape=ellipse]
198 [label="33:CtBinaryOperatorImpl@(\"Failed executing java2iiop (ret code is \" + result)" shape=ellipse]
199 [label="33:CtLiteralImpl@\")\"" shape=ellipse]
200 [label="33:CtBinaryOperatorImpl@(\"Failed executing java2iiop (ret code is \" + result) + \")\"" shape=ellipse]
201 [label="33:CtVirtualElement@msg" shape=ellipse]
202 [label="33:CtLocalVariableImpl@String msg = (\"Failed executing java2iiop (ret code is \" + result) + \")\"" shape=ellipse]
203 [label="34:CtTypeReferenceImpl@BuildException" shape=ellipse]
204 [label="34:CtVariableReadImpl@msg" shape=ellipse]
205 [label="34:CtExecutableReferenceImpl@getLocation()" shape=ellipse]
206 [label="34:CtVirtualElement@getLocation" shape=ellipse]
207 [label="34:CtExecutableReferenceImpl@getTask()" shape=ellipse]
208 [label="34:CtVirtualElement@getTask" shape=ellipse]
209 [label="34:CtInvocationImpl@getTask()" shape=ellipse]
210 [label="34:CtInvocationImpl@getTask().getLocation()" shape=ellipse]
211 [label="34:CtConstructorCallImpl@new BuildException(msg, getTask().getLocation())" shape=ellipse]
212 [label="34:CtThrowImpl@throw new BuildException(msg, getTask().getLocation())" shape=ellipse]
213 [label="32:CtBlockImpl@\{
    String msg = (\"Failed executing java2iiop (ret code is \" + result) + \")\";
    throw new BuildException(msg, getTask().getLocation());
\}" shape=ellipse]
214 [label="32:CtIfImpl@if (Execute.isFailure(result)) \{
    String msg = (\"Failed executing java2iiop (ret code is \" + result) + \")\";
    throw new BuildException(msg, getTask().getLocation());
\}" shape=ellipse]
215 [label="27:CtBlockImpl@\{
    log(\"Calling java2iiop\", MSG_VERBOSE);
    log(commandline.describeCommand(), MSG_DEBUG);
    execTask.setCommandline(commandline.getCommandline());
    int result = execTask.execute();
    if (Execute.isFailure(result)) \{
        String msg = (\"Failed executing java2iiop (ret code is \" + result) + \")\";
        throw new BuildException(msg, getTask().getLocation());
    \}
\}" shape=ellipse]
216 [label="36:CtVirtualElement@e" shape=ellipse]
217 [label="36:CtTypeReferenceImpl@IOException" shape=ellipse]
218 [label="36:CtCatchVariableImpl@IOException e" shape=ellipse]
219 [label="37:CtExecutableReferenceImpl@log(<unknown>,<unknown>)" shape=ellipse]
220 [label="37:CtVirtualElement@log" shape=ellipse]
221 [label="37:CtLiteralImpl@\"java2iiop exception :\"" shape=ellipse]
222 [label="37:CtExecutableReferenceImpl@getMessage()" shape=ellipse]
223 [label="37:CtVirtualElement@getMessage" shape=ellipse]
224 [label="37:CtVariableReadImpl@e" shape=ellipse]
225 [label="37:CtInvocationImpl@e.getMessage()" shape=ellipse]
226 [label="37:CtBinaryOperatorImpl@\"java2iiop exception :\" + e.getMessage()" shape=ellipse]
227 [label="37:CtTypeAccessImpl@MSG_ERR" shape=ellipse]
228 [label="37:CtInvocationImpl@log(\"java2iiop exception :\" + e.getMessage(), MSG_ERR)" shape=ellipse]
229 [label="38:CtTypeReferenceImpl@BuildException" shape=ellipse]
230 [label="38:CtVariableReadImpl@e" shape=ellipse]
231 [label="38:CtExecutableReferenceImpl@getLocation()" shape=ellipse]
232 [label="38:CtVirtualElement@getLocation" shape=ellipse]
233 [label="38:CtExecutableReferenceImpl@getTask()" shape=ellipse]
234 [label="38:CtVirtualElement@getTask" shape=ellipse]
235 [label="38:CtInvocationImpl@getTask()" shape=ellipse]
236 [label="38:CtInvocationImpl@getTask().getLocation()" shape=ellipse]
237 [label="38:CtConstructorCallImpl@new BuildException(e, getTask().getLocation())" shape=ellipse]
238 [label="38:CtThrowImpl@throw new BuildException(e, getTask().getLocation())" shape=ellipse]
239 [label="36:CtBlockImpl@\{
    log(\"java2iiop exception :\" + e.getMessage(), MSG_ERR);
    throw new BuildException(e, getTask().getLocation());
\}" shape=ellipse]
240 [label="36:CtCatchImpl@ catch (IOException e) \{
    log(\"java2iiop exception :\" + e.getMessage(), MSG_ERR);
    throw new BuildException(e, getTask().getLocation());
\}" shape=ellipse]
241 [label="27:CtTryImpl@try \{
    log(\"Calling java2iiop\", MSG_VERBOSE);
    log(commandline.describeCommand(), MSG_DEBUG);
    execTask.setCommandline(commandline.getCommandline());
    int result = execTask.execute();
    if (Execute.isFailure(result)) \{
        String msg = (\"Failed executing java2iiop (ret code is \" + result) + \")\";
        throw new BuildException(msg, getTask().getLocation());
    \}
\} catch (IOException e) \{
    log(\"java2iiop exception :\" + e.getMessage(), MSG_ERR);
    throw new BuildException(e, getTask().getLocation());
\}" shape=ellipse]
242 [label="2:CtBlockImpl@\{
    Execute execTask = null;
    execTask = new Execute(this);
    Project project = getTask().getProject();
    execTask.setAntRun(project);
    execTask.setWorkingDirectory(project.getBaseDir());
    Commandline commandline = new Commandline();
    commandline.setExecutable(JAVA2IIOP);
    if (java2iiopdebug) \{
        commandline.createArgument().setValue(\"-VBJdebug\");
    \}
    commandline.createArgument().setValue(\"-VBJclasspath\");
    commandline.createArgument().setPath(getCombinedClasspath());
    commandline.createArgument().setValue(\"-list_files\");
    commandline.createArgument().setValue(\"-no_tie\");
    if (java2iioparams != null) \{
        log((\"additional  \" + java2iioparams) + \" to java2iiop \", 0);
        commandline.createArgument().setValue(java2iioparams);
    \}
    commandline.createArgument().setValue(\"-root_dir\");
    commandline.createArgument().setValue(getConfig().srcDir.getAbsolutePath());
    commandline.createArgument().setValue(\"-compile\");
    while (ithomes.hasNext()) \{
        commandline.createArgument().setValue(ithomes.next().toString());
    \} 
    try \{
        log(\"Calling java2iiop\", MSG_VERBOSE);
        log(commandline.describeCommand(), MSG_DEBUG);
        execTask.setCommandline(commandline.getCommandline());
        int result = execTask.execute();
        if (Execute.isFailure(result)) \{
            String msg = (\"Failed executing java2iiop (ret code is \" + result) + \")\";
            throw new BuildException(msg, getTask().getLocation());
        \}
    \} catch (IOException e) \{
        log(\"java2iiop exception :\" + e.getMessage(), MSG_ERR);
        throw new BuildException(e, getTask().getLocation());
    \}
\}" shape=ellipse]
243 [label="2:CtMethodImpl@private void buildBorlandStubs(Iterator ithomes) \{
    Execute execTask = null;
    execTask = new Execute(this);
    Project project = getTask().getProject();
    execTask.setAntRun(project);
    execTask.setWorkingDirectory(project.getBaseDir());
    Commandline commandline = new Commandline();
    commandline.setExecutable(JAVA2IIOP);
    if (java2iiopdebug) \{
        commandline.createArgument().setValue(\"-VBJdebug\");
    \}
    commandline.createArgument().setValue(\"-VBJclasspath\");
    commandline.createArgument().setPath(getCombinedClasspath());
    commandline.createArgument().setValue(\"-list_files\");
    commandline.createArgument().setValue(\"-no_tie\");
    if (java2iioparams != null) \{
        log((\"additional  \" + java2iioparams) + \" to java2iiop \", 0);
        commandline.createArgument().setValue(java2iioparams);
    \}
    commandline.createArgument().setValue(\"-root_dir\");
    commandline.createArgument().setValue(getConfig().srcDir.getAbsolutePath());
    commandline.createArgument().setValue(\"-compile\");
    while (ithomes.hasNext()) \{
        commandline.createArgument().setValue(ithomes.next().toString());
    \} 
    try \{
        log(\"Calling java2iiop\", MSG_VERBOSE);
        log(commandline.describeCommand(), MSG_DEBUG);
        execTask.setCommandline(commandline.getCommandline());
        int result = execTask.execute();
        if (Execute.isFailure(result)) \{
            String msg = (\"Failed executing java2iiop (ret code is \" + result) + \")\";
            throw new BuildException(msg, getTask().getLocation());
        \}
    \} catch (IOException e) \{
        log(\"java2iiop exception :\" + e.getMessage(), MSG_ERR);
        throw new BuildException(e, getTask().getLocation());
    \}
\}" shape=ellipse]
244 [label="19:Update@UPDATE" shape=ellipse]
245 [label="19:CtInvocationImpl@commandline.createArgument().setLine(java2iioparams)" shape=ellipse]
2 -> 3 [label="AST"];
7 -> 6 [label="AST"];
7 -> 4 [label="AST"];
7 -> 5 [label="AST"];
8 -> 24 [label="Define-Use"];
8 -> 29 [label="Define-Use"];
8 -> 177 [label="Define-Use"];
8 -> 186 [label="Define-Use"];
10 -> 8 [label="Data Dep"];
11 -> 10 [label="AST"];
12 -> 8 [label="AST"];
12 -> 11 [label="AST"];
18 -> 17 [label="AST"];
18 -> 16 [label="AST"];
19 -> 15 [label="AST"];
19 -> 18 [label="AST"];
19 -> 14 [label="AST"];
20 -> 25 [label="Define-Use"];
20 -> 32 [label="Define-Use"];
21 -> 20 [label="AST"];
21 -> 13 [label="AST"];
21 -> 19 [label="AST"];
26 -> 23 [label="AST"];
26 -> 24 [label="AST"];
26 -> 22 [label="AST"];
26 -> 25 [label="AST"];
33 -> 31 [label="AST"];
33 -> 32 [label="AST"];
33 -> 30 [label="AST"];
34 -> 28 [label="AST"];
34 -> 29 [label="AST"];
34 -> 27 [label="AST"];
34 -> 33 [label="AST"];
38 -> 42 [label="Define-Use"];
38 -> 50 [label="Define-Use"];
38 -> 60 [label="Define-Use"];
38 -> 68 [label="Define-Use"];
38 -> 78 [label="Define-Use"];
38 -> 86 [label="Define-Use"];
38 -> 106 [label="Define-Use"];
38 -> 116 [label="Define-Use"];
38 -> 124 [label="Define-Use"];
38 -> 138 [label="Define-Use"];
38 -> 150 [label="Define-Use"];
38 -> 171 [label="Define-Use"];
38 -> 180 [label="Define-Use"];
39 -> 38 [label="AST"];
39 -> 35 [label="AST"];
39 -> 37 [label="AST"];
44 -> 41 [label="AST"];
44 -> 42 [label="AST"];
44 -> 40 [label="AST"];
44 -> 43 [label="AST"];
45 -> 54 [label="Control Dep"];
45 -> 53 [label="Control Dep"];
45 -> 46 [label="Control Dep"];
45 -> 51 [label="Control Dep"];
45 -> 48 [label="Control Dep"];
45 -> 50 [label="Control Dep"];
45 -> 52 [label="Control Dep"];
51 -> 49 [label="AST"];
51 -> 50 [label="AST"];
51 -> 48 [label="AST"];
53 -> 47 [label="AST"];
53 -> 51 [label="AST"];
53 -> 46 [label="AST"];
53 -> 52 [label="AST"];
54 -> 53 [label="AST"];
55 -> 45 [label="AST"];
55 -> 54 [label="AST"];
61 -> 59 [label="AST"];
61 -> 60 [label="AST"];
61 -> 58 [label="AST"];
63 -> 57 [label="AST"];
63 -> 61 [label="AST"];
63 -> 56 [label="AST"];
63 -> 62 [label="AST"];
69 -> 67 [label="AST"];
69 -> 68 [label="AST"];
69 -> 66 [label="AST"];
72 -> 71 [label="AST"];
72 -> 70 [label="AST"];
73 -> 65 [label="AST"];
73 -> 69 [label="AST"];
73 -> 64 [label="AST"];
73 -> 72 [label="AST"];
79 -> 77 [label="AST"];
79 -> 78 [label="AST"];
79 -> 76 [label="AST"];
81 -> 75 [label="AST"];
81 -> 79 [label="AST"];
81 -> 74 [label="AST"];
81 -> 80 [label="AST"];
87 -> 85 [label="AST"];
87 -> 86 [label="AST"];
87 -> 84 [label="AST"];
89 -> 83 [label="AST"];
89 -> 87 [label="AST"];
89 -> 82 [label="AST"];
89 -> 88 [label="AST"];
92 -> 90 [label="AST"];
92 -> 91 [label="AST"];
92 -> 110 [label="Control Dep"];
92 -> 101 [label="Control Dep"];
92 -> 93 [label="Control Dep"];
92 -> 99 [label="Control Dep"];
92 -> 97 [label="Control Dep"];
92 -> 95 [label="Control Dep"];
92 -> 96 [label="Control Dep"];
92 -> 98 [label="Control Dep"];
92 -> 100 [label="Control Dep"];
92 -> 109 [label="Control Dep"];
92 -> 102 [label="Control Dep"];
92 -> 107 [label="Control Dep"];
92 -> 104 [label="Control Dep"];
92 -> 106 [label="Control Dep"];
92 -> 108 [label="Control Dep"];
97 -> 95 [label="AST"];
97 -> 96 [label="AST"];
99 -> 97 [label="AST"];
99 -> 98 [label="AST"];
101 -> 94 [label="AST"];
101 -> 93 [label="AST"];
101 -> 99 [label="AST"];
101 -> 100 [label="AST"];
107 -> 105 [label="AST"];
107 -> 106 [label="AST"];
107 -> 104 [label="AST"];
109 -> 103 [label="AST"];
109 -> 107 [label="AST"];
109 -> 102 [label="AST"];
109 -> 108 [label="AST"];
109 -> 244 [label="Action"];
110 -> 101 [label="AST"];
110 -> 109 [label="AST"];
111 -> 92 [label="AST"];
111 -> 110 [label="AST"];
117 -> 115 [label="AST"];
117 -> 116 [label="AST"];
117 -> 114 [label="AST"];
119 -> 113 [label="AST"];
119 -> 117 [label="AST"];
119 -> 112 [label="AST"];
119 -> 118 [label="AST"];
125 -> 123 [label="AST"];
125 -> 124 [label="AST"];
125 -> 122 [label="AST"];
130 -> 129 [label="AST"];
130 -> 128 [label="AST"];
131 -> 130 [label="AST"];
132 -> 127 [label="AST"];
132 -> 131 [label="AST"];
132 -> 126 [label="AST"];
133 -> 121 [label="AST"];
133 -> 125 [label="AST"];
133 -> 120 [label="AST"];
133 -> 132 [label="AST"];
139 -> 137 [label="AST"];
139 -> 138 [label="AST"];
139 -> 136 [label="AST"];
141 -> 135 [label="AST"];
141 -> 139 [label="AST"];
141 -> 134 [label="AST"];
141 -> 140 [label="AST"];
145 -> 143 [label="AST"];
145 -> 144 [label="AST"];
145 -> 142 [label="AST"];
145 -> 160 [label="Control Dep"];
145 -> 159 [label="Control Dep"];
145 -> 146 [label="Control Dep"];
145 -> 151 [label="Control Dep"];
145 -> 148 [label="Control Dep"];
145 -> 150 [label="Control Dep"];
145 -> 158 [label="Control Dep"];
145 -> 152 [label="Control Dep"];
145 -> 157 [label="Control Dep"];
145 -> 154 [label="Control Dep"];
145 -> 156 [label="Control Dep"];
151 -> 149 [label="AST"];
151 -> 150 [label="AST"];
151 -> 148 [label="AST"];
157 -> 155 [label="AST"];
157 -> 156 [label="AST"];
157 -> 154 [label="AST"];
158 -> 153 [label="AST"];
158 -> 157 [label="AST"];
158 -> 152 [label="AST"];
159 -> 147 [label="AST"];
159 -> 151 [label="AST"];
159 -> 146 [label="AST"];
159 -> 158 [label="AST"];
160 -> 159 [label="AST"];
161 -> 145 [label="AST"];
161 -> 160 [label="AST"];
166 -> 163 [label="AST"];
166 -> 162 [label="AST"];
166 -> 164 [label="AST"];
166 -> 165 [label="AST"];
172 -> 170 [label="AST"];
172 -> 171 [label="AST"];
172 -> 169 [label="AST"];
174 -> 168 [label="AST"];
174 -> 167 [label="AST"];
174 -> 172 [label="AST"];
174 -> 173 [label="AST"];
181 -> 179 [label="AST"];
181 -> 180 [label="AST"];
181 -> 178 [label="AST"];
182 -> 176 [label="AST"];
182 -> 177 [label="AST"];
182 -> 175 [label="AST"];
182 -> 181 [label="AST"];
186 -> 188 [label="Data Dep"];
187 -> 185 [label="AST"];
187 -> 186 [label="AST"];
187 -> 184 [label="AST"];
188 -> 193 [label="Define-Use"];
188 -> 197 [label="Define-Use"];
189 -> 188 [label="AST"];
189 -> 183 [label="AST"];
189 -> 187 [label="AST"];
194 -> 191 [label="AST"];
194 -> 192 [label="AST"];
194 -> 190 [label="AST"];
194 -> 193 [label="AST"];
194 -> 213 [label="Control Dep"];
194 -> 202 [label="Control Dep"];
194 -> 200 [label="Control Dep"];
194 -> 198 [label="Control Dep"];
194 -> 196 [label="Control Dep"];
194 -> 197 [label="Control Dep"];
194 -> 199 [label="Control Dep"];
194 -> 212 [label="Control Dep"];
194 -> 211 [label="Control Dep"];
194 -> 204 [label="Control Dep"];
194 -> 210 [label="Control Dep"];
194 -> 205 [label="Control Dep"];
194 -> 209 [label="Control Dep"];
194 -> 207 [label="Control Dep"];
197 -> 201 [label="Data Dep"];
198 -> 196 [label="AST"];
198 -> 197 [label="AST"];
200 -> 198 [label="AST"];
200 -> 199 [label="AST"];
201 -> 204 [label="Define-Use"];
202 -> 201 [label="AST"];
202 -> 195 [label="AST"];
202 -> 200 [label="AST"];
209 -> 208 [label="AST"];
209 -> 207 [label="AST"];
210 -> 206 [label="AST"];
210 -> 209 [label="AST"];
210 -> 205 [label="AST"];
211 -> 204 [label="AST"];
211 -> 210 [label="AST"];
212 -> 211 [label="AST"];
213 -> 202 [label="AST"];
213 -> 212 [label="AST"];
214 -> 194 [label="AST"];
214 -> 213 [label="AST"];
215 -> 166 [label="AST"];
215 -> 174 [label="AST"];
215 -> 182 [label="AST"];
215 -> 189 [label="AST"];
215 -> 214 [label="AST"];
216 -> 224 [label="Define-Use"];
216 -> 230 [label="Define-Use"];
218 -> 216 [label="AST"];
218 -> 217 [label="AST"];
218 -> 239 [label="Control Dep"];
218 -> 228 [label="Control Dep"];
218 -> 219 [label="Control Dep"];
218 -> 226 [label="Control Dep"];
218 -> 221 [label="Control Dep"];
218 -> 225 [label="Control Dep"];
218 -> 222 [label="Control Dep"];
218 -> 224 [label="Control Dep"];
218 -> 227 [label="Control Dep"];
218 -> 238 [label="Control Dep"];
218 -> 237 [label="Control Dep"];
218 -> 230 [label="Control Dep"];
218 -> 236 [label="Control Dep"];
218 -> 231 [label="Control Dep"];
218 -> 235 [label="Control Dep"];
218 -> 233 [label="Control Dep"];
225 -> 223 [label="AST"];
225 -> 224 [label="AST"];
225 -> 222 [label="AST"];
226 -> 221 [label="AST"];
226 -> 225 [label="AST"];
228 -> 220 [label="AST"];
228 -> 219 [label="AST"];
228 -> 226 [label="AST"];
228 -> 227 [label="AST"];
235 -> 234 [label="AST"];
235 -> 233 [label="AST"];
236 -> 232 [label="AST"];
236 -> 235 [label="AST"];
236 -> 231 [label="AST"];
237 -> 230 [label="AST"];
237 -> 236 [label="AST"];
238 -> 237 [label="AST"];
239 -> 228 [label="AST"];
239 -> 238 [label="AST"];
240 -> 218 [label="AST"];
240 -> 239 [label="AST"];
241 -> 215 [label="AST"];
241 -> 240 [label="AST"];
242 -> 7 [label="AST"];
242 -> 12 [label="AST"];
242 -> 21 [label="AST"];
242 -> 26 [label="AST"];
242 -> 34 [label="AST"];
242 -> 39 [label="AST"];
242 -> 44 [label="AST"];
242 -> 55 [label="AST"];
242 -> 63 [label="AST"];
242 -> 73 [label="AST"];
242 -> 81 [label="AST"];
242 -> 89 [label="AST"];
242 -> 111 [label="AST"];
242 -> 119 [label="AST"];
242 -> 133 [label="AST"];
242 -> 141 [label="AST"];
242 -> 161 [label="AST"];
242 -> 241 [label="AST"];
243 -> 1 [label="AST"];
243 -> 0 [label="AST"];
243 -> 2 [label="AST"];
243 -> 242 [label="AST"];
244 -> 245 [label="Action"];
}