digraph "Pattern" {
0 [label="testReplaceTokens#?#7:UPDATE
testLineContains#?#6:UPDATE" shape=ellipse]
1 [label="testReplaceTokens#?#7:assertTrue(FILE_UTILS.contentEquals(expected, result))
testLineContains#?#6:assertTrue(FILE_UTILS.contentEquals(expected, result))" shape=ellipse]
2 [label="testReplaceTokens#?#2:\{
    executeTarget(\"testReplaceTokens\");
    File expected = FILE_UTILS.resolveFile(getProject().getBaseDir(), \"expected/replacetokens.test\");
    File result = new File(getProject().getProperty(\"output\"), \"replacetokens.test\");
    assertTrue(FILE_UTILS.contentEquals(expected, result));
\}
testLineContains#?#2:\{
    executeTarget(\"testLineContains\");
    File expected = FILE_UTILS.resolveFile(getProject().getBaseDir(), \"expected/linecontains.test\");
    File result = new File(getProject().getProperty(\"output\"), \"linecontains.test\");
    assertTrue(FILE_UTILS.contentEquals(expected, result));
\}" shape=ellipse]
3 [label="testReplaceTokens#?#2:public void testReplaceTokens() throws IOException \{
    executeTarget(\"testReplaceTokens\");
    File expected = FILE_UTILS.resolveFile(getProject().getBaseDir(), \"expected/replacetokens.test\");
    File result = new File(getProject().getProperty(\"output\"), \"replacetokens.test\");
    assertTrue(FILE_UTILS.contentEquals(expected, result));
\}
testLineContains#?#2:public void testLineContains() throws IOException \{
    executeTarget(\"testLineContains\");
    File expected = FILE_UTILS.resolveFile(getProject().getBaseDir(), \"expected/linecontains.test\");
    File result = new File(getProject().getProperty(\"output\"), \"linecontains.test\");
    assertTrue(FILE_UTILS.contentEquals(expected, result));
\}" shape=ellipse]
4 [label="testReplaceTokens#?#3:executeTarget(\"testReplaceTokens\")
testLineContains#?#3:executeTarget(\"testLineContains\")" shape=ellipse]
5 [label="testReplaceTokens#?#4:File expected = FILE_UTILS.resolveFile(getProject().getBaseDir(), \"expected/replacetokens.test\")
testLineContains#?#4:File expected = FILE_UTILS.resolveFile(getProject().getBaseDir(), \"expected/linecontains.test\")" shape=ellipse]
6 [label="testReplaceTokens#?#6:File result = new File(getProject().getProperty(\"output\"), \"replacetokens.test\")
testLineContains#?#5:File result = new File(getProject().getProperty(\"output\"), \"linecontains.test\")" shape=ellipse]
7 [label="testReplaceTokens#?#7:assertTrue
testLineContains#?#6:assertTrue" shape=ellipse]
8 [label="testReplaceTokens#?#-1:
testLineContains#?#-1:" shape=ellipse]
9 [label="testReplaceTokens#?#-1:PlaceHold
testLineContains#?#-1:PlaceHold" shape=ellipse]
10 [label="testReplaceTokens#?#-1:PlaceHold
testLineContains#?#-1:PlaceHold" shape=ellipse]
11 [label="testReplaceTokens#?#7:assertTrue(<unknown>)
testLineContains#?#6:assertTrue(<unknown>)" shape=ellipse]
12 [label="testReplaceTokens#?#-1:null
testLineContains#?#-1:null" shape=ellipse]
13 [label="testReplaceTokens#?#7:FILE_UTILS.contentEquals(expected, result)
testLineContains#?#6:FILE_UTILS.contentEquals(expected, result)" shape=ellipse]
14 [label="testReplaceTokens#?#7:contentEquals
testLineContains#?#6:contentEquals" shape=ellipse]
15 [label="testReplaceTokens#?#7:FILE_UTILS
testLineContains#?#6:FILE_UTILS" shape=ellipse]
16 [label="testReplaceTokens#?#7:contentEquals(File,File)
testLineContains#?#6:contentEquals(File,File)" shape=ellipse]
17 [label="testReplaceTokens#?#7:expected
testLineContains#?#6:expected" shape=ellipse]
18 [label="testReplaceTokens#?#7:result
testLineContains#?#6:result" shape=ellipse]
19 [label="testReplaceTokens#?#7:assertEquals(FileUtilities.getFileContents(expected), FileUtilities.getFileContents(result))
testLineContains#?#7:assertEquals(FileUtilities.getFileContents(expected), FileUtilities.getFileContents(result))" shape=ellipse]
0 -> 19 [label="Action:2"];
1 -> 0 [label="Action:2"];
1 -> 7 [label="AST:2"];
1 -> 8 [label="AST:2"];
1 -> 11 [label="AST:2"];
1 -> 13 [label="AST:2"];
2 -> 1 [label="AST:2"];
2 -> 4 [label="AST:2"];
2 -> 5 [label="AST:2"];
2 -> 6 [label="AST:2"];
3 -> 2 [label="AST:2"];
8 -> 9 [label="AST:2"];
8 -> 10 [label="AST:2"];
11 -> 12 [label="AST:2"];
13 -> 14 [label="AST:2"];
13 -> 15 [label="AST:2"];
13 -> 16 [label="AST:2"];
13 -> 17 [label="AST:2"];
13 -> 18 [label="AST:2"];
}