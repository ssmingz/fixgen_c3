digraph "setItems#?,String" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@setItems" shape=ellipse]
2 [label="2:CtParameterImpl@String itemString" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
4 [label="3:CtExecutableReferenceImpl@log(java.lang.String)" shape=ellipse]
5 [label="3:CtVirtualElement@log" shape=ellipse]
6 [label="3:CtFieldReadImpl@project" shape=ellipse]
7 [label="4:CtLiteralImpl@\"The items attribute is deprecated. \"" shape=ellipse]
8 [label="4:CtLiteralImpl@\"Please use the includes attribute.\"" shape=ellipse]
9 [label="4:CtBinaryOperatorImpl@\"The items attribute is deprecated. \" + \"Please use the includes attribute.\"" shape=ellipse]
10 [label="4:CtTypeAccessImpl@MSG_WARN" shape=ellipse]
11 [label="3:CtInvocationImpl@project.log(\"The items attribute is deprecated. \" + \"Please use the includes attribute.\", MSG_WARN)" shape=ellipse]
12 [label="5:CtVariableReadImpl@itemString" shape=ellipse]
13 [label="5:CtLiteralImpl@null" shape=ellipse]
14 [label="5:CtBinaryOperatorImpl@(itemString == null)" shape=ellipse]
15 [label="5:CtExecutableReferenceImpl@equals(java.lang.Object)" shape=ellipse]
16 [label="5:CtVirtualElement@equals" shape=ellipse]
17 [label="5:CtVariableReadImpl@itemString" shape=ellipse]
18 [label="5:CtLiteralImpl@\"*\"" shape=ellipse]
19 [label="5:CtInvocationImpl@itemString.equals(\"*\")" shape=ellipse]
20 [label="5:CtBinaryOperatorImpl@((itemString == null) || itemString.equals(\"*\"))" shape=ellipse]
21 [label="5:CtExecutableReferenceImpl@equals(java.lang.Object)" shape=ellipse]
22 [label="5:CtVirtualElement@equals" shape=ellipse]
23 [label="5:CtVariableReadImpl@itemString" shape=ellipse]
24 [label="5:CtLiteralImpl@\".\"" shape=ellipse]
25 [label="5:CtInvocationImpl@itemString.equals(\".\")" shape=ellipse]
26 [label="5:CtBinaryOperatorImpl@((itemString == null) || itemString.equals(\"*\")) || itemString.equals(\".\")" shape=ellipse]
27 [label="6:CtExecutableReferenceImpl@setName(java.lang.String)" shape=ellipse]
28 [label="6:CtVirtualElement@setName" shape=ellipse]
29 [label="6:CtExecutableReferenceImpl@createInclude()" shape=ellipse]
30 [label="6:CtVirtualElement@createInclude" shape=ellipse]
31 [label="6:CtInvocationImpl@createInclude()" shape=ellipse]
32 [label="6:CtLiteralImpl@\"**\"" shape=ellipse]
33 [label="6:CtInvocationImpl@createInclude().setName(\"**\")" shape=ellipse]
34 [label="5:CtBlockImpl@\{
    createInclude().setName(\"**\");
\}" shape=ellipse]
35 [label="8:CtTypeReferenceImpl@StringTokenizer" shape=ellipse]
36 [label="8:CtTypeReferenceImpl@StringTokenizer" shape=ellipse]
37 [label="8:CtVariableReadImpl@itemString" shape=ellipse]
38 [label="8:CtLiteralImpl@\", \"" shape=ellipse]
39 [label="8:CtConstructorCallImpl@new StringTokenizer(itemString, \", \")" shape=ellipse]
40 [label="8:CtVirtualElement@tok" shape=ellipse]
41 [label="8:CtLocalVariableImpl@StringTokenizer tok = new StringTokenizer(itemString, \", \")" shape=ellipse]
42 [label="9:CtExecutableReferenceImpl@hasMoreTokens()" shape=ellipse]
43 [label="9:CtVirtualElement@hasMoreTokens" shape=ellipse]
44 [label="9:CtVariableReadImpl@tok" shape=ellipse]
45 [label="9:CtInvocationImpl@tok.hasMoreTokens()" shape=ellipse]
46 [label="10:CtTypeReferenceImpl@String" shape=ellipse]
47 [label="10:CtExecutableReferenceImpl@trim()" shape=ellipse]
48 [label="10:CtVirtualElement@trim" shape=ellipse]
49 [label="10:CtExecutableReferenceImpl@nextToken()" shape=ellipse]
50 [label="10:CtVirtualElement@nextToken" shape=ellipse]
51 [label="10:CtVariableReadImpl@tok" shape=ellipse]
52 [label="10:CtInvocationImpl@tok.nextToken()" shape=ellipse]
53 [label="10:CtInvocationImpl@tok.nextToken().trim()" shape=ellipse]
54 [label="10:CtVirtualElement@pattern" shape=ellipse]
55 [label="10:CtLocalVariableImpl@String pattern = tok.nextToken().trim()" shape=ellipse]
56 [label="11:CtExecutableReferenceImpl@length()" shape=ellipse]
57 [label="11:CtVirtualElement@length" shape=ellipse]
58 [label="11:CtVariableReadImpl@pattern" shape=ellipse]
59 [label="11:CtInvocationImpl@pattern.length()" shape=ellipse]
60 [label="11:CtLiteralImpl@0" shape=ellipse]
61 [label="11:CtBinaryOperatorImpl@pattern.length() > 0" shape=ellipse]
62 [label="12:CtExecutableReferenceImpl@setName(java.lang.String)" shape=ellipse]
63 [label="12:CtVirtualElement@setName" shape=ellipse]
64 [label="12:CtExecutableReferenceImpl@createInclude()" shape=ellipse]
65 [label="12:CtVirtualElement@createInclude" shape=ellipse]
66 [label="12:CtInvocationImpl@createInclude()" shape=ellipse]
67 [label="12:CtVariableReadImpl@pattern" shape=ellipse]
68 [label="12:CtLiteralImpl@\"/**\"" shape=ellipse]
69 [label="12:CtBinaryOperatorImpl@pattern + \"/**\"" shape=ellipse]
70 [label="12:CtInvocationImpl@createInclude().setName(pattern + \"/**\")" shape=ellipse]
71 [label="11:CtBlockImpl@\{
    createInclude().setName(pattern + \"/**\");
\}" shape=ellipse]
72 [label="11:CtIfImpl@if (pattern.length() > 0) \{
    createInclude().setName(pattern + \"/**\");
\}" shape=ellipse]
73 [label="9:CtBlockImpl@\{
    String pattern = tok.nextToken().trim();
    if (pattern.length() > 0) \{
        createInclude().setName(pattern + \"/**\");
    \}
\}" shape=ellipse]
74 [label="9:CtWhileImpl@while (tok.hasMoreTokens()) \{
    String pattern = tok.nextToken().trim();
    if (pattern.length() > 0) \{
        createInclude().setName(pattern + \"/**\");
    \}
\} " shape=ellipse]
75 [label="7:CtBlockImpl@\{
    StringTokenizer tok = new StringTokenizer(itemString, \", \");
    while (tok.hasMoreTokens()) \{
        String pattern = tok.nextToken().trim();
        if (pattern.length() > 0) \{
            createInclude().setName(pattern + \"/**\");
        \}
    \} 
\}" shape=ellipse]
76 [label="5:CtIfImpl@if (((itemString == null) || itemString.equals(\"*\")) || itemString.equals(\".\")) \{
    createInclude().setName(\"**\");
\} else \{
    StringTokenizer tok = new StringTokenizer(itemString, \", \");
    while (tok.hasMoreTokens()) \{
        String pattern = tok.nextToken().trim();
        if (pattern.length() > 0) \{
            createInclude().setName(pattern + \"/**\");
        \}
    \} 
\}" shape=ellipse]
77 [label="2:CtBlockImpl@\{
    project.log(\"The items attribute is deprecated. \" + \"Please use the includes attribute.\", MSG_WARN);
    if (((itemString == null) || itemString.equals(\"*\")) || itemString.equals(\".\")) \{
        createInclude().setName(\"**\");
    \} else \{
        StringTokenizer tok = new StringTokenizer(itemString, \", \");
        while (tok.hasMoreTokens()) \{
            String pattern = tok.nextToken().trim();
            if (pattern.length() > 0) \{
                createInclude().setName(pattern + \"/**\");
            \}
        \} 
    \}
\}" shape=ellipse]
78 [label="2:CtMethodImpl@public void setItems(String itemString) \{
    project.log(\"The items attribute is deprecated. \" + \"Please use the includes attribute.\", MSG_WARN);
    if (((itemString == null) || itemString.equals(\"*\")) || itemString.equals(\".\")) \{
        createInclude().setName(\"**\");
    \} else \{
        StringTokenizer tok = new StringTokenizer(itemString, \", \");
        while (tok.hasMoreTokens()) \{
            String pattern = tok.nextToken().trim();
            if (pattern.length() > 0) \{
                createInclude().setName(pattern + \"/**\");
            \}
        \} 
    \}
\}" shape=ellipse]
79 [label="3:Delete@DELETE" shape=ellipse]
2 -> 3 [label="AST"];
6 -> 79 [label="Action"];
9 -> 7 [label="AST"];
9 -> 8 [label="AST"];
11 -> 5 [label="AST"];
11 -> 6 [label="AST"];
11 -> 4 [label="AST"];
11 -> 9 [label="AST"];
11 -> 10 [label="AST"];
14 -> 12 [label="AST"];
14 -> 13 [label="AST"];
19 -> 16 [label="AST"];
19 -> 17 [label="AST"];
19 -> 15 [label="AST"];
19 -> 18 [label="AST"];
20 -> 14 [label="AST"];
20 -> 19 [label="AST"];
25 -> 22 [label="AST"];
25 -> 23 [label="AST"];
25 -> 21 [label="AST"];
25 -> 24 [label="AST"];
26 -> 20 [label="AST"];
26 -> 25 [label="AST"];
26 -> 34 [label="Control Dep"];
26 -> 33 [label="Control Dep"];
26 -> 27 [label="Control Dep"];
26 -> 31 [label="Control Dep"];
26 -> 29 [label="Control Dep"];
26 -> 32 [label="Control Dep"];
26 -> 75 [label="Control Dep"];
26 -> 41 [label="Control Dep"];
26 -> 39 [label="Control Dep"];
26 -> 37 [label="Control Dep"];
26 -> 38 [label="Control Dep"];
26 -> 74 [label="Control Dep"];
26 -> 45 [label="Control Dep"];
26 -> 42 [label="Control Dep"];
26 -> 44 [label="Control Dep"];
31 -> 30 [label="AST"];
31 -> 29 [label="AST"];
33 -> 28 [label="AST"];
33 -> 31 [label="AST"];
33 -> 27 [label="AST"];
33 -> 32 [label="AST"];
34 -> 33 [label="AST"];
37 -> 40 [label="Data Dep"];
39 -> 37 [label="AST"];
39 -> 38 [label="AST"];
40 -> 44 [label="Define-Use"];
40 -> 51 [label="Define-Use"];
41 -> 40 [label="AST"];
41 -> 35 [label="AST"];
41 -> 39 [label="AST"];
45 -> 43 [label="AST"];
45 -> 44 [label="AST"];
45 -> 42 [label="AST"];
45 -> 73 [label="Control Dep"];
45 -> 55 [label="Control Dep"];
45 -> 53 [label="Control Dep"];
45 -> 47 [label="Control Dep"];
45 -> 52 [label="Control Dep"];
45 -> 49 [label="Control Dep"];
45 -> 51 [label="Control Dep"];
45 -> 72 [label="Control Dep"];
45 -> 61 [label="Control Dep"];
45 -> 59 [label="Control Dep"];
45 -> 56 [label="Control Dep"];
45 -> 58 [label="Control Dep"];
45 -> 60 [label="Control Dep"];
51 -> 54 [label="Data Dep"];
52 -> 50 [label="AST"];
52 -> 51 [label="AST"];
52 -> 49 [label="AST"];
53 -> 48 [label="AST"];
53 -> 52 [label="AST"];
53 -> 47 [label="AST"];
54 -> 58 [label="Define-Use"];
54 -> 67 [label="Define-Use"];
55 -> 54 [label="AST"];
55 -> 46 [label="AST"];
55 -> 53 [label="AST"];
59 -> 57 [label="AST"];
59 -> 58 [label="AST"];
59 -> 56 [label="AST"];
61 -> 59 [label="AST"];
61 -> 60 [label="AST"];
61 -> 71 [label="Control Dep"];
61 -> 70 [label="Control Dep"];
61 -> 62 [label="Control Dep"];
61 -> 66 [label="Control Dep"];
61 -> 64 [label="Control Dep"];
61 -> 69 [label="Control Dep"];
61 -> 67 [label="Control Dep"];
61 -> 68 [label="Control Dep"];
66 -> 65 [label="AST"];
66 -> 64 [label="AST"];
69 -> 67 [label="AST"];
69 -> 68 [label="AST"];
70 -> 63 [label="AST"];
70 -> 66 [label="AST"];
70 -> 62 [label="AST"];
70 -> 69 [label="AST"];
71 -> 70 [label="AST"];
72 -> 61 [label="AST"];
72 -> 71 [label="AST"];
73 -> 55 [label="AST"];
73 -> 72 [label="AST"];
74 -> 45 [label="AST"];
74 -> 73 [label="AST"];
75 -> 41 [label="AST"];
75 -> 74 [label="AST"];
76 -> 26 [label="AST"];
76 -> 34 [label="AST"];
76 -> 75 [label="AST"];
77 -> 11 [label="AST"];
77 -> 76 [label="AST"];
78 -> 1 [label="AST"];
78 -> 0 [label="AST"];
78 -> 2 [label="AST"];
78 -> 77 [label="AST"];
}