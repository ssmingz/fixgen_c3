digraph "assertEquals#?,String,double,double,double" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@assertEquals" shape=ellipse]
2 [label="2:CtParameterImpl@String message" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
4 [label="2:CtParameterImpl@double expected" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@double" shape=ellipse]
6 [label="2:CtParameterImpl@double actual" shape=ellipse]
7 [label="2:CtTypeReferenceImpl@double" shape=ellipse]
8 [label="2:CtParameterImpl@double delta" shape=ellipse]
9 [label="2:CtTypeReferenceImpl@double" shape=ellipse]
10 [label="3:CtExecutableReferenceImpl@compare(double,double)" shape=ellipse]
11 [label="3:CtTypeReferenceImpl@Double" shape=ellipse]
12 [label="3:CtTypeReferenceImpl@int" shape=ellipse]
13 [label="3:CtTypeReferenceImpl@double" shape=ellipse]
14 [label="3:CtTypeReferenceImpl@double" shape=ellipse]
15 [label="3:CtVirtualElement@compare" shape=ellipse]
16 [label="3:CtTypeAccessImpl@Double" shape=ellipse]
17 [label="3:CtTypeReferenceImpl@Double" shape=ellipse]
18 [label="3:CtVariableReadImpl@expected" shape=ellipse]
19 [label="3:CtParameterReferenceImpl@expected" shape=ellipse]
20 [label="3:CtVariableReadImpl@actual" shape=ellipse]
21 [label="3:CtParameterReferenceImpl@actual" shape=ellipse]
22 [label="3:CtInvocationImpl@Double.compare(expected, actual)" shape=ellipse]
23 [label="3:CtLiteralImpl@0" shape=ellipse]
24 [label="3:CtTypeReferenceImpl@int" shape=ellipse]
25 [label="3:CtBinaryOperatorImpl@Double.compare(expected, actual) == 0" shape=ellipse]
26 [label="3:CtTypeReferenceImpl@boolean" shape=ellipse]
27 [label="4:CtReturnImpl@return" shape=ellipse]
28 [label="3:CtBlockImpl@\{
    return;
\}" shape=ellipse]
29 [label="3:CtIfImpl@if (Double.compare(expected, actual) == 0) \{
    return;
\}" shape=ellipse]
30 [label="6:CtExecutableReferenceImpl@abs(double)" shape=ellipse]
31 [label="6:CtTypeReferenceImpl@Math" shape=ellipse]
32 [label="6:CtTypeReferenceImpl@double" shape=ellipse]
33 [label="6:CtTypeReferenceImpl@double" shape=ellipse]
34 [label="6:CtVirtualElement@abs" shape=ellipse]
35 [label="6:CtTypeAccessImpl@Math" shape=ellipse]
36 [label="6:CtTypeReferenceImpl@Math" shape=ellipse]
37 [label="6:CtVariableReadImpl@expected" shape=ellipse]
38 [label="6:CtParameterReferenceImpl@expected" shape=ellipse]
39 [label="6:CtVariableReadImpl@actual" shape=ellipse]
40 [label="6:CtParameterReferenceImpl@actual" shape=ellipse]
41 [label="6:CtBinaryOperatorImpl@expected - actual" shape=ellipse]
42 [label="6:CtTypeReferenceImpl@double" shape=ellipse]
43 [label="6:CtInvocationImpl@Math.abs(expected - actual)" shape=ellipse]
44 [label="6:CtVariableReadImpl@delta" shape=ellipse]
45 [label="6:CtParameterReferenceImpl@delta" shape=ellipse]
46 [label="6:CtBinaryOperatorImpl@(Math.abs(expected - actual) <= delta)" shape=ellipse]
47 [label="6:CtTypeReferenceImpl@boolean" shape=ellipse]
48 [label="6:CtUnaryOperatorImpl@!(Math.abs(expected - actual) <= delta)" shape=ellipse]
49 [label="6:CtTypeReferenceImpl@boolean" shape=ellipse]
50 [label="7:CtExecutableReferenceImpl@failNotEquals(java.lang.String,java.lang.Double,java.lang.Double)" shape=ellipse]
51 [label="7:CtTypeReferenceImpl@String" shape=ellipse]
52 [label="7:CtTypeReferenceImpl@Double" shape=ellipse]
53 [label="7:CtTypeReferenceImpl@Double" shape=ellipse]
54 [label="7:CtVirtualElement@failNotEquals" shape=ellipse]
55 [label="7:CtTypeAccessImpl@PlaceHold" shape=ellipse]
56 [label="7:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
57 [label="7:CtThisAccessImpl@" shape=ellipse]
58 [label="7:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
59 [label="7:CtVariableReadImpl@message" shape=ellipse]
60 [label="7:CtParameterReferenceImpl@message" shape=ellipse]
61 [label="7:CtExecutableReferenceImpl@java.lang.Double(double)" shape=ellipse]
62 [label="7:CtTypeReferenceImpl@Double" shape=ellipse]
63 [label="7:CtTypeReferenceImpl@Double" shape=ellipse]
64 [label="7:CtTypeReferenceImpl@double" shape=ellipse]
65 [label="7:CtVariableReadImpl@expected" shape=ellipse]
66 [label="7:CtParameterReferenceImpl@expected" shape=ellipse]
67 [label="7:CtConstructorCallImpl@new Double(expected)" shape=ellipse]
68 [label="7:CtExecutableReferenceImpl@java.lang.Double(double)" shape=ellipse]
69 [label="7:CtTypeReferenceImpl@Double" shape=ellipse]
70 [label="7:CtTypeReferenceImpl@Double" shape=ellipse]
71 [label="7:CtTypeReferenceImpl@double" shape=ellipse]
72 [label="7:CtVariableReadImpl@actual" shape=ellipse]
73 [label="7:CtParameterReferenceImpl@actual" shape=ellipse]
74 [label="7:CtConstructorCallImpl@new Double(actual)" shape=ellipse]
75 [label="7:CtInvocationImpl@failNotEquals(message, new Double(expected), new Double(actual))" shape=ellipse]
76 [label="6:CtBlockImpl@\{
    failNotEquals(message, new Double(expected), new Double(actual));
\}" shape=ellipse]
77 [label="6:CtIfImpl@if (!(Math.abs(expected - actual) <= delta)) \{
    failNotEquals(message, new Double(expected), new Double(actual));
\}" shape=ellipse]
78 [label="2:CtBlockImpl@\{
    if (Double.compare(expected, actual) == 0) \{
        return;
    \}
    if (!(Math.abs(expected - actual) <= delta)) \{
        failNotEquals(message, new Double(expected), new Double(actual));
    \}
\}" shape=ellipse]
79 [label="2:CtMethodImpl@public static void assertEquals(String message, double expected, double actual, double delta) \{
    if (Double.compare(expected, actual) == 0) \{
        return;
    \}
    if (!(Math.abs(expected - actual) <= delta)) \{
        failNotEquals(message, new Double(expected), new Double(actual));
    \}
\}" shape=ellipse]
80 [label="6:Update@UPDATE" shape=ellipse]
81 [label="3:CtPackageReferenceImpl@" shape=ellipse]
82 [label="3:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
83 [label="3:CtTypeAccessImpl@PlaceHold" shape=ellipse]
84 [label="3:Delete@DELETE" shape=ellipse]
85 [label="6:Delete@DELETE" shape=ellipse]
86 [label="3:Insert@INSERT" shape=ellipse]
87 [label="3:CtPackageReferenceImpl@" shape=ellipse]
88 [label="3:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
89 [label="3:CtPackageReferenceImpl@" shape=ellipse]
90 [label="3:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
91 [label="3:CtTypeAccessImpl@PlaceHold" shape=ellipse]
92 [label="3:CtThisAccessImpl@" shape=ellipse]
93 [label="3:CtTypeReferenceImpl@boolean" shape=ellipse]
94 [label="3:CtTypeReferenceImpl@double" shape=ellipse]
95 [label="3:CtTypeReferenceImpl@double" shape=ellipse]
96 [label="3:CtTypeReferenceImpl@double" shape=ellipse]
97 [label="3:CtExecutableReferenceImpl@doubleIsDifferent(double,double,double)" shape=ellipse]
98 [label="3:CtTypeReferenceImpl@double" shape=ellipse]
99 [label="3:CtParameterReferenceImpl@expected" shape=ellipse]
100 [label="3:CtVariableReadImpl@expected" shape=ellipse]
101 [label="3:CtTypeReferenceImpl@double" shape=ellipse]
102 [label="3:CtParameterReferenceImpl@actual" shape=ellipse]
103 [label="3:CtVariableReadImpl@actual" shape=ellipse]
104 [label="3:CtTypeReferenceImpl@double" shape=ellipse]
105 [label="3:CtParameterReferenceImpl@delta" shape=ellipse]
106 [label="3:CtVariableReadImpl@delta" shape=ellipse]
107 [label="3:CtInvocationImpl@doubleIsDifferent(, , )" shape=ellipse]
108 [label="3:CtVirtualElement@doubleIsDifferent" shape=ellipse]
109 [label="6:Move@MOVE" shape=ellipse]
110 [label="6:Move@MOVE" shape=ellipse]
111 [label="6:Move@MOVE" shape=ellipse]
112 [label="6:Move@MOVE" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
6 -> 7 [label="AST"];
8 -> 9 [label="AST"];
10 -> 11 [label="AST"];
10 -> 12 [label="AST"];
10 -> 13 [label="AST"];
10 -> 14 [label="AST"];
16 -> 17 [label="AST"];
18 -> 19 [label="AST"];
20 -> 21 [label="AST"];
22 -> 15 [label="AST"];
22 -> 16 [label="AST"];
22 -> 10 [label="AST"];
22 -> 18 [label="AST"];
22 -> 20 [label="AST"];
23 -> 24 [label="AST"];
25 -> 26 [label="AST"];
25 -> 22 [label="AST"];
25 -> 23 [label="AST"];
25 -> 28 [label="Control Dep"];
25 -> 27 [label="Control Dep"];
28 -> 27 [label="AST"];
29 -> 25 [label="AST"];
29 -> 28 [label="AST"];
29 -> 84 [label="Action"];
30 -> 31 [label="AST"];
30 -> 32 [label="AST"];
30 -> 33 [label="AST"];
35 -> 36 [label="AST"];
35 -> 80 [label="Action"];
35 -> 109 [label="Action"];
37 -> 38 [label="AST"];
37 -> 110 [label="Action"];
39 -> 40 [label="AST"];
39 -> 111 [label="Action"];
41 -> 42 [label="AST"];
41 -> 37 [label="AST"];
41 -> 39 [label="AST"];
43 -> 34 [label="AST"];
43 -> 35 [label="AST"];
43 -> 30 [label="AST"];
43 -> 41 [label="AST"];
44 -> 45 [label="AST"];
44 -> 112 [label="Action"];
46 -> 47 [label="AST"];
46 -> 43 [label="AST"];
46 -> 44 [label="AST"];
48 -> 49 [label="AST"];
48 -> 46 [label="AST"];
48 -> 76 [label="Control Dep"];
48 -> 75 [label="Control Dep"];
48 -> 50 [label="Control Dep"];
48 -> 57 [label="Control Dep"];
48 -> 55 [label="Control Dep"];
48 -> 59 [label="Control Dep"];
48 -> 67 [label="Control Dep"];
48 -> 61 [label="Control Dep"];
48 -> 65 [label="Control Dep"];
48 -> 74 [label="Control Dep"];
48 -> 68 [label="Control Dep"];
48 -> 72 [label="Control Dep"];
48 -> 85 [label="Action"];
50 -> 51 [label="AST"];
50 -> 52 [label="AST"];
50 -> 53 [label="AST"];
55 -> 56 [label="AST"];
57 -> 58 [label="AST"];
57 -> 55 [label="AST"];
59 -> 60 [label="AST"];
61 -> 62 [label="AST"];
61 -> 63 [label="AST"];
61 -> 64 [label="AST"];
65 -> 66 [label="AST"];
67 -> 61 [label="AST"];
67 -> 65 [label="AST"];
68 -> 69 [label="AST"];
68 -> 70 [label="AST"];
68 -> 71 [label="AST"];
72 -> 73 [label="AST"];
74 -> 68 [label="AST"];
74 -> 72 [label="AST"];
75 -> 54 [label="AST"];
75 -> 57 [label="AST"];
75 -> 50 [label="AST"];
75 -> 59 [label="AST"];
75 -> 67 [label="AST"];
75 -> 74 [label="AST"];
76 -> 75 [label="AST"];
77 -> 48 [label="AST"];
77 -> 76 [label="AST"];
77 -> 86 [label="Action"];
78 -> 29 [label="AST"];
78 -> 77 [label="AST"];
79 -> 1 [label="AST"];
79 -> 0 [label="AST"];
79 -> 2 [label="AST"];
79 -> 4 [label="AST"];
79 -> 6 [label="AST"];
79 -> 8 [label="AST"];
79 -> 78 [label="AST"];
80 -> 91 [label="Action"];
80 -> 91 [label="Action"];
90 -> 89 [label="AST"];
90 -> 89 [label="AST"];
91 -> 90 [label="AST"];
91 -> 90 [label="AST"];
86 -> 107 [label="Action"];
88 -> 87 [label="AST"];
90 -> 89 [label="AST"];
90 -> 89 [label="AST"];
91 -> 90 [label="AST"];
91 -> 90 [label="AST"];
92 -> 88 [label="AST"];
92 -> 91 [label="AST"];
92 -> 91 [label="AST"];
97 -> 93 [label="AST"];
97 -> 94 [label="AST"];
97 -> 95 [label="AST"];
97 -> 96 [label="AST"];
99 -> 98 [label="AST"];
100 -> 99 [label="AST"];
102 -> 101 [label="AST"];
103 -> 102 [label="AST"];
105 -> 104 [label="AST"];
106 -> 105 [label="AST"];
107 -> 108 [label="AST"];
107 -> 92 [label="AST"];
107 -> 97 [label="AST"];
107 -> 100 [label="AST"];
107 -> 103 [label="AST"];
107 -> 106 [label="AST"];
107 -> 76 [label="Control Dep"];
107 -> 75 [label="Control Dep"];
107 -> 50 [label="Control Dep"];
107 -> 57 [label="Control Dep"];
107 -> 55 [label="Control Dep"];
107 -> 59 [label="Control Dep"];
107 -> 67 [label="Control Dep"];
107 -> 61 [label="Control Dep"];
107 -> 65 [label="Control Dep"];
107 -> 74 [label="Control Dep"];
107 -> 68 [label="Control Dep"];
107 -> 72 [label="Control Dep"];
109 -> 107 [label="Action"];
110 -> 107 [label="Action"];
111 -> 107 [label="Action"];
112 -> 107 [label="Action"];
}