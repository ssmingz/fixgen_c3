digraph "Pattern" {
0 [label="preferRecentlyFailed#?#7:UPDATE
preferFast#?#7:UPDATE
twoTestsNotRunComeBackInRandomOrder#?#6:UPDATE" shape=ellipse]
1 [label="preferRecentlyFailed#?#7:max.sort(request)
preferFast#?#7:max.sort(request)
twoTestsNotRunComeBackInRandomOrder#?#6:max.sort(request)" shape=ellipse]
2 [label="preferRecentlyFailed#?#7:List<Description> tests = max.sort(request)
twoTestsNotRunComeBackInRandomOrder#?#6:List<Description> things = max.sort(request)" shape=ellipse]
3 [label="preferRecentlyFailed#?#3:\{
    Request request = Request.aClass(TwoTests.class);
    MaxCore max = MaxCore.createFresh();
    max.run(request);
    List<Description> tests = max.sort(request);
    Description dontSucceed = Description.createTestDescription(TwoTests.class, \"dontSucceed\");
    assertEquals(dontSucceed, tests.get(0));
\}
twoTestsNotRunComeBackInRandomOrder#?#3:\{
    Request request = Request.aClass(TwoTests.class);
    MaxCore max = MaxCore.createFresh();
    List<Description> things = max.sort(request);
    Description succeed = Description.createTestDescription(TwoTests.class, \"succeed\");
    Description dontSucceed = Description.createTestDescription(TwoTests.class, \"dontSucceed\");
    assertTrue(things.contains(succeed));
    assertTrue(things.contains(dontSucceed));
    assertEquals(2, things.size());
\}" shape=ellipse]
4 [label="preferRecentlyFailed#?#7:tests
preferFast#?#4:request
twoTestsNotRunComeBackInRandomOrder#?#6:things" shape=ellipse]
5 [label="preferRecentlyFailed#?#7:List<Description>
preferFast#?#7:get(int)
twoTestsNotRunComeBackInRandomOrder#?#6:List<Description>" shape=ellipse]
6 [label="preferRecentlyFailed#?#7:sort
preferFast#?#7:sort
twoTestsNotRunComeBackInRandomOrder#?#6:sort" shape=ellipse]
7 [label="preferRecentlyFailed#?#7:max
twoTestsNotRunComeBackInRandomOrder#?#6:max" shape=ellipse]
8 [label="preferRecentlyFailed#?#5:max
preferFast#?#5:max
twoTestsNotRunComeBackInRandomOrder#?#5:max" shape=ellipse]
9 [label="preferRecentlyFailed#?#7:max
preferFast#?#7:max
twoTestsNotRunComeBackInRandomOrder#?#6:max" shape=ellipse]
10 [label="preferRecentlyFailed#?#7:sort(Request)
preferFast#?#7:sort(Request)
twoTestsNotRunComeBackInRandomOrder#?#6:sort(Request)" shape=ellipse]
11 [label="preferRecentlyFailed#?#7:MaxCore
preferFast#?#7:MaxCore
twoTestsNotRunComeBackInRandomOrder#?#6:MaxCore" shape=ellipse]
12 [label="preferRecentlyFailed#?#7:List<Description>
preferFast#?#7:Request
twoTestsNotRunComeBackInRandomOrder#?#6:List<Description>" shape=ellipse]
13 [label="preferRecentlyFailed#?#7:Request
twoTestsNotRunComeBackInRandomOrder#?#6:Request" shape=ellipse]
14 [label="preferRecentlyFailed#?#7:request
twoTestsNotRunComeBackInRandomOrder#?#6:request" shape=ellipse]
15 [label="preferRecentlyFailed#?#4:request
preferFast#?#7:request
twoTestsNotRunComeBackInRandomOrder#?#4:request" shape=ellipse]
16 [label="preferRecentlyFailed#?#7:request
preferFast#?#7:thing
twoTestsNotRunComeBackInRandomOrder#?#6:request" shape=ellipse]
17 [label="preferRecentlyFailed#?#7:sortedLeavesForTest
preferFast#?#7:sortedLeavesForTest
twoTestsNotRunComeBackInRandomOrder#?#6:sortedLeavesForTest" shape=ellipse]
18 [label="preferRecentlyFailed#?#7:sortedLeavesForTest(Request)
preferFast#?#7:sortedLeavesForTest(Request)
twoTestsNotRunComeBackInRandomOrder#?#6:sortedLeavesForTest(Request)" shape=ellipse]
19 [label="preferRecentlyFailed#?#7:MaxCore
preferFast#?#7:MaxCore
twoTestsNotRunComeBackInRandomOrder#?#6:MaxCore" shape=ellipse]
20 [label="preferRecentlyFailed#?#7:
preferFast#?#7:
twoTestsNotRunComeBackInRandomOrder#?#6:" shape=ellipse]
21 [label="preferRecentlyFailed#?#7:Request
preferFast#?#7:Request
twoTestsNotRunComeBackInRandomOrder#?#6:Request" shape=ellipse]
22 [label="preferRecentlyFailed#?#7:
preferFast#?#7:
twoTestsNotRunComeBackInRandomOrder#?#6:" shape=ellipse]
23 [label="preferFast#?#7:max.sort(request).get(1)" shape=ellipse]
24 [label="preferFast#?#7:1" shape=ellipse]
25 [label="preferFast#?#7:max" shape=ellipse]
26 [label="preferFast#?#7:request" shape=ellipse]
27 [label="preferFast#?#7:get" shape=ellipse]
28 [label="preferFast#?#7:Description thing = max.sort(request).get(1)" shape=ellipse]
1 -> 0 [label="Action:3"];
1 -> 6 [label="AST:3"];
1 -> 7 [label="AST:2"];
1 -> 10 [label="AST:3"];
1 -> 14 [label="AST:2"];
1 -> 25 [label="AST:1"];
1 -> 26 [label="AST:1"];
2 -> 1 [label="AST:2"];
2 -> 4 [label="AST:2"];
2 -> 5 [label="AST:2"];
3 -> 2 [label="AST:2"];
4 -> 26 [label="Define Use:1"];
7 -> 4 [label="Data Dep:2"];
7 -> 9 [label="AST:2"];
8 -> 7 [label="Define Use:2"];
8 -> 25 [label="Define Use:1"];
10 -> 11 [label="AST:3"];
10 -> 12 [label="AST:3"];
10 -> 13 [label="AST:2"];
14 -> 4 [label="Data Dep:2"];
14 -> 16 [label="AST:2"];
15 -> 14 [label="Define Use:2"];
18 -> 19 [label="AST:3"];
18 -> 21 [label="AST:3"];
19 -> 20 [label="AST:3"];
21 -> 22 [label="AST:3"];
23 -> 27 [label="AST:1"];
23 -> 1 [label="AST:1"];
23 -> 5 [label="AST:1"];
23 -> 24 [label="AST:1"];
25 -> 9 [label="AST:1"];
25 -> 16 [label="Data Dep:1"];
26 -> 15 [label="AST:1"];
26 -> 16 [label="Data Dep:1"];
28 -> 23 [label="AST:1"];
28 -> 16 [label="AST:1"];
}