digraph "buildParameterSupplierFromClass#?,Class" {
0 [label="2:CtTypeReferenceImpl@ParameterSupplier" shape=ellipse]
1 [label="2:CtPackageReferenceImpl@" shape=ellipse]
2 [label="2:CtVirtualElement@buildParameterSupplierFromClass" shape=ellipse]
3 [label="2:CtParameterImpl@Class<? extends ParameterSupplier> cls" shape=ellipse]
4 [label="2:CtTypeReferenceImpl@Class<? extends ParameterSupplier>" shape=ellipse]
5 [label="3:CtTypeReferenceImpl@Exception" shape=ellipse]
6 [label="3:CtPackageReferenceImpl@java.lang" shape=ellipse]
7 [label="4:CtVirtualElement@Constructor[]" shape=ellipse]
8 [label="4:CtArrayTypeReferenceImpl@Constructor<?>[]" shape=ellipse]
9 [label="4:CtTypeReferenceImpl@Constructor<?>" shape=ellipse]
10 [label="4:CtExecutableReferenceImpl@getConstructors()" shape=ellipse]
11 [label="4:CtTypeReferenceImpl@Class" shape=ellipse]
12 [label="4:CtArrayTypeReferenceImpl@Constructor<?>[]" shape=ellipse]
13 [label="4:CtVirtualElement@getConstructors" shape=ellipse]
14 [label="4:CtVariableReadImpl@cls" shape=ellipse]
15 [label="4:CtParameterReferenceImpl@cls" shape=ellipse]
16 [label="4:CtInvocationImpl@cls.getConstructors()" shape=ellipse]
17 [label="4:CtVirtualElement@supplierConstructors" shape=ellipse]
18 [label="4:CtLocalVariableImpl@Constructor<?>[] supplierConstructors = cls.getConstructors()" shape=ellipse]
19 [label="5:CtTypeReferenceImpl@Constructor<?>" shape=ellipse]
20 [label="5:CtPackageReferenceImpl@" shape=ellipse]
21 [label="5:CtWildcardReferenceImpl@?" shape=ellipse]
22 [label="5:CtVirtualElement@constructor" shape=ellipse]
23 [label="5:CtLocalVariableImpl@Constructor<?> constructor" shape=ellipse]
24 [label="5:CtVariableReadImpl@supplierConstructors" shape=ellipse]
25 [label="5:CtLocalVariableReferenceImpl@supplierConstructors" shape=ellipse]
26 [label="6:CtVirtualElement@Class[]" shape=ellipse]
27 [label="6:CtArrayTypeReferenceImpl@Class<?>[]" shape=ellipse]
28 [label="6:CtTypeReferenceImpl@Class<?>" shape=ellipse]
29 [label="6:CtExecutableReferenceImpl@getParameterTypes()" shape=ellipse]
30 [label="6:CtTypeReferenceImpl@Constructor<?>" shape=ellipse]
31 [label="6:CtArrayTypeReferenceImpl@Class<?>[]" shape=ellipse]
32 [label="6:CtVirtualElement@getParameterTypes" shape=ellipse]
33 [label="6:CtVariableReadImpl@constructor" shape=ellipse]
34 [label="6:CtLocalVariableReferenceImpl@constructor" shape=ellipse]
35 [label="6:CtInvocationImpl@constructor.getParameterTypes()" shape=ellipse]
36 [label="6:CtVirtualElement@parameterTypes" shape=ellipse]
37 [label="6:CtLocalVariableImpl@Class<?>[] parameterTypes = constructor.getParameterTypes()" shape=ellipse]
38 [label="7:CtFieldReferenceImpl@length" shape=ellipse]
39 [label="7:CtTypeReferenceImpl@int" shape=ellipse]
40 [label="7:CtTypeReferenceImpl@int" shape=ellipse]
41 [label="7:CtFieldReadImpl@parameterTypes.length" shape=ellipse]
42 [label="7:CtVariableReadImpl@parameterTypes" shape=ellipse]
43 [label="7:CtLiteralImpl@1" shape=ellipse]
44 [label="7:CtTypeReferenceImpl@int" shape=ellipse]
45 [label="7:CtBinaryOperatorImpl@(parameterTypes.length == 1)" shape=ellipse]
46 [label="7:CtTypeReferenceImpl@boolean" shape=ellipse]
47 [label="7:CtExecutableReferenceImpl@equals(java.lang.Object)" shape=ellipse]
48 [label="7:CtTypeReferenceImpl@Object" shape=ellipse]
49 [label="7:CtTypeReferenceImpl@boolean" shape=ellipse]
50 [label="7:CtTypeReferenceImpl@Object" shape=ellipse]
51 [label="7:CtVirtualElement@equals" shape=ellipse]
52 [label="7:CtVariableReadImpl@parameterTypes" shape=ellipse]
53 [label="7:CtLocalVariableReferenceImpl@parameterTypes" shape=ellipse]
54 [label="7:CtLiteralImpl@0" shape=ellipse]
55 [label="7:CtTypeReferenceImpl@int" shape=ellipse]
56 [label="7:CtArrayReadImpl@parameterTypes[0]" shape=ellipse]
57 [label="7:CtTypeReferenceImpl@Class<?>" shape=ellipse]
58 [label="7:CtFieldReferenceImpl@TestClass.class" shape=ellipse]
59 [label="7:CtTypeReferenceImpl@TestClass" shape=ellipse]
60 [label="7:CtTypeReferenceImpl@Class" shape=ellipse]
61 [label="7:CtFieldReadImpl@TestClass.class" shape=ellipse]
62 [label="7:CtTypeAccessImpl@TestClass" shape=ellipse]
63 [label="7:CtInvocationImpl@parameterTypes[0].equals(TestClass.class)" shape=ellipse]
64 [label="7:CtBinaryOperatorImpl@(parameterTypes.length == 1) && parameterTypes[0].equals(TestClass.class)" shape=ellipse]
65 [label="7:CtTypeReferenceImpl@boolean" shape=ellipse]
66 [label="8:CtExecutableReferenceImpl@newInstance()" shape=ellipse]
67 [label="8:CtTypeReferenceImpl@Constructor<?>" shape=ellipse]
68 [label="8:CtVirtualElement@newInstance" shape=ellipse]
69 [label="8:CtVariableReadImpl@constructor" shape=ellipse]
70 [label="8:CtLocalVariableReferenceImpl@constructor" shape=ellipse]
71 [label="8:CtFieldReferenceImpl@fClass" shape=ellipse]
72 [label="8:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
73 [label="8:CtFieldReadImpl@fClass" shape=ellipse]
74 [label="8:CtInvocationImpl@((ParameterSupplier) (constructor.newInstance(fClass)))" shape=ellipse]
75 [label="8:CtTypeReferenceImpl@ParameterSupplier" shape=ellipse]
76 [label="8:CtReturnImpl@return ((ParameterSupplier) (constructor.newInstance(fClass)))" shape=ellipse]
77 [label="7:CtBlockImpl@\{
    return ((ParameterSupplier) (constructor.newInstance(fClass)));
\}" shape=ellipse]
78 [label="7:CtIfImpl@if ((parameterTypes.length == 1) && parameterTypes[0].equals(TestClass.class)) \{
    return ((ParameterSupplier) (constructor.newInstance(fClass)));
\}" shape=ellipse]
79 [label="5:CtBlockImpl@\{
    Class<?>[] parameterTypes = constructor.getParameterTypes();
    if ((parameterTypes.length == 1) && parameterTypes[0].equals(TestClass.class)) \{
        return ((ParameterSupplier) (constructor.newInstance(fClass)));
    \}
\}" shape=ellipse]
80 [label="5:CtForEachImpl@for (Constructor<?> constructor : supplierConstructors) \{
    Class<?>[] parameterTypes = constructor.getParameterTypes();
    if ((parameterTypes.length == 1) && parameterTypes[0].equals(TestClass.class)) \{
        return ((ParameterSupplier) (constructor.newInstance(fClass)));
    \}
\}" shape=ellipse]
81 [label="11:CtExecutableReferenceImpl@newInstance()" shape=ellipse]
82 [label="11:CtTypeReferenceImpl@Class" shape=ellipse]
83 [label="11:CtWildcardReferenceImpl@? extends ParameterSupplier" shape=ellipse]
84 [label="11:CtVirtualElement@newInstance" shape=ellipse]
85 [label="11:CtVariableReadImpl@cls" shape=ellipse]
86 [label="11:CtParameterReferenceImpl@cls" shape=ellipse]
87 [label="11:CtInvocationImpl@cls.newInstance()" shape=ellipse]
88 [label="11:CtReturnImpl@return cls.newInstance()" shape=ellipse]
89 [label="3:CtBlockImpl@\{
    Constructor<?>[] supplierConstructors = cls.getConstructors();
    for (Constructor<?> constructor : supplierConstructors) \{
        Class<?>[] parameterTypes = constructor.getParameterTypes();
        if ((parameterTypes.length == 1) && parameterTypes[0].equals(TestClass.class)) \{
            return ((ParameterSupplier) (constructor.newInstance(fClass)));
        \}
    \}
    return cls.newInstance();
\}" shape=ellipse]
90 [label="2:CtMethodImpl@private ParameterSupplier buildParameterSupplierFromClass(Class<? extends ParameterSupplier> cls) throws Exception \{
    Constructor<?>[] supplierConstructors = cls.getConstructors();
    for (Constructor<?> constructor : supplierConstructors) \{
        Class<?>[] parameterTypes = constructor.getParameterTypes();
        if ((parameterTypes.length == 1) && parameterTypes[0].equals(TestClass.class)) \{
            return ((ParameterSupplier) (constructor.newInstance(fClass)));
        \}
    \}
    return cls.newInstance();
\}" shape=ellipse]
91 [label="8:Update@UPDATE" shape=ellipse]
92 [label="8:CtPackageReferenceImpl@" shape=ellipse]
93 [label="8:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
94 [label="8:CtFieldReferenceImpl@clazz" shape=ellipse]
95 [label="8:CtFieldReadImpl@clazz" shape=ellipse]
0 -> 1 [label="AST"];
3 -> 4 [label="AST"];
5 -> 6 [label="AST"];
8 -> 7 [label="AST"];
8 -> 9 [label="AST"];
10 -> 11 [label="AST"];
10 -> 12 [label="AST"];
14 -> 15 [label="AST"];
14 -> 17 [label="Data Dep"];
16 -> 13 [label="AST"];
16 -> 14 [label="AST"];
16 -> 10 [label="AST"];
17 -> 24 [label="Define-Use"];
18 -> 17 [label="AST"];
18 -> 8 [label="AST"];
18 -> 16 [label="AST"];
19 -> 20 [label="AST"];
19 -> 21 [label="AST"];
22 -> 33 [label="Define-Use"];
22 -> 69 [label="Define-Use"];
23 -> 22 [label="AST"];
23 -> 19 [label="AST"];
24 -> 25 [label="AST"];
24 -> 79 [label="Control Dep"];
24 -> 37 [label="Control Dep"];
24 -> 27 [label="Control Dep"];
24 -> 35 [label="Control Dep"];
24 -> 29 [label="Control Dep"];
24 -> 33 [label="Control Dep"];
24 -> 78 [label="Control Dep"];
24 -> 64 [label="Control Dep"];
24 -> 45 [label="Control Dep"];
24 -> 41 [label="Control Dep"];
24 -> 43 [label="Control Dep"];
24 -> 63 [label="Control Dep"];
24 -> 47 [label="Control Dep"];
24 -> 56 [label="Control Dep"];
24 -> 52 [label="Control Dep"];
24 -> 54 [label="Control Dep"];
24 -> 61 [label="Control Dep"];
27 -> 26 [label="AST"];
27 -> 28 [label="AST"];
29 -> 30 [label="AST"];
29 -> 31 [label="AST"];
33 -> 34 [label="AST"];
33 -> 36 [label="Data Dep"];
35 -> 32 [label="AST"];
35 -> 33 [label="AST"];
35 -> 29 [label="AST"];
36 -> 52 [label="Define-Use"];
36 -> 56 [label="Define-Use"];
37 -> 36 [label="AST"];
37 -> 27 [label="AST"];
37 -> 35 [label="AST"];
38 -> 39 [label="AST"];
38 -> 40 [label="AST"];
41 -> 42 [label="AST"];
41 -> 38 [label="AST"];
43 -> 44 [label="AST"];
45 -> 46 [label="AST"];
45 -> 41 [label="AST"];
45 -> 43 [label="AST"];
47 -> 48 [label="AST"];
47 -> 49 [label="AST"];
47 -> 50 [label="AST"];
52 -> 53 [label="AST"];
54 -> 55 [label="AST"];
56 -> 57 [label="AST"];
56 -> 52 [label="AST"];
56 -> 54 [label="AST"];
58 -> 59 [label="AST"];
58 -> 60 [label="AST"];
61 -> 62 [label="AST"];
61 -> 58 [label="AST"];
63 -> 51 [label="AST"];
63 -> 56 [label="AST"];
63 -> 47 [label="AST"];
63 -> 61 [label="AST"];
64 -> 65 [label="AST"];
64 -> 45 [label="AST"];
64 -> 63 [label="AST"];
64 -> 77 [label="Control Dep"];
64 -> 76 [label="Control Dep"];
64 -> 74 [label="Control Dep"];
64 -> 66 [label="Control Dep"];
64 -> 69 [label="Control Dep"];
64 -> 73 [label="Control Dep"];
64 -> 95 [label="Control Dep"];
66 -> 67 [label="AST"];
69 -> 70 [label="AST"];
71 -> 72 [label="AST"];
73 -> 71 [label="AST"];
73 -> 91 [label="Action"];
74 -> 68 [label="AST"];
74 -> 75 [label="AST"];
74 -> 69 [label="AST"];
74 -> 66 [label="AST"];
74 -> 73 [label="AST"];
76 -> 74 [label="AST"];
77 -> 76 [label="AST"];
78 -> 64 [label="AST"];
78 -> 77 [label="AST"];
79 -> 37 [label="AST"];
79 -> 78 [label="AST"];
80 -> 23 [label="AST"];
80 -> 24 [label="AST"];
80 -> 79 [label="AST"];
81 -> 82 [label="AST"];
81 -> 83 [label="AST"];
85 -> 86 [label="AST"];
87 -> 84 [label="AST"];
87 -> 85 [label="AST"];
87 -> 81 [label="AST"];
88 -> 87 [label="AST"];
89 -> 18 [label="AST"];
89 -> 80 [label="AST"];
89 -> 88 [label="AST"];
90 -> 2 [label="AST"];
90 -> 0 [label="AST"];
90 -> 3 [label="AST"];
90 -> 5 [label="AST"];
90 -> 89 [label="AST"];
91 -> 95 [label="Action"];
93 -> 92 [label="AST"];
94 -> 93 [label="AST"];
95 -> 94 [label="AST"];
}