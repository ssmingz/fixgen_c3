digraph "computeParams#?" {
0 [label="2:CtVirtualElement@Object[]" shape=ellipse]
1 [label="2:CtArrayTypeReferenceImpl@Object[]" shape=ellipse]
2 [label="2:CtTypeReferenceImpl@Object" shape=ellipse]
3 [label="2:CtVirtualElement@computeParams" shape=ellipse]
4 [label="2:CtTypeReferenceImpl@Exception" shape=ellipse]
5 [label="2:CtPackageReferenceImpl@java.lang" shape=ellipse]
6 [label="4:CtExecutableReferenceImpl@get()" shape=ellipse]
7 [label="4:CtTypeReferenceImpl@fParameters" shape=ellipse]
8 [label="4:CtArrayTypeReferenceImpl@Object[]" shape=ellipse]
9 [label="4:CtVirtualElement@get" shape=ellipse]
10 [label="4:CtFieldReferenceImpl@fParameters" shape=ellipse]
11 [label="4:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
12 [label="4:CtFieldReadImpl@fParameters" shape=ellipse]
13 [label="4:CtFieldReferenceImpl@fParameterSetNumber" shape=ellipse]
14 [label="4:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
15 [label="4:CtFieldReadImpl@fParameterSetNumber" shape=ellipse]
16 [label="4:CtInvocationImpl@fParameters.get(fParameterSetNumber)" shape=ellipse]
17 [label="4:CtReturnImpl@return fParameters.get(fParameterSetNumber)" shape=ellipse]
18 [label="3:CtBlockImpl@\{
    return fParameters.get(fParameterSetNumber);
\}" shape=ellipse]
19 [label="5:CtVirtualElement@e" shape=ellipse]
20 [label="5:CtTypeReferenceImpl@ClassCastException" shape=ellipse]
21 [label="5:CtPackageReferenceImpl@java.lang" shape=ellipse]
22 [label="5:CtCatchVariableImpl@ClassCastException e" shape=ellipse]
23 [label="6:CtExecutableReferenceImpl@java.lang.Exception(java.lang.String)" shape=ellipse]
24 [label="6:CtTypeReferenceImpl@Exception" shape=ellipse]
25 [label="6:CtTypeReferenceImpl@Exception" shape=ellipse]
26 [label="6:CtTypeReferenceImpl@String" shape=ellipse]
27 [label="7:CtExecutableReferenceImpl@format(java.lang.String,java.lang.Object[])" shape=ellipse]
28 [label="7:CtTypeReferenceImpl@String" shape=ellipse]
29 [label="7:CtTypeReferenceImpl@String" shape=ellipse]
30 [label="7:CtTypeReferenceImpl@String" shape=ellipse]
31 [label="7:CtArrayTypeReferenceImpl@Object[]" shape=ellipse]
32 [label="7:CtVirtualElement@format" shape=ellipse]
33 [label="7:CtTypeAccessImpl@String" shape=ellipse]
34 [label="7:CtTypeReferenceImpl@String" shape=ellipse]
35 [label="8:CtLiteralImpl@\"%s.%s() must return a Collection of arrays.\"" shape=ellipse]
36 [label="8:CtTypeReferenceImpl@String" shape=ellipse]
37 [label="9:CtExecutableReferenceImpl@getName()" shape=ellipse]
38 [label="9:CtTypeReferenceImpl@fTestClass" shape=ellipse]
39 [label="9:CtVirtualElement@getName" shape=ellipse]
40 [label="9:CtFieldReferenceImpl@fTestClass" shape=ellipse]
41 [label="9:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
42 [label="9:CtFieldReadImpl@fTestClass" shape=ellipse]
43 [label="9:CtInvocationImpl@fTestClass.getName()" shape=ellipse]
44 [label="9:CtExecutableReferenceImpl@getName()" shape=ellipse]
45 [label="9:CtVirtualElement@getName" shape=ellipse]
46 [label="9:CtExecutableReferenceImpl@getParametersMethod()" shape=ellipse]
47 [label="9:CtVirtualElement@getParametersMethod" shape=ellipse]
48 [label="9:CtTypeAccessImpl@PlaceHold" shape=ellipse]
49 [label="9:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
50 [label="9:CtThisAccessImpl@" shape=ellipse]
51 [label="9:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
52 [label="9:CtInvocationImpl@getParametersMethod()" shape=ellipse]
53 [label="9:CtInvocationImpl@getParametersMethod().getName()" shape=ellipse]
54 [label="7:CtInvocationImpl@String.format(\"%s.%s() must return a Collection of arrays.\", fTestClass.getName(), getParametersMethod().getName())" shape=ellipse]
55 [label="6:CtConstructorCallImpl@new Exception(String.format(\"%s.%s() must return a Collection of arrays.\", fTestClass.getName(), getParametersMethod().getName()))" shape=ellipse]
56 [label="6:CtThrowImpl@throw new Exception(String.format(\"%s.%s() must return a Collection of arrays.\", fTestClass.getName(), getParametersMethod().getName()))" shape=ellipse]
57 [label="5:CtBlockImpl@\{
    throw new Exception(String.format(\"%s.%s() must return a Collection of arrays.\", fTestClass.getName(), getParametersMethod().getName()));
\}" shape=ellipse]
58 [label="5:CtCatchImpl@ catch (ClassCastException e) \{
    throw new Exception(String.format(\"%s.%s() must return a Collection of arrays.\", fTestClass.getName(), getParametersMethod().getName()));
\}" shape=ellipse]
59 [label="3:CtTryImpl@try \{
    return fParameters.get(fParameterSetNumber);
\} catch (ClassCastException e) \{
    throw new Exception(String.format(\"%s.%s() must return a Collection of arrays.\", fTestClass.getName(), getParametersMethod().getName()));
\}" shape=ellipse]
60 [label="2:CtBlockImpl@\{
    try \{
        return fParameters.get(fParameterSetNumber);
    \} catch (ClassCastException e) \{
        throw new Exception(String.format(\"%s.%s() must return a Collection of arrays.\", fTestClass.getName(), getParametersMethod().getName()));
    \}
\}" shape=ellipse]
61 [label="2:CtMethodImpl@private Object[] computeParams() throws Exception \{
    try \{
        return fParameters.get(fParameterSetNumber);
    \} catch (ClassCastException e) \{
        throw new Exception(String.format(\"%s.%s() must return a Collection of arrays.\", fTestClass.getName(), getParametersMethod().getName()));
    \}
\}" shape=ellipse]
62 [label="9:Delete@DELETE" shape=ellipse]
63 [label="9:Insert@INSERT" shape=ellipse]
64 [label="9:CtPackageReferenceImpl@" shape=ellipse]
65 [label="9:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
66 [label="9:CtPackageReferenceImpl@" shape=ellipse]
67 [label="9:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
68 [label="9:CtTypeAccessImpl@PlaceHold" shape=ellipse]
69 [label="9:CtThisAccessImpl@" shape=ellipse]
70 [label="9:CtExecutableReferenceImpl@getTestClass()" shape=ellipse]
71 [label="9:CtInvocationImpl@getTestClass()" shape=ellipse]
72 [label="9:CtVirtualElement@getTestClass" shape=ellipse]
1 -> 0 [label="AST"];
1 -> 2 [label="AST"];
4 -> 5 [label="AST"];
6 -> 7 [label="AST"];
6 -> 8 [label="AST"];
10 -> 11 [label="AST"];
12 -> 10 [label="AST"];
13 -> 14 [label="AST"];
15 -> 13 [label="AST"];
16 -> 9 [label="AST"];
16 -> 12 [label="AST"];
16 -> 6 [label="AST"];
16 -> 15 [label="AST"];
17 -> 16 [label="AST"];
18 -> 17 [label="AST"];
20 -> 21 [label="AST"];
22 -> 19 [label="AST"];
22 -> 20 [label="AST"];
22 -> 57 [label="Control Dep"];
22 -> 56 [label="Control Dep"];
22 -> 55 [label="Control Dep"];
22 -> 23 [label="Control Dep"];
22 -> 54 [label="Control Dep"];
22 -> 27 [label="Control Dep"];
22 -> 33 [label="Control Dep"];
22 -> 35 [label="Control Dep"];
22 -> 43 [label="Control Dep"];
22 -> 37 [label="Control Dep"];
22 -> 42 [label="Control Dep"];
22 -> 53 [label="Control Dep"];
22 -> 44 [label="Control Dep"];
22 -> 52 [label="Control Dep"];
22 -> 46 [label="Control Dep"];
22 -> 50 [label="Control Dep"];
22 -> 48 [label="Control Dep"];
22 -> 68 [label="Control Dep"];
22 -> 69 [label="Control Dep"];
22 -> 70 [label="Control Dep"];
22 -> 71 [label="Control Dep"];
23 -> 24 [label="AST"];
23 -> 25 [label="AST"];
23 -> 26 [label="AST"];
27 -> 28 [label="AST"];
27 -> 29 [label="AST"];
27 -> 30 [label="AST"];
27 -> 31 [label="AST"];
33 -> 34 [label="AST"];
35 -> 36 [label="AST"];
37 -> 38 [label="AST"];
40 -> 41 [label="AST"];
42 -> 40 [label="AST"];
42 -> 62 [label="Action"];
43 -> 39 [label="AST"];
43 -> 42 [label="AST"];
43 -> 37 [label="AST"];
43 -> 63 [label="Action"];
48 -> 49 [label="AST"];
50 -> 51 [label="AST"];
50 -> 48 [label="AST"];
52 -> 47 [label="AST"];
52 -> 50 [label="AST"];
52 -> 46 [label="AST"];
53 -> 45 [label="AST"];
53 -> 52 [label="AST"];
53 -> 44 [label="AST"];
54 -> 32 [label="AST"];
54 -> 33 [label="AST"];
54 -> 27 [label="AST"];
54 -> 35 [label="AST"];
54 -> 43 [label="AST"];
54 -> 53 [label="AST"];
55 -> 23 [label="AST"];
55 -> 54 [label="AST"];
56 -> 55 [label="AST"];
57 -> 56 [label="AST"];
58 -> 22 [label="AST"];
58 -> 57 [label="AST"];
59 -> 18 [label="AST"];
59 -> 58 [label="AST"];
60 -> 59 [label="AST"];
61 -> 3 [label="AST"];
61 -> 1 [label="AST"];
61 -> 4 [label="AST"];
61 -> 60 [label="AST"];
63 -> 71 [label="Action"];
65 -> 64 [label="AST"];
67 -> 66 [label="AST"];
68 -> 67 [label="AST"];
69 -> 65 [label="AST"];
69 -> 68 [label="AST"];
71 -> 72 [label="AST"];
71 -> 69 [label="AST"];
71 -> 70 [label="AST"];
}