digraph "Pattern" {
0 [label="describeChild#?,FrameworkMethod#5:DELETE
createTest#?#3:DELETE
computeParams#?#9:DELETE
computeTestMethods#?#3:DELETE
collectInitializationErrors#?,List#3:DELETE" shape=ellipse]
1 [label="describeChild#?,FrameworkMethod#5:fTestClass
createTest#?#3:fTestClass
computeParams#?#9:fTestClass
computeTestMethods#?#3:fTestClass
collectInitializationErrors#?,List#3:fTestClass" shape=ellipse]
2 [label="describeChild#?,FrameworkMethod#5:fTestClass.getJavaClass()
createTest#?#3:fTestClass.getConstructor()
computeParams#?#9:fTestClass.getName()
computeTestMethods#?#3:fTestClass.getTestMethods()
collectInitializationErrors#?,List#3:fTestClass.validateMethodsForDefaultRunner(errors)" shape=ellipse]
3 [label="describeChild#?,FrameworkMethod#4:Description.createTestDescription(fTestClass.getJavaClass(), testName(method), method.getMethod().getAnnotations())
createTest#?#3:fTestClass.getConstructor().newInstance()
computeParams#?#7:String.format(\"%s.%s() must return a Collection of arrays.\", fTestClass.getName(), getParametersMethod().getName())" shape=ellipse]
4 [label="describeChild#?,FrameworkMethod#5:getJavaClass
createTest#?#3:getConstructor
computeTestMethods#?#3:getTestMethods
collectInitializationErrors#?,List#3:validateMethodsForDefaultRunner" shape=ellipse]
5 [label="describeChild#?,FrameworkMethod#5:getJavaClass()
createTest#?#3:getConstructor()
computeParams#?#9:getName()
computeTestMethods#?#3:getTestMethods()
collectInitializationErrors#?,List#3:validateMethodsForDefaultRunner(List)" shape=ellipse]
6 [label="describeChild#?,FrameworkMethod#5:INSERT
createTest#?#3:INSERT
computeTestMethods#?#3:INSERT
collectInitializationErrors#?,List#3:INSERT" shape=ellipse]
7 [label="describeChild#?,FrameworkMethod#5:getTestClass
createTest#?#3:getTestClass
computeParams#?#9:getTestClass
computeTestMethods#?#3:getTestClass
collectInitializationErrors#?,List#3:getTestClass" shape=ellipse]
8 [label="describeChild#?,FrameworkMethod#5:
createTest#?#3:
computeParams#?#9:
computeTestMethods#?#3:
collectInitializationErrors#?,List#3:" shape=ellipse]
9 [label="describeChild#?,FrameworkMethod#5:PlaceHold
createTest#?#3:PlaceHold
computeTestMethods#?#3:PlaceHold
collectInitializationErrors#?,List#3:PlaceHold" shape=ellipse]
10 [label="describeChild#?,FrameworkMethod#5:
createTest#?#3:
computeParams#?#5:ClassCastException
computeTestMethods#?#3:
collectInitializationErrors#?,List#3:" shape=ellipse]
11 [label="describeChild#?,FrameworkMethod#5:PlaceHold
createTest#?#3:PlaceHold
computeParams#?#9:PlaceHold
computeTestMethods#?#3:PlaceHold
collectInitializationErrors#?,List#3:PlaceHold" shape=ellipse]
12 [label="describeChild#?,FrameworkMethod#5:PlaceHold
createTest#?#3:PlaceHold
computeTestMethods#?#3:PlaceHold
collectInitializationErrors#?,List#3:PlaceHold" shape=ellipse]
13 [label="describeChild#?,FrameworkMethod#5:
createTest#?#3:
computeParams#?#6:java.lang.Exception(java.lang.String)
computeTestMethods#?#3:
collectInitializationErrors#?,List#3:" shape=ellipse]
14 [label="describeChild#?,FrameworkMethod#5:getTestClass()
createTest#?#3:getTestClass()
computeParams#?#9:getTestClass()
computeTestMethods#?#3:getTestClass()
collectInitializationErrors#?,List#3:getTestClass()" shape=ellipse]
15 [label="describeChild#?,FrameworkMethod#5:fTestClass
createTest#?#3:fTestClass
computeParams#?#9:fTestClass
computeTestMethods#?#3:fTestClass
collectInitializationErrors#?,List#3:fTestClass" shape=ellipse]
16 [label="describeChild#?,FrameworkMethod#5:PlaceHold
createTest#?#3:PlaceHold
computeParams#?#9:PlaceHold
computeTestMethods#?#3:PlaceHold
collectInitializationErrors#?,List#3:PlaceHold" shape=ellipse]
17 [label="computeParams#?#9:getName()" shape=ellipse]
18 [label="computeParams#?#5:\{
    throw new Exception(String.format(\"%s.%s() must return a Collection of arrays.\", fTestClass.getName(), getParametersMethod().getName()));
\}" shape=ellipse]
19 [label="computeParams#?#5: catch (ClassCastException e) \{
    throw new Exception(String.format(\"%s.%s() must return a Collection of arrays.\", fTestClass.getName(), getParametersMethod().getName()));
\}" shape=ellipse]
20 [label="computeParams#?#6:throw new Exception(String.format(\"%s.%s() must return a Collection of arrays.\", fTestClass.getName(), getParametersMethod().getName()))" shape=ellipse]
21 [label="computeParams#?#6:new Exception(String.format(\"%s.%s() must return a Collection of arrays.\", fTestClass.getName(), getParametersMethod().getName()))" shape=ellipse]
22 [label="computeParams#?#7:String" shape=ellipse]
23 [label="computeParams#?#8:\"%s.%s() must return a Collection of arrays.\"" shape=ellipse]
24 [label="computeParams#?#9:getParametersMethod().getName()" shape=ellipse]
25 [label="computeParams#?#9:getParametersMethod()" shape=ellipse]
26 [label="computeParams#?#9:PlaceHold" shape=ellipse]
27 [label="computeParams#?#9:" shape=ellipse]
28 [label="computeParams#?#9:getParametersMethod()" shape=ellipse]
29 [label="computeParams#?#5:ClassCastException e" shape=ellipse]
30 [label="computeParams#?#5:e" shape=ellipse]
31 [label="computeParams#?#7:format(java.lang.String,java.lang.Object[])" shape=ellipse]
32 [label="computeTestMethods#?#3:return fTestClass.getTestMethods()" shape=ellipse]
33 [label="collectInitializationErrors#?,List#2:\{
    fTestClass.validateMethodsForDefaultRunner(errors);
\}" shape=ellipse]
34 [label="collectInitializationErrors#?,List#3:errors" shape=ellipse]
1 -> 0 [label="Action:5"];
1 -> 15 [label="AST:5"];
2 -> 1 [label="AST:5"];
2 -> 4 [label="AST:4"];
2 -> 5 [label="AST:5"];
2 -> 6 [label="Action:4"];
2 -> 34 [label="AST:1"];
3 -> 2 [label="AST:3"];
3 -> 22 [label="AST:1"];
3 -> 23 [label="AST:1"];
3 -> 24 [label="AST:1"];
3 -> 31 [label="AST:1"];
8 -> 9 [label="AST:4"];
8 -> 11 [label="AST:5"];
9 -> 10 [label="AST:4"];
11 -> 12 [label="AST:4"];
12 -> 13 [label="AST:4"];
15 -> 16 [label="AST:5"];
18 -> 20 [label="AST:1"];
19 -> 18 [label="AST:1"];
19 -> 29 [label="AST:1"];
20 -> 21 [label="AST:1"];
21 -> 13 [label="AST:1"];
21 -> 3 [label="AST:1"];
24 -> 17 [label="AST:1"];
24 -> 25 [label="AST:1"];
25 -> 8 [label="AST:1"];
25 -> 28 [label="AST:1"];
27 -> 26 [label="AST:1"];
29 -> 17 [label="Control Dep:1"];
29 -> 18 [label="Control Dep:1"];
29 -> 20 [label="Control Dep:1"];
29 -> 21 [label="Control Dep:1"];
29 -> 22 [label="Control Dep:1"];
29 -> 23 [label="Control Dep:1"];
29 -> 24 [label="Control Dep:1"];
29 -> 25 [label="Control Dep:1"];
29 -> 26 [label="Control Dep:1"];
29 -> 27 [label="Control Dep:1"];
29 -> 28 [label="Control Dep:1"];
29 -> 30 [label="AST:1"];
29 -> 10 [label="AST:1"];
29 -> 13 [label="Control Dep:1"];
29 -> 3 [label="Control Dep:1"];
29 -> 31 [label="Control Dep:1"];
29 -> 2 [label="Control Dep:1"];
29 -> 5 [label="Control Dep:1"];
29 -> 1 [label="Control Dep:1"];
29 -> 8 [label="Control Dep:1"];
29 -> 11 [label="Control Dep:1"];
29 -> 14 [label="Control Dep:1"];
32 -> 2 [label="AST:1"];
33 -> 2 [label="AST:1"];
}