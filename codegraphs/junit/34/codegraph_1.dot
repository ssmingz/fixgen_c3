digraph "newFile#?,String" {
0 [label="2:CtTypeReferenceImpl@File" shape=ellipse]
1 [label="2:CtPackageReferenceImpl@" shape=ellipse]
2 [label="2:CtVirtualElement@newFile" shape=ellipse]
3 [label="2:CtParameterImpl@String fileName" shape=ellipse]
4 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@IOException" shape=ellipse]
6 [label="2:CtPackageReferenceImpl@" shape=ellipse]
7 [label="3:CtTypeReferenceImpl@File" shape=ellipse]
8 [label="3:CtPackageReferenceImpl@" shape=ellipse]
9 [label="3:CtExecutableReferenceImpl@File()" shape=ellipse]
10 [label="3:CtTypeReferenceImpl@File" shape=ellipse]
11 [label="3:CtTypeReferenceImpl@File" shape=ellipse]
12 [label="3:CtExecutableReferenceImpl@getRoot()" shape=ellipse]
13 [label="3:CtVirtualElement@getRoot" shape=ellipse]
14 [label="3:CtTypeAccessImpl@PlaceHold" shape=ellipse]
15 [label="3:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
16 [label="3:CtThisAccessImpl@" shape=ellipse]
17 [label="3:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
18 [label="3:CtInvocationImpl@getRoot()" shape=ellipse]
19 [label="3:CtVariableReadImpl@fileName" shape=ellipse]
20 [label="3:CtParameterReferenceImpl@fileName" shape=ellipse]
21 [label="3:CtConstructorCallImpl@new File(getRoot(), fileName)" shape=ellipse]
22 [label="3:CtVirtualElement@file" shape=ellipse]
23 [label="3:CtLocalVariableImpl@File file = new File(getRoot(), fileName)" shape=ellipse]
24 [label="4:CtExecutableReferenceImpl@createNewFile()" shape=ellipse]
25 [label="4:CtTypeReferenceImpl@File" shape=ellipse]
26 [label="4:CtVirtualElement@createNewFile" shape=ellipse]
27 [label="4:CtVariableReadImpl@file" shape=ellipse]
28 [label="4:CtLocalVariableReferenceImpl@file" shape=ellipse]
29 [label="4:CtInvocationImpl@file.createNewFile()" shape=ellipse]
30 [label="4:CtUnaryOperatorImpl@!file.createNewFile()" shape=ellipse]
31 [label="5:CtExecutableReferenceImpl@java.lang.IllegalArgumentException(java.lang.String)" shape=ellipse]
32 [label="5:CtTypeReferenceImpl@IllegalArgumentException" shape=ellipse]
33 [label="5:CtTypeReferenceImpl@IllegalArgumentException" shape=ellipse]
34 [label="5:CtTypeReferenceImpl@String" shape=ellipse]
35 [label="6:CtLiteralImpl@\"a file with the name \'\"" shape=ellipse]
36 [label="6:CtTypeReferenceImpl@String" shape=ellipse]
37 [label="6:CtVariableReadImpl@fileName" shape=ellipse]
38 [label="6:CtParameterReferenceImpl@fileName" shape=ellipse]
39 [label="6:CtBinaryOperatorImpl@(\"a file with the name \'\" + fileName)" shape=ellipse]
40 [label="6:CtTypeReferenceImpl@String" shape=ellipse]
41 [label="6:CtLiteralImpl@\"\' already exists in the test folder\"" shape=ellipse]
42 [label="6:CtTypeReferenceImpl@String" shape=ellipse]
43 [label="6:CtBinaryOperatorImpl@(\"a file with the name \'\" + fileName) + \"\' already exists in the test folder\"" shape=ellipse]
44 [label="6:CtTypeReferenceImpl@String" shape=ellipse]
45 [label="5:CtConstructorCallImpl@new IllegalArgumentException((\"a file with the name \'\" + fileName) + \"\' already exists in the test folder\")" shape=ellipse]
46 [label="5:CtThrowImpl@throw new IllegalArgumentException((\"a file with the name \'\" + fileName) + \"\' already exists in the test folder\")" shape=ellipse]
47 [label="4:CtBlockImpl@\{
    throw new IllegalArgumentException((\"a file with the name \'\" + fileName) + \"\' already exists in the test folder\");
\}" shape=ellipse]
48 [label="4:CtIfImpl@if (!file.createNewFile()) \{
    throw new IllegalArgumentException((\"a file with the name \'\" + fileName) + \"\' already exists in the test folder\");
\}" shape=ellipse]
49 [label="8:CtVariableReadImpl@file" shape=ellipse]
50 [label="8:CtLocalVariableReferenceImpl@file" shape=ellipse]
51 [label="8:CtReturnImpl@return file" shape=ellipse]
52 [label="2:CtBlockImpl@\{
    File file = new File(getRoot(), fileName);
    if (!file.createNewFile()) \{
        throw new IllegalArgumentException((\"a file with the name \'\" + fileName) + \"\' already exists in the test folder\");
    \}
    return file;
\}" shape=ellipse]
53 [label="2:CtMethodImpl@public File newFile(String fileName) throws IOException \{
    File file = new File(getRoot(), fileName);
    if (!file.createNewFile()) \{
        throw new IllegalArgumentException((\"a file with the name \'\" + fileName) + \"\' already exists in the test folder\");
    \}
    return file;
\}" shape=ellipse]
54 [label="5:Update@UPDATE" shape=ellipse]
55 [label="5:CtPackageReferenceImpl@" shape=ellipse]
56 [label="5:CtTypeReferenceImpl@IOException" shape=ellipse]
57 [label="5:CtPackageReferenceImpl@" shape=ellipse]
58 [label="5:CtTypeReferenceImpl@IOException" shape=ellipse]
59 [label="5:CtPackageReferenceImpl@java.lang" shape=ellipse]
60 [label="5:CtTypeReferenceImpl@String" shape=ellipse]
61 [label="5:CtExecutableReferenceImpl@IOException(java.lang.String)" shape=ellipse]
62 [label="6:CtPackageReferenceImpl@java.lang" shape=ellipse]
63 [label="6:CtTypeReferenceImpl@String" shape=ellipse]
64 [label="6:CtPackageReferenceImpl@java.lang" shape=ellipse]
65 [label="6:CtTypeReferenceImpl@String" shape=ellipse]
66 [label="6:CtPackageReferenceImpl@java.lang" shape=ellipse]
67 [label="6:CtTypeReferenceImpl@String" shape=ellipse]
68 [label="6:CtLiteralImpl@\"a file with the name \'\"" shape=ellipse]
69 [label="6:CtPackageReferenceImpl@java.lang" shape=ellipse]
70 [label="6:CtTypeReferenceImpl@String" shape=ellipse]
71 [label="6:CtParameterReferenceImpl@fileName" shape=ellipse]
72 [label="6:CtVariableReadImpl@fileName" shape=ellipse]
73 [label="6:CtBinaryOperatorImpl@(\"a file with the name \'\" + fileName)" shape=ellipse]
74 [label="6:CtPackageReferenceImpl@java.lang" shape=ellipse]
75 [label="6:CtTypeReferenceImpl@String" shape=ellipse]
76 [label="6:CtLiteralImpl@\"\' already exists in the test folder\"" shape=ellipse]
77 [label="6:CtBinaryOperatorImpl@(\"a file with the name \'\" + fileName) + \"\' already exists in the test folder\"" shape=ellipse]
78 [label="5:CtConstructorCallImpl@new IOException((\"a file with the name \'\" + fileName) + \"\' already exists in the test folder\")" shape=ellipse]
0 -> 1 [label="AST"];
3 -> 4 [label="AST"];
5 -> 6 [label="AST"];
7 -> 8 [label="AST"];
9 -> 10 [label="AST"];
9 -> 11 [label="AST"];
14 -> 15 [label="AST"];
16 -> 17 [label="AST"];
16 -> 14 [label="AST"];
16 -> 22 [label="Data Dep"];
18 -> 13 [label="AST"];
18 -> 16 [label="AST"];
18 -> 12 [label="AST"];
19 -> 20 [label="AST"];
19 -> 22 [label="Data Dep"];
21 -> 9 [label="AST"];
21 -> 18 [label="AST"];
21 -> 19 [label="AST"];
22 -> 27 [label="Define-Use"];
22 -> 49 [label="Define-Use"];
23 -> 22 [label="AST"];
23 -> 7 [label="AST"];
23 -> 21 [label="AST"];
24 -> 25 [label="AST"];
27 -> 28 [label="AST"];
29 -> 26 [label="AST"];
29 -> 27 [label="AST"];
29 -> 24 [label="AST"];
30 -> 29 [label="AST"];
30 -> 47 [label="Control Dep"];
30 -> 46 [label="Control Dep"];
30 -> 45 [label="Control Dep"];
30 -> 31 [label="Control Dep"];
30 -> 43 [label="Control Dep"];
30 -> 39 [label="Control Dep"];
30 -> 35 [label="Control Dep"];
30 -> 37 [label="Control Dep"];
30 -> 41 [label="Control Dep"];
30 -> 61 [label="Control Dep"];
30 -> 68 [label="Control Dep"];
30 -> 72 [label="Control Dep"];
30 -> 73 [label="Control Dep"];
30 -> 76 [label="Control Dep"];
30 -> 77 [label="Control Dep"];
30 -> 78 [label="Control Dep"];
31 -> 32 [label="AST"];
31 -> 33 [label="AST"];
31 -> 34 [label="AST"];
35 -> 36 [label="AST"];
37 -> 38 [label="AST"];
39 -> 40 [label="AST"];
39 -> 35 [label="AST"];
39 -> 37 [label="AST"];
41 -> 42 [label="AST"];
43 -> 44 [label="AST"];
43 -> 39 [label="AST"];
43 -> 41 [label="AST"];
45 -> 31 [label="AST"];
45 -> 43 [label="AST"];
45 -> 54 [label="Action"];
46 -> 45 [label="AST"];
47 -> 46 [label="AST"];
48 -> 30 [label="AST"];
48 -> 47 [label="AST"];
49 -> 50 [label="AST"];
51 -> 49 [label="AST"];
52 -> 23 [label="AST"];
52 -> 48 [label="AST"];
52 -> 51 [label="AST"];
53 -> 2 [label="AST"];
53 -> 0 [label="AST"];
53 -> 3 [label="AST"];
53 -> 5 [label="AST"];
53 -> 52 [label="AST"];
54 -> 78 [label="Action"];
56 -> 55 [label="AST"];
58 -> 57 [label="AST"];
60 -> 59 [label="AST"];
61 -> 56 [label="AST"];
61 -> 58 [label="AST"];
61 -> 60 [label="AST"];
63 -> 62 [label="AST"];
65 -> 64 [label="AST"];
67 -> 66 [label="AST"];
68 -> 67 [label="AST"];
70 -> 69 [label="AST"];
71 -> 70 [label="AST"];
72 -> 71 [label="AST"];
73 -> 65 [label="AST"];
73 -> 68 [label="AST"];
73 -> 72 [label="AST"];
75 -> 74 [label="AST"];
76 -> 75 [label="AST"];
77 -> 63 [label="AST"];
77 -> 73 [label="AST"];
77 -> 76 [label="AST"];
78 -> 61 [label="AST"];
78 -> 77 [label="AST"];
}