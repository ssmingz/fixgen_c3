digraph "testNL2#?" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@testNL2" shape=ellipse]
2 [label="2:CtTypeReferenceImpl@Exception" shape=ellipse]
3 [label="2:CtPackageReferenceImpl@java.lang" shape=ellipse]
4 [label="3:CtTypeReferenceImpl@DefaultConfiguration" shape=ellipse]
5 [label="3:CtPackageReferenceImpl@" shape=ellipse]
6 [label="3:CtExecutableReferenceImpl@createCheckConfig(java.lang.Class)" shape=ellipse]
7 [label="3:CtTypeReferenceImpl@DefaultConfiguration" shape=ellipse]
8 [label="3:CtTypeReferenceImpl@Class<LeftCurlyCheck>" shape=ellipse]
9 [label="3:CtVirtualElement@createCheckConfig" shape=ellipse]
10 [label="3:CtTypeAccessImpl@PlaceHold" shape=ellipse]
11 [label="3:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
12 [label="3:CtThisAccessImpl@" shape=ellipse]
13 [label="3:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
14 [label="3:CtFieldReferenceImpl@LeftCurlyCheck.class" shape=ellipse]
15 [label="3:CtTypeReferenceImpl@LeftCurlyCheck" shape=ellipse]
16 [label="3:CtTypeReferenceImpl@Class" shape=ellipse]
17 [label="3:CtFieldReadImpl@LeftCurlyCheck.class" shape=ellipse]
18 [label="3:CtTypeAccessImpl@LeftCurlyCheck" shape=ellipse]
19 [label="3:CtInvocationImpl@createCheckConfig(LeftCurlyCheck.class)" shape=ellipse]
20 [label="3:CtVirtualElement@checkConfig" shape=ellipse]
21 [label="3:CtLocalVariableImpl@final DefaultConfiguration checkConfig = createCheckConfig(LeftCurlyCheck.class)" shape=ellipse]
22 [label="4:CtExecutableReferenceImpl@addAttribute(java.lang.String)" shape=ellipse]
23 [label="4:CtTypeReferenceImpl@DefaultConfiguration" shape=ellipse]
24 [label="4:CtTypeReferenceImpl@String" shape=ellipse]
25 [label="4:CtVirtualElement@addAttribute" shape=ellipse]
26 [label="4:CtVariableReadImpl@checkConfig" shape=ellipse]
27 [label="4:CtLocalVariableReferenceImpl@checkConfig" shape=ellipse]
28 [label="4:CtLiteralImpl@\"option\"" shape=ellipse]
29 [label="4:CtTypeReferenceImpl@String" shape=ellipse]
30 [label="4:CtExecutableReferenceImpl@toString()" shape=ellipse]
31 [label="4:CtTypeReferenceImpl@NL" shape=ellipse]
32 [label="4:CtVirtualElement@toString" shape=ellipse]
33 [label="4:CtTypeAccessImpl@NL" shape=ellipse]
34 [label="4:CtTypeReferenceImpl@NL" shape=ellipse]
35 [label="4:CtInvocationImpl@NL.toString()" shape=ellipse]
36 [label="4:CtInvocationImpl@checkConfig.addAttribute(\"option\", NL.toString())" shape=ellipse]
37 [label="5:CtVirtualElement@String[]" shape=ellipse]
38 [label="5:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
39 [label="5:CtTypeReferenceImpl@String" shape=ellipse]
40 [label="6:CtNewArrayImpl@new String[]\{ \"14:39: '\{' should be on a new line.\", \"21:20: '\{' should be on a new line.\", \"34:31: '\{' should be on a new line.\", \"43:24: '\{' should be on a new line.\", \"56:35: '\{' should be on a new line.\", \"60:24: '\{' should be on a new line.\", \"74:20: '\{' should be on a new line.\", \"87:31: '\{' should be on a new line.\" \}" shape=ellipse]
41 [label="6:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
42 [label="7:CtLiteralImpl@\"14:39: '\{' should be on a new line.\"" shape=ellipse]
43 [label="8:CtLiteralImpl@\"21:20: '\{' should be on a new line.\"" shape=ellipse]
44 [label="9:CtLiteralImpl@\"34:31: '\{' should be on a new line.\"" shape=ellipse]
45 [label="10:CtLiteralImpl@\"43:24: '\{' should be on a new line.\"" shape=ellipse]
46 [label="11:CtLiteralImpl@\"56:35: '\{' should be on a new line.\"" shape=ellipse]
47 [label="12:CtLiteralImpl@\"60:24: '\{' should be on a new line.\"" shape=ellipse]
48 [label="13:CtLiteralImpl@\"74:20: '\{' should be on a new line.\"" shape=ellipse]
49 [label="14:CtLiteralImpl@\"87:31: '\{' should be on a new line.\"" shape=ellipse]
50 [label="5:CtVirtualElement@expected" shape=ellipse]
51 [label="5:CtLocalVariableImpl@final String[] expected = new String[]\{ \"14:39: '\{' should be on a new line.\", \"21:20: '\{' should be on a new line.\", \"34:31: '\{' should be on a new line.\", \"43:24: '\{' should be on a new line.\", \"56:35: '\{' should be on a new line.\", \"60:24: '\{' should be on a new line.\", \"74:20: '\{' should be on a new line.\", \"87:31: '\{' should be on a new line.\" \}" shape=ellipse]
52 [label="16:CtExecutableReferenceImpl@verify(<unknown>,<unknown>,java.lang.String[])" shape=ellipse]
53 [label="16:CtTypeReferenceImpl@null" shape=ellipse]
54 [label="16:CtTypeReferenceImpl@null" shape=ellipse]
55 [label="16:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
56 [label="16:CtVirtualElement@verify" shape=ellipse]
57 [label="16:CtTypeAccessImpl@PlaceHold" shape=ellipse]
58 [label="16:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
59 [label="16:CtThisAccessImpl@" shape=ellipse]
60 [label="16:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
61 [label="16:CtVariableReadImpl@checkConfig" shape=ellipse]
62 [label="16:CtLocalVariableReferenceImpl@checkConfig" shape=ellipse]
63 [label="16:CtExecutableReferenceImpl@getPath(java.lang.String)" shape=ellipse]
64 [label="16:CtTypeReferenceImpl@String" shape=ellipse]
65 [label="16:CtVirtualElement@getPath" shape=ellipse]
66 [label="16:CtTypeAccessImpl@PlaceHold" shape=ellipse]
67 [label="16:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
68 [label="16:CtThisAccessImpl@" shape=ellipse]
69 [label="16:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
70 [label="16:CtLiteralImpl@\"InputLeftCurlyMethod.java\"" shape=ellipse]
71 [label="16:CtTypeReferenceImpl@String" shape=ellipse]
72 [label="16:CtInvocationImpl@getPath(\"InputLeftCurlyMethod.java\")" shape=ellipse]
73 [label="16:CtVariableReadImpl@expected" shape=ellipse]
74 [label="16:CtLocalVariableReferenceImpl@expected" shape=ellipse]
75 [label="16:CtInvocationImpl@verify(checkConfig, getPath(\"InputLeftCurlyMethod.java\"), expected)" shape=ellipse]
76 [label="2:CtBlockImpl@\{
    final DefaultConfiguration checkConfig = createCheckConfig(LeftCurlyCheck.class);
    checkConfig.addAttribute(\"option\", NL.toString());
    final String[] expected = new String[]\{ \"14:39: '\{' should be on a new line.\", \"21:20: '\{' should be on a new line.\", \"34:31: '\{' should be on a new line.\", \"43:24: '\{' should be on a new line.\", \"56:35: '\{' should be on a new line.\", \"60:24: '\{' should be on a new line.\", \"74:20: '\{' should be on a new line.\", \"87:31: '\{' should be on a new line.\" \};
    verify(checkConfig, getPath(\"InputLeftCurlyMethod.java\"), expected);
\}" shape=ellipse]
77 [label="2:CtMethodImpl@public void testNL2() throws Exception \{
    final DefaultConfiguration checkConfig = createCheckConfig(LeftCurlyCheck.class);
    checkConfig.addAttribute(\"option\", NL.toString());
    final String[] expected = new String[]\{ \"14:39: '\{' should be on a new line.\", \"21:20: '\{' should be on a new line.\", \"34:31: '\{' should be on a new line.\", \"43:24: '\{' should be on a new line.\", \"56:35: '\{' should be on a new line.\", \"60:24: '\{' should be on a new line.\", \"74:20: '\{' should be on a new line.\", \"87:31: '\{' should be on a new line.\" \};
    verify(checkConfig, getPath(\"InputLeftCurlyMethod.java\"), expected);
\}" shape=ellipse]
78 [label="3:Delete@DELETE" shape=ellipse]
79 [label="4:Delete@DELETE" shape=ellipse]
80 [label="16:Delete@DELETE" shape=ellipse]
81 [label="3:Insert@INSERT" shape=ellipse]
82 [label="3:CtPackageReferenceImpl@" shape=ellipse]
83 [label="3:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
84 [label="3:CtFieldReferenceImpl@mCheckConfig" shape=ellipse]
85 [label="3:CtFieldReadImpl@mCheckConfig" shape=ellipse]
86 [label="15:Insert@INSERT" shape=ellipse]
87 [label="15:CtPackageReferenceImpl@" shape=ellipse]
88 [label="15:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
89 [label="15:CtFieldReferenceImpl@mCheckConfig" shape=ellipse]
90 [label="15:CtFieldReadImpl@mCheckConfig" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
6 -> 7 [label="AST"];
6 -> 8 [label="AST"];
10 -> 11 [label="AST"];
12 -> 13 [label="AST"];
12 -> 10 [label="AST"];
12 -> 20 [label="Data Dep"];
14 -> 15 [label="AST"];
14 -> 16 [label="AST"];
17 -> 18 [label="AST"];
17 -> 14 [label="AST"];
17 -> 20 [label="Data Dep"];
19 -> 9 [label="AST"];
19 -> 12 [label="AST"];
19 -> 6 [label="AST"];
19 -> 17 [label="AST"];
20 -> 26 [label="Define-Use"];
20 -> 61 [label="Define-Use"];
21 -> 20 [label="AST"];
21 -> 4 [label="AST"];
21 -> 19 [label="AST"];
21 -> 78 [label="Action"];
22 -> 23 [label="AST"];
22 -> 24 [label="AST"];
26 -> 27 [label="AST"];
26 -> 79 [label="Action"];
28 -> 29 [label="AST"];
30 -> 31 [label="AST"];
33 -> 34 [label="AST"];
35 -> 32 [label="AST"];
35 -> 33 [label="AST"];
35 -> 30 [label="AST"];
36 -> 25 [label="AST"];
36 -> 26 [label="AST"];
36 -> 22 [label="AST"];
36 -> 28 [label="AST"];
36 -> 35 [label="AST"];
36 -> 81 [label="Action"];
38 -> 37 [label="AST"];
38 -> 39 [label="AST"];
40 -> 41 [label="AST"];
40 -> 42 [label="AST"];
40 -> 43 [label="AST"];
40 -> 44 [label="AST"];
40 -> 45 [label="AST"];
40 -> 46 [label="AST"];
40 -> 47 [label="AST"];
40 -> 48 [label="AST"];
40 -> 49 [label="AST"];
50 -> 73 [label="Define-Use"];
51 -> 50 [label="AST"];
51 -> 38 [label="AST"];
51 -> 40 [label="AST"];
52 -> 53 [label="AST"];
52 -> 54 [label="AST"];
52 -> 55 [label="AST"];
57 -> 58 [label="AST"];
59 -> 60 [label="AST"];
59 -> 57 [label="AST"];
61 -> 62 [label="AST"];
61 -> 80 [label="Action"];
63 -> 64 [label="AST"];
66 -> 67 [label="AST"];
68 -> 69 [label="AST"];
68 -> 66 [label="AST"];
70 -> 71 [label="AST"];
72 -> 65 [label="AST"];
72 -> 68 [label="AST"];
72 -> 63 [label="AST"];
72 -> 70 [label="AST"];
73 -> 74 [label="AST"];
75 -> 56 [label="AST"];
75 -> 59 [label="AST"];
75 -> 52 [label="AST"];
75 -> 61 [label="AST"];
75 -> 72 [label="AST"];
75 -> 73 [label="AST"];
75 -> 86 [label="Action"];
76 -> 21 [label="AST"];
76 -> 36 [label="AST"];
76 -> 51 [label="AST"];
76 -> 75 [label="AST"];
77 -> 1 [label="AST"];
77 -> 0 [label="AST"];
77 -> 2 [label="AST"];
77 -> 76 [label="AST"];
81 -> 85 [label="Action"];
83 -> 82 [label="AST"];
84 -> 83 [label="AST"];
85 -> 84 [label="AST"];
86 -> 90 [label="Action"];
88 -> 87 [label="AST"];
89 -> 88 [label="AST"];
90 -> 89 [label="AST"];
}