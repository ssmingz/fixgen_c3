digraph "testCustomMessage#?" {
0 [label="3:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="3:CtVirtualElement@testCustomMessage" shape=ellipse]
2 [label="3:CtTypeReferenceImpl@Exception" shape=ellipse]
3 [label="3:CtPackageReferenceImpl@java.lang" shape=ellipse]
4 [label="4:CtTypeReferenceImpl@DefaultConfiguration" shape=ellipse]
5 [label="4:CtPackageReferenceImpl@" shape=ellipse]
6 [label="4:CtExecutableReferenceImpl@createCheckConfig(<unknown>)" shape=ellipse]
7 [label="4:CtTypeReferenceImpl@DefaultConfiguration" shape=ellipse]
8 [label="4:CtTypeReferenceImpl@null" shape=ellipse]
9 [label="4:CtVirtualElement@createCheckConfig" shape=ellipse]
10 [label="4:CtTypeAccessImpl@PlaceHold" shape=ellipse]
11 [label="4:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
12 [label="4:CtThisAccessImpl@" shape=ellipse]
13 [label="4:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
14 [label="4:CtExecutableReferenceImpl@getClass()" shape=ellipse]
15 [label="4:CtTypeReferenceImpl@emptyCheck" shape=ellipse]
16 [label="4:CtVirtualElement@getClass" shape=ellipse]
17 [label="4:CtFieldReferenceImpl@emptyCheck" shape=ellipse]
18 [label="4:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
19 [label="4:CtFieldReadImpl@emptyCheck" shape=ellipse]
20 [label="4:CtInvocationImpl@emptyCheck.getClass()" shape=ellipse]
21 [label="4:CtInvocationImpl@createCheckConfig(emptyCheck.getClass())" shape=ellipse]
22 [label="4:CtVirtualElement@config" shape=ellipse]
23 [label="4:CtLocalVariableImpl@DefaultConfiguration config = createCheckConfig(emptyCheck.getClass())" shape=ellipse]
24 [label="5:CtExecutableReferenceImpl@addMessage(java.lang.String,java.lang.String)" shape=ellipse]
25 [label="5:CtTypeReferenceImpl@DefaultConfiguration" shape=ellipse]
26 [label="5:CtTypeReferenceImpl@String" shape=ellipse]
27 [label="5:CtTypeReferenceImpl@String" shape=ellipse]
28 [label="5:CtVirtualElement@addMessage" shape=ellipse]
29 [label="5:CtVariableReadImpl@config" shape=ellipse]
30 [label="5:CtLocalVariableReferenceImpl@config" shape=ellipse]
31 [label="5:CtLiteralImpl@\"msgKey\"" shape=ellipse]
32 [label="5:CtTypeReferenceImpl@String" shape=ellipse]
33 [label="5:CtLiteralImpl@\"This is a custom message.\"" shape=ellipse]
34 [label="5:CtTypeReferenceImpl@String" shape=ellipse]
35 [label="5:CtInvocationImpl@config.addMessage(\"msgKey\", \"This is a custom message.\")" shape=ellipse]
36 [label="6:CtExecutableReferenceImpl@configure(DefaultConfiguration)" shape=ellipse]
37 [label="6:CtTypeReferenceImpl@emptyCheck" shape=ellipse]
38 [label="6:CtTypeReferenceImpl@DefaultConfiguration" shape=ellipse]
39 [label="6:CtVirtualElement@configure" shape=ellipse]
40 [label="6:CtFieldReferenceImpl@emptyCheck" shape=ellipse]
41 [label="6:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
42 [label="6:CtFieldReadImpl@emptyCheck" shape=ellipse]
43 [label="6:CtVariableReadImpl@config" shape=ellipse]
44 [label="6:CtLocalVariableReferenceImpl@config" shape=ellipse]
45 [label="6:CtInvocationImpl@emptyCheck.configure(config)" shape=ellipse]
46 [label="7:CtTypeReferenceImpl@LocalizedMessages" shape=ellipse]
47 [label="7:CtPackageReferenceImpl@" shape=ellipse]
48 [label="7:CtExecutableReferenceImpl@LocalizedMessages()" shape=ellipse]
49 [label="7:CtTypeReferenceImpl@LocalizedMessages" shape=ellipse]
50 [label="7:CtTypeReferenceImpl@LocalizedMessages" shape=ellipse]
51 [label="7:CtConstructorCallImpl@new LocalizedMessages()" shape=ellipse]
52 [label="7:CtVirtualElement@collector" shape=ellipse]
53 [label="7:CtLocalVariableImpl@LocalizedMessages collector = new LocalizedMessages()" shape=ellipse]
54 [label="8:CtExecutableReferenceImpl@setMessages(LocalizedMessages)" shape=ellipse]
55 [label="8:CtTypeReferenceImpl@emptyCheck" shape=ellipse]
56 [label="8:CtTypeReferenceImpl@LocalizedMessages" shape=ellipse]
57 [label="8:CtVirtualElement@setMessages" shape=ellipse]
58 [label="8:CtFieldReferenceImpl@emptyCheck" shape=ellipse]
59 [label="8:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
60 [label="8:CtFieldReadImpl@emptyCheck" shape=ellipse]
61 [label="8:CtVariableReadImpl@collector" shape=ellipse]
62 [label="8:CtLocalVariableReferenceImpl@collector" shape=ellipse]
63 [label="8:CtInvocationImpl@emptyCheck.setMessages(collector)" shape=ellipse]
64 [label="9:CtExecutableReferenceImpl@log(int,java.lang.String)" shape=ellipse]
65 [label="9:CtTypeReferenceImpl@emptyCheck" shape=ellipse]
66 [label="9:CtTypeReferenceImpl@int" shape=ellipse]
67 [label="9:CtTypeReferenceImpl@String" shape=ellipse]
68 [label="9:CtVirtualElement@log" shape=ellipse]
69 [label="9:CtFieldReferenceImpl@emptyCheck" shape=ellipse]
70 [label="9:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
71 [label="9:CtFieldReadImpl@emptyCheck" shape=ellipse]
72 [label="9:CtLiteralImpl@0" shape=ellipse]
73 [label="9:CtTypeReferenceImpl@int" shape=ellipse]
74 [label="9:CtLiteralImpl@\"msgKey\"" shape=ellipse]
75 [label="9:CtTypeReferenceImpl@String" shape=ellipse]
76 [label="9:CtInvocationImpl@emptyCheck.log(0, \"msgKey\")" shape=ellipse]
77 [label="10:CtTypeReferenceImpl@TreeSet<LocalizedMessage>" shape=ellipse]
78 [label="10:CtPackageReferenceImpl@" shape=ellipse]
79 [label="10:CtTypeReferenceImpl@LocalizedMessage" shape=ellipse]
80 [label="10:CtExecutableReferenceImpl@getMessages()" shape=ellipse]
81 [label="10:CtTypeReferenceImpl@LocalizedMessages" shape=ellipse]
82 [label="10:CtTypeReferenceImpl@TreeSet<LocalizedMessage>" shape=ellipse]
83 [label="10:CtVirtualElement@getMessages" shape=ellipse]
84 [label="10:CtVariableReadImpl@collector" shape=ellipse]
85 [label="10:CtLocalVariableReferenceImpl@collector" shape=ellipse]
86 [label="10:CtInvocationImpl@collector.getMessages()" shape=ellipse]
87 [label="10:CtVirtualElement@messages" shape=ellipse]
88 [label="10:CtLocalVariableImpl@TreeSet<LocalizedMessage> messages = collector.getMessages()" shape=ellipse]
89 [label="11:CtExecutableReferenceImpl@assertTrue()" shape=ellipse]
90 [label="11:CtTypeReferenceImpl@Assert" shape=ellipse]
91 [label="11:CtVirtualElement@assertTrue" shape=ellipse]
92 [label="11:CtTypeAccessImpl@Assert" shape=ellipse]
93 [label="11:CtTypeReferenceImpl@Assert" shape=ellipse]
94 [label="11:CtExecutableReferenceImpl@size()" shape=ellipse]
95 [label="11:CtTypeReferenceImpl@TreeSet<LocalizedMessage>" shape=ellipse]
96 [label="11:CtVirtualElement@size" shape=ellipse]
97 [label="11:CtVariableReadImpl@messages" shape=ellipse]
98 [label="11:CtLocalVariableReferenceImpl@messages" shape=ellipse]
99 [label="11:CtInvocationImpl@messages.size()" shape=ellipse]
100 [label="11:CtLiteralImpl@1" shape=ellipse]
101 [label="11:CtTypeReferenceImpl@int" shape=ellipse]
102 [label="11:CtBinaryOperatorImpl@messages.size() == 1" shape=ellipse]
103 [label="11:CtInvocationImpl@Assert.assertTrue(messages.size() == 1)" shape=ellipse]
104 [label="12:CtExecutableReferenceImpl@assertEquals(java.lang.String)" shape=ellipse]
105 [label="12:CtTypeReferenceImpl@Assert" shape=ellipse]
106 [label="12:CtTypeReferenceImpl@String" shape=ellipse]
107 [label="12:CtVirtualElement@assertEquals" shape=ellipse]
108 [label="12:CtTypeAccessImpl@Assert" shape=ellipse]
109 [label="12:CtTypeReferenceImpl@Assert" shape=ellipse]
110 [label="12:CtLiteralImpl@\"This is a custom message.\"" shape=ellipse]
111 [label="12:CtTypeReferenceImpl@String" shape=ellipse]
112 [label="12:CtExecutableReferenceImpl@getMessage()" shape=ellipse]
113 [label="12:CtVirtualElement@getMessage" shape=ellipse]
114 [label="12:CtExecutableReferenceImpl@first()" shape=ellipse]
115 [label="12:CtTypeReferenceImpl@TreeSet<LocalizedMessage>" shape=ellipse]
116 [label="12:CtVirtualElement@first" shape=ellipse]
117 [label="12:CtVariableReadImpl@messages" shape=ellipse]
118 [label="12:CtLocalVariableReferenceImpl@messages" shape=ellipse]
119 [label="12:CtInvocationImpl@messages.first()" shape=ellipse]
120 [label="12:CtInvocationImpl@messages.first().getMessage()" shape=ellipse]
121 [label="12:CtInvocationImpl@Assert.assertEquals(\"This is a custom message.\", messages.first().getMessage())" shape=ellipse]
122 [label="3:CtBlockImpl@\{
    DefaultConfiguration config = createCheckConfig(emptyCheck.getClass());
    config.addMessage(\"msgKey\", \"This is a custom message.\");
    emptyCheck.configure(config);
    LocalizedMessages collector = new LocalizedMessages();
    emptyCheck.setMessages(collector);
    emptyCheck.log(0, \"msgKey\");
    TreeSet<LocalizedMessage> messages = collector.getMessages();
    Assert.assertTrue(messages.size() == 1);
    Assert.assertEquals(\"This is a custom message.\", messages.first().getMessage());
\}" shape=ellipse]
123 [label="3:CtMethodImpl@@Test
public void testCustomMessage() throws Exception \{
    DefaultConfiguration config = createCheckConfig(emptyCheck.getClass());
    config.addMessage(\"msgKey\", \"This is a custom message.\");
    emptyCheck.configure(config);
    LocalizedMessages collector = new LocalizedMessages();
    emptyCheck.setMessages(collector);
    emptyCheck.log(0, \"msgKey\");
    TreeSet<LocalizedMessage> messages = collector.getMessages();
    Assert.assertTrue(messages.size() == 1);
    Assert.assertEquals(\"This is a custom message.\", messages.first().getMessage());
\}" shape=ellipse]
124 [label="2:CtAnnotationImpl@@Test" shape=ellipse]
125 [label="10:Update@UPDATE" shape=ellipse]
126 [label="10:CtPackageReferenceImpl@" shape=ellipse]
127 [label="10:CtPackageReferenceImpl@" shape=ellipse]
128 [label="10:CtTypeReferenceImpl@LocalizedMessage" shape=ellipse]
129 [label="10:CtTypeReferenceImpl@SortedSet<LocalizedMessage>" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
6 -> 7 [label="AST"];
6 -> 8 [label="AST"];
10 -> 11 [label="AST"];
12 -> 13 [label="AST"];
12 -> 10 [label="AST"];
12 -> 22 [label="Data Dep"];
14 -> 15 [label="AST"];
17 -> 18 [label="AST"];
19 -> 17 [label="AST"];
19 -> 22 [label="Data Dep"];
20 -> 16 [label="AST"];
20 -> 19 [label="AST"];
20 -> 14 [label="AST"];
21 -> 9 [label="AST"];
21 -> 12 [label="AST"];
21 -> 6 [label="AST"];
21 -> 20 [label="AST"];
22 -> 29 [label="Define-Use"];
22 -> 43 [label="Define-Use"];
23 -> 22 [label="AST"];
23 -> 4 [label="AST"];
23 -> 21 [label="AST"];
24 -> 25 [label="AST"];
24 -> 26 [label="AST"];
24 -> 27 [label="AST"];
29 -> 30 [label="AST"];
31 -> 32 [label="AST"];
33 -> 34 [label="AST"];
35 -> 28 [label="AST"];
35 -> 29 [label="AST"];
35 -> 24 [label="AST"];
35 -> 31 [label="AST"];
35 -> 33 [label="AST"];
36 -> 37 [label="AST"];
36 -> 38 [label="AST"];
40 -> 41 [label="AST"];
42 -> 40 [label="AST"];
43 -> 44 [label="AST"];
45 -> 39 [label="AST"];
45 -> 42 [label="AST"];
45 -> 36 [label="AST"];
45 -> 43 [label="AST"];
46 -> 47 [label="AST"];
48 -> 49 [label="AST"];
48 -> 50 [label="AST"];
51 -> 48 [label="AST"];
52 -> 61 [label="Define-Use"];
52 -> 84 [label="Define-Use"];
53 -> 52 [label="AST"];
53 -> 46 [label="AST"];
53 -> 51 [label="AST"];
54 -> 55 [label="AST"];
54 -> 56 [label="AST"];
58 -> 59 [label="AST"];
60 -> 58 [label="AST"];
61 -> 62 [label="AST"];
63 -> 57 [label="AST"];
63 -> 60 [label="AST"];
63 -> 54 [label="AST"];
63 -> 61 [label="AST"];
64 -> 65 [label="AST"];
64 -> 66 [label="AST"];
64 -> 67 [label="AST"];
69 -> 70 [label="AST"];
71 -> 69 [label="AST"];
72 -> 73 [label="AST"];
74 -> 75 [label="AST"];
76 -> 68 [label="AST"];
76 -> 71 [label="AST"];
76 -> 64 [label="AST"];
76 -> 72 [label="AST"];
76 -> 74 [label="AST"];
77 -> 78 [label="AST"];
77 -> 79 [label="AST"];
77 -> 125 [label="Action"];
80 -> 81 [label="AST"];
80 -> 82 [label="AST"];
84 -> 85 [label="AST"];
84 -> 87 [label="Data Dep"];
86 -> 83 [label="AST"];
86 -> 84 [label="AST"];
86 -> 80 [label="AST"];
87 -> 97 [label="Define-Use"];
87 -> 117 [label="Define-Use"];
88 -> 87 [label="AST"];
88 -> 77 [label="AST"];
88 -> 86 [label="AST"];
89 -> 90 [label="AST"];
92 -> 93 [label="AST"];
94 -> 95 [label="AST"];
97 -> 98 [label="AST"];
99 -> 96 [label="AST"];
99 -> 97 [label="AST"];
99 -> 94 [label="AST"];
100 -> 101 [label="AST"];
102 -> 99 [label="AST"];
102 -> 100 [label="AST"];
103 -> 91 [label="AST"];
103 -> 92 [label="AST"];
103 -> 89 [label="AST"];
103 -> 102 [label="AST"];
104 -> 105 [label="AST"];
104 -> 106 [label="AST"];
108 -> 109 [label="AST"];
110 -> 111 [label="AST"];
114 -> 115 [label="AST"];
117 -> 118 [label="AST"];
119 -> 116 [label="AST"];
119 -> 117 [label="AST"];
119 -> 114 [label="AST"];
120 -> 113 [label="AST"];
120 -> 119 [label="AST"];
120 -> 112 [label="AST"];
121 -> 107 [label="AST"];
121 -> 108 [label="AST"];
121 -> 104 [label="AST"];
121 -> 110 [label="AST"];
121 -> 120 [label="AST"];
122 -> 23 [label="AST"];
122 -> 35 [label="AST"];
122 -> 45 [label="AST"];
122 -> 53 [label="AST"];
122 -> 63 [label="AST"];
122 -> 76 [label="AST"];
122 -> 88 [label="AST"];
122 -> 103 [label="AST"];
122 -> 121 [label="AST"];
123 -> 1 [label="AST"];
123 -> 124 [label="AST"];
123 -> 0 [label="AST"];
123 -> 2 [label="AST"];
123 -> 122 [label="AST"];
125 -> 129 [label="Action"];
128 -> 127 [label="AST"];
129 -> 126 [label="AST"];
129 -> 128 [label="AST"];
}