digraph "Pattern" {
0 [label="testAllBlockComments#?#4:INSERT
testAllBlockComments#?#4:INSERT" shape=ellipse]
1 [label="testAllBlockComments#?#4:DefaultConfiguration checkConfig = createCheckConfig(BlockCommentListenerCheck.class)
testAllBlockComments#?#4:DefaultConfiguration checkConfig = createCheckConfig(SinglelineCommentListenerCheck.class)" shape=ellipse]
2 [label="testAllBlockComments#?#3:\{
    DefaultConfiguration checkConfig = createCheckConfig(BlockCommentListenerCheck.class);
    final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;
    verify(checkConfig, getPath(\"InputFullOfBlockComments.java\"), expected);
    Assert.assertTrue(ALL_COMMENTS.isEmpty());
\}
testAllBlockComments#?#3:\{
    DefaultConfiguration checkConfig = createCheckConfig(SinglelineCommentListenerCheck.class);
    final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;
    verify(checkConfig, getPath(\"InputFullOfSinglelineComments.java\"), expected);
    Assert.assertTrue(ALL_COMMENTS.isEmpty());
\}" shape=ellipse]
3 [label="testAllBlockComments#?#3:@Test
public void testAllBlockComments() throws Exception \{
    DefaultConfiguration checkConfig = createCheckConfig(BlockCommentListenerCheck.class);
    final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;
    verify(checkConfig, getPath(\"InputFullOfBlockComments.java\"), expected);
    Assert.assertTrue(ALL_COMMENTS.isEmpty());
\}
testAllBlockComments#?#3:@Test
public void testAllBlockComments() throws Exception \{
    DefaultConfiguration checkConfig = createCheckConfig(SinglelineCommentListenerCheck.class);
    final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;
    verify(checkConfig, getPath(\"InputFullOfSinglelineComments.java\"), expected);
    Assert.assertTrue(ALL_COMMENTS.isEmpty());
\}" shape=ellipse]
4 [label="testAllBlockComments#?#6:final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY
testAllBlockComments#?#6:final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY" shape=ellipse]
5 [label="testAllBlockComments#?#7:verify(checkConfig, getPath(\"InputFullOfBlockComments.java\"), expected)
testAllBlockComments#?#7:verify(checkConfig, getPath(\"InputFullOfSinglelineComments.java\"), expected)" shape=ellipse]
6 [label="testAllBlockComments#?#8:Assert.assertTrue(ALL_COMMENTS.isEmpty())
testAllBlockComments#?#8:Assert.assertTrue(ALL_COMMENTS.isEmpty())" shape=ellipse]
7 [label="testAllBlockComments#?#4:checkConfig
testAllBlockComments#?#4:checkConfig" shape=ellipse]
8 [label="testAllBlockComments#?#5:
testAllBlockComments#?#5:" shape=ellipse]
9 [label="testAllBlockComments#?#5:BlockCommentListenerCheck.class
testAllBlockComments#?#5:SinglelineCommentListenerCheck.class" shape=ellipse]
10 [label="testAllBlockComments#?#7:checkConfig
testAllBlockComments#?#7:checkConfig" shape=ellipse]
11 [label="testAllBlockComments#?#4:DefaultConfiguration
testAllBlockComments#?#4:DefaultConfiguration" shape=ellipse]
12 [label="testAllBlockComments#?#4:
testAllBlockComments#?#4:" shape=ellipse]
13 [label="testAllBlockComments#?#5:createCheckConfig(BlockCommentListenerCheck.class)
testAllBlockComments#?#5:createCheckConfig(SinglelineCommentListenerCheck.class)" shape=ellipse]
14 [label="testAllBlockComments#?#5:createCheckConfig
testAllBlockComments#?#5:createCheckConfig" shape=ellipse]
15 [label="testAllBlockComments#?#5:createCheckConfig(java.lang.Class)
testAllBlockComments#?#5:createCheckConfig(java.lang.Class)" shape=ellipse]
1 -> 0 [label="Action:2"];
1 -> 7 [label="AST:2"];
1 -> 11 [label="AST:2"];
1 -> 13 [label="AST:2"];
2 -> 1 [label="AST:2"];
2 -> 4 [label="AST:2"];
2 -> 5 [label="AST:2"];
2 -> 6 [label="AST:2"];
3 -> 2 [label="AST:2"];
5 -> 10 [label="AST:2"];
7 -> 10 [label="Define Use:2"];
8 -> 7 [label="Data Dep:2"];
9 -> 7 [label="Data Dep:2"];
11 -> 12 [label="AST:2"];
13 -> 8 [label="AST:2"];
13 -> 9 [label="AST:2"];
13 -> 14 [label="AST:2"];
13 -> 15 [label="AST:2"];
}