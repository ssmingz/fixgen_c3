digraph "endElement#?,String,String,String" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@endElement" shape=ellipse]
2 [label="2:CtParameterImpl@String aNamespaceURI" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
4 [label="2:CtParameterImpl@String aLocalName" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
6 [label="2:CtParameterImpl@String aQName" shape=ellipse]
7 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
8 [label="3:CtTypeReferenceImpl@SAXException" shape=ellipse]
9 [label="3:CtPackageReferenceImpl@" shape=ellipse]
10 [label="4:CtExecutableReferenceImpl@equals(java.lang.Object)" shape=ellipse]
11 [label="4:CtTypeReferenceImpl@String" shape=ellipse]
12 [label="4:CtTypeReferenceImpl@boolean" shape=ellipse]
13 [label="4:CtTypeReferenceImpl@Object" shape=ellipse]
14 [label="4:CtVirtualElement@equals" shape=ellipse]
15 [label="4:CtVariableReadImpl@aQName" shape=ellipse]
16 [label="4:CtParameterReferenceImpl@aQName" shape=ellipse]
17 [label="4:CtTypeAccessImpl@MODULE" shape=ellipse]
18 [label="4:CtTypeReferenceImpl@MODULE" shape=ellipse]
19 [label="4:CtInvocationImpl@aQName.equals(MODULE)" shape=ellipse]
20 [label="5:CtTypeReferenceImpl@Configuration" shape=ellipse]
21 [label="5:CtPackageReferenceImpl@" shape=ellipse]
22 [label="5:CtExecutableReferenceImpl@pop()" shape=ellipse]
23 [label="5:CtTypeReferenceImpl@mConfigStack" shape=ellipse]
24 [label="5:CtVirtualElement@pop" shape=ellipse]
25 [label="5:CtFieldReferenceImpl@mConfigStack" shape=ellipse]
26 [label="5:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
27 [label="5:CtFieldReadImpl@mConfigStack" shape=ellipse]
28 [label="5:CtInvocationImpl@((Configuration) (mConfigStack.pop()))" shape=ellipse]
29 [label="5:CtTypeReferenceImpl@Configuration" shape=ellipse]
30 [label="5:CtVirtualElement@recentModule" shape=ellipse]
31 [label="5:CtLocalVariableImpl@final Configuration recentModule = ((Configuration) (mConfigStack.pop()))" shape=ellipse]
32 [label="6:CtTypeReferenceImpl@SeverityLevel" shape=ellipse]
33 [label="6:CtPackageReferenceImpl@" shape=ellipse]
34 [label="6:CtLiteralImpl@null" shape=ellipse]
35 [label="6:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
36 [label="6:CtVirtualElement@level" shape=ellipse]
37 [label="6:CtLocalVariableImpl@SeverityLevel level = null" shape=ellipse]
38 [label="8:CtTypeReferenceImpl@String" shape=ellipse]
39 [label="8:CtPackageReferenceImpl@java.lang" shape=ellipse]
40 [label="8:CtExecutableReferenceImpl@getAttribute()" shape=ellipse]
41 [label="8:CtTypeReferenceImpl@Configuration" shape=ellipse]
42 [label="8:CtTypeReferenceImpl@String" shape=ellipse]
43 [label="8:CtVirtualElement@getAttribute" shape=ellipse]
44 [label="8:CtVariableReadImpl@recentModule" shape=ellipse]
45 [label="8:CtLocalVariableReferenceImpl@recentModule" shape=ellipse]
46 [label="8:CtTypeAccessImpl@SEVERITY" shape=ellipse]
47 [label="8:CtTypeReferenceImpl@SEVERITY" shape=ellipse]
48 [label="8:CtInvocationImpl@recentModule.getAttribute(SEVERITY)" shape=ellipse]
49 [label="8:CtVirtualElement@severity" shape=ellipse]
50 [label="8:CtLocalVariableImpl@final String severity = recentModule.getAttribute(SEVERITY)" shape=ellipse]
51 [label="9:CtVariableWriteImpl@level" shape=ellipse]
52 [label="9:CtLocalVariableReferenceImpl@level" shape=ellipse]
53 [label="9:CtExecutableReferenceImpl@getInstance(java.lang.String)" shape=ellipse]
54 [label="9:CtTypeReferenceImpl@SeverityLevel" shape=ellipse]
55 [label="9:CtTypeReferenceImpl@String" shape=ellipse]
56 [label="9:CtVirtualElement@getInstance" shape=ellipse]
57 [label="9:CtTypeAccessImpl@SeverityLevel" shape=ellipse]
58 [label="9:CtTypeReferenceImpl@SeverityLevel" shape=ellipse]
59 [label="9:CtVariableReadImpl@severity" shape=ellipse]
60 [label="9:CtLocalVariableReferenceImpl@severity" shape=ellipse]
61 [label="9:CtInvocationImpl@SeverityLevel.getInstance(severity)" shape=ellipse]
62 [label="9:CtAssignmentImpl@level = SeverityLevel.getInstance(severity)" shape=ellipse]
63 [label="7:CtBlockImpl@\{
    final String severity = recentModule.getAttribute(SEVERITY);
    level = SeverityLevel.getInstance(severity);
\}" shape=ellipse]
64 [label="10:CtVirtualElement@e" shape=ellipse]
65 [label="10:CtTypeReferenceImpl@CheckstyleException" shape=ellipse]
66 [label="10:CtPackageReferenceImpl@" shape=ellipse]
67 [label="10:CtCatchVariableImpl@final CheckstyleException e" shape=ellipse]
68 [label="10:CtBlockImpl@\{
\}" shape=ellipse]
69 [label="10:CtCatchImpl@ catch (final CheckstyleException e) \{
\}" shape=ellipse]
70 [label="7:CtTryImpl@try \{
    final String severity = recentModule.getAttribute(SEVERITY);
    level = SeverityLevel.getInstance(severity);
\} catch (final CheckstyleException e) \{
\}" shape=ellipse]
71 [label="12:CtTypeReferenceImpl@boolean" shape=ellipse]
72 [label="12:CtFieldReferenceImpl@mOmitIgnoredModules" shape=ellipse]
73 [label="12:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
74 [label="12:CtFieldReadImpl@mOmitIgnoredModules" shape=ellipse]
75 [label="12:CtExecutableReferenceImpl@equals(SeverityLevel)" shape=ellipse]
76 [label="12:CtTypeReferenceImpl@IGNORE" shape=ellipse]
77 [label="12:CtTypeReferenceImpl@SeverityLevel" shape=ellipse]
78 [label="12:CtVirtualElement@equals" shape=ellipse]
79 [label="12:CtTypeAccessImpl@IGNORE" shape=ellipse]
80 [label="12:CtTypeReferenceImpl@IGNORE" shape=ellipse]
81 [label="12:CtVariableReadImpl@level" shape=ellipse]
82 [label="12:CtLocalVariableReferenceImpl@level" shape=ellipse]
83 [label="12:CtInvocationImpl@IGNORE.equals(level)" shape=ellipse]
84 [label="12:CtBinaryOperatorImpl@mOmitIgnoredModules && IGNORE.equals(level)" shape=ellipse]
85 [label="12:CtVirtualElement@omitModule" shape=ellipse]
86 [label="12:CtLocalVariableImpl@final boolean omitModule = mOmitIgnoredModules && IGNORE.equals(level)" shape=ellipse]
87 [label="13:CtVariableReadImpl@omitModule" shape=ellipse]
88 [label="13:CtLocalVariableReferenceImpl@omitModule" shape=ellipse]
89 [label="13:CtExecutableReferenceImpl@isEmpty()" shape=ellipse]
90 [label="13:CtTypeReferenceImpl@mConfigStack" shape=ellipse]
91 [label="13:CtVirtualElement@isEmpty" shape=ellipse]
92 [label="13:CtFieldReferenceImpl@mConfigStack" shape=ellipse]
93 [label="13:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
94 [label="13:CtFieldReadImpl@mConfigStack" shape=ellipse]
95 [label="13:CtInvocationImpl@mConfigStack.isEmpty()" shape=ellipse]
96 [label="13:CtUnaryOperatorImpl@(!mConfigStack.isEmpty())" shape=ellipse]
97 [label="13:CtBinaryOperatorImpl@omitModule && (!mConfigStack.isEmpty())" shape=ellipse]
98 [label="14:CtTypeReferenceImpl@DefaultConfiguration" shape=ellipse]
99 [label="14:CtPackageReferenceImpl@" shape=ellipse]
100 [label="14:CtExecutableReferenceImpl@peek()" shape=ellipse]
101 [label="14:CtTypeReferenceImpl@mConfigStack" shape=ellipse]
102 [label="14:CtVirtualElement@peek" shape=ellipse]
103 [label="14:CtFieldReferenceImpl@mConfigStack" shape=ellipse]
104 [label="14:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
105 [label="14:CtFieldReadImpl@mConfigStack" shape=ellipse]
106 [label="14:CtInvocationImpl@((DefaultConfiguration) (mConfigStack.peek()))" shape=ellipse]
107 [label="14:CtTypeReferenceImpl@DefaultConfiguration" shape=ellipse]
108 [label="14:CtVirtualElement@parentModule" shape=ellipse]
109 [label="14:CtLocalVariableImpl@final DefaultConfiguration parentModule = ((DefaultConfiguration) (mConfigStack.peek()))" shape=ellipse]
110 [label="15:CtExecutableReferenceImpl@removeChild(Configuration)" shape=ellipse]
111 [label="15:CtTypeReferenceImpl@DefaultConfiguration" shape=ellipse]
112 [label="15:CtTypeReferenceImpl@Configuration" shape=ellipse]
113 [label="15:CtVirtualElement@removeChild" shape=ellipse]
114 [label="15:CtVariableReadImpl@parentModule" shape=ellipse]
115 [label="15:CtLocalVariableReferenceImpl@parentModule" shape=ellipse]
116 [label="15:CtVariableReadImpl@recentModule" shape=ellipse]
117 [label="15:CtLocalVariableReferenceImpl@recentModule" shape=ellipse]
118 [label="15:CtInvocationImpl@parentModule.removeChild(recentModule)" shape=ellipse]
119 [label="13:CtBlockImpl@\{
    final DefaultConfiguration parentModule = ((DefaultConfiguration) (mConfigStack.peek()));
    parentModule.removeChild(recentModule);
\}" shape=ellipse]
120 [label="13:CtIfImpl@if (omitModule && (!mConfigStack.isEmpty())) \{
    final DefaultConfiguration parentModule = ((DefaultConfiguration) (mConfigStack.peek()));
    parentModule.removeChild(recentModule);
\}" shape=ellipse]
121 [label="4:CtBlockImpl@\{
    final Configuration recentModule = ((Configuration) (mConfigStack.pop()));
    SeverityLevel level = null;
    try \{
        final String severity = recentModule.getAttribute(SEVERITY);
        level = SeverityLevel.getInstance(severity);
    \} catch (final CheckstyleException e) \{
    \}
    final boolean omitModule = mOmitIgnoredModules && IGNORE.equals(level);
    if (omitModule && (!mConfigStack.isEmpty())) \{
        final DefaultConfiguration parentModule = ((DefaultConfiguration) (mConfigStack.peek()));
        parentModule.removeChild(recentModule);
    \}
\}" shape=ellipse]
122 [label="4:CtIfImpl@if (aQName.equals(MODULE)) \{
    final Configuration recentModule = ((Configuration) (mConfigStack.pop()));
    SeverityLevel level = null;
    try \{
        final String severity = recentModule.getAttribute(SEVERITY);
        level = SeverityLevel.getInstance(severity);
    \} catch (final CheckstyleException e) \{
    \}
    final boolean omitModule = mOmitIgnoredModules && IGNORE.equals(level);
    if (omitModule && (!mConfigStack.isEmpty())) \{
        final DefaultConfiguration parentModule = ((DefaultConfiguration) (mConfigStack.peek()));
        parentModule.removeChild(recentModule);
    \}
\}" shape=ellipse]
123 [label="3:CtBlockImpl@\{
    if (aQName.equals(MODULE)) \{
        final Configuration recentModule = ((Configuration) (mConfigStack.pop()));
        SeverityLevel level = null;
        try \{
            final String severity = recentModule.getAttribute(SEVERITY);
            level = SeverityLevel.getInstance(severity);
        \} catch (final CheckstyleException e) \{
        \}
        final boolean omitModule = mOmitIgnoredModules && IGNORE.equals(level);
        if (omitModule && (!mConfigStack.isEmpty())) \{
            final DefaultConfiguration parentModule = ((DefaultConfiguration) (mConfigStack.peek()));
            parentModule.removeChild(recentModule);
        \}
    \}
\}" shape=ellipse]
124 [label="2:CtMethodImpl@public void endElement(String aNamespaceURI, String aLocalName, String aQName) throws SAXException \{
    if (aQName.equals(MODULE)) \{
        final Configuration recentModule = ((Configuration) (mConfigStack.pop()));
        SeverityLevel level = null;
        try \{
            final String severity = recentModule.getAttribute(SEVERITY);
            level = SeverityLevel.getInstance(severity);
        \} catch (final CheckstyleException e) \{
        \}
        final boolean omitModule = mOmitIgnoredModules && IGNORE.equals(level);
        if (omitModule && (!mConfigStack.isEmpty())) \{
            final DefaultConfiguration parentModule = ((DefaultConfiguration) (mConfigStack.peek()));
            parentModule.removeChild(recentModule);
        \}
    \}
\}" shape=ellipse]
125 [label="5:Delete@DELETE" shape=ellipse]
126 [label="14:Delete@DELETE" shape=ellipse]
127 [label="2:Insert@INSERT" shape=ellipse]
128 [label="2:CtPackageReferenceImpl@java.lang" shape=ellipse]
129 [label="2:CtTypeReferenceImpl@Override" shape=ellipse]
130 [label="2:CtPackageReferenceImpl@java.lang" shape=ellipse]
131 [label="2:CtTypeReferenceImpl@Override" shape=ellipse]
132 [label="2:CtAnnotationImpl@@java.lang.Override" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
6 -> 7 [label="AST"];
8 -> 9 [label="AST"];
10 -> 11 [label="AST"];
10 -> 12 [label="AST"];
10 -> 13 [label="AST"];
15 -> 16 [label="AST"];
17 -> 18 [label="AST"];
19 -> 14 [label="AST"];
19 -> 15 [label="AST"];
19 -> 10 [label="AST"];
19 -> 17 [label="AST"];
19 -> 121 [label="Control Dep"];
19 -> 31 [label="Control Dep"];
19 -> 28 [label="Control Dep"];
19 -> 22 [label="Control Dep"];
19 -> 27 [label="Control Dep"];
19 -> 37 [label="Control Dep"];
19 -> 34 [label="Control Dep"];
19 -> 70 [label="Control Dep"];
19 -> 63 [label="Control Dep"];
19 -> 50 [label="Control Dep"];
19 -> 48 [label="Control Dep"];
19 -> 40 [label="Control Dep"];
19 -> 44 [label="Control Dep"];
19 -> 46 [label="Control Dep"];
19 -> 62 [label="Control Dep"];
19 -> 51 [label="Control Dep"];
19 -> 61 [label="Control Dep"];
19 -> 53 [label="Control Dep"];
19 -> 57 [label="Control Dep"];
19 -> 59 [label="Control Dep"];
19 -> 69 [label="Control Dep"];
19 -> 67 [label="Control Dep"];
19 -> 86 [label="Control Dep"];
19 -> 84 [label="Control Dep"];
19 -> 74 [label="Control Dep"];
19 -> 83 [label="Control Dep"];
19 -> 75 [label="Control Dep"];
19 -> 79 [label="Control Dep"];
19 -> 81 [label="Control Dep"];
19 -> 120 [label="Control Dep"];
19 -> 97 [label="Control Dep"];
19 -> 87 [label="Control Dep"];
19 -> 96 [label="Control Dep"];
19 -> 95 [label="Control Dep"];
19 -> 89 [label="Control Dep"];
19 -> 94 [label="Control Dep"];
20 -> 21 [label="AST"];
22 -> 23 [label="AST"];
25 -> 26 [label="AST"];
27 -> 25 [label="AST"];
27 -> 30 [label="Data Dep"];
28 -> 24 [label="AST"];
28 -> 29 [label="AST"];
28 -> 27 [label="AST"];
28 -> 22 [label="AST"];
29 -> 125 [label="Action"];
30 -> 44 [label="Define-Use"];
30 -> 116 [label="Define-Use"];
31 -> 30 [label="AST"];
31 -> 20 [label="AST"];
31 -> 28 [label="AST"];
32 -> 33 [label="AST"];
34 -> 35 [label="AST"];
37 -> 36 [label="AST"];
37 -> 32 [label="AST"];
37 -> 34 [label="AST"];
38 -> 39 [label="AST"];
40 -> 41 [label="AST"];
40 -> 42 [label="AST"];
44 -> 45 [label="AST"];
44 -> 49 [label="Data Dep"];
46 -> 47 [label="AST"];
48 -> 43 [label="AST"];
48 -> 44 [label="AST"];
48 -> 40 [label="AST"];
48 -> 46 [label="AST"];
49 -> 59 [label="Define-Use"];
50 -> 49 [label="AST"];
50 -> 38 [label="AST"];
50 -> 48 [label="AST"];
51 -> 52 [label="AST"];
51 -> 81 [label="Define-Use"];
53 -> 54 [label="AST"];
53 -> 55 [label="AST"];
57 -> 58 [label="AST"];
59 -> 60 [label="AST"];
59 -> 51 [label="Data Dep"];
61 -> 56 [label="AST"];
61 -> 57 [label="AST"];
61 -> 53 [label="AST"];
61 -> 59 [label="AST"];
62 -> 51 [label="AST"];
62 -> 61 [label="AST"];
63 -> 50 [label="AST"];
63 -> 62 [label="AST"];
65 -> 66 [label="AST"];
67 -> 64 [label="AST"];
67 -> 65 [label="AST"];
67 -> 68 [label="Control Dep"];
69 -> 67 [label="AST"];
69 -> 68 [label="AST"];
70 -> 63 [label="AST"];
70 -> 69 [label="AST"];
72 -> 73 [label="AST"];
74 -> 72 [label="AST"];
74 -> 85 [label="Data Dep"];
75 -> 76 [label="AST"];
75 -> 77 [label="AST"];
79 -> 80 [label="AST"];
81 -> 82 [label="AST"];
81 -> 85 [label="Data Dep"];
83 -> 78 [label="AST"];
83 -> 79 [label="AST"];
83 -> 75 [label="AST"];
83 -> 81 [label="AST"];
84 -> 74 [label="AST"];
84 -> 83 [label="AST"];
85 -> 87 [label="Define-Use"];
86 -> 85 [label="AST"];
86 -> 71 [label="AST"];
86 -> 84 [label="AST"];
87 -> 88 [label="AST"];
89 -> 90 [label="AST"];
92 -> 93 [label="AST"];
94 -> 92 [label="AST"];
95 -> 91 [label="AST"];
95 -> 94 [label="AST"];
95 -> 89 [label="AST"];
96 -> 95 [label="AST"];
97 -> 87 [label="AST"];
97 -> 96 [label="AST"];
97 -> 119 [label="Control Dep"];
97 -> 109 [label="Control Dep"];
97 -> 106 [label="Control Dep"];
97 -> 100 [label="Control Dep"];
97 -> 105 [label="Control Dep"];
97 -> 118 [label="Control Dep"];
97 -> 110 [label="Control Dep"];
97 -> 114 [label="Control Dep"];
97 -> 116 [label="Control Dep"];
98 -> 99 [label="AST"];
100 -> 101 [label="AST"];
103 -> 104 [label="AST"];
105 -> 103 [label="AST"];
105 -> 108 [label="Data Dep"];
106 -> 102 [label="AST"];
106 -> 107 [label="AST"];
106 -> 105 [label="AST"];
106 -> 100 [label="AST"];
107 -> 126 [label="Action"];
108 -> 114 [label="Define-Use"];
109 -> 108 [label="AST"];
109 -> 98 [label="AST"];
109 -> 106 [label="AST"];
110 -> 111 [label="AST"];
110 -> 112 [label="AST"];
114 -> 115 [label="AST"];
116 -> 117 [label="AST"];
118 -> 113 [label="AST"];
118 -> 114 [label="AST"];
118 -> 110 [label="AST"];
118 -> 116 [label="AST"];
119 -> 109 [label="AST"];
119 -> 118 [label="AST"];
120 -> 97 [label="AST"];
120 -> 119 [label="AST"];
121 -> 31 [label="AST"];
121 -> 37 [label="AST"];
121 -> 70 [label="AST"];
121 -> 86 [label="AST"];
121 -> 120 [label="AST"];
122 -> 19 [label="AST"];
122 -> 121 [label="AST"];
123 -> 122 [label="AST"];
124 -> 1 [label="AST"];
124 -> 0 [label="AST"];
124 -> 2 [label="AST"];
124 -> 4 [label="AST"];
124 -> 6 [label="AST"];
124 -> 8 [label="AST"];
124 -> 123 [label="AST"];
124 -> 127 [label="Action"];
127 -> 132 [label="Action"];
129 -> 128 [label="AST"];
131 -> 130 [label="AST"];
132 -> 129 [label="AST"];
132 -> 131 [label="AST"];
}