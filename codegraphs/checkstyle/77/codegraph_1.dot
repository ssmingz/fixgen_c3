digraph "checkIndentation#?" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@checkIndentation" shape=ellipse]
2 [label="3:CtExecutableReferenceImpl@checkLabel()" shape=ellipse]
3 [label="3:CtVirtualElement@checkLabel" shape=ellipse]
4 [label="3:CtTypeAccessImpl@PlaceHold" shape=ellipse]
5 [label="3:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
6 [label="3:CtThisAccessImpl@" shape=ellipse]
7 [label="3:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
8 [label="3:CtInvocationImpl@checkLabel()" shape=ellipse]
9 [label="4:CtTypeReferenceImpl@DetailAST" shape=ellipse]
10 [label="4:CtPackageReferenceImpl@" shape=ellipse]
11 [label="4:CtExecutableReferenceImpl@getNextSibling()" shape=ellipse]
12 [label="4:CtVirtualElement@getNextSibling" shape=ellipse]
13 [label="4:CtExecutableReferenceImpl@getFirstChild()" shape=ellipse]
14 [label="4:CtVirtualElement@getFirstChild" shape=ellipse]
15 [label="4:CtExecutableReferenceImpl@getMainAst()" shape=ellipse]
16 [label="4:CtVirtualElement@getMainAst" shape=ellipse]
17 [label="4:CtTypeAccessImpl@PlaceHold" shape=ellipse]
18 [label="4:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
19 [label="4:CtThisAccessImpl@" shape=ellipse]
20 [label="4:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
21 [label="4:CtInvocationImpl@getMainAst()" shape=ellipse]
22 [label="4:CtInvocationImpl@getMainAst().getFirstChild()" shape=ellipse]
23 [label="4:CtInvocationImpl@((DetailAST) (getMainAst().getFirstChild().getNextSibling()))" shape=ellipse]
24 [label="4:CtTypeReferenceImpl@DetailAST" shape=ellipse]
25 [label="4:CtVirtualElement@parent" shape=ellipse]
26 [label="4:CtLocalVariableImpl@DetailAST parent = ((DetailAST) (getMainAst().getFirstChild().getNextSibling()))" shape=ellipse]
27 [label="5:CtExecutableReferenceImpl@checkExpressionSubtree(<unknown>,<unknown>,boolean,boolean)" shape=ellipse]
28 [label="5:CtTypeReferenceImpl@null" shape=ellipse]
29 [label="5:CtTypeReferenceImpl@null" shape=ellipse]
30 [label="5:CtTypeReferenceImpl@boolean" shape=ellipse]
31 [label="5:CtTypeReferenceImpl@boolean" shape=ellipse]
32 [label="5:CtVirtualElement@checkExpressionSubtree" shape=ellipse]
33 [label="5:CtTypeAccessImpl@PlaceHold" shape=ellipse]
34 [label="5:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
35 [label="5:CtThisAccessImpl@" shape=ellipse]
36 [label="5:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
37 [label="5:CtVariableReadImpl@parent" shape=ellipse]
38 [label="5:CtLocalVariableReferenceImpl@parent" shape=ellipse]
39 [label="5:CtExecutableReferenceImpl@getLevel()" shape=ellipse]
40 [label="5:CtVirtualElement@getLevel" shape=ellipse]
41 [label="5:CtTypeAccessImpl@PlaceHold" shape=ellipse]
42 [label="5:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
43 [label="5:CtThisAccessImpl@" shape=ellipse]
44 [label="5:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
45 [label="5:CtInvocationImpl@getLevel()" shape=ellipse]
46 [label="5:CtExecutableReferenceImpl@getBasicOffset()" shape=ellipse]
47 [label="5:CtVirtualElement@getBasicOffset" shape=ellipse]
48 [label="5:CtExecutableReferenceImpl@getIndentCheck()" shape=ellipse]
49 [label="5:CtVirtualElement@getIndentCheck" shape=ellipse]
50 [label="5:CtTypeAccessImpl@PlaceHold" shape=ellipse]
51 [label="5:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
52 [label="5:CtThisAccessImpl@" shape=ellipse]
53 [label="5:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
54 [label="5:CtInvocationImpl@getIndentCheck()" shape=ellipse]
55 [label="5:CtInvocationImpl@getIndentCheck().getBasicOffset()" shape=ellipse]
56 [label="5:CtBinaryOperatorImpl@getLevel() + getIndentCheck().getBasicOffset()" shape=ellipse]
57 [label="5:CtLiteralImpl@true" shape=ellipse]
58 [label="5:CtTypeReferenceImpl@boolean" shape=ellipse]
59 [label="5:CtLiteralImpl@false" shape=ellipse]
60 [label="5:CtTypeReferenceImpl@boolean" shape=ellipse]
61 [label="5:CtInvocationImpl@checkExpressionSubtree(parent, getLevel() + getIndentCheck().getBasicOffset(), true, false)" shape=ellipse]
62 [label="2:CtBlockImpl@\{
    checkLabel();
    DetailAST parent = ((DetailAST) (getMainAst().getFirstChild().getNextSibling()));
    checkExpressionSubtree(parent, getLevel() + getIndentCheck().getBasicOffset(), true, false);
\}" shape=ellipse]
63 [label="2:CtMethodImpl@public void checkIndentation() \{
    checkLabel();
    DetailAST parent = ((DetailAST) (getMainAst().getFirstChild().getNextSibling()));
    checkExpressionSubtree(parent, getLevel() + getIndentCheck().getBasicOffset(), true, false);
\}" shape=ellipse]
64 [label="5:Delete@DELETE" shape=ellipse]
65 [label="5:Delete@DELETE" shape=ellipse]
66 [label="5:Insert@INSERT" shape=ellipse]
67 [label="5:CtPackageReferenceImpl@" shape=ellipse]
68 [label="5:CtTypeReferenceImpl@IndentLevel" shape=ellipse]
69 [label="5:CtPackageReferenceImpl@" shape=ellipse]
70 [label="5:CtTypeReferenceImpl@IndentLevel" shape=ellipse]
71 [label="5:CtPackageReferenceImpl@" shape=ellipse]
72 [label="5:CtTypeReferenceImpl@IndentLevel" shape=ellipse]
73 [label="5:CtExecutableReferenceImpl@IndentLevel()" shape=ellipse]
74 [label="5:CtPackageReferenceImpl@" shape=ellipse]
75 [label="5:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
76 [label="5:CtPackageReferenceImpl@" shape=ellipse]
77 [label="5:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
78 [label="5:CtTypeAccessImpl@PlaceHold" shape=ellipse]
79 [label="5:CtThisAccessImpl@" shape=ellipse]
80 [label="5:CtExecutableReferenceImpl@getLevel()" shape=ellipse]
81 [label="5:CtInvocationImpl@getLevel()" shape=ellipse]
82 [label="5:CtVirtualElement@getLevel" shape=ellipse]
83 [label="5:CtPackageReferenceImpl@" shape=ellipse]
84 [label="5:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
85 [label="5:CtPackageReferenceImpl@" shape=ellipse]
86 [label="5:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
87 [label="5:CtTypeAccessImpl@PlaceHold" shape=ellipse]
88 [label="5:CtThisAccessImpl@" shape=ellipse]
89 [label="5:CtExecutableReferenceImpl@getBasicOffset()" shape=ellipse]
90 [label="5:CtInvocationImpl@getBasicOffset()" shape=ellipse]
91 [label="5:CtVirtualElement@getBasicOffset" shape=ellipse]
92 [label="5:CtConstructorCallImpl@new IndentLevel(getLevel(), getBasicOffset())" shape=ellipse]
93 [label="5:CtLocalVariableImpl@IndentLevel expected = new IndentLevel(, )" shape=ellipse]
94 [label="5:CtVirtualElement@expected" shape=ellipse]
95 [label="6:Insert@INSERT" shape=ellipse]
96 [label="6:CtPackageReferenceImpl@" shape=ellipse]
97 [label="6:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
98 [label="6:CtPackageReferenceImpl@" shape=ellipse]
99 [label="6:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
100 [label="6:CtTypeAccessImpl@PlaceHold" shape=ellipse]
101 [label="6:CtThisAccessImpl@" shape=ellipse]
102 [label="6:CtTypeReferenceImpl@null" shape=ellipse]
103 [label="6:CtTypeReferenceImpl@null" shape=ellipse]
104 [label="6:CtTypeReferenceImpl@boolean" shape=ellipse]
105 [label="6:CtTypeReferenceImpl@boolean" shape=ellipse]
106 [label="6:CtExecutableReferenceImpl@checkExpressionSubtree(<unknown>,<unknown>,boolean,boolean)" shape=ellipse]
107 [label="6:CtPackageReferenceImpl@" shape=ellipse]
108 [label="6:CtTypeReferenceImpl@DetailAST" shape=ellipse]
109 [label="6:CtLocalVariableReferenceImpl@parent" shape=ellipse]
110 [label="6:CtVariableReadImpl@parent" shape=ellipse]
111 [label="6:CtPackageReferenceImpl@" shape=ellipse]
112 [label="6:CtTypeReferenceImpl@IndentLevel" shape=ellipse]
113 [label="6:CtLocalVariableReferenceImpl@expected" shape=ellipse]
114 [label="6:CtVariableReadImpl@expected" shape=ellipse]
115 [label="6:CtTypeReferenceImpl@boolean" shape=ellipse]
116 [label="6:CtLiteralImpl@true" shape=ellipse]
117 [label="6:CtTypeReferenceImpl@boolean" shape=ellipse]
118 [label="6:CtLiteralImpl@false" shape=ellipse]
119 [label="6:CtInvocationImpl@checkExpressionSubtree(parent, expected, , )" shape=ellipse]
120 [label="6:CtVirtualElement@checkExpressionSubtree" shape=ellipse]
121 [label="5:Move@MOVE" shape=ellipse]
122 [label="5:Move@MOVE" shape=ellipse]
123 [label="5:Move@MOVE" shape=ellipse]
124 [label="5:Move@MOVE" shape=ellipse]
4 -> 5 [label="AST"];
6 -> 7 [label="AST"];
6 -> 4 [label="AST"];
8 -> 3 [label="AST"];
8 -> 6 [label="AST"];
8 -> 2 [label="AST"];
9 -> 10 [label="AST"];
17 -> 18 [label="AST"];
19 -> 20 [label="AST"];
19 -> 17 [label="AST"];
19 -> 25 [label="Data Dep"];
21 -> 16 [label="AST"];
21 -> 19 [label="AST"];
21 -> 15 [label="AST"];
22 -> 14 [label="AST"];
22 -> 21 [label="AST"];
22 -> 13 [label="AST"];
23 -> 12 [label="AST"];
23 -> 24 [label="AST"];
23 -> 22 [label="AST"];
23 -> 11 [label="AST"];
25 -> 37 [label="Define-Use"];
26 -> 25 [label="AST"];
26 -> 9 [label="AST"];
26 -> 23 [label="AST"];
27 -> 28 [label="AST"];
27 -> 29 [label="AST"];
27 -> 30 [label="AST"];
27 -> 31 [label="AST"];
33 -> 34 [label="AST"];
35 -> 36 [label="AST"];
35 -> 33 [label="AST"];
37 -> 38 [label="AST"];
41 -> 42 [label="AST"];
43 -> 44 [label="AST"];
43 -> 41 [label="AST"];
45 -> 40 [label="AST"];
45 -> 43 [label="AST"];
45 -> 39 [label="AST"];
45 -> 123 [label="Action"];
50 -> 51 [label="AST"];
52 -> 53 [label="AST"];
52 -> 50 [label="AST"];
54 -> 49 [label="AST"];
54 -> 52 [label="AST"];
54 -> 48 [label="AST"];
54 -> 64 [label="Action"];
55 -> 47 [label="AST"];
55 -> 54 [label="AST"];
55 -> 46 [label="AST"];
55 -> 124 [label="Action"];
56 -> 45 [label="AST"];
56 -> 55 [label="AST"];
57 -> 58 [label="AST"];
57 -> 121 [label="Action"];
59 -> 60 [label="AST"];
59 -> 122 [label="Action"];
61 -> 32 [label="AST"];
61 -> 35 [label="AST"];
61 -> 27 [label="AST"];
61 -> 37 [label="AST"];
61 -> 56 [label="AST"];
61 -> 57 [label="AST"];
61 -> 59 [label="AST"];
61 -> 65 [label="Action"];
62 -> 8 [label="AST"];
62 -> 26 [label="AST"];
62 -> 61 [label="AST"];
62 -> 66 [label="Action"];
62 -> 95 [label="Action"];
63 -> 1 [label="AST"];
63 -> 0 [label="AST"];
63 -> 62 [label="AST"];
66 -> 93 [label="Action"];
68 -> 67 [label="AST"];
70 -> 69 [label="AST"];
72 -> 71 [label="AST"];
73 -> 70 [label="AST"];
73 -> 72 [label="AST"];
75 -> 74 [label="AST"];
77 -> 76 [label="AST"];
78 -> 77 [label="AST"];
79 -> 75 [label="AST"];
79 -> 78 [label="AST"];
79 -> 94 [label="Data Dep"];
81 -> 82 [label="AST"];
81 -> 79 [label="AST"];
81 -> 80 [label="AST"];
84 -> 83 [label="AST"];
86 -> 85 [label="AST"];
87 -> 86 [label="AST"];
88 -> 84 [label="AST"];
88 -> 87 [label="AST"];
88 -> 94 [label="Data Dep"];
90 -> 91 [label="AST"];
90 -> 88 [label="AST"];
90 -> 89 [label="AST"];
92 -> 73 [label="AST"];
92 -> 81 [label="AST"];
92 -> 90 [label="AST"];
93 -> 94 [label="AST"];
93 -> 68 [label="AST"];
93 -> 92 [label="AST"];
94 -> 114 [label="Define-Use"];
95 -> 119 [label="Action"];
97 -> 96 [label="AST"];
99 -> 98 [label="AST"];
100 -> 99 [label="AST"];
101 -> 97 [label="AST"];
101 -> 100 [label="AST"];
106 -> 102 [label="AST"];
106 -> 103 [label="AST"];
106 -> 104 [label="AST"];
106 -> 105 [label="AST"];
108 -> 107 [label="AST"];
109 -> 108 [label="AST"];
110 -> 109 [label="AST"];
112 -> 111 [label="AST"];
113 -> 112 [label="AST"];
114 -> 113 [label="AST"];
116 -> 115 [label="AST"];
118 -> 117 [label="AST"];
119 -> 120 [label="AST"];
119 -> 101 [label="AST"];
119 -> 106 [label="AST"];
119 -> 110 [label="AST"];
119 -> 114 [label="AST"];
119 -> 116 [label="AST"];
119 -> 118 [label="AST"];
121 -> 119 [label="Action"];
122 -> 119 [label="Action"];
123 -> 92 [label="Action"];
124 -> 92 [label="Action"];
}