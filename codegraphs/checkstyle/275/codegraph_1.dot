digraph "isOverridingMethod#?,DetailAST" {
0 [label="2:CtTypeReferenceImpl@boolean" shape=ellipse]
1 [label="2:CtVirtualElement@isOverridingMethod" shape=ellipse]
2 [label="2:CtParameterImpl@DetailAST ast" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@DetailAST" shape=ellipse]
4 [label="3:CtExecutableReferenceImpl@getType()" shape=ellipse]
5 [label="3:CtTypeReferenceImpl@DetailAST" shape=ellipse]
6 [label="3:CtVirtualElement@getType" shape=ellipse]
7 [label="3:CtVariableReadImpl@ast" shape=ellipse]
8 [label="3:CtParameterReferenceImpl@ast" shape=ellipse]
9 [label="3:CtInvocationImpl@ast.getType()" shape=ellipse]
10 [label="3:CtFieldReferenceImpl@TokenTypes.METHOD_DEF" shape=ellipse]
11 [label="3:CtTypeReferenceImpl@TokenTypes" shape=ellipse]
12 [label="3:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
13 [label="3:CtFieldReadImpl@TokenTypes.METHOD_DEF" shape=ellipse]
14 [label="3:CtTypeAccessImpl@TokenTypes" shape=ellipse]
15 [label="3:CtBinaryOperatorImpl@(ast.getType() != TokenTypes.METHOD_DEF)" shape=ellipse]
16 [label="3:CtExecutableReferenceImpl@inInterfaceOrAnnotationBlock(DetailAST)" shape=ellipse]
17 [label="3:CtTypeReferenceImpl@ScopeUtils" shape=ellipse]
18 [label="3:CtTypeReferenceImpl@DetailAST" shape=ellipse]
19 [label="3:CtVirtualElement@inInterfaceOrAnnotationBlock" shape=ellipse]
20 [label="3:CtTypeAccessImpl@ScopeUtils" shape=ellipse]
21 [label="3:CtTypeReferenceImpl@ScopeUtils" shape=ellipse]
22 [label="3:CtVariableReadImpl@ast" shape=ellipse]
23 [label="3:CtParameterReferenceImpl@ast" shape=ellipse]
24 [label="3:CtInvocationImpl@ScopeUtils.inInterfaceOrAnnotationBlock(ast)" shape=ellipse]
25 [label="3:CtBinaryOperatorImpl@(ast.getType() != TokenTypes.METHOD_DEF) || ScopeUtils.inInterfaceOrAnnotationBlock(ast)" shape=ellipse]
26 [label="4:CtLiteralImpl@false" shape=ellipse]
27 [label="4:CtTypeReferenceImpl@boolean" shape=ellipse]
28 [label="4:CtReturnImpl@return false" shape=ellipse]
29 [label="3:CtBlockImpl@\{
    return false;
\}" shape=ellipse]
30 [label="3:CtIfImpl@if ((ast.getType() != TokenTypes.METHOD_DEF) || ScopeUtils.inInterfaceOrAnnotationBlock(ast)) \{
    return false;
\}" shape=ellipse]
31 [label="6:CtTypeReferenceImpl@DetailAST" shape=ellipse]
32 [label="6:CtPackageReferenceImpl@" shape=ellipse]
33 [label="6:CtExecutableReferenceImpl@findFirstToken()" shape=ellipse]
34 [label="6:CtTypeReferenceImpl@DetailAST" shape=ellipse]
35 [label="6:CtTypeReferenceImpl@DetailAST" shape=ellipse]
36 [label="6:CtVirtualElement@findFirstToken" shape=ellipse]
37 [label="6:CtVariableReadImpl@ast" shape=ellipse]
38 [label="6:CtParameterReferenceImpl@ast" shape=ellipse]
39 [label="6:CtTypeAccessImpl@IDENT" shape=ellipse]
40 [label="6:CtTypeReferenceImpl@IDENT" shape=ellipse]
41 [label="6:CtInvocationImpl@ast.findFirstToken(IDENT)" shape=ellipse]
42 [label="6:CtVirtualElement@nameAST" shape=ellipse]
43 [label="6:CtLocalVariableImpl@final DetailAST nameAST = ast.findFirstToken(IDENT)" shape=ellipse]
44 [label="7:CtTypeReferenceImpl@String" shape=ellipse]
45 [label="7:CtPackageReferenceImpl@java.lang" shape=ellipse]
46 [label="7:CtExecutableReferenceImpl@getText()" shape=ellipse]
47 [label="7:CtTypeReferenceImpl@DetailAST" shape=ellipse]
48 [label="7:CtTypeReferenceImpl@String" shape=ellipse]
49 [label="7:CtVirtualElement@getText" shape=ellipse]
50 [label="7:CtVariableReadImpl@nameAST" shape=ellipse]
51 [label="7:CtLocalVariableReferenceImpl@nameAST" shape=ellipse]
52 [label="7:CtInvocationImpl@nameAST.getText()" shape=ellipse]
53 [label="7:CtVirtualElement@name" shape=ellipse]
54 [label="7:CtLocalVariableImpl@final String name = nameAST.getText()" shape=ellipse]
55 [label="8:CtTypeReferenceImpl@DetailAST" shape=ellipse]
56 [label="8:CtPackageReferenceImpl@" shape=ellipse]
57 [label="8:CtExecutableReferenceImpl@findFirstToken()" shape=ellipse]
58 [label="8:CtTypeReferenceImpl@DetailAST" shape=ellipse]
59 [label="8:CtTypeReferenceImpl@DetailAST" shape=ellipse]
60 [label="8:CtVirtualElement@findFirstToken" shape=ellipse]
61 [label="8:CtVariableReadImpl@ast" shape=ellipse]
62 [label="8:CtParameterReferenceImpl@ast" shape=ellipse]
63 [label="8:CtTypeAccessImpl@MODIFIERS" shape=ellipse]
64 [label="8:CtTypeReferenceImpl@MODIFIERS" shape=ellipse]
65 [label="8:CtInvocationImpl@ast.findFirstToken(MODIFIERS)" shape=ellipse]
66 [label="8:CtVirtualElement@modifiersAST" shape=ellipse]
67 [label="8:CtLocalVariableImpl@final DetailAST modifiersAST = ast.findFirstToken(MODIFIERS)" shape=ellipse]
68 [label="9:CtExecutableReferenceImpl@equals(java.lang.String)" shape=ellipse]
69 [label="9:CtTypeReferenceImpl@String" shape=ellipse]
70 [label="9:CtVirtualElement@equals" shape=ellipse]
71 [label="9:CtExecutableReferenceImpl@getMethodName()" shape=ellipse]
72 [label="9:CtVirtualElement@getMethodName" shape=ellipse]
73 [label="9:CtTypeAccessImpl@PlaceHold" shape=ellipse]
74 [label="9:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
75 [label="9:CtThisAccessImpl@" shape=ellipse]
76 [label="9:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
77 [label="9:CtInvocationImpl@getMethodName()" shape=ellipse]
78 [label="9:CtVariableReadImpl@name" shape=ellipse]
79 [label="9:CtLocalVariableReferenceImpl@name" shape=ellipse]
80 [label="9:CtInvocationImpl@getMethodName().equals(name)" shape=ellipse]
81 [label="9:CtUnaryOperatorImpl@(!getMethodName().equals(name))" shape=ellipse]
82 [label="9:CtExecutableReferenceImpl@branchContains()" shape=ellipse]
83 [label="9:CtTypeReferenceImpl@DetailAST" shape=ellipse]
84 [label="9:CtVirtualElement@branchContains" shape=ellipse]
85 [label="9:CtVariableReadImpl@modifiersAST" shape=ellipse]
86 [label="9:CtLocalVariableReferenceImpl@modifiersAST" shape=ellipse]
87 [label="9:CtTypeAccessImpl@LITERAL_NATIVE" shape=ellipse]
88 [label="9:CtTypeReferenceImpl@LITERAL_NATIVE" shape=ellipse]
89 [label="9:CtInvocationImpl@modifiersAST.branchContains(LITERAL_NATIVE)" shape=ellipse]
90 [label="9:CtBinaryOperatorImpl@(!getMethodName().equals(name)) || modifiersAST.branchContains(LITERAL_NATIVE)" shape=ellipse]
91 [label="10:CtLiteralImpl@false" shape=ellipse]
92 [label="10:CtTypeReferenceImpl@boolean" shape=ellipse]
93 [label="10:CtReturnImpl@return false" shape=ellipse]
94 [label="9:CtBlockImpl@\{
    return false;
\}" shape=ellipse]
95 [label="9:CtIfImpl@if ((!getMethodName().equals(name)) || modifiersAST.branchContains(LITERAL_NATIVE)) \{
    return false;
\}" shape=ellipse]
96 [label="12:CtTypeReferenceImpl@DetailAST" shape=ellipse]
97 [label="12:CtPackageReferenceImpl@" shape=ellipse]
98 [label="12:CtExecutableReferenceImpl@findFirstToken()" shape=ellipse]
99 [label="12:CtTypeReferenceImpl@DetailAST" shape=ellipse]
100 [label="12:CtTypeReferenceImpl@DetailAST" shape=ellipse]
101 [label="12:CtVirtualElement@findFirstToken" shape=ellipse]
102 [label="12:CtVariableReadImpl@ast" shape=ellipse]
103 [label="12:CtParameterReferenceImpl@ast" shape=ellipse]
104 [label="12:CtTypeAccessImpl@PARAMETERS" shape=ellipse]
105 [label="12:CtTypeReferenceImpl@PARAMETERS" shape=ellipse]
106 [label="12:CtInvocationImpl@ast.findFirstToken(PARAMETERS)" shape=ellipse]
107 [label="12:CtVirtualElement@params" shape=ellipse]
108 [label="12:CtLocalVariableImpl@final DetailAST params = ast.findFirstToken(PARAMETERS)" shape=ellipse]
109 [label="13:CtExecutableReferenceImpl@getChildCount()" shape=ellipse]
110 [label="13:CtTypeReferenceImpl@DetailAST" shape=ellipse]
111 [label="13:CtVirtualElement@getChildCount" shape=ellipse]
112 [label="13:CtVariableReadImpl@params" shape=ellipse]
113 [label="13:CtLocalVariableReferenceImpl@params" shape=ellipse]
114 [label="13:CtInvocationImpl@params.getChildCount()" shape=ellipse]
115 [label="13:CtLiteralImpl@0" shape=ellipse]
116 [label="13:CtTypeReferenceImpl@int" shape=ellipse]
117 [label="13:CtBinaryOperatorImpl@params.getChildCount() == 0" shape=ellipse]
118 [label="13:CtReturnImpl@return params.getChildCount() == 0" shape=ellipse]
119 [label="2:CtBlockImpl@\{
    if ((ast.getType() != TokenTypes.METHOD_DEF) || ScopeUtils.inInterfaceOrAnnotationBlock(ast)) \{
        return false;
    \}
    final DetailAST nameAST = ast.findFirstToken(IDENT);
    final String name = nameAST.getText();
    final DetailAST modifiersAST = ast.findFirstToken(MODIFIERS);
    if ((!getMethodName().equals(name)) || modifiersAST.branchContains(LITERAL_NATIVE)) \{
        return false;
    \}
    final DetailAST params = ast.findFirstToken(PARAMETERS);
    return params.getChildCount() == 0;
\}" shape=ellipse]
120 [label="2:CtMethodImpl@private boolean isOverridingMethod(DetailAST ast) \{
    if ((ast.getType() != TokenTypes.METHOD_DEF) || ScopeUtils.inInterfaceOrAnnotationBlock(ast)) \{
        return false;
    \}
    final DetailAST nameAST = ast.findFirstToken(IDENT);
    final String name = nameAST.getText();
    final DetailAST modifiersAST = ast.findFirstToken(MODIFIERS);
    if ((!getMethodName().equals(name)) || modifiersAST.branchContains(LITERAL_NATIVE)) \{
        return false;
    \}
    final DetailAST params = ast.findFirstToken(PARAMETERS);
    return params.getChildCount() == 0;
\}" shape=ellipse]
121 [label="3:Update@UPDATE" shape=ellipse]
122 [label="4:CtPackageReferenceImpl@" shape=ellipse]
123 [label="4:CtTypeReferenceImpl@ScopeUtils" shape=ellipse]
124 [label="4:CtTypeAccessImpl@ScopeUtils" shape=ellipse]
125 [label="4:CtPackageReferenceImpl@" shape=ellipse]
126 [label="4:CtTypeReferenceImpl@ScopeUtils" shape=ellipse]
127 [label="4:CtPackageReferenceImpl@" shape=ellipse]
128 [label="4:CtTypeReferenceImpl@DetailAST" shape=ellipse]
129 [label="4:CtExecutableReferenceImpl@isInInterfaceOrAnnotationBlock(DetailAST)" shape=ellipse]
130 [label="4:CtPackageReferenceImpl@" shape=ellipse]
131 [label="4:CtTypeReferenceImpl@DetailAST" shape=ellipse]
132 [label="4:CtParameterReferenceImpl@ast" shape=ellipse]
133 [label="4:CtVariableReadImpl@ast" shape=ellipse]
134 [label="4:CtInvocationImpl@ScopeUtils.isInInterfaceOrAnnotationBlock(ast)" shape=ellipse]
135 [label="4:CtVirtualElement@isInInterfaceOrAnnotationBlock" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
7 -> 8 [label="AST"];
9 -> 6 [label="AST"];
9 -> 7 [label="AST"];
9 -> 4 [label="AST"];
10 -> 11 [label="AST"];
10 -> 12 [label="AST"];
13 -> 14 [label="AST"];
13 -> 10 [label="AST"];
15 -> 9 [label="AST"];
15 -> 13 [label="AST"];
16 -> 17 [label="AST"];
16 -> 18 [label="AST"];
20 -> 21 [label="AST"];
22 -> 23 [label="AST"];
24 -> 19 [label="AST"];
24 -> 20 [label="AST"];
24 -> 16 [label="AST"];
24 -> 22 [label="AST"];
24 -> 121 [label="Action"];
25 -> 15 [label="AST"];
25 -> 24 [label="AST"];
25 -> 29 [label="Control Dep"];
25 -> 28 [label="Control Dep"];
25 -> 26 [label="Control Dep"];
26 -> 27 [label="AST"];
28 -> 26 [label="AST"];
29 -> 28 [label="AST"];
30 -> 25 [label="AST"];
30 -> 29 [label="AST"];
31 -> 32 [label="AST"];
33 -> 34 [label="AST"];
33 -> 35 [label="AST"];
37 -> 38 [label="AST"];
37 -> 42 [label="Data Dep"];
39 -> 40 [label="AST"];
41 -> 36 [label="AST"];
41 -> 37 [label="AST"];
41 -> 33 [label="AST"];
41 -> 39 [label="AST"];
42 -> 50 [label="Define-Use"];
43 -> 42 [label="AST"];
43 -> 31 [label="AST"];
43 -> 41 [label="AST"];
44 -> 45 [label="AST"];
46 -> 47 [label="AST"];
46 -> 48 [label="AST"];
50 -> 51 [label="AST"];
50 -> 53 [label="Data Dep"];
52 -> 49 [label="AST"];
52 -> 50 [label="AST"];
52 -> 46 [label="AST"];
53 -> 78 [label="Define-Use"];
54 -> 53 [label="AST"];
54 -> 44 [label="AST"];
54 -> 52 [label="AST"];
55 -> 56 [label="AST"];
57 -> 58 [label="AST"];
57 -> 59 [label="AST"];
61 -> 62 [label="AST"];
61 -> 66 [label="Data Dep"];
63 -> 64 [label="AST"];
65 -> 60 [label="AST"];
65 -> 61 [label="AST"];
65 -> 57 [label="AST"];
65 -> 63 [label="AST"];
66 -> 85 [label="Define-Use"];
67 -> 66 [label="AST"];
67 -> 55 [label="AST"];
67 -> 65 [label="AST"];
68 -> 69 [label="AST"];
73 -> 74 [label="AST"];
75 -> 76 [label="AST"];
75 -> 73 [label="AST"];
77 -> 72 [label="AST"];
77 -> 75 [label="AST"];
77 -> 71 [label="AST"];
78 -> 79 [label="AST"];
80 -> 70 [label="AST"];
80 -> 77 [label="AST"];
80 -> 68 [label="AST"];
80 -> 78 [label="AST"];
81 -> 80 [label="AST"];
82 -> 83 [label="AST"];
85 -> 86 [label="AST"];
87 -> 88 [label="AST"];
89 -> 84 [label="AST"];
89 -> 85 [label="AST"];
89 -> 82 [label="AST"];
89 -> 87 [label="AST"];
90 -> 81 [label="AST"];
90 -> 89 [label="AST"];
90 -> 94 [label="Control Dep"];
90 -> 93 [label="Control Dep"];
90 -> 91 [label="Control Dep"];
91 -> 92 [label="AST"];
93 -> 91 [label="AST"];
94 -> 93 [label="AST"];
95 -> 90 [label="AST"];
95 -> 94 [label="AST"];
96 -> 97 [label="AST"];
98 -> 99 [label="AST"];
98 -> 100 [label="AST"];
102 -> 103 [label="AST"];
102 -> 107 [label="Data Dep"];
104 -> 105 [label="AST"];
106 -> 101 [label="AST"];
106 -> 102 [label="AST"];
106 -> 98 [label="AST"];
106 -> 104 [label="AST"];
107 -> 112 [label="Define-Use"];
108 -> 107 [label="AST"];
108 -> 96 [label="AST"];
108 -> 106 [label="AST"];
109 -> 110 [label="AST"];
112 -> 113 [label="AST"];
114 -> 111 [label="AST"];
114 -> 112 [label="AST"];
114 -> 109 [label="AST"];
115 -> 116 [label="AST"];
117 -> 114 [label="AST"];
117 -> 115 [label="AST"];
118 -> 117 [label="AST"];
119 -> 30 [label="AST"];
119 -> 43 [label="AST"];
119 -> 54 [label="AST"];
119 -> 67 [label="AST"];
119 -> 95 [label="AST"];
119 -> 108 [label="AST"];
119 -> 118 [label="AST"];
120 -> 1 [label="AST"];
120 -> 0 [label="AST"];
120 -> 2 [label="AST"];
120 -> 119 [label="AST"];
121 -> 134 [label="Action"];
123 -> 122 [label="AST"];
124 -> 123 [label="AST"];
126 -> 125 [label="AST"];
128 -> 127 [label="AST"];
129 -> 126 [label="AST"];
129 -> 128 [label="AST"];
131 -> 130 [label="AST"];
132 -> 131 [label="AST"];
133 -> 132 [label="AST"];
134 -> 135 [label="AST"];
134 -> 124 [label="AST"];
134 -> 129 [label="AST"];
134 -> 133 [label="AST"];
}