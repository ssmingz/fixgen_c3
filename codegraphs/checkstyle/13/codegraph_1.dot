digraph "finishTree#?,DetailAST" {
0 [label="3:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="3:CtVirtualElement@finishTree" shape=ellipse]
2 [label="3:CtParameterImpl@DetailAST rootAST" shape=ellipse]
3 [label="3:CtTypeReferenceImpl@DetailAST" shape=ellipse]
4 [label="4:CtTypeReferenceImpl@Set<DetailAST>" shape=ellipse]
5 [label="4:CtPackageReferenceImpl@" shape=ellipse]
6 [label="4:CtTypeReferenceImpl@DetailAST" shape=ellipse]
7 [label="4:CtExecutableReferenceImpl@keySet()" shape=ellipse]
8 [label="4:CtTypeReferenceImpl@objBlockEquals" shape=ellipse]
9 [label="4:CtTypeReferenceImpl@Set<DetailAST>" shape=ellipse]
10 [label="4:CtVirtualElement@keySet" shape=ellipse]
11 [label="4:CtFieldReferenceImpl@objBlockEquals" shape=ellipse]
12 [label="4:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
13 [label="4:CtFieldReadImpl@objBlockEquals" shape=ellipse]
14 [label="4:CtInvocationImpl@objBlockEquals.keySet()" shape=ellipse]
15 [label="4:CtVirtualElement@equalsDefs" shape=ellipse]
16 [label="4:CtLocalVariableImpl@final Set<DetailAST> equalsDefs = objBlockEquals.keySet()" shape=ellipse]
17 [label="5:CtTypeReferenceImpl@DetailAST" shape=ellipse]
18 [label="5:CtPackageReferenceImpl@" shape=ellipse]
19 [label="5:CtVirtualElement@objBlock" shape=ellipse]
20 [label="5:CtLocalVariableImpl@DetailAST objBlock" shape=ellipse]
21 [label="5:CtVariableReadImpl@equalsDefs" shape=ellipse]
22 [label="5:CtLocalVariableReferenceImpl@equalsDefs" shape=ellipse]
23 [label="6:CtExecutableReferenceImpl@contains(DetailAST)" shape=ellipse]
24 [label="6:CtTypeReferenceImpl@objBlockWithHashCode" shape=ellipse]
25 [label="6:CtTypeReferenceImpl@DetailAST" shape=ellipse]
26 [label="6:CtVirtualElement@contains" shape=ellipse]
27 [label="6:CtFieldReferenceImpl@objBlockWithHashCode" shape=ellipse]
28 [label="6:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
29 [label="6:CtFieldReadImpl@objBlockWithHashCode" shape=ellipse]
30 [label="6:CtVariableReadImpl@objBlock" shape=ellipse]
31 [label="6:CtLocalVariableReferenceImpl@objBlock" shape=ellipse]
32 [label="6:CtInvocationImpl@objBlockWithHashCode.contains(objBlock)" shape=ellipse]
33 [label="6:CtUnaryOperatorImpl@!objBlockWithHashCode.contains(objBlock)" shape=ellipse]
34 [label="7:CtTypeReferenceImpl@DetailAST" shape=ellipse]
35 [label="7:CtPackageReferenceImpl@" shape=ellipse]
36 [label="7:CtExecutableReferenceImpl@get(DetailAST)" shape=ellipse]
37 [label="7:CtTypeReferenceImpl@objBlockEquals" shape=ellipse]
38 [label="7:CtTypeReferenceImpl@DetailAST" shape=ellipse]
39 [label="7:CtTypeReferenceImpl@DetailAST" shape=ellipse]
40 [label="7:CtVirtualElement@get" shape=ellipse]
41 [label="7:CtFieldReferenceImpl@objBlockEquals" shape=ellipse]
42 [label="7:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
43 [label="7:CtFieldReadImpl@objBlockEquals" shape=ellipse]
44 [label="7:CtVariableReadImpl@objBlock" shape=ellipse]
45 [label="7:CtLocalVariableReferenceImpl@objBlock" shape=ellipse]
46 [label="7:CtInvocationImpl@objBlockEquals.get(objBlock)" shape=ellipse]
47 [label="7:CtVirtualElement@equalsAST" shape=ellipse]
48 [label="7:CtLocalVariableImpl@final DetailAST equalsAST = objBlockEquals.get(objBlock)" shape=ellipse]
49 [label="8:CtExecutableReferenceImpl@log(<unknown>,<unknown>,java.lang.String)" shape=ellipse]
50 [label="8:CtTypeReferenceImpl@null" shape=ellipse]
51 [label="8:CtTypeReferenceImpl@null" shape=ellipse]
52 [label="8:CtTypeReferenceImpl@String" shape=ellipse]
53 [label="8:CtVirtualElement@log" shape=ellipse]
54 [label="8:CtTypeAccessImpl@PlaceHold" shape=ellipse]
55 [label="8:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
56 [label="8:CtThisAccessImpl@" shape=ellipse]
57 [label="8:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
58 [label="8:CtExecutableReferenceImpl@getLineNo()" shape=ellipse]
59 [label="8:CtTypeReferenceImpl@DetailAST" shape=ellipse]
60 [label="8:CtVirtualElement@getLineNo" shape=ellipse]
61 [label="8:CtVariableReadImpl@equalsAST" shape=ellipse]
62 [label="8:CtLocalVariableReferenceImpl@equalsAST" shape=ellipse]
63 [label="8:CtInvocationImpl@equalsAST.getLineNo()" shape=ellipse]
64 [label="8:CtExecutableReferenceImpl@getColumnNo()" shape=ellipse]
65 [label="8:CtTypeReferenceImpl@DetailAST" shape=ellipse]
66 [label="8:CtVirtualElement@getColumnNo" shape=ellipse]
67 [label="8:CtVariableReadImpl@equalsAST" shape=ellipse]
68 [label="8:CtLocalVariableReferenceImpl@equalsAST" shape=ellipse]
69 [label="8:CtInvocationImpl@equalsAST.getColumnNo()" shape=ellipse]
70 [label="8:CtLiteralImpl@\"equals.noHashCode\"" shape=ellipse]
71 [label="8:CtTypeReferenceImpl@String" shape=ellipse]
72 [label="8:CtInvocationImpl@log(equalsAST.getLineNo(), equalsAST.getColumnNo(), \"equals.noHashCode\")" shape=ellipse]
73 [label="6:CtBlockImpl@\{
    final DetailAST equalsAST = objBlockEquals.get(objBlock);
    log(equalsAST.getLineNo(), equalsAST.getColumnNo(), \"equals.noHashCode\");
\}" shape=ellipse]
74 [label="6:CtIfImpl@if (!objBlockWithHashCode.contains(objBlock)) \{
    final DetailAST equalsAST = objBlockEquals.get(objBlock);
    log(equalsAST.getLineNo(), equalsAST.getColumnNo(), \"equals.noHashCode\");
\}" shape=ellipse]
75 [label="5:CtBlockImpl@\{
    if (!objBlockWithHashCode.contains(objBlock)) \{
        final DetailAST equalsAST = objBlockEquals.get(objBlock);
        log(equalsAST.getLineNo(), equalsAST.getColumnNo(), \"equals.noHashCode\");
    \}
\}" shape=ellipse]
76 [label="5:CtForEachImpl@for (DetailAST objBlock : equalsDefs) \{
    if (!objBlockWithHashCode.contains(objBlock)) \{
        final DetailAST equalsAST = objBlockEquals.get(objBlock);
        log(equalsAST.getLineNo(), equalsAST.getColumnNo(), \"equals.noHashCode\");
    \}
\}" shape=ellipse]
77 [label="11:CtExecutableReferenceImpl@clear()" shape=ellipse]
78 [label="11:CtTypeReferenceImpl@objBlockEquals" shape=ellipse]
79 [label="11:CtVirtualElement@clear" shape=ellipse]
80 [label="11:CtFieldReferenceImpl@objBlockEquals" shape=ellipse]
81 [label="11:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
82 [label="11:CtFieldReadImpl@objBlockEquals" shape=ellipse]
83 [label="11:CtInvocationImpl@objBlockEquals.clear()" shape=ellipse]
84 [label="12:CtExecutableReferenceImpl@clear()" shape=ellipse]
85 [label="12:CtTypeReferenceImpl@objBlockWithHashCode" shape=ellipse]
86 [label="12:CtVirtualElement@clear" shape=ellipse]
87 [label="12:CtFieldReferenceImpl@objBlockWithHashCode" shape=ellipse]
88 [label="12:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
89 [label="12:CtFieldReadImpl@objBlockWithHashCode" shape=ellipse]
90 [label="12:CtInvocationImpl@objBlockWithHashCode.clear()" shape=ellipse]
91 [label="3:CtBlockImpl@\{
    final Set<DetailAST> equalsDefs = objBlockEquals.keySet();
    for (DetailAST objBlock : equalsDefs) \{
        if (!objBlockWithHashCode.contains(objBlock)) \{
            final DetailAST equalsAST = objBlockEquals.get(objBlock);
            log(equalsAST.getLineNo(), equalsAST.getColumnNo(), \"equals.noHashCode\");
        \}
    \}
    objBlockEquals.clear();
    objBlockWithHashCode.clear();
\}" shape=ellipse]
92 [label="3:CtMethodImpl@@Override
public void finishTree(DetailAST rootAST) \{
    final Set<DetailAST> equalsDefs = objBlockEquals.keySet();
    for (DetailAST objBlock : equalsDefs) \{
        if (!objBlockWithHashCode.contains(objBlock)) \{
            final DetailAST equalsAST = objBlockEquals.get(objBlock);
            log(equalsAST.getLineNo(), equalsAST.getColumnNo(), \"equals.noHashCode\");
        \}
    \}
    objBlockEquals.clear();
    objBlockWithHashCode.clear();
\}" shape=ellipse]
93 [label="2:CtAnnotationImpl@@Override" shape=ellipse]
94 [label="8:Delete@DELETE" shape=ellipse]
95 [label="8:Insert@INSERT" shape=ellipse]
96 [label="8:CtPackageReferenceImpl@" shape=ellipse]
97 [label="8:CtTypeReferenceImpl@MSG_KEY" shape=ellipse]
98 [label="8:CtTypeAccessImpl@MSG_KEY" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
4 -> 6 [label="AST"];
7 -> 8 [label="AST"];
7 -> 9 [label="AST"];
11 -> 12 [label="AST"];
13 -> 11 [label="AST"];
13 -> 15 [label="Data Dep"];
14 -> 10 [label="AST"];
14 -> 13 [label="AST"];
14 -> 7 [label="AST"];
15 -> 21 [label="Define-Use"];
16 -> 15 [label="AST"];
16 -> 4 [label="AST"];
16 -> 14 [label="AST"];
17 -> 18 [label="AST"];
19 -> 30 [label="Define-Use"];
19 -> 44 [label="Define-Use"];
20 -> 19 [label="AST"];
20 -> 17 [label="AST"];
21 -> 22 [label="AST"];
21 -> 75 [label="Control Dep"];
21 -> 74 [label="Control Dep"];
21 -> 33 [label="Control Dep"];
21 -> 32 [label="Control Dep"];
21 -> 23 [label="Control Dep"];
21 -> 29 [label="Control Dep"];
21 -> 30 [label="Control Dep"];
23 -> 24 [label="AST"];
23 -> 25 [label="AST"];
27 -> 28 [label="AST"];
29 -> 27 [label="AST"];
30 -> 31 [label="AST"];
32 -> 26 [label="AST"];
32 -> 29 [label="AST"];
32 -> 23 [label="AST"];
32 -> 30 [label="AST"];
33 -> 32 [label="AST"];
33 -> 73 [label="Control Dep"];
33 -> 48 [label="Control Dep"];
33 -> 46 [label="Control Dep"];
33 -> 36 [label="Control Dep"];
33 -> 43 [label="Control Dep"];
33 -> 44 [label="Control Dep"];
33 -> 72 [label="Control Dep"];
33 -> 49 [label="Control Dep"];
33 -> 56 [label="Control Dep"];
33 -> 54 [label="Control Dep"];
33 -> 63 [label="Control Dep"];
33 -> 58 [label="Control Dep"];
33 -> 61 [label="Control Dep"];
33 -> 69 [label="Control Dep"];
33 -> 64 [label="Control Dep"];
33 -> 67 [label="Control Dep"];
33 -> 70 [label="Control Dep"];
33 -> 98 [label="Control Dep"];
34 -> 35 [label="AST"];
36 -> 37 [label="AST"];
36 -> 38 [label="AST"];
36 -> 39 [label="AST"];
41 -> 42 [label="AST"];
43 -> 41 [label="AST"];
43 -> 47 [label="Data Dep"];
44 -> 45 [label="AST"];
44 -> 47 [label="Data Dep"];
46 -> 40 [label="AST"];
46 -> 43 [label="AST"];
46 -> 36 [label="AST"];
46 -> 44 [label="AST"];
47 -> 61 [label="Define-Use"];
47 -> 67 [label="Define-Use"];
48 -> 47 [label="AST"];
48 -> 34 [label="AST"];
48 -> 46 [label="AST"];
49 -> 50 [label="AST"];
49 -> 51 [label="AST"];
49 -> 52 [label="AST"];
54 -> 55 [label="AST"];
56 -> 57 [label="AST"];
56 -> 54 [label="AST"];
58 -> 59 [label="AST"];
61 -> 62 [label="AST"];
63 -> 60 [label="AST"];
63 -> 61 [label="AST"];
63 -> 58 [label="AST"];
64 -> 65 [label="AST"];
67 -> 68 [label="AST"];
69 -> 66 [label="AST"];
69 -> 67 [label="AST"];
69 -> 64 [label="AST"];
70 -> 71 [label="AST"];
70 -> 94 [label="Action"];
72 -> 53 [label="AST"];
72 -> 56 [label="AST"];
72 -> 49 [label="AST"];
72 -> 63 [label="AST"];
72 -> 69 [label="AST"];
72 -> 70 [label="AST"];
72 -> 95 [label="Action"];
73 -> 48 [label="AST"];
73 -> 72 [label="AST"];
74 -> 33 [label="AST"];
74 -> 73 [label="AST"];
75 -> 74 [label="AST"];
76 -> 20 [label="AST"];
76 -> 21 [label="AST"];
76 -> 75 [label="AST"];
77 -> 78 [label="AST"];
80 -> 81 [label="AST"];
82 -> 80 [label="AST"];
83 -> 79 [label="AST"];
83 -> 82 [label="AST"];
83 -> 77 [label="AST"];
84 -> 85 [label="AST"];
87 -> 88 [label="AST"];
89 -> 87 [label="AST"];
90 -> 86 [label="AST"];
90 -> 89 [label="AST"];
90 -> 84 [label="AST"];
91 -> 16 [label="AST"];
91 -> 76 [label="AST"];
91 -> 83 [label="AST"];
91 -> 90 [label="AST"];
92 -> 1 [label="AST"];
92 -> 93 [label="AST"];
92 -> 0 [label="AST"];
92 -> 2 [label="AST"];
92 -> 91 [label="AST"];
95 -> 98 [label="Action"];
97 -> 96 [label="AST"];
98 -> 97 [label="AST"];
}