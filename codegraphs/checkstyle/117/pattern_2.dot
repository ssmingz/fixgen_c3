digraph "Pattern" {
0 [label="testProperFileExtension#?#10:MOVE
testImproperFileExtension#?#10:MOVE" shape=ellipse]
1 [label="testProperFileExtension#?#10:writer.write(content)
testImproperFileExtension#?#10:writer.write(content)" shape=ellipse]
2 [label="testProperFileExtension#?#3:\{
    final DefaultConfiguration checkConfig = createCheckConfig(ConstantNameCheck.class);
    final String content = \"public class Main \{ public static final int k = 5 + 4; \}\";
    final File file = temporaryFolder.newFile(\"file.java\");
    final Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), StandardCharsets.UTF_8));
    writer.write(content);
    writer.close();
    final String[] expected1 = new String[]\{ \"1:45: Name 'k' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'.\" \};
    verify(checkConfig, file.getPath(), expected1);
\}
testImproperFileExtension#?#3:\{
    final DefaultConfiguration checkConfig = createCheckConfig(ConstantNameCheck.class);
    final File file = temporaryFolder.newFile(\"file.pdf\");
    final String content = \"public class Main \{ public static final int k = 5 + 4; \}\";
    final BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), StandardCharsets.UTF_8));
    writer.write(content);
    writer.close();
    final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;
    verify(checkConfig, file.getPath(), expected);
\}" shape=ellipse]
3 [label="testProperFileExtension#?#3:@Test
public void testProperFileExtension() throws Exception \{
    final DefaultConfiguration checkConfig = createCheckConfig(ConstantNameCheck.class);
    final String content = \"public class Main \{ public static final int k = 5 + 4; \}\";
    final File file = temporaryFolder.newFile(\"file.java\");
    final Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), StandardCharsets.UTF_8));
    writer.write(content);
    writer.close();
    final String[] expected1 = new String[]\{ \"1:45: Name 'k' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'.\" \};
    verify(checkConfig, file.getPath(), expected1);
\}
testImproperFileExtension#?#3:@Test
public void testImproperFileExtension() throws Exception \{
    final DefaultConfiguration checkConfig = createCheckConfig(ConstantNameCheck.class);
    final File file = temporaryFolder.newFile(\"file.pdf\");
    final String content = \"public class Main \{ public static final int k = 5 + 4; \}\";
    final BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), StandardCharsets.UTF_8));
    writer.write(content);
    writer.close();
    final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;
    verify(checkConfig, file.getPath(), expected);
\}" shape=ellipse]
4 [label="testProperFileExtension#?#4:final DefaultConfiguration checkConfig = createCheckConfig(ConstantNameCheck.class)
testImproperFileExtension#?#4:final DefaultConfiguration checkConfig = createCheckConfig(ConstantNameCheck.class)" shape=ellipse]
5 [label="testProperFileExtension#?#5:final String content = \"public class Main \{ public static final int k = 5 + 4; \}\"
testImproperFileExtension#?#6:final String content = \"public class Main \{ public static final int k = 5 + 4; \}\"" shape=ellipse]
6 [label="testProperFileExtension#?#6:final File file = temporaryFolder.newFile(\"file.java\")
testImproperFileExtension#?#5:final File file = temporaryFolder.newFile(\"file.pdf\")" shape=ellipse]
7 [label="testProperFileExtension#?#7:final Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), StandardCharsets.UTF_8))
testImproperFileExtension#?#7:final BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), StandardCharsets.UTF_8))" shape=ellipse]
8 [label="testProperFileExtension#?#11:writer.close()
testImproperFileExtension#?#11:writer.close()" shape=ellipse]
9 [label="testProperFileExtension#?#12:final String[] expected1 = new String[]\{ \"1:45: Name 'k' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'.\" \}
testImproperFileExtension#?#12:final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY" shape=ellipse]
10 [label="testProperFileExtension#?#14:verify(checkConfig, file.getPath(), expected1)
testImproperFileExtension#?#13:verify(checkConfig, file.getPath(), expected)" shape=ellipse]
11 [label="testProperFileExtension#?#7:INSERT
testImproperFileExtension#?#7:INSERT" shape=ellipse]
12 [label="testProperFileExtension#?#7:try () \{

\}
testImproperFileExtension#?#7:try () \{

\}" shape=ellipse]
13 [label="testProperFileExtension#?#9:\{
    writer.write(content);
\}
testImproperFileExtension#?#9:\{
    writer.write(content);
\}" shape=ellipse]
14 [label="testProperFileExtension#?#10:write
testImproperFileExtension#?#10:write" shape=ellipse]
15 [label="testProperFileExtension#?#10:writer
testImproperFileExtension#?#10:writer" shape=ellipse]
16 [label="testProperFileExtension#?#7:writer
testImproperFileExtension#?#7:writer" shape=ellipse]
17 [label="testProperFileExtension#?#10:writer
testImproperFileExtension#?#10:writer" shape=ellipse]
18 [label="testProperFileExtension#?#10:write(java.lang.String)
testImproperFileExtension#?#10:write(java.lang.String)" shape=ellipse]
19 [label="testProperFileExtension#?#10:Writer
testImproperFileExtension#?#10:BufferedWriter" shape=ellipse]
20 [label="testProperFileExtension#?#10:String
testImproperFileExtension#?#10:String" shape=ellipse]
21 [label="testProperFileExtension#?#10:content
testImproperFileExtension#?#10:content" shape=ellipse]
22 [label="testProperFileExtension#?#5:content
testImproperFileExtension#?#6:content" shape=ellipse]
23 [label="testProperFileExtension#?#10:content
testImproperFileExtension#?#10:content" shape=ellipse]
0 -> 12 [label="Action:2"];
1 -> 0 [label="Action:2"];
1 -> 14 [label="AST:2"];
1 -> 15 [label="AST:2"];
1 -> 18 [label="AST:2"];
1 -> 21 [label="AST:2"];
2 -> 1 [label="AST:2"];
2 -> 4 [label="AST:2"];
2 -> 5 [label="AST:2"];
2 -> 6 [label="AST:2"];
2 -> 7 [label="AST:2"];
2 -> 8 [label="AST:2"];
2 -> 9 [label="AST:2"];
2 -> 10 [label="AST:2"];
2 -> 11 [label="Action:2"];
3 -> 2 [label="AST:2"];
5 -> 22 [label="AST:2"];
7 -> 16 [label="AST:2"];
11 -> 12 [label="Action:2"];
12 -> 13 [label="AST:2"];
15 -> 17 [label="AST:2"];
16 -> 15 [label="Define Use:2"];
18 -> 19 [label="AST:2"];
18 -> 20 [label="AST:2"];
21 -> 23 [label="AST:2"];
22 -> 21 [label="Define Use:2"];
}