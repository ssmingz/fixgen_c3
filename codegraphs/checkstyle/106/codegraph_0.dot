digraph "checkThrowsTags#?,List,List" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@checkThrowsTags" shape=ellipse]
2 [label="2:CtParameterImpl@List aTags" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@List" shape=ellipse]
4 [label="2:CtParameterImpl@List aThrows" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@List" shape=ellipse]
6 [label="3:CtTypeReferenceImpl@Set" shape=ellipse]
7 [label="3:CtPackageReferenceImpl@" shape=ellipse]
8 [label="3:CtExecutableReferenceImpl@HashSet()" shape=ellipse]
9 [label="3:CtTypeReferenceImpl@HashSet" shape=ellipse]
10 [label="3:CtTypeReferenceImpl@HashSet" shape=ellipse]
11 [label="3:CtConstructorCallImpl@new HashSet()" shape=ellipse]
12 [label="3:CtVirtualElement@foundThrows" shape=ellipse]
13 [label="3:CtLocalVariableImpl@final Set foundThrows = new HashSet()" shape=ellipse]
14 [label="4:CtTypeReferenceImpl@ListIterator" shape=ellipse]
15 [label="4:CtPackageReferenceImpl@" shape=ellipse]
16 [label="4:CtExecutableReferenceImpl@listIterator()" shape=ellipse]
17 [label="4:CtTypeReferenceImpl@List" shape=ellipse]
18 [label="4:CtTypeReferenceImpl@ListIterator" shape=ellipse]
19 [label="4:CtVirtualElement@listIterator" shape=ellipse]
20 [label="4:CtVariableReadImpl@aTags" shape=ellipse]
21 [label="4:CtParameterReferenceImpl@aTags" shape=ellipse]
22 [label="4:CtInvocationImpl@aTags.listIterator()" shape=ellipse]
23 [label="4:CtVirtualElement@tagIt" shape=ellipse]
24 [label="4:CtLocalVariableImpl@final ListIterator tagIt = aTags.listIterator()" shape=ellipse]
25 [label="5:CtExecutableReferenceImpl@hasNext()" shape=ellipse]
26 [label="5:CtTypeReferenceImpl@ListIterator" shape=ellipse]
27 [label="5:CtTypeReferenceImpl@boolean" shape=ellipse]
28 [label="5:CtVirtualElement@hasNext" shape=ellipse]
29 [label="5:CtVariableReadImpl@tagIt" shape=ellipse]
30 [label="5:CtLocalVariableReferenceImpl@tagIt" shape=ellipse]
31 [label="5:CtInvocationImpl@tagIt.hasNext()" shape=ellipse]
32 [label="6:CtTypeReferenceImpl@JavadocTag" shape=ellipse]
33 [label="6:CtPackageReferenceImpl@" shape=ellipse]
34 [label="6:CtExecutableReferenceImpl@next()" shape=ellipse]
35 [label="6:CtTypeReferenceImpl@ListIterator" shape=ellipse]
36 [label="6:CtVirtualElement@next" shape=ellipse]
37 [label="6:CtVariableReadImpl@tagIt" shape=ellipse]
38 [label="6:CtLocalVariableReferenceImpl@tagIt" shape=ellipse]
39 [label="6:CtInvocationImpl@((JavadocTag) (tagIt.next()))" shape=ellipse]
40 [label="6:CtTypeReferenceImpl@JavadocTag" shape=ellipse]
41 [label="6:CtVirtualElement@tag" shape=ellipse]
42 [label="6:CtLocalVariableImpl@final JavadocTag tag = ((JavadocTag) (tagIt.next()))" shape=ellipse]
43 [label="7:CtExecutableReferenceImpl@isThrowsTag()" shape=ellipse]
44 [label="7:CtTypeReferenceImpl@JavadocTag" shape=ellipse]
45 [label="7:CtVirtualElement@isThrowsTag" shape=ellipse]
46 [label="7:CtVariableReadImpl@tag" shape=ellipse]
47 [label="7:CtLocalVariableReferenceImpl@tag" shape=ellipse]
48 [label="7:CtInvocationImpl@tag.isThrowsTag()" shape=ellipse]
49 [label="7:CtUnaryOperatorImpl@!tag.isThrowsTag()" shape=ellipse]
50 [label="8:CtContinueImpl@continue" shape=ellipse]
51 [label="7:CtBlockImpl@\{
    continue;
\}" shape=ellipse]
52 [label="7:CtIfImpl@if (!tag.isThrowsTag()) \{
    continue;
\}" shape=ellipse]
53 [label="10:CtExecutableReferenceImpl@remove()" shape=ellipse]
54 [label="10:CtTypeReferenceImpl@ListIterator" shape=ellipse]
55 [label="10:CtVirtualElement@remove" shape=ellipse]
56 [label="10:CtVariableReadImpl@tagIt" shape=ellipse]
57 [label="10:CtLocalVariableReferenceImpl@tagIt" shape=ellipse]
58 [label="10:CtInvocationImpl@tagIt.remove()" shape=ellipse]
59 [label="11:CtTypeReferenceImpl@String" shape=ellipse]
60 [label="11:CtPackageReferenceImpl@java.lang" shape=ellipse]
61 [label="11:CtExecutableReferenceImpl@getArg1()" shape=ellipse]
62 [label="11:CtTypeReferenceImpl@JavadocTag" shape=ellipse]
63 [label="11:CtTypeReferenceImpl@String" shape=ellipse]
64 [label="11:CtVirtualElement@getArg1" shape=ellipse]
65 [label="11:CtVariableReadImpl@tag" shape=ellipse]
66 [label="11:CtLocalVariableReferenceImpl@tag" shape=ellipse]
67 [label="11:CtInvocationImpl@tag.getArg1()" shape=ellipse]
68 [label="11:CtVirtualElement@documentedEx" shape=ellipse]
69 [label="11:CtLocalVariableImpl@final String documentedEx = tag.getArg1()" shape=ellipse]
70 [label="12:CtTypeReferenceImpl@boolean" shape=ellipse]
71 [label="12:CtExecutableReferenceImpl@contains(java.lang.String)" shape=ellipse]
72 [label="12:CtTypeReferenceImpl@Set" shape=ellipse]
73 [label="12:CtTypeReferenceImpl@boolean" shape=ellipse]
74 [label="12:CtTypeReferenceImpl@String" shape=ellipse]
75 [label="12:CtVirtualElement@contains" shape=ellipse]
76 [label="12:CtVariableReadImpl@foundThrows" shape=ellipse]
77 [label="12:CtLocalVariableReferenceImpl@foundThrows" shape=ellipse]
78 [label="12:CtVariableReadImpl@documentedEx" shape=ellipse]
79 [label="12:CtLocalVariableReferenceImpl@documentedEx" shape=ellipse]
80 [label="12:CtInvocationImpl@foundThrows.contains(documentedEx)" shape=ellipse]
81 [label="12:CtVirtualElement@found" shape=ellipse]
82 [label="12:CtLocalVariableImpl@boolean found = foundThrows.contains(documentedEx)" shape=ellipse]
83 [label="13:CtTypeReferenceImpl@ListIterator" shape=ellipse]
84 [label="13:CtPackageReferenceImpl@" shape=ellipse]
85 [label="13:CtExecutableReferenceImpl@listIterator()" shape=ellipse]
86 [label="13:CtTypeReferenceImpl@List" shape=ellipse]
87 [label="13:CtTypeReferenceImpl@ListIterator" shape=ellipse]
88 [label="13:CtVirtualElement@listIterator" shape=ellipse]
89 [label="13:CtVariableReadImpl@aThrows" shape=ellipse]
90 [label="13:CtParameterReferenceImpl@aThrows" shape=ellipse]
91 [label="13:CtInvocationImpl@aThrows.listIterator()" shape=ellipse]
92 [label="13:CtVirtualElement@throwIt" shape=ellipse]
93 [label="13:CtLocalVariableImpl@final ListIterator throwIt = aThrows.listIterator()" shape=ellipse]
94 [label="14:CtVariableReadImpl@found" shape=ellipse]
95 [label="14:CtLocalVariableReferenceImpl@found" shape=ellipse]
96 [label="14:CtUnaryOperatorImpl@(!found)" shape=ellipse]
97 [label="14:CtTypeReferenceImpl@boolean" shape=ellipse]
98 [label="14:CtExecutableReferenceImpl@hasNext()" shape=ellipse]
99 [label="14:CtTypeReferenceImpl@ListIterator" shape=ellipse]
100 [label="14:CtVirtualElement@hasNext" shape=ellipse]
101 [label="14:CtVariableReadImpl@throwIt" shape=ellipse]
102 [label="14:CtLocalVariableReferenceImpl@throwIt" shape=ellipse]
103 [label="14:CtInvocationImpl@throwIt.hasNext()" shape=ellipse]
104 [label="14:CtBinaryOperatorImpl@(!found) && throwIt.hasNext()" shape=ellipse]
105 [label="15:CtTypeReferenceImpl@LineText" shape=ellipse]
106 [label="15:CtPackageReferenceImpl@" shape=ellipse]
107 [label="15:CtExecutableReferenceImpl@next()" shape=ellipse]
108 [label="15:CtTypeReferenceImpl@ListIterator" shape=ellipse]
109 [label="15:CtVirtualElement@next" shape=ellipse]
110 [label="15:CtVariableReadImpl@throwIt" shape=ellipse]
111 [label="15:CtLocalVariableReferenceImpl@throwIt" shape=ellipse]
112 [label="15:CtInvocationImpl@((LineText) (throwIt.next()))" shape=ellipse]
113 [label="15:CtTypeReferenceImpl@LineText" shape=ellipse]
114 [label="15:CtVirtualElement@t" shape=ellipse]
115 [label="15:CtLocalVariableImpl@final LineText t = ((LineText) (throwIt.next()))" shape=ellipse]
116 [label="16:CtExecutableReferenceImpl@equals(java.lang.String)" shape=ellipse]
117 [label="16:CtTypeReferenceImpl@boolean" shape=ellipse]
118 [label="16:CtTypeReferenceImpl@String" shape=ellipse]
119 [label="16:CtVirtualElement@equals" shape=ellipse]
120 [label="16:CtExecutableReferenceImpl@getText()" shape=ellipse]
121 [label="16:CtTypeReferenceImpl@LineText" shape=ellipse]
122 [label="16:CtVirtualElement@getText" shape=ellipse]
123 [label="16:CtVariableReadImpl@t" shape=ellipse]
124 [label="16:CtLocalVariableReferenceImpl@t" shape=ellipse]
125 [label="16:CtInvocationImpl@t.getText()" shape=ellipse]
126 [label="16:CtVariableReadImpl@documentedEx" shape=ellipse]
127 [label="16:CtLocalVariableReferenceImpl@documentedEx" shape=ellipse]
128 [label="16:CtInvocationImpl@t.getText().equals(documentedEx)" shape=ellipse]
129 [label="17:CtVariableWriteImpl@found" shape=ellipse]
130 [label="17:CtLocalVariableReferenceImpl@found" shape=ellipse]
131 [label="17:CtLiteralImpl@true" shape=ellipse]
132 [label="17:CtTypeReferenceImpl@boolean" shape=ellipse]
133 [label="17:CtTypeReferenceImpl@boolean" shape=ellipse]
134 [label="17:CtAssignmentImpl@found = true" shape=ellipse]
135 [label="18:CtExecutableReferenceImpl@remove()" shape=ellipse]
136 [label="18:CtTypeReferenceImpl@ListIterator" shape=ellipse]
137 [label="18:CtVirtualElement@remove" shape=ellipse]
138 [label="18:CtVariableReadImpl@throwIt" shape=ellipse]
139 [label="18:CtLocalVariableReferenceImpl@throwIt" shape=ellipse]
140 [label="18:CtInvocationImpl@throwIt.remove()" shape=ellipse]
141 [label="19:CtExecutableReferenceImpl@add(java.lang.String)" shape=ellipse]
142 [label="19:CtTypeReferenceImpl@Set" shape=ellipse]
143 [label="19:CtTypeReferenceImpl@String" shape=ellipse]
144 [label="19:CtVirtualElement@add" shape=ellipse]
145 [label="19:CtVariableReadImpl@foundThrows" shape=ellipse]
146 [label="19:CtLocalVariableReferenceImpl@foundThrows" shape=ellipse]
147 [label="19:CtVariableReadImpl@documentedEx" shape=ellipse]
148 [label="19:CtLocalVariableReferenceImpl@documentedEx" shape=ellipse]
149 [label="19:CtInvocationImpl@foundThrows.add(documentedEx)" shape=ellipse]
150 [label="16:CtBlockImpl@\{
    found = true;
    throwIt.remove();
    foundThrows.add(documentedEx);
\}" shape=ellipse]
151 [label="16:CtIfImpl@if (t.getText().equals(documentedEx)) \{
    found = true;
    throwIt.remove();
    foundThrows.add(documentedEx);
\}" shape=ellipse]
152 [label="14:CtBlockImpl@\{
    final LineText t = ((LineText) (throwIt.next()));
    if (t.getText().equals(documentedEx)) \{
        found = true;
        throwIt.remove();
        foundThrows.add(documentedEx);
    \}
\}" shape=ellipse]
153 [label="14:CtWhileImpl@while ((!found) && throwIt.hasNext()) \{
    final LineText t = ((LineText) (throwIt.next()));
    if (t.getText().equals(documentedEx)) \{
        found = true;
        throwIt.remove();
        foundThrows.add(documentedEx);
    \}
\} " shape=ellipse]
154 [label="22:CtVariableReadImpl@found" shape=ellipse]
155 [label="22:CtLocalVariableReferenceImpl@found" shape=ellipse]
156 [label="22:CtUnaryOperatorImpl@!found" shape=ellipse]
157 [label="22:CtTypeReferenceImpl@boolean" shape=ellipse]
158 [label="23:CtExecutableReferenceImpl@log(<unknown>,<unknown>)" shape=ellipse]
159 [label="23:CtTypeReferenceImpl@null" shape=ellipse]
160 [label="23:CtTypeReferenceImpl@null" shape=ellipse]
161 [label="23:CtVirtualElement@log" shape=ellipse]
162 [label="23:CtTypeAccessImpl@PlaceHold" shape=ellipse]
163 [label="23:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
164 [label="23:CtThisAccessImpl@" shape=ellipse]
165 [label="23:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
166 [label="23:CtExecutableReferenceImpl@getLineNo()" shape=ellipse]
167 [label="23:CtTypeReferenceImpl@JavadocTag" shape=ellipse]
168 [label="23:CtVirtualElement@getLineNo" shape=ellipse]
169 [label="23:CtVariableReadImpl@tag" shape=ellipse]
170 [label="23:CtLocalVariableReferenceImpl@tag" shape=ellipse]
171 [label="23:CtInvocationImpl@tag.getLineNo()" shape=ellipse]
172 [label="23:CtLiteralImpl@\"Unused @throws tag for '\"" shape=ellipse]
173 [label="23:CtTypeReferenceImpl@String" shape=ellipse]
174 [label="23:CtExecutableReferenceImpl@getArg1()" shape=ellipse]
175 [label="23:CtTypeReferenceImpl@JavadocTag" shape=ellipse]
176 [label="23:CtVirtualElement@getArg1" shape=ellipse]
177 [label="23:CtVariableReadImpl@tag" shape=ellipse]
178 [label="23:CtLocalVariableReferenceImpl@tag" shape=ellipse]
179 [label="23:CtInvocationImpl@tag.getArg1()" shape=ellipse]
180 [label="23:CtBinaryOperatorImpl@(\"Unused @throws tag for '\" + tag.getArg1())" shape=ellipse]
181 [label="23:CtLiteralImpl@\"'.\"" shape=ellipse]
182 [label="23:CtTypeReferenceImpl@String" shape=ellipse]
183 [label="23:CtBinaryOperatorImpl@(\"Unused @throws tag for '\" + tag.getArg1()) + \"'.\"" shape=ellipse]
184 [label="23:CtInvocationImpl@log(tag.getLineNo(), (\"Unused @throws tag for '\" + tag.getArg1()) + \"'.\")" shape=ellipse]
185 [label="22:CtBlockImpl@\{
    log(tag.getLineNo(), (\"Unused @throws tag for '\" + tag.getArg1()) + \"'.\");
\}" shape=ellipse]
186 [label="22:CtIfImpl@if (!found) \{
    log(tag.getLineNo(), (\"Unused @throws tag for '\" + tag.getArg1()) + \"'.\");
\}" shape=ellipse]
187 [label="5:CtBlockImpl@\{
    final JavadocTag tag = ((JavadocTag) (tagIt.next()));
    if (!tag.isThrowsTag()) \{
        continue;
    \}
    tagIt.remove();
    final String documentedEx = tag.getArg1();
    boolean found = foundThrows.contains(documentedEx);
    final ListIterator throwIt = aThrows.listIterator();
    while ((!found) && throwIt.hasNext()) \{
        final LineText t = ((LineText) (throwIt.next()));
        if (t.getText().equals(documentedEx)) \{
            found = true;
            throwIt.remove();
            foundThrows.add(documentedEx);
        \}
    \} 
    if (!found) \{
        log(tag.getLineNo(), (\"Unused @throws tag for '\" + tag.getArg1()) + \"'.\");
    \}
\}" shape=ellipse]
188 [label="5:CtWhileImpl@while (tagIt.hasNext()) \{
    final JavadocTag tag = ((JavadocTag) (tagIt.next()));
    if (!tag.isThrowsTag()) \{
        continue;
    \}
    tagIt.remove();
    final String documentedEx = tag.getArg1();
    boolean found = foundThrows.contains(documentedEx);
    final ListIterator throwIt = aThrows.listIterator();
    while ((!found) && throwIt.hasNext()) \{
        final LineText t = ((LineText) (throwIt.next()));
        if (t.getText().equals(documentedEx)) \{
            found = true;
            throwIt.remove();
            foundThrows.add(documentedEx);
        \}
    \} 
    if (!found) \{
        log(tag.getLineNo(), (\"Unused @throws tag for '\" + tag.getArg1()) + \"'.\");
    \}
\} " shape=ellipse]
189 [label="26:CtTypeReferenceImpl@ListIterator" shape=ellipse]
190 [label="26:CtPackageReferenceImpl@" shape=ellipse]
191 [label="26:CtExecutableReferenceImpl@listIterator()" shape=ellipse]
192 [label="26:CtTypeReferenceImpl@List" shape=ellipse]
193 [label="26:CtTypeReferenceImpl@ListIterator" shape=ellipse]
194 [label="26:CtVirtualElement@listIterator" shape=ellipse]
195 [label="26:CtVariableReadImpl@aThrows" shape=ellipse]
196 [label="26:CtParameterReferenceImpl@aThrows" shape=ellipse]
197 [label="26:CtInvocationImpl@aThrows.listIterator()" shape=ellipse]
198 [label="26:CtVirtualElement@throwIt" shape=ellipse]
199 [label="26:CtLocalVariableImpl@final ListIterator throwIt = aThrows.listIterator()" shape=ellipse]
200 [label="27:CtExecutableReferenceImpl@hasNext()" shape=ellipse]
201 [label="27:CtTypeReferenceImpl@ListIterator" shape=ellipse]
202 [label="27:CtTypeReferenceImpl@boolean" shape=ellipse]
203 [label="27:CtVirtualElement@hasNext" shape=ellipse]
204 [label="27:CtVariableReadImpl@throwIt" shape=ellipse]
205 [label="27:CtLocalVariableReferenceImpl@throwIt" shape=ellipse]
206 [label="27:CtInvocationImpl@throwIt.hasNext()" shape=ellipse]
207 [label="28:CtTypeReferenceImpl@LineText" shape=ellipse]
208 [label="28:CtPackageReferenceImpl@" shape=ellipse]
209 [label="28:CtExecutableReferenceImpl@next()" shape=ellipse]
210 [label="28:CtTypeReferenceImpl@ListIterator" shape=ellipse]
211 [label="28:CtVirtualElement@next" shape=ellipse]
212 [label="28:CtVariableReadImpl@throwIt" shape=ellipse]
213 [label="28:CtLocalVariableReferenceImpl@throwIt" shape=ellipse]
214 [label="28:CtInvocationImpl@((LineText) (throwIt.next()))" shape=ellipse]
215 [label="28:CtTypeReferenceImpl@LineText" shape=ellipse]
216 [label="28:CtVirtualElement@t" shape=ellipse]
217 [label="28:CtLocalVariableImpl@final LineText t = ((LineText) (throwIt.next()))" shape=ellipse]
218 [label="29:CtExecutableReferenceImpl@log(<unknown>,<unknown>)" shape=ellipse]
219 [label="29:CtTypeReferenceImpl@null" shape=ellipse]
220 [label="29:CtTypeReferenceImpl@null" shape=ellipse]
221 [label="29:CtVirtualElement@log" shape=ellipse]
222 [label="29:CtTypeAccessImpl@PlaceHold" shape=ellipse]
223 [label="29:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
224 [label="29:CtThisAccessImpl@" shape=ellipse]
225 [label="29:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
226 [label="29:CtExecutableReferenceImpl@getLineNo()" shape=ellipse]
227 [label="29:CtTypeReferenceImpl@LineText" shape=ellipse]
228 [label="29:CtVirtualElement@getLineNo" shape=ellipse]
229 [label="29:CtVariableReadImpl@t" shape=ellipse]
230 [label="29:CtLocalVariableReferenceImpl@t" shape=ellipse]
231 [label="29:CtInvocationImpl@t.getLineNo()" shape=ellipse]
232 [label="29:CtLiteralImpl@\"Expected @throws tag for '\"" shape=ellipse]
233 [label="29:CtTypeReferenceImpl@String" shape=ellipse]
234 [label="29:CtExecutableReferenceImpl@getText()" shape=ellipse]
235 [label="29:CtTypeReferenceImpl@LineText" shape=ellipse]
236 [label="29:CtVirtualElement@getText" shape=ellipse]
237 [label="29:CtVariableReadImpl@t" shape=ellipse]
238 [label="29:CtLocalVariableReferenceImpl@t" shape=ellipse]
239 [label="29:CtInvocationImpl@t.getText()" shape=ellipse]
240 [label="29:CtBinaryOperatorImpl@(\"Expected @throws tag for '\" + t.getText())" shape=ellipse]
241 [label="29:CtLiteralImpl@\"'.\"" shape=ellipse]
242 [label="29:CtTypeReferenceImpl@String" shape=ellipse]
243 [label="29:CtBinaryOperatorImpl@(\"Expected @throws tag for '\" + t.getText()) + \"'.\"" shape=ellipse]
244 [label="29:CtInvocationImpl@log(t.getLineNo(), (\"Expected @throws tag for '\" + t.getText()) + \"'.\")" shape=ellipse]
245 [label="27:CtBlockImpl@\{
    final LineText t = ((LineText) (throwIt.next()));
    log(t.getLineNo(), (\"Expected @throws tag for '\" + t.getText()) + \"'.\");
\}" shape=ellipse]
246 [label="27:CtWhileImpl@while (throwIt.hasNext()) \{
    final LineText t = ((LineText) (throwIt.next()));
    log(t.getLineNo(), (\"Expected @throws tag for '\" + t.getText()) + \"'.\");
\} " shape=ellipse]
247 [label="2:CtBlockImpl@\{
    final Set foundThrows = new HashSet();
    final ListIterator tagIt = aTags.listIterator();
    while (tagIt.hasNext()) \{
        final JavadocTag tag = ((JavadocTag) (tagIt.next()));
        if (!tag.isThrowsTag()) \{
            continue;
        \}
        tagIt.remove();
        final String documentedEx = tag.getArg1();
        boolean found = foundThrows.contains(documentedEx);
        final ListIterator throwIt = aThrows.listIterator();
        while ((!found) && throwIt.hasNext()) \{
            final LineText t = ((LineText) (throwIt.next()));
            if (t.getText().equals(documentedEx)) \{
                found = true;
                throwIt.remove();
                foundThrows.add(documentedEx);
            \}
        \} 
        if (!found) \{
            log(tag.getLineNo(), (\"Unused @throws tag for '\" + tag.getArg1()) + \"'.\");
        \}
    \} 
    final ListIterator throwIt = aThrows.listIterator();
    while (throwIt.hasNext()) \{
        final LineText t = ((LineText) (throwIt.next()));
        log(t.getLineNo(), (\"Expected @throws tag for '\" + t.getText()) + \"'.\");
    \} 
\}" shape=ellipse]
248 [label="2:CtMethodImpl@private void checkThrowsTags(List aTags, List aThrows) \{
    final Set foundThrows = new HashSet();
    final ListIterator tagIt = aTags.listIterator();
    while (tagIt.hasNext()) \{
        final JavadocTag tag = ((JavadocTag) (tagIt.next()));
        if (!tag.isThrowsTag()) \{
            continue;
        \}
        tagIt.remove();
        final String documentedEx = tag.getArg1();
        boolean found = foundThrows.contains(documentedEx);
        final ListIterator throwIt = aThrows.listIterator();
        while ((!found) && throwIt.hasNext()) \{
            final LineText t = ((LineText) (throwIt.next()));
            if (t.getText().equals(documentedEx)) \{
                found = true;
                throwIt.remove();
                foundThrows.add(documentedEx);
            \}
        \} 
        if (!found) \{
            log(tag.getLineNo(), (\"Unused @throws tag for '\" + tag.getArg1()) + \"'.\");
        \}
    \} 
    final ListIterator throwIt = aThrows.listIterator();
    while (throwIt.hasNext()) \{
        final LineText t = ((LineText) (throwIt.next()));
        log(t.getLineNo(), (\"Expected @throws tag for '\" + t.getText()) + \"'.\");
    \} 
\}" shape=ellipse]
249 [label="29:Insert@INSERT" shape=ellipse]
250 [label="29:CtPackageReferenceImpl@" shape=ellipse]
251 [label="29:CtTypeReferenceImpl@LineText" shape=ellipse]
252 [label="29:CtLocalVariableReferenceImpl@t" shape=ellipse]
253 [label="29:CtVariableReadImpl@t" shape=ellipse]
254 [label="29:CtPackageReferenceImpl@" shape=ellipse]
255 [label="29:CtTypeReferenceImpl@LineText" shape=ellipse]
256 [label="29:CtExecutableReferenceImpl@getColumnNo()" shape=ellipse]
257 [label="29:CtInvocationImpl@t.getColumnNo()" shape=ellipse]
258 [label="29:CtVirtualElement@getColumnNo" shape=ellipse]
259 [label="29:CtTypeReferenceImpl@int" shape=ellipse]
260 [label="29:CtLiteralImpl@1" shape=ellipse]
261 [label="29:CtBinaryOperatorImpl@t.getColumnNo() - 1" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
6 -> 7 [label="AST"];
8 -> 9 [label="AST"];
8 -> 10 [label="AST"];
11 -> 8 [label="AST"];
12 -> 76 [label="Define-Use"];
12 -> 145 [label="Define-Use"];
13 -> 12 [label="AST"];
13 -> 6 [label="AST"];
13 -> 11 [label="AST"];
14 -> 15 [label="AST"];
16 -> 17 [label="AST"];
16 -> 18 [label="AST"];
20 -> 21 [label="AST"];
20 -> 23 [label="Data Dep"];
22 -> 19 [label="AST"];
22 -> 20 [label="AST"];
22 -> 16 [label="AST"];
23 -> 29 [label="Define-Use"];
23 -> 37 [label="Define-Use"];
23 -> 56 [label="Define-Use"];
24 -> 23 [label="AST"];
24 -> 14 [label="AST"];
24 -> 22 [label="AST"];
25 -> 26 [label="AST"];
25 -> 27 [label="AST"];
29 -> 30 [label="AST"];
31 -> 28 [label="AST"];
31 -> 29 [label="AST"];
31 -> 25 [label="AST"];
31 -> 187 [label="Control Dep"];
31 -> 42 [label="Control Dep"];
31 -> 39 [label="Control Dep"];
31 -> 34 [label="Control Dep"];
31 -> 37 [label="Control Dep"];
31 -> 52 [label="Control Dep"];
31 -> 49 [label="Control Dep"];
31 -> 48 [label="Control Dep"];
31 -> 43 [label="Control Dep"];
31 -> 46 [label="Control Dep"];
31 -> 58 [label="Control Dep"];
31 -> 53 [label="Control Dep"];
31 -> 56 [label="Control Dep"];
31 -> 69 [label="Control Dep"];
31 -> 67 [label="Control Dep"];
31 -> 61 [label="Control Dep"];
31 -> 65 [label="Control Dep"];
31 -> 82 [label="Control Dep"];
31 -> 80 [label="Control Dep"];
31 -> 71 [label="Control Dep"];
31 -> 76 [label="Control Dep"];
31 -> 78 [label="Control Dep"];
31 -> 93 [label="Control Dep"];
31 -> 91 [label="Control Dep"];
31 -> 85 [label="Control Dep"];
31 -> 89 [label="Control Dep"];
31 -> 153 [label="Control Dep"];
31 -> 104 [label="Control Dep"];
31 -> 96 [label="Control Dep"];
31 -> 94 [label="Control Dep"];
31 -> 103 [label="Control Dep"];
31 -> 98 [label="Control Dep"];
31 -> 101 [label="Control Dep"];
31 -> 186 [label="Control Dep"];
31 -> 156 [label="Control Dep"];
31 -> 154 [label="Control Dep"];
32 -> 33 [label="AST"];
34 -> 35 [label="AST"];
37 -> 38 [label="AST"];
37 -> 41 [label="Data Dep"];
39 -> 36 [label="AST"];
39 -> 40 [label="AST"];
39 -> 37 [label="AST"];
39 -> 34 [label="AST"];
41 -> 46 [label="Define-Use"];
41 -> 65 [label="Define-Use"];
41 -> 169 [label="Define-Use"];
41 -> 177 [label="Define-Use"];
42 -> 41 [label="AST"];
42 -> 32 [label="AST"];
42 -> 39 [label="AST"];
43 -> 44 [label="AST"];
46 -> 47 [label="AST"];
48 -> 45 [label="AST"];
48 -> 46 [label="AST"];
48 -> 43 [label="AST"];
49 -> 48 [label="AST"];
49 -> 51 [label="Control Dep"];
51 -> 50 [label="AST"];
52 -> 49 [label="AST"];
52 -> 51 [label="AST"];
53 -> 54 [label="AST"];
56 -> 57 [label="AST"];
58 -> 55 [label="AST"];
58 -> 56 [label="AST"];
58 -> 53 [label="AST"];
59 -> 60 [label="AST"];
61 -> 62 [label="AST"];
61 -> 63 [label="AST"];
65 -> 66 [label="AST"];
65 -> 68 [label="Data Dep"];
67 -> 64 [label="AST"];
67 -> 65 [label="AST"];
67 -> 61 [label="AST"];
68 -> 78 [label="Define-Use"];
68 -> 126 [label="Define-Use"];
68 -> 147 [label="Define-Use"];
69 -> 68 [label="AST"];
69 -> 59 [label="AST"];
69 -> 67 [label="AST"];
71 -> 72 [label="AST"];
71 -> 73 [label="AST"];
71 -> 74 [label="AST"];
76 -> 77 [label="AST"];
76 -> 81 [label="Data Dep"];
78 -> 79 [label="AST"];
78 -> 81 [label="Data Dep"];
80 -> 75 [label="AST"];
80 -> 76 [label="AST"];
80 -> 71 [label="AST"];
80 -> 78 [label="AST"];
81 -> 94 [label="Define-Use"];
81 -> 154 [label="Define-Use"];
82 -> 81 [label="AST"];
82 -> 70 [label="AST"];
82 -> 80 [label="AST"];
83 -> 84 [label="AST"];
85 -> 86 [label="AST"];
85 -> 87 [label="AST"];
89 -> 90 [label="AST"];
89 -> 92 [label="Data Dep"];
91 -> 88 [label="AST"];
91 -> 89 [label="AST"];
91 -> 85 [label="AST"];
92 -> 101 [label="Define-Use"];
92 -> 110 [label="Define-Use"];
92 -> 138 [label="Define-Use"];
93 -> 92 [label="AST"];
93 -> 83 [label="AST"];
93 -> 91 [label="AST"];
94 -> 95 [label="AST"];
96 -> 97 [label="AST"];
96 -> 94 [label="AST"];
98 -> 99 [label="AST"];
101 -> 102 [label="AST"];
103 -> 100 [label="AST"];
103 -> 101 [label="AST"];
103 -> 98 [label="AST"];
104 -> 96 [label="AST"];
104 -> 103 [label="AST"];
104 -> 152 [label="Control Dep"];
104 -> 115 [label="Control Dep"];
104 -> 112 [label="Control Dep"];
104 -> 107 [label="Control Dep"];
104 -> 110 [label="Control Dep"];
104 -> 151 [label="Control Dep"];
104 -> 128 [label="Control Dep"];
104 -> 116 [label="Control Dep"];
104 -> 125 [label="Control Dep"];
104 -> 120 [label="Control Dep"];
104 -> 123 [label="Control Dep"];
104 -> 126 [label="Control Dep"];
105 -> 106 [label="AST"];
107 -> 108 [label="AST"];
110 -> 111 [label="AST"];
110 -> 114 [label="Data Dep"];
112 -> 109 [label="AST"];
112 -> 113 [label="AST"];
112 -> 110 [label="AST"];
112 -> 107 [label="AST"];
114 -> 123 [label="Define-Use"];
115 -> 114 [label="AST"];
115 -> 105 [label="AST"];
115 -> 112 [label="AST"];
116 -> 117 [label="AST"];
116 -> 118 [label="AST"];
120 -> 121 [label="AST"];
123 -> 124 [label="AST"];
125 -> 122 [label="AST"];
125 -> 123 [label="AST"];
125 -> 120 [label="AST"];
126 -> 127 [label="AST"];
128 -> 119 [label="AST"];
128 -> 125 [label="AST"];
128 -> 116 [label="AST"];
128 -> 126 [label="AST"];
128 -> 150 [label="Control Dep"];
128 -> 134 [label="Control Dep"];
128 -> 129 [label="Control Dep"];
128 -> 131 [label="Control Dep"];
128 -> 140 [label="Control Dep"];
128 -> 135 [label="Control Dep"];
128 -> 138 [label="Control Dep"];
128 -> 149 [label="Control Dep"];
128 -> 141 [label="Control Dep"];
128 -> 145 [label="Control Dep"];
128 -> 147 [label="Control Dep"];
129 -> 130 [label="AST"];
129 -> 154 [label="Define-Use"];
130 -> 154 [label="Define-Use"];
131 -> 132 [label="AST"];
134 -> 133 [label="AST"];
134 -> 129 [label="AST"];
134 -> 131 [label="AST"];
135 -> 136 [label="AST"];
138 -> 139 [label="AST"];
140 -> 137 [label="AST"];
140 -> 138 [label="AST"];
140 -> 135 [label="AST"];
141 -> 142 [label="AST"];
141 -> 143 [label="AST"];
145 -> 146 [label="AST"];
147 -> 148 [label="AST"];
149 -> 144 [label="AST"];
149 -> 145 [label="AST"];
149 -> 141 [label="AST"];
149 -> 147 [label="AST"];
150 -> 134 [label="AST"];
150 -> 140 [label="AST"];
150 -> 149 [label="AST"];
151 -> 128 [label="AST"];
151 -> 150 [label="AST"];
152 -> 115 [label="AST"];
152 -> 151 [label="AST"];
153 -> 104 [label="AST"];
153 -> 152 [label="AST"];
154 -> 155 [label="AST"];
156 -> 157 [label="AST"];
156 -> 154 [label="AST"];
156 -> 185 [label="Control Dep"];
156 -> 184 [label="Control Dep"];
156 -> 158 [label="Control Dep"];
156 -> 164 [label="Control Dep"];
156 -> 162 [label="Control Dep"];
156 -> 171 [label="Control Dep"];
156 -> 166 [label="Control Dep"];
156 -> 169 [label="Control Dep"];
156 -> 183 [label="Control Dep"];
156 -> 180 [label="Control Dep"];
156 -> 172 [label="Control Dep"];
156 -> 179 [label="Control Dep"];
156 -> 174 [label="Control Dep"];
156 -> 177 [label="Control Dep"];
156 -> 181 [label="Control Dep"];
158 -> 159 [label="AST"];
158 -> 160 [label="AST"];
162 -> 163 [label="AST"];
164 -> 165 [label="AST"];
164 -> 162 [label="AST"];
166 -> 167 [label="AST"];
169 -> 170 [label="AST"];
171 -> 168 [label="AST"];
171 -> 169 [label="AST"];
171 -> 166 [label="AST"];
172 -> 173 [label="AST"];
174 -> 175 [label="AST"];
177 -> 178 [label="AST"];
179 -> 176 [label="AST"];
179 -> 177 [label="AST"];
179 -> 174 [label="AST"];
180 -> 172 [label="AST"];
180 -> 179 [label="AST"];
181 -> 182 [label="AST"];
183 -> 180 [label="AST"];
183 -> 181 [label="AST"];
184 -> 161 [label="AST"];
184 -> 164 [label="AST"];
184 -> 158 [label="AST"];
184 -> 171 [label="AST"];
184 -> 183 [label="AST"];
185 -> 184 [label="AST"];
186 -> 156 [label="AST"];
186 -> 185 [label="AST"];
187 -> 42 [label="AST"];
187 -> 52 [label="AST"];
187 -> 58 [label="AST"];
187 -> 69 [label="AST"];
187 -> 82 [label="AST"];
187 -> 93 [label="AST"];
187 -> 153 [label="AST"];
187 -> 186 [label="AST"];
188 -> 31 [label="AST"];
188 -> 187 [label="AST"];
189 -> 190 [label="AST"];
191 -> 192 [label="AST"];
191 -> 193 [label="AST"];
195 -> 196 [label="AST"];
195 -> 198 [label="Data Dep"];
197 -> 194 [label="AST"];
197 -> 195 [label="AST"];
197 -> 191 [label="AST"];
198 -> 204 [label="Define-Use"];
198 -> 212 [label="Define-Use"];
199 -> 198 [label="AST"];
199 -> 189 [label="AST"];
199 -> 197 [label="AST"];
200 -> 201 [label="AST"];
200 -> 202 [label="AST"];
204 -> 205 [label="AST"];
206 -> 203 [label="AST"];
206 -> 204 [label="AST"];
206 -> 200 [label="AST"];
206 -> 245 [label="Control Dep"];
206 -> 217 [label="Control Dep"];
206 -> 214 [label="Control Dep"];
206 -> 209 [label="Control Dep"];
206 -> 212 [label="Control Dep"];
206 -> 244 [label="Control Dep"];
206 -> 218 [label="Control Dep"];
206 -> 224 [label="Control Dep"];
206 -> 222 [label="Control Dep"];
206 -> 231 [label="Control Dep"];
206 -> 226 [label="Control Dep"];
206 -> 229 [label="Control Dep"];
206 -> 243 [label="Control Dep"];
206 -> 240 [label="Control Dep"];
206 -> 232 [label="Control Dep"];
206 -> 239 [label="Control Dep"];
206 -> 234 [label="Control Dep"];
206 -> 237 [label="Control Dep"];
206 -> 241 [label="Control Dep"];
206 -> 253 [label="Control Dep"];
206 -> 256 [label="Control Dep"];
206 -> 257 [label="Control Dep"];
206 -> 260 [label="Control Dep"];
206 -> 261 [label="Control Dep"];
207 -> 208 [label="AST"];
209 -> 210 [label="AST"];
212 -> 213 [label="AST"];
212 -> 216 [label="Data Dep"];
214 -> 211 [label="AST"];
214 -> 215 [label="AST"];
214 -> 212 [label="AST"];
214 -> 209 [label="AST"];
216 -> 229 [label="Define-Use"];
216 -> 237 [label="Define-Use"];
217 -> 216 [label="AST"];
217 -> 207 [label="AST"];
217 -> 214 [label="AST"];
218 -> 219 [label="AST"];
218 -> 220 [label="AST"];
222 -> 223 [label="AST"];
224 -> 225 [label="AST"];
224 -> 222 [label="AST"];
226 -> 227 [label="AST"];
229 -> 230 [label="AST"];
231 -> 228 [label="AST"];
231 -> 229 [label="AST"];
231 -> 226 [label="AST"];
232 -> 233 [label="AST"];
234 -> 235 [label="AST"];
237 -> 238 [label="AST"];
239 -> 236 [label="AST"];
239 -> 237 [label="AST"];
239 -> 234 [label="AST"];
240 -> 232 [label="AST"];
240 -> 239 [label="AST"];
241 -> 242 [label="AST"];
243 -> 240 [label="AST"];
243 -> 241 [label="AST"];
244 -> 221 [label="AST"];
244 -> 224 [label="AST"];
244 -> 218 [label="AST"];
244 -> 231 [label="AST"];
244 -> 243 [label="AST"];
244 -> 249 [label="Action"];
245 -> 217 [label="AST"];
245 -> 244 [label="AST"];
246 -> 206 [label="AST"];
246 -> 245 [label="AST"];
247 -> 13 [label="AST"];
247 -> 24 [label="AST"];
247 -> 188 [label="AST"];
247 -> 199 [label="AST"];
247 -> 246 [label="AST"];
248 -> 1 [label="AST"];
248 -> 0 [label="AST"];
248 -> 2 [label="AST"];
248 -> 4 [label="AST"];
248 -> 247 [label="AST"];
249 -> 261 [label="Action"];
251 -> 250 [label="AST"];
252 -> 251 [label="AST"];
253 -> 252 [label="AST"];
255 -> 254 [label="AST"];
256 -> 255 [label="AST"];
257 -> 258 [label="AST"];
257 -> 253 [label="AST"];
257 -> 256 [label="AST"];
260 -> 259 [label="AST"];
261 -> 257 [label="AST"];
261 -> 260 [label="AST"];
}