digraph "testExtensions#?" {
0 [label="3:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="3:CtVirtualElement@testExtensions" shape=ellipse]
2 [label="3:CtTypeReferenceImpl@Exception" shape=ellipse]
3 [label="3:CtPackageReferenceImpl@java.lang" shape=ellipse]
4 [label="4:CtTypeReferenceImpl@FileLengthCheck" shape=ellipse]
5 [label="4:CtPackageReferenceImpl@" shape=ellipse]
6 [label="4:CtExecutableReferenceImpl@FileLengthCheck()" shape=ellipse]
7 [label="4:CtTypeReferenceImpl@FileLengthCheck" shape=ellipse]
8 [label="4:CtTypeReferenceImpl@FileLengthCheck" shape=ellipse]
9 [label="4:CtConstructorCallImpl@new FileLengthCheck()" shape=ellipse]
10 [label="4:CtVirtualElement@check" shape=ellipse]
11 [label="4:CtLocalVariableImpl@FileLengthCheck check = new FileLengthCheck()" shape=ellipse]
12 [label="5:CtExecutableReferenceImpl@setFileExtensions(java.lang.String)" shape=ellipse]
13 [label="5:CtTypeReferenceImpl@FileLengthCheck" shape=ellipse]
14 [label="5:CtTypeReferenceImpl@String" shape=ellipse]
15 [label="5:CtVirtualElement@setFileExtensions" shape=ellipse]
16 [label="5:CtVariableReadImpl@check" shape=ellipse]
17 [label="5:CtLocalVariableReferenceImpl@check" shape=ellipse]
18 [label="5:CtLiteralImpl@\"java\"" shape=ellipse]
19 [label="5:CtTypeReferenceImpl@String" shape=ellipse]
20 [label="5:CtInvocationImpl@check.setFileExtensions(\"java\")" shape=ellipse]
21 [label="6:CtExecutableReferenceImpl@assertEquals(java.lang.String,java.lang.String,<unknown>)" shape=ellipse]
22 [label="6:CtTypeReferenceImpl@String" shape=ellipse]
23 [label="6:CtTypeReferenceImpl@String" shape=ellipse]
24 [label="6:CtTypeReferenceImpl@null" shape=ellipse]
25 [label="6:CtVirtualElement@assertEquals" shape=ellipse]
26 [label="6:CtTypeAccessImpl@PlaceHold" shape=ellipse]
27 [label="6:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
28 [label="6:CtThisAccessImpl@" shape=ellipse]
29 [label="6:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
30 [label="6:CtLiteralImpl@\"extension should be the same\"" shape=ellipse]
31 [label="6:CtTypeReferenceImpl@String" shape=ellipse]
32 [label="6:CtLiteralImpl@\".java\"" shape=ellipse]
33 [label="6:CtTypeReferenceImpl@String" shape=ellipse]
34 [label="6:CtExecutableReferenceImpl@getFileExtensions()" shape=ellipse]
35 [label="6:CtTypeReferenceImpl@FileLengthCheck" shape=ellipse]
36 [label="6:CtVirtualElement@getFileExtensions" shape=ellipse]
37 [label="6:CtVariableReadImpl@check" shape=ellipse]
38 [label="6:CtLocalVariableReferenceImpl@check" shape=ellipse]
39 [label="6:CtInvocationImpl@check.getFileExtensions()" shape=ellipse]
40 [label="6:CtLiteralImpl@0" shape=ellipse]
41 [label="6:CtTypeReferenceImpl@int" shape=ellipse]
42 [label="6:CtArrayReadImpl@check.getFileExtensions()[0]" shape=ellipse]
43 [label="6:CtInvocationImpl@assertEquals(\"extension should be the same\", \".java\", check.getFileExtensions()[0])" shape=ellipse]
44 [label="7:CtExecutableReferenceImpl@setFileExtensions(java.lang.String)" shape=ellipse]
45 [label="7:CtTypeReferenceImpl@FileLengthCheck" shape=ellipse]
46 [label="7:CtTypeReferenceImpl@String" shape=ellipse]
47 [label="7:CtVirtualElement@setFileExtensions" shape=ellipse]
48 [label="7:CtVariableReadImpl@check" shape=ellipse]
49 [label="7:CtLocalVariableReferenceImpl@check" shape=ellipse]
50 [label="7:CtLiteralImpl@\".java\"" shape=ellipse]
51 [label="7:CtTypeReferenceImpl@String" shape=ellipse]
52 [label="7:CtInvocationImpl@check.setFileExtensions(\".java\")" shape=ellipse]
53 [label="8:CtExecutableReferenceImpl@assertEquals(java.lang.String,java.lang.String,<unknown>)" shape=ellipse]
54 [label="8:CtTypeReferenceImpl@String" shape=ellipse]
55 [label="8:CtTypeReferenceImpl@String" shape=ellipse]
56 [label="8:CtTypeReferenceImpl@null" shape=ellipse]
57 [label="8:CtVirtualElement@assertEquals" shape=ellipse]
58 [label="8:CtTypeAccessImpl@PlaceHold" shape=ellipse]
59 [label="8:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
60 [label="8:CtThisAccessImpl@" shape=ellipse]
61 [label="8:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
62 [label="8:CtLiteralImpl@\"extension should be the same\"" shape=ellipse]
63 [label="8:CtTypeReferenceImpl@String" shape=ellipse]
64 [label="8:CtLiteralImpl@\".java\"" shape=ellipse]
65 [label="8:CtTypeReferenceImpl@String" shape=ellipse]
66 [label="8:CtExecutableReferenceImpl@getFileExtensions()" shape=ellipse]
67 [label="8:CtTypeReferenceImpl@FileLengthCheck" shape=ellipse]
68 [label="8:CtVirtualElement@getFileExtensions" shape=ellipse]
69 [label="8:CtVariableReadImpl@check" shape=ellipse]
70 [label="8:CtLocalVariableReferenceImpl@check" shape=ellipse]
71 [label="8:CtInvocationImpl@check.getFileExtensions()" shape=ellipse]
72 [label="8:CtLiteralImpl@0" shape=ellipse]
73 [label="8:CtTypeReferenceImpl@int" shape=ellipse]
74 [label="8:CtArrayReadImpl@check.getFileExtensions()[0]" shape=ellipse]
75 [label="8:CtInvocationImpl@assertEquals(\"extension should be the same\", \".java\", check.getFileExtensions()[0])" shape=ellipse]
76 [label="10:CtExecutableReferenceImpl@setFileExtensions(<unknown>)" shape=ellipse]
77 [label="10:CtTypeReferenceImpl@FileLengthCheck" shape=ellipse]
78 [label="10:CtTypeReferenceImpl@null" shape=ellipse]
79 [label="10:CtVirtualElement@setFileExtensions" shape=ellipse]
80 [label="10:CtVariableReadImpl@check" shape=ellipse]
81 [label="10:CtLocalVariableReferenceImpl@check" shape=ellipse]
82 [label="10:CtLiteralImpl@null" shape=ellipse]
83 [label="10:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
84 [label="10:CtInvocationImpl@check.setFileExtensions(null)" shape=ellipse]
85 [label="11:CtExecutableReferenceImpl@fail()" shape=ellipse]
86 [label="11:CtVirtualElement@fail" shape=ellipse]
87 [label="11:CtTypeAccessImpl@PlaceHold" shape=ellipse]
88 [label="11:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
89 [label="11:CtThisAccessImpl@" shape=ellipse]
90 [label="11:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
91 [label="11:CtInvocationImpl@fail()" shape=ellipse]
92 [label="9:CtBlockImpl@\{
    check.setFileExtensions(null);
    fail();
\}" shape=ellipse]
93 [label="12:CtVirtualElement@ex" shape=ellipse]
94 [label="12:CtTypeReferenceImpl@IllegalArgumentException" shape=ellipse]
95 [label="12:CtPackageReferenceImpl@java.lang" shape=ellipse]
96 [label="12:CtCatchVariableImpl@IllegalArgumentException ex" shape=ellipse]
97 [label="13:CtExecutableReferenceImpl@assertEquals(java.lang.String,java.lang.String)" shape=ellipse]
98 [label="13:CtTypeReferenceImpl@String" shape=ellipse]
99 [label="13:CtTypeReferenceImpl@String" shape=ellipse]
100 [label="13:CtVirtualElement@assertEquals" shape=ellipse]
101 [label="13:CtTypeAccessImpl@PlaceHold" shape=ellipse]
102 [label="13:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
103 [label="13:CtThisAccessImpl@" shape=ellipse]
104 [label="13:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
105 [label="13:CtLiteralImpl@\"Extensions array can not be null\"" shape=ellipse]
106 [label="13:CtTypeReferenceImpl@String" shape=ellipse]
107 [label="13:CtExecutableReferenceImpl@getMessage()" shape=ellipse]
108 [label="13:CtTypeReferenceImpl@Throwable" shape=ellipse]
109 [label="13:CtTypeReferenceImpl@String" shape=ellipse]
110 [label="13:CtVirtualElement@getMessage" shape=ellipse]
111 [label="13:CtVariableReadImpl@ex" shape=ellipse]
112 [label="13:CtCatchVariableReferenceImpl@ex" shape=ellipse]
113 [label="13:CtInvocationImpl@ex.getMessage()" shape=ellipse]
114 [label="13:CtInvocationImpl@assertEquals(\"Extensions array can not be null\", ex.getMessage())" shape=ellipse]
115 [label="12:CtBlockImpl@\{
    assertEquals(\"Extensions array can not be null\", ex.getMessage());
\}" shape=ellipse]
116 [label="12:CtCatchImpl@ catch (IllegalArgumentException ex) \{
    assertEquals(\"Extensions array can not be null\", ex.getMessage());
\}" shape=ellipse]
117 [label="9:CtTryImpl@try \{
    check.setFileExtensions(null);
    fail();
\} catch (IllegalArgumentException ex) \{
    assertEquals(\"Extensions array can not be null\", ex.getMessage());
\}" shape=ellipse]
118 [label="3:CtBlockImpl@\{
    FileLengthCheck check = new FileLengthCheck();
    check.setFileExtensions(\"java\");
    assertEquals(\"extension should be the same\", \".java\", check.getFileExtensions()[0]);
    check.setFileExtensions(\".java\");
    assertEquals(\"extension should be the same\", \".java\", check.getFileExtensions()[0]);
    try \{
        check.setFileExtensions(null);
        fail();
    \} catch (IllegalArgumentException ex) \{
        assertEquals(\"Extensions array can not be null\", ex.getMessage());
    \}
\}" shape=ellipse]
119 [label="3:CtMethodImpl@@Test
public void testExtensions() throws Exception \{
    FileLengthCheck check = new FileLengthCheck();
    check.setFileExtensions(\"java\");
    assertEquals(\"extension should be the same\", \".java\", check.getFileExtensions()[0]);
    check.setFileExtensions(\".java\");
    assertEquals(\"extension should be the same\", \".java\", check.getFileExtensions()[0]);
    try \{
        check.setFileExtensions(null);
        fail();
    \} catch (IllegalArgumentException ex) \{
        assertEquals(\"Extensions array can not be null\", ex.getMessage());
    \}
\}" shape=ellipse]
120 [label="2:CtAnnotationImpl@@Test" shape=ellipse]
121 [label="10:Update@UPDATE" shape=ellipse]
122 [label="10:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
123 [label="10:CtPackageReferenceImpl@java.lang" shape=ellipse]
124 [label="10:CtTypeReferenceImpl@String" shape=ellipse]
125 [label="10:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
126 [label="10:CtLiteralImpl@((String[]) (null))" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
6 -> 7 [label="AST"];
6 -> 8 [label="AST"];
9 -> 6 [label="AST"];
10 -> 16 [label="Define-Use"];
10 -> 37 [label="Define-Use"];
10 -> 48 [label="Define-Use"];
10 -> 69 [label="Define-Use"];
10 -> 80 [label="Define-Use"];
11 -> 10 [label="AST"];
11 -> 4 [label="AST"];
11 -> 9 [label="AST"];
12 -> 13 [label="AST"];
12 -> 14 [label="AST"];
16 -> 17 [label="AST"];
18 -> 19 [label="AST"];
20 -> 15 [label="AST"];
20 -> 16 [label="AST"];
20 -> 12 [label="AST"];
20 -> 18 [label="AST"];
21 -> 22 [label="AST"];
21 -> 23 [label="AST"];
21 -> 24 [label="AST"];
26 -> 27 [label="AST"];
28 -> 29 [label="AST"];
28 -> 26 [label="AST"];
30 -> 31 [label="AST"];
32 -> 33 [label="AST"];
34 -> 35 [label="AST"];
37 -> 38 [label="AST"];
39 -> 36 [label="AST"];
39 -> 37 [label="AST"];
39 -> 34 [label="AST"];
40 -> 41 [label="AST"];
42 -> 39 [label="AST"];
42 -> 40 [label="AST"];
43 -> 25 [label="AST"];
43 -> 28 [label="AST"];
43 -> 21 [label="AST"];
43 -> 30 [label="AST"];
43 -> 32 [label="AST"];
43 -> 42 [label="AST"];
44 -> 45 [label="AST"];
44 -> 46 [label="AST"];
48 -> 49 [label="AST"];
50 -> 51 [label="AST"];
52 -> 47 [label="AST"];
52 -> 48 [label="AST"];
52 -> 44 [label="AST"];
52 -> 50 [label="AST"];
53 -> 54 [label="AST"];
53 -> 55 [label="AST"];
53 -> 56 [label="AST"];
58 -> 59 [label="AST"];
60 -> 61 [label="AST"];
60 -> 58 [label="AST"];
62 -> 63 [label="AST"];
64 -> 65 [label="AST"];
66 -> 67 [label="AST"];
69 -> 70 [label="AST"];
71 -> 68 [label="AST"];
71 -> 69 [label="AST"];
71 -> 66 [label="AST"];
72 -> 73 [label="AST"];
74 -> 71 [label="AST"];
74 -> 72 [label="AST"];
75 -> 57 [label="AST"];
75 -> 60 [label="AST"];
75 -> 53 [label="AST"];
75 -> 62 [label="AST"];
75 -> 64 [label="AST"];
75 -> 74 [label="AST"];
76 -> 77 [label="AST"];
76 -> 78 [label="AST"];
80 -> 81 [label="AST"];
82 -> 83 [label="AST"];
82 -> 121 [label="Action"];
84 -> 79 [label="AST"];
84 -> 80 [label="AST"];
84 -> 76 [label="AST"];
84 -> 82 [label="AST"];
87 -> 88 [label="AST"];
89 -> 90 [label="AST"];
89 -> 87 [label="AST"];
91 -> 86 [label="AST"];
91 -> 89 [label="AST"];
91 -> 85 [label="AST"];
92 -> 84 [label="AST"];
92 -> 91 [label="AST"];
93 -> 111 [label="Define-Use"];
94 -> 95 [label="AST"];
96 -> 93 [label="AST"];
96 -> 94 [label="AST"];
96 -> 115 [label="Control Dep"];
96 -> 114 [label="Control Dep"];
96 -> 97 [label="Control Dep"];
96 -> 103 [label="Control Dep"];
96 -> 101 [label="Control Dep"];
96 -> 105 [label="Control Dep"];
96 -> 113 [label="Control Dep"];
96 -> 107 [label="Control Dep"];
96 -> 111 [label="Control Dep"];
97 -> 98 [label="AST"];
97 -> 99 [label="AST"];
101 -> 102 [label="AST"];
103 -> 104 [label="AST"];
103 -> 101 [label="AST"];
105 -> 106 [label="AST"];
107 -> 108 [label="AST"];
107 -> 109 [label="AST"];
111 -> 112 [label="AST"];
113 -> 110 [label="AST"];
113 -> 111 [label="AST"];
113 -> 107 [label="AST"];
114 -> 100 [label="AST"];
114 -> 103 [label="AST"];
114 -> 97 [label="AST"];
114 -> 105 [label="AST"];
114 -> 113 [label="AST"];
115 -> 114 [label="AST"];
116 -> 96 [label="AST"];
116 -> 115 [label="AST"];
117 -> 92 [label="AST"];
117 -> 116 [label="AST"];
118 -> 11 [label="AST"];
118 -> 20 [label="AST"];
118 -> 43 [label="AST"];
118 -> 52 [label="AST"];
118 -> 75 [label="AST"];
118 -> 117 [label="AST"];
119 -> 1 [label="AST"];
119 -> 120 [label="AST"];
119 -> 0 [label="AST"];
119 -> 2 [label="AST"];
119 -> 118 [label="AST"];
121 -> 126 [label="Action"];
124 -> 123 [label="AST"];
125 -> 124 [label="AST"];
126 -> 122 [label="AST"];
126 -> 125 [label="AST"];
}