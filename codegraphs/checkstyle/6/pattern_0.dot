digraph "Pattern" {
0 [label="testTypeNamesForFourPermitedCapitalLetters#?#3:UPDATE
testTypeNamesForFivePermitedCapitalLetters#?#3:UPDATE" shape=ellipse]
1 [label="testTypeNamesForFourPermitedCapitalLetters#?#3:@Test
public void testTypeNamesForFourPermitedCapitalLetters() throws Exception \{
    final int expectedCapitalCount = 4;
    warningMessage = getCheckMessage(MSG_KEY, expectedCapitalCount);
    final DefaultConfiguration checkConfig = createCheckConfig(AbbreviationAsWordInNameCheck.class);
    checkConfig.addAttribute(\"allowedAbbreviationLength\", String.valueOf(expectedCapitalCount));
    checkConfig.addAttribute(\"allowedAbbreviations\", \"CLASS,FACTORY\");
    checkConfig.addAttribute(\"tokens\", \"CLASS_DEF\");
    checkConfig.addAttribute(\"ignoreOverriddenMethods\", \"true\");
    final String[] expected = new String[]\{ \"32: \" + warningMessage \};
    verify(checkConfig, getPath(\"naming/InputAbbreviationAsWordInTypeNameCheck.java\"), expected);
\}
testTypeNamesForFivePermitedCapitalLetters#?#3:@Test
public void testTypeNamesForFivePermitedCapitalLetters() throws Exception \{
    final int expectedCapitalCount = 5;
    warningMessage = getCheckMessage(MSG_KEY, expectedCapitalCount);
    final DefaultConfiguration checkConfig = createCheckConfig(AbbreviationAsWordInNameCheck.class);
    checkConfig.addAttribute(\"allowedAbbreviationLength\", String.valueOf(expectedCapitalCount));
    checkConfig.addAttribute(\"allowedAbbreviations\", \"CLASS\");
    checkConfig.addAttribute(\"tokens\", \"CLASS_DEF\");
    checkConfig.addAttribute(\"ignoreOverriddenMethods\", \"true\");
    final String[] expected = new String[]\{ \"32: \" + warningMessage, \"37: \" + warningMessage \};
    verify(checkConfig, getPath(\"naming/InputAbbreviationAsWordInTypeNameCheck.java\"), expected);
\}" shape=ellipse]
2 [label="testTypeNamesForFourPermitedCapitalLetters#?#3:testTypeNamesForFourPermitedCapitalLetters
testTypeNamesForFivePermitedCapitalLetters#?#3:testTypeNamesForFivePermitedCapitalLetters" shape=ellipse]
3 [label="testTypeNamesForFourPermitedCapitalLetters#?#2:@Test
testTypeNamesForFivePermitedCapitalLetters#?#2:@Test" shape=ellipse]
4 [label="testTypeNamesForFourPermitedCapitalLetters#?#3:void
testTypeNamesForFivePermitedCapitalLetters#?#3:void" shape=ellipse]
5 [label="testTypeNamesForFourPermitedCapitalLetters#?#3:Exception
testTypeNamesForFivePermitedCapitalLetters#?#3:Exception" shape=ellipse]
6 [label="testTypeNamesForFourPermitedCapitalLetters#?#3:java.lang
testTypeNamesForFivePermitedCapitalLetters#?#3:java.lang" shape=ellipse]
7 [label="testTypeNamesForFourPermitedCapitalLetters#?#3:\{
    final int expectedCapitalCount = 4;
    warningMessage = getCheckMessage(MSG_KEY, expectedCapitalCount);
    final DefaultConfiguration checkConfig = createCheckConfig(AbbreviationAsWordInNameCheck.class);
    checkConfig.addAttribute(\"allowedAbbreviationLength\", String.valueOf(expectedCapitalCount));
    checkConfig.addAttribute(\"allowedAbbreviations\", \"CLASS,FACTORY\");
    checkConfig.addAttribute(\"tokens\", \"CLASS_DEF\");
    checkConfig.addAttribute(\"ignoreOverriddenMethods\", \"true\");
    final String[] expected = new String[]\{ \"32: \" + warningMessage \};
    verify(checkConfig, getPath(\"naming/InputAbbreviationAsWordInTypeNameCheck.java\"), expected);
\}
testTypeNamesForFivePermitedCapitalLetters#?#3:\{
    final int expectedCapitalCount = 5;
    warningMessage = getCheckMessage(MSG_KEY, expectedCapitalCount);
    final DefaultConfiguration checkConfig = createCheckConfig(AbbreviationAsWordInNameCheck.class);
    checkConfig.addAttribute(\"allowedAbbreviationLength\", String.valueOf(expectedCapitalCount));
    checkConfig.addAttribute(\"allowedAbbreviations\", \"CLASS\");
    checkConfig.addAttribute(\"tokens\", \"CLASS_DEF\");
    checkConfig.addAttribute(\"ignoreOverriddenMethods\", \"true\");
    final String[] expected = new String[]\{ \"32: \" + warningMessage, \"37: \" + warningMessage \};
    verify(checkConfig, getPath(\"naming/InputAbbreviationAsWordInTypeNameCheck.java\"), expected);
\}" shape=ellipse]
8 [label="testTypeNamesForFourPermitedCapitalLetters#?#4:final int expectedCapitalCount = 4
testTypeNamesForFivePermitedCapitalLetters#?#4:final int expectedCapitalCount = 5" shape=ellipse]
9 [label="testTypeNamesForFourPermitedCapitalLetters#?#5:warningMessage = getCheckMessage(MSG_KEY, expectedCapitalCount)
testTypeNamesForFivePermitedCapitalLetters#?#5:warningMessage = getCheckMessage(MSG_KEY, expectedCapitalCount)" shape=ellipse]
10 [label="testTypeNamesForFourPermitedCapitalLetters#?#6:final DefaultConfiguration checkConfig = createCheckConfig(AbbreviationAsWordInNameCheck.class)
testTypeNamesForFivePermitedCapitalLetters#?#6:final DefaultConfiguration checkConfig = createCheckConfig(AbbreviationAsWordInNameCheck.class)" shape=ellipse]
11 [label="testTypeNamesForFourPermitedCapitalLetters#?#7:checkConfig.addAttribute(\"allowedAbbreviationLength\", String.valueOf(expectedCapitalCount))
testTypeNamesForFivePermitedCapitalLetters#?#7:checkConfig.addAttribute(\"allowedAbbreviationLength\", String.valueOf(expectedCapitalCount))" shape=ellipse]
12 [label="testTypeNamesForFourPermitedCapitalLetters#?#8:checkConfig.addAttribute(\"allowedAbbreviations\", \"CLASS,FACTORY\")
testTypeNamesForFivePermitedCapitalLetters#?#8:checkConfig.addAttribute(\"allowedAbbreviations\", \"CLASS\")" shape=ellipse]
13 [label="testTypeNamesForFourPermitedCapitalLetters#?#9:checkConfig.addAttribute(\"tokens\", \"CLASS_DEF\")
testTypeNamesForFivePermitedCapitalLetters#?#9:checkConfig.addAttribute(\"tokens\", \"CLASS_DEF\")" shape=ellipse]
14 [label="testTypeNamesForFourPermitedCapitalLetters#?#10:checkConfig.addAttribute(\"ignoreOverriddenMethods\", \"true\")
testTypeNamesForFivePermitedCapitalLetters#?#10:checkConfig.addAttribute(\"ignoreOverriddenMethods\", \"true\")" shape=ellipse]
15 [label="testTypeNamesForFourPermitedCapitalLetters#?#11:final String[] expected = new String[]\{ \"32: \" + warningMessage \}
testTypeNamesForFivePermitedCapitalLetters#?#11:final String[] expected = new String[]\{ \"32: \" + warningMessage, \"37: \" + warningMessage \}" shape=ellipse]
16 [label="testTypeNamesForFourPermitedCapitalLetters#?#12:verify(checkConfig, getPath(\"naming/InputAbbreviationAsWordInTypeNameCheck.java\"), expected)
testTypeNamesForFivePermitedCapitalLetters#?#12:verify(checkConfig, getPath(\"naming/InputAbbreviationAsWordInTypeNameCheck.java\"), expected)" shape=ellipse]
17 [label="testTypeNamesForFourPermitedCapitalLetters#?#3:testTypeNamesForFourPermittedCapitalLetters
testTypeNamesForFivePermitedCapitalLetters#?#3:testTypeNamesForFivePermittedCapitalLetters" shape=ellipse]
18 [label="testTypeNamesForFourPermitedCapitalLetters#?#3:VE: ThrownTypes_testTypeNamesForFourPermittedCapitalLetters
testTypeNamesForFivePermitedCapitalLetters#?#3:VE: ThrownTypes_testTypeNamesForFivePermittedCapitalLetters" shape=ellipse]
1 -> 0 [label="Action:2"];
1 -> 2 [label="AST:2"];
1 -> 3 [label="AST:2"];
1 -> 4 [label="AST:2"];
1 -> 5 [label="AST:2"];
1 -> 7 [label="AST:2"];
5 -> 6 [label="AST:2"];
7 -> 8 [label="AST:2"];
7 -> 9 [label="AST:2"];
7 -> 10 [label="AST:2"];
7 -> 11 [label="AST:2"];
7 -> 12 [label="AST:2"];
7 -> 13 [label="AST:2"];
7 -> 14 [label="AST:2"];
7 -> 15 [label="AST:2"];
7 -> 16 [label="AST:2"];
}