digraph "registerCheck#?,String,Check" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@registerCheck" shape=ellipse]
2 [label="2:CtParameterImpl@String token" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
4 [label="2:CtParameterImpl@Check check" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@Check" shape=ellipse]
6 [label="3:CtExecutableReferenceImpl@isCommentNodesRequired()" shape=ellipse]
7 [label="3:CtTypeReferenceImpl@Check" shape=ellipse]
8 [label="3:CtTypeReferenceImpl@boolean" shape=ellipse]
9 [label="3:CtVirtualElement@isCommentNodesRequired" shape=ellipse]
10 [label="3:CtVariableReadImpl@check" shape=ellipse]
11 [label="3:CtParameterReferenceImpl@check" shape=ellipse]
12 [label="3:CtInvocationImpl@check.isCommentNodesRequired()" shape=ellipse]
13 [label="4:CtExecutableReferenceImpl@put(java.lang.String,Check)" shape=ellipse]
14 [label="4:CtTypeReferenceImpl@tokenToCommentChecks" shape=ellipse]
15 [label="4:CtTypeReferenceImpl@String" shape=ellipse]
16 [label="4:CtTypeReferenceImpl@Check" shape=ellipse]
17 [label="4:CtVirtualElement@put" shape=ellipse]
18 [label="4:CtFieldReferenceImpl@tokenToCommentChecks" shape=ellipse]
19 [label="4:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
20 [label="4:CtFieldReadImpl@tokenToCommentChecks" shape=ellipse]
21 [label="4:CtVariableReadImpl@token" shape=ellipse]
22 [label="4:CtParameterReferenceImpl@token" shape=ellipse]
23 [label="4:CtVariableReadImpl@check" shape=ellipse]
24 [label="4:CtParameterReferenceImpl@check" shape=ellipse]
25 [label="4:CtInvocationImpl@tokenToCommentChecks.put(token, check)" shape=ellipse]
26 [label="3:CtBlockImpl@\{
    tokenToCommentChecks.put(token, check);
\}" shape=ellipse]
27 [label="5:CtExecutableReferenceImpl@isCommentType(java.lang.String)" shape=ellipse]
28 [label="5:CtTypeReferenceImpl@TokenTypes" shape=ellipse]
29 [label="5:CtTypeReferenceImpl@boolean" shape=ellipse]
30 [label="5:CtTypeReferenceImpl@String" shape=ellipse]
31 [label="5:CtVirtualElement@isCommentType" shape=ellipse]
32 [label="5:CtTypeAccessImpl@TokenTypes" shape=ellipse]
33 [label="5:CtTypeReferenceImpl@TokenTypes" shape=ellipse]
34 [label="5:CtVariableReadImpl@token" shape=ellipse]
35 [label="5:CtParameterReferenceImpl@token" shape=ellipse]
36 [label="5:CtInvocationImpl@TokenTypes.isCommentType(token)" shape=ellipse]
37 [label="6:CtTypeReferenceImpl@String" shape=ellipse]
38 [label="6:CtPackageReferenceImpl@java.lang" shape=ellipse]
39 [label="7:CtExecutableReferenceImpl@format(java.lang.String,java.lang.Object[])" shape=ellipse]
40 [label="7:CtTypeReferenceImpl@String" shape=ellipse]
41 [label="7:CtTypeReferenceImpl@String" shape=ellipse]
42 [label="7:CtTypeReferenceImpl@String" shape=ellipse]
43 [label="7:CtArrayTypeReferenceImpl@Object[]" shape=ellipse]
44 [label="7:CtVirtualElement@format" shape=ellipse]
45 [label="7:CtTypeAccessImpl@String" shape=ellipse]
46 [label="7:CtTypeReferenceImpl@String" shape=ellipse]
47 [label="8:CtLiteralImpl@\"Check '%s' waits for comment type \"" shape=ellipse]
48 [label="8:CtTypeReferenceImpl@String" shape=ellipse]
49 [label="9:CtLiteralImpl@\"token ('%s') and should override 'isCommentNodesRequred()' \"" shape=ellipse]
50 [label="9:CtTypeReferenceImpl@String" shape=ellipse]
51 [label="8:CtBinaryOperatorImpl@(\"Check '%s' waits for comment type \" + \"token ('%s') and should override 'isCommentNodesRequred()' \")" shape=ellipse]
52 [label="8:CtTypeReferenceImpl@String" shape=ellipse]
53 [label="10:CtLiteralImpl@\"method to return 'true'\"" shape=ellipse]
54 [label="10:CtTypeReferenceImpl@String" shape=ellipse]
55 [label="8:CtBinaryOperatorImpl@(\"Check '%s' waits for comment type \" + \"token ('%s') and should override 'isCommentNodesRequred()' \") + \"method to return 'true'\"" shape=ellipse]
56 [label="8:CtTypeReferenceImpl@String" shape=ellipse]
57 [label="11:CtExecutableReferenceImpl@getName()" shape=ellipse]
58 [label="11:CtVirtualElement@getName" shape=ellipse]
59 [label="11:CtExecutableReferenceImpl@getClass()" shape=ellipse]
60 [label="11:CtTypeReferenceImpl@Check" shape=ellipse]
61 [label="11:CtVirtualElement@getClass" shape=ellipse]
62 [label="11:CtVariableReadImpl@check" shape=ellipse]
63 [label="11:CtParameterReferenceImpl@check" shape=ellipse]
64 [label="11:CtInvocationImpl@check.getClass()" shape=ellipse]
65 [label="11:CtInvocationImpl@check.getClass().getName()" shape=ellipse]
66 [label="12:CtVariableReadImpl@token" shape=ellipse]
67 [label="12:CtParameterReferenceImpl@token" shape=ellipse]
68 [label="7:CtInvocationImpl@String.format((\"Check '%s' waits for comment type \" + \"token ('%s') and should override 'isCommentNodesRequred()' \") + \"method to return 'true'\", check.getClass().getName(), token)" shape=ellipse]
69 [label="6:CtVirtualElement@message" shape=ellipse]
70 [label="6:CtLocalVariableImpl@final String message = String.format((\"Check '%s' waits for comment type \" + \"token ('%s') and should override 'isCommentNodesRequred()' \") + \"method to return 'true'\", check.getClass().getName(), token)" shape=ellipse]
71 [label="13:CtExecutableReferenceImpl@warn(java.lang.String)" shape=ellipse]
72 [label="13:CtTypeReferenceImpl@LOG" shape=ellipse]
73 [label="13:CtTypeReferenceImpl@String" shape=ellipse]
74 [label="13:CtVirtualElement@warn" shape=ellipse]
75 [label="13:CtTypeAccessImpl@LOG" shape=ellipse]
76 [label="13:CtTypeReferenceImpl@LOG" shape=ellipse]
77 [label="13:CtVariableReadImpl@message" shape=ellipse]
78 [label="13:CtLocalVariableReferenceImpl@message" shape=ellipse]
79 [label="13:CtInvocationImpl@LOG.warn(message)" shape=ellipse]
80 [label="5:CtBlockImpl@\{
    final String message = String.format((\"Check '%s' waits for comment type \" + \"token ('%s') and should override 'isCommentNodesRequred()' \") + \"method to return 'true'\", check.getClass().getName(), token);
    LOG.warn(message);
\}" shape=ellipse]
81 [label="15:CtExecutableReferenceImpl@put(java.lang.String,Check)" shape=ellipse]
82 [label="15:CtTypeReferenceImpl@tokenToOrdinaryChecks" shape=ellipse]
83 [label="15:CtTypeReferenceImpl@String" shape=ellipse]
84 [label="15:CtTypeReferenceImpl@Check" shape=ellipse]
85 [label="15:CtVirtualElement@put" shape=ellipse]
86 [label="15:CtFieldReferenceImpl@tokenToOrdinaryChecks" shape=ellipse]
87 [label="15:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
88 [label="15:CtFieldReadImpl@tokenToOrdinaryChecks" shape=ellipse]
89 [label="15:CtVariableReadImpl@token" shape=ellipse]
90 [label="15:CtParameterReferenceImpl@token" shape=ellipse]
91 [label="15:CtVariableReadImpl@check" shape=ellipse]
92 [label="15:CtParameterReferenceImpl@check" shape=ellipse]
93 [label="15:CtInvocationImpl@tokenToOrdinaryChecks.put(token, check)" shape=ellipse]
94 [label="14:CtBlockImpl@\{
    tokenToOrdinaryChecks.put(token, check);
\}" shape=ellipse]
95 [label="5:CtIfImpl@if (TokenTypes.isCommentType(token)) \{
    final String message = String.format((\"Check '%s' waits for comment type \" + \"token ('%s') and should override 'isCommentNodesRequred()' \") + \"method to return 'true'\", check.getClass().getName(), token);
    LOG.warn(message);
\} else \{
    tokenToOrdinaryChecks.put(token, check);
\}" shape=ellipse]
96 [label="5:CtBlockImpl@
    if (TokenTypes.isCommentType(token)) \{
        final String message = String.format((\"Check '%s' waits for comment type \" + \"token ('%s') and should override 'isCommentNodesRequred()' \") + \"method to return 'true'\", check.getClass().getName(), token);
        LOG.warn(message);
    \} else \{
        tokenToOrdinaryChecks.put(token, check);
    \}
" shape=ellipse]
97 [label="3:CtIfImpl@if (check.isCommentNodesRequired()) \{
    tokenToCommentChecks.put(token, check);
\} else if (TokenTypes.isCommentType(token)) \{
    final String message = String.format((\"Check '%s' waits for comment type \" + \"token ('%s') and should override 'isCommentNodesRequred()' \") + \"method to return 'true'\", check.getClass().getName(), token);
    LOG.warn(message);
\} else \{
    tokenToOrdinaryChecks.put(token, check);
\}" shape=ellipse]
98 [label="2:CtBlockImpl@\{
    if (check.isCommentNodesRequired()) \{
        tokenToCommentChecks.put(token, check);
    \} else if (TokenTypes.isCommentType(token)) \{
        final String message = String.format((\"Check '%s' waits for comment type \" + \"token ('%s') and should override 'isCommentNodesRequred()' \") + \"method to return 'true'\", check.getClass().getName(), token);
        LOG.warn(message);
    \} else \{
        tokenToOrdinaryChecks.put(token, check);
    \}
\}" shape=ellipse]
99 [label="2:CtMethodImpl@private void registerCheck(String token, Check check) \{
    if (check.isCommentNodesRequired()) \{
        tokenToCommentChecks.put(token, check);
    \} else if (TokenTypes.isCommentType(token)) \{
        final String message = String.format((\"Check '%s' waits for comment type \" + \"token ('%s') and should override 'isCommentNodesRequred()' \") + \"method to return 'true'\", check.getClass().getName(), token);
        LOG.warn(message);
    \} else \{
        tokenToOrdinaryChecks.put(token, check);
    \}
\}" shape=ellipse]
100 [label="5:Update@UPDATE" shape=ellipse]
101 [label="5:CtPackageReferenceImpl@" shape=ellipse]
102 [label="5:CtTypeReferenceImpl@Utils" shape=ellipse]
103 [label="5:CtTypeAccessImpl@Utils" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
6 -> 7 [label="AST"];
6 -> 8 [label="AST"];
10 -> 11 [label="AST"];
12 -> 9 [label="AST"];
12 -> 10 [label="AST"];
12 -> 6 [label="AST"];
12 -> 26 [label="Control Dep"];
12 -> 25 [label="Control Dep"];
12 -> 13 [label="Control Dep"];
12 -> 20 [label="Control Dep"];
12 -> 21 [label="Control Dep"];
12 -> 23 [label="Control Dep"];
12 -> 96 [label="Control Dep"];
12 -> 95 [label="Control Dep"];
12 -> 36 [label="Control Dep"];
12 -> 27 [label="Control Dep"];
12 -> 32 [label="Control Dep"];
12 -> 34 [label="Control Dep"];
12 -> 103 [label="Control Dep"];
13 -> 14 [label="AST"];
13 -> 15 [label="AST"];
13 -> 16 [label="AST"];
18 -> 19 [label="AST"];
20 -> 18 [label="AST"];
21 -> 22 [label="AST"];
23 -> 24 [label="AST"];
25 -> 17 [label="AST"];
25 -> 20 [label="AST"];
25 -> 13 [label="AST"];
25 -> 21 [label="AST"];
25 -> 23 [label="AST"];
26 -> 25 [label="AST"];
27 -> 28 [label="AST"];
27 -> 29 [label="AST"];
27 -> 30 [label="AST"];
32 -> 33 [label="AST"];
32 -> 100 [label="Action"];
34 -> 35 [label="AST"];
36 -> 31 [label="AST"];
36 -> 32 [label="AST"];
36 -> 27 [label="AST"];
36 -> 34 [label="AST"];
36 -> 80 [label="Control Dep"];
36 -> 70 [label="Control Dep"];
36 -> 68 [label="Control Dep"];
36 -> 39 [label="Control Dep"];
36 -> 45 [label="Control Dep"];
36 -> 55 [label="Control Dep"];
36 -> 51 [label="Control Dep"];
36 -> 47 [label="Control Dep"];
36 -> 49 [label="Control Dep"];
36 -> 53 [label="Control Dep"];
36 -> 65 [label="Control Dep"];
36 -> 57 [label="Control Dep"];
36 -> 64 [label="Control Dep"];
36 -> 59 [label="Control Dep"];
36 -> 62 [label="Control Dep"];
36 -> 66 [label="Control Dep"];
36 -> 79 [label="Control Dep"];
36 -> 71 [label="Control Dep"];
36 -> 75 [label="Control Dep"];
36 -> 77 [label="Control Dep"];
36 -> 94 [label="Control Dep"];
36 -> 93 [label="Control Dep"];
36 -> 81 [label="Control Dep"];
36 -> 88 [label="Control Dep"];
36 -> 89 [label="Control Dep"];
36 -> 91 [label="Control Dep"];
37 -> 38 [label="AST"];
39 -> 40 [label="AST"];
39 -> 41 [label="AST"];
39 -> 42 [label="AST"];
39 -> 43 [label="AST"];
45 -> 46 [label="AST"];
47 -> 48 [label="AST"];
49 -> 50 [label="AST"];
51 -> 52 [label="AST"];
51 -> 47 [label="AST"];
51 -> 49 [label="AST"];
53 -> 54 [label="AST"];
55 -> 56 [label="AST"];
55 -> 51 [label="AST"];
55 -> 53 [label="AST"];
59 -> 60 [label="AST"];
62 -> 63 [label="AST"];
62 -> 69 [label="Data Dep"];
64 -> 61 [label="AST"];
64 -> 62 [label="AST"];
64 -> 59 [label="AST"];
65 -> 58 [label="AST"];
65 -> 64 [label="AST"];
65 -> 57 [label="AST"];
66 -> 67 [label="AST"];
66 -> 69 [label="Data Dep"];
68 -> 44 [label="AST"];
68 -> 45 [label="AST"];
68 -> 39 [label="AST"];
68 -> 55 [label="AST"];
68 -> 65 [label="AST"];
68 -> 66 [label="AST"];
69 -> 77 [label="Define-Use"];
70 -> 69 [label="AST"];
70 -> 37 [label="AST"];
70 -> 68 [label="AST"];
71 -> 72 [label="AST"];
71 -> 73 [label="AST"];
75 -> 76 [label="AST"];
77 -> 78 [label="AST"];
79 -> 74 [label="AST"];
79 -> 75 [label="AST"];
79 -> 71 [label="AST"];
79 -> 77 [label="AST"];
80 -> 70 [label="AST"];
80 -> 79 [label="AST"];
81 -> 82 [label="AST"];
81 -> 83 [label="AST"];
81 -> 84 [label="AST"];
86 -> 87 [label="AST"];
88 -> 86 [label="AST"];
89 -> 90 [label="AST"];
91 -> 92 [label="AST"];
93 -> 85 [label="AST"];
93 -> 88 [label="AST"];
93 -> 81 [label="AST"];
93 -> 89 [label="AST"];
93 -> 91 [label="AST"];
94 -> 93 [label="AST"];
95 -> 36 [label="AST"];
95 -> 80 [label="AST"];
95 -> 94 [label="AST"];
96 -> 95 [label="AST"];
97 -> 12 [label="AST"];
97 -> 26 [label="AST"];
97 -> 96 [label="AST"];
98 -> 97 [label="AST"];
99 -> 1 [label="AST"];
99 -> 0 [label="AST"];
99 -> 2 [label="AST"];
99 -> 4 [label="AST"];
99 -> 98 [label="AST"];
100 -> 103 [label="Action"];
102 -> 101 [label="AST"];
103 -> 102 [label="AST"];
}