digraph "getAcceptableTokens#?" {
0 [label="3:CtVirtualElement@int[]" shape=ellipse]
1 [label="3:CtArrayTypeReferenceImpl@int[]" shape=ellipse]
2 [label="3:CtTypeReferenceImpl@int" shape=ellipse]
3 [label="3:CtVirtualElement@getAcceptableTokens" shape=ellipse]
4 [label="4:CtVirtualElement@int[]" shape=ellipse]
5 [label="4:CtArrayTypeReferenceImpl@int[]" shape=ellipse]
6 [label="4:CtTypeReferenceImpl@int" shape=ellipse]
7 [label="4:CtExecutableReferenceImpl@getDefaultTokens()" shape=ellipse]
8 [label="4:CtArrayTypeReferenceImpl@int[]" shape=ellipse]
9 [label="4:CtVirtualElement@getDefaultTokens" shape=ellipse]
10 [label="4:CtTypeAccessImpl@PlaceHold" shape=ellipse]
11 [label="4:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
12 [label="4:CtThisAccessImpl@" shape=ellipse]
13 [label="4:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
14 [label="4:CtInvocationImpl@getDefaultTokens()" shape=ellipse]
15 [label="4:CtVirtualElement@tokensToCopy" shape=ellipse]
16 [label="4:CtLocalVariableImpl@int[] tokensToCopy = getDefaultTokens()" shape=ellipse]
17 [label="5:CtTypeReferenceImpl@Set<String>" shape=ellipse]
18 [label="5:CtPackageReferenceImpl@" shape=ellipse]
19 [label="5:CtTypeReferenceImpl@String" shape=ellipse]
20 [label="5:CtExecutableReferenceImpl@getTokenNames()" shape=ellipse]
21 [label="5:CtTypeReferenceImpl@Set<String>" shape=ellipse]
22 [label="5:CtVirtualElement@getTokenNames" shape=ellipse]
23 [label="5:CtTypeAccessImpl@PlaceHold" shape=ellipse]
24 [label="5:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
25 [label="5:CtThisAccessImpl@" shape=ellipse]
26 [label="5:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
27 [label="5:CtInvocationImpl@getTokenNames()" shape=ellipse]
28 [label="5:CtVirtualElement@tokenNames" shape=ellipse]
29 [label="5:CtLocalVariableImpl@final Set<String> tokenNames = getTokenNames()" shape=ellipse]
30 [label="6:CtExecutableReferenceImpl@isEmpty()" shape=ellipse]
31 [label="6:CtTypeReferenceImpl@Set<String>" shape=ellipse]
32 [label="6:CtVirtualElement@isEmpty" shape=ellipse]
33 [label="6:CtVariableReadImpl@tokenNames" shape=ellipse]
34 [label="6:CtLocalVariableReferenceImpl@tokenNames" shape=ellipse]
35 [label="6:CtInvocationImpl@tokenNames.isEmpty()" shape=ellipse]
36 [label="6:CtUnaryOperatorImpl@!tokenNames.isEmpty()" shape=ellipse]
37 [label="7:CtVariableWriteImpl@tokensToCopy" shape=ellipse]
38 [label="7:CtLocalVariableReferenceImpl@tokensToCopy" shape=ellipse]
39 [label="7:CtNewArrayImpl@new int[tokenNames.size()]" shape=ellipse]
40 [label="7:CtArrayTypeReferenceImpl@int[]" shape=ellipse]
41 [label="7:CtInvocationImpl@tokenNames.size()" shape=ellipse]
42 [label="7:CtVirtualElement@int[]" shape=ellipse]
43 [label="7:CtArrayTypeReferenceImpl@int[]" shape=ellipse]
44 [label="7:CtTypeReferenceImpl@int" shape=ellipse]
45 [label="7:CtAssignmentImpl@tokensToCopy = new int[tokenNames.size()]" shape=ellipse]
46 [label="8:CtTypeReferenceImpl@int" shape=ellipse]
47 [label="8:CtLiteralImpl@0" shape=ellipse]
48 [label="8:CtTypeReferenceImpl@int" shape=ellipse]
49 [label="8:CtVirtualElement@i" shape=ellipse]
50 [label="8:CtLocalVariableImpl@int i = 0" shape=ellipse]
51 [label="9:CtTypeReferenceImpl@String" shape=ellipse]
52 [label="9:CtPackageReferenceImpl@java.lang" shape=ellipse]
53 [label="9:CtVirtualElement@name" shape=ellipse]
54 [label="9:CtLocalVariableImpl@String name" shape=ellipse]
55 [label="9:CtVariableReadImpl@tokenNames" shape=ellipse]
56 [label="9:CtLocalVariableReferenceImpl@tokenNames" shape=ellipse]
57 [label="10:CtVariableReadImpl@tokensToCopy" shape=ellipse]
58 [label="10:CtLocalVariableReferenceImpl@tokensToCopy" shape=ellipse]
59 [label="10:CtVariableReadImpl@i" shape=ellipse]
60 [label="10:CtLocalVariableReferenceImpl@i" shape=ellipse]
61 [label="10:CtTypeReferenceImpl@int" shape=ellipse]
62 [label="10:CtArrayWriteImpl@tokensToCopy[i]" shape=ellipse]
63 [label="10:CtExecutableReferenceImpl@getTokenId(java.lang.String)" shape=ellipse]
64 [label="10:CtTypeReferenceImpl@TokenTypes" shape=ellipse]
65 [label="10:CtTypeReferenceImpl@int" shape=ellipse]
66 [label="10:CtTypeReferenceImpl@String" shape=ellipse]
67 [label="10:CtVirtualElement@getTokenId" shape=ellipse]
68 [label="10:CtTypeAccessImpl@TokenTypes" shape=ellipse]
69 [label="10:CtTypeReferenceImpl@TokenTypes" shape=ellipse]
70 [label="10:CtVariableReadImpl@name" shape=ellipse]
71 [label="10:CtLocalVariableReferenceImpl@name" shape=ellipse]
72 [label="10:CtInvocationImpl@TokenTypes.getTokenId(name)" shape=ellipse]
73 [label="10:CtTypeReferenceImpl@int" shape=ellipse]
74 [label="10:CtAssignmentImpl@tokensToCopy[i] = TokenTypes.getTokenId(name)" shape=ellipse]
75 [label="11:CtVariableWriteImpl@i" shape=ellipse]
76 [label="11:CtLocalVariableReferenceImpl@i" shape=ellipse]
77 [label="11:CtUnaryOperatorImpl@i++" shape=ellipse]
78 [label="11:CtTypeReferenceImpl@int" shape=ellipse]
79 [label="9:CtBlockImpl@\{
    tokensToCopy[i] = TokenTypes.getTokenId(name);
    i++;
\}" shape=ellipse]
80 [label="9:CtForEachImpl@for (String name : tokenNames) \{
    tokensToCopy[i] = TokenTypes.getTokenId(name);
    i++;
\}" shape=ellipse]
81 [label="6:CtBlockImpl@\{
    tokensToCopy = new int[tokenNames.size()];
    int i = 0;
    for (String name : tokenNames) \{
        tokensToCopy[i] = TokenTypes.getTokenId(name);
        i++;
    \}
\}" shape=ellipse]
82 [label="6:CtIfImpl@if (!tokenNames.isEmpty()) \{
    tokensToCopy = new int[tokenNames.size()];
    int i = 0;
    for (String name : tokenNames) \{
        tokensToCopy[i] = TokenTypes.getTokenId(name);
        i++;
    \}
\}" shape=ellipse]
83 [label="14:CtVirtualElement@int[]" shape=ellipse]
84 [label="14:CtArrayTypeReferenceImpl@int[]" shape=ellipse]
85 [label="14:CtTypeReferenceImpl@int" shape=ellipse]
86 [label="14:CtNewArrayImpl@new int[tokensToCopy.length]" shape=ellipse]
87 [label="14:CtArrayTypeReferenceImpl@int[]" shape=ellipse]
88 [label="14:CtFieldReadImpl@tokensToCopy.length" shape=ellipse]
89 [label="14:CtVirtualElement@copy" shape=ellipse]
90 [label="14:CtLocalVariableImpl@final int[] copy = new int[tokensToCopy.length]" shape=ellipse]
91 [label="15:CtExecutableReferenceImpl@arraycopy(java.lang.Object,int,java.lang.Object,int,int)" shape=ellipse]
92 [label="15:CtTypeReferenceImpl@System" shape=ellipse]
93 [label="15:CtTypeReferenceImpl@void" shape=ellipse]
94 [label="15:CtTypeReferenceImpl@Object" shape=ellipse]
95 [label="15:CtTypeReferenceImpl@int" shape=ellipse]
96 [label="15:CtTypeReferenceImpl@Object" shape=ellipse]
97 [label="15:CtTypeReferenceImpl@int" shape=ellipse]
98 [label="15:CtTypeReferenceImpl@int" shape=ellipse]
99 [label="15:CtVirtualElement@arraycopy" shape=ellipse]
100 [label="15:CtTypeAccessImpl@System" shape=ellipse]
101 [label="15:CtTypeReferenceImpl@System" shape=ellipse]
102 [label="15:CtVariableReadImpl@tokensToCopy" shape=ellipse]
103 [label="15:CtLocalVariableReferenceImpl@tokensToCopy" shape=ellipse]
104 [label="15:CtLiteralImpl@0" shape=ellipse]
105 [label="15:CtTypeReferenceImpl@int" shape=ellipse]
106 [label="15:CtVariableReadImpl@copy" shape=ellipse]
107 [label="15:CtLocalVariableReferenceImpl@copy" shape=ellipse]
108 [label="15:CtLiteralImpl@0" shape=ellipse]
109 [label="15:CtTypeReferenceImpl@int" shape=ellipse]
110 [label="15:CtFieldReferenceImpl@length" shape=ellipse]
111 [label="15:CtTypeReferenceImpl@int" shape=ellipse]
112 [label="15:CtTypeReferenceImpl@int" shape=ellipse]
113 [label="15:CtFieldReadImpl@tokensToCopy.length" shape=ellipse]
114 [label="15:CtVariableReadImpl@tokensToCopy" shape=ellipse]
115 [label="15:CtInvocationImpl@System.arraycopy(tokensToCopy, 0, copy, 0, tokensToCopy.length)" shape=ellipse]
116 [label="16:CtVariableReadImpl@copy" shape=ellipse]
117 [label="16:CtLocalVariableReferenceImpl@copy" shape=ellipse]
118 [label="16:CtReturnImpl@return copy" shape=ellipse]
119 [label="3:CtBlockImpl@\{
    int[] tokensToCopy = getDefaultTokens();
    final Set<String> tokenNames = getTokenNames();
    if (!tokenNames.isEmpty()) \{
        tokensToCopy = new int[tokenNames.size()];
        int i = 0;
        for (String name : tokenNames) \{
            tokensToCopy[i] = TokenTypes.getTokenId(name);
            i++;
        \}
    \}
    final int[] copy = new int[tokensToCopy.length];
    System.arraycopy(tokensToCopy, 0, copy, 0, tokensToCopy.length);
    return copy;
\}" shape=ellipse]
120 [label="3:CtMethodImpl@@Override
public int[] getAcceptableTokens() \{
    int[] tokensToCopy = getDefaultTokens();
    final Set<String> tokenNames = getTokenNames();
    if (!tokenNames.isEmpty()) \{
        tokensToCopy = new int[tokenNames.size()];
        int i = 0;
        for (String name : tokenNames) \{
            tokensToCopy[i] = TokenTypes.getTokenId(name);
            i++;
        \}
    \}
    final int[] copy = new int[tokensToCopy.length];
    System.arraycopy(tokensToCopy, 0, copy, 0, tokensToCopy.length);
    return copy;
\}" shape=ellipse]
121 [label="2:CtAnnotationImpl@@Override" shape=ellipse]
122 [label="10:Update@UPDATE" shape=ellipse]
123 [label="10:CtPackageReferenceImpl@" shape=ellipse]
124 [label="10:CtTypeReferenceImpl@Utils" shape=ellipse]
125 [label="10:CtTypeAccessImpl@Utils" shape=ellipse]
1 -> 0 [label="AST"];
1 -> 2 [label="AST"];
5 -> 4 [label="AST"];
5 -> 6 [label="AST"];
7 -> 8 [label="AST"];
10 -> 11 [label="AST"];
12 -> 13 [label="AST"];
12 -> 10 [label="AST"];
12 -> 15 [label="Data Dep"];
14 -> 9 [label="AST"];
14 -> 12 [label="AST"];
14 -> 7 [label="AST"];
15 -> 57 [label="Define-Use"];
15 -> 102 [label="Define-Use"];
16 -> 15 [label="AST"];
16 -> 5 [label="AST"];
16 -> 14 [label="AST"];
17 -> 18 [label="AST"];
17 -> 19 [label="AST"];
20 -> 21 [label="AST"];
23 -> 24 [label="AST"];
25 -> 26 [label="AST"];
25 -> 23 [label="AST"];
25 -> 28 [label="Data Dep"];
27 -> 22 [label="AST"];
27 -> 25 [label="AST"];
27 -> 20 [label="AST"];
28 -> 33 [label="Define-Use"];
28 -> 55 [label="Define-Use"];
29 -> 28 [label="AST"];
29 -> 17 [label="AST"];
29 -> 27 [label="AST"];
30 -> 31 [label="AST"];
33 -> 34 [label="AST"];
35 -> 32 [label="AST"];
35 -> 33 [label="AST"];
35 -> 30 [label="AST"];
36 -> 35 [label="AST"];
36 -> 81 [label="Control Dep"];
36 -> 45 [label="Control Dep"];
36 -> 37 [label="Control Dep"];
36 -> 39 [label="Control Dep"];
36 -> 43 [label="Control Dep"];
36 -> 50 [label="Control Dep"];
36 -> 47 [label="Control Dep"];
36 -> 80 [label="Control Dep"];
36 -> 54 [label="Control Dep"];
36 -> 55 [label="Control Dep"];
37 -> 38 [label="AST"];
37 -> 57 [label="Define-Use"];
37 -> 102 [label="Define-Use"];
38 -> 57 [label="Define-Use"];
38 -> 102 [label="Define-Use"];
39 -> 40 [label="AST"];
39 -> 41 [label="AST"];
43 -> 42 [label="AST"];
43 -> 44 [label="AST"];
45 -> 43 [label="AST"];
45 -> 37 [label="AST"];
45 -> 39 [label="AST"];
47 -> 48 [label="AST"];
49 -> 59 [label="Define-Use"];
50 -> 49 [label="AST"];
50 -> 46 [label="AST"];
50 -> 47 [label="AST"];
51 -> 52 [label="AST"];
53 -> 70 [label="Define-Use"];
54 -> 53 [label="AST"];
54 -> 51 [label="AST"];
55 -> 56 [label="AST"];
55 -> 79 [label="Control Dep"];
55 -> 74 [label="Control Dep"];
55 -> 62 [label="Control Dep"];
55 -> 57 [label="Control Dep"];
55 -> 59 [label="Control Dep"];
55 -> 72 [label="Control Dep"];
55 -> 63 [label="Control Dep"];
55 -> 68 [label="Control Dep"];
55 -> 70 [label="Control Dep"];
55 -> 77 [label="Control Dep"];
55 -> 75 [label="Control Dep"];
55 -> 125 [label="Control Dep"];
57 -> 58 [label="AST"];
59 -> 60 [label="AST"];
62 -> 61 [label="AST"];
62 -> 57 [label="AST"];
62 -> 59 [label="AST"];
63 -> 64 [label="AST"];
63 -> 65 [label="AST"];
63 -> 66 [label="AST"];
68 -> 69 [label="AST"];
68 -> 122 [label="Action"];
70 -> 71 [label="AST"];
70 -> 62 [label="Data Dep"];
72 -> 67 [label="AST"];
72 -> 68 [label="AST"];
72 -> 63 [label="AST"];
72 -> 70 [label="AST"];
74 -> 73 [label="AST"];
74 -> 62 [label="AST"];
74 -> 72 [label="AST"];
75 -> 76 [label="AST"];
77 -> 78 [label="AST"];
77 -> 75 [label="AST"];
79 -> 74 [label="AST"];
79 -> 77 [label="AST"];
80 -> 54 [label="AST"];
80 -> 55 [label="AST"];
80 -> 79 [label="AST"];
81 -> 45 [label="AST"];
81 -> 50 [label="AST"];
81 -> 80 [label="AST"];
82 -> 36 [label="AST"];
82 -> 81 [label="AST"];
84 -> 83 [label="AST"];
84 -> 85 [label="AST"];
86 -> 87 [label="AST"];
86 -> 88 [label="AST"];
88 -> 89 [label="Data Dep"];
89 -> 106 [label="Define-Use"];
89 -> 116 [label="Define-Use"];
90 -> 89 [label="AST"];
90 -> 84 [label="AST"];
90 -> 86 [label="AST"];
91 -> 92 [label="AST"];
91 -> 93 [label="AST"];
91 -> 94 [label="AST"];
91 -> 95 [label="AST"];
91 -> 96 [label="AST"];
91 -> 97 [label="AST"];
91 -> 98 [label="AST"];
100 -> 101 [label="AST"];
102 -> 103 [label="AST"];
104 -> 105 [label="AST"];
106 -> 107 [label="AST"];
108 -> 109 [label="AST"];
110 -> 111 [label="AST"];
110 -> 112 [label="AST"];
113 -> 114 [label="AST"];
113 -> 110 [label="AST"];
115 -> 99 [label="AST"];
115 -> 100 [label="AST"];
115 -> 91 [label="AST"];
115 -> 102 [label="AST"];
115 -> 104 [label="AST"];
115 -> 106 [label="AST"];
115 -> 108 [label="AST"];
115 -> 113 [label="AST"];
116 -> 117 [label="AST"];
118 -> 116 [label="AST"];
119 -> 16 [label="AST"];
119 -> 29 [label="AST"];
119 -> 82 [label="AST"];
119 -> 90 [label="AST"];
119 -> 115 [label="AST"];
119 -> 118 [label="AST"];
120 -> 3 [label="AST"];
120 -> 121 [label="AST"];
120 -> 1 [label="AST"];
120 -> 119 [label="AST"];
122 -> 125 [label="Action"];
124 -> 123 [label="AST"];
125 -> 124 [label="AST"];
}