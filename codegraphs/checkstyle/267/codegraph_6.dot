digraph "notifyLeave#?,DetailAST,AstState" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@notifyLeave" shape=ellipse]
2 [label="2:CtParameterImpl@DetailAST ast" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@DetailAST" shape=ellipse]
4 [label="2:CtParameterImpl@AstState astState" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@AstState" shape=ellipse]
6 [label="3:CtTypeReferenceImpl@Collection<Check>" shape=ellipse]
7 [label="3:CtPackageReferenceImpl@" shape=ellipse]
8 [label="3:CtTypeReferenceImpl@Check" shape=ellipse]
9 [label="3:CtVirtualElement@visitors" shape=ellipse]
10 [label="3:CtLocalVariableImpl@Collection<Check> visitors" shape=ellipse]
11 [label="4:CtTypeReferenceImpl@String" shape=ellipse]
12 [label="4:CtPackageReferenceImpl@java.lang" shape=ellipse]
13 [label="4:CtExecutableReferenceImpl@getTokenName()" shape=ellipse]
14 [label="4:CtTypeReferenceImpl@TokenTypes" shape=ellipse]
15 [label="4:CtTypeReferenceImpl@String" shape=ellipse]
16 [label="4:CtVirtualElement@getTokenName" shape=ellipse]
17 [label="4:CtTypeAccessImpl@TokenTypes" shape=ellipse]
18 [label="4:CtTypeReferenceImpl@TokenTypes" shape=ellipse]
19 [label="4:CtExecutableReferenceImpl@getType()" shape=ellipse]
20 [label="4:CtTypeReferenceImpl@DetailAST" shape=ellipse]
21 [label="4:CtVirtualElement@getType" shape=ellipse]
22 [label="4:CtVariableReadImpl@ast" shape=ellipse]
23 [label="4:CtParameterReferenceImpl@ast" shape=ellipse]
24 [label="4:CtInvocationImpl@ast.getType()" shape=ellipse]
25 [label="4:CtInvocationImpl@TokenTypes.getTokenName(ast.getType())" shape=ellipse]
26 [label="4:CtVirtualElement@tokenType" shape=ellipse]
27 [label="4:CtLocalVariableImpl@final String tokenType = TokenTypes.getTokenName(ast.getType())" shape=ellipse]
28 [label="5:CtVariableReadImpl@astState" shape=ellipse]
29 [label="5:CtParameterReferenceImpl@astState" shape=ellipse]
30 [label="5:CtFieldReferenceImpl@AstState.WITH_COMMENTS" shape=ellipse]
31 [label="5:CtTypeReferenceImpl@AstState" shape=ellipse]
32 [label="5:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
33 [label="5:CtFieldReadImpl@AstState.WITH_COMMENTS" shape=ellipse]
34 [label="5:CtTypeAccessImpl@AstState" shape=ellipse]
35 [label="5:CtBinaryOperatorImpl@astState == AstState.WITH_COMMENTS" shape=ellipse]
36 [label="6:CtExecutableReferenceImpl@containsKey(java.lang.String)" shape=ellipse]
37 [label="6:CtTypeReferenceImpl@tokenToCommentChecks" shape=ellipse]
38 [label="6:CtTypeReferenceImpl@String" shape=ellipse]
39 [label="6:CtVirtualElement@containsKey" shape=ellipse]
40 [label="6:CtFieldReferenceImpl@tokenToCommentChecks" shape=ellipse]
41 [label="6:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
42 [label="6:CtFieldReadImpl@tokenToCommentChecks" shape=ellipse]
43 [label="6:CtVariableReadImpl@tokenType" shape=ellipse]
44 [label="6:CtLocalVariableReferenceImpl@tokenType" shape=ellipse]
45 [label="6:CtInvocationImpl@tokenToCommentChecks.containsKey(tokenType)" shape=ellipse]
46 [label="6:CtUnaryOperatorImpl@!tokenToCommentChecks.containsKey(tokenType)" shape=ellipse]
47 [label="7:CtReturnImpl@return" shape=ellipse]
48 [label="6:CtBlockImpl@\{
    return;
\}" shape=ellipse]
49 [label="6:CtIfImpl@if (!tokenToCommentChecks.containsKey(tokenType)) \{
    return;
\}" shape=ellipse]
50 [label="9:CtVariableWriteImpl@visitors" shape=ellipse]
51 [label="9:CtLocalVariableReferenceImpl@visitors" shape=ellipse]
52 [label="9:CtExecutableReferenceImpl@get(java.lang.String)" shape=ellipse]
53 [label="9:CtTypeReferenceImpl@tokenToCommentChecks" shape=ellipse]
54 [label="9:CtTypeReferenceImpl@String" shape=ellipse]
55 [label="9:CtVirtualElement@get" shape=ellipse]
56 [label="9:CtFieldReferenceImpl@tokenToCommentChecks" shape=ellipse]
57 [label="9:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
58 [label="9:CtFieldReadImpl@tokenToCommentChecks" shape=ellipse]
59 [label="9:CtVariableReadImpl@tokenType" shape=ellipse]
60 [label="9:CtLocalVariableReferenceImpl@tokenType" shape=ellipse]
61 [label="9:CtInvocationImpl@tokenToCommentChecks.get(tokenType)" shape=ellipse]
62 [label="9:CtAssignmentImpl@visitors = tokenToCommentChecks.get(tokenType)" shape=ellipse]
63 [label="5:CtBlockImpl@\{
    if (!tokenToCommentChecks.containsKey(tokenType)) \{
        return;
    \}
    visitors = tokenToCommentChecks.get(tokenType);
\}" shape=ellipse]
64 [label="11:CtExecutableReferenceImpl@containsKey(java.lang.String)" shape=ellipse]
65 [label="11:CtTypeReferenceImpl@tokenToOrdinaryChecks" shape=ellipse]
66 [label="11:CtTypeReferenceImpl@String" shape=ellipse]
67 [label="11:CtVirtualElement@containsKey" shape=ellipse]
68 [label="11:CtFieldReferenceImpl@tokenToOrdinaryChecks" shape=ellipse]
69 [label="11:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
70 [label="11:CtFieldReadImpl@tokenToOrdinaryChecks" shape=ellipse]
71 [label="11:CtVariableReadImpl@tokenType" shape=ellipse]
72 [label="11:CtLocalVariableReferenceImpl@tokenType" shape=ellipse]
73 [label="11:CtInvocationImpl@tokenToOrdinaryChecks.containsKey(tokenType)" shape=ellipse]
74 [label="11:CtUnaryOperatorImpl@!tokenToOrdinaryChecks.containsKey(tokenType)" shape=ellipse]
75 [label="12:CtReturnImpl@return" shape=ellipse]
76 [label="11:CtBlockImpl@\{
    return;
\}" shape=ellipse]
77 [label="11:CtIfImpl@if (!tokenToOrdinaryChecks.containsKey(tokenType)) \{
    return;
\}" shape=ellipse]
78 [label="14:CtVariableWriteImpl@visitors" shape=ellipse]
79 [label="14:CtLocalVariableReferenceImpl@visitors" shape=ellipse]
80 [label="14:CtExecutableReferenceImpl@get(java.lang.String)" shape=ellipse]
81 [label="14:CtTypeReferenceImpl@tokenToOrdinaryChecks" shape=ellipse]
82 [label="14:CtTypeReferenceImpl@String" shape=ellipse]
83 [label="14:CtVirtualElement@get" shape=ellipse]
84 [label="14:CtFieldReferenceImpl@tokenToOrdinaryChecks" shape=ellipse]
85 [label="14:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
86 [label="14:CtFieldReadImpl@tokenToOrdinaryChecks" shape=ellipse]
87 [label="14:CtVariableReadImpl@tokenType" shape=ellipse]
88 [label="14:CtLocalVariableReferenceImpl@tokenType" shape=ellipse]
89 [label="14:CtInvocationImpl@tokenToOrdinaryChecks.get(tokenType)" shape=ellipse]
90 [label="14:CtAssignmentImpl@visitors = tokenToOrdinaryChecks.get(tokenType)" shape=ellipse]
91 [label="10:CtBlockImpl@\{
    if (!tokenToOrdinaryChecks.containsKey(tokenType)) \{
        return;
    \}
    visitors = tokenToOrdinaryChecks.get(tokenType);
\}" shape=ellipse]
92 [label="5:CtIfImpl@if (astState == AstState.WITH_COMMENTS) \{
    if (!tokenToCommentChecks.containsKey(tokenType)) \{
        return;
    \}
    visitors = tokenToCommentChecks.get(tokenType);
\} else \{
    if (!tokenToOrdinaryChecks.containsKey(tokenType)) \{
        return;
    \}
    visitors = tokenToOrdinaryChecks.get(tokenType);
\}" shape=ellipse]
93 [label="16:CtTypeReferenceImpl@Check" shape=ellipse]
94 [label="16:CtPackageReferenceImpl@" shape=ellipse]
95 [label="16:CtVirtualElement@ch" shape=ellipse]
96 [label="16:CtLocalVariableImpl@Check ch" shape=ellipse]
97 [label="16:CtVariableReadImpl@visitors" shape=ellipse]
98 [label="16:CtLocalVariableReferenceImpl@visitors" shape=ellipse]
99 [label="17:CtExecutableReferenceImpl@leaveToken(DetailAST)" shape=ellipse]
100 [label="17:CtTypeReferenceImpl@Check" shape=ellipse]
101 [label="17:CtTypeReferenceImpl@DetailAST" shape=ellipse]
102 [label="17:CtVirtualElement@leaveToken" shape=ellipse]
103 [label="17:CtVariableReadImpl@ch" shape=ellipse]
104 [label="17:CtLocalVariableReferenceImpl@ch" shape=ellipse]
105 [label="17:CtVariableReadImpl@ast" shape=ellipse]
106 [label="17:CtParameterReferenceImpl@ast" shape=ellipse]
107 [label="17:CtInvocationImpl@ch.leaveToken(ast)" shape=ellipse]
108 [label="16:CtBlockImpl@\{
    ch.leaveToken(ast);
\}" shape=ellipse]
109 [label="16:CtForEachImpl@for (Check ch : visitors) \{
    ch.leaveToken(ast);
\}" shape=ellipse]
110 [label="2:CtBlockImpl@\{
    Collection<Check> visitors;
    final String tokenType = TokenTypes.getTokenName(ast.getType());
    if (astState == AstState.WITH_COMMENTS) \{
        if (!tokenToCommentChecks.containsKey(tokenType)) \{
            return;
        \}
        visitors = tokenToCommentChecks.get(tokenType);
    \} else \{
        if (!tokenToOrdinaryChecks.containsKey(tokenType)) \{
            return;
        \}
        visitors = tokenToOrdinaryChecks.get(tokenType);
    \}
    for (Check ch : visitors) \{
        ch.leaveToken(ast);
    \}
\}" shape=ellipse]
111 [label="2:CtMethodImpl@private void notifyLeave(DetailAST ast, AstState astState) \{
    Collection<Check> visitors;
    final String tokenType = TokenTypes.getTokenName(ast.getType());
    if (astState == AstState.WITH_COMMENTS) \{
        if (!tokenToCommentChecks.containsKey(tokenType)) \{
            return;
        \}
        visitors = tokenToCommentChecks.get(tokenType);
    \} else \{
        if (!tokenToOrdinaryChecks.containsKey(tokenType)) \{
            return;
        \}
        visitors = tokenToOrdinaryChecks.get(tokenType);
    \}
    for (Check ch : visitors) \{
        ch.leaveToken(ast);
    \}
\}" shape=ellipse]
112 [label="4:Update@UPDATE" shape=ellipse]
113 [label="4:CtPackageReferenceImpl@" shape=ellipse]
114 [label="4:CtTypeReferenceImpl@Utils" shape=ellipse]
115 [label="4:CtTypeAccessImpl@Utils" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
6 -> 7 [label="AST"];
6 -> 8 [label="AST"];
9 -> 97 [label="Define-Use"];
10 -> 9 [label="AST"];
10 -> 6 [label="AST"];
11 -> 12 [label="AST"];
13 -> 14 [label="AST"];
13 -> 15 [label="AST"];
17 -> 18 [label="AST"];
17 -> 112 [label="Action"];
19 -> 20 [label="AST"];
22 -> 23 [label="AST"];
22 -> 26 [label="Data Dep"];
24 -> 21 [label="AST"];
24 -> 22 [label="AST"];
24 -> 19 [label="AST"];
25 -> 16 [label="AST"];
25 -> 17 [label="AST"];
25 -> 13 [label="AST"];
25 -> 24 [label="AST"];
26 -> 43 [label="Define-Use"];
26 -> 59 [label="Define-Use"];
26 -> 71 [label="Define-Use"];
26 -> 87 [label="Define-Use"];
27 -> 26 [label="AST"];
27 -> 11 [label="AST"];
27 -> 25 [label="AST"];
28 -> 29 [label="AST"];
30 -> 31 [label="AST"];
30 -> 32 [label="AST"];
33 -> 34 [label="AST"];
33 -> 30 [label="AST"];
35 -> 28 [label="AST"];
35 -> 33 [label="AST"];
35 -> 63 [label="Control Dep"];
35 -> 49 [label="Control Dep"];
35 -> 46 [label="Control Dep"];
35 -> 45 [label="Control Dep"];
35 -> 36 [label="Control Dep"];
35 -> 42 [label="Control Dep"];
35 -> 43 [label="Control Dep"];
35 -> 62 [label="Control Dep"];
35 -> 50 [label="Control Dep"];
35 -> 61 [label="Control Dep"];
35 -> 52 [label="Control Dep"];
35 -> 58 [label="Control Dep"];
35 -> 59 [label="Control Dep"];
35 -> 91 [label="Control Dep"];
35 -> 77 [label="Control Dep"];
35 -> 74 [label="Control Dep"];
35 -> 73 [label="Control Dep"];
35 -> 64 [label="Control Dep"];
35 -> 70 [label="Control Dep"];
35 -> 71 [label="Control Dep"];
35 -> 90 [label="Control Dep"];
35 -> 78 [label="Control Dep"];
35 -> 89 [label="Control Dep"];
35 -> 80 [label="Control Dep"];
35 -> 86 [label="Control Dep"];
35 -> 87 [label="Control Dep"];
36 -> 37 [label="AST"];
36 -> 38 [label="AST"];
40 -> 41 [label="AST"];
42 -> 40 [label="AST"];
43 -> 44 [label="AST"];
45 -> 39 [label="AST"];
45 -> 42 [label="AST"];
45 -> 36 [label="AST"];
45 -> 43 [label="AST"];
46 -> 45 [label="AST"];
46 -> 48 [label="Control Dep"];
46 -> 47 [label="Control Dep"];
48 -> 47 [label="AST"];
49 -> 46 [label="AST"];
49 -> 48 [label="AST"];
50 -> 51 [label="AST"];
50 -> 97 [label="Define-Use"];
51 -> 97 [label="Define-Use"];
52 -> 53 [label="AST"];
52 -> 54 [label="AST"];
56 -> 57 [label="AST"];
58 -> 56 [label="AST"];
58 -> 50 [label="Data Dep"];
59 -> 60 [label="AST"];
59 -> 50 [label="Data Dep"];
61 -> 55 [label="AST"];
61 -> 58 [label="AST"];
61 -> 52 [label="AST"];
61 -> 59 [label="AST"];
62 -> 50 [label="AST"];
62 -> 61 [label="AST"];
63 -> 49 [label="AST"];
63 -> 62 [label="AST"];
64 -> 65 [label="AST"];
64 -> 66 [label="AST"];
68 -> 69 [label="AST"];
70 -> 68 [label="AST"];
71 -> 72 [label="AST"];
73 -> 67 [label="AST"];
73 -> 70 [label="AST"];
73 -> 64 [label="AST"];
73 -> 71 [label="AST"];
74 -> 73 [label="AST"];
74 -> 76 [label="Control Dep"];
74 -> 75 [label="Control Dep"];
76 -> 75 [label="AST"];
77 -> 74 [label="AST"];
77 -> 76 [label="AST"];
78 -> 79 [label="AST"];
78 -> 97 [label="Define-Use"];
79 -> 97 [label="Define-Use"];
80 -> 81 [label="AST"];
80 -> 82 [label="AST"];
84 -> 85 [label="AST"];
86 -> 84 [label="AST"];
86 -> 78 [label="Data Dep"];
87 -> 88 [label="AST"];
87 -> 78 [label="Data Dep"];
89 -> 83 [label="AST"];
89 -> 86 [label="AST"];
89 -> 80 [label="AST"];
89 -> 87 [label="AST"];
90 -> 78 [label="AST"];
90 -> 89 [label="AST"];
91 -> 77 [label="AST"];
91 -> 90 [label="AST"];
92 -> 35 [label="AST"];
92 -> 63 [label="AST"];
92 -> 91 [label="AST"];
93 -> 94 [label="AST"];
95 -> 103 [label="Define-Use"];
96 -> 95 [label="AST"];
96 -> 93 [label="AST"];
97 -> 98 [label="AST"];
97 -> 108 [label="Control Dep"];
97 -> 107 [label="Control Dep"];
97 -> 99 [label="Control Dep"];
97 -> 103 [label="Control Dep"];
97 -> 105 [label="Control Dep"];
99 -> 100 [label="AST"];
99 -> 101 [label="AST"];
103 -> 104 [label="AST"];
105 -> 106 [label="AST"];
107 -> 102 [label="AST"];
107 -> 103 [label="AST"];
107 -> 99 [label="AST"];
107 -> 105 [label="AST"];
108 -> 107 [label="AST"];
109 -> 96 [label="AST"];
109 -> 97 [label="AST"];
109 -> 108 [label="AST"];
110 -> 10 [label="AST"];
110 -> 27 [label="AST"];
110 -> 92 [label="AST"];
110 -> 109 [label="AST"];
111 -> 1 [label="AST"];
111 -> 0 [label="AST"];
111 -> 2 [label="AST"];
111 -> 4 [label="AST"];
111 -> 110 [label="AST"];
112 -> 115 [label="Action"];
114 -> 113 [label="AST"];
115 -> 114 [label="AST"];
}