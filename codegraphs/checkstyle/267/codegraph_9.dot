digraph "getDetails#?,DetailAST" {
0 [label="2:CtTypeReferenceImpl@Details" shape=ellipse]
1 [label="2:CtPackageReferenceImpl@" shape=ellipse]
2 [label="2:CtVirtualElement@getDetails" shape=ellipse]
3 [label="2:CtParameterImpl@DetailAST ast" shape=ellipse]
4 [label="2:CtTypeReferenceImpl@DetailAST" shape=ellipse]
5 [label="3:CtTypeReferenceImpl@boolean" shape=ellipse]
6 [label="3:CtLiteralImpl@false" shape=ellipse]
7 [label="3:CtTypeReferenceImpl@boolean" shape=ellipse]
8 [label="3:CtVirtualElement@shouldCheckLastRcurly" shape=ellipse]
9 [label="3:CtLocalVariableImpl@boolean shouldCheckLastRcurly = false" shape=ellipse]
10 [label="4:CtTypeReferenceImpl@DetailAST" shape=ellipse]
11 [label="4:CtPackageReferenceImpl@" shape=ellipse]
12 [label="4:CtLiteralImpl@null" shape=ellipse]
13 [label="4:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
14 [label="4:CtVirtualElement@rcurly" shape=ellipse]
15 [label="4:CtLocalVariableImpl@DetailAST rcurly = null" shape=ellipse]
16 [label="5:CtTypeReferenceImpl@DetailAST" shape=ellipse]
17 [label="5:CtPackageReferenceImpl@" shape=ellipse]
18 [label="5:CtLiteralImpl@null" shape=ellipse]
19 [label="5:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
20 [label="5:CtVirtualElement@lcurly" shape=ellipse]
21 [label="5:CtLocalVariableImpl@DetailAST lcurly = null" shape=ellipse]
22 [label="6:CtTypeReferenceImpl@DetailAST" shape=ellipse]
23 [label="6:CtPackageReferenceImpl@" shape=ellipse]
24 [label="6:CtLiteralImpl@null" shape=ellipse]
25 [label="6:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
26 [label="6:CtVirtualElement@nextToken" shape=ellipse]
27 [label="6:CtLocalVariableImpl@DetailAST nextToken = null" shape=ellipse]
28 [label="7:CtExecutableReferenceImpl@getType()" shape=ellipse]
29 [label="7:CtTypeReferenceImpl@DetailAST" shape=ellipse]
30 [label="7:CtVirtualElement@getType" shape=ellipse]
31 [label="7:CtVariableReadImpl@ast" shape=ellipse]
32 [label="7:CtParameterReferenceImpl@ast" shape=ellipse]
33 [label="7:CtInvocationImpl@ast.getType()" shape=ellipse]
34 [label="8:CtFieldReferenceImpl@TokenTypes.LITERAL_TRY" shape=ellipse]
35 [label="8:CtTypeReferenceImpl@TokenTypes" shape=ellipse]
36 [label="8:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
37 [label="8:CtFieldReadImpl@TokenTypes.LITERAL_TRY" shape=ellipse]
38 [label="8:CtTypeAccessImpl@TokenTypes" shape=ellipse]
39 [label="9:CtVariableWriteImpl@lcurly" shape=ellipse]
40 [label="9:CtLocalVariableReferenceImpl@lcurly" shape=ellipse]
41 [label="9:CtExecutableReferenceImpl@getFirstChild()" shape=ellipse]
42 [label="9:CtTypeReferenceImpl@DetailAST" shape=ellipse]
43 [label="9:CtVirtualElement@getFirstChild" shape=ellipse]
44 [label="9:CtVariableReadImpl@ast" shape=ellipse]
45 [label="9:CtParameterReferenceImpl@ast" shape=ellipse]
46 [label="9:CtInvocationImpl@ast.getFirstChild()" shape=ellipse]
47 [label="9:CtAssignmentImpl@lcurly = ast.getFirstChild()" shape=ellipse]
48 [label="10:CtVariableWriteImpl@nextToken" shape=ellipse]
49 [label="10:CtLocalVariableReferenceImpl@nextToken" shape=ellipse]
50 [label="10:CtExecutableReferenceImpl@getNextSibling()" shape=ellipse]
51 [label="10:CtTypeReferenceImpl@DetailAST" shape=ellipse]
52 [label="10:CtVirtualElement@getNextSibling" shape=ellipse]
53 [label="10:CtVariableReadImpl@lcurly" shape=ellipse]
54 [label="10:CtLocalVariableReferenceImpl@lcurly" shape=ellipse]
55 [label="10:CtInvocationImpl@lcurly.getNextSibling()" shape=ellipse]
56 [label="10:CtAssignmentImpl@nextToken = lcurly.getNextSibling()" shape=ellipse]
57 [label="11:CtVariableWriteImpl@rcurly" shape=ellipse]
58 [label="11:CtLocalVariableReferenceImpl@rcurly" shape=ellipse]
59 [label="11:CtExecutableReferenceImpl@getLastChild()" shape=ellipse]
60 [label="11:CtTypeReferenceImpl@DetailAST" shape=ellipse]
61 [label="11:CtVirtualElement@getLastChild" shape=ellipse]
62 [label="11:CtVariableReadImpl@lcurly" shape=ellipse]
63 [label="11:CtLocalVariableReferenceImpl@lcurly" shape=ellipse]
64 [label="11:CtInvocationImpl@lcurly.getLastChild()" shape=ellipse]
65 [label="11:CtAssignmentImpl@rcurly = lcurly.getLastChild()" shape=ellipse]
66 [label="12:CtBreakImpl@break" shape=ellipse]
67 [label="8:CtCaseImpl@case TokenTypes.LITERAL_TRY :
    lcurly = ast.getFirstChild();
    nextToken = lcurly.getNextSibling();
    rcurly = lcurly.getLastChild();
    break;" shape=ellipse]
68 [label="13:CtFieldReferenceImpl@TokenTypes.LITERAL_CATCH" shape=ellipse]
69 [label="13:CtTypeReferenceImpl@TokenTypes" shape=ellipse]
70 [label="13:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
71 [label="13:CtFieldReadImpl@TokenTypes.LITERAL_CATCH" shape=ellipse]
72 [label="13:CtTypeAccessImpl@TokenTypes" shape=ellipse]
73 [label="14:CtVariableWriteImpl@nextToken" shape=ellipse]
74 [label="14:CtLocalVariableReferenceImpl@nextToken" shape=ellipse]
75 [label="14:CtExecutableReferenceImpl@getNextSibling()" shape=ellipse]
76 [label="14:CtTypeReferenceImpl@DetailAST" shape=ellipse]
77 [label="14:CtVirtualElement@getNextSibling" shape=ellipse]
78 [label="14:CtVariableReadImpl@ast" shape=ellipse]
79 [label="14:CtParameterReferenceImpl@ast" shape=ellipse]
80 [label="14:CtInvocationImpl@ast.getNextSibling()" shape=ellipse]
81 [label="14:CtAssignmentImpl@nextToken = ast.getNextSibling()" shape=ellipse]
82 [label="15:CtVariableWriteImpl@lcurly" shape=ellipse]
83 [label="15:CtLocalVariableReferenceImpl@lcurly" shape=ellipse]
84 [label="15:CtExecutableReferenceImpl@getLastChild()" shape=ellipse]
85 [label="15:CtTypeReferenceImpl@DetailAST" shape=ellipse]
86 [label="15:CtVirtualElement@getLastChild" shape=ellipse]
87 [label="15:CtVariableReadImpl@ast" shape=ellipse]
88 [label="15:CtParameterReferenceImpl@ast" shape=ellipse]
89 [label="15:CtInvocationImpl@ast.getLastChild()" shape=ellipse]
90 [label="15:CtAssignmentImpl@lcurly = ast.getLastChild()" shape=ellipse]
91 [label="16:CtVariableWriteImpl@rcurly" shape=ellipse]
92 [label="16:CtLocalVariableReferenceImpl@rcurly" shape=ellipse]
93 [label="16:CtExecutableReferenceImpl@getLastChild()" shape=ellipse]
94 [label="16:CtTypeReferenceImpl@DetailAST" shape=ellipse]
95 [label="16:CtVirtualElement@getLastChild" shape=ellipse]
96 [label="16:CtVariableReadImpl@lcurly" shape=ellipse]
97 [label="16:CtLocalVariableReferenceImpl@lcurly" shape=ellipse]
98 [label="16:CtInvocationImpl@lcurly.getLastChild()" shape=ellipse]
99 [label="16:CtAssignmentImpl@rcurly = lcurly.getLastChild()" shape=ellipse]
100 [label="17:CtVariableReadImpl@nextToken" shape=ellipse]
101 [label="17:CtLocalVariableReferenceImpl@nextToken" shape=ellipse]
102 [label="17:CtLiteralImpl@null" shape=ellipse]
103 [label="17:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
104 [label="17:CtBinaryOperatorImpl@nextToken == null" shape=ellipse]
105 [label="18:CtVariableWriteImpl@shouldCheckLastRcurly" shape=ellipse]
106 [label="18:CtLocalVariableReferenceImpl@shouldCheckLastRcurly" shape=ellipse]
107 [label="18:CtLiteralImpl@true" shape=ellipse]
108 [label="18:CtTypeReferenceImpl@boolean" shape=ellipse]
109 [label="18:CtTypeReferenceImpl@boolean" shape=ellipse]
110 [label="18:CtAssignmentImpl@shouldCheckLastRcurly = true" shape=ellipse]
111 [label="19:CtVariableWriteImpl@nextToken" shape=ellipse]
112 [label="19:CtLocalVariableReferenceImpl@nextToken" shape=ellipse]
113 [label="19:CtExecutableReferenceImpl@getNextToken(<unknown>)" shape=ellipse]
114 [label="19:CtTypeReferenceImpl@null" shape=ellipse]
115 [label="19:CtVirtualElement@getNextToken" shape=ellipse]
116 [label="19:CtTypeAccessImpl@PlaceHold" shape=ellipse]
117 [label="19:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
118 [label="19:CtThisAccessImpl@" shape=ellipse]
119 [label="19:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
120 [label="19:CtVariableReadImpl@ast" shape=ellipse]
121 [label="19:CtParameterReferenceImpl@ast" shape=ellipse]
122 [label="19:CtInvocationImpl@getNextToken(ast)" shape=ellipse]
123 [label="19:CtAssignmentImpl@nextToken = getNextToken(ast)" shape=ellipse]
124 [label="17:CtBlockImpl@\{
    shouldCheckLastRcurly = true;
    nextToken = getNextToken(ast);
\}" shape=ellipse]
125 [label="17:CtIfImpl@if (nextToken == null) \{
    shouldCheckLastRcurly = true;
    nextToken = getNextToken(ast);
\}" shape=ellipse]
126 [label="21:CtBreakImpl@break" shape=ellipse]
127 [label="13:CtCaseImpl@case TokenTypes.LITERAL_CATCH :
    nextToken = ast.getNextSibling();
    lcurly = ast.getLastChild();
    rcurly = lcurly.getLastChild();
    if (nextToken == null) \{
        shouldCheckLastRcurly = true;
        nextToken = getNextToken(ast);
    \}
    break;" shape=ellipse]
128 [label="22:CtFieldReferenceImpl@TokenTypes.LITERAL_IF" shape=ellipse]
129 [label="22:CtTypeReferenceImpl@TokenTypes" shape=ellipse]
130 [label="22:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
131 [label="22:CtFieldReadImpl@TokenTypes.LITERAL_IF" shape=ellipse]
132 [label="22:CtTypeAccessImpl@TokenTypes" shape=ellipse]
133 [label="23:CtVariableWriteImpl@nextToken" shape=ellipse]
134 [label="23:CtLocalVariableReferenceImpl@nextToken" shape=ellipse]
135 [label="23:CtExecutableReferenceImpl@findFirstToken()" shape=ellipse]
136 [label="23:CtTypeReferenceImpl@DetailAST" shape=ellipse]
137 [label="23:CtVirtualElement@findFirstToken" shape=ellipse]
138 [label="23:CtVariableReadImpl@ast" shape=ellipse]
139 [label="23:CtParameterReferenceImpl@ast" shape=ellipse]
140 [label="23:CtTypeAccessImpl@LITERAL_ELSE" shape=ellipse]
141 [label="23:CtTypeReferenceImpl@LITERAL_ELSE" shape=ellipse]
142 [label="23:CtInvocationImpl@ast.findFirstToken(LITERAL_ELSE)" shape=ellipse]
143 [label="23:CtAssignmentImpl@nextToken = ast.findFirstToken(LITERAL_ELSE)" shape=ellipse]
144 [label="24:CtVariableReadImpl@nextToken" shape=ellipse]
145 [label="24:CtLocalVariableReferenceImpl@nextToken" shape=ellipse]
146 [label="24:CtLiteralImpl@null" shape=ellipse]
147 [label="24:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
148 [label="24:CtBinaryOperatorImpl@nextToken != null" shape=ellipse]
149 [label="25:CtVariableWriteImpl@lcurly" shape=ellipse]
150 [label="25:CtLocalVariableReferenceImpl@lcurly" shape=ellipse]
151 [label="25:CtExecutableReferenceImpl@getPreviousSibling()" shape=ellipse]
152 [label="25:CtTypeReferenceImpl@DetailAST" shape=ellipse]
153 [label="25:CtVirtualElement@getPreviousSibling" shape=ellipse]
154 [label="25:CtVariableReadImpl@nextToken" shape=ellipse]
155 [label="25:CtLocalVariableReferenceImpl@nextToken" shape=ellipse]
156 [label="25:CtInvocationImpl@nextToken.getPreviousSibling()" shape=ellipse]
157 [label="25:CtAssignmentImpl@lcurly = nextToken.getPreviousSibling()" shape=ellipse]
158 [label="26:CtVariableWriteImpl@rcurly" shape=ellipse]
159 [label="26:CtLocalVariableReferenceImpl@rcurly" shape=ellipse]
160 [label="26:CtExecutableReferenceImpl@getLastChild()" shape=ellipse]
161 [label="26:CtTypeReferenceImpl@DetailAST" shape=ellipse]
162 [label="26:CtVirtualElement@getLastChild" shape=ellipse]
163 [label="26:CtVariableReadImpl@lcurly" shape=ellipse]
164 [label="26:CtLocalVariableReferenceImpl@lcurly" shape=ellipse]
165 [label="26:CtInvocationImpl@lcurly.getLastChild()" shape=ellipse]
166 [label="26:CtAssignmentImpl@rcurly = lcurly.getLastChild()" shape=ellipse]
167 [label="24:CtBlockImpl@\{
    lcurly = nextToken.getPreviousSibling();
    rcurly = lcurly.getLastChild();
\}" shape=ellipse]
168 [label="28:CtVariableWriteImpl@shouldCheckLastRcurly" shape=ellipse]
169 [label="28:CtLocalVariableReferenceImpl@shouldCheckLastRcurly" shape=ellipse]
170 [label="28:CtLiteralImpl@true" shape=ellipse]
171 [label="28:CtTypeReferenceImpl@boolean" shape=ellipse]
172 [label="28:CtTypeReferenceImpl@boolean" shape=ellipse]
173 [label="28:CtAssignmentImpl@shouldCheckLastRcurly = true" shape=ellipse]
174 [label="29:CtVariableWriteImpl@nextToken" shape=ellipse]
175 [label="29:CtLocalVariableReferenceImpl@nextToken" shape=ellipse]
176 [label="29:CtExecutableReferenceImpl@getNextToken(<unknown>)" shape=ellipse]
177 [label="29:CtTypeReferenceImpl@null" shape=ellipse]
178 [label="29:CtVirtualElement@getNextToken" shape=ellipse]
179 [label="29:CtTypeAccessImpl@PlaceHold" shape=ellipse]
180 [label="29:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
181 [label="29:CtThisAccessImpl@" shape=ellipse]
182 [label="29:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
183 [label="29:CtVariableReadImpl@ast" shape=ellipse]
184 [label="29:CtParameterReferenceImpl@ast" shape=ellipse]
185 [label="29:CtInvocationImpl@getNextToken(ast)" shape=ellipse]
186 [label="29:CtAssignmentImpl@nextToken = getNextToken(ast)" shape=ellipse]
187 [label="30:CtVariableWriteImpl@lcurly" shape=ellipse]
188 [label="30:CtLocalVariableReferenceImpl@lcurly" shape=ellipse]
189 [label="30:CtExecutableReferenceImpl@getLastChild()" shape=ellipse]
190 [label="30:CtTypeReferenceImpl@DetailAST" shape=ellipse]
191 [label="30:CtVirtualElement@getLastChild" shape=ellipse]
192 [label="30:CtVariableReadImpl@ast" shape=ellipse]
193 [label="30:CtParameterReferenceImpl@ast" shape=ellipse]
194 [label="30:CtInvocationImpl@ast.getLastChild()" shape=ellipse]
195 [label="30:CtAssignmentImpl@lcurly = ast.getLastChild()" shape=ellipse]
196 [label="31:CtVariableWriteImpl@rcurly" shape=ellipse]
197 [label="31:CtLocalVariableReferenceImpl@rcurly" shape=ellipse]
198 [label="31:CtExecutableReferenceImpl@getLastChild()" shape=ellipse]
199 [label="31:CtTypeReferenceImpl@DetailAST" shape=ellipse]
200 [label="31:CtVirtualElement@getLastChild" shape=ellipse]
201 [label="31:CtVariableReadImpl@lcurly" shape=ellipse]
202 [label="31:CtLocalVariableReferenceImpl@lcurly" shape=ellipse]
203 [label="31:CtInvocationImpl@lcurly.getLastChild()" shape=ellipse]
204 [label="31:CtAssignmentImpl@rcurly = lcurly.getLastChild()" shape=ellipse]
205 [label="27:CtBlockImpl@\{
    shouldCheckLastRcurly = true;
    nextToken = getNextToken(ast);
    lcurly = ast.getLastChild();
    rcurly = lcurly.getLastChild();
\}" shape=ellipse]
206 [label="24:CtIfImpl@if (nextToken != null) \{
    lcurly = nextToken.getPreviousSibling();
    rcurly = lcurly.getLastChild();
\} else \{
    shouldCheckLastRcurly = true;
    nextToken = getNextToken(ast);
    lcurly = ast.getLastChild();
    rcurly = lcurly.getLastChild();
\}" shape=ellipse]
207 [label="33:CtBreakImpl@break" shape=ellipse]
208 [label="22:CtCaseImpl@case TokenTypes.LITERAL_IF :
    nextToken = ast.findFirstToken(LITERAL_ELSE);
    if (nextToken != null) \{
        lcurly = nextToken.getPreviousSibling();
        rcurly = lcurly.getLastChild();
    \} else \{
        shouldCheckLastRcurly = true;
        nextToken = getNextToken(ast);
        lcurly = ast.getLastChild();
        rcurly = lcurly.getLastChild();
    \}
    break;" shape=ellipse]
209 [label="34:CtFieldReferenceImpl@TokenTypes.LITERAL_ELSE" shape=ellipse]
210 [label="34:CtTypeReferenceImpl@TokenTypes" shape=ellipse]
211 [label="34:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
212 [label="34:CtFieldReadImpl@TokenTypes.LITERAL_ELSE" shape=ellipse]
213 [label="34:CtTypeAccessImpl@TokenTypes" shape=ellipse]
214 [label="34:CtCaseImpl@case TokenTypes.LITERAL_ELSE :" shape=ellipse]
215 [label="35:CtFieldReferenceImpl@TokenTypes.LITERAL_FINALLY" shape=ellipse]
216 [label="35:CtTypeReferenceImpl@TokenTypes" shape=ellipse]
217 [label="35:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
218 [label="35:CtFieldReadImpl@TokenTypes.LITERAL_FINALLY" shape=ellipse]
219 [label="35:CtTypeAccessImpl@TokenTypes" shape=ellipse]
220 [label="36:CtVariableWriteImpl@shouldCheckLastRcurly" shape=ellipse]
221 [label="36:CtLocalVariableReferenceImpl@shouldCheckLastRcurly" shape=ellipse]
222 [label="36:CtLiteralImpl@true" shape=ellipse]
223 [label="36:CtTypeReferenceImpl@boolean" shape=ellipse]
224 [label="36:CtTypeReferenceImpl@boolean" shape=ellipse]
225 [label="36:CtAssignmentImpl@shouldCheckLastRcurly = true" shape=ellipse]
226 [label="37:CtVariableWriteImpl@nextToken" shape=ellipse]
227 [label="37:CtLocalVariableReferenceImpl@nextToken" shape=ellipse]
228 [label="37:CtExecutableReferenceImpl@getNextToken(<unknown>)" shape=ellipse]
229 [label="37:CtTypeReferenceImpl@null" shape=ellipse]
230 [label="37:CtVirtualElement@getNextToken" shape=ellipse]
231 [label="37:CtTypeAccessImpl@PlaceHold" shape=ellipse]
232 [label="37:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
233 [label="37:CtThisAccessImpl@" shape=ellipse]
234 [label="37:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
235 [label="37:CtVariableReadImpl@ast" shape=ellipse]
236 [label="37:CtParameterReferenceImpl@ast" shape=ellipse]
237 [label="37:CtInvocationImpl@getNextToken(ast)" shape=ellipse]
238 [label="37:CtAssignmentImpl@nextToken = getNextToken(ast)" shape=ellipse]
239 [label="38:CtVariableWriteImpl@lcurly" shape=ellipse]
240 [label="38:CtLocalVariableReferenceImpl@lcurly" shape=ellipse]
241 [label="38:CtExecutableReferenceImpl@getFirstChild()" shape=ellipse]
242 [label="38:CtTypeReferenceImpl@DetailAST" shape=ellipse]
243 [label="38:CtVirtualElement@getFirstChild" shape=ellipse]
244 [label="38:CtVariableReadImpl@ast" shape=ellipse]
245 [label="38:CtParameterReferenceImpl@ast" shape=ellipse]
246 [label="38:CtInvocationImpl@ast.getFirstChild()" shape=ellipse]
247 [label="38:CtAssignmentImpl@lcurly = ast.getFirstChild()" shape=ellipse]
248 [label="39:CtVariableWriteImpl@rcurly" shape=ellipse]
249 [label="39:CtLocalVariableReferenceImpl@rcurly" shape=ellipse]
250 [label="39:CtExecutableReferenceImpl@getLastChild()" shape=ellipse]
251 [label="39:CtTypeReferenceImpl@DetailAST" shape=ellipse]
252 [label="39:CtVirtualElement@getLastChild" shape=ellipse]
253 [label="39:CtVariableReadImpl@lcurly" shape=ellipse]
254 [label="39:CtLocalVariableReferenceImpl@lcurly" shape=ellipse]
255 [label="39:CtInvocationImpl@lcurly.getLastChild()" shape=ellipse]
256 [label="39:CtAssignmentImpl@rcurly = lcurly.getLastChild()" shape=ellipse]
257 [label="40:CtBreakImpl@break" shape=ellipse]
258 [label="35:CtCaseImpl@case TokenTypes.LITERAL_FINALLY :
    shouldCheckLastRcurly = true;
    nextToken = getNextToken(ast);
    lcurly = ast.getFirstChild();
    rcurly = lcurly.getLastChild();
    break;" shape=ellipse]
259 [label="41:CtFieldReferenceImpl@TokenTypes.CLASS_DEF" shape=ellipse]
260 [label="41:CtTypeReferenceImpl@TokenTypes" shape=ellipse]
261 [label="41:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
262 [label="41:CtFieldReadImpl@TokenTypes.CLASS_DEF" shape=ellipse]
263 [label="41:CtTypeAccessImpl@TokenTypes" shape=ellipse]
264 [label="42:CtTypeReferenceImpl@DetailAST" shape=ellipse]
265 [label="42:CtPackageReferenceImpl@" shape=ellipse]
266 [label="42:CtExecutableReferenceImpl@getLastChild()" shape=ellipse]
267 [label="42:CtTypeReferenceImpl@DetailAST" shape=ellipse]
268 [label="42:CtTypeReferenceImpl@DetailAST" shape=ellipse]
269 [label="42:CtVirtualElement@getLastChild" shape=ellipse]
270 [label="42:CtVariableReadImpl@ast" shape=ellipse]
271 [label="42:CtParameterReferenceImpl@ast" shape=ellipse]
272 [label="42:CtInvocationImpl@ast.getLastChild()" shape=ellipse]
273 [label="42:CtVirtualElement@child" shape=ellipse]
274 [label="42:CtLocalVariableImpl@final DetailAST child = ast.getLastChild()" shape=ellipse]
275 [label="43:CtVariableWriteImpl@lcurly" shape=ellipse]
276 [label="43:CtLocalVariableReferenceImpl@lcurly" shape=ellipse]
277 [label="43:CtExecutableReferenceImpl@getFirstChild()" shape=ellipse]
278 [label="43:CtTypeReferenceImpl@DetailAST" shape=ellipse]
279 [label="43:CtVirtualElement@getFirstChild" shape=ellipse]
280 [label="43:CtVariableReadImpl@child" shape=ellipse]
281 [label="43:CtLocalVariableReferenceImpl@child" shape=ellipse]
282 [label="43:CtInvocationImpl@child.getFirstChild()" shape=ellipse]
283 [label="43:CtAssignmentImpl@lcurly = child.getFirstChild()" shape=ellipse]
284 [label="44:CtVariableWriteImpl@rcurly" shape=ellipse]
285 [label="44:CtLocalVariableReferenceImpl@rcurly" shape=ellipse]
286 [label="44:CtExecutableReferenceImpl@getLastChild()" shape=ellipse]
287 [label="44:CtTypeReferenceImpl@DetailAST" shape=ellipse]
288 [label="44:CtVirtualElement@getLastChild" shape=ellipse]
289 [label="44:CtVariableReadImpl@child" shape=ellipse]
290 [label="44:CtLocalVariableReferenceImpl@child" shape=ellipse]
291 [label="44:CtInvocationImpl@child.getLastChild()" shape=ellipse]
292 [label="44:CtAssignmentImpl@rcurly = child.getLastChild()" shape=ellipse]
293 [label="45:CtVariableWriteImpl@nextToken" shape=ellipse]
294 [label="45:CtLocalVariableReferenceImpl@nextToken" shape=ellipse]
295 [label="45:CtVariableReadImpl@ast" shape=ellipse]
296 [label="45:CtParameterReferenceImpl@ast" shape=ellipse]
297 [label="45:CtAssignmentImpl@nextToken = ast" shape=ellipse]
298 [label="46:CtBreakImpl@break" shape=ellipse]
299 [label="41:CtCaseImpl@case TokenTypes.CLASS_DEF :
    final DetailAST child = ast.getLastChild();
    lcurly = child.getFirstChild();
    rcurly = child.getLastChild();
    nextToken = ast;
    break;" shape=ellipse]
300 [label="47:CtFieldReferenceImpl@TokenTypes.CTOR_DEF" shape=ellipse]
301 [label="47:CtTypeReferenceImpl@TokenTypes" shape=ellipse]
302 [label="47:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
303 [label="47:CtFieldReadImpl@TokenTypes.CTOR_DEF" shape=ellipse]
304 [label="47:CtTypeAccessImpl@TokenTypes" shape=ellipse]
305 [label="47:CtCaseImpl@case TokenTypes.CTOR_DEF :" shape=ellipse]
306 [label="48:CtFieldReferenceImpl@TokenTypes.STATIC_INIT" shape=ellipse]
307 [label="48:CtTypeReferenceImpl@TokenTypes" shape=ellipse]
308 [label="48:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
309 [label="48:CtFieldReadImpl@TokenTypes.STATIC_INIT" shape=ellipse]
310 [label="48:CtTypeAccessImpl@TokenTypes" shape=ellipse]
311 [label="48:CtCaseImpl@case TokenTypes.STATIC_INIT :" shape=ellipse]
312 [label="49:CtFieldReferenceImpl@TokenTypes.INSTANCE_INIT" shape=ellipse]
313 [label="49:CtTypeReferenceImpl@TokenTypes" shape=ellipse]
314 [label="49:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
315 [label="49:CtFieldReadImpl@TokenTypes.INSTANCE_INIT" shape=ellipse]
316 [label="49:CtTypeAccessImpl@TokenTypes" shape=ellipse]
317 [label="50:CtVariableWriteImpl@lcurly" shape=ellipse]
318 [label="50:CtLocalVariableReferenceImpl@lcurly" shape=ellipse]
319 [label="50:CtExecutableReferenceImpl@findFirstToken()" shape=ellipse]
320 [label="50:CtTypeReferenceImpl@DetailAST" shape=ellipse]
321 [label="50:CtVirtualElement@findFirstToken" shape=ellipse]
322 [label="50:CtVariableReadImpl@ast" shape=ellipse]
323 [label="50:CtParameterReferenceImpl@ast" shape=ellipse]
324 [label="50:CtTypeAccessImpl@SLIST" shape=ellipse]
325 [label="50:CtTypeReferenceImpl@SLIST" shape=ellipse]
326 [label="50:CtInvocationImpl@ast.findFirstToken(SLIST)" shape=ellipse]
327 [label="50:CtAssignmentImpl@lcurly = ast.findFirstToken(SLIST)" shape=ellipse]
328 [label="51:CtVariableWriteImpl@rcurly" shape=ellipse]
329 [label="51:CtLocalVariableReferenceImpl@rcurly" shape=ellipse]
330 [label="51:CtExecutableReferenceImpl@getLastChild()" shape=ellipse]
331 [label="51:CtTypeReferenceImpl@DetailAST" shape=ellipse]
332 [label="51:CtVirtualElement@getLastChild" shape=ellipse]
333 [label="51:CtVariableReadImpl@lcurly" shape=ellipse]
334 [label="51:CtLocalVariableReferenceImpl@lcurly" shape=ellipse]
335 [label="51:CtInvocationImpl@lcurly.getLastChild()" shape=ellipse]
336 [label="51:CtAssignmentImpl@rcurly = lcurly.getLastChild()" shape=ellipse]
337 [label="52:CtVariableWriteImpl@nextToken" shape=ellipse]
338 [label="52:CtLocalVariableReferenceImpl@nextToken" shape=ellipse]
339 [label="52:CtVariableReadImpl@ast" shape=ellipse]
340 [label="52:CtParameterReferenceImpl@ast" shape=ellipse]
341 [label="52:CtAssignmentImpl@nextToken = ast" shape=ellipse]
342 [label="53:CtBreakImpl@break" shape=ellipse]
343 [label="49:CtCaseImpl@case TokenTypes.INSTANCE_INIT :
    lcurly = ast.findFirstToken(SLIST);
    rcurly = lcurly.getLastChild();
    nextToken = ast;
    break;" shape=ellipse]
344 [label="54:CtFieldReferenceImpl@TokenTypes.METHOD_DEF" shape=ellipse]
345 [label="54:CtTypeReferenceImpl@TokenTypes" shape=ellipse]
346 [label="54:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
347 [label="54:CtFieldReadImpl@TokenTypes.METHOD_DEF" shape=ellipse]
348 [label="54:CtTypeAccessImpl@TokenTypes" shape=ellipse]
349 [label="54:CtCaseImpl@case TokenTypes.METHOD_DEF :" shape=ellipse]
350 [label="55:CtFieldReferenceImpl@TokenTypes.LITERAL_FOR" shape=ellipse]
351 [label="55:CtTypeReferenceImpl@TokenTypes" shape=ellipse]
352 [label="55:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
353 [label="55:CtFieldReadImpl@TokenTypes.LITERAL_FOR" shape=ellipse]
354 [label="55:CtTypeAccessImpl@TokenTypes" shape=ellipse]
355 [label="55:CtCaseImpl@case TokenTypes.LITERAL_FOR :" shape=ellipse]
356 [label="56:CtFieldReferenceImpl@TokenTypes.LITERAL_WHILE" shape=ellipse]
357 [label="56:CtTypeReferenceImpl@TokenTypes" shape=ellipse]
358 [label="56:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
359 [label="56:CtFieldReadImpl@TokenTypes.LITERAL_WHILE" shape=ellipse]
360 [label="56:CtTypeAccessImpl@TokenTypes" shape=ellipse]
361 [label="56:CtCaseImpl@case TokenTypes.LITERAL_WHILE :" shape=ellipse]
362 [label="57:CtFieldReferenceImpl@TokenTypes.LITERAL_DO" shape=ellipse]
363 [label="57:CtTypeReferenceImpl@TokenTypes" shape=ellipse]
364 [label="57:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
365 [label="57:CtFieldReadImpl@TokenTypes.LITERAL_DO" shape=ellipse]
366 [label="57:CtTypeAccessImpl@TokenTypes" shape=ellipse]
367 [label="58:CtVariableWriteImpl@lcurly" shape=ellipse]
368 [label="58:CtLocalVariableReferenceImpl@lcurly" shape=ellipse]
369 [label="58:CtExecutableReferenceImpl@findFirstToken()" shape=ellipse]
370 [label="58:CtTypeReferenceImpl@DetailAST" shape=ellipse]
371 [label="58:CtVirtualElement@findFirstToken" shape=ellipse]
372 [label="58:CtVariableReadImpl@ast" shape=ellipse]
373 [label="58:CtParameterReferenceImpl@ast" shape=ellipse]
374 [label="58:CtTypeAccessImpl@SLIST" shape=ellipse]
375 [label="58:CtTypeReferenceImpl@SLIST" shape=ellipse]
376 [label="58:CtInvocationImpl@ast.findFirstToken(SLIST)" shape=ellipse]
377 [label="58:CtAssignmentImpl@lcurly = ast.findFirstToken(SLIST)" shape=ellipse]
378 [label="59:CtVariableReadImpl@lcurly" shape=ellipse]
379 [label="59:CtLocalVariableReferenceImpl@lcurly" shape=ellipse]
380 [label="59:CtLiteralImpl@null" shape=ellipse]
381 [label="59:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
382 [label="59:CtBinaryOperatorImpl@lcurly != null" shape=ellipse]
383 [label="60:CtVariableWriteImpl@rcurly" shape=ellipse]
384 [label="60:CtLocalVariableReferenceImpl@rcurly" shape=ellipse]
385 [label="60:CtExecutableReferenceImpl@getLastChild()" shape=ellipse]
386 [label="60:CtTypeReferenceImpl@DetailAST" shape=ellipse]
387 [label="60:CtVirtualElement@getLastChild" shape=ellipse]
388 [label="60:CtVariableReadImpl@lcurly" shape=ellipse]
389 [label="60:CtLocalVariableReferenceImpl@lcurly" shape=ellipse]
390 [label="60:CtInvocationImpl@lcurly.getLastChild()" shape=ellipse]
391 [label="60:CtAssignmentImpl@rcurly = lcurly.getLastChild()" shape=ellipse]
392 [label="59:CtBlockImpl@\{
    rcurly = lcurly.getLastChild();
\}" shape=ellipse]
393 [label="59:CtIfImpl@if (lcurly != null) \{
    rcurly = lcurly.getLastChild();
\}" shape=ellipse]
394 [label="62:CtVariableWriteImpl@nextToken" shape=ellipse]
395 [label="62:CtLocalVariableReferenceImpl@nextToken" shape=ellipse]
396 [label="62:CtVariableReadImpl@ast" shape=ellipse]
397 [label="62:CtParameterReferenceImpl@ast" shape=ellipse]
398 [label="62:CtAssignmentImpl@nextToken = ast" shape=ellipse]
399 [label="63:CtBreakImpl@break" shape=ellipse]
400 [label="57:CtCaseImpl@case TokenTypes.LITERAL_DO :
    lcurly = ast.findFirstToken(SLIST);
    if (lcurly != null) \{
        rcurly = lcurly.getLastChild();
    \}
    nextToken = ast;
    break;" shape=ellipse]
401 [label="65:CtExecutableReferenceImpl@java.lang.RuntimeException(java.lang.String)" shape=ellipse]
402 [label="65:CtTypeReferenceImpl@RuntimeException" shape=ellipse]
403 [label="65:CtTypeReferenceImpl@RuntimeException" shape=ellipse]
404 [label="65:CtTypeReferenceImpl@String" shape=ellipse]
405 [label="66:CtLiteralImpl@\"Unexpected token type (\"" shape=ellipse]
406 [label="66:CtTypeReferenceImpl@String" shape=ellipse]
407 [label="66:CtExecutableReferenceImpl@getTokenName()" shape=ellipse]
408 [label="66:CtTypeReferenceImpl@TokenTypes" shape=ellipse]
409 [label="66:CtVirtualElement@getTokenName" shape=ellipse]
410 [label="66:CtTypeAccessImpl@TokenTypes" shape=ellipse]
411 [label="66:CtTypeReferenceImpl@TokenTypes" shape=ellipse]
412 [label="66:CtExecutableReferenceImpl@getType()" shape=ellipse]
413 [label="66:CtTypeReferenceImpl@DetailAST" shape=ellipse]
414 [label="66:CtVirtualElement@getType" shape=ellipse]
415 [label="66:CtVariableReadImpl@ast" shape=ellipse]
416 [label="66:CtParameterReferenceImpl@ast" shape=ellipse]
417 [label="66:CtInvocationImpl@ast.getType()" shape=ellipse]
418 [label="66:CtInvocationImpl@TokenTypes.getTokenName(ast.getType())" shape=ellipse]
419 [label="66:CtBinaryOperatorImpl@(\"Unexpected token type (\" + TokenTypes.getTokenName(ast.getType()))" shape=ellipse]
420 [label="66:CtLiteralImpl@\")\"" shape=ellipse]
421 [label="66:CtTypeReferenceImpl@String" shape=ellipse]
422 [label="66:CtBinaryOperatorImpl@(\"Unexpected token type (\" + TokenTypes.getTokenName(ast.getType())) + \")\"" shape=ellipse]
423 [label="65:CtConstructorCallImpl@new RuntimeException((\"Unexpected token type (\" + TokenTypes.getTokenName(ast.getType())) + \")\")" shape=ellipse]
424 [label="65:CtThrowImpl@throw new RuntimeException((\"Unexpected token type (\" + TokenTypes.getTokenName(ast.getType())) + \")\")" shape=ellipse]
425 [label="64:CtCaseImpl@default :
    throw new RuntimeException((\"Unexpected token type (\" + TokenTypes.getTokenName(ast.getType())) + \")\");" shape=ellipse]
426 [label="7:CtSwitchImpl@switch (ast.getType()) \{
    case TokenTypes.LITERAL_TRY :
        lcurly = ast.getFirstChild();
        nextToken = lcurly.getNextSibling();
        rcurly = lcurly.getLastChild();
        break;
    case TokenTypes.LITERAL_CATCH :
        nextToken = ast.getNextSibling();
        lcurly = ast.getLastChild();
        rcurly = lcurly.getLastChild();
        if (nextToken == null) \{
            shouldCheckLastRcurly = true;
            nextToken = getNextToken(ast);
        \}
        break;
    case TokenTypes.LITERAL_IF :
        nextToken = ast.findFirstToken(LITERAL_ELSE);
        if (nextToken != null) \{
            lcurly = nextToken.getPreviousSibling();
            rcurly = lcurly.getLastChild();
        \} else \{
            shouldCheckLastRcurly = true;
            nextToken = getNextToken(ast);
            lcurly = ast.getLastChild();
            rcurly = lcurly.getLastChild();
        \}
        break;
    case TokenTypes.LITERAL_ELSE :
    case TokenTypes.LITERAL_FINALLY :
        shouldCheckLastRcurly = true;
        nextToken = getNextToken(ast);
        lcurly = ast.getFirstChild();
        rcurly = lcurly.getLastChild();
        break;
    case TokenTypes.CLASS_DEF :
        final DetailAST child = ast.getLastChild();
        lcurly = child.getFirstChild();
        rcurly = child.getLastChild();
        nextToken = ast;
        break;
    case TokenTypes.CTOR_DEF :
    case TokenTypes.STATIC_INIT :
    case TokenTypes.INSTANCE_INIT :
        lcurly = ast.findFirstToken(SLIST);
        rcurly = lcurly.getLastChild();
        nextToken = ast;
        break;
    case TokenTypes.METHOD_DEF :
    case TokenTypes.LITERAL_FOR :
    case TokenTypes.LITERAL_WHILE :
    case TokenTypes.LITERAL_DO :
        lcurly = ast.findFirstToken(SLIST);
        if (lcurly != null) \{
            rcurly = lcurly.getLastChild();
        \}
        nextToken = ast;
        break;
    default :
        throw new RuntimeException((\"Unexpected token type (\" + TokenTypes.getTokenName(ast.getType())) + \")\");
\}" shape=ellipse]
427 [label="68:CtTypeReferenceImpl@Details" shape=ellipse]
428 [label="68:CtPackageReferenceImpl@" shape=ellipse]
429 [label="68:CtExecutableReferenceImpl@Details()" shape=ellipse]
430 [label="68:CtTypeReferenceImpl@Details" shape=ellipse]
431 [label="68:CtTypeReferenceImpl@Details" shape=ellipse]
432 [label="68:CtConstructorCallImpl@new Details()" shape=ellipse]
433 [label="68:CtVirtualElement@details" shape=ellipse]
434 [label="68:CtLocalVariableImpl@final Details details = new Details()" shape=ellipse]
435 [label="69:CtFieldReferenceImpl@rcurly" shape=ellipse]
436 [label="69:CtFieldWriteImpl@details.rcurly" shape=ellipse]
437 [label="69:CtVariableWriteImpl@details" shape=ellipse]
438 [label="69:CtVariableReadImpl@rcurly" shape=ellipse]
439 [label="69:CtLocalVariableReferenceImpl@rcurly" shape=ellipse]
440 [label="69:CtAssignmentImpl@details.rcurly = rcurly" shape=ellipse]
441 [label="70:CtFieldReferenceImpl@lcurly" shape=ellipse]
442 [label="70:CtFieldWriteImpl@details.lcurly" shape=ellipse]
443 [label="70:CtVariableWriteImpl@details" shape=ellipse]
444 [label="70:CtVariableReadImpl@lcurly" shape=ellipse]
445 [label="70:CtLocalVariableReferenceImpl@lcurly" shape=ellipse]
446 [label="70:CtAssignmentImpl@details.lcurly = lcurly" shape=ellipse]
447 [label="71:CtFieldReferenceImpl@nextToken" shape=ellipse]
448 [label="71:CtFieldWriteImpl@details.nextToken" shape=ellipse]
449 [label="71:CtVariableWriteImpl@details" shape=ellipse]
450 [label="71:CtVariableReadImpl@nextToken" shape=ellipse]
451 [label="71:CtLocalVariableReferenceImpl@nextToken" shape=ellipse]
452 [label="71:CtAssignmentImpl@details.nextToken = nextToken" shape=ellipse]
453 [label="72:CtFieldReferenceImpl@shouldCheckLastRcurly" shape=ellipse]
454 [label="72:CtFieldWriteImpl@details.shouldCheckLastRcurly" shape=ellipse]
455 [label="72:CtVariableWriteImpl@details" shape=ellipse]
456 [label="72:CtVariableReadImpl@shouldCheckLastRcurly" shape=ellipse]
457 [label="72:CtLocalVariableReferenceImpl@shouldCheckLastRcurly" shape=ellipse]
458 [label="72:CtAssignmentImpl@details.shouldCheckLastRcurly = shouldCheckLastRcurly" shape=ellipse]
459 [label="73:CtVariableReadImpl@details" shape=ellipse]
460 [label="73:CtLocalVariableReferenceImpl@details" shape=ellipse]
461 [label="73:CtReturnImpl@return details" shape=ellipse]
462 [label="2:CtBlockImpl@\{
    boolean shouldCheckLastRcurly = false;
    DetailAST rcurly = null;
    DetailAST lcurly = null;
    DetailAST nextToken = null;
    switch (ast.getType()) \{
        case TokenTypes.LITERAL_TRY :
            lcurly = ast.getFirstChild();
            nextToken = lcurly.getNextSibling();
            rcurly = lcurly.getLastChild();
            break;
        case TokenTypes.LITERAL_CATCH :
            nextToken = ast.getNextSibling();
            lcurly = ast.getLastChild();
            rcurly = lcurly.getLastChild();
            if (nextToken == null) \{
                shouldCheckLastRcurly = true;
                nextToken = getNextToken(ast);
            \}
            break;
        case TokenTypes.LITERAL_IF :
            nextToken = ast.findFirstToken(LITERAL_ELSE);
            if (nextToken != null) \{
                lcurly = nextToken.getPreviousSibling();
                rcurly = lcurly.getLastChild();
            \} else \{
                shouldCheckLastRcurly = true;
                nextToken = getNextToken(ast);
                lcurly = ast.getLastChild();
                rcurly = lcurly.getLastChild();
            \}
            break;
        case TokenTypes.LITERAL_ELSE :
        case TokenTypes.LITERAL_FINALLY :
            shouldCheckLastRcurly = true;
            nextToken = getNextToken(ast);
            lcurly = ast.getFirstChild();
            rcurly = lcurly.getLastChild();
            break;
        case TokenTypes.CLASS_DEF :
            final DetailAST child = ast.getLastChild();
            lcurly = child.getFirstChild();
            rcurly = child.getLastChild();
            nextToken = ast;
            break;
        case TokenTypes.CTOR_DEF :
        case TokenTypes.STATIC_INIT :
        case TokenTypes.INSTANCE_INIT :
            lcurly = ast.findFirstToken(SLIST);
            rcurly = lcurly.getLastChild();
            nextToken = ast;
            break;
        case TokenTypes.METHOD_DEF :
        case TokenTypes.LITERAL_FOR :
        case TokenTypes.LITERAL_WHILE :
        case TokenTypes.LITERAL_DO :
            lcurly = ast.findFirstToken(SLIST);
            if (lcurly != null) \{
                rcurly = lcurly.getLastChild();
            \}
            nextToken = ast;
            break;
        default :
            throw new RuntimeException((\"Unexpected token type (\" + TokenTypes.getTokenName(ast.getType())) + \")\");
    \}
    final Details details = new Details();
    details.rcurly = rcurly;
    details.lcurly = lcurly;
    details.nextToken = nextToken;
    details.shouldCheckLastRcurly = shouldCheckLastRcurly;
    return details;
\}" shape=ellipse]
463 [label="2:CtMethodImpl@private Details getDetails(DetailAST ast) \{
    boolean shouldCheckLastRcurly = false;
    DetailAST rcurly = null;
    DetailAST lcurly = null;
    DetailAST nextToken = null;
    switch (ast.getType()) \{
        case TokenTypes.LITERAL_TRY :
            lcurly = ast.getFirstChild();
            nextToken = lcurly.getNextSibling();
            rcurly = lcurly.getLastChild();
            break;
        case TokenTypes.LITERAL_CATCH :
            nextToken = ast.getNextSibling();
            lcurly = ast.getLastChild();
            rcurly = lcurly.getLastChild();
            if (nextToken == null) \{
                shouldCheckLastRcurly = true;
                nextToken = getNextToken(ast);
            \}
            break;
        case TokenTypes.LITERAL_IF :
            nextToken = ast.findFirstToken(LITERAL_ELSE);
            if (nextToken != null) \{
                lcurly = nextToken.getPreviousSibling();
                rcurly = lcurly.getLastChild();
            \} else \{
                shouldCheckLastRcurly = true;
                nextToken = getNextToken(ast);
                lcurly = ast.getLastChild();
                rcurly = lcurly.getLastChild();
            \}
            break;
        case TokenTypes.LITERAL_ELSE :
        case TokenTypes.LITERAL_FINALLY :
            shouldCheckLastRcurly = true;
            nextToken = getNextToken(ast);
            lcurly = ast.getFirstChild();
            rcurly = lcurly.getLastChild();
            break;
        case TokenTypes.CLASS_DEF :
            final DetailAST child = ast.getLastChild();
            lcurly = child.getFirstChild();
            rcurly = child.getLastChild();
            nextToken = ast;
            break;
        case TokenTypes.CTOR_DEF :
        case TokenTypes.STATIC_INIT :
        case TokenTypes.INSTANCE_INIT :
            lcurly = ast.findFirstToken(SLIST);
            rcurly = lcurly.getLastChild();
            nextToken = ast;
            break;
        case TokenTypes.METHOD_DEF :
        case TokenTypes.LITERAL_FOR :
        case TokenTypes.LITERAL_WHILE :
        case TokenTypes.LITERAL_DO :
            lcurly = ast.findFirstToken(SLIST);
            if (lcurly != null) \{
                rcurly = lcurly.getLastChild();
            \}
            nextToken = ast;
            break;
        default :
            throw new RuntimeException((\"Unexpected token type (\" + TokenTypes.getTokenName(ast.getType())) + \")\");
    \}
    final Details details = new Details();
    details.rcurly = rcurly;
    details.lcurly = lcurly;
    details.nextToken = nextToken;
    details.shouldCheckLastRcurly = shouldCheckLastRcurly;
    return details;
\}" shape=ellipse]
464 [label="66:Update@UPDATE" shape=ellipse]
465 [label="66:CtPackageReferenceImpl@" shape=ellipse]
466 [label="66:CtTypeReferenceImpl@Utils" shape=ellipse]
467 [label="66:CtTypeAccessImpl@Utils" shape=ellipse]
0 -> 1 [label="AST"];
3 -> 4 [label="AST"];
6 -> 7 [label="AST"];
9 -> 8 [label="AST"];
9 -> 5 [label="AST"];
9 -> 6 [label="AST"];
10 -> 11 [label="AST"];
12 -> 13 [label="AST"];
15 -> 14 [label="AST"];
15 -> 10 [label="AST"];
15 -> 12 [label="AST"];
16 -> 17 [label="AST"];
18 -> 19 [label="AST"];
20 -> 53 [label="Define-Use"];
20 -> 62 [label="Define-Use"];
20 -> 96 [label="Define-Use"];
20 -> 163 [label="Define-Use"];
20 -> 201 [label="Define-Use"];
20 -> 253 [label="Define-Use"];
20 -> 333 [label="Define-Use"];
20 -> 378 [label="Define-Use"];
20 -> 388 [label="Define-Use"];
21 -> 20 [label="AST"];
21 -> 16 [label="AST"];
21 -> 18 [label="AST"];
22 -> 23 [label="AST"];
24 -> 25 [label="AST"];
26 -> 100 [label="Define-Use"];
26 -> 144 [label="Define-Use"];
26 -> 154 [label="Define-Use"];
27 -> 26 [label="AST"];
27 -> 22 [label="AST"];
27 -> 24 [label="AST"];
28 -> 29 [label="AST"];
31 -> 32 [label="AST"];
33 -> 30 [label="AST"];
33 -> 31 [label="AST"];
33 -> 28 [label="AST"];
33 -> 67 [label="Control Dep"];
33 -> 37 [label="Control Dep"];
33 -> 47 [label="Control Dep"];
33 -> 39 [label="Control Dep"];
33 -> 46 [label="Control Dep"];
33 -> 41 [label="Control Dep"];
33 -> 44 [label="Control Dep"];
33 -> 56 [label="Control Dep"];
33 -> 48 [label="Control Dep"];
33 -> 55 [label="Control Dep"];
33 -> 50 [label="Control Dep"];
33 -> 53 [label="Control Dep"];
33 -> 65 [label="Control Dep"];
33 -> 57 [label="Control Dep"];
33 -> 64 [label="Control Dep"];
33 -> 59 [label="Control Dep"];
33 -> 62 [label="Control Dep"];
33 -> 66 [label="Control Dep"];
33 -> 127 [label="Control Dep"];
33 -> 71 [label="Control Dep"];
33 -> 81 [label="Control Dep"];
33 -> 73 [label="Control Dep"];
33 -> 80 [label="Control Dep"];
33 -> 75 [label="Control Dep"];
33 -> 78 [label="Control Dep"];
33 -> 90 [label="Control Dep"];
33 -> 82 [label="Control Dep"];
33 -> 89 [label="Control Dep"];
33 -> 84 [label="Control Dep"];
33 -> 87 [label="Control Dep"];
33 -> 99 [label="Control Dep"];
33 -> 91 [label="Control Dep"];
33 -> 98 [label="Control Dep"];
33 -> 93 [label="Control Dep"];
33 -> 96 [label="Control Dep"];
33 -> 125 [label="Control Dep"];
33 -> 104 [label="Control Dep"];
33 -> 100 [label="Control Dep"];
33 -> 102 [label="Control Dep"];
33 -> 126 [label="Control Dep"];
33 -> 208 [label="Control Dep"];
33 -> 131 [label="Control Dep"];
33 -> 143 [label="Control Dep"];
33 -> 133 [label="Control Dep"];
33 -> 142 [label="Control Dep"];
33 -> 135 [label="Control Dep"];
33 -> 138 [label="Control Dep"];
33 -> 140 [label="Control Dep"];
33 -> 206 [label="Control Dep"];
33 -> 148 [label="Control Dep"];
33 -> 144 [label="Control Dep"];
33 -> 146 [label="Control Dep"];
33 -> 207 [label="Control Dep"];
33 -> 214 [label="Control Dep"];
33 -> 212 [label="Control Dep"];
33 -> 258 [label="Control Dep"];
33 -> 218 [label="Control Dep"];
33 -> 225 [label="Control Dep"];
33 -> 220 [label="Control Dep"];
33 -> 222 [label="Control Dep"];
33 -> 238 [label="Control Dep"];
33 -> 226 [label="Control Dep"];
33 -> 237 [label="Control Dep"];
33 -> 228 [label="Control Dep"];
33 -> 233 [label="Control Dep"];
33 -> 231 [label="Control Dep"];
33 -> 235 [label="Control Dep"];
33 -> 247 [label="Control Dep"];
33 -> 239 [label="Control Dep"];
33 -> 246 [label="Control Dep"];
33 -> 241 [label="Control Dep"];
33 -> 244 [label="Control Dep"];
33 -> 256 [label="Control Dep"];
33 -> 248 [label="Control Dep"];
33 -> 255 [label="Control Dep"];
33 -> 250 [label="Control Dep"];
33 -> 253 [label="Control Dep"];
33 -> 257 [label="Control Dep"];
33 -> 299 [label="Control Dep"];
33 -> 262 [label="Control Dep"];
33 -> 274 [label="Control Dep"];
33 -> 272 [label="Control Dep"];
33 -> 266 [label="Control Dep"];
33 -> 270 [label="Control Dep"];
33 -> 283 [label="Control Dep"];
33 -> 275 [label="Control Dep"];
33 -> 282 [label="Control Dep"];
33 -> 277 [label="Control Dep"];
33 -> 280 [label="Control Dep"];
33 -> 292 [label="Control Dep"];
33 -> 284 [label="Control Dep"];
33 -> 291 [label="Control Dep"];
33 -> 286 [label="Control Dep"];
33 -> 289 [label="Control Dep"];
33 -> 297 [label="Control Dep"];
33 -> 293 [label="Control Dep"];
33 -> 295 [label="Control Dep"];
33 -> 298 [label="Control Dep"];
33 -> 305 [label="Control Dep"];
33 -> 303 [label="Control Dep"];
33 -> 311 [label="Control Dep"];
33 -> 309 [label="Control Dep"];
33 -> 343 [label="Control Dep"];
33 -> 315 [label="Control Dep"];
33 -> 327 [label="Control Dep"];
33 -> 317 [label="Control Dep"];
33 -> 326 [label="Control Dep"];
33 -> 319 [label="Control Dep"];
33 -> 322 [label="Control Dep"];
33 -> 324 [label="Control Dep"];
33 -> 336 [label="Control Dep"];
33 -> 328 [label="Control Dep"];
33 -> 335 [label="Control Dep"];
33 -> 330 [label="Control Dep"];
33 -> 333 [label="Control Dep"];
33 -> 341 [label="Control Dep"];
33 -> 337 [label="Control Dep"];
33 -> 339 [label="Control Dep"];
33 -> 342 [label="Control Dep"];
33 -> 349 [label="Control Dep"];
33 -> 347 [label="Control Dep"];
33 -> 355 [label="Control Dep"];
33 -> 353 [label="Control Dep"];
33 -> 361 [label="Control Dep"];
33 -> 359 [label="Control Dep"];
33 -> 400 [label="Control Dep"];
33 -> 365 [label="Control Dep"];
33 -> 377 [label="Control Dep"];
33 -> 367 [label="Control Dep"];
33 -> 376 [label="Control Dep"];
33 -> 369 [label="Control Dep"];
33 -> 372 [label="Control Dep"];
33 -> 374 [label="Control Dep"];
33 -> 393 [label="Control Dep"];
33 -> 382 [label="Control Dep"];
33 -> 378 [label="Control Dep"];
33 -> 380 [label="Control Dep"];
33 -> 398 [label="Control Dep"];
33 -> 394 [label="Control Dep"];
33 -> 396 [label="Control Dep"];
33 -> 399 [label="Control Dep"];
33 -> 425 [label="Control Dep"];
33 -> 424 [label="Control Dep"];
33 -> 423 [label="Control Dep"];
33 -> 401 [label="Control Dep"];
33 -> 422 [label="Control Dep"];
33 -> 419 [label="Control Dep"];
33 -> 405 [label="Control Dep"];
33 -> 418 [label="Control Dep"];
33 -> 407 [label="Control Dep"];
33 -> 410 [label="Control Dep"];
33 -> 417 [label="Control Dep"];
33 -> 412 [label="Control Dep"];
33 -> 415 [label="Control Dep"];
33 -> 420 [label="Control Dep"];
33 -> 467 [label="Control Dep"];
34 -> 35 [label="AST"];
34 -> 36 [label="AST"];
37 -> 38 [label="AST"];
37 -> 34 [label="AST"];
39 -> 40 [label="AST"];
39 -> 53 [label="Define-Use"];
39 -> 62 [label="Define-Use"];
39 -> 96 [label="Define-Use"];
39 -> 163 [label="Define-Use"];
39 -> 201 [label="Define-Use"];
39 -> 253 [label="Define-Use"];
39 -> 333 [label="Define-Use"];
39 -> 378 [label="Define-Use"];
39 -> 388 [label="Define-Use"];
40 -> 53 [label="Define-Use"];
40 -> 62 [label="Define-Use"];
40 -> 96 [label="Define-Use"];
40 -> 163 [label="Define-Use"];
40 -> 201 [label="Define-Use"];
40 -> 253 [label="Define-Use"];
40 -> 333 [label="Define-Use"];
40 -> 378 [label="Define-Use"];
40 -> 388 [label="Define-Use"];
41 -> 42 [label="AST"];
44 -> 45 [label="AST"];
44 -> 39 [label="Data Dep"];
46 -> 43 [label="AST"];
46 -> 44 [label="AST"];
46 -> 41 [label="AST"];
47 -> 39 [label="AST"];
47 -> 46 [label="AST"];
48 -> 49 [label="AST"];
48 -> 100 [label="Define-Use"];
48 -> 144 [label="Define-Use"];
48 -> 154 [label="Define-Use"];
49 -> 100 [label="Define-Use"];
49 -> 144 [label="Define-Use"];
49 -> 154 [label="Define-Use"];
50 -> 51 [label="AST"];
53 -> 54 [label="AST"];
53 -> 48 [label="Data Dep"];
55 -> 52 [label="AST"];
55 -> 53 [label="AST"];
55 -> 50 [label="AST"];
56 -> 48 [label="AST"];
56 -> 55 [label="AST"];
57 -> 58 [label="AST"];
59 -> 60 [label="AST"];
62 -> 63 [label="AST"];
62 -> 57 [label="Data Dep"];
64 -> 61 [label="AST"];
64 -> 62 [label="AST"];
64 -> 59 [label="AST"];
65 -> 57 [label="AST"];
65 -> 64 [label="AST"];
67 -> 37 [label="AST"];
67 -> 47 [label="AST"];
67 -> 56 [label="AST"];
67 -> 65 [label="AST"];
67 -> 66 [label="AST"];
68 -> 69 [label="AST"];
68 -> 70 [label="AST"];
71 -> 72 [label="AST"];
71 -> 68 [label="AST"];
73 -> 74 [label="AST"];
73 -> 100 [label="Define-Use"];
73 -> 144 [label="Define-Use"];
73 -> 154 [label="Define-Use"];
74 -> 100 [label="Define-Use"];
74 -> 144 [label="Define-Use"];
74 -> 154 [label="Define-Use"];
75 -> 76 [label="AST"];
78 -> 79 [label="AST"];
78 -> 73 [label="Data Dep"];
80 -> 77 [label="AST"];
80 -> 78 [label="AST"];
80 -> 75 [label="AST"];
81 -> 73 [label="AST"];
81 -> 80 [label="AST"];
82 -> 83 [label="AST"];
82 -> 96 [label="Define-Use"];
82 -> 163 [label="Define-Use"];
82 -> 201 [label="Define-Use"];
82 -> 253 [label="Define-Use"];
82 -> 333 [label="Define-Use"];
82 -> 378 [label="Define-Use"];
82 -> 388 [label="Define-Use"];
83 -> 96 [label="Define-Use"];
83 -> 163 [label="Define-Use"];
83 -> 201 [label="Define-Use"];
83 -> 253 [label="Define-Use"];
83 -> 333 [label="Define-Use"];
83 -> 378 [label="Define-Use"];
83 -> 388 [label="Define-Use"];
84 -> 85 [label="AST"];
87 -> 88 [label="AST"];
87 -> 82 [label="Data Dep"];
89 -> 86 [label="AST"];
89 -> 87 [label="AST"];
89 -> 84 [label="AST"];
90 -> 82 [label="AST"];
90 -> 89 [label="AST"];
91 -> 92 [label="AST"];
93 -> 94 [label="AST"];
96 -> 97 [label="AST"];
96 -> 91 [label="Data Dep"];
98 -> 95 [label="AST"];
98 -> 96 [label="AST"];
98 -> 93 [label="AST"];
99 -> 91 [label="AST"];
99 -> 98 [label="AST"];
100 -> 101 [label="AST"];
102 -> 103 [label="AST"];
104 -> 100 [label="AST"];
104 -> 102 [label="AST"];
104 -> 124 [label="Control Dep"];
104 -> 110 [label="Control Dep"];
104 -> 105 [label="Control Dep"];
104 -> 107 [label="Control Dep"];
104 -> 123 [label="Control Dep"];
104 -> 111 [label="Control Dep"];
104 -> 122 [label="Control Dep"];
104 -> 113 [label="Control Dep"];
104 -> 118 [label="Control Dep"];
104 -> 116 [label="Control Dep"];
104 -> 120 [label="Control Dep"];
105 -> 106 [label="AST"];
107 -> 108 [label="AST"];
110 -> 109 [label="AST"];
110 -> 105 [label="AST"];
110 -> 107 [label="AST"];
111 -> 112 [label="AST"];
111 -> 144 [label="Define-Use"];
111 -> 154 [label="Define-Use"];
112 -> 144 [label="Define-Use"];
112 -> 154 [label="Define-Use"];
113 -> 114 [label="AST"];
116 -> 117 [label="AST"];
118 -> 119 [label="AST"];
118 -> 116 [label="AST"];
118 -> 111 [label="Data Dep"];
120 -> 121 [label="AST"];
120 -> 111 [label="Data Dep"];
122 -> 115 [label="AST"];
122 -> 118 [label="AST"];
122 -> 113 [label="AST"];
122 -> 120 [label="AST"];
123 -> 111 [label="AST"];
123 -> 122 [label="AST"];
124 -> 110 [label="AST"];
124 -> 123 [label="AST"];
125 -> 104 [label="AST"];
125 -> 124 [label="AST"];
127 -> 71 [label="AST"];
127 -> 81 [label="AST"];
127 -> 90 [label="AST"];
127 -> 99 [label="AST"];
127 -> 125 [label="AST"];
127 -> 126 [label="AST"];
128 -> 129 [label="AST"];
128 -> 130 [label="AST"];
131 -> 132 [label="AST"];
131 -> 128 [label="AST"];
133 -> 134 [label="AST"];
133 -> 144 [label="Define-Use"];
133 -> 154 [label="Define-Use"];
134 -> 144 [label="Define-Use"];
134 -> 154 [label="Define-Use"];
135 -> 136 [label="AST"];
138 -> 139 [label="AST"];
138 -> 133 [label="Data Dep"];
140 -> 141 [label="AST"];
142 -> 137 [label="AST"];
142 -> 138 [label="AST"];
142 -> 135 [label="AST"];
142 -> 140 [label="AST"];
143 -> 133 [label="AST"];
143 -> 142 [label="AST"];
144 -> 145 [label="AST"];
146 -> 147 [label="AST"];
148 -> 144 [label="AST"];
148 -> 146 [label="AST"];
148 -> 167 [label="Control Dep"];
148 -> 157 [label="Control Dep"];
148 -> 149 [label="Control Dep"];
148 -> 156 [label="Control Dep"];
148 -> 151 [label="Control Dep"];
148 -> 154 [label="Control Dep"];
148 -> 166 [label="Control Dep"];
148 -> 158 [label="Control Dep"];
148 -> 165 [label="Control Dep"];
148 -> 160 [label="Control Dep"];
148 -> 163 [label="Control Dep"];
148 -> 205 [label="Control Dep"];
148 -> 173 [label="Control Dep"];
148 -> 168 [label="Control Dep"];
148 -> 170 [label="Control Dep"];
148 -> 186 [label="Control Dep"];
148 -> 174 [label="Control Dep"];
148 -> 185 [label="Control Dep"];
148 -> 176 [label="Control Dep"];
148 -> 181 [label="Control Dep"];
148 -> 179 [label="Control Dep"];
148 -> 183 [label="Control Dep"];
148 -> 195 [label="Control Dep"];
148 -> 187 [label="Control Dep"];
148 -> 194 [label="Control Dep"];
148 -> 189 [label="Control Dep"];
148 -> 192 [label="Control Dep"];
148 -> 204 [label="Control Dep"];
148 -> 196 [label="Control Dep"];
148 -> 203 [label="Control Dep"];
148 -> 198 [label="Control Dep"];
148 -> 201 [label="Control Dep"];
149 -> 150 [label="AST"];
149 -> 163 [label="Define-Use"];
149 -> 201 [label="Define-Use"];
149 -> 253 [label="Define-Use"];
149 -> 333 [label="Define-Use"];
149 -> 378 [label="Define-Use"];
149 -> 388 [label="Define-Use"];
150 -> 163 [label="Define-Use"];
150 -> 201 [label="Define-Use"];
150 -> 253 [label="Define-Use"];
150 -> 333 [label="Define-Use"];
150 -> 378 [label="Define-Use"];
150 -> 388 [label="Define-Use"];
151 -> 152 [label="AST"];
154 -> 155 [label="AST"];
154 -> 149 [label="Data Dep"];
156 -> 153 [label="AST"];
156 -> 154 [label="AST"];
156 -> 151 [label="AST"];
157 -> 149 [label="AST"];
157 -> 156 [label="AST"];
158 -> 159 [label="AST"];
160 -> 161 [label="AST"];
163 -> 164 [label="AST"];
163 -> 158 [label="Data Dep"];
165 -> 162 [label="AST"];
165 -> 163 [label="AST"];
165 -> 160 [label="AST"];
166 -> 158 [label="AST"];
166 -> 165 [label="AST"];
167 -> 157 [label="AST"];
167 -> 166 [label="AST"];
168 -> 169 [label="AST"];
170 -> 171 [label="AST"];
173 -> 172 [label="AST"];
173 -> 168 [label="AST"];
173 -> 170 [label="AST"];
174 -> 175 [label="AST"];
176 -> 177 [label="AST"];
179 -> 180 [label="AST"];
181 -> 182 [label="AST"];
181 -> 179 [label="AST"];
181 -> 174 [label="Data Dep"];
183 -> 184 [label="AST"];
183 -> 174 [label="Data Dep"];
185 -> 178 [label="AST"];
185 -> 181 [label="AST"];
185 -> 176 [label="AST"];
185 -> 183 [label="AST"];
186 -> 174 [label="AST"];
186 -> 185 [label="AST"];
187 -> 188 [label="AST"];
187 -> 201 [label="Define-Use"];
187 -> 253 [label="Define-Use"];
187 -> 333 [label="Define-Use"];
187 -> 378 [label="Define-Use"];
187 -> 388 [label="Define-Use"];
188 -> 201 [label="Define-Use"];
188 -> 253 [label="Define-Use"];
188 -> 333 [label="Define-Use"];
188 -> 378 [label="Define-Use"];
188 -> 388 [label="Define-Use"];
189 -> 190 [label="AST"];
192 -> 193 [label="AST"];
192 -> 187 [label="Data Dep"];
194 -> 191 [label="AST"];
194 -> 192 [label="AST"];
194 -> 189 [label="AST"];
195 -> 187 [label="AST"];
195 -> 194 [label="AST"];
196 -> 197 [label="AST"];
198 -> 199 [label="AST"];
201 -> 202 [label="AST"];
201 -> 196 [label="Data Dep"];
203 -> 200 [label="AST"];
203 -> 201 [label="AST"];
203 -> 198 [label="AST"];
204 -> 196 [label="AST"];
204 -> 203 [label="AST"];
205 -> 173 [label="AST"];
205 -> 186 [label="AST"];
205 -> 195 [label="AST"];
205 -> 204 [label="AST"];
206 -> 148 [label="AST"];
206 -> 167 [label="AST"];
206 -> 205 [label="AST"];
208 -> 131 [label="AST"];
208 -> 143 [label="AST"];
208 -> 206 [label="AST"];
208 -> 207 [label="AST"];
209 -> 210 [label="AST"];
209 -> 211 [label="AST"];
212 -> 213 [label="AST"];
212 -> 209 [label="AST"];
214 -> 212 [label="AST"];
215 -> 216 [label="AST"];
215 -> 217 [label="AST"];
218 -> 219 [label="AST"];
218 -> 215 [label="AST"];
220 -> 221 [label="AST"];
222 -> 223 [label="AST"];
225 -> 224 [label="AST"];
225 -> 220 [label="AST"];
225 -> 222 [label="AST"];
226 -> 227 [label="AST"];
228 -> 229 [label="AST"];
231 -> 232 [label="AST"];
233 -> 234 [label="AST"];
233 -> 231 [label="AST"];
233 -> 226 [label="Data Dep"];
235 -> 236 [label="AST"];
235 -> 226 [label="Data Dep"];
237 -> 230 [label="AST"];
237 -> 233 [label="AST"];
237 -> 228 [label="AST"];
237 -> 235 [label="AST"];
238 -> 226 [label="AST"];
238 -> 237 [label="AST"];
239 -> 240 [label="AST"];
239 -> 253 [label="Define-Use"];
239 -> 333 [label="Define-Use"];
239 -> 378 [label="Define-Use"];
239 -> 388 [label="Define-Use"];
240 -> 253 [label="Define-Use"];
240 -> 333 [label="Define-Use"];
240 -> 378 [label="Define-Use"];
240 -> 388 [label="Define-Use"];
241 -> 242 [label="AST"];
244 -> 245 [label="AST"];
244 -> 239 [label="Data Dep"];
246 -> 243 [label="AST"];
246 -> 244 [label="AST"];
246 -> 241 [label="AST"];
247 -> 239 [label="AST"];
247 -> 246 [label="AST"];
248 -> 249 [label="AST"];
250 -> 251 [label="AST"];
253 -> 254 [label="AST"];
253 -> 248 [label="Data Dep"];
255 -> 252 [label="AST"];
255 -> 253 [label="AST"];
255 -> 250 [label="AST"];
256 -> 248 [label="AST"];
256 -> 255 [label="AST"];
258 -> 218 [label="AST"];
258 -> 225 [label="AST"];
258 -> 238 [label="AST"];
258 -> 247 [label="AST"];
258 -> 256 [label="AST"];
258 -> 257 [label="AST"];
259 -> 260 [label="AST"];
259 -> 261 [label="AST"];
262 -> 263 [label="AST"];
262 -> 259 [label="AST"];
264 -> 265 [label="AST"];
266 -> 267 [label="AST"];
266 -> 268 [label="AST"];
270 -> 271 [label="AST"];
270 -> 273 [label="Data Dep"];
272 -> 269 [label="AST"];
272 -> 270 [label="AST"];
272 -> 266 [label="AST"];
273 -> 280 [label="Define-Use"];
273 -> 289 [label="Define-Use"];
274 -> 273 [label="AST"];
274 -> 264 [label="AST"];
274 -> 272 [label="AST"];
275 -> 276 [label="AST"];
275 -> 333 [label="Define-Use"];
275 -> 378 [label="Define-Use"];
275 -> 388 [label="Define-Use"];
276 -> 333 [label="Define-Use"];
276 -> 378 [label="Define-Use"];
276 -> 388 [label="Define-Use"];
277 -> 278 [label="AST"];
280 -> 281 [label="AST"];
280 -> 275 [label="Data Dep"];
282 -> 279 [label="AST"];
282 -> 280 [label="AST"];
282 -> 277 [label="AST"];
283 -> 275 [label="AST"];
283 -> 282 [label="AST"];
284 -> 285 [label="AST"];
286 -> 287 [label="AST"];
289 -> 290 [label="AST"];
289 -> 284 [label="Data Dep"];
291 -> 288 [label="AST"];
291 -> 289 [label="AST"];
291 -> 286 [label="AST"];
292 -> 284 [label="AST"];
292 -> 291 [label="AST"];
293 -> 294 [label="AST"];
295 -> 296 [label="AST"];
295 -> 293 [label="Data Dep"];
297 -> 293 [label="AST"];
297 -> 295 [label="AST"];
299 -> 262 [label="AST"];
299 -> 274 [label="AST"];
299 -> 283 [label="AST"];
299 -> 292 [label="AST"];
299 -> 297 [label="AST"];
299 -> 298 [label="AST"];
300 -> 301 [label="AST"];
300 -> 302 [label="AST"];
303 -> 304 [label="AST"];
303 -> 300 [label="AST"];
305 -> 303 [label="AST"];
306 -> 307 [label="AST"];
306 -> 308 [label="AST"];
309 -> 310 [label="AST"];
309 -> 306 [label="AST"];
311 -> 309 [label="AST"];
312 -> 313 [label="AST"];
312 -> 314 [label="AST"];
315 -> 316 [label="AST"];
315 -> 312 [label="AST"];
317 -> 318 [label="AST"];
317 -> 333 [label="Define-Use"];
317 -> 378 [label="Define-Use"];
317 -> 388 [label="Define-Use"];
318 -> 333 [label="Define-Use"];
318 -> 378 [label="Define-Use"];
318 -> 388 [label="Define-Use"];
319 -> 320 [label="AST"];
322 -> 323 [label="AST"];
322 -> 317 [label="Data Dep"];
324 -> 325 [label="AST"];
326 -> 321 [label="AST"];
326 -> 322 [label="AST"];
326 -> 319 [label="AST"];
326 -> 324 [label="AST"];
327 -> 317 [label="AST"];
327 -> 326 [label="AST"];
328 -> 329 [label="AST"];
330 -> 331 [label="AST"];
333 -> 334 [label="AST"];
333 -> 328 [label="Data Dep"];
335 -> 332 [label="AST"];
335 -> 333 [label="AST"];
335 -> 330 [label="AST"];
336 -> 328 [label="AST"];
336 -> 335 [label="AST"];
337 -> 338 [label="AST"];
339 -> 340 [label="AST"];
339 -> 337 [label="Data Dep"];
341 -> 337 [label="AST"];
341 -> 339 [label="AST"];
343 -> 315 [label="AST"];
343 -> 327 [label="AST"];
343 -> 336 [label="AST"];
343 -> 341 [label="AST"];
343 -> 342 [label="AST"];
344 -> 345 [label="AST"];
344 -> 346 [label="AST"];
347 -> 348 [label="AST"];
347 -> 344 [label="AST"];
349 -> 347 [label="AST"];
350 -> 351 [label="AST"];
350 -> 352 [label="AST"];
353 -> 354 [label="AST"];
353 -> 350 [label="AST"];
355 -> 353 [label="AST"];
356 -> 357 [label="AST"];
356 -> 358 [label="AST"];
359 -> 360 [label="AST"];
359 -> 356 [label="AST"];
361 -> 359 [label="AST"];
362 -> 363 [label="AST"];
362 -> 364 [label="AST"];
365 -> 366 [label="AST"];
365 -> 362 [label="AST"];
367 -> 368 [label="AST"];
367 -> 378 [label="Define-Use"];
367 -> 388 [label="Define-Use"];
368 -> 378 [label="Define-Use"];
368 -> 388 [label="Define-Use"];
369 -> 370 [label="AST"];
372 -> 373 [label="AST"];
372 -> 367 [label="Data Dep"];
374 -> 375 [label="AST"];
376 -> 371 [label="AST"];
376 -> 372 [label="AST"];
376 -> 369 [label="AST"];
376 -> 374 [label="AST"];
377 -> 367 [label="AST"];
377 -> 376 [label="AST"];
378 -> 379 [label="AST"];
380 -> 381 [label="AST"];
382 -> 378 [label="AST"];
382 -> 380 [label="AST"];
382 -> 392 [label="Control Dep"];
382 -> 391 [label="Control Dep"];
382 -> 383 [label="Control Dep"];
382 -> 390 [label="Control Dep"];
382 -> 385 [label="Control Dep"];
382 -> 388 [label="Control Dep"];
383 -> 384 [label="AST"];
385 -> 386 [label="AST"];
388 -> 389 [label="AST"];
388 -> 383 [label="Data Dep"];
390 -> 387 [label="AST"];
390 -> 388 [label="AST"];
390 -> 385 [label="AST"];
391 -> 383 [label="AST"];
391 -> 390 [label="AST"];
392 -> 391 [label="AST"];
393 -> 382 [label="AST"];
393 -> 392 [label="AST"];
394 -> 395 [label="AST"];
396 -> 397 [label="AST"];
396 -> 394 [label="Data Dep"];
398 -> 394 [label="AST"];
398 -> 396 [label="AST"];
400 -> 365 [label="AST"];
400 -> 377 [label="AST"];
400 -> 393 [label="AST"];
400 -> 398 [label="AST"];
400 -> 399 [label="AST"];
401 -> 402 [label="AST"];
401 -> 403 [label="AST"];
401 -> 404 [label="AST"];
405 -> 406 [label="AST"];
407 -> 408 [label="AST"];
410 -> 411 [label="AST"];
410 -> 464 [label="Action"];
412 -> 413 [label="AST"];
415 -> 416 [label="AST"];
417 -> 414 [label="AST"];
417 -> 415 [label="AST"];
417 -> 412 [label="AST"];
418 -> 409 [label="AST"];
418 -> 410 [label="AST"];
418 -> 407 [label="AST"];
418 -> 417 [label="AST"];
419 -> 405 [label="AST"];
419 -> 418 [label="AST"];
420 -> 421 [label="AST"];
422 -> 419 [label="AST"];
422 -> 420 [label="AST"];
423 -> 401 [label="AST"];
423 -> 422 [label="AST"];
424 -> 423 [label="AST"];
425 -> 424 [label="AST"];
426 -> 33 [label="AST"];
426 -> 67 [label="AST"];
426 -> 127 [label="AST"];
426 -> 208 [label="AST"];
426 -> 214 [label="AST"];
426 -> 258 [label="AST"];
426 -> 299 [label="AST"];
426 -> 305 [label="AST"];
426 -> 311 [label="AST"];
426 -> 343 [label="AST"];
426 -> 349 [label="AST"];
426 -> 355 [label="AST"];
426 -> 361 [label="AST"];
426 -> 400 [label="AST"];
426 -> 425 [label="AST"];
427 -> 428 [label="AST"];
429 -> 430 [label="AST"];
429 -> 431 [label="AST"];
432 -> 429 [label="AST"];
433 -> 459 [label="Define-Use"];
434 -> 433 [label="AST"];
434 -> 427 [label="AST"];
434 -> 432 [label="AST"];
435 -> 438 [label="Define-Use"];
436 -> 437 [label="AST"];
436 -> 435 [label="AST"];
438 -> 439 [label="AST"];
438 -> 436 [label="Data Dep"];
440 -> 436 [label="AST"];
440 -> 438 [label="AST"];
441 -> 444 [label="Define-Use"];
442 -> 443 [label="AST"];
442 -> 441 [label="AST"];
444 -> 445 [label="AST"];
444 -> 442 [label="Data Dep"];
446 -> 442 [label="AST"];
446 -> 444 [label="AST"];
447 -> 450 [label="Define-Use"];
448 -> 449 [label="AST"];
448 -> 447 [label="AST"];
450 -> 451 [label="AST"];
450 -> 448 [label="Data Dep"];
452 -> 448 [label="AST"];
452 -> 450 [label="AST"];
453 -> 456 [label="Define-Use"];
454 -> 455 [label="AST"];
454 -> 453 [label="AST"];
456 -> 457 [label="AST"];
456 -> 454 [label="Data Dep"];
458 -> 454 [label="AST"];
458 -> 456 [label="AST"];
459 -> 460 [label="AST"];
461 -> 459 [label="AST"];
462 -> 9 [label="AST"];
462 -> 15 [label="AST"];
462 -> 21 [label="AST"];
462 -> 27 [label="AST"];
462 -> 426 [label="AST"];
462 -> 434 [label="AST"];
462 -> 440 [label="AST"];
462 -> 446 [label="AST"];
462 -> 452 [label="AST"];
462 -> 458 [label="AST"];
462 -> 461 [label="AST"];
463 -> 2 [label="AST"];
463 -> 0 [label="AST"];
463 -> 3 [label="AST"];
463 -> 462 [label="AST"];
464 -> 467 [label="Action"];
466 -> 465 [label="AST"];
467 -> 466 [label="AST"];
}