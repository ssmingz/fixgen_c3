digraph "visitToken#?,DetailAST" {
0 [label="3:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="3:CtVirtualElement@visitToken" shape=ellipse]
2 [label="3:CtParameterImpl@DetailAST ast" shape=ellipse]
3 [label="3:CtTypeReferenceImpl@DetailAST" shape=ellipse]
4 [label="4:CtExecutableReferenceImpl@isInContext(<unknown>,<unknown>)" shape=ellipse]
5 [label="4:CtTypeReferenceImpl@boolean" shape=ellipse]
6 [label="4:CtTypeReferenceImpl@null" shape=ellipse]
7 [label="4:CtTypeReferenceImpl@null" shape=ellipse]
8 [label="4:CtVirtualElement@isInContext" shape=ellipse]
9 [label="4:CtTypeAccessImpl@PlaceHold" shape=ellipse]
10 [label="4:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
11 [label="4:CtThisAccessImpl@" shape=ellipse]
12 [label="4:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
13 [label="4:CtVariableReadImpl@ast" shape=ellipse]
14 [label="4:CtParameterReferenceImpl@ast" shape=ellipse]
15 [label="4:CtTypeAccessImpl@ALLOWED_ASSIGMENT_CONTEXT" shape=ellipse]
16 [label="4:CtTypeReferenceImpl@ALLOWED_ASSIGMENT_CONTEXT" shape=ellipse]
17 [label="4:CtInvocationImpl@isInContext(ast, ALLOWED_ASSIGMENT_CONTEXT)" shape=ellipse]
18 [label="5:CtReturnImpl@return" shape=ellipse]
19 [label="4:CtBlockImpl@\{
    return;
\}" shape=ellipse]
20 [label="4:CtIfImpl@if (isInContext(ast, ALLOWED_ASSIGMENT_CONTEXT)) \{
    return;
\}" shape=ellipse]
21 [label="7:CtExecutableReferenceImpl@isInNoBraceControlStatement(<unknown>)" shape=ellipse]
22 [label="7:CtTypeReferenceImpl@boolean" shape=ellipse]
23 [label="7:CtTypeReferenceImpl@null" shape=ellipse]
24 [label="7:CtVirtualElement@isInNoBraceControlStatement" shape=ellipse]
25 [label="7:CtTypeAccessImpl@PlaceHold" shape=ellipse]
26 [label="7:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
27 [label="7:CtThisAccessImpl@" shape=ellipse]
28 [label="7:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
29 [label="7:CtVariableReadImpl@ast" shape=ellipse]
30 [label="7:CtParameterReferenceImpl@ast" shape=ellipse]
31 [label="7:CtInvocationImpl@isInNoBraceControlStatement(ast)" shape=ellipse]
32 [label="8:CtReturnImpl@return" shape=ellipse]
33 [label="7:CtBlockImpl@\{
    return;
\}" shape=ellipse]
34 [label="7:CtIfImpl@if (isInNoBraceControlStatement(ast)) \{
    return;
\}" shape=ellipse]
35 [label="10:CtExecutableReferenceImpl@isInWhileIdiom(<unknown>)" shape=ellipse]
36 [label="10:CtTypeReferenceImpl@boolean" shape=ellipse]
37 [label="10:CtTypeReferenceImpl@null" shape=ellipse]
38 [label="10:CtVirtualElement@isInWhileIdiom" shape=ellipse]
39 [label="10:CtTypeAccessImpl@PlaceHold" shape=ellipse]
40 [label="10:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
41 [label="10:CtThisAccessImpl@" shape=ellipse]
42 [label="10:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
43 [label="10:CtVariableReadImpl@ast" shape=ellipse]
44 [label="10:CtParameterReferenceImpl@ast" shape=ellipse]
45 [label="10:CtInvocationImpl@isInWhileIdiom(ast)" shape=ellipse]
46 [label="11:CtReturnImpl@return" shape=ellipse]
47 [label="10:CtBlockImpl@\{
    return;
\}" shape=ellipse]
48 [label="10:CtIfImpl@if (isInWhileIdiom(ast)) \{
    return;
\}" shape=ellipse]
49 [label="13:CtExecutableReferenceImpl@log(<unknown>,<unknown>,java.lang.String)" shape=ellipse]
50 [label="13:CtTypeReferenceImpl@null" shape=ellipse]
51 [label="13:CtTypeReferenceImpl@null" shape=ellipse]
52 [label="13:CtTypeReferenceImpl@String" shape=ellipse]
53 [label="13:CtVirtualElement@log" shape=ellipse]
54 [label="13:CtTypeAccessImpl@PlaceHold" shape=ellipse]
55 [label="13:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
56 [label="13:CtThisAccessImpl@" shape=ellipse]
57 [label="13:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
58 [label="13:CtExecutableReferenceImpl@getLineNo()" shape=ellipse]
59 [label="13:CtTypeReferenceImpl@DetailAST" shape=ellipse]
60 [label="13:CtVirtualElement@getLineNo" shape=ellipse]
61 [label="13:CtVariableReadImpl@ast" shape=ellipse]
62 [label="13:CtParameterReferenceImpl@ast" shape=ellipse]
63 [label="13:CtInvocationImpl@ast.getLineNo()" shape=ellipse]
64 [label="13:CtExecutableReferenceImpl@getColumnNo()" shape=ellipse]
65 [label="13:CtTypeReferenceImpl@DetailAST" shape=ellipse]
66 [label="13:CtVirtualElement@getColumnNo" shape=ellipse]
67 [label="13:CtVariableReadImpl@ast" shape=ellipse]
68 [label="13:CtParameterReferenceImpl@ast" shape=ellipse]
69 [label="13:CtInvocationImpl@ast.getColumnNo()" shape=ellipse]
70 [label="13:CtLiteralImpl@\"assignment.inner.avoid\"" shape=ellipse]
71 [label="13:CtTypeReferenceImpl@String" shape=ellipse]
72 [label="13:CtInvocationImpl@log(ast.getLineNo(), ast.getColumnNo(), \"assignment.inner.avoid\")" shape=ellipse]
73 [label="3:CtBlockImpl@\{
    if (isInContext(ast, ALLOWED_ASSIGMENT_CONTEXT)) \{
        return;
    \}
    if (isInNoBraceControlStatement(ast)) \{
        return;
    \}
    if (isInWhileIdiom(ast)) \{
        return;
    \}
    log(ast.getLineNo(), ast.getColumnNo(), \"assignment.inner.avoid\");
\}" shape=ellipse]
74 [label="3:CtMethodImpl@@Override
public void visitToken(DetailAST ast) \{
    if (isInContext(ast, ALLOWED_ASSIGMENT_CONTEXT)) \{
        return;
    \}
    if (isInNoBraceControlStatement(ast)) \{
        return;
    \}
    if (isInWhileIdiom(ast)) \{
        return;
    \}
    log(ast.getLineNo(), ast.getColumnNo(), \"assignment.inner.avoid\");
\}" shape=ellipse]
75 [label="2:CtAnnotationImpl@@Override" shape=ellipse]
76 [label="13:Delete@DELETE" shape=ellipse]
77 [label="13:Insert@INSERT" shape=ellipse]
78 [label="13:CtPackageReferenceImpl@" shape=ellipse]
79 [label="13:CtTypeReferenceImpl@MSG_KEY" shape=ellipse]
80 [label="13:CtTypeAccessImpl@MSG_KEY" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
4 -> 6 [label="AST"];
4 -> 7 [label="AST"];
9 -> 10 [label="AST"];
11 -> 12 [label="AST"];
11 -> 9 [label="AST"];
13 -> 14 [label="AST"];
15 -> 16 [label="AST"];
17 -> 8 [label="AST"];
17 -> 11 [label="AST"];
17 -> 4 [label="AST"];
17 -> 13 [label="AST"];
17 -> 15 [label="AST"];
17 -> 19 [label="Control Dep"];
17 -> 18 [label="Control Dep"];
19 -> 18 [label="AST"];
20 -> 17 [label="AST"];
20 -> 19 [label="AST"];
21 -> 22 [label="AST"];
21 -> 23 [label="AST"];
25 -> 26 [label="AST"];
27 -> 28 [label="AST"];
27 -> 25 [label="AST"];
29 -> 30 [label="AST"];
31 -> 24 [label="AST"];
31 -> 27 [label="AST"];
31 -> 21 [label="AST"];
31 -> 29 [label="AST"];
31 -> 33 [label="Control Dep"];
31 -> 32 [label="Control Dep"];
33 -> 32 [label="AST"];
34 -> 31 [label="AST"];
34 -> 33 [label="AST"];
35 -> 36 [label="AST"];
35 -> 37 [label="AST"];
39 -> 40 [label="AST"];
41 -> 42 [label="AST"];
41 -> 39 [label="AST"];
43 -> 44 [label="AST"];
45 -> 38 [label="AST"];
45 -> 41 [label="AST"];
45 -> 35 [label="AST"];
45 -> 43 [label="AST"];
45 -> 47 [label="Control Dep"];
45 -> 46 [label="Control Dep"];
47 -> 46 [label="AST"];
48 -> 45 [label="AST"];
48 -> 47 [label="AST"];
49 -> 50 [label="AST"];
49 -> 51 [label="AST"];
49 -> 52 [label="AST"];
54 -> 55 [label="AST"];
56 -> 57 [label="AST"];
56 -> 54 [label="AST"];
58 -> 59 [label="AST"];
61 -> 62 [label="AST"];
63 -> 60 [label="AST"];
63 -> 61 [label="AST"];
63 -> 58 [label="AST"];
64 -> 65 [label="AST"];
67 -> 68 [label="AST"];
69 -> 66 [label="AST"];
69 -> 67 [label="AST"];
69 -> 64 [label="AST"];
70 -> 71 [label="AST"];
70 -> 76 [label="Action"];
72 -> 53 [label="AST"];
72 -> 56 [label="AST"];
72 -> 49 [label="AST"];
72 -> 63 [label="AST"];
72 -> 69 [label="AST"];
72 -> 70 [label="AST"];
72 -> 77 [label="Action"];
73 -> 20 [label="AST"];
73 -> 34 [label="AST"];
73 -> 48 [label="AST"];
73 -> 72 [label="AST"];
74 -> 1 [label="AST"];
74 -> 75 [label="AST"];
74 -> 0 [label="AST"];
74 -> 2 [label="AST"];
74 -> 73 [label="AST"];
77 -> 80 [label="Action"];
79 -> 78 [label="AST"];
80 -> 79 [label="AST"];
}