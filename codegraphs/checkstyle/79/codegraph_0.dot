digraph "fooMethod#?" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@fooMethod" shape=ellipse]
2 [label="3:CtTypeReferenceImpl@int" shape=ellipse]
3 [label="3:CtLiteralImpl@1" shape=ellipse]
4 [label="3:CtTypeReferenceImpl@int" shape=ellipse]
5 [label="3:CtVirtualElement@a" shape=ellipse]
6 [label="3:CtLocalVariableImpl@int a = 1" shape=ellipse]
7 [label="4:CtVariableReadImpl@a" shape=ellipse]
8 [label="4:CtLocalVariableReferenceImpl@a" shape=ellipse]
9 [label="4:CtLiteralImpl@1" shape=ellipse]
10 [label="4:CtTypeReferenceImpl@int" shape=ellipse]
11 [label="4:CtBinaryOperatorImpl@a == 1" shape=ellipse]
12 [label="4:CtTypeReferenceImpl@boolean" shape=ellipse]
13 [label="4:CtBlockImpl@\{
\}" shape=ellipse]
14 [label="4:CtIfImpl@if (a == 1) \{
\}" shape=ellipse]
15 [label="5:CtVirtualElement@char[]" shape=ellipse]
16 [label="5:CtArrayTypeReferenceImpl@char[]" shape=ellipse]
17 [label="5:CtTypeReferenceImpl@char" shape=ellipse]
18 [label="5:CtNewArrayImpl@new char[]\{ '1', '2' \}" shape=ellipse]
19 [label="5:CtArrayTypeReferenceImpl@char[]" shape=ellipse]
20 [label="5:CtLiteralImpl@'1'" shape=ellipse]
21 [label="5:CtLiteralImpl@'2'" shape=ellipse]
22 [label="5:CtVirtualElement@s" shape=ellipse]
23 [label="5:CtLocalVariableImpl@char[] s = new char[]\{ '1', '2' \}" shape=ellipse]
24 [label="6:CtTypeReferenceImpl@int" shape=ellipse]
25 [label="6:CtLiteralImpl@2" shape=ellipse]
26 [label="6:CtTypeReferenceImpl@int" shape=ellipse]
27 [label="6:CtVirtualElement@index" shape=ellipse]
28 [label="6:CtLocalVariableImpl@int index = 2" shape=ellipse]
29 [label="7:CtExecutableReferenceImpl@doSideEffect()" shape=ellipse]
30 [label="7:CtVirtualElement@doSideEffect" shape=ellipse]
31 [label="7:CtTypeAccessImpl@PlaceHold" shape=ellipse]
32 [label="7:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
33 [label="7:CtThisAccessImpl@" shape=ellipse]
34 [label="7:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
35 [label="7:CtInvocationImpl@doSideEffect()" shape=ellipse]
36 [label="7:CtLiteralImpl@1" shape=ellipse]
37 [label="7:CtTypeReferenceImpl@int" shape=ellipse]
38 [label="7:CtBinaryOperatorImpl@doSideEffect() == 1" shape=ellipse]
39 [label="7:CtBlockImpl@\{
\}" shape=ellipse]
40 [label="7:CtIfImpl@if (doSideEffect() == 1) \{
\}" shape=ellipse]
41 [label="8:CtVariableWriteImpl@a" shape=ellipse]
42 [label="8:CtLocalVariableReferenceImpl@a" shape=ellipse]
43 [label="8:CtVariableReadImpl@index" shape=ellipse]
44 [label="8:CtLocalVariableReferenceImpl@index" shape=ellipse]
45 [label="8:CtLiteralImpl@1" shape=ellipse]
46 [label="8:CtTypeReferenceImpl@int" shape=ellipse]
47 [label="8:CtBinaryOperatorImpl@index - 1" shape=ellipse]
48 [label="8:CtTypeReferenceImpl@int" shape=ellipse]
49 [label="8:CtTypeReferenceImpl@int" shape=ellipse]
50 [label="8:CtAssignmentImpl@(a = index - 1)" shape=ellipse]
51 [label="8:CtLiteralImpl@0" shape=ellipse]
52 [label="8:CtTypeReferenceImpl@int" shape=ellipse]
53 [label="8:CtBinaryOperatorImpl@(a = index - 1) != 0" shape=ellipse]
54 [label="8:CtTypeReferenceImpl@boolean" shape=ellipse]
55 [label="8:CtBlockImpl@\{
\}" shape=ellipse]
56 [label="8:CtWhileImpl@while ((a = index - 1) != 0) \{
\} " shape=ellipse]
57 [label="9:CtVariableReadImpl@index" shape=ellipse]
58 [label="9:CtLocalVariableReferenceImpl@index" shape=ellipse]
59 [label="9:CtFieldReferenceImpl@length" shape=ellipse]
60 [label="9:CtTypeReferenceImpl@int" shape=ellipse]
61 [label="9:CtTypeReferenceImpl@int" shape=ellipse]
62 [label="9:CtFieldReadImpl@s.length" shape=ellipse]
63 [label="9:CtVariableReadImpl@s" shape=ellipse]
64 [label="9:CtBinaryOperatorImpl@(index < s.length)" shape=ellipse]
65 [label="9:CtTypeReferenceImpl@boolean" shape=ellipse]
66 [label="9:CtVariableReadImpl@s" shape=ellipse]
67 [label="9:CtLocalVariableReferenceImpl@s" shape=ellipse]
68 [label="9:CtVariableReadImpl@index" shape=ellipse]
69 [label="9:CtLocalVariableReferenceImpl@index" shape=ellipse]
70 [label="9:CtArrayReadImpl@s[index]" shape=ellipse]
71 [label="9:CtTypeReferenceImpl@char" shape=ellipse]
72 [label="9:CtLiteralImpl@'x'" shape=ellipse]
73 [label="9:CtTypeReferenceImpl@char" shape=ellipse]
74 [label="9:CtBinaryOperatorImpl@(s[index] != 'x')" shape=ellipse]
75 [label="9:CtTypeReferenceImpl@boolean" shape=ellipse]
76 [label="9:CtBinaryOperatorImpl@(index < s.length) && (s[index] != 'x')" shape=ellipse]
77 [label="9:CtTypeReferenceImpl@boolean" shape=ellipse]
78 [label="9:CtVariableWriteImpl@index" shape=ellipse]
79 [label="9:CtLocalVariableReferenceImpl@index" shape=ellipse]
80 [label="9:CtUnaryOperatorImpl@index++" shape=ellipse]
81 [label="9:CtTypeReferenceImpl@int" shape=ellipse]
82 [label="9:CtBlockImpl@\{
\}" shape=ellipse]
83 [label="9:CtForImpl@for (; (index < s.length) && (s[index] != 'x'); index++) \{
\}" shape=ellipse]
84 [label="10:CtVariableReadImpl@a" shape=ellipse]
85 [label="10:CtLocalVariableReferenceImpl@a" shape=ellipse]
86 [label="10:CtLiteralImpl@1" shape=ellipse]
87 [label="10:CtTypeReferenceImpl@int" shape=ellipse]
88 [label="10:CtBinaryOperatorImpl@a == 1" shape=ellipse]
89 [label="10:CtTypeReferenceImpl@boolean" shape=ellipse]
90 [label="10:CtBlockImpl@\{
\}" shape=ellipse]
91 [label="12:CtExecutableReferenceImpl@println(java.lang.String)" shape=ellipse]
92 [label="12:CtTypeReferenceImpl@PrintStream" shape=ellipse]
93 [label="12:CtTypeReferenceImpl@void" shape=ellipse]
94 [label="12:CtTypeReferenceImpl@String" shape=ellipse]
95 [label="12:CtVirtualElement@println" shape=ellipse]
96 [label="12:CtFieldReferenceImpl@java.lang.System.out" shape=ellipse]
97 [label="12:CtTypeReferenceImpl@System" shape=ellipse]
98 [label="12:CtTypeReferenceImpl@PrintStream" shape=ellipse]
99 [label="12:CtFieldReadImpl@System.out" shape=ellipse]
100 [label="12:CtTypeAccessImpl@System" shape=ellipse]
101 [label="12:CtLiteralImpl@\"a\"" shape=ellipse]
102 [label="12:CtTypeReferenceImpl@String" shape=ellipse]
103 [label="12:CtInvocationImpl@System.out.println(\"a\")" shape=ellipse]
104 [label="11:CtBlockImpl@\{
    System.out.println(\"a\");
\}" shape=ellipse]
105 [label="10:CtIfImpl@if (a == 1) \{
\} else \{
    System.out.println(\"a\");
\}" shape=ellipse]
106 [label="14:CtVariableReadImpl@a" shape=ellipse]
107 [label="14:CtLocalVariableReferenceImpl@a" shape=ellipse]
108 [label="14:CtSwitchImpl@switch (a) \{
\}" shape=ellipse]
109 [label="16:CtVariableReadImpl@a" shape=ellipse]
110 [label="16:CtLocalVariableReferenceImpl@a" shape=ellipse]
111 [label="17:CtLiteralImpl@1" shape=ellipse]
112 [label="17:CtTypeReferenceImpl@int" shape=ellipse]
113 [label="18:CtVariableWriteImpl@a" shape=ellipse]
114 [label="18:CtLocalVariableReferenceImpl@a" shape=ellipse]
115 [label="18:CtLiteralImpl@2" shape=ellipse]
116 [label="18:CtTypeReferenceImpl@int" shape=ellipse]
117 [label="18:CtTypeReferenceImpl@int" shape=ellipse]
118 [label="18:CtAssignmentImpl@a = 2" shape=ellipse]
119 [label="17:CtCaseImpl@case 1 :
    a = 2;" shape=ellipse]
120 [label="19:CtLiteralImpl@2" shape=ellipse]
121 [label="19:CtTypeReferenceImpl@int" shape=ellipse]
122 [label="20:CtVariableWriteImpl@a" shape=ellipse]
123 [label="20:CtLocalVariableReferenceImpl@a" shape=ellipse]
124 [label="20:CtLiteralImpl@3" shape=ellipse]
125 [label="20:CtTypeReferenceImpl@int" shape=ellipse]
126 [label="20:CtTypeReferenceImpl@int" shape=ellipse]
127 [label="20:CtAssignmentImpl@a = 3" shape=ellipse]
128 [label="19:CtCaseImpl@case 2 :
    a = 3;" shape=ellipse]
129 [label="22:CtVariableWriteImpl@a" shape=ellipse]
130 [label="22:CtLocalVariableReferenceImpl@a" shape=ellipse]
131 [label="22:CtLiteralImpl@0" shape=ellipse]
132 [label="22:CtTypeReferenceImpl@int" shape=ellipse]
133 [label="22:CtTypeReferenceImpl@int" shape=ellipse]
134 [label="22:CtAssignmentImpl@a = 0" shape=ellipse]
135 [label="21:CtCaseImpl@default :
    a = 0;" shape=ellipse]
136 [label="16:CtSwitchImpl@switch (a) \{
    case 1 :
        a = 2;
    case 2 :
        a = 3;
    default :
        a = 0;
\}" shape=ellipse]
137 [label="2:CtBlockImpl@\{
    int a = 1;
    if (a == 1) \{
    \}
    char[] s = new char[]\{ '1', '2' \};
    int index = 2;
    if (doSideEffect() == 1) \{
    \}
    while ((a = index - 1) != 0) \{
    \} 
    for (; (index < s.length) && (s[index] != 'x'); index++) \{
    \}
    if (a == 1) \{
    \} else \{
        System.out.println(\"a\");
    \}
    switch (a) \{
    \}
    switch (a) \{
        case 1 :
            a = 2;
        case 2 :
            a = 3;
        default :
            a = 0;
    \}
\}" shape=ellipse]
138 [label="2:CtMethodImpl@public void fooMethod() \{
    int a = 1;
    if (a == 1) \{
    \}
    char[] s = new char[]\{ '1', '2' \};
    int index = 2;
    if (doSideEffect() == 1) \{
    \}
    while ((a = index - 1) != 0) \{
    \} 
    for (; (index < s.length) && (s[index] != 'x'); index++) \{
    \}
    if (a == 1) \{
    \} else \{
        System.out.println(\"a\");
    \}
    switch (a) \{
    \}
    switch (a) \{
        case 1 :
            a = 2;
        case 2 :
            a = 3;
        default :
            a = 0;
    \}
\}" shape=ellipse]
139 [label="12:Update@UPDATE" shape=ellipse]
140 [label="12:CtPackageReferenceImpl@java.lang" shape=ellipse]
141 [label="12:CtTypeReferenceImpl@System" shape=ellipse]
142 [label="12:CtTypeAccessImpl@System" shape=ellipse]
143 [label="12:CtPackageReferenceImpl@java.lang" shape=ellipse]
144 [label="12:CtTypeReferenceImpl@System" shape=ellipse]
145 [label="12:CtTypeReferenceImpl@int" shape=ellipse]
146 [label="12:CtPackageReferenceImpl@java.lang" shape=ellipse]
147 [label="12:CtTypeReferenceImpl@Object" shape=ellipse]
148 [label="12:CtExecutableReferenceImpl@identityHashCode(java.lang.Object)" shape=ellipse]
149 [label="12:CtPackageReferenceImpl@java.lang" shape=ellipse]
150 [label="12:CtTypeReferenceImpl@String" shape=ellipse]
151 [label="12:CtLiteralImpl@\"a\"" shape=ellipse]
152 [label="12:CtInvocationImpl@System.identityHashCode(\"a\")" shape=ellipse]
153 [label="12:CtVirtualElement@identityHashCode" shape=ellipse]
154 [label="12:Move@MOVE" shape=ellipse]
3 -> 4 [label="AST"];
5 -> 7 [label="Define-Use"];
6 -> 5 [label="AST"];
6 -> 2 [label="AST"];
6 -> 3 [label="AST"];
7 -> 8 [label="AST"];
9 -> 10 [label="AST"];
11 -> 12 [label="AST"];
11 -> 7 [label="AST"];
11 -> 9 [label="AST"];
11 -> 13 [label="Control Dep"];
14 -> 11 [label="AST"];
14 -> 13 [label="AST"];
16 -> 15 [label="AST"];
16 -> 17 [label="AST"];
18 -> 19 [label="AST"];
18 -> 20 [label="AST"];
18 -> 21 [label="AST"];
22 -> 66 [label="Define-Use"];
22 -> 70 [label="Define-Use"];
23 -> 22 [label="AST"];
23 -> 16 [label="AST"];
23 -> 18 [label="AST"];
25 -> 26 [label="AST"];
27 -> 43 [label="Define-Use"];
27 -> 57 [label="Define-Use"];
27 -> 68 [label="Define-Use"];
28 -> 27 [label="AST"];
28 -> 24 [label="AST"];
28 -> 25 [label="AST"];
31 -> 32 [label="AST"];
33 -> 34 [label="AST"];
33 -> 31 [label="AST"];
35 -> 30 [label="AST"];
35 -> 33 [label="AST"];
35 -> 29 [label="AST"];
36 -> 37 [label="AST"];
38 -> 35 [label="AST"];
38 -> 36 [label="AST"];
38 -> 39 [label="Control Dep"];
40 -> 38 [label="AST"];
40 -> 39 [label="AST"];
41 -> 42 [label="AST"];
41 -> 84 [label="Define-Use"];
41 -> 106 [label="Define-Use"];
41 -> 109 [label="Define-Use"];
43 -> 44 [label="AST"];
43 -> 41 [label="Data Dep"];
45 -> 46 [label="AST"];
47 -> 48 [label="AST"];
47 -> 43 [label="AST"];
47 -> 45 [label="AST"];
50 -> 49 [label="AST"];
50 -> 41 [label="AST"];
50 -> 47 [label="AST"];
51 -> 52 [label="AST"];
53 -> 54 [label="AST"];
53 -> 50 [label="AST"];
53 -> 51 [label="AST"];
53 -> 55 [label="Control Dep"];
56 -> 53 [label="AST"];
56 -> 55 [label="AST"];
57 -> 58 [label="AST"];
59 -> 60 [label="AST"];
59 -> 61 [label="AST"];
62 -> 63 [label="AST"];
62 -> 59 [label="AST"];
64 -> 65 [label="AST"];
64 -> 57 [label="AST"];
64 -> 62 [label="AST"];
66 -> 67 [label="AST"];
68 -> 69 [label="AST"];
70 -> 71 [label="AST"];
70 -> 66 [label="AST"];
70 -> 68 [label="AST"];
72 -> 73 [label="AST"];
74 -> 75 [label="AST"];
74 -> 70 [label="AST"];
74 -> 72 [label="AST"];
76 -> 77 [label="AST"];
76 -> 64 [label="AST"];
76 -> 74 [label="AST"];
76 -> 82 [label="Control Dep"];
78 -> 79 [label="AST"];
80 -> 81 [label="AST"];
80 -> 78 [label="AST"];
83 -> 76 [label="AST"];
83 -> 80 [label="AST"];
83 -> 82 [label="AST"];
84 -> 85 [label="AST"];
86 -> 87 [label="AST"];
88 -> 89 [label="AST"];
88 -> 84 [label="AST"];
88 -> 86 [label="AST"];
88 -> 90 [label="Control Dep"];
88 -> 104 [label="Control Dep"];
88 -> 103 [label="Control Dep"];
88 -> 91 [label="Control Dep"];
88 -> 99 [label="Control Dep"];
88 -> 101 [label="Control Dep"];
88 -> 142 [label="Control Dep"];
88 -> 148 [label="Control Dep"];
88 -> 151 [label="Control Dep"];
88 -> 152 [label="Control Dep"];
91 -> 92 [label="AST"];
91 -> 93 [label="AST"];
91 -> 94 [label="AST"];
96 -> 97 [label="AST"];
96 -> 98 [label="AST"];
99 -> 100 [label="AST"];
99 -> 96 [label="AST"];
100 -> 154 [label="Action"];
101 -> 102 [label="AST"];
103 -> 95 [label="AST"];
103 -> 99 [label="AST"];
103 -> 91 [label="AST"];
103 -> 101 [label="AST"];
103 -> 139 [label="Action"];
104 -> 103 [label="AST"];
105 -> 88 [label="AST"];
105 -> 90 [label="AST"];
105 -> 104 [label="AST"];
106 -> 107 [label="AST"];
108 -> 106 [label="AST"];
109 -> 110 [label="AST"];
109 -> 119 [label="Control Dep"];
109 -> 111 [label="Control Dep"];
109 -> 118 [label="Control Dep"];
109 -> 113 [label="Control Dep"];
109 -> 115 [label="Control Dep"];
109 -> 128 [label="Control Dep"];
109 -> 120 [label="Control Dep"];
109 -> 127 [label="Control Dep"];
109 -> 122 [label="Control Dep"];
109 -> 124 [label="Control Dep"];
109 -> 135 [label="Control Dep"];
109 -> 134 [label="Control Dep"];
109 -> 129 [label="Control Dep"];
109 -> 131 [label="Control Dep"];
111 -> 112 [label="AST"];
113 -> 114 [label="AST"];
115 -> 116 [label="AST"];
118 -> 117 [label="AST"];
118 -> 113 [label="AST"];
118 -> 115 [label="AST"];
119 -> 111 [label="AST"];
119 -> 118 [label="AST"];
120 -> 121 [label="AST"];
122 -> 123 [label="AST"];
124 -> 125 [label="AST"];
127 -> 126 [label="AST"];
127 -> 122 [label="AST"];
127 -> 124 [label="AST"];
128 -> 120 [label="AST"];
128 -> 127 [label="AST"];
129 -> 130 [label="AST"];
131 -> 132 [label="AST"];
134 -> 133 [label="AST"];
134 -> 129 [label="AST"];
134 -> 131 [label="AST"];
135 -> 134 [label="AST"];
136 -> 109 [label="AST"];
136 -> 119 [label="AST"];
136 -> 128 [label="AST"];
136 -> 135 [label="AST"];
137 -> 6 [label="AST"];
137 -> 14 [label="AST"];
137 -> 23 [label="AST"];
137 -> 28 [label="AST"];
137 -> 40 [label="AST"];
137 -> 56 [label="AST"];
137 -> 83 [label="AST"];
137 -> 105 [label="AST"];
137 -> 108 [label="AST"];
137 -> 136 [label="AST"];
138 -> 1 [label="AST"];
138 -> 0 [label="AST"];
138 -> 137 [label="AST"];
139 -> 152 [label="Action"];
141 -> 140 [label="AST"];
142 -> 141 [label="AST"];
144 -> 143 [label="AST"];
147 -> 146 [label="AST"];
148 -> 144 [label="AST"];
148 -> 145 [label="AST"];
148 -> 147 [label="AST"];
150 -> 149 [label="AST"];
151 -> 150 [label="AST"];
152 -> 153 [label="AST"];
152 -> 142 [label="AST"];
152 -> 148 [label="AST"];
152 -> 151 [label="AST"];
154 -> 103 [label="Action"];
}