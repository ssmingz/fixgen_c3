digraph "visitToken#?,DetailAST" {
0 [label="3:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="3:CtVirtualElement@visitToken" shape=ellipse]
2 [label="3:CtParameterImpl@DetailAST ast" shape=ellipse]
3 [label="3:CtTypeReferenceImpl@DetailAST" shape=ellipse]
4 [label="4:CtTypeReferenceImpl@String" shape=ellipse]
5 [label="4:CtPackageReferenceImpl@java.lang" shape=ellipse]
6 [label="4:CtExecutableReferenceImpl@getText()" shape=ellipse]
7 [label="4:CtTypeReferenceImpl@DetailAST" shape=ellipse]
8 [label="4:CtTypeReferenceImpl@String" shape=ellipse]
9 [label="4:CtVirtualElement@getText" shape=ellipse]
10 [label="4:CtVariableReadImpl@ast" shape=ellipse]
11 [label="4:CtParameterReferenceImpl@ast" shape=ellipse]
12 [label="4:CtInvocationImpl@ast.getText()" shape=ellipse]
13 [label="4:CtVirtualElement@text" shape=ellipse]
14 [label="4:CtLocalVariableImpl@final String text = ast.getText()" shape=ellipse]
15 [label="5:CtExecutableReferenceImpl@find()" shape=ellipse]
16 [label="5:CtTypeReferenceImpl@boolean" shape=ellipse]
17 [label="5:CtVirtualElement@find" shape=ellipse]
18 [label="5:CtExecutableReferenceImpl@matcher(java.lang.String)" shape=ellipse]
19 [label="5:CtTypeReferenceImpl@String" shape=ellipse]
20 [label="5:CtVirtualElement@matcher" shape=ellipse]
21 [label="5:CtExecutableReferenceImpl@getRegexp()" shape=ellipse]
22 [label="5:CtVirtualElement@getRegexp" shape=ellipse]
23 [label="5:CtTypeAccessImpl@PlaceHold" shape=ellipse]
24 [label="5:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
25 [label="5:CtThisAccessImpl@" shape=ellipse]
26 [label="5:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
27 [label="5:CtInvocationImpl@getRegexp()" shape=ellipse]
28 [label="5:CtVariableReadImpl@text" shape=ellipse]
29 [label="5:CtLocalVariableReferenceImpl@text" shape=ellipse]
30 [label="5:CtInvocationImpl@getRegexp().matcher(text)" shape=ellipse]
31 [label="5:CtInvocationImpl@getRegexp().matcher(text).find()" shape=ellipse]
32 [label="6:CtTypeReferenceImpl@String" shape=ellipse]
33 [label="6:CtPackageReferenceImpl@java.lang" shape=ellipse]
34 [label="6:CtFieldReferenceImpl@message" shape=ellipse]
35 [label="6:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
36 [label="6:CtFieldReadImpl@message" shape=ellipse]
37 [label="6:CtVirtualElement@customMessage" shape=ellipse]
38 [label="6:CtLocalVariableImpl@String customMessage = message" shape=ellipse]
39 [label="7:CtExecutableReferenceImpl@isEmpty()" shape=ellipse]
40 [label="7:CtTypeReferenceImpl@String" shape=ellipse]
41 [label="7:CtTypeReferenceImpl@boolean" shape=ellipse]
42 [label="7:CtVirtualElement@isEmpty" shape=ellipse]
43 [label="7:CtVariableReadImpl@customMessage" shape=ellipse]
44 [label="7:CtLocalVariableReferenceImpl@customMessage" shape=ellipse]
45 [label="7:CtInvocationImpl@customMessage.isEmpty()" shape=ellipse]
46 [label="8:CtVariableWriteImpl@customMessage" shape=ellipse]
47 [label="8:CtLocalVariableReferenceImpl@customMessage" shape=ellipse]
48 [label="8:CtFieldReferenceImpl@MSG_KEY" shape=ellipse]
49 [label="8:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
50 [label="8:CtFieldReadImpl@MSG_KEY" shape=ellipse]
51 [label="8:CtTypeReferenceImpl@String" shape=ellipse]
52 [label="8:CtPackageReferenceImpl@java.lang" shape=ellipse]
53 [label="8:CtAssignmentImpl@customMessage = MSG_KEY" shape=ellipse]
54 [label="7:CtBlockImpl@\{
    customMessage = MSG_KEY;
\}" shape=ellipse]
55 [label="7:CtIfImpl@if (customMessage.isEmpty()) \{
    customMessage = MSG_KEY;
\}" shape=ellipse]
56 [label="10:CtExecutableReferenceImpl@log(<unknown>,<unknown>,java.lang.String,<unknown>)" shape=ellipse]
57 [label="10:CtTypeReferenceImpl@null" shape=ellipse]
58 [label="10:CtTypeReferenceImpl@null" shape=ellipse]
59 [label="10:CtTypeReferenceImpl@String" shape=ellipse]
60 [label="10:CtTypeReferenceImpl@null" shape=ellipse]
61 [label="10:CtVirtualElement@log" shape=ellipse]
62 [label="10:CtTypeAccessImpl@PlaceHold" shape=ellipse]
63 [label="10:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
64 [label="10:CtThisAccessImpl@" shape=ellipse]
65 [label="10:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
66 [label="10:CtExecutableReferenceImpl@getLineNo()" shape=ellipse]
67 [label="10:CtTypeReferenceImpl@DetailAST" shape=ellipse]
68 [label="10:CtVirtualElement@getLineNo" shape=ellipse]
69 [label="10:CtVariableReadImpl@ast" shape=ellipse]
70 [label="10:CtParameterReferenceImpl@ast" shape=ellipse]
71 [label="10:CtInvocationImpl@ast.getLineNo()" shape=ellipse]
72 [label="10:CtExecutableReferenceImpl@getColumnNo()" shape=ellipse]
73 [label="10:CtTypeReferenceImpl@DetailAST" shape=ellipse]
74 [label="10:CtVirtualElement@getColumnNo" shape=ellipse]
75 [label="10:CtVariableReadImpl@ast" shape=ellipse]
76 [label="10:CtParameterReferenceImpl@ast" shape=ellipse]
77 [label="10:CtInvocationImpl@ast.getColumnNo()" shape=ellipse]
78 [label="10:CtVariableReadImpl@customMessage" shape=ellipse]
79 [label="10:CtLocalVariableReferenceImpl@customMessage" shape=ellipse]
80 [label="10:CtExecutableReferenceImpl@getFormat()" shape=ellipse]
81 [label="10:CtVirtualElement@getFormat" shape=ellipse]
82 [label="10:CtTypeAccessImpl@PlaceHold" shape=ellipse]
83 [label="10:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
84 [label="10:CtThisAccessImpl@" shape=ellipse]
85 [label="10:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
86 [label="10:CtInvocationImpl@getFormat()" shape=ellipse]
87 [label="10:CtInvocationImpl@log(ast.getLineNo(), ast.getColumnNo(), customMessage, getFormat())" shape=ellipse]
88 [label="5:CtBlockImpl@\{
    String customMessage = message;
    if (customMessage.isEmpty()) \{
        customMessage = MSG_KEY;
    \}
    log(ast.getLineNo(), ast.getColumnNo(), customMessage, getFormat());
\}" shape=ellipse]
89 [label="5:CtIfImpl@if (getRegexp().matcher(text).find()) \{
    String customMessage = message;
    if (customMessage.isEmpty()) \{
        customMessage = MSG_KEY;
    \}
    log(ast.getLineNo(), ast.getColumnNo(), customMessage, getFormat());
\}" shape=ellipse]
90 [label="3:CtBlockImpl@\{
    final String text = ast.getText();
    if (getRegexp().matcher(text).find()) \{
        String customMessage = message;
        if (customMessage.isEmpty()) \{
            customMessage = MSG_KEY;
        \}
        log(ast.getLineNo(), ast.getColumnNo(), customMessage, getFormat());
    \}
\}" shape=ellipse]
91 [label="3:CtMethodImpl@@Override
public void visitToken(DetailAST ast) \{
    final String text = ast.getText();
    if (getRegexp().matcher(text).find()) \{
        String customMessage = message;
        if (customMessage.isEmpty()) \{
            customMessage = MSG_KEY;
        \}
        log(ast.getLineNo(), ast.getColumnNo(), customMessage, getFormat());
    \}
\}" shape=ellipse]
92 [label="2:CtAnnotationImpl@@Override" shape=ellipse]
93 [label="5:Delete@DELETE" shape=ellipse]
94 [label="10:Delete@DELETE" shape=ellipse]
95 [label="5:Insert@INSERT" shape=ellipse]
96 [label="5:CtPackageReferenceImpl@" shape=ellipse]
97 [label="5:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
98 [label="5:CtFieldReferenceImpl@regexp" shape=ellipse]
99 [label="5:CtFieldReadImpl@regexp" shape=ellipse]
100 [label="10:Insert@INSERT" shape=ellipse]
101 [label="10:CtPackageReferenceImpl@" shape=ellipse]
102 [label="10:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
103 [label="10:CtFieldReferenceImpl@format" shape=ellipse]
104 [label="10:CtFieldReadImpl@format" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
6 -> 7 [label="AST"];
6 -> 8 [label="AST"];
10 -> 11 [label="AST"];
10 -> 13 [label="Data Dep"];
12 -> 9 [label="AST"];
12 -> 10 [label="AST"];
12 -> 6 [label="AST"];
13 -> 28 [label="Define-Use"];
14 -> 13 [label="AST"];
14 -> 4 [label="AST"];
14 -> 12 [label="AST"];
15 -> 16 [label="AST"];
18 -> 19 [label="AST"];
23 -> 24 [label="AST"];
25 -> 26 [label="AST"];
25 -> 23 [label="AST"];
27 -> 22 [label="AST"];
27 -> 25 [label="AST"];
27 -> 21 [label="AST"];
27 -> 93 [label="Action"];
28 -> 29 [label="AST"];
30 -> 20 [label="AST"];
30 -> 27 [label="AST"];
30 -> 18 [label="AST"];
30 -> 28 [label="AST"];
30 -> 95 [label="Action"];
31 -> 17 [label="AST"];
31 -> 30 [label="AST"];
31 -> 15 [label="AST"];
31 -> 88 [label="Control Dep"];
31 -> 38 [label="Control Dep"];
31 -> 36 [label="Control Dep"];
31 -> 55 [label="Control Dep"];
31 -> 45 [label="Control Dep"];
31 -> 39 [label="Control Dep"];
31 -> 43 [label="Control Dep"];
31 -> 87 [label="Control Dep"];
31 -> 56 [label="Control Dep"];
31 -> 64 [label="Control Dep"];
31 -> 62 [label="Control Dep"];
31 -> 71 [label="Control Dep"];
31 -> 66 [label="Control Dep"];
31 -> 69 [label="Control Dep"];
31 -> 77 [label="Control Dep"];
31 -> 72 [label="Control Dep"];
31 -> 75 [label="Control Dep"];
31 -> 78 [label="Control Dep"];
31 -> 86 [label="Control Dep"];
31 -> 80 [label="Control Dep"];
31 -> 84 [label="Control Dep"];
31 -> 82 [label="Control Dep"];
31 -> 104 [label="Control Dep"];
32 -> 33 [label="AST"];
34 -> 35 [label="AST"];
36 -> 34 [label="AST"];
36 -> 37 [label="Data Dep"];
37 -> 43 [label="Define-Use"];
37 -> 78 [label="Define-Use"];
38 -> 37 [label="AST"];
38 -> 32 [label="AST"];
38 -> 36 [label="AST"];
39 -> 40 [label="AST"];
39 -> 41 [label="AST"];
43 -> 44 [label="AST"];
45 -> 42 [label="AST"];
45 -> 43 [label="AST"];
45 -> 39 [label="AST"];
45 -> 54 [label="Control Dep"];
45 -> 53 [label="Control Dep"];
45 -> 46 [label="Control Dep"];
45 -> 50 [label="Control Dep"];
46 -> 47 [label="AST"];
46 -> 78 [label="Define-Use"];
47 -> 78 [label="Define-Use"];
48 -> 49 [label="AST"];
50 -> 48 [label="AST"];
50 -> 46 [label="Data Dep"];
51 -> 52 [label="AST"];
53 -> 51 [label="AST"];
53 -> 46 [label="AST"];
53 -> 50 [label="AST"];
54 -> 53 [label="AST"];
55 -> 45 [label="AST"];
55 -> 54 [label="AST"];
56 -> 57 [label="AST"];
56 -> 58 [label="AST"];
56 -> 59 [label="AST"];
56 -> 60 [label="AST"];
62 -> 63 [label="AST"];
64 -> 65 [label="AST"];
64 -> 62 [label="AST"];
66 -> 67 [label="AST"];
69 -> 70 [label="AST"];
71 -> 68 [label="AST"];
71 -> 69 [label="AST"];
71 -> 66 [label="AST"];
72 -> 73 [label="AST"];
75 -> 76 [label="AST"];
77 -> 74 [label="AST"];
77 -> 75 [label="AST"];
77 -> 72 [label="AST"];
78 -> 79 [label="AST"];
82 -> 83 [label="AST"];
84 -> 85 [label="AST"];
84 -> 82 [label="AST"];
86 -> 81 [label="AST"];
86 -> 84 [label="AST"];
86 -> 80 [label="AST"];
86 -> 94 [label="Action"];
87 -> 61 [label="AST"];
87 -> 64 [label="AST"];
87 -> 56 [label="AST"];
87 -> 71 [label="AST"];
87 -> 77 [label="AST"];
87 -> 78 [label="AST"];
87 -> 86 [label="AST"];
87 -> 100 [label="Action"];
88 -> 38 [label="AST"];
88 -> 55 [label="AST"];
88 -> 87 [label="AST"];
89 -> 31 [label="AST"];
89 -> 88 [label="AST"];
90 -> 14 [label="AST"];
90 -> 89 [label="AST"];
91 -> 1 [label="AST"];
91 -> 92 [label="AST"];
91 -> 0 [label="AST"];
91 -> 2 [label="AST"];
91 -> 90 [label="AST"];
95 -> 99 [label="Action"];
97 -> 96 [label="AST"];
98 -> 97 [label="AST"];
99 -> 98 [label="AST"];
100 -> 104 [label="Action"];
102 -> 101 [label="AST"];
103 -> 102 [label="AST"];
104 -> 103 [label="AST"];
}