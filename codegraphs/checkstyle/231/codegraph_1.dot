digraph "checkUnusedTypeParamTags#?,List,List" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@checkUnusedTypeParamTags" shape=ellipse]
2 [label="3:CtParameterImpl@final List<JavadocTag> aTags" shape=ellipse]
3 [label="3:CtTypeReferenceImpl@List<JavadocTag>" shape=ellipse]
4 [label="3:CtParameterImpl@final List<String> aTypeParamNames" shape=ellipse]
5 [label="3:CtTypeReferenceImpl@List<String>" shape=ellipse]
6 [label="4:CtTypeReferenceImpl@Pattern" shape=ellipse]
7 [label="4:CtPackageReferenceImpl@" shape=ellipse]
8 [label="4:CtExecutableReferenceImpl@getPattern(java.lang.String)" shape=ellipse]
9 [label="4:CtTypeReferenceImpl@Utils" shape=ellipse]
10 [label="4:CtTypeReferenceImpl@Pattern" shape=ellipse]
11 [label="4:CtTypeReferenceImpl@String" shape=ellipse]
12 [label="4:CtVirtualElement@getPattern" shape=ellipse]
13 [label="4:CtTypeAccessImpl@Utils" shape=ellipse]
14 [label="4:CtTypeReferenceImpl@Utils" shape=ellipse]
15 [label="4:CtLiteralImpl@\"\\s*<([^>]+)>.*\"" shape=ellipse]
16 [label="4:CtTypeReferenceImpl@String" shape=ellipse]
17 [label="4:CtInvocationImpl@Utils.getPattern(\"\\s*<([^>]+)>.*\")" shape=ellipse]
18 [label="4:CtVirtualElement@pattern" shape=ellipse]
19 [label="4:CtLocalVariableImpl@final Pattern pattern = Utils.getPattern(\"\\s*<([^>]+)>.*\")" shape=ellipse]
20 [label="5:CtTypeReferenceImpl@int" shape=ellipse]
21 [label="5:CtExecutableReferenceImpl@size()" shape=ellipse]
22 [label="5:CtTypeReferenceImpl@List<JavadocTag>" shape=ellipse]
23 [label="5:CtVirtualElement@size" shape=ellipse]
24 [label="5:CtVariableReadImpl@aTags" shape=ellipse]
25 [label="5:CtParameterReferenceImpl@aTags" shape=ellipse]
26 [label="5:CtInvocationImpl@aTags.size()" shape=ellipse]
27 [label="5:CtLiteralImpl@1" shape=ellipse]
28 [label="5:CtTypeReferenceImpl@int" shape=ellipse]
29 [label="5:CtBinaryOperatorImpl@aTags.size() - 1" shape=ellipse]
30 [label="5:CtVirtualElement@i" shape=ellipse]
31 [label="5:CtLocalVariableImpl@int i = aTags.size() - 1" shape=ellipse]
32 [label="5:CtVariableReadImpl@i" shape=ellipse]
33 [label="5:CtLocalVariableReferenceImpl@i" shape=ellipse]
34 [label="5:CtLiteralImpl@0" shape=ellipse]
35 [label="5:CtTypeReferenceImpl@int" shape=ellipse]
36 [label="5:CtBinaryOperatorImpl@i >= 0" shape=ellipse]
37 [label="5:CtTypeReferenceImpl@boolean" shape=ellipse]
38 [label="5:CtVariableWriteImpl@i" shape=ellipse]
39 [label="5:CtLocalVariableReferenceImpl@i" shape=ellipse]
40 [label="5:CtUnaryOperatorImpl@i--" shape=ellipse]
41 [label="5:CtTypeReferenceImpl@int" shape=ellipse]
42 [label="6:CtTypeReferenceImpl@JavadocTag" shape=ellipse]
43 [label="6:CtPackageReferenceImpl@" shape=ellipse]
44 [label="6:CtExecutableReferenceImpl@get(int)" shape=ellipse]
45 [label="6:CtTypeReferenceImpl@List<JavadocTag>" shape=ellipse]
46 [label="6:CtTypeReferenceImpl@JavadocTag" shape=ellipse]
47 [label="6:CtTypeReferenceImpl@int" shape=ellipse]
48 [label="6:CtVirtualElement@get" shape=ellipse]
49 [label="6:CtVariableReadImpl@aTags" shape=ellipse]
50 [label="6:CtParameterReferenceImpl@aTags" shape=ellipse]
51 [label="6:CtVariableReadImpl@i" shape=ellipse]
52 [label="6:CtLocalVariableReferenceImpl@i" shape=ellipse]
53 [label="6:CtInvocationImpl@aTags.get(i)" shape=ellipse]
54 [label="6:CtVirtualElement@tag" shape=ellipse]
55 [label="6:CtLocalVariableImpl@final JavadocTag tag = aTags.get(i)" shape=ellipse]
56 [label="7:CtExecutableReferenceImpl@equals(java.lang.String)" shape=ellipse]
57 [label="7:CtTypeReferenceImpl@boolean" shape=ellipse]
58 [label="7:CtTypeReferenceImpl@String" shape=ellipse]
59 [label="7:CtVirtualElement@equals" shape=ellipse]
60 [label="7:CtExecutableReferenceImpl@getTag()" shape=ellipse]
61 [label="7:CtTypeReferenceImpl@JavadocTag" shape=ellipse]
62 [label="7:CtVirtualElement@getTag" shape=ellipse]
63 [label="7:CtVariableReadImpl@tag" shape=ellipse]
64 [label="7:CtLocalVariableReferenceImpl@tag" shape=ellipse]
65 [label="7:CtInvocationImpl@tag.getTag()" shape=ellipse]
66 [label="7:CtLiteralImpl@\"param\"" shape=ellipse]
67 [label="7:CtTypeReferenceImpl@String" shape=ellipse]
68 [label="7:CtInvocationImpl@tag.getTag().equals(\"param\")" shape=ellipse]
69 [label="8:CtExecutableReferenceImpl@getArg1()" shape=ellipse]
70 [label="8:CtTypeReferenceImpl@JavadocTag" shape=ellipse]
71 [label="8:CtVirtualElement@getArg1" shape=ellipse]
72 [label="8:CtVariableReadImpl@tag" shape=ellipse]
73 [label="8:CtLocalVariableReferenceImpl@tag" shape=ellipse]
74 [label="8:CtInvocationImpl@tag.getArg1()" shape=ellipse]
75 [label="8:CtLiteralImpl@null" shape=ellipse]
76 [label="8:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
77 [label="8:CtBinaryOperatorImpl@tag.getArg1() != null" shape=ellipse]
78 [label="9:CtTypeReferenceImpl@Matcher" shape=ellipse]
79 [label="9:CtPackageReferenceImpl@" shape=ellipse]
80 [label="9:CtExecutableReferenceImpl@matcher()" shape=ellipse]
81 [label="9:CtTypeReferenceImpl@Pattern" shape=ellipse]
82 [label="9:CtTypeReferenceImpl@Matcher" shape=ellipse]
83 [label="9:CtVirtualElement@matcher" shape=ellipse]
84 [label="9:CtVariableReadImpl@pattern" shape=ellipse]
85 [label="9:CtLocalVariableReferenceImpl@pattern" shape=ellipse]
86 [label="9:CtExecutableReferenceImpl@getArg1()" shape=ellipse]
87 [label="9:CtTypeReferenceImpl@JavadocTag" shape=ellipse]
88 [label="9:CtVirtualElement@getArg1" shape=ellipse]
89 [label="9:CtVariableReadImpl@tag" shape=ellipse]
90 [label="9:CtLocalVariableReferenceImpl@tag" shape=ellipse]
91 [label="9:CtInvocationImpl@tag.getArg1()" shape=ellipse]
92 [label="9:CtInvocationImpl@pattern.matcher(tag.getArg1())" shape=ellipse]
93 [label="9:CtVirtualElement@matcher" shape=ellipse]
94 [label="9:CtLocalVariableImpl@final Matcher matcher = pattern.matcher(tag.getArg1())" shape=ellipse]
95 [label="10:CtTypeReferenceImpl@String" shape=ellipse]
96 [label="10:CtPackageReferenceImpl@java.lang" shape=ellipse]
97 [label="10:CtLiteralImpl@null" shape=ellipse]
98 [label="10:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
99 [label="10:CtVirtualElement@typeParamName" shape=ellipse]
100 [label="10:CtLocalVariableImpl@String typeParamName = null" shape=ellipse]
101 [label="11:CtExecutableReferenceImpl@matches()" shape=ellipse]
102 [label="11:CtTypeReferenceImpl@Matcher" shape=ellipse]
103 [label="11:CtTypeReferenceImpl@boolean" shape=ellipse]
104 [label="11:CtVirtualElement@matches" shape=ellipse]
105 [label="11:CtVariableReadImpl@matcher" shape=ellipse]
106 [label="11:CtLocalVariableReferenceImpl@matcher" shape=ellipse]
107 [label="11:CtInvocationImpl@matcher.matches()" shape=ellipse]
108 [label="12:CtVariableWriteImpl@typeParamName" shape=ellipse]
109 [label="12:CtLocalVariableReferenceImpl@typeParamName" shape=ellipse]
110 [label="12:CtExecutableReferenceImpl@trim()" shape=ellipse]
111 [label="12:CtTypeReferenceImpl@String" shape=ellipse]
112 [label="12:CtVirtualElement@trim" shape=ellipse]
113 [label="12:CtExecutableReferenceImpl@group(int)" shape=ellipse]
114 [label="12:CtTypeReferenceImpl@Matcher" shape=ellipse]
115 [label="12:CtTypeReferenceImpl@int" shape=ellipse]
116 [label="12:CtVirtualElement@group" shape=ellipse]
117 [label="12:CtVariableReadImpl@matcher" shape=ellipse]
118 [label="12:CtLocalVariableReferenceImpl@matcher" shape=ellipse]
119 [label="12:CtLiteralImpl@1" shape=ellipse]
120 [label="12:CtTypeReferenceImpl@int" shape=ellipse]
121 [label="12:CtInvocationImpl@matcher.group(1)" shape=ellipse]
122 [label="12:CtInvocationImpl@matcher.group(1).trim()" shape=ellipse]
123 [label="12:CtTypeReferenceImpl@String" shape=ellipse]
124 [label="12:CtPackageReferenceImpl@java.lang" shape=ellipse]
125 [label="12:CtAssignmentImpl@typeParamName = matcher.group(1).trim()" shape=ellipse]
126 [label="13:CtExecutableReferenceImpl@contains(java.lang.String)" shape=ellipse]
127 [label="13:CtTypeReferenceImpl@List<String>" shape=ellipse]
128 [label="13:CtTypeReferenceImpl@String" shape=ellipse]
129 [label="13:CtVirtualElement@contains" shape=ellipse]
130 [label="13:CtVariableReadImpl@aTypeParamNames" shape=ellipse]
131 [label="13:CtParameterReferenceImpl@aTypeParamNames" shape=ellipse]
132 [label="13:CtVariableReadImpl@typeParamName" shape=ellipse]
133 [label="13:CtLocalVariableReferenceImpl@typeParamName" shape=ellipse]
134 [label="13:CtInvocationImpl@aTypeParamNames.contains(typeParamName)" shape=ellipse]
135 [label="13:CtUnaryOperatorImpl@!aTypeParamNames.contains(typeParamName)" shape=ellipse]
136 [label="14:CtExecutableReferenceImpl@log(<unknown>,<unknown>,java.lang.String,java.lang.String,java.lang.String)" shape=ellipse]
137 [label="14:CtTypeReferenceImpl@null" shape=ellipse]
138 [label="14:CtTypeReferenceImpl@null" shape=ellipse]
139 [label="14:CtTypeReferenceImpl@String" shape=ellipse]
140 [label="14:CtTypeReferenceImpl@String" shape=ellipse]
141 [label="14:CtTypeReferenceImpl@String" shape=ellipse]
142 [label="14:CtVirtualElement@log" shape=ellipse]
143 [label="14:CtTypeAccessImpl@PlaceHold" shape=ellipse]
144 [label="14:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
145 [label="14:CtThisAccessImpl@" shape=ellipse]
146 [label="14:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
147 [label="15:CtExecutableReferenceImpl@getLineNo()" shape=ellipse]
148 [label="15:CtTypeReferenceImpl@JavadocTag" shape=ellipse]
149 [label="15:CtVirtualElement@getLineNo" shape=ellipse]
150 [label="15:CtVariableReadImpl@tag" shape=ellipse]
151 [label="15:CtLocalVariableReferenceImpl@tag" shape=ellipse]
152 [label="15:CtInvocationImpl@tag.getLineNo()" shape=ellipse]
153 [label="16:CtExecutableReferenceImpl@getColumnNo()" shape=ellipse]
154 [label="16:CtTypeReferenceImpl@JavadocTag" shape=ellipse]
155 [label="16:CtVirtualElement@getColumnNo" shape=ellipse]
156 [label="16:CtVariableReadImpl@tag" shape=ellipse]
157 [label="16:CtLocalVariableReferenceImpl@tag" shape=ellipse]
158 [label="16:CtInvocationImpl@tag.getColumnNo()" shape=ellipse]
159 [label="17:CtLiteralImpl@\"javadoc.unusedTag\"" shape=ellipse]
160 [label="17:CtTypeReferenceImpl@String" shape=ellipse]
161 [label="18:CtLiteralImpl@\"@param\"" shape=ellipse]
162 [label="18:CtTypeReferenceImpl@String" shape=ellipse]
163 [label="19:CtLiteralImpl@\"<\"" shape=ellipse]
164 [label="19:CtTypeReferenceImpl@String" shape=ellipse]
165 [label="19:CtVariableReadImpl@typeParamName" shape=ellipse]
166 [label="19:CtLocalVariableReferenceImpl@typeParamName" shape=ellipse]
167 [label="19:CtBinaryOperatorImpl@(\"<\" + typeParamName)" shape=ellipse]
168 [label="19:CtTypeReferenceImpl@String" shape=ellipse]
169 [label="19:CtLiteralImpl@\">\"" shape=ellipse]
170 [label="19:CtTypeReferenceImpl@String" shape=ellipse]
171 [label="19:CtBinaryOperatorImpl@(\"<\" + typeParamName) + \">\"" shape=ellipse]
172 [label="19:CtTypeReferenceImpl@String" shape=ellipse]
173 [label="14:CtInvocationImpl@log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTag\", \"@param\", (\"<\" + typeParamName) + \">\")" shape=ellipse]
174 [label="13:CtBlockImpl@\{
    log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTag\", \"@param\", (\"<\" + typeParamName) + \">\");
\}" shape=ellipse]
175 [label="13:CtIfImpl@if (!aTypeParamNames.contains(typeParamName)) \{
    log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTag\", \"@param\", (\"<\" + typeParamName) + \">\");
\}" shape=ellipse]
176 [label="11:CtBlockImpl@\{
    typeParamName = matcher.group(1).trim();
    if (!aTypeParamNames.contains(typeParamName)) \{
        log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTag\", \"@param\", (\"<\" + typeParamName) + \">\");
    \}
\}" shape=ellipse]
177 [label="22:CtExecutableReferenceImpl@log(<unknown>,<unknown>,java.lang.String)" shape=ellipse]
178 [label="22:CtTypeReferenceImpl@null" shape=ellipse]
179 [label="22:CtTypeReferenceImpl@null" shape=ellipse]
180 [label="22:CtTypeReferenceImpl@String" shape=ellipse]
181 [label="22:CtVirtualElement@log" shape=ellipse]
182 [label="22:CtTypeAccessImpl@PlaceHold" shape=ellipse]
183 [label="22:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
184 [label="22:CtThisAccessImpl@" shape=ellipse]
185 [label="22:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
186 [label="22:CtExecutableReferenceImpl@getLineNo()" shape=ellipse]
187 [label="22:CtTypeReferenceImpl@JavadocTag" shape=ellipse]
188 [label="22:CtVirtualElement@getLineNo" shape=ellipse]
189 [label="22:CtVariableReadImpl@tag" shape=ellipse]
190 [label="22:CtLocalVariableReferenceImpl@tag" shape=ellipse]
191 [label="22:CtInvocationImpl@tag.getLineNo()" shape=ellipse]
192 [label="22:CtExecutableReferenceImpl@getColumnNo()" shape=ellipse]
193 [label="22:CtTypeReferenceImpl@JavadocTag" shape=ellipse]
194 [label="22:CtVirtualElement@getColumnNo" shape=ellipse]
195 [label="22:CtVariableReadImpl@tag" shape=ellipse]
196 [label="22:CtLocalVariableReferenceImpl@tag" shape=ellipse]
197 [label="22:CtInvocationImpl@tag.getColumnNo()" shape=ellipse]
198 [label="22:CtLiteralImpl@\"javadoc.unusedTagGeneral\"" shape=ellipse]
199 [label="22:CtTypeReferenceImpl@String" shape=ellipse]
200 [label="22:CtInvocationImpl@log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTagGeneral\")" shape=ellipse]
201 [label="21:CtBlockImpl@\{
    log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTagGeneral\");
\}" shape=ellipse]
202 [label="11:CtIfImpl@if (matcher.matches()) \{
    typeParamName = matcher.group(1).trim();
    if (!aTypeParamNames.contains(typeParamName)) \{
        log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTag\", \"@param\", (\"<\" + typeParamName) + \">\");
    \}
\} else \{
    log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTagGeneral\");
\}" shape=ellipse]
203 [label="8:CtBlockImpl@\{
    final Matcher matcher = pattern.matcher(tag.getArg1());
    String typeParamName = null;
    if (matcher.matches()) \{
        typeParamName = matcher.group(1).trim();
        if (!aTypeParamNames.contains(typeParamName)) \{
            log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTag\", \"@param\", (\"<\" + typeParamName) + \">\");
        \}
    \} else \{
        log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTagGeneral\");
    \}
\}" shape=ellipse]
204 [label="25:CtExecutableReferenceImpl@log(<unknown>,<unknown>,java.lang.String)" shape=ellipse]
205 [label="25:CtTypeReferenceImpl@null" shape=ellipse]
206 [label="25:CtTypeReferenceImpl@null" shape=ellipse]
207 [label="25:CtTypeReferenceImpl@String" shape=ellipse]
208 [label="25:CtVirtualElement@log" shape=ellipse]
209 [label="25:CtTypeAccessImpl@PlaceHold" shape=ellipse]
210 [label="25:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
211 [label="25:CtThisAccessImpl@" shape=ellipse]
212 [label="25:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
213 [label="25:CtExecutableReferenceImpl@getLineNo()" shape=ellipse]
214 [label="25:CtTypeReferenceImpl@JavadocTag" shape=ellipse]
215 [label="25:CtVirtualElement@getLineNo" shape=ellipse]
216 [label="25:CtVariableReadImpl@tag" shape=ellipse]
217 [label="25:CtLocalVariableReferenceImpl@tag" shape=ellipse]
218 [label="25:CtInvocationImpl@tag.getLineNo()" shape=ellipse]
219 [label="25:CtExecutableReferenceImpl@getColumnNo()" shape=ellipse]
220 [label="25:CtTypeReferenceImpl@JavadocTag" shape=ellipse]
221 [label="25:CtVirtualElement@getColumnNo" shape=ellipse]
222 [label="25:CtVariableReadImpl@tag" shape=ellipse]
223 [label="25:CtLocalVariableReferenceImpl@tag" shape=ellipse]
224 [label="25:CtInvocationImpl@tag.getColumnNo()" shape=ellipse]
225 [label="25:CtLiteralImpl@\"javadoc.unusedTagGeneral\"" shape=ellipse]
226 [label="25:CtTypeReferenceImpl@String" shape=ellipse]
227 [label="25:CtInvocationImpl@log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTagGeneral\")" shape=ellipse]
228 [label="24:CtBlockImpl@\{
    log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTagGeneral\");
\}" shape=ellipse]
229 [label="8:CtIfImpl@if (tag.getArg1() != null) \{
    final Matcher matcher = pattern.matcher(tag.getArg1());
    String typeParamName = null;
    if (matcher.matches()) \{
        typeParamName = matcher.group(1).trim();
        if (!aTypeParamNames.contains(typeParamName)) \{
            log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTag\", \"@param\", (\"<\" + typeParamName) + \">\");
        \}
    \} else \{
        log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTagGeneral\");
    \}
\} else \{
    log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTagGeneral\");
\}" shape=ellipse]
230 [label="7:CtBlockImpl@\{
    if (tag.getArg1() != null) \{
        final Matcher matcher = pattern.matcher(tag.getArg1());
        String typeParamName = null;
        if (matcher.matches()) \{
            typeParamName = matcher.group(1).trim();
            if (!aTypeParamNames.contains(typeParamName)) \{
                log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTag\", \"@param\", (\"<\" + typeParamName) + \">\");
            \}
        \} else \{
            log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTagGeneral\");
        \}
    \} else \{
        log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTagGeneral\");
    \}
\}" shape=ellipse]
231 [label="7:CtIfImpl@if (tag.getTag().equals(\"param\")) \{
    if (tag.getArg1() != null) \{
        final Matcher matcher = pattern.matcher(tag.getArg1());
        String typeParamName = null;
        if (matcher.matches()) \{
            typeParamName = matcher.group(1).trim();
            if (!aTypeParamNames.contains(typeParamName)) \{
                log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTag\", \"@param\", (\"<\" + typeParamName) + \">\");
            \}
        \} else \{
            log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTagGeneral\");
        \}
    \} else \{
        log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTagGeneral\");
    \}
\}" shape=ellipse]
232 [label="5:CtBlockImpl@\{
    final JavadocTag tag = aTags.get(i);
    if (tag.getTag().equals(\"param\")) \{
        if (tag.getArg1() != null) \{
            final Matcher matcher = pattern.matcher(tag.getArg1());
            String typeParamName = null;
            if (matcher.matches()) \{
                typeParamName = matcher.group(1).trim();
                if (!aTypeParamNames.contains(typeParamName)) \{
                    log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTag\", \"@param\", (\"<\" + typeParamName) + \">\");
                \}
            \} else \{
                log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTagGeneral\");
            \}
        \} else \{
            log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTagGeneral\");
        \}
    \}
\}" shape=ellipse]
233 [label="5:CtForImpl@for (int i = aTags.size() - 1; i >= 0; i--) \{
    final JavadocTag tag = aTags.get(i);
    if (tag.getTag().equals(\"param\")) \{
        if (tag.getArg1() != null) \{
            final Matcher matcher = pattern.matcher(tag.getArg1());
            String typeParamName = null;
            if (matcher.matches()) \{
                typeParamName = matcher.group(1).trim();
                if (!aTypeParamNames.contains(typeParamName)) \{
                    log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTag\", \"@param\", (\"<\" + typeParamName) + \">\");
                \}
            \} else \{
                log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTagGeneral\");
            \}
        \} else \{
            log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTagGeneral\");
        \}
    \}
\}" shape=ellipse]
234 [label="3:CtBlockImpl@\{
    final Pattern pattern = Utils.getPattern(\"\\s*<([^>]+)>.*\");
    for (int i = aTags.size() - 1; i >= 0; i--) \{
        final JavadocTag tag = aTags.get(i);
        if (tag.getTag().equals(\"param\")) \{
            if (tag.getArg1() != null) \{
                final Matcher matcher = pattern.matcher(tag.getArg1());
                String typeParamName = null;
                if (matcher.matches()) \{
                    typeParamName = matcher.group(1).trim();
                    if (!aTypeParamNames.contains(typeParamName)) \{
                        log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTag\", \"@param\", (\"<\" + typeParamName) + \">\");
                    \}
                \} else \{
                    log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTagGeneral\");
                \}
            \} else \{
                log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTagGeneral\");
            \}
        \}
    \}
\}" shape=ellipse]
235 [label="2:CtMethodImpl@private void checkUnusedTypeParamTags(final List<JavadocTag> aTags, final List<String> aTypeParamNames) \{
    final Pattern pattern = Utils.getPattern(\"\\s*<([^>]+)>.*\");
    for (int i = aTags.size() - 1; i >= 0; i--) \{
        final JavadocTag tag = aTags.get(i);
        if (tag.getTag().equals(\"param\")) \{
            if (tag.getArg1() != null) \{
                final Matcher matcher = pattern.matcher(tag.getArg1());
                String typeParamName = null;
                if (matcher.matches()) \{
                    typeParamName = matcher.group(1).trim();
                    if (!aTypeParamNames.contains(typeParamName)) \{
                        log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTag\", \"@param\", (\"<\" + typeParamName) + \">\");
                    \}
                \} else \{
                    log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTagGeneral\");
                \}
            \} else \{
                log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTagGeneral\");
            \}
        \}
    \}
\}" shape=ellipse]
236 [label="7:Delete@DELETE" shape=ellipse]
237 [label="7:Insert@INSERT" shape=ellipse]
238 [label="7:CtPackageReferenceImpl@java.lang" shape=ellipse]
239 [label="7:CtTypeReferenceImpl@String" shape=ellipse]
240 [label="7:CtLiteralImpl@\"param\"" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
6 -> 7 [label="AST"];
8 -> 9 [label="AST"];
8 -> 10 [label="AST"];
8 -> 11 [label="AST"];
13 -> 14 [label="AST"];
15 -> 16 [label="AST"];
17 -> 12 [label="AST"];
17 -> 13 [label="AST"];
17 -> 8 [label="AST"];
17 -> 15 [label="AST"];
18 -> 84 [label="Define-Use"];
19 -> 18 [label="AST"];
19 -> 6 [label="AST"];
19 -> 17 [label="AST"];
21 -> 22 [label="AST"];
24 -> 25 [label="AST"];
24 -> 30 [label="Data Dep"];
26 -> 23 [label="AST"];
26 -> 24 [label="AST"];
26 -> 21 [label="AST"];
27 -> 28 [label="AST"];
29 -> 26 [label="AST"];
29 -> 27 [label="AST"];
30 -> 32 [label="Define-Use"];
31 -> 30 [label="AST"];
31 -> 20 [label="AST"];
31 -> 29 [label="AST"];
32 -> 33 [label="AST"];
34 -> 35 [label="AST"];
36 -> 37 [label="AST"];
36 -> 32 [label="AST"];
36 -> 34 [label="AST"];
36 -> 232 [label="Control Dep"];
36 -> 55 [label="Control Dep"];
36 -> 53 [label="Control Dep"];
36 -> 44 [label="Control Dep"];
36 -> 49 [label="Control Dep"];
36 -> 51 [label="Control Dep"];
36 -> 231 [label="Control Dep"];
36 -> 68 [label="Control Dep"];
36 -> 56 [label="Control Dep"];
36 -> 65 [label="Control Dep"];
36 -> 60 [label="Control Dep"];
36 -> 63 [label="Control Dep"];
36 -> 66 [label="Control Dep"];
36 -> 240 [label="Control Dep"];
38 -> 39 [label="AST"];
38 -> 51 [label="Define-Use"];
40 -> 41 [label="AST"];
40 -> 38 [label="AST"];
42 -> 43 [label="AST"];
44 -> 45 [label="AST"];
44 -> 46 [label="AST"];
44 -> 47 [label="AST"];
49 -> 50 [label="AST"];
49 -> 54 [label="Data Dep"];
51 -> 52 [label="AST"];
51 -> 54 [label="Data Dep"];
53 -> 48 [label="AST"];
53 -> 49 [label="AST"];
53 -> 44 [label="AST"];
53 -> 51 [label="AST"];
54 -> 63 [label="Define-Use"];
54 -> 72 [label="Define-Use"];
54 -> 89 [label="Define-Use"];
54 -> 150 [label="Define-Use"];
54 -> 156 [label="Define-Use"];
54 -> 189 [label="Define-Use"];
54 -> 195 [label="Define-Use"];
54 -> 216 [label="Define-Use"];
54 -> 222 [label="Define-Use"];
55 -> 54 [label="AST"];
55 -> 42 [label="AST"];
55 -> 53 [label="AST"];
56 -> 57 [label="AST"];
56 -> 58 [label="AST"];
60 -> 61 [label="AST"];
63 -> 64 [label="AST"];
65 -> 62 [label="AST"];
65 -> 63 [label="AST"];
65 -> 60 [label="AST"];
66 -> 67 [label="AST"];
66 -> 236 [label="Action"];
68 -> 59 [label="AST"];
68 -> 65 [label="AST"];
68 -> 56 [label="AST"];
68 -> 66 [label="AST"];
68 -> 230 [label="Control Dep"];
68 -> 229 [label="Control Dep"];
68 -> 77 [label="Control Dep"];
68 -> 74 [label="Control Dep"];
68 -> 69 [label="Control Dep"];
68 -> 72 [label="Control Dep"];
68 -> 75 [label="Control Dep"];
68 -> 237 [label="Action"];
69 -> 70 [label="AST"];
72 -> 73 [label="AST"];
74 -> 71 [label="AST"];
74 -> 72 [label="AST"];
74 -> 69 [label="AST"];
75 -> 76 [label="AST"];
77 -> 74 [label="AST"];
77 -> 75 [label="AST"];
77 -> 203 [label="Control Dep"];
77 -> 94 [label="Control Dep"];
77 -> 92 [label="Control Dep"];
77 -> 80 [label="Control Dep"];
77 -> 84 [label="Control Dep"];
77 -> 91 [label="Control Dep"];
77 -> 86 [label="Control Dep"];
77 -> 89 [label="Control Dep"];
77 -> 100 [label="Control Dep"];
77 -> 97 [label="Control Dep"];
77 -> 202 [label="Control Dep"];
77 -> 107 [label="Control Dep"];
77 -> 101 [label="Control Dep"];
77 -> 105 [label="Control Dep"];
77 -> 228 [label="Control Dep"];
77 -> 227 [label="Control Dep"];
77 -> 204 [label="Control Dep"];
77 -> 211 [label="Control Dep"];
77 -> 209 [label="Control Dep"];
77 -> 218 [label="Control Dep"];
77 -> 213 [label="Control Dep"];
77 -> 216 [label="Control Dep"];
77 -> 224 [label="Control Dep"];
77 -> 219 [label="Control Dep"];
77 -> 222 [label="Control Dep"];
77 -> 225 [label="Control Dep"];
78 -> 79 [label="AST"];
80 -> 81 [label="AST"];
80 -> 82 [label="AST"];
84 -> 85 [label="AST"];
84 -> 93 [label="Data Dep"];
86 -> 87 [label="AST"];
89 -> 90 [label="AST"];
89 -> 93 [label="Data Dep"];
91 -> 88 [label="AST"];
91 -> 89 [label="AST"];
91 -> 86 [label="AST"];
92 -> 83 [label="AST"];
92 -> 84 [label="AST"];
92 -> 80 [label="AST"];
92 -> 91 [label="AST"];
93 -> 105 [label="Define-Use"];
93 -> 117 [label="Define-Use"];
94 -> 93 [label="AST"];
94 -> 78 [label="AST"];
94 -> 92 [label="AST"];
95 -> 96 [label="AST"];
97 -> 98 [label="AST"];
99 -> 132 [label="Define-Use"];
99 -> 165 [label="Define-Use"];
100 -> 99 [label="AST"];
100 -> 95 [label="AST"];
100 -> 97 [label="AST"];
101 -> 102 [label="AST"];
101 -> 103 [label="AST"];
105 -> 106 [label="AST"];
107 -> 104 [label="AST"];
107 -> 105 [label="AST"];
107 -> 101 [label="AST"];
107 -> 176 [label="Control Dep"];
107 -> 125 [label="Control Dep"];
107 -> 108 [label="Control Dep"];
107 -> 122 [label="Control Dep"];
107 -> 110 [label="Control Dep"];
107 -> 121 [label="Control Dep"];
107 -> 113 [label="Control Dep"];
107 -> 117 [label="Control Dep"];
107 -> 119 [label="Control Dep"];
107 -> 175 [label="Control Dep"];
107 -> 135 [label="Control Dep"];
107 -> 134 [label="Control Dep"];
107 -> 126 [label="Control Dep"];
107 -> 130 [label="Control Dep"];
107 -> 132 [label="Control Dep"];
107 -> 201 [label="Control Dep"];
107 -> 200 [label="Control Dep"];
107 -> 177 [label="Control Dep"];
107 -> 184 [label="Control Dep"];
107 -> 182 [label="Control Dep"];
107 -> 191 [label="Control Dep"];
107 -> 186 [label="Control Dep"];
107 -> 189 [label="Control Dep"];
107 -> 197 [label="Control Dep"];
107 -> 192 [label="Control Dep"];
107 -> 195 [label="Control Dep"];
107 -> 198 [label="Control Dep"];
108 -> 109 [label="AST"];
108 -> 132 [label="Define-Use"];
108 -> 165 [label="Define-Use"];
109 -> 132 [label="Define-Use"];
109 -> 165 [label="Define-Use"];
110 -> 111 [label="AST"];
113 -> 114 [label="AST"];
113 -> 115 [label="AST"];
117 -> 118 [label="AST"];
117 -> 108 [label="Data Dep"];
119 -> 120 [label="AST"];
121 -> 116 [label="AST"];
121 -> 117 [label="AST"];
121 -> 113 [label="AST"];
121 -> 119 [label="AST"];
122 -> 112 [label="AST"];
122 -> 121 [label="AST"];
122 -> 110 [label="AST"];
123 -> 124 [label="AST"];
125 -> 123 [label="AST"];
125 -> 108 [label="AST"];
125 -> 122 [label="AST"];
126 -> 127 [label="AST"];
126 -> 128 [label="AST"];
130 -> 131 [label="AST"];
132 -> 133 [label="AST"];
134 -> 129 [label="AST"];
134 -> 130 [label="AST"];
134 -> 126 [label="AST"];
134 -> 132 [label="AST"];
135 -> 134 [label="AST"];
135 -> 174 [label="Control Dep"];
135 -> 173 [label="Control Dep"];
135 -> 136 [label="Control Dep"];
135 -> 145 [label="Control Dep"];
135 -> 143 [label="Control Dep"];
135 -> 152 [label="Control Dep"];
135 -> 147 [label="Control Dep"];
135 -> 150 [label="Control Dep"];
135 -> 158 [label="Control Dep"];
135 -> 153 [label="Control Dep"];
135 -> 156 [label="Control Dep"];
135 -> 159 [label="Control Dep"];
135 -> 161 [label="Control Dep"];
135 -> 171 [label="Control Dep"];
135 -> 167 [label="Control Dep"];
135 -> 163 [label="Control Dep"];
135 -> 165 [label="Control Dep"];
135 -> 169 [label="Control Dep"];
136 -> 137 [label="AST"];
136 -> 138 [label="AST"];
136 -> 139 [label="AST"];
136 -> 140 [label="AST"];
136 -> 141 [label="AST"];
143 -> 144 [label="AST"];
145 -> 146 [label="AST"];
145 -> 143 [label="AST"];
147 -> 148 [label="AST"];
150 -> 151 [label="AST"];
152 -> 149 [label="AST"];
152 -> 150 [label="AST"];
152 -> 147 [label="AST"];
153 -> 154 [label="AST"];
156 -> 157 [label="AST"];
158 -> 155 [label="AST"];
158 -> 156 [label="AST"];
158 -> 153 [label="AST"];
159 -> 160 [label="AST"];
161 -> 162 [label="AST"];
163 -> 164 [label="AST"];
165 -> 166 [label="AST"];
167 -> 168 [label="AST"];
167 -> 163 [label="AST"];
167 -> 165 [label="AST"];
169 -> 170 [label="AST"];
171 -> 172 [label="AST"];
171 -> 167 [label="AST"];
171 -> 169 [label="AST"];
173 -> 142 [label="AST"];
173 -> 145 [label="AST"];
173 -> 136 [label="AST"];
173 -> 152 [label="AST"];
173 -> 158 [label="AST"];
173 -> 159 [label="AST"];
173 -> 161 [label="AST"];
173 -> 171 [label="AST"];
174 -> 173 [label="AST"];
175 -> 135 [label="AST"];
175 -> 174 [label="AST"];
176 -> 125 [label="AST"];
176 -> 175 [label="AST"];
177 -> 178 [label="AST"];
177 -> 179 [label="AST"];
177 -> 180 [label="AST"];
182 -> 183 [label="AST"];
184 -> 185 [label="AST"];
184 -> 182 [label="AST"];
186 -> 187 [label="AST"];
189 -> 190 [label="AST"];
191 -> 188 [label="AST"];
191 -> 189 [label="AST"];
191 -> 186 [label="AST"];
192 -> 193 [label="AST"];
195 -> 196 [label="AST"];
197 -> 194 [label="AST"];
197 -> 195 [label="AST"];
197 -> 192 [label="AST"];
198 -> 199 [label="AST"];
200 -> 181 [label="AST"];
200 -> 184 [label="AST"];
200 -> 177 [label="AST"];
200 -> 191 [label="AST"];
200 -> 197 [label="AST"];
200 -> 198 [label="AST"];
201 -> 200 [label="AST"];
202 -> 107 [label="AST"];
202 -> 176 [label="AST"];
202 -> 201 [label="AST"];
203 -> 94 [label="AST"];
203 -> 100 [label="AST"];
203 -> 202 [label="AST"];
204 -> 205 [label="AST"];
204 -> 206 [label="AST"];
204 -> 207 [label="AST"];
209 -> 210 [label="AST"];
211 -> 212 [label="AST"];
211 -> 209 [label="AST"];
213 -> 214 [label="AST"];
216 -> 217 [label="AST"];
218 -> 215 [label="AST"];
218 -> 216 [label="AST"];
218 -> 213 [label="AST"];
219 -> 220 [label="AST"];
222 -> 223 [label="AST"];
224 -> 221 [label="AST"];
224 -> 222 [label="AST"];
224 -> 219 [label="AST"];
225 -> 226 [label="AST"];
227 -> 208 [label="AST"];
227 -> 211 [label="AST"];
227 -> 204 [label="AST"];
227 -> 218 [label="AST"];
227 -> 224 [label="AST"];
227 -> 225 [label="AST"];
228 -> 227 [label="AST"];
229 -> 77 [label="AST"];
229 -> 203 [label="AST"];
229 -> 228 [label="AST"];
230 -> 229 [label="AST"];
231 -> 68 [label="AST"];
231 -> 230 [label="AST"];
232 -> 55 [label="AST"];
232 -> 231 [label="AST"];
233 -> 31 [label="AST"];
233 -> 36 [label="AST"];
233 -> 40 [label="AST"];
233 -> 232 [label="AST"];
234 -> 19 [label="AST"];
234 -> 233 [label="AST"];
235 -> 1 [label="AST"];
235 -> 0 [label="AST"];
235 -> 2 [label="AST"];
235 -> 4 [label="AST"];
235 -> 234 [label="AST"];
237 -> 240 [label="Action"];
239 -> 238 [label="AST"];
240 -> 239 [label="AST"];
}