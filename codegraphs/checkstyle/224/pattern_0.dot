digraph "Pattern" {
0 [label="testSemantic#?#10:UPDATE
testSemantic2#?#10:UPDATE" shape=ellipse]
1 [label="testSemantic#?#10:mConfig.setIllegalInstantiations(((\"java.lang.Boolean,\" + \"com.puppycrawl.tools.checkstyle.InputModifier,\") + \"java.io.File,\") + \"java.awt.Color\")
testSemantic2#?#10:mConfig.setIllegalInstantiations(\"\")" shape=ellipse]
2 [label="testSemantic#?#2:\{
    mConfig.setBooleanProperty(IGNORE_WHITESPACE_PROP, true);
    mConfig.setJavadocScope(NOTHING);
    mConfig.setBlockOptionProperty(TRY_BLOCK_PROP, STMT);
    mConfig.setBlockOptionProperty(CATCH_BLOCK_PROP, STMT);
    mConfig.setBlockOptionProperty(FINALLY_BLOCK_PROP, STMT);
    mConfig.setBooleanProperty(IGNORE_IMPORTS_PROP, true);
    mConfig.setBooleanProperty(IGNORE_LONG_ELL_PROP, false);
    mConfig.setIllegalInstantiations(((\"java.lang.Boolean,\" + \"com.puppycrawl.tools.checkstyle.InputModifier,\") + \"java.io.File,\") + \"java.awt.Color\");
    final Checker c = createChecker();
    final String filepath = getPath(\"InputSemantic.java\");
    assertNotNull(c);
    final String[] expected = new String[]\{ filepath + \":19:21: Avoid instantiation of java.lang.Boolean.\", filepath + \":24:21: Avoid instantiation of java.lang.Boolean.\", filepath + \":30:16: Avoid instantiation of java.lang.Boolean.\", (filepath + \":37:21: Avoid instantiation of \") + \"com.puppycrawl.tools.checkstyle.InputModifier.\", filepath + \":40:18: Avoid instantiation of java.io.File.\", filepath + \":43:21: Avoid instantiation of java.awt.Color.\", filepath + \":51:65: Must have at least one statement.\", filepath + \":53:41: Must have at least one statement.\", filepath + \":70:38: Must have at least one statement.\", filepath + \":71:52: Must have at least one statement.\", filepath + \":72:45: Must have at least one statement.\", filepath + \":74:13: Must have at least one statement.\", filepath + \":76:17: Must have at least one statement.\", filepath + \":78:13: Must have at least one statement.\", filepath + \":81:17: Must have at least one statement.\", filepath + \":93:43: Should use uppercase 'L'.\" \};
    verify(c, filepath, expected);
\}
testSemantic2#?#2:\{
    mConfig.setBooleanProperty(IGNORE_WHITESPACE_PROP, true);
    mConfig.setJavadocScope(NOTHING);
    mConfig.setBlockOptionProperty(TRY_BLOCK_PROP, TEXT);
    mConfig.setBlockOptionProperty(CATCH_BLOCK_PROP, TEXT);
    mConfig.setBlockOptionProperty(FINALLY_BLOCK_PROP, TEXT);
    mConfig.setBooleanProperty(IGNORE_IMPORTS_PROP, true);
    mConfig.setBooleanProperty(IGNORE_LONG_ELL_PROP, true);
    mConfig.setIllegalInstantiations(\"\");
    final Checker c = createChecker();
    final String filepath = getPath(\"InputSemantic.java\");
    assertNotNull(c);
    final String[] expected = new String[]\{ filepath + \":51:65: Empty catch block.\", filepath + \":71:52: Empty catch block.\", filepath + \":72:45: Empty catch block.\", filepath + \":74:13: Empty try block.\", filepath + \":76:17: Empty finally block.\" \};
    verify(c, filepath, expected);
\}" shape=ellipse]
3 [label="testSemantic#?#2:public void testSemantic() throws Exception \{
    mConfig.setBooleanProperty(IGNORE_WHITESPACE_PROP, true);
    mConfig.setJavadocScope(NOTHING);
    mConfig.setBlockOptionProperty(TRY_BLOCK_PROP, STMT);
    mConfig.setBlockOptionProperty(CATCH_BLOCK_PROP, STMT);
    mConfig.setBlockOptionProperty(FINALLY_BLOCK_PROP, STMT);
    mConfig.setBooleanProperty(IGNORE_IMPORTS_PROP, true);
    mConfig.setBooleanProperty(IGNORE_LONG_ELL_PROP, false);
    mConfig.setIllegalInstantiations(((\"java.lang.Boolean,\" + \"com.puppycrawl.tools.checkstyle.InputModifier,\") + \"java.io.File,\") + \"java.awt.Color\");
    final Checker c = createChecker();
    final String filepath = getPath(\"InputSemantic.java\");
    assertNotNull(c);
    final String[] expected = new String[]\{ filepath + \":19:21: Avoid instantiation of java.lang.Boolean.\", filepath + \":24:21: Avoid instantiation of java.lang.Boolean.\", filepath + \":30:16: Avoid instantiation of java.lang.Boolean.\", (filepath + \":37:21: Avoid instantiation of \") + \"com.puppycrawl.tools.checkstyle.InputModifier.\", filepath + \":40:18: Avoid instantiation of java.io.File.\", filepath + \":43:21: Avoid instantiation of java.awt.Color.\", filepath + \":51:65: Must have at least one statement.\", filepath + \":53:41: Must have at least one statement.\", filepath + \":70:38: Must have at least one statement.\", filepath + \":71:52: Must have at least one statement.\", filepath + \":72:45: Must have at least one statement.\", filepath + \":74:13: Must have at least one statement.\", filepath + \":76:17: Must have at least one statement.\", filepath + \":78:13: Must have at least one statement.\", filepath + \":81:17: Must have at least one statement.\", filepath + \":93:43: Should use uppercase 'L'.\" \};
    verify(c, filepath, expected);
\}
testSemantic2#?#2:public void testSemantic2() throws Exception \{
    mConfig.setBooleanProperty(IGNORE_WHITESPACE_PROP, true);
    mConfig.setJavadocScope(NOTHING);
    mConfig.setBlockOptionProperty(TRY_BLOCK_PROP, TEXT);
    mConfig.setBlockOptionProperty(CATCH_BLOCK_PROP, TEXT);
    mConfig.setBlockOptionProperty(FINALLY_BLOCK_PROP, TEXT);
    mConfig.setBooleanProperty(IGNORE_IMPORTS_PROP, true);
    mConfig.setBooleanProperty(IGNORE_LONG_ELL_PROP, true);
    mConfig.setIllegalInstantiations(\"\");
    final Checker c = createChecker();
    final String filepath = getPath(\"InputSemantic.java\");
    assertNotNull(c);
    final String[] expected = new String[]\{ filepath + \":51:65: Empty catch block.\", filepath + \":71:52: Empty catch block.\", filepath + \":72:45: Empty catch block.\", filepath + \":74:13: Empty try block.\", filepath + \":76:17: Empty finally block.\" \};
    verify(c, filepath, expected);
\}" shape=ellipse]
4 [label="testSemantic#?#3:mConfig.setBooleanProperty(IGNORE_WHITESPACE_PROP, true)
testSemantic2#?#3:mConfig.setBooleanProperty(IGNORE_WHITESPACE_PROP, true)" shape=ellipse]
5 [label="testSemantic#?#4:mConfig.setJavadocScope(NOTHING)
testSemantic2#?#4:mConfig.setJavadocScope(NOTHING)" shape=ellipse]
6 [label="testSemantic#?#5:mConfig.setBlockOptionProperty(TRY_BLOCK_PROP, STMT)
testSemantic2#?#5:mConfig.setBlockOptionProperty(TRY_BLOCK_PROP, TEXT)" shape=ellipse]
7 [label="testSemantic#?#6:mConfig.setBlockOptionProperty(CATCH_BLOCK_PROP, STMT)
testSemantic2#?#6:mConfig.setBlockOptionProperty(CATCH_BLOCK_PROP, TEXT)" shape=ellipse]
8 [label="testSemantic#?#7:mConfig.setBlockOptionProperty(FINALLY_BLOCK_PROP, STMT)
testSemantic2#?#7:mConfig.setBlockOptionProperty(FINALLY_BLOCK_PROP, TEXT)" shape=ellipse]
9 [label="testSemantic#?#8:mConfig.setBooleanProperty(IGNORE_IMPORTS_PROP, true)
testSemantic2#?#8:mConfig.setBooleanProperty(IGNORE_IMPORTS_PROP, true)" shape=ellipse]
10 [label="testSemantic#?#9:mConfig.setBooleanProperty(IGNORE_LONG_ELL_PROP, false)
testSemantic2#?#9:mConfig.setBooleanProperty(IGNORE_LONG_ELL_PROP, true)" shape=ellipse]
11 [label="testSemantic#?#14:final Checker c = createChecker()
testSemantic2#?#11:final Checker c = createChecker()" shape=ellipse]
12 [label="testSemantic#?#15:final String filepath = getPath(\"InputSemantic.java\")
testSemantic2#?#12:final String filepath = getPath(\"InputSemantic.java\")" shape=ellipse]
13 [label="testSemantic#?#16:assertNotNull(c)
testSemantic2#?#13:assertNotNull(c)" shape=ellipse]
14 [label="testSemantic#?#17:final String[] expected = new String[]\{ filepath + \":19:21: Avoid instantiation of java.lang.Boolean.\", filepath + \":24:21: Avoid instantiation of java.lang.Boolean.\", filepath + \":30:16: Avoid instantiation of java.lang.Boolean.\", (filepath + \":37:21: Avoid instantiation of \") + \"com.puppycrawl.tools.checkstyle.InputModifier.\", filepath + \":40:18: Avoid instantiation of java.io.File.\", filepath + \":43:21: Avoid instantiation of java.awt.Color.\", filepath + \":51:65: Must have at least one statement.\", filepath + \":53:41: Must have at least one statement.\", filepath + \":70:38: Must have at least one statement.\", filepath + \":71:52: Must have at least one statement.\", filepath + \":72:45: Must have at least one statement.\", filepath + \":74:13: Must have at least one statement.\", filepath + \":76:17: Must have at least one statement.\", filepath + \":78:13: Must have at least one statement.\", filepath + \":81:17: Must have at least one statement.\", filepath + \":93:43: Should use uppercase 'L'.\" \}
testSemantic2#?#14:final String[] expected = new String[]\{ filepath + \":51:65: Empty catch block.\", filepath + \":71:52: Empty catch block.\", filepath + \":72:45: Empty catch block.\", filepath + \":74:13: Empty try block.\", filepath + \":76:17: Empty finally block.\" \}" shape=ellipse]
15 [label="testSemantic#?#37:verify(c, filepath, expected)
testSemantic2#?#22:verify(c, filepath, expected)" shape=ellipse]
16 [label="testSemantic#?#10:setIllegalInstantiations
testSemantic2#?#10:setIllegalInstantiations" shape=ellipse]
17 [label="testSemantic#?#10:mConfig
testSemantic2#?#10:mConfig" shape=ellipse]
18 [label="testSemantic#?#10:mConfig
testSemantic2#?#10:mConfig" shape=ellipse]
19 [label="testSemantic#?#10:setIllegalInstantiations(java.lang.String)
testSemantic2#?#10:setIllegalInstantiations(java.lang.String)" shape=ellipse]
20 [label="testSemantic#?#10:mConfig
testSemantic2#?#10:mConfig" shape=ellipse]
21 [label="testSemantic#?#10:String
testSemantic2#?#10:String" shape=ellipse]
22 [label="testSemantic#?#11:((\"java.lang.Boolean,\" + \"com.puppycrawl.tools.checkstyle.InputModifier,\") + \"java.io.File,\") + \"java.awt.Color\"" shape=ellipse]
23 [label="testSemantic#?#11:String
testSemantic2#?#10:String" shape=ellipse]
24 [label="testSemantic#?#11:((\"java.lang.Boolean,\" + \"com.puppycrawl.tools.checkstyle.InputModifier,\") + \"java.io.File,\")" shape=ellipse]
25 [label="testSemantic#?#13:\"java.awt.Color\"" shape=ellipse]
26 [label="testSemantic#?#10:setStringSetProperty
testSemantic2#?#10:setStringSetProperty" shape=ellipse]
27 [label="testSemantic#?#10:setStringSetProperty(java.lang.String)
testSemantic2#?#10:setStringSetProperty(java.lang.String)" shape=ellipse]
28 [label="testSemantic#?#10:mConfig
testSemantic2#?#10:mConfig" shape=ellipse]
29 [label="testSemantic#?#10:
testSemantic2#?#10:" shape=ellipse]
30 [label="testSemantic#?#10:String
testSemantic2#?#10:String" shape=ellipse]
31 [label="testSemantic#?#10:java.lang
testSemantic2#?#10:java.lang" shape=ellipse]
32 [label="testSemantic#?#11:ILLEGAL_INSTANTIATIONS_PROP
testSemantic2#?#10:ILLEGAL_INSTANTIATIONS_PROP" shape=ellipse]
33 [label="testSemantic#?#11:ILLEGAL_INSTANTIATIONS_PROP
testSemantic2#?#10:ILLEGAL_INSTANTIATIONS_PROP" shape=ellipse]
34 [label="testSemantic#?#11:
testSemantic2#?#10:" shape=ellipse]
35 [label="testSemantic2#?#10:\"\"" shape=ellipse]
1 -> 0 [label="Action:2"];
1 -> 16 [label="AST:2"];
1 -> 17 [label="AST:2"];
1 -> 19 [label="AST:2"];
1 -> 22 [label="AST:1"];
1 -> 35 [label="AST:1"];
2 -> 1 [label="AST:2"];
2 -> 4 [label="AST:2"];
2 -> 5 [label="AST:2"];
2 -> 6 [label="AST:2"];
2 -> 7 [label="AST:2"];
2 -> 8 [label="AST:2"];
2 -> 9 [label="AST:2"];
2 -> 10 [label="AST:2"];
2 -> 11 [label="AST:2"];
2 -> 12 [label="AST:2"];
2 -> 13 [label="AST:2"];
2 -> 14 [label="AST:2"];
2 -> 15 [label="AST:2"];
3 -> 2 [label="AST:2"];
17 -> 18 [label="AST:2"];
19 -> 20 [label="AST:2"];
19 -> 21 [label="AST:2"];
22 -> 23 [label="AST:1"];
22 -> 24 [label="AST:1"];
22 -> 25 [label="AST:1"];
27 -> 28 [label="AST:2"];
27 -> 30 [label="AST:2"];
28 -> 29 [label="AST:2"];
30 -> 31 [label="AST:2"];
32 -> 33 [label="AST:2"];
33 -> 34 [label="AST:2"];
35 -> 23 [label="AST:1"];
}