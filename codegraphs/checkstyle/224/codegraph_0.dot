digraph "testSemantic#?" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@testSemantic" shape=ellipse]
2 [label="2:CtTypeReferenceImpl@Exception" shape=ellipse]
3 [label="2:CtPackageReferenceImpl@java.lang" shape=ellipse]
4 [label="3:CtExecutableReferenceImpl@setBooleanProperty(boolean)" shape=ellipse]
5 [label="3:CtTypeReferenceImpl@mConfig" shape=ellipse]
6 [label="3:CtTypeReferenceImpl@boolean" shape=ellipse]
7 [label="3:CtVirtualElement@setBooleanProperty" shape=ellipse]
8 [label="3:CtFieldReferenceImpl@mConfig" shape=ellipse]
9 [label="3:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
10 [label="3:CtFieldReadImpl@mConfig" shape=ellipse]
11 [label="3:CtTypeAccessImpl@IGNORE_WHITESPACE_PROP" shape=ellipse]
12 [label="3:CtTypeReferenceImpl@IGNORE_WHITESPACE_PROP" shape=ellipse]
13 [label="3:CtLiteralImpl@true" shape=ellipse]
14 [label="3:CtTypeReferenceImpl@boolean" shape=ellipse]
15 [label="3:CtInvocationImpl@mConfig.setBooleanProperty(IGNORE_WHITESPACE_PROP, true)" shape=ellipse]
16 [label="4:CtExecutableReferenceImpl@setJavadocScope()" shape=ellipse]
17 [label="4:CtTypeReferenceImpl@mConfig" shape=ellipse]
18 [label="4:CtVirtualElement@setJavadocScope" shape=ellipse]
19 [label="4:CtFieldReferenceImpl@mConfig" shape=ellipse]
20 [label="4:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
21 [label="4:CtFieldReadImpl@mConfig" shape=ellipse]
22 [label="4:CtTypeAccessImpl@NOTHING" shape=ellipse]
23 [label="4:CtTypeReferenceImpl@NOTHING" shape=ellipse]
24 [label="4:CtInvocationImpl@mConfig.setJavadocScope(NOTHING)" shape=ellipse]
25 [label="5:CtExecutableReferenceImpl@setBlockOptionProperty()" shape=ellipse]
26 [label="5:CtTypeReferenceImpl@mConfig" shape=ellipse]
27 [label="5:CtVirtualElement@setBlockOptionProperty" shape=ellipse]
28 [label="5:CtFieldReferenceImpl@mConfig" shape=ellipse]
29 [label="5:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
30 [label="5:CtFieldReadImpl@mConfig" shape=ellipse]
31 [label="5:CtTypeAccessImpl@TRY_BLOCK_PROP" shape=ellipse]
32 [label="5:CtTypeReferenceImpl@TRY_BLOCK_PROP" shape=ellipse]
33 [label="5:CtTypeAccessImpl@STMT" shape=ellipse]
34 [label="5:CtTypeReferenceImpl@STMT" shape=ellipse]
35 [label="5:CtInvocationImpl@mConfig.setBlockOptionProperty(TRY_BLOCK_PROP, STMT)" shape=ellipse]
36 [label="6:CtExecutableReferenceImpl@setBlockOptionProperty()" shape=ellipse]
37 [label="6:CtTypeReferenceImpl@mConfig" shape=ellipse]
38 [label="6:CtVirtualElement@setBlockOptionProperty" shape=ellipse]
39 [label="6:CtFieldReferenceImpl@mConfig" shape=ellipse]
40 [label="6:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
41 [label="6:CtFieldReadImpl@mConfig" shape=ellipse]
42 [label="6:CtTypeAccessImpl@CATCH_BLOCK_PROP" shape=ellipse]
43 [label="6:CtTypeReferenceImpl@CATCH_BLOCK_PROP" shape=ellipse]
44 [label="6:CtTypeAccessImpl@STMT" shape=ellipse]
45 [label="6:CtTypeReferenceImpl@STMT" shape=ellipse]
46 [label="6:CtInvocationImpl@mConfig.setBlockOptionProperty(CATCH_BLOCK_PROP, STMT)" shape=ellipse]
47 [label="7:CtExecutableReferenceImpl@setBlockOptionProperty()" shape=ellipse]
48 [label="7:CtTypeReferenceImpl@mConfig" shape=ellipse]
49 [label="7:CtVirtualElement@setBlockOptionProperty" shape=ellipse]
50 [label="7:CtFieldReferenceImpl@mConfig" shape=ellipse]
51 [label="7:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
52 [label="7:CtFieldReadImpl@mConfig" shape=ellipse]
53 [label="7:CtTypeAccessImpl@FINALLY_BLOCK_PROP" shape=ellipse]
54 [label="7:CtTypeReferenceImpl@FINALLY_BLOCK_PROP" shape=ellipse]
55 [label="7:CtTypeAccessImpl@STMT" shape=ellipse]
56 [label="7:CtTypeReferenceImpl@STMT" shape=ellipse]
57 [label="7:CtInvocationImpl@mConfig.setBlockOptionProperty(FINALLY_BLOCK_PROP, STMT)" shape=ellipse]
58 [label="8:CtExecutableReferenceImpl@setBooleanProperty(boolean)" shape=ellipse]
59 [label="8:CtTypeReferenceImpl@mConfig" shape=ellipse]
60 [label="8:CtTypeReferenceImpl@boolean" shape=ellipse]
61 [label="8:CtVirtualElement@setBooleanProperty" shape=ellipse]
62 [label="8:CtFieldReferenceImpl@mConfig" shape=ellipse]
63 [label="8:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
64 [label="8:CtFieldReadImpl@mConfig" shape=ellipse]
65 [label="8:CtTypeAccessImpl@IGNORE_IMPORTS_PROP" shape=ellipse]
66 [label="8:CtTypeReferenceImpl@IGNORE_IMPORTS_PROP" shape=ellipse]
67 [label="8:CtLiteralImpl@true" shape=ellipse]
68 [label="8:CtTypeReferenceImpl@boolean" shape=ellipse]
69 [label="8:CtInvocationImpl@mConfig.setBooleanProperty(IGNORE_IMPORTS_PROP, true)" shape=ellipse]
70 [label="9:CtExecutableReferenceImpl@setBooleanProperty(boolean)" shape=ellipse]
71 [label="9:CtTypeReferenceImpl@mConfig" shape=ellipse]
72 [label="9:CtTypeReferenceImpl@boolean" shape=ellipse]
73 [label="9:CtVirtualElement@setBooleanProperty" shape=ellipse]
74 [label="9:CtFieldReferenceImpl@mConfig" shape=ellipse]
75 [label="9:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
76 [label="9:CtFieldReadImpl@mConfig" shape=ellipse]
77 [label="9:CtTypeAccessImpl@IGNORE_LONG_ELL_PROP" shape=ellipse]
78 [label="9:CtTypeReferenceImpl@IGNORE_LONG_ELL_PROP" shape=ellipse]
79 [label="9:CtLiteralImpl@false" shape=ellipse]
80 [label="9:CtTypeReferenceImpl@boolean" shape=ellipse]
81 [label="9:CtInvocationImpl@mConfig.setBooleanProperty(IGNORE_LONG_ELL_PROP, false)" shape=ellipse]
82 [label="10:CtExecutableReferenceImpl@setIllegalInstantiations(java.lang.String)" shape=ellipse]
83 [label="10:CtTypeReferenceImpl@mConfig" shape=ellipse]
84 [label="10:CtTypeReferenceImpl@String" shape=ellipse]
85 [label="10:CtVirtualElement@setIllegalInstantiations" shape=ellipse]
86 [label="10:CtFieldReferenceImpl@mConfig" shape=ellipse]
87 [label="10:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
88 [label="10:CtFieldReadImpl@mConfig" shape=ellipse]
89 [label="11:CtLiteralImpl@\"java.lang.Boolean,\"" shape=ellipse]
90 [label="11:CtTypeReferenceImpl@String" shape=ellipse]
91 [label="11:CtLiteralImpl@\"com.puppycrawl.tools.checkstyle.InputModifier,\"" shape=ellipse]
92 [label="11:CtTypeReferenceImpl@String" shape=ellipse]
93 [label="11:CtBinaryOperatorImpl@(\"java.lang.Boolean,\" + \"com.puppycrawl.tools.checkstyle.InputModifier,\")" shape=ellipse]
94 [label="11:CtTypeReferenceImpl@String" shape=ellipse]
95 [label="12:CtLiteralImpl@\"java.io.File,\"" shape=ellipse]
96 [label="12:CtTypeReferenceImpl@String" shape=ellipse]
97 [label="11:CtBinaryOperatorImpl@((\"java.lang.Boolean,\" + \"com.puppycrawl.tools.checkstyle.InputModifier,\") + \"java.io.File,\")" shape=ellipse]
98 [label="11:CtTypeReferenceImpl@String" shape=ellipse]
99 [label="13:CtLiteralImpl@\"java.awt.Color\"" shape=ellipse]
100 [label="13:CtTypeReferenceImpl@String" shape=ellipse]
101 [label="11:CtBinaryOperatorImpl@((\"java.lang.Boolean,\" + \"com.puppycrawl.tools.checkstyle.InputModifier,\") + \"java.io.File,\") + \"java.awt.Color\"" shape=ellipse]
102 [label="11:CtTypeReferenceImpl@String" shape=ellipse]
103 [label="10:CtInvocationImpl@mConfig.setIllegalInstantiations(((\"java.lang.Boolean,\" + \"com.puppycrawl.tools.checkstyle.InputModifier,\") + \"java.io.File,\") + \"java.awt.Color\")" shape=ellipse]
104 [label="14:CtTypeReferenceImpl@Checker" shape=ellipse]
105 [label="14:CtPackageReferenceImpl@" shape=ellipse]
106 [label="14:CtExecutableReferenceImpl@createChecker()" shape=ellipse]
107 [label="14:CtTypeReferenceImpl@Checker" shape=ellipse]
108 [label="14:CtVirtualElement@createChecker" shape=ellipse]
109 [label="14:CtTypeAccessImpl@PlaceHold" shape=ellipse]
110 [label="14:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
111 [label="14:CtThisAccessImpl@" shape=ellipse]
112 [label="14:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
113 [label="14:CtInvocationImpl@createChecker()" shape=ellipse]
114 [label="14:CtVirtualElement@c" shape=ellipse]
115 [label="14:CtLocalVariableImpl@final Checker c = createChecker()" shape=ellipse]
116 [label="15:CtTypeReferenceImpl@String" shape=ellipse]
117 [label="15:CtPackageReferenceImpl@java.lang" shape=ellipse]
118 [label="15:CtExecutableReferenceImpl@getPath(java.lang.String)" shape=ellipse]
119 [label="15:CtTypeReferenceImpl@String" shape=ellipse]
120 [label="15:CtTypeReferenceImpl@String" shape=ellipse]
121 [label="15:CtVirtualElement@getPath" shape=ellipse]
122 [label="15:CtTypeAccessImpl@PlaceHold" shape=ellipse]
123 [label="15:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
124 [label="15:CtThisAccessImpl@" shape=ellipse]
125 [label="15:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
126 [label="15:CtLiteralImpl@\"InputSemantic.java\"" shape=ellipse]
127 [label="15:CtTypeReferenceImpl@String" shape=ellipse]
128 [label="15:CtInvocationImpl@getPath(\"InputSemantic.java\")" shape=ellipse]
129 [label="15:CtVirtualElement@filepath" shape=ellipse]
130 [label="15:CtLocalVariableImpl@final String filepath = getPath(\"InputSemantic.java\")" shape=ellipse]
131 [label="16:CtExecutableReferenceImpl@assertNotNull(<unknown>)" shape=ellipse]
132 [label="16:CtTypeReferenceImpl@null" shape=ellipse]
133 [label="16:CtVirtualElement@assertNotNull" shape=ellipse]
134 [label="16:CtTypeAccessImpl@PlaceHold" shape=ellipse]
135 [label="16:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
136 [label="16:CtThisAccessImpl@" shape=ellipse]
137 [label="16:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
138 [label="16:CtVariableReadImpl@c" shape=ellipse]
139 [label="16:CtLocalVariableReferenceImpl@c" shape=ellipse]
140 [label="16:CtInvocationImpl@assertNotNull(c)" shape=ellipse]
141 [label="17:CtVirtualElement@String[]" shape=ellipse]
142 [label="17:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
143 [label="17:CtTypeReferenceImpl@String" shape=ellipse]
144 [label="18:CtNewArrayImpl@new String[]\{ filepath + \":19:21: Avoid instantiation of java.lang.Boolean.\", filepath + \":24:21: Avoid instantiation of java.lang.Boolean.\", filepath + \":30:16: Avoid instantiation of java.lang.Boolean.\", (filepath + \":37:21: Avoid instantiation of \") + \"com.puppycrawl.tools.checkstyle.InputModifier.\", filepath + \":40:18: Avoid instantiation of java.io.File.\", filepath + \":43:21: Avoid instantiation of java.awt.Color.\", filepath + \":51:65: Must have at least one statement.\", filepath + \":53:41: Must have at least one statement.\", filepath + \":70:38: Must have at least one statement.\", filepath + \":71:52: Must have at least one statement.\", filepath + \":72:45: Must have at least one statement.\", filepath + \":74:13: Must have at least one statement.\", filepath + \":76:17: Must have at least one statement.\", filepath + \":78:13: Must have at least one statement.\", filepath + \":81:17: Must have at least one statement.\", filepath + \":93:43: Should use uppercase 'L'.\" \}" shape=ellipse]
145 [label="18:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
146 [label="19:CtBinaryOperatorImpl@filepath + \":19:21: Avoid instantiation of java.lang.Boolean.\"" shape=ellipse]
147 [label="20:CtBinaryOperatorImpl@filepath + \":24:21: Avoid instantiation of java.lang.Boolean.\"" shape=ellipse]
148 [label="21:CtBinaryOperatorImpl@filepath + \":30:16: Avoid instantiation of java.lang.Boolean.\"" shape=ellipse]
149 [label="22:CtBinaryOperatorImpl@(filepath + \":37:21: Avoid instantiation of \") + \"com.puppycrawl.tools.checkstyle.InputModifier.\"" shape=ellipse]
150 [label="24:CtBinaryOperatorImpl@filepath + \":40:18: Avoid instantiation of java.io.File.\"" shape=ellipse]
151 [label="25:CtBinaryOperatorImpl@filepath + \":43:21: Avoid instantiation of java.awt.Color.\"" shape=ellipse]
152 [label="26:CtBinaryOperatorImpl@filepath + \":51:65: Must have at least one statement.\"" shape=ellipse]
153 [label="27:CtBinaryOperatorImpl@filepath + \":53:41: Must have at least one statement.\"" shape=ellipse]
154 [label="28:CtBinaryOperatorImpl@filepath + \":70:38: Must have at least one statement.\"" shape=ellipse]
155 [label="29:CtBinaryOperatorImpl@filepath + \":71:52: Must have at least one statement.\"" shape=ellipse]
156 [label="30:CtBinaryOperatorImpl@filepath + \":72:45: Must have at least one statement.\"" shape=ellipse]
157 [label="31:CtBinaryOperatorImpl@filepath + \":74:13: Must have at least one statement.\"" shape=ellipse]
158 [label="32:CtBinaryOperatorImpl@filepath + \":76:17: Must have at least one statement.\"" shape=ellipse]
159 [label="33:CtBinaryOperatorImpl@filepath + \":78:13: Must have at least one statement.\"" shape=ellipse]
160 [label="34:CtBinaryOperatorImpl@filepath + \":81:17: Must have at least one statement.\"" shape=ellipse]
161 [label="35:CtBinaryOperatorImpl@filepath + \":93:43: Should use uppercase 'L'.\"" shape=ellipse]
162 [label="17:CtVirtualElement@expected" shape=ellipse]
163 [label="17:CtLocalVariableImpl@final String[] expected = new String[]\{ filepath + \":19:21: Avoid instantiation of java.lang.Boolean.\", filepath + \":24:21: Avoid instantiation of java.lang.Boolean.\", filepath + \":30:16: Avoid instantiation of java.lang.Boolean.\", (filepath + \":37:21: Avoid instantiation of \") + \"com.puppycrawl.tools.checkstyle.InputModifier.\", filepath + \":40:18: Avoid instantiation of java.io.File.\", filepath + \":43:21: Avoid instantiation of java.awt.Color.\", filepath + \":51:65: Must have at least one statement.\", filepath + \":53:41: Must have at least one statement.\", filepath + \":70:38: Must have at least one statement.\", filepath + \":71:52: Must have at least one statement.\", filepath + \":72:45: Must have at least one statement.\", filepath + \":74:13: Must have at least one statement.\", filepath + \":76:17: Must have at least one statement.\", filepath + \":78:13: Must have at least one statement.\", filepath + \":81:17: Must have at least one statement.\", filepath + \":93:43: Should use uppercase 'L'.\" \}" shape=ellipse]
164 [label="37:CtExecutableReferenceImpl@verify(<unknown>,java.lang.String,java.lang.String[])" shape=ellipse]
165 [label="37:CtTypeReferenceImpl@null" shape=ellipse]
166 [label="37:CtTypeReferenceImpl@String" shape=ellipse]
167 [label="37:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
168 [label="37:CtVirtualElement@verify" shape=ellipse]
169 [label="37:CtTypeAccessImpl@PlaceHold" shape=ellipse]
170 [label="37:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
171 [label="37:CtThisAccessImpl@" shape=ellipse]
172 [label="37:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
173 [label="37:CtVariableReadImpl@c" shape=ellipse]
174 [label="37:CtLocalVariableReferenceImpl@c" shape=ellipse]
175 [label="37:CtVariableReadImpl@filepath" shape=ellipse]
176 [label="37:CtLocalVariableReferenceImpl@filepath" shape=ellipse]
177 [label="37:CtVariableReadImpl@expected" shape=ellipse]
178 [label="37:CtLocalVariableReferenceImpl@expected" shape=ellipse]
179 [label="37:CtInvocationImpl@verify(c, filepath, expected)" shape=ellipse]
180 [label="2:CtBlockImpl@\{
    mConfig.setBooleanProperty(IGNORE_WHITESPACE_PROP, true);
    mConfig.setJavadocScope(NOTHING);
    mConfig.setBlockOptionProperty(TRY_BLOCK_PROP, STMT);
    mConfig.setBlockOptionProperty(CATCH_BLOCK_PROP, STMT);
    mConfig.setBlockOptionProperty(FINALLY_BLOCK_PROP, STMT);
    mConfig.setBooleanProperty(IGNORE_IMPORTS_PROP, true);
    mConfig.setBooleanProperty(IGNORE_LONG_ELL_PROP, false);
    mConfig.setIllegalInstantiations(((\"java.lang.Boolean,\" + \"com.puppycrawl.tools.checkstyle.InputModifier,\") + \"java.io.File,\") + \"java.awt.Color\");
    final Checker c = createChecker();
    final String filepath = getPath(\"InputSemantic.java\");
    assertNotNull(c);
    final String[] expected = new String[]\{ filepath + \":19:21: Avoid instantiation of java.lang.Boolean.\", filepath + \":24:21: Avoid instantiation of java.lang.Boolean.\", filepath + \":30:16: Avoid instantiation of java.lang.Boolean.\", (filepath + \":37:21: Avoid instantiation of \") + \"com.puppycrawl.tools.checkstyle.InputModifier.\", filepath + \":40:18: Avoid instantiation of java.io.File.\", filepath + \":43:21: Avoid instantiation of java.awt.Color.\", filepath + \":51:65: Must have at least one statement.\", filepath + \":53:41: Must have at least one statement.\", filepath + \":70:38: Must have at least one statement.\", filepath + \":71:52: Must have at least one statement.\", filepath + \":72:45: Must have at least one statement.\", filepath + \":74:13: Must have at least one statement.\", filepath + \":76:17: Must have at least one statement.\", filepath + \":78:13: Must have at least one statement.\", filepath + \":81:17: Must have at least one statement.\", filepath + \":93:43: Should use uppercase 'L'.\" \};
    verify(c, filepath, expected);
\}" shape=ellipse]
181 [label="2:CtMethodImpl@public void testSemantic() throws Exception \{
    mConfig.setBooleanProperty(IGNORE_WHITESPACE_PROP, true);
    mConfig.setJavadocScope(NOTHING);
    mConfig.setBlockOptionProperty(TRY_BLOCK_PROP, STMT);
    mConfig.setBlockOptionProperty(CATCH_BLOCK_PROP, STMT);
    mConfig.setBlockOptionProperty(FINALLY_BLOCK_PROP, STMT);
    mConfig.setBooleanProperty(IGNORE_IMPORTS_PROP, true);
    mConfig.setBooleanProperty(IGNORE_LONG_ELL_PROP, false);
    mConfig.setIllegalInstantiations(((\"java.lang.Boolean,\" + \"com.puppycrawl.tools.checkstyle.InputModifier,\") + \"java.io.File,\") + \"java.awt.Color\");
    final Checker c = createChecker();
    final String filepath = getPath(\"InputSemantic.java\");
    assertNotNull(c);
    final String[] expected = new String[]\{ filepath + \":19:21: Avoid instantiation of java.lang.Boolean.\", filepath + \":24:21: Avoid instantiation of java.lang.Boolean.\", filepath + \":30:16: Avoid instantiation of java.lang.Boolean.\", (filepath + \":37:21: Avoid instantiation of \") + \"com.puppycrawl.tools.checkstyle.InputModifier.\", filepath + \":40:18: Avoid instantiation of java.io.File.\", filepath + \":43:21: Avoid instantiation of java.awt.Color.\", filepath + \":51:65: Must have at least one statement.\", filepath + \":53:41: Must have at least one statement.\", filepath + \":70:38: Must have at least one statement.\", filepath + \":71:52: Must have at least one statement.\", filepath + \":72:45: Must have at least one statement.\", filepath + \":74:13: Must have at least one statement.\", filepath + \":76:17: Must have at least one statement.\", filepath + \":78:13: Must have at least one statement.\", filepath + \":81:17: Must have at least one statement.\", filepath + \":93:43: Should use uppercase 'L'.\" \};
    verify(c, filepath, expected);
\}" shape=ellipse]
182 [label="10:Update@UPDATE" shape=ellipse]
183 [label="10:CtPackageReferenceImpl@" shape=ellipse]
184 [label="10:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
185 [label="10:CtFieldReferenceImpl@mConfig" shape=ellipse]
186 [label="10:CtFieldReadImpl@mConfig" shape=ellipse]
187 [label="10:CtPackageReferenceImpl@" shape=ellipse]
188 [label="10:CtTypeReferenceImpl@mConfig" shape=ellipse]
189 [label="10:CtPackageReferenceImpl@java.lang" shape=ellipse]
190 [label="10:CtTypeReferenceImpl@String" shape=ellipse]
191 [label="10:CtExecutableReferenceImpl@setStringSetProperty(java.lang.String)" shape=ellipse]
192 [label="11:CtPackageReferenceImpl@" shape=ellipse]
193 [label="11:CtTypeReferenceImpl@ILLEGAL_INSTANTIATIONS_PROP" shape=ellipse]
194 [label="11:CtTypeAccessImpl@ILLEGAL_INSTANTIATIONS_PROP" shape=ellipse]
195 [label="12:CtPackageReferenceImpl@java.lang" shape=ellipse]
196 [label="12:CtTypeReferenceImpl@String" shape=ellipse]
197 [label="12:CtPackageReferenceImpl@java.lang" shape=ellipse]
198 [label="12:CtTypeReferenceImpl@String" shape=ellipse]
199 [label="12:CtPackageReferenceImpl@java.lang" shape=ellipse]
200 [label="12:CtTypeReferenceImpl@String" shape=ellipse]
201 [label="12:CtPackageReferenceImpl@java.lang" shape=ellipse]
202 [label="12:CtTypeReferenceImpl@String" shape=ellipse]
203 [label="12:CtLiteralImpl@\"java.lang.Boolean,\"" shape=ellipse]
204 [label="12:CtPackageReferenceImpl@java.lang" shape=ellipse]
205 [label="12:CtTypeReferenceImpl@String" shape=ellipse]
206 [label="12:CtLiteralImpl@\"com.puppycrawl.tools.checkstyle.InputModifier,\"" shape=ellipse]
207 [label="12:CtBinaryOperatorImpl@(\"java.lang.Boolean,\" + \"com.puppycrawl.tools.checkstyle.InputModifier,\")" shape=ellipse]
208 [label="13:CtPackageReferenceImpl@java.lang" shape=ellipse]
209 [label="13:CtTypeReferenceImpl@String" shape=ellipse]
210 [label="13:CtLiteralImpl@\"java.io.File,\"" shape=ellipse]
211 [label="12:CtBinaryOperatorImpl@((\"java.lang.Boolean,\" + \"com.puppycrawl.tools.checkstyle.InputModifier,\") + \"java.io.File,\")" shape=ellipse]
212 [label="14:CtPackageReferenceImpl@java.lang" shape=ellipse]
213 [label="14:CtTypeReferenceImpl@String" shape=ellipse]
214 [label="14:CtLiteralImpl@\"java.awt.Color\"" shape=ellipse]
215 [label="12:CtBinaryOperatorImpl@((\"java.lang.Boolean,\" + \"com.puppycrawl.tools.checkstyle.InputModifier,\") + \"java.io.File,\") + \"java.awt.Color\"" shape=ellipse]
216 [label="10:CtInvocationImpl@mConfig.setStringSetProperty(ILLEGAL_INSTANTIATIONS_PROP, ((\"java.lang.Boolean,\" + \"com.puppycrawl.tools.checkstyle.InputModifier,\") + \"java.io.File,\") + \"java.awt.Color\")" shape=ellipse]
217 [label="10:CtVirtualElement@setStringSetProperty" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
4 -> 6 [label="AST"];
8 -> 9 [label="AST"];
10 -> 8 [label="AST"];
11 -> 12 [label="AST"];
13 -> 14 [label="AST"];
15 -> 7 [label="AST"];
15 -> 10 [label="AST"];
15 -> 4 [label="AST"];
15 -> 11 [label="AST"];
15 -> 13 [label="AST"];
16 -> 17 [label="AST"];
19 -> 20 [label="AST"];
21 -> 19 [label="AST"];
22 -> 23 [label="AST"];
24 -> 18 [label="AST"];
24 -> 21 [label="AST"];
24 -> 16 [label="AST"];
24 -> 22 [label="AST"];
25 -> 26 [label="AST"];
28 -> 29 [label="AST"];
30 -> 28 [label="AST"];
31 -> 32 [label="AST"];
33 -> 34 [label="AST"];
35 -> 27 [label="AST"];
35 -> 30 [label="AST"];
35 -> 25 [label="AST"];
35 -> 31 [label="AST"];
35 -> 33 [label="AST"];
36 -> 37 [label="AST"];
39 -> 40 [label="AST"];
41 -> 39 [label="AST"];
42 -> 43 [label="AST"];
44 -> 45 [label="AST"];
46 -> 38 [label="AST"];
46 -> 41 [label="AST"];
46 -> 36 [label="AST"];
46 -> 42 [label="AST"];
46 -> 44 [label="AST"];
47 -> 48 [label="AST"];
50 -> 51 [label="AST"];
52 -> 50 [label="AST"];
53 -> 54 [label="AST"];
55 -> 56 [label="AST"];
57 -> 49 [label="AST"];
57 -> 52 [label="AST"];
57 -> 47 [label="AST"];
57 -> 53 [label="AST"];
57 -> 55 [label="AST"];
58 -> 59 [label="AST"];
58 -> 60 [label="AST"];
62 -> 63 [label="AST"];
64 -> 62 [label="AST"];
65 -> 66 [label="AST"];
67 -> 68 [label="AST"];
69 -> 61 [label="AST"];
69 -> 64 [label="AST"];
69 -> 58 [label="AST"];
69 -> 65 [label="AST"];
69 -> 67 [label="AST"];
70 -> 71 [label="AST"];
70 -> 72 [label="AST"];
74 -> 75 [label="AST"];
76 -> 74 [label="AST"];
77 -> 78 [label="AST"];
79 -> 80 [label="AST"];
81 -> 73 [label="AST"];
81 -> 76 [label="AST"];
81 -> 70 [label="AST"];
81 -> 77 [label="AST"];
81 -> 79 [label="AST"];
82 -> 83 [label="AST"];
82 -> 84 [label="AST"];
86 -> 87 [label="AST"];
88 -> 86 [label="AST"];
89 -> 90 [label="AST"];
91 -> 92 [label="AST"];
93 -> 94 [label="AST"];
93 -> 89 [label="AST"];
93 -> 91 [label="AST"];
95 -> 96 [label="AST"];
97 -> 98 [label="AST"];
97 -> 93 [label="AST"];
97 -> 95 [label="AST"];
99 -> 100 [label="AST"];
101 -> 102 [label="AST"];
101 -> 97 [label="AST"];
101 -> 99 [label="AST"];
103 -> 85 [label="AST"];
103 -> 88 [label="AST"];
103 -> 82 [label="AST"];
103 -> 101 [label="AST"];
103 -> 182 [label="Action"];
104 -> 105 [label="AST"];
106 -> 107 [label="AST"];
109 -> 110 [label="AST"];
111 -> 112 [label="AST"];
111 -> 109 [label="AST"];
111 -> 114 [label="Data Dep"];
113 -> 108 [label="AST"];
113 -> 111 [label="AST"];
113 -> 106 [label="AST"];
114 -> 138 [label="Define-Use"];
114 -> 173 [label="Define-Use"];
115 -> 114 [label="AST"];
115 -> 104 [label="AST"];
115 -> 113 [label="AST"];
116 -> 117 [label="AST"];
118 -> 119 [label="AST"];
118 -> 120 [label="AST"];
122 -> 123 [label="AST"];
124 -> 125 [label="AST"];
124 -> 122 [label="AST"];
124 -> 129 [label="Data Dep"];
126 -> 127 [label="AST"];
128 -> 121 [label="AST"];
128 -> 124 [label="AST"];
128 -> 118 [label="AST"];
128 -> 126 [label="AST"];
129 -> 175 [label="Define-Use"];
130 -> 129 [label="AST"];
130 -> 116 [label="AST"];
130 -> 128 [label="AST"];
131 -> 132 [label="AST"];
134 -> 135 [label="AST"];
136 -> 137 [label="AST"];
136 -> 134 [label="AST"];
138 -> 139 [label="AST"];
140 -> 133 [label="AST"];
140 -> 136 [label="AST"];
140 -> 131 [label="AST"];
140 -> 138 [label="AST"];
142 -> 141 [label="AST"];
142 -> 143 [label="AST"];
144 -> 145 [label="AST"];
144 -> 146 [label="AST"];
144 -> 147 [label="AST"];
144 -> 148 [label="AST"];
144 -> 149 [label="AST"];
144 -> 150 [label="AST"];
144 -> 151 [label="AST"];
144 -> 152 [label="AST"];
144 -> 153 [label="AST"];
144 -> 154 [label="AST"];
144 -> 155 [label="AST"];
144 -> 156 [label="AST"];
144 -> 157 [label="AST"];
144 -> 158 [label="AST"];
144 -> 159 [label="AST"];
144 -> 160 [label="AST"];
144 -> 161 [label="AST"];
162 -> 177 [label="Define-Use"];
163 -> 162 [label="AST"];
163 -> 142 [label="AST"];
163 -> 144 [label="AST"];
164 -> 165 [label="AST"];
164 -> 166 [label="AST"];
164 -> 167 [label="AST"];
169 -> 170 [label="AST"];
171 -> 172 [label="AST"];
171 -> 169 [label="AST"];
173 -> 174 [label="AST"];
175 -> 176 [label="AST"];
177 -> 178 [label="AST"];
179 -> 168 [label="AST"];
179 -> 171 [label="AST"];
179 -> 164 [label="AST"];
179 -> 173 [label="AST"];
179 -> 175 [label="AST"];
179 -> 177 [label="AST"];
180 -> 15 [label="AST"];
180 -> 24 [label="AST"];
180 -> 35 [label="AST"];
180 -> 46 [label="AST"];
180 -> 57 [label="AST"];
180 -> 69 [label="AST"];
180 -> 81 [label="AST"];
180 -> 103 [label="AST"];
180 -> 115 [label="AST"];
180 -> 130 [label="AST"];
180 -> 140 [label="AST"];
180 -> 163 [label="AST"];
180 -> 179 [label="AST"];
181 -> 1 [label="AST"];
181 -> 0 [label="AST"];
181 -> 2 [label="AST"];
181 -> 180 [label="AST"];
182 -> 216 [label="Action"];
184 -> 183 [label="AST"];
185 -> 184 [label="AST"];
186 -> 185 [label="AST"];
188 -> 187 [label="AST"];
190 -> 189 [label="AST"];
191 -> 188 [label="AST"];
191 -> 190 [label="AST"];
193 -> 192 [label="AST"];
194 -> 193 [label="AST"];
196 -> 195 [label="AST"];
198 -> 197 [label="AST"];
200 -> 199 [label="AST"];
202 -> 201 [label="AST"];
203 -> 202 [label="AST"];
205 -> 204 [label="AST"];
206 -> 205 [label="AST"];
207 -> 200 [label="AST"];
207 -> 203 [label="AST"];
207 -> 206 [label="AST"];
209 -> 208 [label="AST"];
210 -> 209 [label="AST"];
211 -> 198 [label="AST"];
211 -> 207 [label="AST"];
211 -> 210 [label="AST"];
213 -> 212 [label="AST"];
214 -> 213 [label="AST"];
215 -> 196 [label="AST"];
215 -> 211 [label="AST"];
215 -> 214 [label="AST"];
216 -> 217 [label="AST"];
216 -> 186 [label="AST"];
216 -> 191 [label="AST"];
216 -> 194 [label="AST"];
216 -> 215 [label="AST"];
}