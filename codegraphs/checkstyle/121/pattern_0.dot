digraph "Pattern" {
0 [label="testDecideRange#?#5:UPDATE
testDecide#?#5:UPDATE
testDecideEmptyRange#?#5:UPDATE" shape=ellipse]
1 [label="testDecideRange#?#5:filter.accept(Integer.valueOf(-1))
testDecide#?#5:filter.accept(Integer.valueOf(-1))
testDecideEmptyRange#?#5:filter.accept(Integer.valueOf(-1))" shape=ellipse]
2 [label="testDecideRange#?#5:assertFalse(\"less than\", filter.accept(Integer.valueOf(-1)))
testDecide#?#5:assertFalse(\"less than\", filter.accept(Integer.valueOf(-1)))
testDecideEmptyRange#?#5:assertFalse(\"less than\", filter.accept(Integer.valueOf(-1)))" shape=ellipse]
3 [label="testDecideRange#?#3:\{
    final IntFilter filter = new CSVFilter(\"0-2\");
    assertFalse(\"less than\", filter.accept(Integer.valueOf(-1)));
    assertTrue(\"equal 0\", filter.accept(Integer.valueOf(0)));
    assertTrue(\"equal 1\", filter.accept(Integer.valueOf(1)));
    assertTrue(\"equal 2\", filter.accept(Integer.valueOf(2)));
    assertFalse(\"greater than\", filter.accept(Integer.valueOf(3)));
\}
testDecide#?#3:\{
    final IntFilter filter = new IntRangeFilter(0, 10);
    assertFalse(\"less than\", filter.accept(Integer.valueOf(-1)));
    assertTrue(\"in range\", filter.accept(Integer.valueOf(0)));
    assertTrue(\"in range\", filter.accept(Integer.valueOf(5)));
    assertTrue(\"in range\", filter.accept(Integer.valueOf(10)));
    assertFalse(\"greater than\", filter.accept(Integer.valueOf(11)));
\}
testDecideEmptyRange#?#3:\{
    final IntFilter filter = new CSVFilter(\"2-0\");
    assertFalse(\"less than\", filter.accept(Integer.valueOf(-1)));
    assertFalse(\"equal 0\", filter.accept(Integer.valueOf(0)));
    assertFalse(\"equal 1\", filter.accept(Integer.valueOf(1)));
    assertFalse(\"equal 2\", filter.accept(Integer.valueOf(2)));
    assertFalse(\"greater than\", filter.accept(Integer.valueOf(3)));
\}" shape=ellipse]
4 [label="testDecideRange#?#3:@Test
public void testDecideRange() \{
    final IntFilter filter = new CSVFilter(\"0-2\");
    assertFalse(\"less than\", filter.accept(Integer.valueOf(-1)));
    assertTrue(\"equal 0\", filter.accept(Integer.valueOf(0)));
    assertTrue(\"equal 1\", filter.accept(Integer.valueOf(1)));
    assertTrue(\"equal 2\", filter.accept(Integer.valueOf(2)));
    assertFalse(\"greater than\", filter.accept(Integer.valueOf(3)));
\}
testDecide#?#3:@Test
public void testDecide() \{
    final IntFilter filter = new IntRangeFilter(0, 10);
    assertFalse(\"less than\", filter.accept(Integer.valueOf(-1)));
    assertTrue(\"in range\", filter.accept(Integer.valueOf(0)));
    assertTrue(\"in range\", filter.accept(Integer.valueOf(5)));
    assertTrue(\"in range\", filter.accept(Integer.valueOf(10)));
    assertFalse(\"greater than\", filter.accept(Integer.valueOf(11)));
\}
testDecideEmptyRange#?#3:@Test
public void testDecideEmptyRange() \{
    final IntFilter filter = new CSVFilter(\"2-0\");
    assertFalse(\"less than\", filter.accept(Integer.valueOf(-1)));
    assertFalse(\"equal 0\", filter.accept(Integer.valueOf(0)));
    assertFalse(\"equal 1\", filter.accept(Integer.valueOf(1)));
    assertFalse(\"equal 2\", filter.accept(Integer.valueOf(2)));
    assertFalse(\"greater than\", filter.accept(Integer.valueOf(3)));
\}" shape=ellipse]
5 [label="testDecideRange#?#3:testDecideRange
testDecide#?#3:testDecide
testDecideEmptyRange#?#3:testDecideEmptyRange" shape=ellipse]
6 [label="testDecideRange#?#2:@Test
testDecide#?#2:@Test
testDecideEmptyRange#?#2:@Test" shape=ellipse]
7 [label="testDecideRange#?#3:void
testDecide#?#3:void
testDecideEmptyRange#?#3:void" shape=ellipse]
8 [label="testDecideRange#?#5:assertFalse
testDecide#?#5:assertFalse
testDecideEmptyRange#?#5:assertFalse" shape=ellipse]
9 [label="testDecideRange#?#5:
testDecide#?#5:
testDecideEmptyRange#?#5:" shape=ellipse]
10 [label="testDecideRange#?#5:assertFalse(java.lang.String,<unknown>)
testDecide#?#5:assertFalse(java.lang.String,<unknown>)
testDecideEmptyRange#?#5:assertFalse(java.lang.String,<unknown>)" shape=ellipse]
11 [label="testDecideRange#?#5:\"less than\"
testDecide#?#5:\"less than\"
testDecideEmptyRange#?#5:\"less than\"" shape=ellipse]
12 [label="testDecideRange#?#5:DELETE
testDecide#?#5:DELETE
testDecideEmptyRange#?#5:DELETE" shape=ellipse]
13 [label="testDecideRange#?#5:accept
testDecide#?#5:accept
testDecideEmptyRange#?#5:accept" shape=ellipse]
14 [label="testDecideRange#?#5:filter
testDecide#?#5:filter
testDecideEmptyRange#?#5:filter" shape=ellipse]
15 [label="testDecideRange#?#4:filter
testDecide#?#4:filter
testDecideEmptyRange#?#4:filter" shape=ellipse]
16 [label="testDecideRange#?#5:filter
testDecide#?#5:filter
testDecideEmptyRange#?#5:filter" shape=ellipse]
17 [label="testDecideRange#?#5:MOVE
testDecide#?#5:MOVE
testDecideEmptyRange#?#5:MOVE" shape=ellipse]
18 [label="testDecideRange#?#5:Integer.valueOf(-1)
testDecide#?#5:Integer.valueOf(-1)
testDecideEmptyRange#?#5:Integer.valueOf(-1)" shape=ellipse]
19 [label="testDecideRange#?#5:valueOf
testDecide#?#5:valueOf
testDecideEmptyRange#?#5:valueOf" shape=ellipse]
20 [label="testDecideRange#?#5:Integer
testDecide#?#5:Integer
testDecideEmptyRange#?#5:Integer" shape=ellipse]
21 [label="testDecideRange#?#5:Integer
testDecide#?#5:Integer
testDecideEmptyRange#?#5:Integer" shape=ellipse]
22 [label="testDecideRange#?#5:valueOf(int)
testDecide#?#5:valueOf(int)
testDecideEmptyRange#?#5:valueOf(int)" shape=ellipse]
23 [label="testDecideRange#?#5:Integer
testDecide#?#5:Integer
testDecideEmptyRange#?#5:Integer" shape=ellipse]
24 [label="testDecideRange#?#5:Integer
testDecide#?#5:Integer
testDecideEmptyRange#?#5:Integer" shape=ellipse]
25 [label="testDecideRange#?#5:int
testDecide#?#5:int
testDecideEmptyRange#?#5:int" shape=ellipse]
26 [label="testDecideRange#?#5:-1
testDecide#?#5:-1
testDecideEmptyRange#?#5:-1" shape=ellipse]
27 [label="testDecideRange#?#5:int
testDecide#?#5:int
testDecideEmptyRange#?#5:int" shape=ellipse]
28 [label="testDecideRange#?#5:1
testDecide#?#5:1
testDecideEmptyRange#?#5:1" shape=ellipse]
29 [label="testDecideRange#?#5:int
testDecide#?#5:int
testDecideEmptyRange#?#5:int" shape=ellipse]
30 [label="testDecideRange#?#5:UPDATE
testDecide#?#5:UPDATE
testDecideEmptyRange#?#5:UPDATE" shape=ellipse]
31 [label="testDecideRange#?#5:accept
testDecide#?#5:accept
testDecideEmptyRange#?#5:accept" shape=ellipse]
32 [label="testDecideRange#?#5:accept(int)
testDecide#?#5:accept(int)
testDecideEmptyRange#?#5:accept(int)" shape=ellipse]
33 [label="testDecideRange#?#5:IntFilter
testDecide#?#5:IntFilter
testDecideEmptyRange#?#5:IntFilter" shape=ellipse]
34 [label="testDecideRange#?#5:
testDecide#?#5:
testDecideEmptyRange#?#5:" shape=ellipse]
35 [label="testDecideRange#?#5:int
testDecide#?#5:int
testDecideEmptyRange#?#5:int" shape=ellipse]
36 [label="testDecideRange#?#5:accept(java.lang.Integer)
testDecide#?#5:accept(java.lang.Integer)
testDecideEmptyRange#?#5:accept(java.lang.Integer)" shape=ellipse]
37 [label="testDecideRange#?#5:IntFilter
testDecide#?#5:IntFilter
testDecideEmptyRange#?#5:IntFilter" shape=ellipse]
38 [label="testDecideRange#?#5:Integer
testDecide#?#5:Integer
testDecideEmptyRange#?#5:Integer" shape=ellipse]
39 [label="testDecideRange#?#5:MOVE
testDecide#?#5:MOVE
testDecideEmptyRange#?#5:MOVE" shape=ellipse]
40 [label="testDecideRange#?#5:assertFalse
testDecide#?#5:assertFalse
testDecideEmptyRange#?#5:assertFalse" shape=ellipse]
41 [label="testDecideRange#?#5:
testDecide#?#5:
testDecideEmptyRange#?#5:" shape=ellipse]
42 [label="testDecideRange#?#5:PlaceHold
testDecide#?#5:PlaceHold
testDecideEmptyRange#?#5:PlaceHold" shape=ellipse]
43 [label="testDecideRange#?#5:
testDecide#?#5:
testDecideEmptyRange#?#5:" shape=ellipse]
44 [label="testDecideRange#?#5:PlaceHold
testDecide#?#5:PlaceHold
testDecideEmptyRange#?#5:PlaceHold" shape=ellipse]
45 [label="testDecideRange#?#5:PlaceHold
testDecide#?#5:PlaceHold
testDecideEmptyRange#?#5:PlaceHold" shape=ellipse]
46 [label="testDecideRange#?#5:
testDecide#?#5:
testDecideEmptyRange#?#5:" shape=ellipse]
47 [label="testDecideRange#?#5:assertFalse(java.lang.String,<unknown>)
testDecide#?#5:assertFalse(java.lang.String,<unknown>)
testDecideEmptyRange#?#5:assertFalse(java.lang.String,<unknown>)" shape=ellipse]
48 [label="testDecideRange#?#5:String
testDecide#?#5:String
testDecideEmptyRange#?#5:String" shape=ellipse]
49 [label="testDecideRange#?#5:java.lang
testDecide#?#5:java.lang
testDecideEmptyRange#?#5:java.lang" shape=ellipse]
50 [label="testDecideRange#?#5:null
testDecide#?#5:null
testDecideEmptyRange#?#5:null" shape=ellipse]
1 -> 0 [label="Action:3"];
1 -> 13 [label="AST:3"];
1 -> 14 [label="AST:3"];
1 -> 36 [label="AST:3"];
1 -> 18 [label="AST:3"];
1 -> 39 [label="Action:3"];
2 -> 1 [label="AST:3"];
2 -> 8 [label="AST:3"];
2 -> 9 [label="AST:3"];
2 -> 10 [label="AST:3"];
2 -> 11 [label="AST:3"];
2 -> 12 [label="Action:3"];
3 -> 2 [label="AST:3"];
4 -> 3 [label="AST:3"];
4 -> 5 [label="AST:3"];
4 -> 6 [label="AST:3"];
4 -> 7 [label="AST:3"];
14 -> 16 [label="AST:3"];
14 -> 17 [label="Action:3"];
15 -> 14 [label="Define Use:3"];
17 -> 18 [label="Action:3"];
18 -> 19 [label="AST:3"];
18 -> 20 [label="AST:3"];
18 -> 22 [label="AST:3"];
18 -> 26 [label="AST:3"];
18 -> 30 [label="Action:3"];
20 -> 21 [label="AST:3"];
22 -> 23 [label="AST:3"];
22 -> 24 [label="AST:3"];
22 -> 25 [label="AST:3"];
26 -> 27 [label="AST:3"];
26 -> 28 [label="AST:3"];
28 -> 29 [label="AST:3"];
32 -> 33 [label="AST:3"];
32 -> 35 [label="AST:3"];
33 -> 34 [label="AST:3"];
36 -> 37 [label="AST:3"];
36 -> 38 [label="AST:3"];
39 -> 4 [label="Action:3"];
41 -> 42 [label="AST:3"];
41 -> 44 [label="AST:3"];
42 -> 43 [label="AST:3"];
44 -> 45 [label="AST:3"];
45 -> 46 [label="AST:3"];
47 -> 48 [label="AST:3"];
47 -> 50 [label="AST:3"];
48 -> 49 [label="AST:3"];
}