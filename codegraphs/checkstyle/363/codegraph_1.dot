digraph "getOutStreamLines#?" {
0 [label="2:CtVirtualElement@String[]" shape=ellipse]
1 [label="2:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
2 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
3 [label="2:CtVirtualElement@getOutStreamLines" shape=ellipse]
4 [label="2:CtTypeReferenceImpl@IOException" shape=ellipse]
5 [label="2:CtPackageReferenceImpl@" shape=ellipse]
6 [label="3:CtVirtualElement@byte[]" shape=ellipse]
7 [label="3:CtArrayTypeReferenceImpl@byte[]" shape=ellipse]
8 [label="3:CtTypeReferenceImpl@byte" shape=ellipse]
9 [label="3:CtExecutableReferenceImpl@toByteArray()" shape=ellipse]
10 [label="3:CtTypeReferenceImpl@outStream" shape=ellipse]
11 [label="3:CtArrayTypeReferenceImpl@byte[]" shape=ellipse]
12 [label="3:CtVirtualElement@toByteArray" shape=ellipse]
13 [label="3:CtFieldReferenceImpl@outStream" shape=ellipse]
14 [label="3:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
15 [label="3:CtFieldReadImpl@outStream" shape=ellipse]
16 [label="3:CtInvocationImpl@outStream.toByteArray()" shape=ellipse]
17 [label="3:CtVirtualElement@bytes" shape=ellipse]
18 [label="3:CtLocalVariableImpl@final byte[] bytes = outStream.toByteArray()" shape=ellipse]
19 [label="4:CtTypeReferenceImpl@ByteArrayInputStream" shape=ellipse]
20 [label="4:CtPackageReferenceImpl@" shape=ellipse]
21 [label="4:CtExecutableReferenceImpl@ByteArrayInputStream(byte[])" shape=ellipse]
22 [label="4:CtTypeReferenceImpl@ByteArrayInputStream" shape=ellipse]
23 [label="4:CtTypeReferenceImpl@ByteArrayInputStream" shape=ellipse]
24 [label="4:CtArrayTypeReferenceImpl@byte[]" shape=ellipse]
25 [label="4:CtVariableReadImpl@bytes" shape=ellipse]
26 [label="4:CtLocalVariableReferenceImpl@bytes" shape=ellipse]
27 [label="4:CtConstructorCallImpl@new ByteArrayInputStream(bytes)" shape=ellipse]
28 [label="4:CtVirtualElement@inStream" shape=ellipse]
29 [label="4:CtLocalVariableImpl@final ByteArrayInputStream inStream = new ByteArrayInputStream(bytes)" shape=ellipse]
30 [label="5:CtTypeReferenceImpl@BufferedReader" shape=ellipse]
31 [label="5:CtPackageReferenceImpl@" shape=ellipse]
32 [label="5:CtExecutableReferenceImpl@BufferedReader(InputStreamReader)" shape=ellipse]
33 [label="5:CtTypeReferenceImpl@BufferedReader" shape=ellipse]
34 [label="5:CtTypeReferenceImpl@BufferedReader" shape=ellipse]
35 [label="5:CtTypeReferenceImpl@InputStreamReader" shape=ellipse]
36 [label="5:CtExecutableReferenceImpl@InputStreamReader()" shape=ellipse]
37 [label="5:CtTypeReferenceImpl@InputStreamReader" shape=ellipse]
38 [label="5:CtTypeReferenceImpl@InputStreamReader" shape=ellipse]
39 [label="5:CtVariableReadImpl@inStream" shape=ellipse]
40 [label="5:CtLocalVariableReferenceImpl@inStream" shape=ellipse]
41 [label="5:CtConstructorCallImpl@new InputStreamReader(inStream)" shape=ellipse]
42 [label="5:CtConstructorCallImpl@new BufferedReader(new InputStreamReader(inStream))" shape=ellipse]
43 [label="5:CtVirtualElement@reader" shape=ellipse]
44 [label="5:CtLocalVariableImpl@final BufferedReader reader = new BufferedReader(new InputStreamReader(inStream))" shape=ellipse]
45 [label="6:CtTypeReferenceImpl@List<String>" shape=ellipse]
46 [label="6:CtPackageReferenceImpl@" shape=ellipse]
47 [label="6:CtTypeReferenceImpl@String" shape=ellipse]
48 [label="6:CtExecutableReferenceImpl@ArrayList()" shape=ellipse]
49 [label="6:CtTypeReferenceImpl@ArrayList<String>" shape=ellipse]
50 [label="6:CtTypeReferenceImpl@ArrayList<String>" shape=ellipse]
51 [label="6:CtConstructorCallImpl@new ArrayList<String>()" shape=ellipse]
52 [label="6:CtVirtualElement@lineList" shape=ellipse]
53 [label="6:CtLocalVariableImpl@final List<String> lineList = new ArrayList<String>()" shape=ellipse]
54 [label="7:CtLiteralImpl@true" shape=ellipse]
55 [label="7:CtTypeReferenceImpl@boolean" shape=ellipse]
56 [label="8:CtTypeReferenceImpl@String" shape=ellipse]
57 [label="8:CtPackageReferenceImpl@java.lang" shape=ellipse]
58 [label="8:CtExecutableReferenceImpl@readLine()" shape=ellipse]
59 [label="8:CtTypeReferenceImpl@BufferedReader" shape=ellipse]
60 [label="8:CtTypeReferenceImpl@String" shape=ellipse]
61 [label="8:CtVirtualElement@readLine" shape=ellipse]
62 [label="8:CtVariableReadImpl@reader" shape=ellipse]
63 [label="8:CtLocalVariableReferenceImpl@reader" shape=ellipse]
64 [label="8:CtInvocationImpl@reader.readLine()" shape=ellipse]
65 [label="8:CtVirtualElement@line" shape=ellipse]
66 [label="8:CtLocalVariableImpl@final String line = reader.readLine()" shape=ellipse]
67 [label="9:CtVariableReadImpl@line" shape=ellipse]
68 [label="9:CtLocalVariableReferenceImpl@line" shape=ellipse]
69 [label="9:CtLiteralImpl@null" shape=ellipse]
70 [label="9:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
71 [label="9:CtBinaryOperatorImpl@line == null" shape=ellipse]
72 [label="9:CtTypeReferenceImpl@boolean" shape=ellipse]
73 [label="10:CtBreakImpl@break" shape=ellipse]
74 [label="9:CtBlockImpl@\{
    break;
\}" shape=ellipse]
75 [label="9:CtIfImpl@if (line == null) \{
    break;
\}" shape=ellipse]
76 [label="12:CtExecutableReferenceImpl@add(java.lang.String)" shape=ellipse]
77 [label="12:CtTypeReferenceImpl@List<String>" shape=ellipse]
78 [label="12:CtTypeReferenceImpl@String" shape=ellipse]
79 [label="12:CtVirtualElement@add" shape=ellipse]
80 [label="12:CtVariableReadImpl@lineList" shape=ellipse]
81 [label="12:CtLocalVariableReferenceImpl@lineList" shape=ellipse]
82 [label="12:CtVariableReadImpl@line" shape=ellipse]
83 [label="12:CtLocalVariableReferenceImpl@line" shape=ellipse]
84 [label="12:CtInvocationImpl@lineList.add(line)" shape=ellipse]
85 [label="7:CtBlockImpl@\{
    final String line = reader.readLine();
    if (line == null) \{
        break;
    \}
    lineList.add(line);
\}" shape=ellipse]
86 [label="7:CtWhileImpl@while (true) \{
    final String line = reader.readLine();
    if (line == null) \{
        break;
    \}
    lineList.add(line);
\} " shape=ellipse]
87 [label="14:CtExecutableReferenceImpl@close()" shape=ellipse]
88 [label="14:CtTypeReferenceImpl@BufferedReader" shape=ellipse]
89 [label="14:CtVirtualElement@close" shape=ellipse]
90 [label="14:CtVariableReadImpl@reader" shape=ellipse]
91 [label="14:CtLocalVariableReferenceImpl@reader" shape=ellipse]
92 [label="14:CtInvocationImpl@reader.close()" shape=ellipse]
93 [label="15:CtExecutableReferenceImpl@toArray(java.lang.String[])" shape=ellipse]
94 [label="15:CtTypeReferenceImpl@List<String>" shape=ellipse]
95 [label="15:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
96 [label="15:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
97 [label="15:CtVirtualElement@toArray" shape=ellipse]
98 [label="15:CtVariableReadImpl@lineList" shape=ellipse]
99 [label="15:CtLocalVariableReferenceImpl@lineList" shape=ellipse]
100 [label="15:CtNewArrayImpl@new String[lineList.size()]" shape=ellipse]
101 [label="15:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
102 [label="15:CtInvocationImpl@lineList.size()" shape=ellipse]
103 [label="15:CtInvocationImpl@lineList.toArray(new String[lineList.size()])" shape=ellipse]
104 [label="15:CtReturnImpl@return lineList.toArray(new String[lineList.size()])" shape=ellipse]
105 [label="2:CtBlockImpl@\{
    final byte[] bytes = outStream.toByteArray();
    final ByteArrayInputStream inStream = new ByteArrayInputStream(bytes);
    final BufferedReader reader = new BufferedReader(new InputStreamReader(inStream));
    final List<String> lineList = new ArrayList<String>();
    while (true) \{
        final String line = reader.readLine();
        if (line == null) \{
            break;
        \}
        lineList.add(line);
    \} 
    reader.close();
    return lineList.toArray(new String[lineList.size()]);
\}" shape=ellipse]
106 [label="2:CtMethodImpl@private String[] getOutStreamLines() throws IOException \{
    final byte[] bytes = outStream.toByteArray();
    final ByteArrayInputStream inStream = new ByteArrayInputStream(bytes);
    final BufferedReader reader = new BufferedReader(new InputStreamReader(inStream));
    final List<String> lineList = new ArrayList<String>();
    while (true) \{
        final String line = reader.readLine();
        if (line == null) \{
            break;
        \}
        lineList.add(line);
    \} 
    reader.close();
    return lineList.toArray(new String[lineList.size()]);
\}" shape=ellipse]
107 [label="6:Delete@DELETE" shape=ellipse]
108 [label="6:Insert@INSERT" shape=ellipse]
109 [label="6:CtPackageReferenceImpl@" shape=ellipse]
110 [label="6:CtTypeReferenceImpl@Lists" shape=ellipse]
111 [label="6:CtTypeAccessImpl@Lists" shape=ellipse]
112 [label="6:CtPackageReferenceImpl@" shape=ellipse]
113 [label="6:CtTypeReferenceImpl@Lists" shape=ellipse]
114 [label="6:CtPackageReferenceImpl@" shape=ellipse]
115 [label="6:CtPackageReferenceImpl@java.lang" shape=ellipse]
116 [label="6:CtTypeReferenceImpl@String" shape=ellipse]
117 [label="6:CtTypeReferenceImpl@List<String>" shape=ellipse]
118 [label="6:CtExecutableReferenceImpl@newArrayList()" shape=ellipse]
119 [label="6:CtInvocationImpl@Lists.newArrayList()" shape=ellipse]
120 [label="6:CtVirtualElement@newArrayList" shape=ellipse]
1 -> 0 [label="AST"];
1 -> 2 [label="AST"];
4 -> 5 [label="AST"];
7 -> 6 [label="AST"];
7 -> 8 [label="AST"];
9 -> 10 [label="AST"];
9 -> 11 [label="AST"];
13 -> 14 [label="AST"];
15 -> 13 [label="AST"];
15 -> 17 [label="Data Dep"];
16 -> 12 [label="AST"];
16 -> 15 [label="AST"];
16 -> 9 [label="AST"];
17 -> 25 [label="Define-Use"];
18 -> 17 [label="AST"];
18 -> 7 [label="AST"];
18 -> 16 [label="AST"];
19 -> 20 [label="AST"];
21 -> 22 [label="AST"];
21 -> 23 [label="AST"];
21 -> 24 [label="AST"];
25 -> 26 [label="AST"];
25 -> 28 [label="Data Dep"];
27 -> 21 [label="AST"];
27 -> 25 [label="AST"];
28 -> 39 [label="Define-Use"];
29 -> 28 [label="AST"];
29 -> 19 [label="AST"];
29 -> 27 [label="AST"];
30 -> 31 [label="AST"];
32 -> 33 [label="AST"];
32 -> 34 [label="AST"];
32 -> 35 [label="AST"];
36 -> 37 [label="AST"];
36 -> 38 [label="AST"];
39 -> 40 [label="AST"];
39 -> 43 [label="Data Dep"];
41 -> 36 [label="AST"];
41 -> 39 [label="AST"];
42 -> 32 [label="AST"];
42 -> 41 [label="AST"];
43 -> 62 [label="Define-Use"];
43 -> 90 [label="Define-Use"];
44 -> 43 [label="AST"];
44 -> 30 [label="AST"];
44 -> 42 [label="AST"];
45 -> 46 [label="AST"];
45 -> 47 [label="AST"];
48 -> 49 [label="AST"];
48 -> 50 [label="AST"];
51 -> 48 [label="AST"];
51 -> 107 [label="Action"];
52 -> 80 [label="Define-Use"];
52 -> 98 [label="Define-Use"];
53 -> 52 [label="AST"];
53 -> 45 [label="AST"];
53 -> 51 [label="AST"];
53 -> 108 [label="Action"];
54 -> 55 [label="AST"];
54 -> 85 [label="Control Dep"];
54 -> 66 [label="Control Dep"];
54 -> 64 [label="Control Dep"];
54 -> 58 [label="Control Dep"];
54 -> 62 [label="Control Dep"];
54 -> 75 [label="Control Dep"];
54 -> 71 [label="Control Dep"];
54 -> 67 [label="Control Dep"];
54 -> 69 [label="Control Dep"];
54 -> 84 [label="Control Dep"];
54 -> 76 [label="Control Dep"];
54 -> 80 [label="Control Dep"];
54 -> 82 [label="Control Dep"];
56 -> 57 [label="AST"];
58 -> 59 [label="AST"];
58 -> 60 [label="AST"];
62 -> 63 [label="AST"];
62 -> 65 [label="Data Dep"];
64 -> 61 [label="AST"];
64 -> 62 [label="AST"];
64 -> 58 [label="AST"];
65 -> 67 [label="Define-Use"];
65 -> 82 [label="Define-Use"];
66 -> 65 [label="AST"];
66 -> 56 [label="AST"];
66 -> 64 [label="AST"];
67 -> 68 [label="AST"];
69 -> 70 [label="AST"];
71 -> 72 [label="AST"];
71 -> 67 [label="AST"];
71 -> 69 [label="AST"];
71 -> 74 [label="Control Dep"];
71 -> 73 [label="Control Dep"];
74 -> 73 [label="AST"];
75 -> 71 [label="AST"];
75 -> 74 [label="AST"];
76 -> 77 [label="AST"];
76 -> 78 [label="AST"];
80 -> 81 [label="AST"];
82 -> 83 [label="AST"];
84 -> 79 [label="AST"];
84 -> 80 [label="AST"];
84 -> 76 [label="AST"];
84 -> 82 [label="AST"];
85 -> 66 [label="AST"];
85 -> 75 [label="AST"];
85 -> 84 [label="AST"];
86 -> 54 [label="AST"];
86 -> 85 [label="AST"];
87 -> 88 [label="AST"];
90 -> 91 [label="AST"];
92 -> 89 [label="AST"];
92 -> 90 [label="AST"];
92 -> 87 [label="AST"];
93 -> 94 [label="AST"];
93 -> 95 [label="AST"];
93 -> 96 [label="AST"];
98 -> 99 [label="AST"];
100 -> 101 [label="AST"];
100 -> 102 [label="AST"];
103 -> 97 [label="AST"];
103 -> 98 [label="AST"];
103 -> 93 [label="AST"];
103 -> 100 [label="AST"];
104 -> 103 [label="AST"];
105 -> 18 [label="AST"];
105 -> 29 [label="AST"];
105 -> 44 [label="AST"];
105 -> 53 [label="AST"];
105 -> 86 [label="AST"];
105 -> 92 [label="AST"];
105 -> 104 [label="AST"];
106 -> 3 [label="AST"];
106 -> 1 [label="AST"];
106 -> 4 [label="AST"];
106 -> 105 [label="AST"];
108 -> 119 [label="Action"];
110 -> 109 [label="AST"];
111 -> 110 [label="AST"];
113 -> 112 [label="AST"];
116 -> 115 [label="AST"];
117 -> 114 [label="AST"];
117 -> 116 [label="AST"];
118 -> 113 [label="AST"];
118 -> 117 [label="AST"];
119 -> 120 [label="AST"];
119 -> 111 [label="AST"];
119 -> 118 [label="AST"];
}