digraph "getLines#?,String,String" {
0 [label="2:CtVirtualElement@String[]" shape=ellipse]
1 [label="2:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
2 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
3 [label="2:CtVirtualElement@getLines" shape=ellipse]
4 [label="2:CtParameterImpl@String aFileName" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
6 [label="2:CtParameterImpl@String aCharsetName" shape=ellipse]
7 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
8 [label="2:CtTypeReferenceImpl@IOException" shape=ellipse]
9 [label="2:CtPackageReferenceImpl@" shape=ellipse]
10 [label="3:CtTypeReferenceImpl@List<String>" shape=ellipse]
11 [label="3:CtPackageReferenceImpl@" shape=ellipse]
12 [label="3:CtTypeReferenceImpl@String" shape=ellipse]
13 [label="3:CtExecutableReferenceImpl@ArrayList()" shape=ellipse]
14 [label="3:CtTypeReferenceImpl@ArrayList<String>" shape=ellipse]
15 [label="3:CtTypeReferenceImpl@ArrayList<String>" shape=ellipse]
16 [label="3:CtConstructorCallImpl@new ArrayList<String>()" shape=ellipse]
17 [label="3:CtVirtualElement@lines" shape=ellipse]
18 [label="3:CtLocalVariableImpl@final List<String> lines = new ArrayList<String>()" shape=ellipse]
19 [label="4:CtTypeReferenceImpl@FileInputStream" shape=ellipse]
20 [label="4:CtPackageReferenceImpl@" shape=ellipse]
21 [label="4:CtExecutableReferenceImpl@FileInputStream(java.lang.String)" shape=ellipse]
22 [label="4:CtTypeReferenceImpl@FileInputStream" shape=ellipse]
23 [label="4:CtTypeReferenceImpl@FileInputStream" shape=ellipse]
24 [label="4:CtTypeReferenceImpl@String" shape=ellipse]
25 [label="4:CtVariableReadImpl@aFileName" shape=ellipse]
26 [label="4:CtParameterReferenceImpl@aFileName" shape=ellipse]
27 [label="4:CtConstructorCallImpl@new FileInputStream(aFileName)" shape=ellipse]
28 [label="4:CtVirtualElement@fr" shape=ellipse]
29 [label="4:CtLocalVariableImpl@final FileInputStream fr = new FileInputStream(aFileName)" shape=ellipse]
30 [label="5:CtTypeReferenceImpl@LineNumberReader" shape=ellipse]
31 [label="5:CtPackageReferenceImpl@" shape=ellipse]
32 [label="5:CtLiteralImpl@null" shape=ellipse]
33 [label="5:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
34 [label="5:CtVirtualElement@lnr" shape=ellipse]
35 [label="5:CtLocalVariableImpl@LineNumberReader lnr = null" shape=ellipse]
36 [label="7:CtVariableWriteImpl@lnr" shape=ellipse]
37 [label="7:CtLocalVariableReferenceImpl@lnr" shape=ellipse]
38 [label="7:CtExecutableReferenceImpl@LineNumberReader(InputStreamReader)" shape=ellipse]
39 [label="7:CtTypeReferenceImpl@LineNumberReader" shape=ellipse]
40 [label="7:CtTypeReferenceImpl@LineNumberReader" shape=ellipse]
41 [label="7:CtTypeReferenceImpl@InputStreamReader" shape=ellipse]
42 [label="7:CtExecutableReferenceImpl@InputStreamReader()" shape=ellipse]
43 [label="7:CtTypeReferenceImpl@InputStreamReader" shape=ellipse]
44 [label="7:CtTypeReferenceImpl@InputStreamReader" shape=ellipse]
45 [label="7:CtVariableReadImpl@fr" shape=ellipse]
46 [label="7:CtLocalVariableReferenceImpl@fr" shape=ellipse]
47 [label="7:CtVariableReadImpl@aCharsetName" shape=ellipse]
48 [label="7:CtParameterReferenceImpl@aCharsetName" shape=ellipse]
49 [label="7:CtConstructorCallImpl@new InputStreamReader(fr, aCharsetName)" shape=ellipse]
50 [label="7:CtConstructorCallImpl@new LineNumberReader(new InputStreamReader(fr, aCharsetName))" shape=ellipse]
51 [label="7:CtAssignmentImpl@lnr = new LineNumberReader(new InputStreamReader(fr, aCharsetName))" shape=ellipse]
52 [label="6:CtBlockImpl@\{
    lnr = new LineNumberReader(new InputStreamReader(fr, aCharsetName));
\}" shape=ellipse]
53 [label="8:CtVirtualElement@ex" shape=ellipse]
54 [label="8:CtTypeReferenceImpl@UnsupportedEncodingException" shape=ellipse]
55 [label="8:CtPackageReferenceImpl@" shape=ellipse]
56 [label="8:CtCatchVariableImpl@final UnsupportedEncodingException ex" shape=ellipse]
57 [label="9:CtTypeReferenceImpl@String" shape=ellipse]
58 [label="9:CtPackageReferenceImpl@java.lang" shape=ellipse]
59 [label="9:CtLiteralImpl@\"unsupported charset: \"" shape=ellipse]
60 [label="9:CtTypeReferenceImpl@String" shape=ellipse]
61 [label="9:CtExecutableReferenceImpl@getMessage()" shape=ellipse]
62 [label="9:CtTypeReferenceImpl@UnsupportedEncodingException" shape=ellipse]
63 [label="9:CtVirtualElement@getMessage" shape=ellipse]
64 [label="9:CtVariableReadImpl@ex" shape=ellipse]
65 [label="9:CtCatchVariableReferenceImpl@ex" shape=ellipse]
66 [label="9:CtInvocationImpl@ex.getMessage()" shape=ellipse]
67 [label="9:CtBinaryOperatorImpl@\"unsupported charset: \" + ex.getMessage()" shape=ellipse]
68 [label="9:CtVirtualElement@message" shape=ellipse]
69 [label="9:CtLocalVariableImpl@final String message = \"unsupported charset: \" + ex.getMessage()" shape=ellipse]
70 [label="10:CtExecutableReferenceImpl@UnsupportedEncodingException(java.lang.String)" shape=ellipse]
71 [label="10:CtTypeReferenceImpl@UnsupportedEncodingException" shape=ellipse]
72 [label="10:CtTypeReferenceImpl@UnsupportedEncodingException" shape=ellipse]
73 [label="10:CtTypeReferenceImpl@String" shape=ellipse]
74 [label="10:CtVariableReadImpl@message" shape=ellipse]
75 [label="10:CtLocalVariableReferenceImpl@message" shape=ellipse]
76 [label="10:CtConstructorCallImpl@new UnsupportedEncodingException(message)" shape=ellipse]
77 [label="10:CtThrowImpl@throw new UnsupportedEncodingException(message)" shape=ellipse]
78 [label="8:CtBlockImpl@\{
    final String message = \"unsupported charset: \" + ex.getMessage();
    throw new UnsupportedEncodingException(message);
\}" shape=ellipse]
79 [label="8:CtCatchImpl@ catch (final UnsupportedEncodingException ex) \{
    final String message = \"unsupported charset: \" + ex.getMessage();
    throw new UnsupportedEncodingException(message);
\}" shape=ellipse]
80 [label="6:CtTryImpl@try \{
    lnr = new LineNumberReader(new InputStreamReader(fr, aCharsetName));
\} catch (final UnsupportedEncodingException ex) \{
    final String message = \"unsupported charset: \" + ex.getMessage();
    throw new UnsupportedEncodingException(message);
\}" shape=ellipse]
81 [label="13:CtLiteralImpl@true" shape=ellipse]
82 [label="13:CtTypeReferenceImpl@boolean" shape=ellipse]
83 [label="14:CtTypeReferenceImpl@String" shape=ellipse]
84 [label="14:CtPackageReferenceImpl@java.lang" shape=ellipse]
85 [label="14:CtExecutableReferenceImpl@readLine()" shape=ellipse]
86 [label="14:CtTypeReferenceImpl@LineNumberReader" shape=ellipse]
87 [label="14:CtTypeReferenceImpl@String" shape=ellipse]
88 [label="14:CtVirtualElement@readLine" shape=ellipse]
89 [label="14:CtVariableReadImpl@lnr" shape=ellipse]
90 [label="14:CtLocalVariableReferenceImpl@lnr" shape=ellipse]
91 [label="14:CtInvocationImpl@lnr.readLine()" shape=ellipse]
92 [label="14:CtVirtualElement@l" shape=ellipse]
93 [label="14:CtLocalVariableImpl@final String l = lnr.readLine()" shape=ellipse]
94 [label="15:CtVariableReadImpl@l" shape=ellipse]
95 [label="15:CtLocalVariableReferenceImpl@l" shape=ellipse]
96 [label="15:CtLiteralImpl@null" shape=ellipse]
97 [label="15:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
98 [label="15:CtBinaryOperatorImpl@l == null" shape=ellipse]
99 [label="15:CtTypeReferenceImpl@boolean" shape=ellipse]
100 [label="16:CtBreakImpl@break" shape=ellipse]
101 [label="15:CtBlockImpl@\{
    break;
\}" shape=ellipse]
102 [label="15:CtIfImpl@if (l == null) \{
    break;
\}" shape=ellipse]
103 [label="18:CtExecutableReferenceImpl@add(java.lang.String)" shape=ellipse]
104 [label="18:CtTypeReferenceImpl@List<String>" shape=ellipse]
105 [label="18:CtTypeReferenceImpl@String" shape=ellipse]
106 [label="18:CtVirtualElement@add" shape=ellipse]
107 [label="18:CtVariableReadImpl@lines" shape=ellipse]
108 [label="18:CtLocalVariableReferenceImpl@lines" shape=ellipse]
109 [label="18:CtVariableReadImpl@l" shape=ellipse]
110 [label="18:CtLocalVariableReferenceImpl@l" shape=ellipse]
111 [label="18:CtInvocationImpl@lines.add(l)" shape=ellipse]
112 [label="13:CtBlockImpl@\{
    final String l = lnr.readLine();
    if (l == null) \{
        break;
    \}
    lines.add(l);
\}" shape=ellipse]
113 [label="13:CtWhileImpl@while (true) \{
    final String l = lnr.readLine();
    if (l == null) \{
        break;
    \}
    lines.add(l);
\} " shape=ellipse]
114 [label="12:CtBlockImpl@\{
    while (true) \{
        final String l = lnr.readLine();
        if (l == null) \{
            break;
        \}
        lines.add(l);
    \} 
\}" shape=ellipse]
115 [label="22:CtExecutableReferenceImpl@close()" shape=ellipse]
116 [label="22:CtTypeReferenceImpl@LineNumberReader" shape=ellipse]
117 [label="22:CtVirtualElement@close" shape=ellipse]
118 [label="22:CtVariableReadImpl@lnr" shape=ellipse]
119 [label="22:CtLocalVariableReferenceImpl@lnr" shape=ellipse]
120 [label="22:CtInvocationImpl@lnr.close()" shape=ellipse]
121 [label="21:CtBlockImpl@\{
    lnr.close();
\}" shape=ellipse]
122 [label="23:CtVirtualElement@e" shape=ellipse]
123 [label="23:CtTypeReferenceImpl@IOException" shape=ellipse]
124 [label="23:CtPackageReferenceImpl@" shape=ellipse]
125 [label="23:CtCatchVariableImpl@final IOException e" shape=ellipse]
126 [label="23:CtBlockImpl@\{
\}" shape=ellipse]
127 [label="23:CtCatchImpl@ catch (final IOException e) \{
\}" shape=ellipse]
128 [label="21:CtTryImpl@try \{
    lnr.close();
\} catch (final IOException e) \{
\}" shape=ellipse]
129 [label="20:CtBlockImpl@\{
    try \{
        lnr.close();
    \} catch (final IOException e) \{
    \}
\}" shape=ellipse]
130 [label="12:CtTryImpl@try \{
    while (true) \{
        final String l = lnr.readLine();
        if (l == null) \{
            break;
        \}
        lines.add(l);
    \} 
\} finally \{
    try \{
        lnr.close();
    \} catch (final IOException e) \{
    \}
\}" shape=ellipse]
131 [label="26:CtExecutableReferenceImpl@toArray(java.lang.String[])" shape=ellipse]
132 [label="26:CtTypeReferenceImpl@List<String>" shape=ellipse]
133 [label="26:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
134 [label="26:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
135 [label="26:CtVirtualElement@toArray" shape=ellipse]
136 [label="26:CtVariableReadImpl@lines" shape=ellipse]
137 [label="26:CtLocalVariableReferenceImpl@lines" shape=ellipse]
138 [label="26:CtNewArrayImpl@new String[0]" shape=ellipse]
139 [label="26:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
140 [label="26:CtLiteralImpl@0" shape=ellipse]
141 [label="26:CtInvocationImpl@lines.toArray(new String[0])" shape=ellipse]
142 [label="26:CtReturnImpl@return lines.toArray(new String[0])" shape=ellipse]
143 [label="2:CtBlockImpl@\{
    final List<String> lines = new ArrayList<String>();
    final FileInputStream fr = new FileInputStream(aFileName);
    LineNumberReader lnr = null;
    try \{
        lnr = new LineNumberReader(new InputStreamReader(fr, aCharsetName));
    \} catch (final UnsupportedEncodingException ex) \{
        final String message = \"unsupported charset: \" + ex.getMessage();
        throw new UnsupportedEncodingException(message);
    \}
    try \{
        while (true) \{
            final String l = lnr.readLine();
            if (l == null) \{
                break;
            \}
            lines.add(l);
        \} 
    \} finally \{
        try \{
            lnr.close();
        \} catch (final IOException e) \{
        \}
    \}
    return lines.toArray(new String[0]);
\}" shape=ellipse]
144 [label="2:CtMethodImpl@public static String[] getLines(String aFileName, String aCharsetName) throws IOException \{
    final List<String> lines = new ArrayList<String>();
    final FileInputStream fr = new FileInputStream(aFileName);
    LineNumberReader lnr = null;
    try \{
        lnr = new LineNumberReader(new InputStreamReader(fr, aCharsetName));
    \} catch (final UnsupportedEncodingException ex) \{
        final String message = \"unsupported charset: \" + ex.getMessage();
        throw new UnsupportedEncodingException(message);
    \}
    try \{
        while (true) \{
            final String l = lnr.readLine();
            if (l == null) \{
                break;
            \}
            lines.add(l);
        \} 
    \} finally \{
        try \{
            lnr.close();
        \} catch (final IOException e) \{
        \}
    \}
    return lines.toArray(new String[0]);
\}" shape=ellipse]
145 [label="3:Delete@DELETE" shape=ellipse]
146 [label="3:Insert@INSERT" shape=ellipse]
147 [label="3:CtPackageReferenceImpl@" shape=ellipse]
148 [label="3:CtTypeReferenceImpl@Lists" shape=ellipse]
149 [label="3:CtTypeAccessImpl@Lists" shape=ellipse]
150 [label="3:CtPackageReferenceImpl@" shape=ellipse]
151 [label="3:CtTypeReferenceImpl@Lists" shape=ellipse]
152 [label="3:CtPackageReferenceImpl@" shape=ellipse]
153 [label="3:CtPackageReferenceImpl@java.lang" shape=ellipse]
154 [label="3:CtTypeReferenceImpl@String" shape=ellipse]
155 [label="3:CtTypeReferenceImpl@List<String>" shape=ellipse]
156 [label="3:CtExecutableReferenceImpl@newArrayList()" shape=ellipse]
157 [label="3:CtInvocationImpl@Lists.newArrayList()" shape=ellipse]
158 [label="3:CtVirtualElement@newArrayList" shape=ellipse]
1 -> 0 [label="AST"];
1 -> 2 [label="AST"];
4 -> 5 [label="AST"];
6 -> 7 [label="AST"];
8 -> 9 [label="AST"];
10 -> 11 [label="AST"];
10 -> 12 [label="AST"];
13 -> 14 [label="AST"];
13 -> 15 [label="AST"];
16 -> 13 [label="AST"];
16 -> 145 [label="Action"];
17 -> 107 [label="Define-Use"];
17 -> 136 [label="Define-Use"];
18 -> 17 [label="AST"];
18 -> 10 [label="AST"];
18 -> 16 [label="AST"];
18 -> 146 [label="Action"];
19 -> 20 [label="AST"];
21 -> 22 [label="AST"];
21 -> 23 [label="AST"];
21 -> 24 [label="AST"];
25 -> 26 [label="AST"];
25 -> 28 [label="Data Dep"];
27 -> 21 [label="AST"];
27 -> 25 [label="AST"];
28 -> 45 [label="Define-Use"];
29 -> 28 [label="AST"];
29 -> 19 [label="AST"];
29 -> 27 [label="AST"];
30 -> 31 [label="AST"];
32 -> 33 [label="AST"];
35 -> 34 [label="AST"];
35 -> 30 [label="AST"];
35 -> 32 [label="AST"];
36 -> 37 [label="AST"];
36 -> 89 [label="Define-Use"];
36 -> 118 [label="Define-Use"];
38 -> 39 [label="AST"];
38 -> 40 [label="AST"];
38 -> 41 [label="AST"];
42 -> 43 [label="AST"];
42 -> 44 [label="AST"];
45 -> 46 [label="AST"];
45 -> 36 [label="Data Dep"];
47 -> 48 [label="AST"];
47 -> 36 [label="Data Dep"];
49 -> 42 [label="AST"];
49 -> 45 [label="AST"];
49 -> 47 [label="AST"];
50 -> 38 [label="AST"];
50 -> 49 [label="AST"];
51 -> 36 [label="AST"];
51 -> 50 [label="AST"];
52 -> 51 [label="AST"];
53 -> 64 [label="Define-Use"];
54 -> 55 [label="AST"];
56 -> 53 [label="AST"];
56 -> 54 [label="AST"];
56 -> 78 [label="Control Dep"];
56 -> 69 [label="Control Dep"];
56 -> 67 [label="Control Dep"];
56 -> 59 [label="Control Dep"];
56 -> 66 [label="Control Dep"];
56 -> 61 [label="Control Dep"];
56 -> 64 [label="Control Dep"];
56 -> 77 [label="Control Dep"];
56 -> 76 [label="Control Dep"];
56 -> 70 [label="Control Dep"];
56 -> 74 [label="Control Dep"];
57 -> 58 [label="AST"];
59 -> 60 [label="AST"];
61 -> 62 [label="AST"];
64 -> 65 [label="AST"];
64 -> 68 [label="Data Dep"];
66 -> 63 [label="AST"];
66 -> 64 [label="AST"];
66 -> 61 [label="AST"];
67 -> 59 [label="AST"];
67 -> 66 [label="AST"];
68 -> 74 [label="Define-Use"];
69 -> 68 [label="AST"];
69 -> 57 [label="AST"];
69 -> 67 [label="AST"];
70 -> 71 [label="AST"];
70 -> 72 [label="AST"];
70 -> 73 [label="AST"];
74 -> 75 [label="AST"];
76 -> 70 [label="AST"];
76 -> 74 [label="AST"];
77 -> 76 [label="AST"];
78 -> 69 [label="AST"];
78 -> 77 [label="AST"];
79 -> 56 [label="AST"];
79 -> 78 [label="AST"];
80 -> 52 [label="AST"];
80 -> 79 [label="AST"];
81 -> 82 [label="AST"];
81 -> 112 [label="Control Dep"];
81 -> 93 [label="Control Dep"];
81 -> 91 [label="Control Dep"];
81 -> 85 [label="Control Dep"];
81 -> 89 [label="Control Dep"];
81 -> 102 [label="Control Dep"];
81 -> 98 [label="Control Dep"];
81 -> 94 [label="Control Dep"];
81 -> 96 [label="Control Dep"];
81 -> 111 [label="Control Dep"];
81 -> 103 [label="Control Dep"];
81 -> 107 [label="Control Dep"];
81 -> 109 [label="Control Dep"];
83 -> 84 [label="AST"];
85 -> 86 [label="AST"];
85 -> 87 [label="AST"];
89 -> 90 [label="AST"];
89 -> 92 [label="Data Dep"];
91 -> 88 [label="AST"];
91 -> 89 [label="AST"];
91 -> 85 [label="AST"];
92 -> 94 [label="Define-Use"];
92 -> 109 [label="Define-Use"];
93 -> 92 [label="AST"];
93 -> 83 [label="AST"];
93 -> 91 [label="AST"];
94 -> 95 [label="AST"];
96 -> 97 [label="AST"];
98 -> 99 [label="AST"];
98 -> 94 [label="AST"];
98 -> 96 [label="AST"];
98 -> 101 [label="Control Dep"];
98 -> 100 [label="Control Dep"];
101 -> 100 [label="AST"];
102 -> 98 [label="AST"];
102 -> 101 [label="AST"];
103 -> 104 [label="AST"];
103 -> 105 [label="AST"];
107 -> 108 [label="AST"];
109 -> 110 [label="AST"];
111 -> 106 [label="AST"];
111 -> 107 [label="AST"];
111 -> 103 [label="AST"];
111 -> 109 [label="AST"];
112 -> 93 [label="AST"];
112 -> 102 [label="AST"];
112 -> 111 [label="AST"];
113 -> 81 [label="AST"];
113 -> 112 [label="AST"];
114 -> 113 [label="AST"];
115 -> 116 [label="AST"];
118 -> 119 [label="AST"];
120 -> 117 [label="AST"];
120 -> 118 [label="AST"];
120 -> 115 [label="AST"];
121 -> 120 [label="AST"];
123 -> 124 [label="AST"];
125 -> 122 [label="AST"];
125 -> 123 [label="AST"];
125 -> 126 [label="Control Dep"];
127 -> 125 [label="AST"];
127 -> 126 [label="AST"];
128 -> 121 [label="AST"];
128 -> 127 [label="AST"];
129 -> 128 [label="AST"];
130 -> 114 [label="AST"];
130 -> 129 [label="AST"];
131 -> 132 [label="AST"];
131 -> 133 [label="AST"];
131 -> 134 [label="AST"];
136 -> 137 [label="AST"];
138 -> 139 [label="AST"];
138 -> 140 [label="AST"];
141 -> 135 [label="AST"];
141 -> 136 [label="AST"];
141 -> 131 [label="AST"];
141 -> 138 [label="AST"];
142 -> 141 [label="AST"];
143 -> 18 [label="AST"];
143 -> 29 [label="AST"];
143 -> 35 [label="AST"];
143 -> 80 [label="AST"];
143 -> 130 [label="AST"];
143 -> 142 [label="AST"];
144 -> 3 [label="AST"];
144 -> 1 [label="AST"];
144 -> 4 [label="AST"];
144 -> 6 [label="AST"];
144 -> 8 [label="AST"];
144 -> 143 [label="AST"];
146 -> 157 [label="Action"];
148 -> 147 [label="AST"];
149 -> 148 [label="AST"];
151 -> 150 [label="AST"];
154 -> 153 [label="AST"];
155 -> 152 [label="AST"];
155 -> 154 [label="AST"];
156 -> 151 [label="AST"];
156 -> 155 [label="AST"];
157 -> 158 [label="AST"];
157 -> 149 [label="AST"];
157 -> 156 [label="AST"];
}