digraph "getTypeParameterNames#?,DetailAST" {
0 [label="2:CtTypeReferenceImpl@List<String>" shape=ellipse]
1 [label="2:CtPackageReferenceImpl@" shape=ellipse]
2 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
3 [label="2:CtVirtualElement@getTypeParameterNames" shape=ellipse]
4 [label="2:CtParameterImpl@final DetailAST aNode" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@DetailAST" shape=ellipse]
6 [label="3:CtTypeReferenceImpl@DetailAST" shape=ellipse]
7 [label="3:CtPackageReferenceImpl@" shape=ellipse]
8 [label="3:CtExecutableReferenceImpl@findFirstToken()" shape=ellipse]
9 [label="3:CtTypeReferenceImpl@DetailAST" shape=ellipse]
10 [label="3:CtTypeReferenceImpl@DetailAST" shape=ellipse]
11 [label="3:CtVirtualElement@findFirstToken" shape=ellipse]
12 [label="3:CtVariableReadImpl@aNode" shape=ellipse]
13 [label="3:CtParameterReferenceImpl@aNode" shape=ellipse]
14 [label="3:CtTypeAccessImpl@TYPE_PARAMETERS" shape=ellipse]
15 [label="3:CtTypeReferenceImpl@TYPE_PARAMETERS" shape=ellipse]
16 [label="3:CtInvocationImpl@aNode.findFirstToken(TYPE_PARAMETERS)" shape=ellipse]
17 [label="3:CtVirtualElement@typeParameters" shape=ellipse]
18 [label="3:CtLocalVariableImpl@final DetailAST typeParameters = aNode.findFirstToken(TYPE_PARAMETERS)" shape=ellipse]
19 [label="4:CtTypeReferenceImpl@List<String>" shape=ellipse]
20 [label="4:CtPackageReferenceImpl@" shape=ellipse]
21 [label="4:CtTypeReferenceImpl@String" shape=ellipse]
22 [label="4:CtExecutableReferenceImpl@ArrayList()" shape=ellipse]
23 [label="4:CtTypeReferenceImpl@ArrayList<String>" shape=ellipse]
24 [label="4:CtTypeReferenceImpl@ArrayList<String>" shape=ellipse]
25 [label="4:CtConstructorCallImpl@new ArrayList<String>()" shape=ellipse]
26 [label="4:CtVirtualElement@typeParamNames" shape=ellipse]
27 [label="4:CtLocalVariableImpl@final List<String> typeParamNames = new ArrayList<String>()" shape=ellipse]
28 [label="5:CtVariableReadImpl@typeParameters" shape=ellipse]
29 [label="5:CtLocalVariableReferenceImpl@typeParameters" shape=ellipse]
30 [label="5:CtLiteralImpl@null" shape=ellipse]
31 [label="5:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
32 [label="5:CtBinaryOperatorImpl@typeParameters != null" shape=ellipse]
33 [label="6:CtTypeReferenceImpl@DetailAST" shape=ellipse]
34 [label="6:CtPackageReferenceImpl@" shape=ellipse]
35 [label="6:CtExecutableReferenceImpl@findFirstToken()" shape=ellipse]
36 [label="6:CtTypeReferenceImpl@DetailAST" shape=ellipse]
37 [label="6:CtTypeReferenceImpl@DetailAST" shape=ellipse]
38 [label="6:CtVirtualElement@findFirstToken" shape=ellipse]
39 [label="6:CtVariableReadImpl@typeParameters" shape=ellipse]
40 [label="6:CtLocalVariableReferenceImpl@typeParameters" shape=ellipse]
41 [label="6:CtTypeAccessImpl@TYPE_PARAMETER" shape=ellipse]
42 [label="6:CtTypeReferenceImpl@TYPE_PARAMETER" shape=ellipse]
43 [label="6:CtInvocationImpl@typeParameters.findFirstToken(TYPE_PARAMETER)" shape=ellipse]
44 [label="6:CtVirtualElement@typeParam" shape=ellipse]
45 [label="6:CtLocalVariableImpl@final DetailAST typeParam = typeParameters.findFirstToken(TYPE_PARAMETER)" shape=ellipse]
46 [label="7:CtExecutableReferenceImpl@add()" shape=ellipse]
47 [label="7:CtTypeReferenceImpl@List<String>" shape=ellipse]
48 [label="7:CtVirtualElement@add" shape=ellipse]
49 [label="7:CtVariableReadImpl@typeParamNames" shape=ellipse]
50 [label="7:CtLocalVariableReferenceImpl@typeParamNames" shape=ellipse]
51 [label="7:CtExecutableReferenceImpl@getText()" shape=ellipse]
52 [label="7:CtVirtualElement@getText" shape=ellipse]
53 [label="7:CtExecutableReferenceImpl@findFirstToken()" shape=ellipse]
54 [label="7:CtTypeReferenceImpl@DetailAST" shape=ellipse]
55 [label="7:CtVirtualElement@findFirstToken" shape=ellipse]
56 [label="7:CtVariableReadImpl@typeParam" shape=ellipse]
57 [label="7:CtLocalVariableReferenceImpl@typeParam" shape=ellipse]
58 [label="7:CtTypeAccessImpl@IDENT" shape=ellipse]
59 [label="7:CtTypeReferenceImpl@IDENT" shape=ellipse]
60 [label="7:CtInvocationImpl@typeParam.findFirstToken(IDENT)" shape=ellipse]
61 [label="7:CtInvocationImpl@typeParam.findFirstToken(IDENT).getText()" shape=ellipse]
62 [label="7:CtInvocationImpl@typeParamNames.add(typeParam.findFirstToken(IDENT).getText())" shape=ellipse]
63 [label="8:CtTypeReferenceImpl@DetailAST" shape=ellipse]
64 [label="8:CtPackageReferenceImpl@" shape=ellipse]
65 [label="8:CtExecutableReferenceImpl@getNextSibling()" shape=ellipse]
66 [label="8:CtTypeReferenceImpl@DetailAST" shape=ellipse]
67 [label="8:CtVirtualElement@getNextSibling" shape=ellipse]
68 [label="8:CtVariableReadImpl@typeParam" shape=ellipse]
69 [label="8:CtLocalVariableReferenceImpl@typeParam" shape=ellipse]
70 [label="8:CtInvocationImpl@((DetailAST) (typeParam.getNextSibling()))" shape=ellipse]
71 [label="8:CtTypeReferenceImpl@DetailAST" shape=ellipse]
72 [label="8:CtVirtualElement@sibling" shape=ellipse]
73 [label="8:CtLocalVariableImpl@DetailAST sibling = ((DetailAST) (typeParam.getNextSibling()))" shape=ellipse]
74 [label="9:CtVariableReadImpl@sibling" shape=ellipse]
75 [label="9:CtLocalVariableReferenceImpl@sibling" shape=ellipse]
76 [label="9:CtLiteralImpl@null" shape=ellipse]
77 [label="9:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
78 [label="9:CtBinaryOperatorImpl@sibling != null" shape=ellipse]
79 [label="10:CtExecutableReferenceImpl@getType()" shape=ellipse]
80 [label="10:CtTypeReferenceImpl@DetailAST" shape=ellipse]
81 [label="10:CtVirtualElement@getType" shape=ellipse]
82 [label="10:CtVariableReadImpl@sibling" shape=ellipse]
83 [label="10:CtLocalVariableReferenceImpl@sibling" shape=ellipse]
84 [label="10:CtInvocationImpl@sibling.getType()" shape=ellipse]
85 [label="10:CtFieldReferenceImpl@TokenTypes.TYPE_PARAMETER" shape=ellipse]
86 [label="10:CtTypeReferenceImpl@TokenTypes" shape=ellipse]
87 [label="10:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
88 [label="10:CtFieldReadImpl@TokenTypes.TYPE_PARAMETER" shape=ellipse]
89 [label="10:CtTypeAccessImpl@TokenTypes" shape=ellipse]
90 [label="10:CtBinaryOperatorImpl@sibling.getType() == TokenTypes.TYPE_PARAMETER" shape=ellipse]
91 [label="11:CtExecutableReferenceImpl@add()" shape=ellipse]
92 [label="11:CtTypeReferenceImpl@List<String>" shape=ellipse]
93 [label="11:CtVirtualElement@add" shape=ellipse]
94 [label="11:CtVariableReadImpl@typeParamNames" shape=ellipse]
95 [label="11:CtLocalVariableReferenceImpl@typeParamNames" shape=ellipse]
96 [label="11:CtExecutableReferenceImpl@getText()" shape=ellipse]
97 [label="11:CtVirtualElement@getText" shape=ellipse]
98 [label="11:CtExecutableReferenceImpl@findFirstToken()" shape=ellipse]
99 [label="11:CtTypeReferenceImpl@DetailAST" shape=ellipse]
100 [label="11:CtVirtualElement@findFirstToken" shape=ellipse]
101 [label="11:CtVariableReadImpl@sibling" shape=ellipse]
102 [label="11:CtLocalVariableReferenceImpl@sibling" shape=ellipse]
103 [label="11:CtTypeAccessImpl@IDENT" shape=ellipse]
104 [label="11:CtTypeReferenceImpl@IDENT" shape=ellipse]
105 [label="11:CtInvocationImpl@sibling.findFirstToken(IDENT)" shape=ellipse]
106 [label="11:CtInvocationImpl@sibling.findFirstToken(IDENT).getText()" shape=ellipse]
107 [label="11:CtInvocationImpl@typeParamNames.add(sibling.findFirstToken(IDENT).getText())" shape=ellipse]
108 [label="10:CtBlockImpl@\{
    typeParamNames.add(sibling.findFirstToken(IDENT).getText());
\}" shape=ellipse]
109 [label="10:CtIfImpl@if (sibling.getType() == TokenTypes.TYPE_PARAMETER) \{
    typeParamNames.add(sibling.findFirstToken(IDENT).getText());
\}" shape=ellipse]
110 [label="13:CtVariableWriteImpl@sibling" shape=ellipse]
111 [label="13:CtLocalVariableReferenceImpl@sibling" shape=ellipse]
112 [label="13:CtExecutableReferenceImpl@getNextSibling()" shape=ellipse]
113 [label="13:CtTypeReferenceImpl@DetailAST" shape=ellipse]
114 [label="13:CtVirtualElement@getNextSibling" shape=ellipse]
115 [label="13:CtVariableReadImpl@sibling" shape=ellipse]
116 [label="13:CtLocalVariableReferenceImpl@sibling" shape=ellipse]
117 [label="13:CtInvocationImpl@((DetailAST) (sibling.getNextSibling()))" shape=ellipse]
118 [label="13:CtTypeReferenceImpl@DetailAST" shape=ellipse]
119 [label="13:CtAssignmentImpl@sibling = ((DetailAST) (sibling.getNextSibling()))" shape=ellipse]
120 [label="9:CtBlockImpl@\{
    if (sibling.getType() == TokenTypes.TYPE_PARAMETER) \{
        typeParamNames.add(sibling.findFirstToken(IDENT).getText());
    \}
    sibling = ((DetailAST) (sibling.getNextSibling()));
\}" shape=ellipse]
121 [label="9:CtWhileImpl@while (sibling != null) \{
    if (sibling.getType() == TokenTypes.TYPE_PARAMETER) \{
        typeParamNames.add(sibling.findFirstToken(IDENT).getText());
    \}
    sibling = ((DetailAST) (sibling.getNextSibling()));
\} " shape=ellipse]
122 [label="5:CtBlockImpl@\{
    final DetailAST typeParam = typeParameters.findFirstToken(TYPE_PARAMETER);
    typeParamNames.add(typeParam.findFirstToken(IDENT).getText());
    DetailAST sibling = ((DetailAST) (typeParam.getNextSibling()));
    while (sibling != null) \{
        if (sibling.getType() == TokenTypes.TYPE_PARAMETER) \{
            typeParamNames.add(sibling.findFirstToken(IDENT).getText());
        \}
        sibling = ((DetailAST) (sibling.getNextSibling()));
    \} 
\}" shape=ellipse]
123 [label="5:CtIfImpl@if (typeParameters != null) \{
    final DetailAST typeParam = typeParameters.findFirstToken(TYPE_PARAMETER);
    typeParamNames.add(typeParam.findFirstToken(IDENT).getText());
    DetailAST sibling = ((DetailAST) (typeParam.getNextSibling()));
    while (sibling != null) \{
        if (sibling.getType() == TokenTypes.TYPE_PARAMETER) \{
            typeParamNames.add(sibling.findFirstToken(IDENT).getText());
        \}
        sibling = ((DetailAST) (sibling.getNextSibling()));
    \} 
\}" shape=ellipse]
124 [label="16:CtVariableReadImpl@typeParamNames" shape=ellipse]
125 [label="16:CtLocalVariableReferenceImpl@typeParamNames" shape=ellipse]
126 [label="16:CtReturnImpl@return typeParamNames" shape=ellipse]
127 [label="2:CtBlockImpl@\{
    final DetailAST typeParameters = aNode.findFirstToken(TYPE_PARAMETERS);
    final List<String> typeParamNames = new ArrayList<String>();
    if (typeParameters != null) \{
        final DetailAST typeParam = typeParameters.findFirstToken(TYPE_PARAMETER);
        typeParamNames.add(typeParam.findFirstToken(IDENT).getText());
        DetailAST sibling = ((DetailAST) (typeParam.getNextSibling()));
        while (sibling != null) \{
            if (sibling.getType() == TokenTypes.TYPE_PARAMETER) \{
                typeParamNames.add(sibling.findFirstToken(IDENT).getText());
            \}
            sibling = ((DetailAST) (sibling.getNextSibling()));
        \} 
    \}
    return typeParamNames;
\}" shape=ellipse]
128 [label="2:CtMethodImpl@public static List<String> getTypeParameterNames(final DetailAST aNode) \{
    final DetailAST typeParameters = aNode.findFirstToken(TYPE_PARAMETERS);
    final List<String> typeParamNames = new ArrayList<String>();
    if (typeParameters != null) \{
        final DetailAST typeParam = typeParameters.findFirstToken(TYPE_PARAMETER);
        typeParamNames.add(typeParam.findFirstToken(IDENT).getText());
        DetailAST sibling = ((DetailAST) (typeParam.getNextSibling()));
        while (sibling != null) \{
            if (sibling.getType() == TokenTypes.TYPE_PARAMETER) \{
                typeParamNames.add(sibling.findFirstToken(IDENT).getText());
            \}
            sibling = ((DetailAST) (sibling.getNextSibling()));
        \} 
    \}
    return typeParamNames;
\}" shape=ellipse]
129 [label="4:Delete@DELETE" shape=ellipse]
130 [label="4:Insert@INSERT" shape=ellipse]
131 [label="4:CtPackageReferenceImpl@" shape=ellipse]
132 [label="4:CtTypeReferenceImpl@Lists" shape=ellipse]
133 [label="4:CtTypeAccessImpl@Lists" shape=ellipse]
134 [label="4:CtPackageReferenceImpl@" shape=ellipse]
135 [label="4:CtTypeReferenceImpl@Lists" shape=ellipse]
136 [label="4:CtPackageReferenceImpl@" shape=ellipse]
137 [label="4:CtPackageReferenceImpl@java.lang" shape=ellipse]
138 [label="4:CtTypeReferenceImpl@String" shape=ellipse]
139 [label="4:CtTypeReferenceImpl@List<String>" shape=ellipse]
140 [label="4:CtExecutableReferenceImpl@newArrayList()" shape=ellipse]
141 [label="4:CtInvocationImpl@Lists.newArrayList()" shape=ellipse]
142 [label="4:CtVirtualElement@newArrayList" shape=ellipse]
0 -> 1 [label="AST"];
0 -> 2 [label="AST"];
4 -> 5 [label="AST"];
6 -> 7 [label="AST"];
8 -> 9 [label="AST"];
8 -> 10 [label="AST"];
12 -> 13 [label="AST"];
12 -> 17 [label="Data Dep"];
14 -> 15 [label="AST"];
16 -> 11 [label="AST"];
16 -> 12 [label="AST"];
16 -> 8 [label="AST"];
16 -> 14 [label="AST"];
17 -> 28 [label="Define-Use"];
17 -> 39 [label="Define-Use"];
18 -> 17 [label="AST"];
18 -> 6 [label="AST"];
18 -> 16 [label="AST"];
19 -> 20 [label="AST"];
19 -> 21 [label="AST"];
22 -> 23 [label="AST"];
22 -> 24 [label="AST"];
25 -> 22 [label="AST"];
25 -> 129 [label="Action"];
26 -> 49 [label="Define-Use"];
26 -> 94 [label="Define-Use"];
26 -> 124 [label="Define-Use"];
27 -> 26 [label="AST"];
27 -> 19 [label="AST"];
27 -> 25 [label="AST"];
27 -> 130 [label="Action"];
28 -> 29 [label="AST"];
30 -> 31 [label="AST"];
32 -> 28 [label="AST"];
32 -> 30 [label="AST"];
32 -> 122 [label="Control Dep"];
32 -> 45 [label="Control Dep"];
32 -> 43 [label="Control Dep"];
32 -> 35 [label="Control Dep"];
32 -> 39 [label="Control Dep"];
32 -> 41 [label="Control Dep"];
32 -> 62 [label="Control Dep"];
32 -> 46 [label="Control Dep"];
32 -> 49 [label="Control Dep"];
32 -> 61 [label="Control Dep"];
32 -> 51 [label="Control Dep"];
32 -> 60 [label="Control Dep"];
32 -> 53 [label="Control Dep"];
32 -> 56 [label="Control Dep"];
32 -> 58 [label="Control Dep"];
32 -> 73 [label="Control Dep"];
32 -> 70 [label="Control Dep"];
32 -> 65 [label="Control Dep"];
32 -> 68 [label="Control Dep"];
32 -> 121 [label="Control Dep"];
32 -> 78 [label="Control Dep"];
32 -> 74 [label="Control Dep"];
32 -> 76 [label="Control Dep"];
33 -> 34 [label="AST"];
35 -> 36 [label="AST"];
35 -> 37 [label="AST"];
39 -> 40 [label="AST"];
39 -> 44 [label="Data Dep"];
41 -> 42 [label="AST"];
43 -> 38 [label="AST"];
43 -> 39 [label="AST"];
43 -> 35 [label="AST"];
43 -> 41 [label="AST"];
44 -> 56 [label="Define-Use"];
44 -> 68 [label="Define-Use"];
45 -> 44 [label="AST"];
45 -> 33 [label="AST"];
45 -> 43 [label="AST"];
46 -> 47 [label="AST"];
49 -> 50 [label="AST"];
53 -> 54 [label="AST"];
56 -> 57 [label="AST"];
58 -> 59 [label="AST"];
60 -> 55 [label="AST"];
60 -> 56 [label="AST"];
60 -> 53 [label="AST"];
60 -> 58 [label="AST"];
61 -> 52 [label="AST"];
61 -> 60 [label="AST"];
61 -> 51 [label="AST"];
62 -> 48 [label="AST"];
62 -> 49 [label="AST"];
62 -> 46 [label="AST"];
62 -> 61 [label="AST"];
63 -> 64 [label="AST"];
65 -> 66 [label="AST"];
68 -> 69 [label="AST"];
68 -> 72 [label="Data Dep"];
70 -> 67 [label="AST"];
70 -> 71 [label="AST"];
70 -> 68 [label="AST"];
70 -> 65 [label="AST"];
72 -> 74 [label="Define-Use"];
72 -> 82 [label="Define-Use"];
72 -> 101 [label="Define-Use"];
73 -> 72 [label="AST"];
73 -> 63 [label="AST"];
73 -> 70 [label="AST"];
74 -> 75 [label="AST"];
76 -> 77 [label="AST"];
78 -> 74 [label="AST"];
78 -> 76 [label="AST"];
78 -> 120 [label="Control Dep"];
78 -> 109 [label="Control Dep"];
78 -> 90 [label="Control Dep"];
78 -> 84 [label="Control Dep"];
78 -> 79 [label="Control Dep"];
78 -> 82 [label="Control Dep"];
78 -> 88 [label="Control Dep"];
78 -> 119 [label="Control Dep"];
78 -> 110 [label="Control Dep"];
78 -> 117 [label="Control Dep"];
78 -> 112 [label="Control Dep"];
78 -> 115 [label="Control Dep"];
79 -> 80 [label="AST"];
82 -> 83 [label="AST"];
84 -> 81 [label="AST"];
84 -> 82 [label="AST"];
84 -> 79 [label="AST"];
85 -> 86 [label="AST"];
85 -> 87 [label="AST"];
88 -> 89 [label="AST"];
88 -> 85 [label="AST"];
90 -> 84 [label="AST"];
90 -> 88 [label="AST"];
90 -> 108 [label="Control Dep"];
90 -> 107 [label="Control Dep"];
90 -> 91 [label="Control Dep"];
90 -> 94 [label="Control Dep"];
90 -> 106 [label="Control Dep"];
90 -> 96 [label="Control Dep"];
90 -> 105 [label="Control Dep"];
90 -> 98 [label="Control Dep"];
90 -> 101 [label="Control Dep"];
90 -> 103 [label="Control Dep"];
91 -> 92 [label="AST"];
94 -> 95 [label="AST"];
98 -> 99 [label="AST"];
101 -> 102 [label="AST"];
103 -> 104 [label="AST"];
105 -> 100 [label="AST"];
105 -> 101 [label="AST"];
105 -> 98 [label="AST"];
105 -> 103 [label="AST"];
106 -> 97 [label="AST"];
106 -> 105 [label="AST"];
106 -> 96 [label="AST"];
107 -> 93 [label="AST"];
107 -> 94 [label="AST"];
107 -> 91 [label="AST"];
107 -> 106 [label="AST"];
108 -> 107 [label="AST"];
109 -> 90 [label="AST"];
109 -> 108 [label="AST"];
110 -> 111 [label="AST"];
111 -> 115 [label="Define-Use"];
112 -> 113 [label="AST"];
115 -> 116 [label="AST"];
115 -> 110 [label="Data Dep"];
117 -> 114 [label="AST"];
117 -> 118 [label="AST"];
117 -> 115 [label="AST"];
117 -> 112 [label="AST"];
119 -> 110 [label="AST"];
119 -> 117 [label="AST"];
120 -> 109 [label="AST"];
120 -> 119 [label="AST"];
121 -> 78 [label="AST"];
121 -> 120 [label="AST"];
122 -> 45 [label="AST"];
122 -> 62 [label="AST"];
122 -> 73 [label="AST"];
122 -> 121 [label="AST"];
123 -> 32 [label="AST"];
123 -> 122 [label="AST"];
124 -> 125 [label="AST"];
126 -> 124 [label="AST"];
127 -> 18 [label="AST"];
127 -> 27 [label="AST"];
127 -> 123 [label="AST"];
127 -> 126 [label="AST"];
128 -> 3 [label="AST"];
128 -> 0 [label="AST"];
128 -> 4 [label="AST"];
128 -> 127 [label="AST"];
130 -> 141 [label="Action"];
132 -> 131 [label="AST"];
133 -> 132 [label="AST"];
135 -> 134 [label="AST"];
138 -> 137 [label="AST"];
139 -> 136 [label="AST"];
139 -> 138 [label="AST"];
140 -> 135 [label="AST"];
140 -> 139 [label="AST"];
141 -> 142 [label="AST"];
141 -> 133 [label="AST"];
141 -> 140 [label="AST"];
}