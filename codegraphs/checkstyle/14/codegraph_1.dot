digraph "visitToken#?,DetailAST" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@visitToken" shape=ellipse]
2 [label="2:CtParameterImpl@DetailAST aAST" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@DetailAST" shape=ellipse]
4 [label="3:CtExecutableReferenceImpl@inInterfaceBlock(DetailAST)" shape=ellipse]
5 [label="3:CtTypeReferenceImpl@ScopeUtils" shape=ellipse]
6 [label="3:CtTypeReferenceImpl@boolean" shape=ellipse]
7 [label="3:CtTypeReferenceImpl@DetailAST" shape=ellipse]
8 [label="3:CtVirtualElement@inInterfaceBlock" shape=ellipse]
9 [label="3:CtTypeAccessImpl@ScopeUtils" shape=ellipse]
10 [label="3:CtTypeReferenceImpl@ScopeUtils" shape=ellipse]
11 [label="3:CtVariableReadImpl@aAST" shape=ellipse]
12 [label="3:CtParameterReferenceImpl@aAST" shape=ellipse]
13 [label="3:CtInvocationImpl@ScopeUtils.inInterfaceBlock(aAST)" shape=ellipse]
14 [label="4:CtReturnImpl@return" shape=ellipse]
15 [label="3:CtBlockImpl@\{
    return;
\}" shape=ellipse]
16 [label="3:CtIfImpl@if (ScopeUtils.inInterfaceBlock(aAST)) \{
    return;
\}" shape=ellipse]
17 [label="6:CtTypeReferenceImpl@DetailAST" shape=ellipse]
18 [label="6:CtPackageReferenceImpl@" shape=ellipse]
19 [label="6:CtExecutableReferenceImpl@findFirstToken()" shape=ellipse]
20 [label="6:CtTypeReferenceImpl@DetailAST" shape=ellipse]
21 [label="6:CtTypeReferenceImpl@DetailAST" shape=ellipse]
22 [label="6:CtVirtualElement@findFirstToken" shape=ellipse]
23 [label="6:CtVariableReadImpl@aAST" shape=ellipse]
24 [label="6:CtParameterReferenceImpl@aAST" shape=ellipse]
25 [label="6:CtTypeAccessImpl@MODIFIERS" shape=ellipse]
26 [label="6:CtTypeReferenceImpl@MODIFIERS" shape=ellipse]
27 [label="6:CtInvocationImpl@aAST.findFirstToken(MODIFIERS)" shape=ellipse]
28 [label="6:CtVirtualElement@modifiers" shape=ellipse]
29 [label="6:CtLocalVariableImpl@final DetailAST modifiers = aAST.findFirstToken(MODIFIERS)" shape=ellipse]
30 [label="7:CtExecutableReferenceImpl@branchContains()" shape=ellipse]
31 [label="7:CtTypeReferenceImpl@DetailAST" shape=ellipse]
32 [label="7:CtVirtualElement@branchContains" shape=ellipse]
33 [label="7:CtVariableReadImpl@modifiers" shape=ellipse]
34 [label="7:CtLocalVariableReferenceImpl@modifiers" shape=ellipse]
35 [label="7:CtTypeAccessImpl@LITERAL_PRIVATE" shape=ellipse]
36 [label="7:CtTypeReferenceImpl@LITERAL_PRIVATE" shape=ellipse]
37 [label="7:CtInvocationImpl@modifiers.branchContains(LITERAL_PRIVATE)" shape=ellipse]
38 [label="7:CtExecutableReferenceImpl@branchContains()" shape=ellipse]
39 [label="7:CtTypeReferenceImpl@DetailAST" shape=ellipse]
40 [label="7:CtVirtualElement@branchContains" shape=ellipse]
41 [label="7:CtVariableReadImpl@modifiers" shape=ellipse]
42 [label="7:CtLocalVariableReferenceImpl@modifiers" shape=ellipse]
43 [label="7:CtTypeAccessImpl@ABSTRACT" shape=ellipse]
44 [label="7:CtTypeReferenceImpl@ABSTRACT" shape=ellipse]
45 [label="7:CtInvocationImpl@modifiers.branchContains(ABSTRACT)" shape=ellipse]
46 [label="7:CtBinaryOperatorImpl@(modifiers.branchContains(LITERAL_PRIVATE) || modifiers.branchContains(ABSTRACT))" shape=ellipse]
47 [label="8:CtExecutableReferenceImpl@branchContains()" shape=ellipse]
48 [label="8:CtTypeReferenceImpl@DetailAST" shape=ellipse]
49 [label="8:CtVirtualElement@branchContains" shape=ellipse]
50 [label="8:CtVariableReadImpl@modifiers" shape=ellipse]
51 [label="8:CtLocalVariableReferenceImpl@modifiers" shape=ellipse]
52 [label="8:CtTypeAccessImpl@FINAL" shape=ellipse]
53 [label="8:CtTypeReferenceImpl@FINAL" shape=ellipse]
54 [label="8:CtInvocationImpl@modifiers.branchContains(FINAL)" shape=ellipse]
55 [label="7:CtBinaryOperatorImpl@((modifiers.branchContains(LITERAL_PRIVATE) || modifiers.branchContains(ABSTRACT)) || modifiers.branchContains(FINAL))" shape=ellipse]
56 [label="9:CtExecutableReferenceImpl@branchContains()" shape=ellipse]
57 [label="9:CtTypeReferenceImpl@DetailAST" shape=ellipse]
58 [label="9:CtVirtualElement@branchContains" shape=ellipse]
59 [label="9:CtVariableReadImpl@modifiers" shape=ellipse]
60 [label="9:CtLocalVariableReferenceImpl@modifiers" shape=ellipse]
61 [label="9:CtTypeAccessImpl@LITERAL_STATIC" shape=ellipse]
62 [label="9:CtTypeReferenceImpl@LITERAL_STATIC" shape=ellipse]
63 [label="9:CtInvocationImpl@modifiers.branchContains(LITERAL_STATIC)" shape=ellipse]
64 [label="7:CtBinaryOperatorImpl@((modifiers.branchContains(LITERAL_PRIVATE) || modifiers.branchContains(ABSTRACT)) || modifiers.branchContains(FINAL)) || modifiers.branchContains(LITERAL_STATIC)" shape=ellipse]
65 [label="10:CtReturnImpl@return" shape=ellipse]
66 [label="9:CtBlockImpl@\{
    return;
\}" shape=ellipse]
67 [label="7:CtIfImpl@if (((modifiers.branchContains(LITERAL_PRIVATE) || modifiers.branchContains(ABSTRACT)) || modifiers.branchContains(FINAL)) || modifiers.branchContains(LITERAL_STATIC)) \{
    return;
\}" shape=ellipse]
68 [label="12:CtExecutableReferenceImpl@isIn()" shape=ellipse]
69 [label="12:CtVirtualElement@isIn" shape=ellipse]
70 [label="12:CtExecutableReferenceImpl@getSurroundingScope(DetailAST)" shape=ellipse]
71 [label="12:CtTypeReferenceImpl@ScopeUtils" shape=ellipse]
72 [label="12:CtTypeReferenceImpl@DetailAST" shape=ellipse]
73 [label="12:CtVirtualElement@getSurroundingScope" shape=ellipse]
74 [label="12:CtTypeAccessImpl@ScopeUtils" shape=ellipse]
75 [label="12:CtTypeReferenceImpl@ScopeUtils" shape=ellipse]
76 [label="12:CtVariableReadImpl@aAST" shape=ellipse]
77 [label="12:CtParameterReferenceImpl@aAST" shape=ellipse]
78 [label="12:CtInvocationImpl@ScopeUtils.getSurroundingScope(aAST)" shape=ellipse]
79 [label="12:CtTypeAccessImpl@PROTECTED" shape=ellipse]
80 [label="12:CtTypeReferenceImpl@PROTECTED" shape=ellipse]
81 [label="12:CtInvocationImpl@ScopeUtils.getSurroundingScope(aAST).isIn(PROTECTED)" shape=ellipse]
82 [label="12:CtUnaryOperatorImpl@!ScopeUtils.getSurroundingScope(aAST).isIn(PROTECTED)" shape=ellipse]
83 [label="13:CtReturnImpl@return" shape=ellipse]
84 [label="12:CtBlockImpl@\{
    return;
\}" shape=ellipse]
85 [label="12:CtIfImpl@if (!ScopeUtils.getSurroundingScope(aAST).isIn(PROTECTED)) \{
    return;
\}" shape=ellipse]
86 [label="15:CtTypeReferenceImpl@DetailAST" shape=ellipse]
87 [label="15:CtPackageReferenceImpl@" shape=ellipse]
88 [label="15:CtExecutableReferenceImpl@findFirstToken()" shape=ellipse]
89 [label="15:CtTypeReferenceImpl@DetailAST" shape=ellipse]
90 [label="15:CtTypeReferenceImpl@DetailAST" shape=ellipse]
91 [label="15:CtVirtualElement@findFirstToken" shape=ellipse]
92 [label="15:CtVariableReadImpl@aAST" shape=ellipse]
93 [label="15:CtParameterReferenceImpl@aAST" shape=ellipse]
94 [label="15:CtTypeAccessImpl@SLIST" shape=ellipse]
95 [label="15:CtTypeReferenceImpl@SLIST" shape=ellipse]
96 [label="15:CtInvocationImpl@aAST.findFirstToken(SLIST)" shape=ellipse]
97 [label="15:CtVirtualElement@implementation" shape=ellipse]
98 [label="15:CtLocalVariableImpl@final DetailAST implementation = aAST.findFirstToken(SLIST)" shape=ellipse]
99 [label="16:CtVariableReadImpl@implementation" shape=ellipse]
100 [label="16:CtLocalVariableReferenceImpl@implementation" shape=ellipse]
101 [label="16:CtLiteralImpl@null" shape=ellipse]
102 [label="16:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
103 [label="16:CtBinaryOperatorImpl@(implementation != null)" shape=ellipse]
104 [label="17:CtExecutableReferenceImpl@getType()" shape=ellipse]
105 [label="17:CtVirtualElement@getType" shape=ellipse]
106 [label="17:CtExecutableReferenceImpl@getFirstChild()" shape=ellipse]
107 [label="17:CtTypeReferenceImpl@DetailAST" shape=ellipse]
108 [label="17:CtVirtualElement@getFirstChild" shape=ellipse]
109 [label="17:CtVariableReadImpl@implementation" shape=ellipse]
110 [label="17:CtLocalVariableReferenceImpl@implementation" shape=ellipse]
111 [label="17:CtInvocationImpl@implementation.getFirstChild()" shape=ellipse]
112 [label="17:CtInvocationImpl@implementation.getFirstChild().getType()" shape=ellipse]
113 [label="17:CtFieldReferenceImpl@TokenTypes.RCURLY" shape=ellipse]
114 [label="17:CtTypeReferenceImpl@TokenTypes" shape=ellipse]
115 [label="17:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
116 [label="17:CtFieldReadImpl@TokenTypes.RCURLY" shape=ellipse]
117 [label="17:CtTypeAccessImpl@TokenTypes" shape=ellipse]
118 [label="17:CtBinaryOperatorImpl@(implementation.getFirstChild().getType() == TokenTypes.RCURLY)" shape=ellipse]
119 [label="16:CtBinaryOperatorImpl@(implementation != null) && (implementation.getFirstChild().getType() == TokenTypes.RCURLY)" shape=ellipse]
120 [label="18:CtReturnImpl@return" shape=ellipse]
121 [label="17:CtBlockImpl@\{
    return;
\}" shape=ellipse]
122 [label="16:CtIfImpl@if ((implementation != null) && (implementation.getFirstChild().getType() == TokenTypes.RCURLY)) \{
    return;
\}" shape=ellipse]
123 [label="20:CtTypeReferenceImpl@DetailAST" shape=ellipse]
124 [label="20:CtPackageReferenceImpl@" shape=ellipse]
125 [label="20:CtExecutableReferenceImpl@findContainingClass(<unknown>)" shape=ellipse]
126 [label="20:CtTypeReferenceImpl@DetailAST" shape=ellipse]
127 [label="20:CtTypeReferenceImpl@null" shape=ellipse]
128 [label="20:CtVirtualElement@findContainingClass" shape=ellipse]
129 [label="20:CtTypeAccessImpl@PlaceHold" shape=ellipse]
130 [label="20:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
131 [label="20:CtThisAccessImpl@" shape=ellipse]
132 [label="20:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
133 [label="20:CtVariableReadImpl@aAST" shape=ellipse]
134 [label="20:CtParameterReferenceImpl@aAST" shape=ellipse]
135 [label="20:CtInvocationImpl@findContainingClass(aAST)" shape=ellipse]
136 [label="20:CtVirtualElement@classDef" shape=ellipse]
137 [label="20:CtLocalVariableImpl@final DetailAST classDef = findContainingClass(aAST)" shape=ellipse]
138 [label="21:CtTypeReferenceImpl@DetailAST" shape=ellipse]
139 [label="21:CtPackageReferenceImpl@" shape=ellipse]
140 [label="21:CtExecutableReferenceImpl@findFirstToken()" shape=ellipse]
141 [label="21:CtTypeReferenceImpl@DetailAST" shape=ellipse]
142 [label="21:CtTypeReferenceImpl@DetailAST" shape=ellipse]
143 [label="21:CtVirtualElement@findFirstToken" shape=ellipse]
144 [label="21:CtVariableReadImpl@classDef" shape=ellipse]
145 [label="21:CtLocalVariableReferenceImpl@classDef" shape=ellipse]
146 [label="21:CtTypeAccessImpl@MODIFIERS" shape=ellipse]
147 [label="21:CtTypeReferenceImpl@MODIFIERS" shape=ellipse]
148 [label="21:CtInvocationImpl@classDef.findFirstToken(MODIFIERS)" shape=ellipse]
149 [label="21:CtVirtualElement@classMods" shape=ellipse]
150 [label="21:CtLocalVariableImpl@final DetailAST classMods = classDef.findFirstToken(MODIFIERS)" shape=ellipse]
151 [label="22:CtExecutableReferenceImpl@branchContains()" shape=ellipse]
152 [label="22:CtTypeReferenceImpl@DetailAST" shape=ellipse]
153 [label="22:CtTypeReferenceImpl@boolean" shape=ellipse]
154 [label="22:CtVirtualElement@branchContains" shape=ellipse]
155 [label="22:CtVariableReadImpl@classMods" shape=ellipse]
156 [label="22:CtLocalVariableReferenceImpl@classMods" shape=ellipse]
157 [label="22:CtTypeAccessImpl@FINAL" shape=ellipse]
158 [label="22:CtTypeReferenceImpl@FINAL" shape=ellipse]
159 [label="22:CtInvocationImpl@classMods.branchContains(FINAL)" shape=ellipse]
160 [label="23:CtReturnImpl@return" shape=ellipse]
161 [label="22:CtBlockImpl@\{
    return;
\}" shape=ellipse]
162 [label="22:CtIfImpl@if (classMods.branchContains(FINAL)) \{
    return;
\}" shape=ellipse]
163 [label="25:CtTypeReferenceImpl@DetailAST" shape=ellipse]
164 [label="25:CtPackageReferenceImpl@" shape=ellipse]
165 [label="25:CtExecutableReferenceImpl@findFirstToken()" shape=ellipse]
166 [label="25:CtTypeReferenceImpl@DetailAST" shape=ellipse]
167 [label="25:CtTypeReferenceImpl@DetailAST" shape=ellipse]
168 [label="25:CtVirtualElement@findFirstToken" shape=ellipse]
169 [label="25:CtVariableReadImpl@classDef" shape=ellipse]
170 [label="25:CtLocalVariableReferenceImpl@classDef" shape=ellipse]
171 [label="25:CtTypeAccessImpl@OBJBLOCK" shape=ellipse]
172 [label="25:CtTypeReferenceImpl@OBJBLOCK" shape=ellipse]
173 [label="25:CtInvocationImpl@classDef.findFirstToken(OBJBLOCK)" shape=ellipse]
174 [label="25:CtVirtualElement@objBlock" shape=ellipse]
175 [label="25:CtLocalVariableImpl@final DetailAST objBlock = classDef.findFirstToken(OBJBLOCK)" shape=ellipse]
176 [label="26:CtTypeReferenceImpl@boolean" shape=ellipse]
177 [label="26:CtLiteralImpl@true" shape=ellipse]
178 [label="26:CtTypeReferenceImpl@boolean" shape=ellipse]
179 [label="26:CtVirtualElement@hasDefaultConstructor" shape=ellipse]
180 [label="26:CtLocalVariableImpl@boolean hasDefaultConstructor = true" shape=ellipse]
181 [label="27:CtTypeReferenceImpl@boolean" shape=ellipse]
182 [label="27:CtLiteralImpl@false" shape=ellipse]
183 [label="27:CtTypeReferenceImpl@boolean" shape=ellipse]
184 [label="27:CtVirtualElement@hasExplNonPrivateCtor" shape=ellipse]
185 [label="27:CtLocalVariableImpl@boolean hasExplNonPrivateCtor = false" shape=ellipse]
186 [label="28:CtTypeReferenceImpl@DetailAST" shape=ellipse]
187 [label="28:CtPackageReferenceImpl@" shape=ellipse]
188 [label="28:CtExecutableReferenceImpl@getFirstChild()" shape=ellipse]
189 [label="28:CtTypeReferenceImpl@DetailAST" shape=ellipse]
190 [label="28:CtVirtualElement@getFirstChild" shape=ellipse]
191 [label="28:CtVariableReadImpl@objBlock" shape=ellipse]
192 [label="28:CtLocalVariableReferenceImpl@objBlock" shape=ellipse]
193 [label="28:CtInvocationImpl@((DetailAST) (objBlock.getFirstChild()))" shape=ellipse]
194 [label="28:CtTypeReferenceImpl@DetailAST" shape=ellipse]
195 [label="28:CtVirtualElement@candidate" shape=ellipse]
196 [label="28:CtLocalVariableImpl@DetailAST candidate = ((DetailAST) (objBlock.getFirstChild()))" shape=ellipse]
197 [label="29:CtVariableReadImpl@candidate" shape=ellipse]
198 [label="29:CtLocalVariableReferenceImpl@candidate" shape=ellipse]
199 [label="29:CtLiteralImpl@null" shape=ellipse]
200 [label="29:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
201 [label="29:CtBinaryOperatorImpl@candidate != null" shape=ellipse]
202 [label="30:CtExecutableReferenceImpl@getType()" shape=ellipse]
203 [label="30:CtTypeReferenceImpl@DetailAST" shape=ellipse]
204 [label="30:CtVirtualElement@getType" shape=ellipse]
205 [label="30:CtVariableReadImpl@candidate" shape=ellipse]
206 [label="30:CtLocalVariableReferenceImpl@candidate" shape=ellipse]
207 [label="30:CtInvocationImpl@candidate.getType()" shape=ellipse]
208 [label="30:CtFieldReferenceImpl@TokenTypes.CTOR_DEF" shape=ellipse]
209 [label="30:CtTypeReferenceImpl@TokenTypes" shape=ellipse]
210 [label="30:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
211 [label="30:CtFieldReadImpl@TokenTypes.CTOR_DEF" shape=ellipse]
212 [label="30:CtTypeAccessImpl@TokenTypes" shape=ellipse]
213 [label="30:CtBinaryOperatorImpl@candidate.getType() == TokenTypes.CTOR_DEF" shape=ellipse]
214 [label="31:CtVariableWriteImpl@hasDefaultConstructor" shape=ellipse]
215 [label="31:CtLocalVariableReferenceImpl@hasDefaultConstructor" shape=ellipse]
216 [label="31:CtLiteralImpl@false" shape=ellipse]
217 [label="31:CtTypeReferenceImpl@boolean" shape=ellipse]
218 [label="31:CtTypeReferenceImpl@boolean" shape=ellipse]
219 [label="31:CtAssignmentImpl@hasDefaultConstructor = false" shape=ellipse]
220 [label="32:CtTypeReferenceImpl@DetailAST" shape=ellipse]
221 [label="32:CtPackageReferenceImpl@" shape=ellipse]
222 [label="32:CtExecutableReferenceImpl@findFirstToken()" shape=ellipse]
223 [label="32:CtTypeReferenceImpl@DetailAST" shape=ellipse]
224 [label="32:CtTypeReferenceImpl@DetailAST" shape=ellipse]
225 [label="32:CtVirtualElement@findFirstToken" shape=ellipse]
226 [label="32:CtVariableReadImpl@candidate" shape=ellipse]
227 [label="32:CtLocalVariableReferenceImpl@candidate" shape=ellipse]
228 [label="32:CtTypeAccessImpl@MODIFIERS" shape=ellipse]
229 [label="32:CtTypeReferenceImpl@MODIFIERS" shape=ellipse]
230 [label="32:CtInvocationImpl@candidate.findFirstToken(MODIFIERS)" shape=ellipse]
231 [label="32:CtVirtualElement@ctorMods" shape=ellipse]
232 [label="32:CtLocalVariableImpl@final DetailAST ctorMods = candidate.findFirstToken(MODIFIERS)" shape=ellipse]
233 [label="33:CtExecutableReferenceImpl@branchContains()" shape=ellipse]
234 [label="33:CtTypeReferenceImpl@DetailAST" shape=ellipse]
235 [label="33:CtVirtualElement@branchContains" shape=ellipse]
236 [label="33:CtVariableReadImpl@ctorMods" shape=ellipse]
237 [label="33:CtLocalVariableReferenceImpl@ctorMods" shape=ellipse]
238 [label="33:CtTypeAccessImpl@LITERAL_PRIVATE" shape=ellipse]
239 [label="33:CtTypeReferenceImpl@LITERAL_PRIVATE" shape=ellipse]
240 [label="33:CtInvocationImpl@ctorMods.branchContains(LITERAL_PRIVATE)" shape=ellipse]
241 [label="33:CtUnaryOperatorImpl@!ctorMods.branchContains(LITERAL_PRIVATE)" shape=ellipse]
242 [label="34:CtVariableWriteImpl@hasExplNonPrivateCtor" shape=ellipse]
243 [label="34:CtLocalVariableReferenceImpl@hasExplNonPrivateCtor" shape=ellipse]
244 [label="34:CtLiteralImpl@true" shape=ellipse]
245 [label="34:CtTypeReferenceImpl@boolean" shape=ellipse]
246 [label="34:CtTypeReferenceImpl@boolean" shape=ellipse]
247 [label="34:CtAssignmentImpl@hasExplNonPrivateCtor = true" shape=ellipse]
248 [label="35:CtBreakImpl@break" shape=ellipse]
249 [label="33:CtBlockImpl@\{
    hasExplNonPrivateCtor = true;
    break;
\}" shape=ellipse]
250 [label="33:CtIfImpl@if (!ctorMods.branchContains(LITERAL_PRIVATE)) \{
    hasExplNonPrivateCtor = true;
    break;
\}" shape=ellipse]
251 [label="30:CtBlockImpl@\{
    hasDefaultConstructor = false;
    final DetailAST ctorMods = candidate.findFirstToken(MODIFIERS);
    if (!ctorMods.branchContains(LITERAL_PRIVATE)) \{
        hasExplNonPrivateCtor = true;
        break;
    \}
\}" shape=ellipse]
252 [label="30:CtIfImpl@if (candidate.getType() == TokenTypes.CTOR_DEF) \{
    hasDefaultConstructor = false;
    final DetailAST ctorMods = candidate.findFirstToken(MODIFIERS);
    if (!ctorMods.branchContains(LITERAL_PRIVATE)) \{
        hasExplNonPrivateCtor = true;
        break;
    \}
\}" shape=ellipse]
253 [label="38:CtVariableWriteImpl@candidate" shape=ellipse]
254 [label="38:CtLocalVariableReferenceImpl@candidate" shape=ellipse]
255 [label="38:CtExecutableReferenceImpl@getNextSibling()" shape=ellipse]
256 [label="38:CtTypeReferenceImpl@DetailAST" shape=ellipse]
257 [label="38:CtVirtualElement@getNextSibling" shape=ellipse]
258 [label="38:CtVariableReadImpl@candidate" shape=ellipse]
259 [label="38:CtLocalVariableReferenceImpl@candidate" shape=ellipse]
260 [label="38:CtInvocationImpl@((DetailAST) (candidate.getNextSibling()))" shape=ellipse]
261 [label="38:CtTypeReferenceImpl@DetailAST" shape=ellipse]
262 [label="38:CtAssignmentImpl@candidate = ((DetailAST) (candidate.getNextSibling()))" shape=ellipse]
263 [label="29:CtBlockImpl@\{
    if (candidate.getType() == TokenTypes.CTOR_DEF) \{
        hasDefaultConstructor = false;
        final DetailAST ctorMods = candidate.findFirstToken(MODIFIERS);
        if (!ctorMods.branchContains(LITERAL_PRIVATE)) \{
            hasExplNonPrivateCtor = true;
            break;
        \}
    \}
    candidate = ((DetailAST) (candidate.getNextSibling()));
\}" shape=ellipse]
264 [label="29:CtWhileImpl@while (candidate != null) \{
    if (candidate.getType() == TokenTypes.CTOR_DEF) \{
        hasDefaultConstructor = false;
        final DetailAST ctorMods = candidate.findFirstToken(MODIFIERS);
        if (!ctorMods.branchContains(LITERAL_PRIVATE)) \{
            hasExplNonPrivateCtor = true;
            break;
        \}
    \}
    candidate = ((DetailAST) (candidate.getNextSibling()));
\} " shape=ellipse]
265 [label="40:CtVariableReadImpl@hasDefaultConstructor" shape=ellipse]
266 [label="40:CtLocalVariableReferenceImpl@hasDefaultConstructor" shape=ellipse]
267 [label="40:CtVariableReadImpl@hasExplNonPrivateCtor" shape=ellipse]
268 [label="40:CtLocalVariableReferenceImpl@hasExplNonPrivateCtor" shape=ellipse]
269 [label="40:CtBinaryOperatorImpl@hasDefaultConstructor || hasExplNonPrivateCtor" shape=ellipse]
270 [label="40:CtTypeReferenceImpl@boolean" shape=ellipse]
271 [label="41:CtTypeReferenceImpl@String" shape=ellipse]
272 [label="41:CtPackageReferenceImpl@java.lang" shape=ellipse]
273 [label="41:CtExecutableReferenceImpl@getText()" shape=ellipse]
274 [label="41:CtTypeReferenceImpl@String" shape=ellipse]
275 [label="41:CtVirtualElement@getText" shape=ellipse]
276 [label="41:CtExecutableReferenceImpl@findFirstToken()" shape=ellipse]
277 [label="41:CtTypeReferenceImpl@DetailAST" shape=ellipse]
278 [label="41:CtVirtualElement@findFirstToken" shape=ellipse]
279 [label="41:CtVariableReadImpl@aAST" shape=ellipse]
280 [label="41:CtParameterReferenceImpl@aAST" shape=ellipse]
281 [label="41:CtTypeAccessImpl@IDENT" shape=ellipse]
282 [label="41:CtTypeReferenceImpl@IDENT" shape=ellipse]
283 [label="41:CtInvocationImpl@aAST.findFirstToken(IDENT)" shape=ellipse]
284 [label="41:CtInvocationImpl@aAST.findFirstToken(IDENT).getText()" shape=ellipse]
285 [label="41:CtVirtualElement@name" shape=ellipse]
286 [label="41:CtLocalVariableImpl@final String name = aAST.findFirstToken(IDENT).getText()" shape=ellipse]
287 [label="42:CtExecutableReferenceImpl@log(<unknown>,<unknown>,java.lang.String,java.lang.String)" shape=ellipse]
288 [label="42:CtTypeReferenceImpl@null" shape=ellipse]
289 [label="42:CtTypeReferenceImpl@null" shape=ellipse]
290 [label="42:CtTypeReferenceImpl@String" shape=ellipse]
291 [label="42:CtTypeReferenceImpl@String" shape=ellipse]
292 [label="42:CtVirtualElement@log" shape=ellipse]
293 [label="42:CtTypeAccessImpl@PlaceHold" shape=ellipse]
294 [label="42:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
295 [label="42:CtThisAccessImpl@" shape=ellipse]
296 [label="42:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
297 [label="42:CtExecutableReferenceImpl@getLineNo()" shape=ellipse]
298 [label="42:CtTypeReferenceImpl@DetailAST" shape=ellipse]
299 [label="42:CtVirtualElement@getLineNo" shape=ellipse]
300 [label="42:CtVariableReadImpl@aAST" shape=ellipse]
301 [label="42:CtParameterReferenceImpl@aAST" shape=ellipse]
302 [label="42:CtInvocationImpl@aAST.getLineNo()" shape=ellipse]
303 [label="42:CtExecutableReferenceImpl@getColumnNo()" shape=ellipse]
304 [label="42:CtTypeReferenceImpl@DetailAST" shape=ellipse]
305 [label="42:CtVirtualElement@getColumnNo" shape=ellipse]
306 [label="42:CtVariableReadImpl@aAST" shape=ellipse]
307 [label="42:CtParameterReferenceImpl@aAST" shape=ellipse]
308 [label="42:CtInvocationImpl@aAST.getColumnNo()" shape=ellipse]
309 [label="42:CtLiteralImpl@\"design.forExtension\"" shape=ellipse]
310 [label="42:CtTypeReferenceImpl@String" shape=ellipse]
311 [label="42:CtVariableReadImpl@name" shape=ellipse]
312 [label="42:CtLocalVariableReferenceImpl@name" shape=ellipse]
313 [label="42:CtInvocationImpl@log(aAST.getLineNo(), aAST.getColumnNo(), \"design.forExtension\", name)" shape=ellipse]
314 [label="40:CtBlockImpl@\{
    final String name = aAST.findFirstToken(IDENT).getText();
    log(aAST.getLineNo(), aAST.getColumnNo(), \"design.forExtension\", name);
\}" shape=ellipse]
315 [label="40:CtIfImpl@if (hasDefaultConstructor || hasExplNonPrivateCtor) \{
    final String name = aAST.findFirstToken(IDENT).getText();
    log(aAST.getLineNo(), aAST.getColumnNo(), \"design.forExtension\", name);
\}" shape=ellipse]
316 [label="2:CtBlockImpl@\{
    if (ScopeUtils.inInterfaceBlock(aAST)) \{
        return;
    \}
    final DetailAST modifiers = aAST.findFirstToken(MODIFIERS);
    if (((modifiers.branchContains(LITERAL_PRIVATE) || modifiers.branchContains(ABSTRACT)) || modifiers.branchContains(FINAL)) || modifiers.branchContains(LITERAL_STATIC)) \{
        return;
    \}
    if (!ScopeUtils.getSurroundingScope(aAST).isIn(PROTECTED)) \{
        return;
    \}
    final DetailAST implementation = aAST.findFirstToken(SLIST);
    if ((implementation != null) && (implementation.getFirstChild().getType() == TokenTypes.RCURLY)) \{
        return;
    \}
    final DetailAST classDef = findContainingClass(aAST);
    final DetailAST classMods = classDef.findFirstToken(MODIFIERS);
    if (classMods.branchContains(FINAL)) \{
        return;
    \}
    final DetailAST objBlock = classDef.findFirstToken(OBJBLOCK);
    boolean hasDefaultConstructor = true;
    boolean hasExplNonPrivateCtor = false;
    DetailAST candidate = ((DetailAST) (objBlock.getFirstChild()));
    while (candidate != null) \{
        if (candidate.getType() == TokenTypes.CTOR_DEF) \{
            hasDefaultConstructor = false;
            final DetailAST ctorMods = candidate.findFirstToken(MODIFIERS);
            if (!ctorMods.branchContains(LITERAL_PRIVATE)) \{
                hasExplNonPrivateCtor = true;
                break;
            \}
        \}
        candidate = ((DetailAST) (candidate.getNextSibling()));
    \} 
    if (hasDefaultConstructor || hasExplNonPrivateCtor) \{
        final String name = aAST.findFirstToken(IDENT).getText();
        log(aAST.getLineNo(), aAST.getColumnNo(), \"design.forExtension\", name);
    \}
\}" shape=ellipse]
317 [label="2:CtMethodImpl@public void visitToken(DetailAST aAST) \{
    if (ScopeUtils.inInterfaceBlock(aAST)) \{
        return;
    \}
    final DetailAST modifiers = aAST.findFirstToken(MODIFIERS);
    if (((modifiers.branchContains(LITERAL_PRIVATE) || modifiers.branchContains(ABSTRACT)) || modifiers.branchContains(FINAL)) || modifiers.branchContains(LITERAL_STATIC)) \{
        return;
    \}
    if (!ScopeUtils.getSurroundingScope(aAST).isIn(PROTECTED)) \{
        return;
    \}
    final DetailAST implementation = aAST.findFirstToken(SLIST);
    if ((implementation != null) && (implementation.getFirstChild().getType() == TokenTypes.RCURLY)) \{
        return;
    \}
    final DetailAST classDef = findContainingClass(aAST);
    final DetailAST classMods = classDef.findFirstToken(MODIFIERS);
    if (classMods.branchContains(FINAL)) \{
        return;
    \}
    final DetailAST objBlock = classDef.findFirstToken(OBJBLOCK);
    boolean hasDefaultConstructor = true;
    boolean hasExplNonPrivateCtor = false;
    DetailAST candidate = ((DetailAST) (objBlock.getFirstChild()));
    while (candidate != null) \{
        if (candidate.getType() == TokenTypes.CTOR_DEF) \{
            hasDefaultConstructor = false;
            final DetailAST ctorMods = candidate.findFirstToken(MODIFIERS);
            if (!ctorMods.branchContains(LITERAL_PRIVATE)) \{
                hasExplNonPrivateCtor = true;
                break;
            \}
        \}
        candidate = ((DetailAST) (candidate.getNextSibling()));
    \} 
    if (hasDefaultConstructor || hasExplNonPrivateCtor) \{
        final String name = aAST.findFirstToken(IDENT).getText();
        log(aAST.getLineNo(), aAST.getColumnNo(), \"design.forExtension\", name);
    \}
\}" shape=ellipse]
318 [label="3:Update@UPDATE" shape=ellipse]
319 [label="3:CtPackageReferenceImpl@" shape=ellipse]
320 [label="3:CtTypeReferenceImpl@ScopeUtils" shape=ellipse]
321 [label="3:CtTypeAccessImpl@ScopeUtils" shape=ellipse]
322 [label="3:CtPackageReferenceImpl@" shape=ellipse]
323 [label="3:CtTypeReferenceImpl@ScopeUtils" shape=ellipse]
324 [label="3:CtTypeReferenceImpl@boolean" shape=ellipse]
325 [label="3:CtPackageReferenceImpl@" shape=ellipse]
326 [label="3:CtTypeReferenceImpl@DetailAST" shape=ellipse]
327 [label="3:CtExecutableReferenceImpl@inInterfaceOrAnnotationBlock(DetailAST)" shape=ellipse]
328 [label="3:CtPackageReferenceImpl@" shape=ellipse]
329 [label="3:CtTypeReferenceImpl@DetailAST" shape=ellipse]
330 [label="3:CtParameterReferenceImpl@aAST" shape=ellipse]
331 [label="3:CtVariableReadImpl@aAST" shape=ellipse]
332 [label="3:CtInvocationImpl@ScopeUtils.inInterfaceOrAnnotationBlock(aAST)" shape=ellipse]
333 [label="3:CtVirtualElement@inInterfaceOrAnnotationBlock" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
4 -> 6 [label="AST"];
4 -> 7 [label="AST"];
9 -> 10 [label="AST"];
11 -> 12 [label="AST"];
13 -> 8 [label="AST"];
13 -> 9 [label="AST"];
13 -> 4 [label="AST"];
13 -> 11 [label="AST"];
13 -> 15 [label="Control Dep"];
13 -> 14 [label="Control Dep"];
13 -> 318 [label="Action"];
15 -> 14 [label="AST"];
16 -> 13 [label="AST"];
16 -> 15 [label="AST"];
17 -> 18 [label="AST"];
19 -> 20 [label="AST"];
19 -> 21 [label="AST"];
23 -> 24 [label="AST"];
23 -> 28 [label="Data Dep"];
25 -> 26 [label="AST"];
27 -> 22 [label="AST"];
27 -> 23 [label="AST"];
27 -> 19 [label="AST"];
27 -> 25 [label="AST"];
28 -> 33 [label="Define-Use"];
28 -> 41 [label="Define-Use"];
28 -> 50 [label="Define-Use"];
28 -> 59 [label="Define-Use"];
29 -> 28 [label="AST"];
29 -> 17 [label="AST"];
29 -> 27 [label="AST"];
30 -> 31 [label="AST"];
33 -> 34 [label="AST"];
35 -> 36 [label="AST"];
37 -> 32 [label="AST"];
37 -> 33 [label="AST"];
37 -> 30 [label="AST"];
37 -> 35 [label="AST"];
38 -> 39 [label="AST"];
41 -> 42 [label="AST"];
43 -> 44 [label="AST"];
45 -> 40 [label="AST"];
45 -> 41 [label="AST"];
45 -> 38 [label="AST"];
45 -> 43 [label="AST"];
46 -> 37 [label="AST"];
46 -> 45 [label="AST"];
47 -> 48 [label="AST"];
50 -> 51 [label="AST"];
52 -> 53 [label="AST"];
54 -> 49 [label="AST"];
54 -> 50 [label="AST"];
54 -> 47 [label="AST"];
54 -> 52 [label="AST"];
55 -> 46 [label="AST"];
55 -> 54 [label="AST"];
56 -> 57 [label="AST"];
59 -> 60 [label="AST"];
61 -> 62 [label="AST"];
63 -> 58 [label="AST"];
63 -> 59 [label="AST"];
63 -> 56 [label="AST"];
63 -> 61 [label="AST"];
64 -> 55 [label="AST"];
64 -> 63 [label="AST"];
64 -> 66 [label="Control Dep"];
64 -> 65 [label="Control Dep"];
66 -> 65 [label="AST"];
67 -> 64 [label="AST"];
67 -> 66 [label="AST"];
70 -> 71 [label="AST"];
70 -> 72 [label="AST"];
74 -> 75 [label="AST"];
76 -> 77 [label="AST"];
78 -> 73 [label="AST"];
78 -> 74 [label="AST"];
78 -> 70 [label="AST"];
78 -> 76 [label="AST"];
79 -> 80 [label="AST"];
81 -> 69 [label="AST"];
81 -> 78 [label="AST"];
81 -> 68 [label="AST"];
81 -> 79 [label="AST"];
82 -> 81 [label="AST"];
82 -> 84 [label="Control Dep"];
82 -> 83 [label="Control Dep"];
84 -> 83 [label="AST"];
85 -> 82 [label="AST"];
85 -> 84 [label="AST"];
86 -> 87 [label="AST"];
88 -> 89 [label="AST"];
88 -> 90 [label="AST"];
92 -> 93 [label="AST"];
92 -> 97 [label="Data Dep"];
94 -> 95 [label="AST"];
96 -> 91 [label="AST"];
96 -> 92 [label="AST"];
96 -> 88 [label="AST"];
96 -> 94 [label="AST"];
97 -> 99 [label="Define-Use"];
97 -> 109 [label="Define-Use"];
98 -> 97 [label="AST"];
98 -> 86 [label="AST"];
98 -> 96 [label="AST"];
99 -> 100 [label="AST"];
101 -> 102 [label="AST"];
103 -> 99 [label="AST"];
103 -> 101 [label="AST"];
106 -> 107 [label="AST"];
109 -> 110 [label="AST"];
111 -> 108 [label="AST"];
111 -> 109 [label="AST"];
111 -> 106 [label="AST"];
112 -> 105 [label="AST"];
112 -> 111 [label="AST"];
112 -> 104 [label="AST"];
113 -> 114 [label="AST"];
113 -> 115 [label="AST"];
116 -> 117 [label="AST"];
116 -> 113 [label="AST"];
118 -> 112 [label="AST"];
118 -> 116 [label="AST"];
119 -> 103 [label="AST"];
119 -> 118 [label="AST"];
119 -> 121 [label="Control Dep"];
119 -> 120 [label="Control Dep"];
121 -> 120 [label="AST"];
122 -> 119 [label="AST"];
122 -> 121 [label="AST"];
123 -> 124 [label="AST"];
125 -> 126 [label="AST"];
125 -> 127 [label="AST"];
129 -> 130 [label="AST"];
131 -> 132 [label="AST"];
131 -> 129 [label="AST"];
131 -> 136 [label="Data Dep"];
133 -> 134 [label="AST"];
133 -> 136 [label="Data Dep"];
135 -> 128 [label="AST"];
135 -> 131 [label="AST"];
135 -> 125 [label="AST"];
135 -> 133 [label="AST"];
136 -> 144 [label="Define-Use"];
136 -> 169 [label="Define-Use"];
137 -> 136 [label="AST"];
137 -> 123 [label="AST"];
137 -> 135 [label="AST"];
138 -> 139 [label="AST"];
140 -> 141 [label="AST"];
140 -> 142 [label="AST"];
144 -> 145 [label="AST"];
144 -> 149 [label="Data Dep"];
146 -> 147 [label="AST"];
148 -> 143 [label="AST"];
148 -> 144 [label="AST"];
148 -> 140 [label="AST"];
148 -> 146 [label="AST"];
149 -> 155 [label="Define-Use"];
150 -> 149 [label="AST"];
150 -> 138 [label="AST"];
150 -> 148 [label="AST"];
151 -> 152 [label="AST"];
151 -> 153 [label="AST"];
155 -> 156 [label="AST"];
157 -> 158 [label="AST"];
159 -> 154 [label="AST"];
159 -> 155 [label="AST"];
159 -> 151 [label="AST"];
159 -> 157 [label="AST"];
159 -> 161 [label="Control Dep"];
159 -> 160 [label="Control Dep"];
161 -> 160 [label="AST"];
162 -> 159 [label="AST"];
162 -> 161 [label="AST"];
163 -> 164 [label="AST"];
165 -> 166 [label="AST"];
165 -> 167 [label="AST"];
169 -> 170 [label="AST"];
169 -> 174 [label="Data Dep"];
171 -> 172 [label="AST"];
173 -> 168 [label="AST"];
173 -> 169 [label="AST"];
173 -> 165 [label="AST"];
173 -> 171 [label="AST"];
174 -> 191 [label="Define-Use"];
175 -> 174 [label="AST"];
175 -> 163 [label="AST"];
175 -> 173 [label="AST"];
177 -> 178 [label="AST"];
179 -> 265 [label="Define-Use"];
180 -> 179 [label="AST"];
180 -> 176 [label="AST"];
180 -> 177 [label="AST"];
182 -> 183 [label="AST"];
184 -> 267 [label="Define-Use"];
185 -> 184 [label="AST"];
185 -> 181 [label="AST"];
185 -> 182 [label="AST"];
186 -> 187 [label="AST"];
188 -> 189 [label="AST"];
191 -> 192 [label="AST"];
191 -> 195 [label="Data Dep"];
193 -> 190 [label="AST"];
193 -> 194 [label="AST"];
193 -> 191 [label="AST"];
193 -> 188 [label="AST"];
195 -> 197 [label="Define-Use"];
195 -> 205 [label="Define-Use"];
195 -> 226 [label="Define-Use"];
196 -> 195 [label="AST"];
196 -> 186 [label="AST"];
196 -> 193 [label="AST"];
197 -> 198 [label="AST"];
199 -> 200 [label="AST"];
201 -> 197 [label="AST"];
201 -> 199 [label="AST"];
201 -> 263 [label="Control Dep"];
201 -> 252 [label="Control Dep"];
201 -> 213 [label="Control Dep"];
201 -> 207 [label="Control Dep"];
201 -> 202 [label="Control Dep"];
201 -> 205 [label="Control Dep"];
201 -> 211 [label="Control Dep"];
201 -> 262 [label="Control Dep"];
201 -> 253 [label="Control Dep"];
201 -> 260 [label="Control Dep"];
201 -> 255 [label="Control Dep"];
201 -> 258 [label="Control Dep"];
202 -> 203 [label="AST"];
205 -> 206 [label="AST"];
207 -> 204 [label="AST"];
207 -> 205 [label="AST"];
207 -> 202 [label="AST"];
208 -> 209 [label="AST"];
208 -> 210 [label="AST"];
211 -> 212 [label="AST"];
211 -> 208 [label="AST"];
213 -> 207 [label="AST"];
213 -> 211 [label="AST"];
213 -> 251 [label="Control Dep"];
213 -> 219 [label="Control Dep"];
213 -> 214 [label="Control Dep"];
213 -> 216 [label="Control Dep"];
213 -> 232 [label="Control Dep"];
213 -> 230 [label="Control Dep"];
213 -> 222 [label="Control Dep"];
213 -> 226 [label="Control Dep"];
213 -> 228 [label="Control Dep"];
213 -> 250 [label="Control Dep"];
213 -> 241 [label="Control Dep"];
213 -> 240 [label="Control Dep"];
213 -> 233 [label="Control Dep"];
213 -> 236 [label="Control Dep"];
213 -> 238 [label="Control Dep"];
214 -> 215 [label="AST"];
214 -> 265 [label="Define-Use"];
215 -> 265 [label="Define-Use"];
216 -> 217 [label="AST"];
219 -> 218 [label="AST"];
219 -> 214 [label="AST"];
219 -> 216 [label="AST"];
220 -> 221 [label="AST"];
222 -> 223 [label="AST"];
222 -> 224 [label="AST"];
226 -> 227 [label="AST"];
226 -> 231 [label="Data Dep"];
228 -> 229 [label="AST"];
230 -> 225 [label="AST"];
230 -> 226 [label="AST"];
230 -> 222 [label="AST"];
230 -> 228 [label="AST"];
231 -> 236 [label="Define-Use"];
232 -> 231 [label="AST"];
232 -> 220 [label="AST"];
232 -> 230 [label="AST"];
233 -> 234 [label="AST"];
236 -> 237 [label="AST"];
238 -> 239 [label="AST"];
240 -> 235 [label="AST"];
240 -> 236 [label="AST"];
240 -> 233 [label="AST"];
240 -> 238 [label="AST"];
241 -> 240 [label="AST"];
241 -> 249 [label="Control Dep"];
241 -> 247 [label="Control Dep"];
241 -> 242 [label="Control Dep"];
241 -> 244 [label="Control Dep"];
241 -> 248 [label="Control Dep"];
242 -> 243 [label="AST"];
242 -> 267 [label="Define-Use"];
243 -> 267 [label="Define-Use"];
244 -> 245 [label="AST"];
247 -> 246 [label="AST"];
247 -> 242 [label="AST"];
247 -> 244 [label="AST"];
249 -> 247 [label="AST"];
249 -> 248 [label="AST"];
250 -> 241 [label="AST"];
250 -> 249 [label="AST"];
251 -> 219 [label="AST"];
251 -> 232 [label="AST"];
251 -> 250 [label="AST"];
252 -> 213 [label="AST"];
252 -> 251 [label="AST"];
253 -> 254 [label="AST"];
254 -> 258 [label="Define-Use"];
255 -> 256 [label="AST"];
258 -> 259 [label="AST"];
258 -> 253 [label="Data Dep"];
260 -> 257 [label="AST"];
260 -> 261 [label="AST"];
260 -> 258 [label="AST"];
260 -> 255 [label="AST"];
262 -> 253 [label="AST"];
262 -> 260 [label="AST"];
263 -> 252 [label="AST"];
263 -> 262 [label="AST"];
264 -> 201 [label="AST"];
264 -> 263 [label="AST"];
265 -> 266 [label="AST"];
267 -> 268 [label="AST"];
269 -> 270 [label="AST"];
269 -> 265 [label="AST"];
269 -> 267 [label="AST"];
269 -> 314 [label="Control Dep"];
269 -> 286 [label="Control Dep"];
269 -> 284 [label="Control Dep"];
269 -> 273 [label="Control Dep"];
269 -> 283 [label="Control Dep"];
269 -> 276 [label="Control Dep"];
269 -> 279 [label="Control Dep"];
269 -> 281 [label="Control Dep"];
269 -> 313 [label="Control Dep"];
269 -> 287 [label="Control Dep"];
269 -> 295 [label="Control Dep"];
269 -> 293 [label="Control Dep"];
269 -> 302 [label="Control Dep"];
269 -> 297 [label="Control Dep"];
269 -> 300 [label="Control Dep"];
269 -> 308 [label="Control Dep"];
269 -> 303 [label="Control Dep"];
269 -> 306 [label="Control Dep"];
269 -> 309 [label="Control Dep"];
269 -> 311 [label="Control Dep"];
271 -> 272 [label="AST"];
273 -> 274 [label="AST"];
276 -> 277 [label="AST"];
279 -> 280 [label="AST"];
279 -> 285 [label="Data Dep"];
281 -> 282 [label="AST"];
283 -> 278 [label="AST"];
283 -> 279 [label="AST"];
283 -> 276 [label="AST"];
283 -> 281 [label="AST"];
284 -> 275 [label="AST"];
284 -> 283 [label="AST"];
284 -> 273 [label="AST"];
285 -> 311 [label="Define-Use"];
286 -> 285 [label="AST"];
286 -> 271 [label="AST"];
286 -> 284 [label="AST"];
287 -> 288 [label="AST"];
287 -> 289 [label="AST"];
287 -> 290 [label="AST"];
287 -> 291 [label="AST"];
293 -> 294 [label="AST"];
295 -> 296 [label="AST"];
295 -> 293 [label="AST"];
297 -> 298 [label="AST"];
300 -> 301 [label="AST"];
302 -> 299 [label="AST"];
302 -> 300 [label="AST"];
302 -> 297 [label="AST"];
303 -> 304 [label="AST"];
306 -> 307 [label="AST"];
308 -> 305 [label="AST"];
308 -> 306 [label="AST"];
308 -> 303 [label="AST"];
309 -> 310 [label="AST"];
311 -> 312 [label="AST"];
313 -> 292 [label="AST"];
313 -> 295 [label="AST"];
313 -> 287 [label="AST"];
313 -> 302 [label="AST"];
313 -> 308 [label="AST"];
313 -> 309 [label="AST"];
313 -> 311 [label="AST"];
314 -> 286 [label="AST"];
314 -> 313 [label="AST"];
315 -> 269 [label="AST"];
315 -> 314 [label="AST"];
316 -> 16 [label="AST"];
316 -> 29 [label="AST"];
316 -> 67 [label="AST"];
316 -> 85 [label="AST"];
316 -> 98 [label="AST"];
316 -> 122 [label="AST"];
316 -> 137 [label="AST"];
316 -> 150 [label="AST"];
316 -> 162 [label="AST"];
316 -> 175 [label="AST"];
316 -> 180 [label="AST"];
316 -> 185 [label="AST"];
316 -> 196 [label="AST"];
316 -> 264 [label="AST"];
316 -> 315 [label="AST"];
317 -> 1 [label="AST"];
317 -> 0 [label="AST"];
317 -> 2 [label="AST"];
317 -> 316 [label="AST"];
318 -> 332 [label="Action"];
320 -> 319 [label="AST"];
321 -> 320 [label="AST"];
323 -> 322 [label="AST"];
326 -> 325 [label="AST"];
327 -> 323 [label="AST"];
327 -> 324 [label="AST"];
327 -> 326 [label="AST"];
329 -> 328 [label="AST"];
330 -> 329 [label="AST"];
331 -> 330 [label="AST"];
332 -> 333 [label="AST"];
332 -> 321 [label="AST"];
332 -> 327 [label="AST"];
332 -> 331 [label="AST"];
332 -> 15 [label="Control Dep"];
332 -> 14 [label="Control Dep"];
}