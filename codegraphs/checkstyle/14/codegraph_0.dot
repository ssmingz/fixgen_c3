digraph "findContainingConstantDef#?,DetailAST" {
0 [label="2:CtTypeReferenceImpl@DetailAST" shape=ellipse]
1 [label="2:CtPackageReferenceImpl@" shape=ellipse]
2 [label="2:CtVirtualElement@findContainingConstantDef" shape=ellipse]
3 [label="2:CtParameterImpl@DetailAST aAST" shape=ellipse]
4 [label="2:CtTypeReferenceImpl@DetailAST" shape=ellipse]
5 [label="3:CtTypeReferenceImpl@DetailAST" shape=ellipse]
6 [label="3:CtPackageReferenceImpl@" shape=ellipse]
7 [label="3:CtVariableReadImpl@aAST" shape=ellipse]
8 [label="3:CtParameterReferenceImpl@aAST" shape=ellipse]
9 [label="3:CtVirtualElement@varDefAST" shape=ellipse]
10 [label="3:CtLocalVariableImpl@DetailAST varDefAST = aAST" shape=ellipse]
11 [label="4:CtVariableReadImpl@varDefAST" shape=ellipse]
12 [label="4:CtLocalVariableReferenceImpl@varDefAST" shape=ellipse]
13 [label="4:CtLiteralImpl@null" shape=ellipse]
14 [label="4:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
15 [label="4:CtBinaryOperatorImpl@(varDefAST != null)" shape=ellipse]
16 [label="4:CtExecutableReferenceImpl@getType()" shape=ellipse]
17 [label="4:CtTypeReferenceImpl@DetailAST" shape=ellipse]
18 [label="4:CtVirtualElement@getType" shape=ellipse]
19 [label="4:CtVariableReadImpl@varDefAST" shape=ellipse]
20 [label="4:CtLocalVariableReferenceImpl@varDefAST" shape=ellipse]
21 [label="4:CtInvocationImpl@varDefAST.getType()" shape=ellipse]
22 [label="4:CtFieldReferenceImpl@TokenTypes.VARIABLE_DEF" shape=ellipse]
23 [label="4:CtTypeReferenceImpl@TokenTypes" shape=ellipse]
24 [label="4:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
25 [label="4:CtFieldReadImpl@TokenTypes.VARIABLE_DEF" shape=ellipse]
26 [label="4:CtTypeAccessImpl@TokenTypes" shape=ellipse]
27 [label="4:CtBinaryOperatorImpl@(varDefAST.getType() != TokenTypes.VARIABLE_DEF)" shape=ellipse]
28 [label="4:CtBinaryOperatorImpl@(varDefAST != null) && (varDefAST.getType() != TokenTypes.VARIABLE_DEF)" shape=ellipse]
29 [label="5:CtVariableWriteImpl@varDefAST" shape=ellipse]
30 [label="5:CtLocalVariableReferenceImpl@varDefAST" shape=ellipse]
31 [label="5:CtExecutableReferenceImpl@getParent()" shape=ellipse]
32 [label="5:CtTypeReferenceImpl@DetailAST" shape=ellipse]
33 [label="5:CtVirtualElement@getParent" shape=ellipse]
34 [label="5:CtVariableReadImpl@varDefAST" shape=ellipse]
35 [label="5:CtLocalVariableReferenceImpl@varDefAST" shape=ellipse]
36 [label="5:CtInvocationImpl@varDefAST.getParent()" shape=ellipse]
37 [label="5:CtAssignmentImpl@varDefAST = varDefAST.getParent()" shape=ellipse]
38 [label="4:CtBlockImpl@\{
    varDefAST = varDefAST.getParent();
\}" shape=ellipse]
39 [label="4:CtWhileImpl@while ((varDefAST != null) && (varDefAST.getType() != TokenTypes.VARIABLE_DEF)) \{
    varDefAST = varDefAST.getParent();
\} " shape=ellipse]
40 [label="7:CtVariableReadImpl@varDefAST" shape=ellipse]
41 [label="7:CtLocalVariableReferenceImpl@varDefAST" shape=ellipse]
42 [label="7:CtLiteralImpl@null" shape=ellipse]
43 [label="7:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
44 [label="7:CtBinaryOperatorImpl@varDefAST == null" shape=ellipse]
45 [label="8:CtLiteralImpl@null" shape=ellipse]
46 [label="8:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
47 [label="8:CtReturnImpl@return null" shape=ellipse]
48 [label="7:CtBlockImpl@\{
    return null;
\}" shape=ellipse]
49 [label="7:CtIfImpl@if (varDefAST == null) \{
    return null;
\}" shape=ellipse]
50 [label="10:CtExecutableReferenceImpl@inInterfaceBlock(DetailAST)" shape=ellipse]
51 [label="10:CtTypeReferenceImpl@ScopeUtils" shape=ellipse]
52 [label="10:CtTypeReferenceImpl@boolean" shape=ellipse]
53 [label="10:CtTypeReferenceImpl@DetailAST" shape=ellipse]
54 [label="10:CtVirtualElement@inInterfaceBlock" shape=ellipse]
55 [label="10:CtTypeAccessImpl@ScopeUtils" shape=ellipse]
56 [label="10:CtTypeReferenceImpl@ScopeUtils" shape=ellipse]
57 [label="10:CtVariableReadImpl@varDefAST" shape=ellipse]
58 [label="10:CtLocalVariableReferenceImpl@varDefAST" shape=ellipse]
59 [label="10:CtInvocationImpl@ScopeUtils.inInterfaceBlock(varDefAST)" shape=ellipse]
60 [label="11:CtVariableReadImpl@varDefAST" shape=ellipse]
61 [label="11:CtLocalVariableReferenceImpl@varDefAST" shape=ellipse]
62 [label="11:CtReturnImpl@return varDefAST" shape=ellipse]
63 [label="10:CtBlockImpl@\{
    return varDefAST;
\}" shape=ellipse]
64 [label="10:CtIfImpl@if (ScopeUtils.inInterfaceBlock(varDefAST)) \{
    return varDefAST;
\}" shape=ellipse]
65 [label="13:CtTypeReferenceImpl@DetailAST" shape=ellipse]
66 [label="13:CtPackageReferenceImpl@" shape=ellipse]
67 [label="13:CtExecutableReferenceImpl@findFirstToken()" shape=ellipse]
68 [label="13:CtTypeReferenceImpl@DetailAST" shape=ellipse]
69 [label="13:CtTypeReferenceImpl@DetailAST" shape=ellipse]
70 [label="13:CtVirtualElement@findFirstToken" shape=ellipse]
71 [label="13:CtVariableReadImpl@varDefAST" shape=ellipse]
72 [label="13:CtLocalVariableReferenceImpl@varDefAST" shape=ellipse]
73 [label="13:CtTypeAccessImpl@MODIFIERS" shape=ellipse]
74 [label="13:CtTypeReferenceImpl@MODIFIERS" shape=ellipse]
75 [label="13:CtInvocationImpl@varDefAST.findFirstToken(MODIFIERS)" shape=ellipse]
76 [label="13:CtVirtualElement@modifiersAST" shape=ellipse]
77 [label="13:CtLocalVariableImpl@final DetailAST modifiersAST = varDefAST.findFirstToken(MODIFIERS)" shape=ellipse]
78 [label="14:CtExecutableReferenceImpl@branchContains()" shape=ellipse]
79 [label="14:CtTypeReferenceImpl@DetailAST" shape=ellipse]
80 [label="14:CtTypeReferenceImpl@boolean" shape=ellipse]
81 [label="14:CtVirtualElement@branchContains" shape=ellipse]
82 [label="14:CtVariableReadImpl@modifiersAST" shape=ellipse]
83 [label="14:CtLocalVariableReferenceImpl@modifiersAST" shape=ellipse]
84 [label="14:CtTypeAccessImpl@FINAL" shape=ellipse]
85 [label="14:CtTypeReferenceImpl@FINAL" shape=ellipse]
86 [label="14:CtInvocationImpl@modifiersAST.branchContains(FINAL)" shape=ellipse]
87 [label="15:CtVariableReadImpl@varDefAST" shape=ellipse]
88 [label="15:CtLocalVariableReferenceImpl@varDefAST" shape=ellipse]
89 [label="15:CtReturnImpl@return varDefAST" shape=ellipse]
90 [label="14:CtBlockImpl@\{
    return varDefAST;
\}" shape=ellipse]
91 [label="14:CtIfImpl@if (modifiersAST.branchContains(FINAL)) \{
    return varDefAST;
\}" shape=ellipse]
92 [label="17:CtLiteralImpl@null" shape=ellipse]
93 [label="17:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
94 [label="17:CtReturnImpl@return null" shape=ellipse]
95 [label="2:CtBlockImpl@\{
    DetailAST varDefAST = aAST;
    while ((varDefAST != null) && (varDefAST.getType() != TokenTypes.VARIABLE_DEF)) \{
        varDefAST = varDefAST.getParent();
    \} 
    if (varDefAST == null) \{
        return null;
    \}
    if (ScopeUtils.inInterfaceBlock(varDefAST)) \{
        return varDefAST;
    \}
    final DetailAST modifiersAST = varDefAST.findFirstToken(MODIFIERS);
    if (modifiersAST.branchContains(FINAL)) \{
        return varDefAST;
    \}
    return null;
\}" shape=ellipse]
96 [label="2:CtMethodImpl@private DetailAST findContainingConstantDef(DetailAST aAST) \{
    DetailAST varDefAST = aAST;
    while ((varDefAST != null) && (varDefAST.getType() != TokenTypes.VARIABLE_DEF)) \{
        varDefAST = varDefAST.getParent();
    \} 
    if (varDefAST == null) \{
        return null;
    \}
    if (ScopeUtils.inInterfaceBlock(varDefAST)) \{
        return varDefAST;
    \}
    final DetailAST modifiersAST = varDefAST.findFirstToken(MODIFIERS);
    if (modifiersAST.branchContains(FINAL)) \{
        return varDefAST;
    \}
    return null;
\}" shape=ellipse]
97 [label="10:Update@UPDATE" shape=ellipse]
98 [label="10:CtPackageReferenceImpl@" shape=ellipse]
99 [label="10:CtTypeReferenceImpl@ScopeUtils" shape=ellipse]
100 [label="10:CtTypeAccessImpl@ScopeUtils" shape=ellipse]
101 [label="10:CtPackageReferenceImpl@" shape=ellipse]
102 [label="10:CtTypeReferenceImpl@ScopeUtils" shape=ellipse]
103 [label="10:CtTypeReferenceImpl@boolean" shape=ellipse]
104 [label="10:CtPackageReferenceImpl@" shape=ellipse]
105 [label="10:CtTypeReferenceImpl@DetailAST" shape=ellipse]
106 [label="10:CtExecutableReferenceImpl@inInterfaceOrAnnotationBlock(DetailAST)" shape=ellipse]
107 [label="10:CtPackageReferenceImpl@" shape=ellipse]
108 [label="10:CtTypeReferenceImpl@DetailAST" shape=ellipse]
109 [label="10:CtLocalVariableReferenceImpl@varDefAST" shape=ellipse]
110 [label="10:CtVariableReadImpl@varDefAST" shape=ellipse]
111 [label="10:CtInvocationImpl@ScopeUtils.inInterfaceOrAnnotationBlock(varDefAST)" shape=ellipse]
112 [label="10:CtVirtualElement@inInterfaceOrAnnotationBlock" shape=ellipse]
0 -> 1 [label="AST"];
3 -> 4 [label="AST"];
5 -> 6 [label="AST"];
7 -> 8 [label="AST"];
7 -> 9 [label="Data Dep"];
9 -> 11 [label="Define-Use"];
9 -> 19 [label="Define-Use"];
10 -> 9 [label="AST"];
10 -> 5 [label="AST"];
10 -> 7 [label="AST"];
11 -> 12 [label="AST"];
13 -> 14 [label="AST"];
15 -> 11 [label="AST"];
15 -> 13 [label="AST"];
16 -> 17 [label="AST"];
19 -> 20 [label="AST"];
21 -> 18 [label="AST"];
21 -> 19 [label="AST"];
21 -> 16 [label="AST"];
22 -> 23 [label="AST"];
22 -> 24 [label="AST"];
25 -> 26 [label="AST"];
25 -> 22 [label="AST"];
27 -> 21 [label="AST"];
27 -> 25 [label="AST"];
28 -> 15 [label="AST"];
28 -> 27 [label="AST"];
28 -> 38 [label="Control Dep"];
28 -> 37 [label="Control Dep"];
28 -> 29 [label="Control Dep"];
28 -> 36 [label="Control Dep"];
28 -> 31 [label="Control Dep"];
28 -> 34 [label="Control Dep"];
29 -> 30 [label="AST"];
29 -> 40 [label="Define-Use"];
29 -> 57 [label="Define-Use"];
29 -> 60 [label="Define-Use"];
29 -> 71 [label="Define-Use"];
29 -> 87 [label="Define-Use"];
29 -> 110 [label="Define-Use"];
29 -> 110 [label="Data Dep"];
29 -> 110 [label="Control Dep"];
30 -> 34 [label="Define-Use"];
31 -> 32 [label="AST"];
34 -> 35 [label="AST"];
34 -> 29 [label="Data Dep"];
36 -> 33 [label="AST"];
36 -> 34 [label="AST"];
36 -> 31 [label="AST"];
37 -> 29 [label="AST"];
37 -> 36 [label="AST"];
38 -> 37 [label="AST"];
39 -> 28 [label="AST"];
39 -> 38 [label="AST"];
40 -> 41 [label="AST"];
42 -> 43 [label="AST"];
44 -> 40 [label="AST"];
44 -> 42 [label="AST"];
44 -> 48 [label="Control Dep"];
44 -> 47 [label="Control Dep"];
44 -> 45 [label="Control Dep"];
45 -> 46 [label="AST"];
47 -> 45 [label="AST"];
48 -> 47 [label="AST"];
49 -> 44 [label="AST"];
49 -> 48 [label="AST"];
50 -> 51 [label="AST"];
50 -> 52 [label="AST"];
50 -> 53 [label="AST"];
55 -> 56 [label="AST"];
57 -> 58 [label="AST"];
59 -> 54 [label="AST"];
59 -> 55 [label="AST"];
59 -> 50 [label="AST"];
59 -> 57 [label="AST"];
59 -> 63 [label="Control Dep"];
59 -> 62 [label="Control Dep"];
59 -> 60 [label="Control Dep"];
59 -> 97 [label="Action"];
60 -> 61 [label="AST"];
62 -> 60 [label="AST"];
63 -> 62 [label="AST"];
64 -> 59 [label="AST"];
64 -> 63 [label="AST"];
65 -> 66 [label="AST"];
67 -> 68 [label="AST"];
67 -> 69 [label="AST"];
71 -> 72 [label="AST"];
71 -> 76 [label="Data Dep"];
73 -> 74 [label="AST"];
75 -> 70 [label="AST"];
75 -> 71 [label="AST"];
75 -> 67 [label="AST"];
75 -> 73 [label="AST"];
76 -> 82 [label="Define-Use"];
77 -> 76 [label="AST"];
77 -> 65 [label="AST"];
77 -> 75 [label="AST"];
78 -> 79 [label="AST"];
78 -> 80 [label="AST"];
82 -> 83 [label="AST"];
84 -> 85 [label="AST"];
86 -> 81 [label="AST"];
86 -> 82 [label="AST"];
86 -> 78 [label="AST"];
86 -> 84 [label="AST"];
86 -> 90 [label="Control Dep"];
86 -> 89 [label="Control Dep"];
86 -> 87 [label="Control Dep"];
87 -> 88 [label="AST"];
89 -> 87 [label="AST"];
90 -> 89 [label="AST"];
91 -> 86 [label="AST"];
91 -> 90 [label="AST"];
92 -> 93 [label="AST"];
94 -> 92 [label="AST"];
95 -> 10 [label="AST"];
95 -> 39 [label="AST"];
95 -> 49 [label="AST"];
95 -> 64 [label="AST"];
95 -> 77 [label="AST"];
95 -> 91 [label="AST"];
95 -> 94 [label="AST"];
96 -> 2 [label="AST"];
96 -> 0 [label="AST"];
96 -> 3 [label="AST"];
96 -> 95 [label="AST"];
97 -> 111 [label="Action"];
99 -> 98 [label="AST"];
100 -> 99 [label="AST"];
102 -> 101 [label="AST"];
105 -> 104 [label="AST"];
106 -> 102 [label="AST"];
106 -> 103 [label="AST"];
106 -> 105 [label="AST"];
108 -> 107 [label="AST"];
109 -> 108 [label="AST"];
110 -> 109 [label="AST"];
111 -> 112 [label="AST"];
111 -> 100 [label="AST"];
111 -> 106 [label="AST"];
111 -> 110 [label="AST"];
111 -> 63 [label="Control Dep"];
111 -> 62 [label="Control Dep"];
111 -> 60 [label="Control Dep"];
}