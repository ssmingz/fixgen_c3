digraph "FileText#?,File,String" {
0 [label="2:CtVirtualElement@FileText" shape=ellipse]
1 [label="2:CtParameterImpl@File file" shape=ellipse]
2 [label="2:CtTypeReferenceImpl@File" shape=ellipse]
3 [label="2:CtParameterImpl@String charsetName" shape=ellipse]
4 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@IOException" shape=ellipse]
6 [label="2:CtPackageReferenceImpl@" shape=ellipse]
7 [label="3:CtFieldReferenceImpl@file" shape=ellipse]
8 [label="3:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
9 [label="3:CtFieldWriteImpl@this.file" shape=ellipse]
10 [label="3:CtThisAccessImpl@this" shape=ellipse]
11 [label="3:CtVariableReadImpl@file" shape=ellipse]
12 [label="3:CtParameterReferenceImpl@file" shape=ellipse]
13 [label="3:CtAssignmentImpl@this.file = file" shape=ellipse]
14 [label="4:CtTypeReferenceImpl@CharsetDecoder" shape=ellipse]
15 [label="4:CtPackageReferenceImpl@" shape=ellipse]
16 [label="4:CtVirtualElement@decoder" shape=ellipse]
17 [label="4:CtLocalVariableImpl@final CharsetDecoder decoder" shape=ellipse]
18 [label="6:CtFieldReferenceImpl@charset" shape=ellipse]
19 [label="6:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
20 [label="6:CtFieldWriteImpl@charset" shape=ellipse]
21 [label="6:CtExecutableReferenceImpl@forName(java.lang.String)" shape=ellipse]
22 [label="6:CtTypeReferenceImpl@Charset" shape=ellipse]
23 [label="6:CtTypeReferenceImpl@String" shape=ellipse]
24 [label="6:CtVirtualElement@forName" shape=ellipse]
25 [label="6:CtTypeAccessImpl@Charset" shape=ellipse]
26 [label="6:CtTypeReferenceImpl@Charset" shape=ellipse]
27 [label="6:CtVariableReadImpl@charsetName" shape=ellipse]
28 [label="6:CtParameterReferenceImpl@charsetName" shape=ellipse]
29 [label="6:CtInvocationImpl@Charset.forName(charsetName)" shape=ellipse]
30 [label="6:CtAssignmentImpl@charset = Charset.forName(charsetName)" shape=ellipse]
31 [label="7:CtVariableWriteImpl@decoder" shape=ellipse]
32 [label="7:CtLocalVariableReferenceImpl@decoder" shape=ellipse]
33 [label="7:CtExecutableReferenceImpl@newDecoder()" shape=ellipse]
34 [label="7:CtTypeReferenceImpl@charset" shape=ellipse]
35 [label="7:CtVirtualElement@newDecoder" shape=ellipse]
36 [label="7:CtFieldReferenceImpl@charset" shape=ellipse]
37 [label="7:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
38 [label="7:CtFieldReadImpl@charset" shape=ellipse]
39 [label="7:CtInvocationImpl@charset.newDecoder()" shape=ellipse]
40 [label="7:CtAssignmentImpl@decoder = charset.newDecoder()" shape=ellipse]
41 [label="8:CtExecutableReferenceImpl@onMalformedInput()" shape=ellipse]
42 [label="8:CtTypeReferenceImpl@CharsetDecoder" shape=ellipse]
43 [label="8:CtVirtualElement@onMalformedInput" shape=ellipse]
44 [label="8:CtVariableReadImpl@decoder" shape=ellipse]
45 [label="8:CtLocalVariableReferenceImpl@decoder" shape=ellipse]
46 [label="8:CtTypeAccessImpl@REPLACE" shape=ellipse]
47 [label="8:CtTypeReferenceImpl@REPLACE" shape=ellipse]
48 [label="8:CtInvocationImpl@decoder.onMalformedInput(REPLACE)" shape=ellipse]
49 [label="9:CtExecutableReferenceImpl@onUnmappableCharacter()" shape=ellipse]
50 [label="9:CtTypeReferenceImpl@CharsetDecoder" shape=ellipse]
51 [label="9:CtVirtualElement@onUnmappableCharacter" shape=ellipse]
52 [label="9:CtVariableReadImpl@decoder" shape=ellipse]
53 [label="9:CtLocalVariableReferenceImpl@decoder" shape=ellipse]
54 [label="9:CtTypeAccessImpl@REPLACE" shape=ellipse]
55 [label="9:CtTypeReferenceImpl@REPLACE" shape=ellipse]
56 [label="9:CtInvocationImpl@decoder.onUnmappableCharacter(REPLACE)" shape=ellipse]
57 [label="5:CtBlockImpl@\{
    charset = Charset.forName(charsetName);
    decoder = charset.newDecoder();
    decoder.onMalformedInput(REPLACE);
    decoder.onUnmappableCharacter(REPLACE);
\}" shape=ellipse]
58 [label="10:CtVirtualElement@ex" shape=ellipse]
59 [label="10:CtTypeReferenceImpl@UnsupportedCharsetException" shape=ellipse]
60 [label="10:CtPackageReferenceImpl@" shape=ellipse]
61 [label="10:CtCatchVariableImpl@final UnsupportedCharsetException ex" shape=ellipse]
62 [label="11:CtTypeReferenceImpl@String" shape=ellipse]
63 [label="11:CtPackageReferenceImpl@java.lang" shape=ellipse]
64 [label="11:CtLiteralImpl@\"Unsupported charset: \"" shape=ellipse]
65 [label="11:CtTypeReferenceImpl@String" shape=ellipse]
66 [label="11:CtVariableReadImpl@charsetName" shape=ellipse]
67 [label="11:CtParameterReferenceImpl@charsetName" shape=ellipse]
68 [label="11:CtBinaryOperatorImpl@\"Unsupported charset: \" + charsetName" shape=ellipse]
69 [label="11:CtTypeReferenceImpl@String" shape=ellipse]
70 [label="11:CtVirtualElement@message" shape=ellipse]
71 [label="11:CtLocalVariableImpl@final String message = \"Unsupported charset: \" + charsetName" shape=ellipse]
72 [label="12:CtTypeReferenceImpl@UnsupportedEncodingException" shape=ellipse]
73 [label="12:CtPackageReferenceImpl@" shape=ellipse]
74 [label="12:CtVirtualElement@ex2" shape=ellipse]
75 [label="12:CtLocalVariableImpl@final UnsupportedEncodingException ex2" shape=ellipse]
76 [label="13:CtVariableWriteImpl@ex2" shape=ellipse]
77 [label="13:CtLocalVariableReferenceImpl@ex2" shape=ellipse]
78 [label="13:CtExecutableReferenceImpl@UnsupportedEncodingException(java.lang.String)" shape=ellipse]
79 [label="13:CtTypeReferenceImpl@UnsupportedEncodingException" shape=ellipse]
80 [label="13:CtTypeReferenceImpl@UnsupportedEncodingException" shape=ellipse]
81 [label="13:CtTypeReferenceImpl@String" shape=ellipse]
82 [label="13:CtVariableReadImpl@message" shape=ellipse]
83 [label="13:CtLocalVariableReferenceImpl@message" shape=ellipse]
84 [label="13:CtConstructorCallImpl@new UnsupportedEncodingException(message)" shape=ellipse]
85 [label="13:CtAssignmentImpl@ex2 = new UnsupportedEncodingException(message)" shape=ellipse]
86 [label="14:CtExecutableReferenceImpl@initCause(UnsupportedCharsetException)" shape=ellipse]
87 [label="14:CtTypeReferenceImpl@UnsupportedEncodingException" shape=ellipse]
88 [label="14:CtTypeReferenceImpl@UnsupportedCharsetException" shape=ellipse]
89 [label="14:CtVirtualElement@initCause" shape=ellipse]
90 [label="14:CtVariableReadImpl@ex2" shape=ellipse]
91 [label="14:CtLocalVariableReferenceImpl@ex2" shape=ellipse]
92 [label="14:CtVariableReadImpl@ex" shape=ellipse]
93 [label="14:CtCatchVariableReferenceImpl@ex" shape=ellipse]
94 [label="14:CtInvocationImpl@ex2.initCause(ex)" shape=ellipse]
95 [label="15:CtVariableReadImpl@ex2" shape=ellipse]
96 [label="15:CtLocalVariableReferenceImpl@ex2" shape=ellipse]
97 [label="15:CtThrowImpl@throw ex2" shape=ellipse]
98 [label="10:CtBlockImpl@\{
    final String message = \"Unsupported charset: \" + charsetName;
    final UnsupportedEncodingException ex2;
    ex2 = new UnsupportedEncodingException(message);
    ex2.initCause(ex);
    throw ex2;
\}" shape=ellipse]
99 [label="10:CtCatchImpl@ catch (final UnsupportedCharsetException ex) \{
    final String message = \"Unsupported charset: \" + charsetName;
    final UnsupportedEncodingException ex2;
    ex2 = new UnsupportedEncodingException(message);
    ex2.initCause(ex);
    throw ex2;
\}" shape=ellipse]
100 [label="5:CtTryImpl@try \{
    charset = Charset.forName(charsetName);
    decoder = charset.newDecoder();
    decoder.onMalformedInput(REPLACE);
    decoder.onUnmappableCharacter(REPLACE);
\} catch (final UnsupportedCharsetException ex) \{
    final String message = \"Unsupported charset: \" + charsetName;
    final UnsupportedEncodingException ex2;
    ex2 = new UnsupportedEncodingException(message);
    ex2.initCause(ex);
    throw ex2;
\}" shape=ellipse]
101 [label="17:CtVirtualElement@char[]" shape=ellipse]
102 [label="17:CtArrayTypeReferenceImpl@char[]" shape=ellipse]
103 [label="17:CtTypeReferenceImpl@char" shape=ellipse]
104 [label="17:CtNewArrayImpl@new char[READ_BUFFER_SIZE]" shape=ellipse]
105 [label="17:CtArrayTypeReferenceImpl@char[]" shape=ellipse]
106 [label="17:CtFieldReadImpl@READ_BUFFER_SIZE" shape=ellipse]
107 [label="17:CtVirtualElement@chars" shape=ellipse]
108 [label="17:CtLocalVariableImpl@final char[] chars = new char[READ_BUFFER_SIZE]" shape=ellipse]
109 [label="18:CtTypeReferenceImpl@StringBuilder" shape=ellipse]
110 [label="18:CtPackageReferenceImpl@java.lang" shape=ellipse]
111 [label="18:CtExecutableReferenceImpl@java.lang.StringBuilder()" shape=ellipse]
112 [label="18:CtTypeReferenceImpl@StringBuilder" shape=ellipse]
113 [label="18:CtTypeReferenceImpl@StringBuilder" shape=ellipse]
114 [label="18:CtConstructorCallImpl@new StringBuilder()" shape=ellipse]
115 [label="18:CtVirtualElement@buf" shape=ellipse]
116 [label="18:CtLocalVariableImpl@final StringBuilder buf = new StringBuilder()" shape=ellipse]
117 [label="19:CtTypeReferenceImpl@FileInputStream" shape=ellipse]
118 [label="19:CtPackageReferenceImpl@" shape=ellipse]
119 [label="19:CtExecutableReferenceImpl@FileInputStream()" shape=ellipse]
120 [label="19:CtTypeReferenceImpl@FileInputStream" shape=ellipse]
121 [label="19:CtTypeReferenceImpl@FileInputStream" shape=ellipse]
122 [label="19:CtVariableReadImpl@file" shape=ellipse]
123 [label="19:CtParameterReferenceImpl@file" shape=ellipse]
124 [label="19:CtConstructorCallImpl@new FileInputStream(file)" shape=ellipse]
125 [label="19:CtVirtualElement@stream" shape=ellipse]
126 [label="19:CtLocalVariableImpl@final FileInputStream stream = new FileInputStream(file)" shape=ellipse]
127 [label="20:CtTypeReferenceImpl@Reader" shape=ellipse]
128 [label="20:CtPackageReferenceImpl@" shape=ellipse]
129 [label="20:CtExecutableReferenceImpl@InputStreamReader()" shape=ellipse]
130 [label="20:CtTypeReferenceImpl@InputStreamReader" shape=ellipse]
131 [label="20:CtTypeReferenceImpl@InputStreamReader" shape=ellipse]
132 [label="20:CtVariableReadImpl@stream" shape=ellipse]
133 [label="20:CtLocalVariableReferenceImpl@stream" shape=ellipse]
134 [label="20:CtVariableReadImpl@decoder" shape=ellipse]
135 [label="20:CtLocalVariableReferenceImpl@decoder" shape=ellipse]
136 [label="20:CtConstructorCallImpl@new InputStreamReader(stream, decoder)" shape=ellipse]
137 [label="20:CtVirtualElement@reader" shape=ellipse]
138 [label="20:CtLocalVariableImpl@final Reader reader = new InputStreamReader(stream, decoder)" shape=ellipse]
139 [label="22:CtLiteralImpl@true" shape=ellipse]
140 [label="22:CtTypeReferenceImpl@boolean" shape=ellipse]
141 [label="23:CtTypeReferenceImpl@int" shape=ellipse]
142 [label="23:CtExecutableReferenceImpl@read(char[])" shape=ellipse]
143 [label="23:CtTypeReferenceImpl@Reader" shape=ellipse]
144 [label="23:CtTypeReferenceImpl@int" shape=ellipse]
145 [label="23:CtArrayTypeReferenceImpl@char[]" shape=ellipse]
146 [label="23:CtVirtualElement@read" shape=ellipse]
147 [label="23:CtVariableReadImpl@reader" shape=ellipse]
148 [label="23:CtLocalVariableReferenceImpl@reader" shape=ellipse]
149 [label="23:CtVariableReadImpl@chars" shape=ellipse]
150 [label="23:CtLocalVariableReferenceImpl@chars" shape=ellipse]
151 [label="23:CtInvocationImpl@reader.read(chars)" shape=ellipse]
152 [label="23:CtVirtualElement@len" shape=ellipse]
153 [label="23:CtLocalVariableImpl@final int len = reader.read(chars)" shape=ellipse]
154 [label="24:CtVariableReadImpl@len" shape=ellipse]
155 [label="24:CtLocalVariableReferenceImpl@len" shape=ellipse]
156 [label="24:CtLiteralImpl@0" shape=ellipse]
157 [label="24:CtTypeReferenceImpl@int" shape=ellipse]
158 [label="24:CtBinaryOperatorImpl@len < 0" shape=ellipse]
159 [label="24:CtTypeReferenceImpl@boolean" shape=ellipse]
160 [label="25:CtBreakImpl@break" shape=ellipse]
161 [label="24:CtBlockImpl@\{
    break;
\}" shape=ellipse]
162 [label="24:CtIfImpl@if (len < 0) \{
    break;
\}" shape=ellipse]
163 [label="27:CtExecutableReferenceImpl@append(char[],int,int)" shape=ellipse]
164 [label="27:CtTypeReferenceImpl@StringBuilder" shape=ellipse]
165 [label="27:CtTypeReferenceImpl@StringBuilder" shape=ellipse]
166 [label="27:CtArrayTypeReferenceImpl@char[]" shape=ellipse]
167 [label="27:CtTypeReferenceImpl@int" shape=ellipse]
168 [label="27:CtTypeReferenceImpl@int" shape=ellipse]
169 [label="27:CtVirtualElement@append" shape=ellipse]
170 [label="27:CtVariableReadImpl@buf" shape=ellipse]
171 [label="27:CtLocalVariableReferenceImpl@buf" shape=ellipse]
172 [label="27:CtVariableReadImpl@chars" shape=ellipse]
173 [label="27:CtLocalVariableReferenceImpl@chars" shape=ellipse]
174 [label="27:CtLiteralImpl@0" shape=ellipse]
175 [label="27:CtTypeReferenceImpl@int" shape=ellipse]
176 [label="27:CtVariableReadImpl@len" shape=ellipse]
177 [label="27:CtLocalVariableReferenceImpl@len" shape=ellipse]
178 [label="27:CtInvocationImpl@buf.append(chars, 0, len)" shape=ellipse]
179 [label="22:CtBlockImpl@\{
    final int len = reader.read(chars);
    if (len < 0) \{
        break;
    \}
    buf.append(chars, 0, len);
\}" shape=ellipse]
180 [label="22:CtWhileImpl@while (true) \{
    final int len = reader.read(chars);
    if (len < 0) \{
        break;
    \}
    buf.append(chars, 0, len);
\} " shape=ellipse]
181 [label="21:CtBlockImpl@\{
    while (true) \{
        final int len = reader.read(chars);
        if (len < 0) \{
            break;
        \}
        buf.append(chars, 0, len);
    \} 
\}" shape=ellipse]
182 [label="30:CtExecutableReferenceImpl@closeQuietly(Reader)" shape=ellipse]
183 [label="30:CtTypeReferenceImpl@Utils" shape=ellipse]
184 [label="30:CtTypeReferenceImpl@Reader" shape=ellipse]
185 [label="30:CtVirtualElement@closeQuietly" shape=ellipse]
186 [label="30:CtTypeAccessImpl@Utils" shape=ellipse]
187 [label="30:CtTypeReferenceImpl@Utils" shape=ellipse]
188 [label="30:CtVariableReadImpl@reader" shape=ellipse]
189 [label="30:CtLocalVariableReferenceImpl@reader" shape=ellipse]
190 [label="30:CtInvocationImpl@Utils.closeQuietly(reader)" shape=ellipse]
191 [label="29:CtBlockImpl@\{
    Utils.closeQuietly(reader);
\}" shape=ellipse]
192 [label="21:CtTryImpl@try \{
    while (true) \{
        final int len = reader.read(chars);
        if (len < 0) \{
            break;
        \}
        buf.append(chars, 0, len);
    \} 
\} finally \{
    Utils.closeQuietly(reader);
\}" shape=ellipse]
193 [label="32:CtFieldReferenceImpl@fullText" shape=ellipse]
194 [label="32:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
195 [label="32:CtFieldWriteImpl@fullText" shape=ellipse]
196 [label="32:CtExecutableReferenceImpl@toString()" shape=ellipse]
197 [label="32:CtTypeReferenceImpl@StringBuilder" shape=ellipse]
198 [label="32:CtTypeReferenceImpl@String" shape=ellipse]
199 [label="32:CtVirtualElement@toString" shape=ellipse]
200 [label="32:CtVariableReadImpl@buf" shape=ellipse]
201 [label="32:CtLocalVariableReferenceImpl@buf" shape=ellipse]
202 [label="32:CtInvocationImpl@buf.toString()" shape=ellipse]
203 [label="32:CtAssignmentImpl@fullText = buf.toString()" shape=ellipse]
204 [label="33:CtTypeReferenceImpl@ArrayList<String>" shape=ellipse]
205 [label="33:CtPackageReferenceImpl@" shape=ellipse]
206 [label="33:CtTypeReferenceImpl@String" shape=ellipse]
207 [label="33:CtExecutableReferenceImpl@ArrayList<>()" shape=ellipse]
208 [label="33:CtTypeReferenceImpl@ArrayList<>" shape=ellipse]
209 [label="33:CtTypeReferenceImpl@ArrayList<>" shape=ellipse]
210 [label="33:CtConstructorCallImpl@new ArrayList<>()" shape=ellipse]
211 [label="33:CtVirtualElement@lines" shape=ellipse]
212 [label="33:CtLocalVariableImpl@final ArrayList<String> lines = new ArrayList<>()" shape=ellipse]
213 [label="34:CtTypeReferenceImpl@BufferedReader" shape=ellipse]
214 [label="34:CtPackageReferenceImpl@" shape=ellipse]
215 [label="34:CtExecutableReferenceImpl@BufferedReader(StringReader)" shape=ellipse]
216 [label="34:CtTypeReferenceImpl@BufferedReader" shape=ellipse]
217 [label="34:CtTypeReferenceImpl@BufferedReader" shape=ellipse]
218 [label="34:CtTypeReferenceImpl@StringReader" shape=ellipse]
219 [label="34:CtExecutableReferenceImpl@StringReader()" shape=ellipse]
220 [label="34:CtTypeReferenceImpl@StringReader" shape=ellipse]
221 [label="34:CtTypeReferenceImpl@StringReader" shape=ellipse]
222 [label="34:CtFieldReferenceImpl@fullText" shape=ellipse]
223 [label="34:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
224 [label="34:CtFieldReadImpl@fullText" shape=ellipse]
225 [label="34:CtConstructorCallImpl@new StringReader(fullText)" shape=ellipse]
226 [label="34:CtConstructorCallImpl@new BufferedReader(new StringReader(fullText))" shape=ellipse]
227 [label="34:CtVirtualElement@br" shape=ellipse]
228 [label="34:CtLocalVariableImpl@final BufferedReader br = new BufferedReader(new StringReader(fullText))" shape=ellipse]
229 [label="36:CtTypeReferenceImpl@String" shape=ellipse]
230 [label="36:CtPackageReferenceImpl@java.lang" shape=ellipse]
231 [label="36:CtExecutableReferenceImpl@readLine()" shape=ellipse]
232 [label="36:CtTypeReferenceImpl@BufferedReader" shape=ellipse]
233 [label="36:CtTypeReferenceImpl@String" shape=ellipse]
234 [label="36:CtVirtualElement@readLine" shape=ellipse]
235 [label="36:CtVariableReadImpl@br" shape=ellipse]
236 [label="36:CtLocalVariableReferenceImpl@br" shape=ellipse]
237 [label="36:CtInvocationImpl@br.readLine()" shape=ellipse]
238 [label="36:CtVirtualElement@l" shape=ellipse]
239 [label="36:CtLocalVariableImpl@final String l = br.readLine()" shape=ellipse]
240 [label="37:CtLiteralImpl@null" shape=ellipse]
241 [label="37:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
242 [label="37:CtVariableReadImpl@l" shape=ellipse]
243 [label="37:CtLocalVariableReferenceImpl@l" shape=ellipse]
244 [label="37:CtBinaryOperatorImpl@null == l" shape=ellipse]
245 [label="37:CtTypeReferenceImpl@boolean" shape=ellipse]
246 [label="38:CtBreakImpl@break" shape=ellipse]
247 [label="37:CtBlockImpl@\{
    break;
\}" shape=ellipse]
248 [label="37:CtIfImpl@if (null == l) \{
    break;
\}" shape=ellipse]
249 [label="40:CtExecutableReferenceImpl@add(java.lang.String)" shape=ellipse]
250 [label="40:CtTypeReferenceImpl@ArrayList<String>" shape=ellipse]
251 [label="40:CtTypeReferenceImpl@String" shape=ellipse]
252 [label="40:CtVirtualElement@add" shape=ellipse]
253 [label="40:CtVariableReadImpl@lines" shape=ellipse]
254 [label="40:CtLocalVariableReferenceImpl@lines" shape=ellipse]
255 [label="40:CtVariableReadImpl@l" shape=ellipse]
256 [label="40:CtLocalVariableReferenceImpl@l" shape=ellipse]
257 [label="40:CtInvocationImpl@lines.add(l)" shape=ellipse]
258 [label="35:CtBlockImpl@\{
    final String l = br.readLine();
    if (null == l) \{
        break;
    \}
    lines.add(l);
\}" shape=ellipse]
259 [label="35:CtForImpl@for (; ;) \{
    final String l = br.readLine();
    if (null == l) \{
        break;
    \}
    lines.add(l);
\}" shape=ellipse]
260 [label="42:CtFieldReferenceImpl@lines" shape=ellipse]
261 [label="42:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
262 [label="42:CtFieldWriteImpl@this.lines" shape=ellipse]
263 [label="42:CtThisAccessImpl@this" shape=ellipse]
264 [label="42:CtExecutableReferenceImpl@toArray(java.lang.String[])" shape=ellipse]
265 [label="42:CtTypeReferenceImpl@ArrayList<String>" shape=ellipse]
266 [label="42:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
267 [label="42:CtVirtualElement@toArray" shape=ellipse]
268 [label="42:CtVariableReadImpl@lines" shape=ellipse]
269 [label="42:CtLocalVariableReferenceImpl@lines" shape=ellipse]
270 [label="42:CtNewArrayImpl@new String[lines.size()]" shape=ellipse]
271 [label="42:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
272 [label="42:CtInvocationImpl@lines.size()" shape=ellipse]
273 [label="42:CtInvocationImpl@lines.toArray(new String[lines.size()])" shape=ellipse]
274 [label="42:CtAssignmentImpl@this.lines = lines.toArray(new String[lines.size()])" shape=ellipse]
275 [label="2:CtBlockImpl@\{
    this.file = file;
    final CharsetDecoder decoder;
    try \{
        charset = Charset.forName(charsetName);
        decoder = charset.newDecoder();
        decoder.onMalformedInput(REPLACE);
        decoder.onUnmappableCharacter(REPLACE);
    \} catch (final UnsupportedCharsetException ex) \{
        final String message = \"Unsupported charset: \" + charsetName;
        final UnsupportedEncodingException ex2;
        ex2 = new UnsupportedEncodingException(message);
        ex2.initCause(ex);
        throw ex2;
    \}
    final char[] chars = new char[READ_BUFFER_SIZE];
    final StringBuilder buf = new StringBuilder();
    final FileInputStream stream = new FileInputStream(file);
    final Reader reader = new InputStreamReader(stream, decoder);
    try \{
        while (true) \{
            final int len = reader.read(chars);
            if (len < 0) \{
                break;
            \}
            buf.append(chars, 0, len);
        \} 
    \} finally \{
        Utils.closeQuietly(reader);
    \}
    fullText = buf.toString();
    final ArrayList<String> lines = new ArrayList<>();
    final BufferedReader br = new BufferedReader(new StringReader(fullText));
    for (; ;) \{
        final String l = br.readLine();
        if (null == l) \{
            break;
        \}
        lines.add(l);
    \}
    this.lines = lines.toArray(new String[lines.size()]);
\}" shape=ellipse]
276 [label="2:CtMethodImpl@public  FileText(File file, String charsetName) throws IOException \{
    this.file = file;
    final CharsetDecoder decoder;
    try \{
        charset = Charset.forName(charsetName);
        decoder = charset.newDecoder();
        decoder.onMalformedInput(REPLACE);
        decoder.onUnmappableCharacter(REPLACE);
    \} catch (final UnsupportedCharsetException ex) \{
        final String message = \"Unsupported charset: \" + charsetName;
        final UnsupportedEncodingException ex2;
        ex2 = new UnsupportedEncodingException(message);
        ex2.initCause(ex);
        throw ex2;
    \}
    final char[] chars = new char[READ_BUFFER_SIZE];
    final StringBuilder buf = new StringBuilder();
    final FileInputStream stream = new FileInputStream(file);
    final Reader reader = new InputStreamReader(stream, decoder);
    try \{
        while (true) \{
            final int len = reader.read(chars);
            if (len < 0) \{
                break;
            \}
            buf.append(chars, 0, len);
        \} 
    \} finally \{
        Utils.closeQuietly(reader);
    \}
    fullText = buf.toString();
    final ArrayList<String> lines = new ArrayList<>();
    final BufferedReader br = new BufferedReader(new StringReader(fullText));
    for (; ;) \{
        final String l = br.readLine();
        if (null == l) \{
            break;
        \}
        lines.add(l);
    \}
    this.lines = lines.toArray(new String[lines.size()]);
\}" shape=ellipse]
277 [label="30:Update@UPDATE" shape=ellipse]
278 [label="30:CtPackageReferenceImpl@" shape=ellipse]
279 [label="30:CtTypeReferenceImpl@Closeables" shape=ellipse]
280 [label="30:CtTypeAccessImpl@Closeables" shape=ellipse]
1 -> 2 [label="AST"];
3 -> 4 [label="AST"];
5 -> 6 [label="AST"];
7 -> 8 [label="AST"];
7 -> 11 [label="Define-Use"];
7 -> 122 [label="Define-Use"];
9 -> 10 [label="AST"];
9 -> 7 [label="AST"];
11 -> 12 [label="AST"];
11 -> 9 [label="Data Dep"];
13 -> 9 [label="AST"];
13 -> 11 [label="AST"];
14 -> 15 [label="AST"];
17 -> 16 [label="AST"];
17 -> 14 [label="AST"];
18 -> 19 [label="AST"];
20 -> 18 [label="AST"];
20 -> 38 [label="Define-Use"];
21 -> 22 [label="AST"];
21 -> 23 [label="AST"];
25 -> 26 [label="AST"];
27 -> 28 [label="AST"];
27 -> 20 [label="Data Dep"];
29 -> 24 [label="AST"];
29 -> 25 [label="AST"];
29 -> 21 [label="AST"];
29 -> 27 [label="AST"];
30 -> 20 [label="AST"];
30 -> 29 [label="AST"];
31 -> 32 [label="AST"];
31 -> 44 [label="Define-Use"];
31 -> 52 [label="Define-Use"];
31 -> 134 [label="Define-Use"];
33 -> 34 [label="AST"];
36 -> 37 [label="AST"];
38 -> 36 [label="AST"];
38 -> 31 [label="Data Dep"];
39 -> 35 [label="AST"];
39 -> 38 [label="AST"];
39 -> 33 [label="AST"];
40 -> 31 [label="AST"];
40 -> 39 [label="AST"];
41 -> 42 [label="AST"];
44 -> 45 [label="AST"];
46 -> 47 [label="AST"];
48 -> 43 [label="AST"];
48 -> 44 [label="AST"];
48 -> 41 [label="AST"];
48 -> 46 [label="AST"];
49 -> 50 [label="AST"];
52 -> 53 [label="AST"];
54 -> 55 [label="AST"];
56 -> 51 [label="AST"];
56 -> 52 [label="AST"];
56 -> 49 [label="AST"];
56 -> 54 [label="AST"];
57 -> 30 [label="AST"];
57 -> 40 [label="AST"];
57 -> 48 [label="AST"];
57 -> 56 [label="AST"];
58 -> 92 [label="Define-Use"];
59 -> 60 [label="AST"];
61 -> 58 [label="AST"];
61 -> 59 [label="AST"];
61 -> 98 [label="Control Dep"];
61 -> 71 [label="Control Dep"];
61 -> 68 [label="Control Dep"];
61 -> 64 [label="Control Dep"];
61 -> 66 [label="Control Dep"];
61 -> 75 [label="Control Dep"];
61 -> 85 [label="Control Dep"];
61 -> 76 [label="Control Dep"];
61 -> 84 [label="Control Dep"];
61 -> 78 [label="Control Dep"];
61 -> 82 [label="Control Dep"];
61 -> 94 [label="Control Dep"];
61 -> 86 [label="Control Dep"];
61 -> 90 [label="Control Dep"];
61 -> 92 [label="Control Dep"];
61 -> 97 [label="Control Dep"];
61 -> 95 [label="Control Dep"];
62 -> 63 [label="AST"];
64 -> 65 [label="AST"];
66 -> 67 [label="AST"];
66 -> 70 [label="Data Dep"];
68 -> 69 [label="AST"];
68 -> 64 [label="AST"];
68 -> 66 [label="AST"];
70 -> 82 [label="Define-Use"];
71 -> 70 [label="AST"];
71 -> 62 [label="AST"];
71 -> 68 [label="AST"];
72 -> 73 [label="AST"];
75 -> 74 [label="AST"];
75 -> 72 [label="AST"];
76 -> 77 [label="AST"];
76 -> 90 [label="Define-Use"];
76 -> 95 [label="Define-Use"];
78 -> 79 [label="AST"];
78 -> 80 [label="AST"];
78 -> 81 [label="AST"];
82 -> 83 [label="AST"];
82 -> 76 [label="Data Dep"];
84 -> 78 [label="AST"];
84 -> 82 [label="AST"];
85 -> 76 [label="AST"];
85 -> 84 [label="AST"];
86 -> 87 [label="AST"];
86 -> 88 [label="AST"];
90 -> 91 [label="AST"];
92 -> 93 [label="AST"];
94 -> 89 [label="AST"];
94 -> 90 [label="AST"];
94 -> 86 [label="AST"];
94 -> 92 [label="AST"];
95 -> 96 [label="AST"];
97 -> 95 [label="AST"];
98 -> 71 [label="AST"];
98 -> 75 [label="AST"];
98 -> 85 [label="AST"];
98 -> 94 [label="AST"];
98 -> 97 [label="AST"];
99 -> 61 [label="AST"];
99 -> 98 [label="AST"];
100 -> 57 [label="AST"];
100 -> 99 [label="AST"];
102 -> 101 [label="AST"];
102 -> 103 [label="AST"];
104 -> 105 [label="AST"];
104 -> 106 [label="AST"];
106 -> 107 [label="Data Dep"];
107 -> 149 [label="Define-Use"];
107 -> 172 [label="Define-Use"];
108 -> 107 [label="AST"];
108 -> 102 [label="AST"];
108 -> 104 [label="AST"];
109 -> 110 [label="AST"];
111 -> 112 [label="AST"];
111 -> 113 [label="AST"];
114 -> 111 [label="AST"];
115 -> 170 [label="Define-Use"];
115 -> 200 [label="Define-Use"];
116 -> 115 [label="AST"];
116 -> 109 [label="AST"];
116 -> 114 [label="AST"];
117 -> 118 [label="AST"];
119 -> 120 [label="AST"];
119 -> 121 [label="AST"];
122 -> 123 [label="AST"];
122 -> 125 [label="Data Dep"];
124 -> 119 [label="AST"];
124 -> 122 [label="AST"];
125 -> 132 [label="Define-Use"];
126 -> 125 [label="AST"];
126 -> 117 [label="AST"];
126 -> 124 [label="AST"];
127 -> 128 [label="AST"];
129 -> 130 [label="AST"];
129 -> 131 [label="AST"];
132 -> 133 [label="AST"];
132 -> 137 [label="Data Dep"];
134 -> 135 [label="AST"];
134 -> 137 [label="Data Dep"];
136 -> 129 [label="AST"];
136 -> 132 [label="AST"];
136 -> 134 [label="AST"];
137 -> 147 [label="Define-Use"];
137 -> 188 [label="Define-Use"];
138 -> 137 [label="AST"];
138 -> 127 [label="AST"];
138 -> 136 [label="AST"];
139 -> 140 [label="AST"];
139 -> 179 [label="Control Dep"];
139 -> 153 [label="Control Dep"];
139 -> 151 [label="Control Dep"];
139 -> 142 [label="Control Dep"];
139 -> 147 [label="Control Dep"];
139 -> 149 [label="Control Dep"];
139 -> 162 [label="Control Dep"];
139 -> 158 [label="Control Dep"];
139 -> 154 [label="Control Dep"];
139 -> 156 [label="Control Dep"];
139 -> 178 [label="Control Dep"];
139 -> 163 [label="Control Dep"];
139 -> 170 [label="Control Dep"];
139 -> 172 [label="Control Dep"];
139 -> 174 [label="Control Dep"];
139 -> 176 [label="Control Dep"];
142 -> 143 [label="AST"];
142 -> 144 [label="AST"];
142 -> 145 [label="AST"];
147 -> 148 [label="AST"];
147 -> 152 [label="Data Dep"];
149 -> 150 [label="AST"];
149 -> 152 [label="Data Dep"];
151 -> 146 [label="AST"];
151 -> 147 [label="AST"];
151 -> 142 [label="AST"];
151 -> 149 [label="AST"];
152 -> 154 [label="Define-Use"];
152 -> 176 [label="Define-Use"];
153 -> 152 [label="AST"];
153 -> 141 [label="AST"];
153 -> 151 [label="AST"];
154 -> 155 [label="AST"];
156 -> 157 [label="AST"];
158 -> 159 [label="AST"];
158 -> 154 [label="AST"];
158 -> 156 [label="AST"];
158 -> 161 [label="Control Dep"];
158 -> 160 [label="Control Dep"];
161 -> 160 [label="AST"];
162 -> 158 [label="AST"];
162 -> 161 [label="AST"];
163 -> 164 [label="AST"];
163 -> 165 [label="AST"];
163 -> 166 [label="AST"];
163 -> 167 [label="AST"];
163 -> 168 [label="AST"];
170 -> 171 [label="AST"];
172 -> 173 [label="AST"];
174 -> 175 [label="AST"];
176 -> 177 [label="AST"];
178 -> 169 [label="AST"];
178 -> 170 [label="AST"];
178 -> 163 [label="AST"];
178 -> 172 [label="AST"];
178 -> 174 [label="AST"];
178 -> 176 [label="AST"];
179 -> 153 [label="AST"];
179 -> 162 [label="AST"];
179 -> 178 [label="AST"];
180 -> 139 [label="AST"];
180 -> 179 [label="AST"];
181 -> 180 [label="AST"];
182 -> 183 [label="AST"];
182 -> 184 [label="AST"];
186 -> 187 [label="AST"];
186 -> 277 [label="Action"];
188 -> 189 [label="AST"];
190 -> 185 [label="AST"];
190 -> 186 [label="AST"];
190 -> 182 [label="AST"];
190 -> 188 [label="AST"];
191 -> 190 [label="AST"];
192 -> 181 [label="AST"];
192 -> 191 [label="AST"];
193 -> 194 [label="AST"];
195 -> 193 [label="AST"];
195 -> 224 [label="Define-Use"];
196 -> 197 [label="AST"];
196 -> 198 [label="AST"];
200 -> 201 [label="AST"];
200 -> 195 [label="Data Dep"];
202 -> 199 [label="AST"];
202 -> 200 [label="AST"];
202 -> 196 [label="AST"];
203 -> 195 [label="AST"];
203 -> 202 [label="AST"];
204 -> 205 [label="AST"];
204 -> 206 [label="AST"];
207 -> 208 [label="AST"];
207 -> 209 [label="AST"];
210 -> 207 [label="AST"];
211 -> 253 [label="Define-Use"];
212 -> 211 [label="AST"];
212 -> 204 [label="AST"];
212 -> 210 [label="AST"];
213 -> 214 [label="AST"];
215 -> 216 [label="AST"];
215 -> 217 [label="AST"];
215 -> 218 [label="AST"];
219 -> 220 [label="AST"];
219 -> 221 [label="AST"];
222 -> 223 [label="AST"];
224 -> 222 [label="AST"];
224 -> 227 [label="Data Dep"];
225 -> 219 [label="AST"];
225 -> 224 [label="AST"];
226 -> 215 [label="AST"];
226 -> 225 [label="AST"];
227 -> 235 [label="Define-Use"];
228 -> 227 [label="AST"];
228 -> 213 [label="AST"];
228 -> 226 [label="AST"];
229 -> 230 [label="AST"];
231 -> 232 [label="AST"];
231 -> 233 [label="AST"];
235 -> 236 [label="AST"];
235 -> 238 [label="Data Dep"];
237 -> 234 [label="AST"];
237 -> 235 [label="AST"];
237 -> 231 [label="AST"];
238 -> 242 [label="Define-Use"];
238 -> 255 [label="Define-Use"];
239 -> 238 [label="AST"];
239 -> 229 [label="AST"];
239 -> 237 [label="AST"];
240 -> 241 [label="AST"];
242 -> 243 [label="AST"];
244 -> 245 [label="AST"];
244 -> 240 [label="AST"];
244 -> 242 [label="AST"];
244 -> 247 [label="Control Dep"];
244 -> 246 [label="Control Dep"];
247 -> 246 [label="AST"];
248 -> 244 [label="AST"];
248 -> 247 [label="AST"];
249 -> 250 [label="AST"];
249 -> 251 [label="AST"];
253 -> 254 [label="AST"];
255 -> 256 [label="AST"];
257 -> 252 [label="AST"];
257 -> 253 [label="AST"];
257 -> 249 [label="AST"];
257 -> 255 [label="AST"];
258 -> 239 [label="AST"];
258 -> 248 [label="AST"];
258 -> 257 [label="AST"];
259 -> 258 [label="AST"];
260 -> 261 [label="AST"];
260 -> 268 [label="Define-Use"];
262 -> 263 [label="AST"];
262 -> 260 [label="AST"];
264 -> 265 [label="AST"];
264 -> 266 [label="AST"];
268 -> 269 [label="AST"];
268 -> 262 [label="Data Dep"];
270 -> 271 [label="AST"];
270 -> 272 [label="AST"];
273 -> 267 [label="AST"];
273 -> 268 [label="AST"];
273 -> 264 [label="AST"];
273 -> 270 [label="AST"];
274 -> 262 [label="AST"];
274 -> 273 [label="AST"];
275 -> 13 [label="AST"];
275 -> 17 [label="AST"];
275 -> 100 [label="AST"];
275 -> 108 [label="AST"];
275 -> 116 [label="AST"];
275 -> 126 [label="AST"];
275 -> 138 [label="AST"];
275 -> 192 [label="AST"];
275 -> 203 [label="AST"];
275 -> 212 [label="AST"];
275 -> 228 [label="AST"];
275 -> 259 [label="AST"];
275 -> 274 [label="AST"];
276 -> 0 [label="AST"];
276 -> 1 [label="AST"];
276 -> 3 [label="AST"];
276 -> 5 [label="AST"];
276 -> 275 [label="AST"];
277 -> 280 [label="Action"];
279 -> 278 [label="AST"];
280 -> 279 [label="AST"];
}