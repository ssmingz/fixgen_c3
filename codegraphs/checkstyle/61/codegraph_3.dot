digraph "getLines#?,String,String" {
0 [label="3:CtVirtualElement@String[]" shape=ellipse]
1 [label="3:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
2 [label="3:CtTypeReferenceImpl@String" shape=ellipse]
3 [label="3:CtVirtualElement@getLines" shape=ellipse]
4 [label="3:CtParameterImpl@String fileName" shape=ellipse]
5 [label="3:CtTypeReferenceImpl@String" shape=ellipse]
6 [label="3:CtParameterImpl@String charsetName" shape=ellipse]
7 [label="3:CtTypeReferenceImpl@String" shape=ellipse]
8 [label="3:CtTypeReferenceImpl@IOException" shape=ellipse]
9 [label="3:CtPackageReferenceImpl@" shape=ellipse]
10 [label="4:CtTypeReferenceImpl@List<String>" shape=ellipse]
11 [label="4:CtPackageReferenceImpl@" shape=ellipse]
12 [label="4:CtTypeReferenceImpl@String" shape=ellipse]
13 [label="4:CtExecutableReferenceImpl@newArrayList()" shape=ellipse]
14 [label="4:CtTypeReferenceImpl@Lists" shape=ellipse]
15 [label="4:CtTypeReferenceImpl@List<String>" shape=ellipse]
16 [label="4:CtVirtualElement@newArrayList" shape=ellipse]
17 [label="4:CtTypeAccessImpl@Lists" shape=ellipse]
18 [label="4:CtTypeReferenceImpl@Lists" shape=ellipse]
19 [label="4:CtInvocationImpl@Lists.newArrayList()" shape=ellipse]
20 [label="4:CtVirtualElement@lines" shape=ellipse]
21 [label="4:CtLocalVariableImpl@final List<String> lines = Lists.newArrayList()" shape=ellipse]
22 [label="5:CtTypeReferenceImpl@FileInputStream" shape=ellipse]
23 [label="5:CtPackageReferenceImpl@" shape=ellipse]
24 [label="5:CtExecutableReferenceImpl@FileInputStream(java.lang.String)" shape=ellipse]
25 [label="5:CtTypeReferenceImpl@FileInputStream" shape=ellipse]
26 [label="5:CtTypeReferenceImpl@FileInputStream" shape=ellipse]
27 [label="5:CtTypeReferenceImpl@String" shape=ellipse]
28 [label="5:CtVariableReadImpl@fileName" shape=ellipse]
29 [label="5:CtParameterReferenceImpl@fileName" shape=ellipse]
30 [label="5:CtConstructorCallImpl@new FileInputStream(fileName)" shape=ellipse]
31 [label="5:CtVirtualElement@fr" shape=ellipse]
32 [label="5:CtLocalVariableImpl@final FileInputStream fr = new FileInputStream(fileName)" shape=ellipse]
33 [label="6:CtTypeReferenceImpl@LineNumberReader" shape=ellipse]
34 [label="6:CtPackageReferenceImpl@" shape=ellipse]
35 [label="6:CtLiteralImpl@null" shape=ellipse]
36 [label="6:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
37 [label="6:CtVirtualElement@lnr" shape=ellipse]
38 [label="6:CtLocalVariableImpl@LineNumberReader lnr = null" shape=ellipse]
39 [label="8:CtVariableWriteImpl@lnr" shape=ellipse]
40 [label="8:CtLocalVariableReferenceImpl@lnr" shape=ellipse]
41 [label="8:CtExecutableReferenceImpl@LineNumberReader(InputStreamReader)" shape=ellipse]
42 [label="8:CtTypeReferenceImpl@LineNumberReader" shape=ellipse]
43 [label="8:CtTypeReferenceImpl@LineNumberReader" shape=ellipse]
44 [label="8:CtTypeReferenceImpl@InputStreamReader" shape=ellipse]
45 [label="8:CtExecutableReferenceImpl@InputStreamReader()" shape=ellipse]
46 [label="8:CtTypeReferenceImpl@InputStreamReader" shape=ellipse]
47 [label="8:CtTypeReferenceImpl@InputStreamReader" shape=ellipse]
48 [label="8:CtVariableReadImpl@fr" shape=ellipse]
49 [label="8:CtLocalVariableReferenceImpl@fr" shape=ellipse]
50 [label="8:CtVariableReadImpl@charsetName" shape=ellipse]
51 [label="8:CtParameterReferenceImpl@charsetName" shape=ellipse]
52 [label="8:CtConstructorCallImpl@new InputStreamReader(fr, charsetName)" shape=ellipse]
53 [label="8:CtConstructorCallImpl@new LineNumberReader(new InputStreamReader(fr, charsetName))" shape=ellipse]
54 [label="8:CtAssignmentImpl@lnr = new LineNumberReader(new InputStreamReader(fr, charsetName))" shape=ellipse]
55 [label="7:CtBlockImpl@\{
    lnr = new LineNumberReader(new InputStreamReader(fr, charsetName));
\}" shape=ellipse]
56 [label="9:CtVirtualElement@ex" shape=ellipse]
57 [label="9:CtTypeReferenceImpl@UnsupportedEncodingException" shape=ellipse]
58 [label="9:CtPackageReferenceImpl@" shape=ellipse]
59 [label="9:CtCatchVariableImpl@final UnsupportedEncodingException ex" shape=ellipse]
60 [label="10:CtExecutableReferenceImpl@close()" shape=ellipse]
61 [label="10:CtTypeReferenceImpl@FileInputStream" shape=ellipse]
62 [label="10:CtVirtualElement@close" shape=ellipse]
63 [label="10:CtVariableReadImpl@fr" shape=ellipse]
64 [label="10:CtLocalVariableReferenceImpl@fr" shape=ellipse]
65 [label="10:CtInvocationImpl@fr.close()" shape=ellipse]
66 [label="11:CtTypeReferenceImpl@String" shape=ellipse]
67 [label="11:CtPackageReferenceImpl@java.lang" shape=ellipse]
68 [label="11:CtLiteralImpl@\"unsupported charset: \"" shape=ellipse]
69 [label="11:CtTypeReferenceImpl@String" shape=ellipse]
70 [label="11:CtExecutableReferenceImpl@getMessage()" shape=ellipse]
71 [label="11:CtTypeReferenceImpl@UnsupportedEncodingException" shape=ellipse]
72 [label="11:CtVirtualElement@getMessage" shape=ellipse]
73 [label="11:CtVariableReadImpl@ex" shape=ellipse]
74 [label="11:CtCatchVariableReferenceImpl@ex" shape=ellipse]
75 [label="11:CtInvocationImpl@ex.getMessage()" shape=ellipse]
76 [label="11:CtBinaryOperatorImpl@\"unsupported charset: \" + ex.getMessage()" shape=ellipse]
77 [label="11:CtVirtualElement@message" shape=ellipse]
78 [label="11:CtLocalVariableImpl@final String message = \"unsupported charset: \" + ex.getMessage()" shape=ellipse]
79 [label="12:CtExecutableReferenceImpl@UnsupportedEncodingException(java.lang.String)" shape=ellipse]
80 [label="12:CtTypeReferenceImpl@UnsupportedEncodingException" shape=ellipse]
81 [label="12:CtTypeReferenceImpl@UnsupportedEncodingException" shape=ellipse]
82 [label="12:CtTypeReferenceImpl@String" shape=ellipse]
83 [label="12:CtVariableReadImpl@message" shape=ellipse]
84 [label="12:CtLocalVariableReferenceImpl@message" shape=ellipse]
85 [label="12:CtConstructorCallImpl@new UnsupportedEncodingException(message)" shape=ellipse]
86 [label="12:CtThrowImpl@throw new UnsupportedEncodingException(message)" shape=ellipse]
87 [label="9:CtBlockImpl@\{
    fr.close();
    final String message = \"unsupported charset: \" + ex.getMessage();
    throw new UnsupportedEncodingException(message);
\}" shape=ellipse]
88 [label="9:CtCatchImpl@ catch (final UnsupportedEncodingException ex) \{
    fr.close();
    final String message = \"unsupported charset: \" + ex.getMessage();
    throw new UnsupportedEncodingException(message);
\}" shape=ellipse]
89 [label="7:CtTryImpl@try \{
    lnr = new LineNumberReader(new InputStreamReader(fr, charsetName));
\} catch (final UnsupportedEncodingException ex) \{
    fr.close();
    final String message = \"unsupported charset: \" + ex.getMessage();
    throw new UnsupportedEncodingException(message);
\}" shape=ellipse]
90 [label="15:CtLiteralImpl@true" shape=ellipse]
91 [label="15:CtTypeReferenceImpl@boolean" shape=ellipse]
92 [label="16:CtTypeReferenceImpl@String" shape=ellipse]
93 [label="16:CtPackageReferenceImpl@java.lang" shape=ellipse]
94 [label="16:CtExecutableReferenceImpl@readLine()" shape=ellipse]
95 [label="16:CtTypeReferenceImpl@LineNumberReader" shape=ellipse]
96 [label="16:CtTypeReferenceImpl@String" shape=ellipse]
97 [label="16:CtVirtualElement@readLine" shape=ellipse]
98 [label="16:CtVariableReadImpl@lnr" shape=ellipse]
99 [label="16:CtLocalVariableReferenceImpl@lnr" shape=ellipse]
100 [label="16:CtInvocationImpl@lnr.readLine()" shape=ellipse]
101 [label="16:CtVirtualElement@l" shape=ellipse]
102 [label="16:CtLocalVariableImpl@final String l = lnr.readLine()" shape=ellipse]
103 [label="17:CtVariableReadImpl@l" shape=ellipse]
104 [label="17:CtLocalVariableReferenceImpl@l" shape=ellipse]
105 [label="17:CtLiteralImpl@null" shape=ellipse]
106 [label="17:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
107 [label="17:CtBinaryOperatorImpl@l == null" shape=ellipse]
108 [label="17:CtTypeReferenceImpl@boolean" shape=ellipse]
109 [label="18:CtBreakImpl@break" shape=ellipse]
110 [label="17:CtBlockImpl@\{
    break;
\}" shape=ellipse]
111 [label="17:CtIfImpl@if (l == null) \{
    break;
\}" shape=ellipse]
112 [label="20:CtExecutableReferenceImpl@add(java.lang.String)" shape=ellipse]
113 [label="20:CtTypeReferenceImpl@List<String>" shape=ellipse]
114 [label="20:CtTypeReferenceImpl@String" shape=ellipse]
115 [label="20:CtVirtualElement@add" shape=ellipse]
116 [label="20:CtVariableReadImpl@lines" shape=ellipse]
117 [label="20:CtLocalVariableReferenceImpl@lines" shape=ellipse]
118 [label="20:CtVariableReadImpl@l" shape=ellipse]
119 [label="20:CtLocalVariableReferenceImpl@l" shape=ellipse]
120 [label="20:CtInvocationImpl@lines.add(l)" shape=ellipse]
121 [label="15:CtBlockImpl@\{
    final String l = lnr.readLine();
    if (l == null) \{
        break;
    \}
    lines.add(l);
\}" shape=ellipse]
122 [label="15:CtWhileImpl@while (true) \{
    final String l = lnr.readLine();
    if (l == null) \{
        break;
    \}
    lines.add(l);
\} " shape=ellipse]
123 [label="14:CtBlockImpl@\{
    while (true) \{
        final String l = lnr.readLine();
        if (l == null) \{
            break;
        \}
        lines.add(l);
    \} 
\}" shape=ellipse]
124 [label="23:CtExecutableReferenceImpl@closeQuietly(LineNumberReader)" shape=ellipse]
125 [label="23:CtTypeReferenceImpl@Utils" shape=ellipse]
126 [label="23:CtTypeReferenceImpl@LineNumberReader" shape=ellipse]
127 [label="23:CtVirtualElement@closeQuietly" shape=ellipse]
128 [label="23:CtTypeAccessImpl@Utils" shape=ellipse]
129 [label="23:CtTypeReferenceImpl@Utils" shape=ellipse]
130 [label="23:CtVariableReadImpl@lnr" shape=ellipse]
131 [label="23:CtLocalVariableReferenceImpl@lnr" shape=ellipse]
132 [label="23:CtInvocationImpl@Utils.closeQuietly(lnr)" shape=ellipse]
133 [label="22:CtBlockImpl@\{
    Utils.closeQuietly(lnr);
\}" shape=ellipse]
134 [label="14:CtTryImpl@try \{
    while (true) \{
        final String l = lnr.readLine();
        if (l == null) \{
            break;
        \}
        lines.add(l);
    \} 
\} finally \{
    Utils.closeQuietly(lnr);
\}" shape=ellipse]
135 [label="25:CtExecutableReferenceImpl@toArray(java.lang.String[])" shape=ellipse]
136 [label="25:CtTypeReferenceImpl@List<String>" shape=ellipse]
137 [label="25:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
138 [label="25:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
139 [label="25:CtVirtualElement@toArray" shape=ellipse]
140 [label="25:CtVariableReadImpl@lines" shape=ellipse]
141 [label="25:CtLocalVariableReferenceImpl@lines" shape=ellipse]
142 [label="25:CtNewArrayImpl@new String[lines.size()]" shape=ellipse]
143 [label="25:CtArrayTypeReferenceImpl@String[]" shape=ellipse]
144 [label="25:CtInvocationImpl@lines.size()" shape=ellipse]
145 [label="25:CtInvocationImpl@lines.toArray(new String[lines.size()])" shape=ellipse]
146 [label="25:CtReturnImpl@return lines.toArray(new String[lines.size()])" shape=ellipse]
147 [label="3:CtBlockImpl@\{
    final List<String> lines = Lists.newArrayList();
    final FileInputStream fr = new FileInputStream(fileName);
    LineNumberReader lnr = null;
    try \{
        lnr = new LineNumberReader(new InputStreamReader(fr, charsetName));
    \} catch (final UnsupportedEncodingException ex) \{
        fr.close();
        final String message = \"unsupported charset: \" + ex.getMessage();
        throw new UnsupportedEncodingException(message);
    \}
    try \{
        while (true) \{
            final String l = lnr.readLine();
            if (l == null) \{
                break;
            \}
            lines.add(l);
        \} 
    \} finally \{
        Utils.closeQuietly(lnr);
    \}
    return lines.toArray(new String[lines.size()]);
\}" shape=ellipse]
148 [label="3:CtMethodImpl@@Deprecated
public static String[] getLines(String fileName, String charsetName) throws IOException \{
    final List<String> lines = Lists.newArrayList();
    final FileInputStream fr = new FileInputStream(fileName);
    LineNumberReader lnr = null;
    try \{
        lnr = new LineNumberReader(new InputStreamReader(fr, charsetName));
    \} catch (final UnsupportedEncodingException ex) \{
        fr.close();
        final String message = \"unsupported charset: \" + ex.getMessage();
        throw new UnsupportedEncodingException(message);
    \}
    try \{
        while (true) \{
            final String l = lnr.readLine();
            if (l == null) \{
                break;
            \}
            lines.add(l);
        \} 
    \} finally \{
        Utils.closeQuietly(lnr);
    \}
    return lines.toArray(new String[lines.size()]);
\}" shape=ellipse]
149 [label="2:CtAnnotationImpl@@Deprecated" shape=ellipse]
150 [label="23:Update@UPDATE" shape=ellipse]
151 [label="23:CtPackageReferenceImpl@" shape=ellipse]
152 [label="23:CtTypeReferenceImpl@Closeables" shape=ellipse]
153 [label="23:CtTypeAccessImpl@Closeables" shape=ellipse]
1 -> 0 [label="AST"];
1 -> 2 [label="AST"];
4 -> 5 [label="AST"];
6 -> 7 [label="AST"];
8 -> 9 [label="AST"];
10 -> 11 [label="AST"];
10 -> 12 [label="AST"];
13 -> 14 [label="AST"];
13 -> 15 [label="AST"];
17 -> 18 [label="AST"];
19 -> 16 [label="AST"];
19 -> 17 [label="AST"];
19 -> 13 [label="AST"];
20 -> 116 [label="Define-Use"];
20 -> 140 [label="Define-Use"];
21 -> 20 [label="AST"];
21 -> 10 [label="AST"];
21 -> 19 [label="AST"];
22 -> 23 [label="AST"];
24 -> 25 [label="AST"];
24 -> 26 [label="AST"];
24 -> 27 [label="AST"];
28 -> 29 [label="AST"];
28 -> 31 [label="Data Dep"];
30 -> 24 [label="AST"];
30 -> 28 [label="AST"];
31 -> 48 [label="Define-Use"];
31 -> 63 [label="Define-Use"];
32 -> 31 [label="AST"];
32 -> 22 [label="AST"];
32 -> 30 [label="AST"];
33 -> 34 [label="AST"];
35 -> 36 [label="AST"];
38 -> 37 [label="AST"];
38 -> 33 [label="AST"];
38 -> 35 [label="AST"];
39 -> 40 [label="AST"];
39 -> 98 [label="Define-Use"];
39 -> 130 [label="Define-Use"];
41 -> 42 [label="AST"];
41 -> 43 [label="AST"];
41 -> 44 [label="AST"];
45 -> 46 [label="AST"];
45 -> 47 [label="AST"];
48 -> 49 [label="AST"];
48 -> 39 [label="Data Dep"];
50 -> 51 [label="AST"];
50 -> 39 [label="Data Dep"];
52 -> 45 [label="AST"];
52 -> 48 [label="AST"];
52 -> 50 [label="AST"];
53 -> 41 [label="AST"];
53 -> 52 [label="AST"];
54 -> 39 [label="AST"];
54 -> 53 [label="AST"];
55 -> 54 [label="AST"];
56 -> 73 [label="Define-Use"];
57 -> 58 [label="AST"];
59 -> 56 [label="AST"];
59 -> 57 [label="AST"];
59 -> 87 [label="Control Dep"];
59 -> 65 [label="Control Dep"];
59 -> 60 [label="Control Dep"];
59 -> 63 [label="Control Dep"];
59 -> 78 [label="Control Dep"];
59 -> 76 [label="Control Dep"];
59 -> 68 [label="Control Dep"];
59 -> 75 [label="Control Dep"];
59 -> 70 [label="Control Dep"];
59 -> 73 [label="Control Dep"];
59 -> 86 [label="Control Dep"];
59 -> 85 [label="Control Dep"];
59 -> 79 [label="Control Dep"];
59 -> 83 [label="Control Dep"];
60 -> 61 [label="AST"];
63 -> 64 [label="AST"];
65 -> 62 [label="AST"];
65 -> 63 [label="AST"];
65 -> 60 [label="AST"];
66 -> 67 [label="AST"];
68 -> 69 [label="AST"];
70 -> 71 [label="AST"];
73 -> 74 [label="AST"];
73 -> 77 [label="Data Dep"];
75 -> 72 [label="AST"];
75 -> 73 [label="AST"];
75 -> 70 [label="AST"];
76 -> 68 [label="AST"];
76 -> 75 [label="AST"];
77 -> 83 [label="Define-Use"];
78 -> 77 [label="AST"];
78 -> 66 [label="AST"];
78 -> 76 [label="AST"];
79 -> 80 [label="AST"];
79 -> 81 [label="AST"];
79 -> 82 [label="AST"];
83 -> 84 [label="AST"];
85 -> 79 [label="AST"];
85 -> 83 [label="AST"];
86 -> 85 [label="AST"];
87 -> 65 [label="AST"];
87 -> 78 [label="AST"];
87 -> 86 [label="AST"];
88 -> 59 [label="AST"];
88 -> 87 [label="AST"];
89 -> 55 [label="AST"];
89 -> 88 [label="AST"];
90 -> 91 [label="AST"];
90 -> 121 [label="Control Dep"];
90 -> 102 [label="Control Dep"];
90 -> 100 [label="Control Dep"];
90 -> 94 [label="Control Dep"];
90 -> 98 [label="Control Dep"];
90 -> 111 [label="Control Dep"];
90 -> 107 [label="Control Dep"];
90 -> 103 [label="Control Dep"];
90 -> 105 [label="Control Dep"];
90 -> 120 [label="Control Dep"];
90 -> 112 [label="Control Dep"];
90 -> 116 [label="Control Dep"];
90 -> 118 [label="Control Dep"];
92 -> 93 [label="AST"];
94 -> 95 [label="AST"];
94 -> 96 [label="AST"];
98 -> 99 [label="AST"];
98 -> 101 [label="Data Dep"];
100 -> 97 [label="AST"];
100 -> 98 [label="AST"];
100 -> 94 [label="AST"];
101 -> 103 [label="Define-Use"];
101 -> 118 [label="Define-Use"];
102 -> 101 [label="AST"];
102 -> 92 [label="AST"];
102 -> 100 [label="AST"];
103 -> 104 [label="AST"];
105 -> 106 [label="AST"];
107 -> 108 [label="AST"];
107 -> 103 [label="AST"];
107 -> 105 [label="AST"];
107 -> 110 [label="Control Dep"];
107 -> 109 [label="Control Dep"];
110 -> 109 [label="AST"];
111 -> 107 [label="AST"];
111 -> 110 [label="AST"];
112 -> 113 [label="AST"];
112 -> 114 [label="AST"];
116 -> 117 [label="AST"];
118 -> 119 [label="AST"];
120 -> 115 [label="AST"];
120 -> 116 [label="AST"];
120 -> 112 [label="AST"];
120 -> 118 [label="AST"];
121 -> 102 [label="AST"];
121 -> 111 [label="AST"];
121 -> 120 [label="AST"];
122 -> 90 [label="AST"];
122 -> 121 [label="AST"];
123 -> 122 [label="AST"];
124 -> 125 [label="AST"];
124 -> 126 [label="AST"];
128 -> 129 [label="AST"];
128 -> 150 [label="Action"];
130 -> 131 [label="AST"];
132 -> 127 [label="AST"];
132 -> 128 [label="AST"];
132 -> 124 [label="AST"];
132 -> 130 [label="AST"];
133 -> 132 [label="AST"];
134 -> 123 [label="AST"];
134 -> 133 [label="AST"];
135 -> 136 [label="AST"];
135 -> 137 [label="AST"];
135 -> 138 [label="AST"];
140 -> 141 [label="AST"];
142 -> 143 [label="AST"];
142 -> 144 [label="AST"];
145 -> 139 [label="AST"];
145 -> 140 [label="AST"];
145 -> 135 [label="AST"];
145 -> 142 [label="AST"];
146 -> 145 [label="AST"];
147 -> 21 [label="AST"];
147 -> 32 [label="AST"];
147 -> 38 [label="AST"];
147 -> 89 [label="AST"];
147 -> 134 [label="AST"];
147 -> 146 [label="AST"];
148 -> 3 [label="AST"];
148 -> 149 [label="AST"];
148 -> 1 [label="AST"];
148 -> 4 [label="AST"];
148 -> 6 [label="AST"];
148 -> 8 [label="AST"];
148 -> 147 [label="AST"];
150 -> 153 [label="Action"];
152 -> 151 [label="AST"];
153 -> 152 [label="AST"];
}