digraph "notifyLeave#?,DetailAST" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@notifyLeave" shape=ellipse]
2 [label="2:CtParameterImpl@DetailAST aAST" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@DetailAST" shape=ellipse]
4 [label="3:CtTypeReferenceImpl@ArrayList" shape=ellipse]
5 [label="3:CtPackageReferenceImpl@" shape=ellipse]
6 [label="3:CtExecutableReferenceImpl@get()" shape=ellipse]
7 [label="3:CtTypeReferenceImpl@mTokenToChecks" shape=ellipse]
8 [label="3:CtVirtualElement@get" shape=ellipse]
9 [label="3:CtFieldReferenceImpl@mTokenToChecks" shape=ellipse]
10 [label="3:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
11 [label="3:CtFieldReadImpl@mTokenToChecks" shape=ellipse]
12 [label="3:CtExecutableReferenceImpl@getTokenName(<unknown>)" shape=ellipse]
13 [label="3:CtTypeReferenceImpl@null" shape=ellipse]
14 [label="3:CtVirtualElement@getTokenName" shape=ellipse]
15 [label="3:CtTypeAccessImpl@PlaceHold" shape=ellipse]
16 [label="3:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
17 [label="3:CtThisAccessImpl@" shape=ellipse]
18 [label="3:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
19 [label="3:CtExecutableReferenceImpl@getType()" shape=ellipse]
20 [label="3:CtTypeReferenceImpl@DetailAST" shape=ellipse]
21 [label="3:CtVirtualElement@getType" shape=ellipse]
22 [label="3:CtVariableReadImpl@aAST" shape=ellipse]
23 [label="3:CtParameterReferenceImpl@aAST" shape=ellipse]
24 [label="3:CtInvocationImpl@aAST.getType()" shape=ellipse]
25 [label="3:CtInvocationImpl@getTokenName(aAST.getType())" shape=ellipse]
26 [label="3:CtInvocationImpl@((ArrayList) (mTokenToChecks.get(getTokenName(aAST.getType()))))" shape=ellipse]
27 [label="3:CtTypeReferenceImpl@ArrayList" shape=ellipse]
28 [label="3:CtVirtualElement@visitors" shape=ellipse]
29 [label="3:CtLocalVariableImpl@final ArrayList visitors = ((ArrayList) (mTokenToChecks.get(getTokenName(aAST.getType()))))" shape=ellipse]
30 [label="4:CtVariableReadImpl@visitors" shape=ellipse]
31 [label="4:CtLocalVariableReferenceImpl@visitors" shape=ellipse]
32 [label="4:CtLiteralImpl@null" shape=ellipse]
33 [label="4:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
34 [label="4:CtBinaryOperatorImpl@visitors != null" shape=ellipse]
35 [label="5:CtTypeReferenceImpl@int" shape=ellipse]
36 [label="5:CtLiteralImpl@0" shape=ellipse]
37 [label="5:CtTypeReferenceImpl@int" shape=ellipse]
38 [label="5:CtVirtualElement@i" shape=ellipse]
39 [label="5:CtLocalVariableImpl@int i = 0" shape=ellipse]
40 [label="5:CtVariableReadImpl@i" shape=ellipse]
41 [label="5:CtLocalVariableReferenceImpl@i" shape=ellipse]
42 [label="5:CtExecutableReferenceImpl@size()" shape=ellipse]
43 [label="5:CtTypeReferenceImpl@ArrayList" shape=ellipse]
44 [label="5:CtVirtualElement@size" shape=ellipse]
45 [label="5:CtVariableReadImpl@visitors" shape=ellipse]
46 [label="5:CtLocalVariableReferenceImpl@visitors" shape=ellipse]
47 [label="5:CtInvocationImpl@visitors.size()" shape=ellipse]
48 [label="5:CtBinaryOperatorImpl@i < visitors.size()" shape=ellipse]
49 [label="5:CtVariableWriteImpl@i" shape=ellipse]
50 [label="5:CtLocalVariableReferenceImpl@i" shape=ellipse]
51 [label="5:CtUnaryOperatorImpl@i++" shape=ellipse]
52 [label="5:CtTypeReferenceImpl@int" shape=ellipse]
53 [label="6:CtTypeReferenceImpl@Check" shape=ellipse]
54 [label="6:CtPackageReferenceImpl@" shape=ellipse]
55 [label="6:CtExecutableReferenceImpl@get(int)" shape=ellipse]
56 [label="6:CtTypeReferenceImpl@ArrayList" shape=ellipse]
57 [label="6:CtTypeReferenceImpl@int" shape=ellipse]
58 [label="6:CtVirtualElement@get" shape=ellipse]
59 [label="6:CtVariableReadImpl@visitors" shape=ellipse]
60 [label="6:CtLocalVariableReferenceImpl@visitors" shape=ellipse]
61 [label="6:CtVariableReadImpl@i" shape=ellipse]
62 [label="6:CtLocalVariableReferenceImpl@i" shape=ellipse]
63 [label="6:CtInvocationImpl@((Check) (visitors.get(i)))" shape=ellipse]
64 [label="6:CtTypeReferenceImpl@Check" shape=ellipse]
65 [label="6:CtVirtualElement@check" shape=ellipse]
66 [label="6:CtLocalVariableImpl@final Check check = ((Check) (visitors.get(i)))" shape=ellipse]
67 [label="7:CtExecutableReferenceImpl@leaveToken(DetailAST)" shape=ellipse]
68 [label="7:CtTypeReferenceImpl@Check" shape=ellipse]
69 [label="7:CtTypeReferenceImpl@DetailAST" shape=ellipse]
70 [label="7:CtVirtualElement@leaveToken" shape=ellipse]
71 [label="7:CtVariableReadImpl@check" shape=ellipse]
72 [label="7:CtLocalVariableReferenceImpl@check" shape=ellipse]
73 [label="7:CtVariableReadImpl@aAST" shape=ellipse]
74 [label="7:CtParameterReferenceImpl@aAST" shape=ellipse]
75 [label="7:CtInvocationImpl@check.leaveToken(aAST)" shape=ellipse]
76 [label="5:CtBlockImpl@\{
    final Check check = ((Check) (visitors.get(i)));
    check.leaveToken(aAST);
\}" shape=ellipse]
77 [label="5:CtForImpl@for (int i = 0; i < visitors.size(); i++) \{
    final Check check = ((Check) (visitors.get(i)));
    check.leaveToken(aAST);
\}" shape=ellipse]
78 [label="4:CtBlockImpl@\{
    for (int i = 0; i < visitors.size(); i++) \{
        final Check check = ((Check) (visitors.get(i)));
        check.leaveToken(aAST);
    \}
\}" shape=ellipse]
79 [label="4:CtIfImpl@if (visitors != null) \{
    for (int i = 0; i < visitors.size(); i++) \{
        final Check check = ((Check) (visitors.get(i)));
        check.leaveToken(aAST);
    \}
\}" shape=ellipse]
80 [label="2:CtBlockImpl@\{
    final ArrayList visitors = ((ArrayList) (mTokenToChecks.get(getTokenName(aAST.getType()))));
    if (visitors != null) \{
        for (int i = 0; i < visitors.size(); i++) \{
            final Check check = ((Check) (visitors.get(i)));
            check.leaveToken(aAST);
        \}
    \}
\}" shape=ellipse]
81 [label="2:CtMethodImpl@private void notifyLeave(DetailAST aAST) \{
    final ArrayList visitors = ((ArrayList) (mTokenToChecks.get(getTokenName(aAST.getType()))));
    if (visitors != null) \{
        for (int i = 0; i < visitors.size(); i++) \{
            final Check check = ((Check) (visitors.get(i)));
            check.leaveToken(aAST);
        \}
    \}
\}" shape=ellipse]
82 [label="3:Update@UPDATE" shape=ellipse]
83 [label="4:CtPackageReferenceImpl@" shape=ellipse]
84 [label="4:CtTypeReferenceImpl@TokenTypes" shape=ellipse]
85 [label="4:CtTypeAccessImpl@TokenTypes" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
6 -> 7 [label="AST"];
9 -> 10 [label="AST"];
11 -> 9 [label="AST"];
11 -> 28 [label="Data Dep"];
12 -> 13 [label="AST"];
15 -> 16 [label="AST"];
15 -> 82 [label="Action"];
17 -> 18 [label="AST"];
17 -> 15 [label="AST"];
17 -> 28 [label="Data Dep"];
19 -> 20 [label="AST"];
22 -> 23 [label="AST"];
22 -> 28 [label="Data Dep"];
24 -> 21 [label="AST"];
24 -> 22 [label="AST"];
24 -> 19 [label="AST"];
25 -> 14 [label="AST"];
25 -> 17 [label="AST"];
25 -> 12 [label="AST"];
25 -> 24 [label="AST"];
26 -> 8 [label="AST"];
26 -> 27 [label="AST"];
26 -> 11 [label="AST"];
26 -> 6 [label="AST"];
26 -> 25 [label="AST"];
28 -> 30 [label="Define-Use"];
28 -> 45 [label="Define-Use"];
28 -> 59 [label="Define-Use"];
29 -> 28 [label="AST"];
29 -> 4 [label="AST"];
29 -> 26 [label="AST"];
30 -> 31 [label="AST"];
32 -> 33 [label="AST"];
34 -> 30 [label="AST"];
34 -> 32 [label="AST"];
34 -> 78 [label="Control Dep"];
34 -> 77 [label="Control Dep"];
34 -> 39 [label="Control Dep"];
34 -> 36 [label="Control Dep"];
34 -> 48 [label="Control Dep"];
34 -> 40 [label="Control Dep"];
34 -> 47 [label="Control Dep"];
34 -> 42 [label="Control Dep"];
34 -> 45 [label="Control Dep"];
34 -> 51 [label="Control Dep"];
34 -> 49 [label="Control Dep"];
36 -> 37 [label="AST"];
38 -> 40 [label="Define-Use"];
38 -> 61 [label="Define-Use"];
39 -> 38 [label="AST"];
39 -> 35 [label="AST"];
39 -> 36 [label="AST"];
40 -> 41 [label="AST"];
42 -> 43 [label="AST"];
45 -> 46 [label="AST"];
47 -> 44 [label="AST"];
47 -> 45 [label="AST"];
47 -> 42 [label="AST"];
48 -> 40 [label="AST"];
48 -> 47 [label="AST"];
48 -> 76 [label="Control Dep"];
48 -> 66 [label="Control Dep"];
48 -> 63 [label="Control Dep"];
48 -> 55 [label="Control Dep"];
48 -> 59 [label="Control Dep"];
48 -> 61 [label="Control Dep"];
48 -> 75 [label="Control Dep"];
48 -> 67 [label="Control Dep"];
48 -> 71 [label="Control Dep"];
48 -> 73 [label="Control Dep"];
49 -> 50 [label="AST"];
49 -> 61 [label="Define-Use"];
50 -> 61 [label="Define-Use"];
51 -> 52 [label="AST"];
51 -> 49 [label="AST"];
53 -> 54 [label="AST"];
55 -> 56 [label="AST"];
55 -> 57 [label="AST"];
59 -> 60 [label="AST"];
59 -> 65 [label="Data Dep"];
61 -> 62 [label="AST"];
61 -> 65 [label="Data Dep"];
63 -> 58 [label="AST"];
63 -> 64 [label="AST"];
63 -> 59 [label="AST"];
63 -> 55 [label="AST"];
63 -> 61 [label="AST"];
65 -> 71 [label="Define-Use"];
66 -> 65 [label="AST"];
66 -> 53 [label="AST"];
66 -> 63 [label="AST"];
67 -> 68 [label="AST"];
67 -> 69 [label="AST"];
71 -> 72 [label="AST"];
73 -> 74 [label="AST"];
75 -> 70 [label="AST"];
75 -> 71 [label="AST"];
75 -> 67 [label="AST"];
75 -> 73 [label="AST"];
76 -> 66 [label="AST"];
76 -> 75 [label="AST"];
77 -> 39 [label="AST"];
77 -> 48 [label="AST"];
77 -> 51 [label="AST"];
77 -> 76 [label="AST"];
78 -> 77 [label="AST"];
79 -> 34 [label="AST"];
79 -> 78 [label="AST"];
80 -> 29 [label="AST"];
80 -> 79 [label="AST"];
81 -> 1 [label="AST"];
81 -> 0 [label="AST"];
81 -> 2 [label="AST"];
81 -> 80 [label="AST"];
82 -> 85 [label="Action"];
84 -> 83 [label="AST"];
85 -> 84 [label="AST"];
}