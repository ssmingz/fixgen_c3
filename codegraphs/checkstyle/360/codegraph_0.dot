digraph "checkTag#?,int,List,String,Pattern,String" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@checkTag" shape=ellipse]
2 [label="3:CtParameterImpl@int lineNo" shape=ellipse]
3 [label="3:CtTypeReferenceImpl@int" shape=ellipse]
4 [label="3:CtParameterImpl@List<JavadocTag> tags" shape=ellipse]
5 [label="3:CtTypeReferenceImpl@List<JavadocTag>" shape=ellipse]
6 [label="3:CtParameterImpl@String tagName" shape=ellipse]
7 [label="3:CtTypeReferenceImpl@String" shape=ellipse]
8 [label="3:CtParameterImpl@Pattern formatPattern" shape=ellipse]
9 [label="3:CtTypeReferenceImpl@Pattern" shape=ellipse]
10 [label="3:CtParameterImpl@String format" shape=ellipse]
11 [label="3:CtTypeReferenceImpl@String" shape=ellipse]
12 [label="4:CtVariableReadImpl@formatPattern" shape=ellipse]
13 [label="4:CtParameterReferenceImpl@formatPattern" shape=ellipse]
14 [label="4:CtLiteralImpl@null" shape=ellipse]
15 [label="4:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
16 [label="4:CtBinaryOperatorImpl@formatPattern == null" shape=ellipse]
17 [label="5:CtReturnImpl@return" shape=ellipse]
18 [label="4:CtBlockImpl@\{
    return;
\}" shape=ellipse]
19 [label="4:CtIfImpl@if (formatPattern == null) \{
    return;
\}" shape=ellipse]
20 [label="7:CtTypeReferenceImpl@int" shape=ellipse]
21 [label="7:CtLiteralImpl@0" shape=ellipse]
22 [label="7:CtTypeReferenceImpl@int" shape=ellipse]
23 [label="7:CtVirtualElement@tagCount" shape=ellipse]
24 [label="7:CtLocalVariableImpl@int tagCount = 0" shape=ellipse]
25 [label="8:CtTypeReferenceImpl@int" shape=ellipse]
26 [label="8:CtExecutableReferenceImpl@size()" shape=ellipse]
27 [label="8:CtTypeReferenceImpl@List<JavadocTag>" shape=ellipse]
28 [label="8:CtVirtualElement@size" shape=ellipse]
29 [label="8:CtVariableReadImpl@tags" shape=ellipse]
30 [label="8:CtParameterReferenceImpl@tags" shape=ellipse]
31 [label="8:CtInvocationImpl@tags.size()" shape=ellipse]
32 [label="8:CtLiteralImpl@1" shape=ellipse]
33 [label="8:CtTypeReferenceImpl@int" shape=ellipse]
34 [label="8:CtBinaryOperatorImpl@tags.size() - 1" shape=ellipse]
35 [label="8:CtVirtualElement@i" shape=ellipse]
36 [label="8:CtLocalVariableImpl@int i = tags.size() - 1" shape=ellipse]
37 [label="8:CtVariableReadImpl@i" shape=ellipse]
38 [label="8:CtLocalVariableReferenceImpl@i" shape=ellipse]
39 [label="8:CtLiteralImpl@0" shape=ellipse]
40 [label="8:CtTypeReferenceImpl@int" shape=ellipse]
41 [label="8:CtBinaryOperatorImpl@i >= 0" shape=ellipse]
42 [label="8:CtTypeReferenceImpl@boolean" shape=ellipse]
43 [label="8:CtVariableWriteImpl@i" shape=ellipse]
44 [label="8:CtLocalVariableReferenceImpl@i" shape=ellipse]
45 [label="8:CtUnaryOperatorImpl@i--" shape=ellipse]
46 [label="8:CtTypeReferenceImpl@int" shape=ellipse]
47 [label="9:CtTypeReferenceImpl@JavadocTag" shape=ellipse]
48 [label="9:CtPackageReferenceImpl@" shape=ellipse]
49 [label="9:CtExecutableReferenceImpl@get(int)" shape=ellipse]
50 [label="9:CtTypeReferenceImpl@List<JavadocTag>" shape=ellipse]
51 [label="9:CtTypeReferenceImpl@JavadocTag" shape=ellipse]
52 [label="9:CtTypeReferenceImpl@int" shape=ellipse]
53 [label="9:CtVirtualElement@get" shape=ellipse]
54 [label="9:CtVariableReadImpl@tags" shape=ellipse]
55 [label="9:CtParameterReferenceImpl@tags" shape=ellipse]
56 [label="9:CtVariableReadImpl@i" shape=ellipse]
57 [label="9:CtLocalVariableReferenceImpl@i" shape=ellipse]
58 [label="9:CtInvocationImpl@tags.get(i)" shape=ellipse]
59 [label="9:CtVirtualElement@tag" shape=ellipse]
60 [label="9:CtLocalVariableImpl@final JavadocTag tag = tags.get(i)" shape=ellipse]
61 [label="10:CtExecutableReferenceImpl@equals(java.lang.String)" shape=ellipse]
62 [label="10:CtTypeReferenceImpl@boolean" shape=ellipse]
63 [label="10:CtTypeReferenceImpl@String" shape=ellipse]
64 [label="10:CtVirtualElement@equals" shape=ellipse]
65 [label="10:CtExecutableReferenceImpl@getTagName()" shape=ellipse]
66 [label="10:CtTypeReferenceImpl@JavadocTag" shape=ellipse]
67 [label="10:CtVirtualElement@getTagName" shape=ellipse]
68 [label="10:CtVariableReadImpl@tag" shape=ellipse]
69 [label="10:CtLocalVariableReferenceImpl@tag" shape=ellipse]
70 [label="10:CtInvocationImpl@tag.getTagName()" shape=ellipse]
71 [label="10:CtVariableReadImpl@tagName" shape=ellipse]
72 [label="10:CtParameterReferenceImpl@tagName" shape=ellipse]
73 [label="10:CtInvocationImpl@tag.getTagName().equals(tagName)" shape=ellipse]
74 [label="11:CtVariableWriteImpl@tagCount" shape=ellipse]
75 [label="11:CtLocalVariableReferenceImpl@tagCount" shape=ellipse]
76 [label="11:CtUnaryOperatorImpl@tagCount++" shape=ellipse]
77 [label="11:CtTypeReferenceImpl@int" shape=ellipse]
78 [label="12:CtExecutableReferenceImpl@find()" shape=ellipse]
79 [label="12:CtVirtualElement@find" shape=ellipse]
80 [label="12:CtExecutableReferenceImpl@matcher()" shape=ellipse]
81 [label="12:CtTypeReferenceImpl@Pattern" shape=ellipse]
82 [label="12:CtVirtualElement@matcher" shape=ellipse]
83 [label="12:CtVariableReadImpl@formatPattern" shape=ellipse]
84 [label="12:CtParameterReferenceImpl@formatPattern" shape=ellipse]
85 [label="12:CtExecutableReferenceImpl@getArg1()" shape=ellipse]
86 [label="12:CtTypeReferenceImpl@JavadocTag" shape=ellipse]
87 [label="12:CtVirtualElement@getArg1" shape=ellipse]
88 [label="12:CtVariableReadImpl@tag" shape=ellipse]
89 [label="12:CtLocalVariableReferenceImpl@tag" shape=ellipse]
90 [label="12:CtInvocationImpl@tag.getArg1()" shape=ellipse]
91 [label="12:CtInvocationImpl@formatPattern.matcher(tag.getArg1())" shape=ellipse]
92 [label="12:CtInvocationImpl@formatPattern.matcher(tag.getArg1()).find()" shape=ellipse]
93 [label="12:CtUnaryOperatorImpl@!formatPattern.matcher(tag.getArg1()).find()" shape=ellipse]
94 [label="13:CtExecutableReferenceImpl@log(int,java.lang.String,java.lang.String,java.lang.String)" shape=ellipse]
95 [label="13:CtTypeReferenceImpl@int" shape=ellipse]
96 [label="13:CtTypeReferenceImpl@String" shape=ellipse]
97 [label="13:CtTypeReferenceImpl@String" shape=ellipse]
98 [label="13:CtTypeReferenceImpl@String" shape=ellipse]
99 [label="13:CtVirtualElement@log" shape=ellipse]
100 [label="13:CtTypeAccessImpl@PlaceHold" shape=ellipse]
101 [label="13:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
102 [label="13:CtThisAccessImpl@" shape=ellipse]
103 [label="13:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
104 [label="13:CtVariableReadImpl@lineNo" shape=ellipse]
105 [label="13:CtParameterReferenceImpl@lineNo" shape=ellipse]
106 [label="13:CtLiteralImpl@\"type.tagFormat\"" shape=ellipse]
107 [label="13:CtTypeReferenceImpl@String" shape=ellipse]
108 [label="13:CtLiteralImpl@\"@\"" shape=ellipse]
109 [label="13:CtTypeReferenceImpl@String" shape=ellipse]
110 [label="13:CtVariableReadImpl@tagName" shape=ellipse]
111 [label="13:CtParameterReferenceImpl@tagName" shape=ellipse]
112 [label="13:CtBinaryOperatorImpl@\"@\" + tagName" shape=ellipse]
113 [label="13:CtTypeReferenceImpl@String" shape=ellipse]
114 [label="13:CtVariableReadImpl@format" shape=ellipse]
115 [label="13:CtParameterReferenceImpl@format" shape=ellipse]
116 [label="13:CtInvocationImpl@log(lineNo, \"type.tagFormat\", \"@\" + tagName, format)" shape=ellipse]
117 [label="12:CtBlockImpl@\{
    log(lineNo, \"type.tagFormat\", \"@\" + tagName, format);
\}" shape=ellipse]
118 [label="12:CtIfImpl@if (!formatPattern.matcher(tag.getArg1()).find()) \{
    log(lineNo, \"type.tagFormat\", \"@\" + tagName, format);
\}" shape=ellipse]
119 [label="10:CtBlockImpl@\{
    tagCount++;
    if (!formatPattern.matcher(tag.getArg1()).find()) \{
        log(lineNo, \"type.tagFormat\", \"@\" + tagName, format);
    \}
\}" shape=ellipse]
120 [label="10:CtIfImpl@if (tag.getTagName().equals(tagName)) \{
    tagCount++;
    if (!formatPattern.matcher(tag.getArg1()).find()) \{
        log(lineNo, \"type.tagFormat\", \"@\" + tagName, format);
    \}
\}" shape=ellipse]
121 [label="8:CtBlockImpl@\{
    final JavadocTag tag = tags.get(i);
    if (tag.getTagName().equals(tagName)) \{
        tagCount++;
        if (!formatPattern.matcher(tag.getArg1()).find()) \{
            log(lineNo, \"type.tagFormat\", \"@\" + tagName, format);
        \}
    \}
\}" shape=ellipse]
122 [label="8:CtForImpl@for (int i = tags.size() - 1; i >= 0; i--) \{
    final JavadocTag tag = tags.get(i);
    if (tag.getTagName().equals(tagName)) \{
        tagCount++;
        if (!formatPattern.matcher(tag.getArg1()).find()) \{
            log(lineNo, \"type.tagFormat\", \"@\" + tagName, format);
        \}
    \}
\}" shape=ellipse]
123 [label="17:CtVariableReadImpl@tagCount" shape=ellipse]
124 [label="17:CtLocalVariableReferenceImpl@tagCount" shape=ellipse]
125 [label="17:CtLiteralImpl@0" shape=ellipse]
126 [label="17:CtTypeReferenceImpl@int" shape=ellipse]
127 [label="17:CtBinaryOperatorImpl@tagCount == 0" shape=ellipse]
128 [label="17:CtTypeReferenceImpl@boolean" shape=ellipse]
129 [label="18:CtExecutableReferenceImpl@log(int,java.lang.String,java.lang.String)" shape=ellipse]
130 [label="18:CtTypeReferenceImpl@int" shape=ellipse]
131 [label="18:CtTypeReferenceImpl@String" shape=ellipse]
132 [label="18:CtTypeReferenceImpl@String" shape=ellipse]
133 [label="18:CtVirtualElement@log" shape=ellipse]
134 [label="18:CtTypeAccessImpl@PlaceHold" shape=ellipse]
135 [label="18:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
136 [label="18:CtThisAccessImpl@" shape=ellipse]
137 [label="18:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
138 [label="18:CtVariableReadImpl@lineNo" shape=ellipse]
139 [label="18:CtParameterReferenceImpl@lineNo" shape=ellipse]
140 [label="18:CtLiteralImpl@\"type.missingTag\"" shape=ellipse]
141 [label="18:CtTypeReferenceImpl@String" shape=ellipse]
142 [label="18:CtLiteralImpl@\"@\"" shape=ellipse]
143 [label="18:CtTypeReferenceImpl@String" shape=ellipse]
144 [label="18:CtVariableReadImpl@tagName" shape=ellipse]
145 [label="18:CtParameterReferenceImpl@tagName" shape=ellipse]
146 [label="18:CtBinaryOperatorImpl@\"@\" + tagName" shape=ellipse]
147 [label="18:CtTypeReferenceImpl@String" shape=ellipse]
148 [label="18:CtInvocationImpl@log(lineNo, \"type.missingTag\", \"@\" + tagName)" shape=ellipse]
149 [label="17:CtBlockImpl@\{
    log(lineNo, \"type.missingTag\", \"@\" + tagName);
\}" shape=ellipse]
150 [label="17:CtIfImpl@if (tagCount == 0) \{
    log(lineNo, \"type.missingTag\", \"@\" + tagName);
\}" shape=ellipse]
151 [label="3:CtBlockImpl@\{
    if (formatPattern == null) \{
        return;
    \}
    int tagCount = 0;
    for (int i = tags.size() - 1; i >= 0; i--) \{
        final JavadocTag tag = tags.get(i);
        if (tag.getTagName().equals(tagName)) \{
            tagCount++;
            if (!formatPattern.matcher(tag.getArg1()).find()) \{
                log(lineNo, \"type.tagFormat\", \"@\" + tagName, format);
            \}
        \}
    \}
    if (tagCount == 0) \{
        log(lineNo, \"type.missingTag\", \"@\" + tagName);
    \}
\}" shape=ellipse]
152 [label="2:CtMethodImpl@private void checkTag(int lineNo, List<JavadocTag> tags, String tagName, Pattern formatPattern, String format) \{
    if (formatPattern == null) \{
        return;
    \}
    int tagCount = 0;
    for (int i = tags.size() - 1; i >= 0; i--) \{
        final JavadocTag tag = tags.get(i);
        if (tag.getTagName().equals(tagName)) \{
            tagCount++;
            if (!formatPattern.matcher(tag.getArg1()).find()) \{
                log(lineNo, \"type.tagFormat\", \"@\" + tagName, format);
            \}
        \}
    \}
    if (tagCount == 0) \{
        log(lineNo, \"type.missingTag\", \"@\" + tagName);
    \}
\}" shape=ellipse]
153 [label="13:Delete@DELETE" shape=ellipse]
154 [label="18:Delete@DELETE" shape=ellipse]
155 [label="18:Insert@INSERT" shape=ellipse]
156 [label="18:CtPackageReferenceImpl@" shape=ellipse]
157 [label="18:CtTypeReferenceImpl@MISSING_TAG" shape=ellipse]
158 [label="18:CtTypeAccessImpl@MISSING_TAG" shape=ellipse]
159 [label="13:Insert@INSERT" shape=ellipse]
160 [label="13:CtPackageReferenceImpl@" shape=ellipse]
161 [label="13:CtTypeReferenceImpl@TAG_FORMAT" shape=ellipse]
162 [label="13:CtTypeAccessImpl@TAG_FORMAT" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
6 -> 7 [label="AST"];
8 -> 9 [label="AST"];
10 -> 11 [label="AST"];
12 -> 13 [label="AST"];
14 -> 15 [label="AST"];
16 -> 12 [label="AST"];
16 -> 14 [label="AST"];
16 -> 18 [label="Control Dep"];
16 -> 17 [label="Control Dep"];
18 -> 17 [label="AST"];
19 -> 16 [label="AST"];
19 -> 18 [label="AST"];
21 -> 22 [label="AST"];
23 -> 123 [label="Define-Use"];
24 -> 23 [label="AST"];
24 -> 20 [label="AST"];
24 -> 21 [label="AST"];
26 -> 27 [label="AST"];
29 -> 30 [label="AST"];
29 -> 35 [label="Data Dep"];
31 -> 28 [label="AST"];
31 -> 29 [label="AST"];
31 -> 26 [label="AST"];
32 -> 33 [label="AST"];
34 -> 31 [label="AST"];
34 -> 32 [label="AST"];
35 -> 37 [label="Define-Use"];
36 -> 35 [label="AST"];
36 -> 25 [label="AST"];
36 -> 34 [label="AST"];
37 -> 38 [label="AST"];
39 -> 40 [label="AST"];
41 -> 42 [label="AST"];
41 -> 37 [label="AST"];
41 -> 39 [label="AST"];
41 -> 121 [label="Control Dep"];
41 -> 60 [label="Control Dep"];
41 -> 58 [label="Control Dep"];
41 -> 49 [label="Control Dep"];
41 -> 54 [label="Control Dep"];
41 -> 56 [label="Control Dep"];
41 -> 120 [label="Control Dep"];
41 -> 73 [label="Control Dep"];
41 -> 61 [label="Control Dep"];
41 -> 70 [label="Control Dep"];
41 -> 65 [label="Control Dep"];
41 -> 68 [label="Control Dep"];
41 -> 71 [label="Control Dep"];
43 -> 44 [label="AST"];
43 -> 56 [label="Define-Use"];
45 -> 46 [label="AST"];
45 -> 43 [label="AST"];
47 -> 48 [label="AST"];
49 -> 50 [label="AST"];
49 -> 51 [label="AST"];
49 -> 52 [label="AST"];
54 -> 55 [label="AST"];
54 -> 59 [label="Data Dep"];
56 -> 57 [label="AST"];
56 -> 59 [label="Data Dep"];
58 -> 53 [label="AST"];
58 -> 54 [label="AST"];
58 -> 49 [label="AST"];
58 -> 56 [label="AST"];
59 -> 68 [label="Define-Use"];
59 -> 88 [label="Define-Use"];
60 -> 59 [label="AST"];
60 -> 47 [label="AST"];
60 -> 58 [label="AST"];
61 -> 62 [label="AST"];
61 -> 63 [label="AST"];
65 -> 66 [label="AST"];
68 -> 69 [label="AST"];
70 -> 67 [label="AST"];
70 -> 68 [label="AST"];
70 -> 65 [label="AST"];
71 -> 72 [label="AST"];
73 -> 64 [label="AST"];
73 -> 70 [label="AST"];
73 -> 61 [label="AST"];
73 -> 71 [label="AST"];
73 -> 119 [label="Control Dep"];
73 -> 76 [label="Control Dep"];
73 -> 74 [label="Control Dep"];
73 -> 118 [label="Control Dep"];
73 -> 93 [label="Control Dep"];
73 -> 92 [label="Control Dep"];
73 -> 78 [label="Control Dep"];
73 -> 91 [label="Control Dep"];
73 -> 80 [label="Control Dep"];
73 -> 83 [label="Control Dep"];
73 -> 90 [label="Control Dep"];
73 -> 85 [label="Control Dep"];
73 -> 88 [label="Control Dep"];
74 -> 75 [label="AST"];
74 -> 123 [label="Define-Use"];
75 -> 123 [label="Define-Use"];
76 -> 77 [label="AST"];
76 -> 74 [label="AST"];
80 -> 81 [label="AST"];
83 -> 84 [label="AST"];
85 -> 86 [label="AST"];
88 -> 89 [label="AST"];
90 -> 87 [label="AST"];
90 -> 88 [label="AST"];
90 -> 85 [label="AST"];
91 -> 82 [label="AST"];
91 -> 83 [label="AST"];
91 -> 80 [label="AST"];
91 -> 90 [label="AST"];
92 -> 79 [label="AST"];
92 -> 91 [label="AST"];
92 -> 78 [label="AST"];
93 -> 92 [label="AST"];
93 -> 117 [label="Control Dep"];
93 -> 116 [label="Control Dep"];
93 -> 94 [label="Control Dep"];
93 -> 102 [label="Control Dep"];
93 -> 100 [label="Control Dep"];
93 -> 104 [label="Control Dep"];
93 -> 106 [label="Control Dep"];
93 -> 112 [label="Control Dep"];
93 -> 108 [label="Control Dep"];
93 -> 110 [label="Control Dep"];
93 -> 114 [label="Control Dep"];
93 -> 162 [label="Control Dep"];
94 -> 95 [label="AST"];
94 -> 96 [label="AST"];
94 -> 97 [label="AST"];
94 -> 98 [label="AST"];
100 -> 101 [label="AST"];
102 -> 103 [label="AST"];
102 -> 100 [label="AST"];
104 -> 105 [label="AST"];
106 -> 107 [label="AST"];
106 -> 153 [label="Action"];
108 -> 109 [label="AST"];
110 -> 111 [label="AST"];
112 -> 113 [label="AST"];
112 -> 108 [label="AST"];
112 -> 110 [label="AST"];
114 -> 115 [label="AST"];
116 -> 99 [label="AST"];
116 -> 102 [label="AST"];
116 -> 94 [label="AST"];
116 -> 104 [label="AST"];
116 -> 106 [label="AST"];
116 -> 112 [label="AST"];
116 -> 114 [label="AST"];
116 -> 159 [label="Action"];
117 -> 116 [label="AST"];
118 -> 93 [label="AST"];
118 -> 117 [label="AST"];
119 -> 76 [label="AST"];
119 -> 118 [label="AST"];
120 -> 73 [label="AST"];
120 -> 119 [label="AST"];
121 -> 60 [label="AST"];
121 -> 120 [label="AST"];
122 -> 36 [label="AST"];
122 -> 41 [label="AST"];
122 -> 45 [label="AST"];
122 -> 121 [label="AST"];
123 -> 124 [label="AST"];
125 -> 126 [label="AST"];
127 -> 128 [label="AST"];
127 -> 123 [label="AST"];
127 -> 125 [label="AST"];
127 -> 149 [label="Control Dep"];
127 -> 148 [label="Control Dep"];
127 -> 129 [label="Control Dep"];
127 -> 136 [label="Control Dep"];
127 -> 134 [label="Control Dep"];
127 -> 138 [label="Control Dep"];
127 -> 140 [label="Control Dep"];
127 -> 146 [label="Control Dep"];
127 -> 142 [label="Control Dep"];
127 -> 144 [label="Control Dep"];
127 -> 158 [label="Control Dep"];
129 -> 130 [label="AST"];
129 -> 131 [label="AST"];
129 -> 132 [label="AST"];
134 -> 135 [label="AST"];
136 -> 137 [label="AST"];
136 -> 134 [label="AST"];
138 -> 139 [label="AST"];
140 -> 141 [label="AST"];
140 -> 154 [label="Action"];
142 -> 143 [label="AST"];
144 -> 145 [label="AST"];
146 -> 147 [label="AST"];
146 -> 142 [label="AST"];
146 -> 144 [label="AST"];
148 -> 133 [label="AST"];
148 -> 136 [label="AST"];
148 -> 129 [label="AST"];
148 -> 138 [label="AST"];
148 -> 140 [label="AST"];
148 -> 146 [label="AST"];
148 -> 155 [label="Action"];
149 -> 148 [label="AST"];
150 -> 127 [label="AST"];
150 -> 149 [label="AST"];
151 -> 19 [label="AST"];
151 -> 24 [label="AST"];
151 -> 122 [label="AST"];
151 -> 150 [label="AST"];
152 -> 1 [label="AST"];
152 -> 0 [label="AST"];
152 -> 2 [label="AST"];
152 -> 4 [label="AST"];
152 -> 6 [label="AST"];
152 -> 8 [label="AST"];
152 -> 10 [label="AST"];
152 -> 151 [label="AST"];
155 -> 158 [label="Action"];
157 -> 156 [label="AST"];
158 -> 157 [label="AST"];
159 -> 162 [label="Action"];
161 -> 160 [label="AST"];
162 -> 161 [label="AST"];
}