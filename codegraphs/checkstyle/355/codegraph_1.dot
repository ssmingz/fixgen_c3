digraph "resolveType#?,SymTabAST,Scope,IClass,boolean" {
0 [label="2:CtTypeReferenceImpl@IClass" shape=ellipse]
1 [label="2:CtPackageReferenceImpl@" shape=ellipse]
2 [label="2:CtVirtualElement@resolveType" shape=ellipse]
3 [label="3:CtParameterImpl@SymTabAST expr" shape=ellipse]
4 [label="3:CtTypeReferenceImpl@SymTabAST" shape=ellipse]
5 [label="3:CtParameterImpl@Scope location" shape=ellipse]
6 [label="3:CtTypeReferenceImpl@Scope" shape=ellipse]
7 [label="3:CtParameterImpl@IClass context" shape=ellipse]
8 [label="3:CtTypeReferenceImpl@IClass" shape=ellipse]
9 [label="3:CtParameterImpl@boolean referencePhase" shape=ellipse]
10 [label="3:CtTypeReferenceImpl@boolean" shape=ellipse]
11 [label="4:CtTypeReferenceImpl@IClass" shape=ellipse]
12 [label="4:CtPackageReferenceImpl@" shape=ellipse]
13 [label="4:CtLiteralImpl@null" shape=ellipse]
14 [label="4:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
15 [label="4:CtVirtualElement@result" shape=ellipse]
16 [label="4:CtLocalVariableImpl@IClass result = null" shape=ellipse]
17 [label="5:CtTypeReferenceImpl@SymTabAST" shape=ellipse]
18 [label="5:CtPackageReferenceImpl@" shape=ellipse]
19 [label="5:CtExecutableReferenceImpl@getFirstChild()" shape=ellipse]
20 [label="5:CtTypeReferenceImpl@SymTabAST" shape=ellipse]
21 [label="5:CtVirtualElement@getFirstChild" shape=ellipse]
22 [label="5:CtVariableReadImpl@expr" shape=ellipse]
23 [label="5:CtParameterReferenceImpl@expr" shape=ellipse]
24 [label="5:CtInvocationImpl@((SymTabAST) (expr.getFirstChild()))" shape=ellipse]
25 [label="5:CtTypeReferenceImpl@SymTabAST" shape=ellipse]
26 [label="5:CtVirtualElement@nameNode" shape=ellipse]
27 [label="5:CtLocalVariableImpl@SymTabAST nameNode = ((SymTabAST) (expr.getFirstChild()))" shape=ellipse]
28 [label="6:CtExecutableReferenceImpl@getType()" shape=ellipse]
29 [label="6:CtTypeReferenceImpl@SymTabAST" shape=ellipse]
30 [label="6:CtVirtualElement@getType" shape=ellipse]
31 [label="6:CtVariableReadImpl@nameNode" shape=ellipse]
32 [label="6:CtLocalVariableReferenceImpl@nameNode" shape=ellipse]
33 [label="6:CtInvocationImpl@nameNode.getType()" shape=ellipse]
34 [label="6:CtFieldReferenceImpl@TokenTypes.DOT" shape=ellipse]
35 [label="6:CtTypeReferenceImpl@TokenTypes" shape=ellipse]
36 [label="6:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
37 [label="6:CtFieldReadImpl@TokenTypes.DOT" shape=ellipse]
38 [label="6:CtTypeAccessImpl@TokenTypes" shape=ellipse]
39 [label="6:CtBinaryOperatorImpl@nameNode.getType() == TokenTypes.DOT" shape=ellipse]
40 [label="7:CtVariableWriteImpl@result" shape=ellipse]
41 [label="7:CtLocalVariableReferenceImpl@result" shape=ellipse]
42 [label="7:CtExecutableReferenceImpl@resolveDottedName(<unknown>,<unknown>,<unknown>,boolean)" shape=ellipse]
43 [label="7:CtTypeReferenceImpl@null" shape=ellipse]
44 [label="7:CtTypeReferenceImpl@null" shape=ellipse]
45 [label="7:CtTypeReferenceImpl@null" shape=ellipse]
46 [label="7:CtTypeReferenceImpl@boolean" shape=ellipse]
47 [label="7:CtVirtualElement@resolveDottedName" shape=ellipse]
48 [label="7:CtTypeAccessImpl@PlaceHold" shape=ellipse]
49 [label="7:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
50 [label="7:CtThisAccessImpl@" shape=ellipse]
51 [label="7:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
52 [label="7:CtVariableReadImpl@nameNode" shape=ellipse]
53 [label="7:CtLocalVariableReferenceImpl@nameNode" shape=ellipse]
54 [label="7:CtVariableReadImpl@location" shape=ellipse]
55 [label="7:CtParameterReferenceImpl@location" shape=ellipse]
56 [label="7:CtVariableReadImpl@context" shape=ellipse]
57 [label="7:CtParameterReferenceImpl@context" shape=ellipse]
58 [label="7:CtVariableReadImpl@referencePhase" shape=ellipse]
59 [label="7:CtParameterReferenceImpl@referencePhase" shape=ellipse]
60 [label="7:CtInvocationImpl@resolveDottedName(nameNode, location, context, referencePhase)" shape=ellipse]
61 [label="7:CtAssignmentImpl@result = resolveDottedName(nameNode, location, context, referencePhase)" shape=ellipse]
62 [label="6:CtBlockImpl@\{
    result = resolveDottedName(nameNode, location, context, referencePhase);
\}" shape=ellipse]
63 [label="9:CtVariableWriteImpl@result" shape=ellipse]
64 [label="9:CtLocalVariableReferenceImpl@result" shape=ellipse]
65 [label="9:CtExecutableReferenceImpl@resolveClassIdent(<unknown>,<unknown>,<unknown>,boolean)" shape=ellipse]
66 [label="9:CtTypeReferenceImpl@null" shape=ellipse]
67 [label="9:CtTypeReferenceImpl@null" shape=ellipse]
68 [label="9:CtTypeReferenceImpl@null" shape=ellipse]
69 [label="9:CtTypeReferenceImpl@boolean" shape=ellipse]
70 [label="9:CtVirtualElement@resolveClassIdent" shape=ellipse]
71 [label="9:CtTypeAccessImpl@PlaceHold" shape=ellipse]
72 [label="9:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
73 [label="9:CtThisAccessImpl@" shape=ellipse]
74 [label="9:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
75 [label="9:CtVariableReadImpl@nameNode" shape=ellipse]
76 [label="9:CtLocalVariableReferenceImpl@nameNode" shape=ellipse]
77 [label="9:CtVariableReadImpl@location" shape=ellipse]
78 [label="9:CtParameterReferenceImpl@location" shape=ellipse]
79 [label="9:CtVariableReadImpl@context" shape=ellipse]
80 [label="9:CtParameterReferenceImpl@context" shape=ellipse]
81 [label="9:CtVariableReadImpl@referencePhase" shape=ellipse]
82 [label="9:CtParameterReferenceImpl@referencePhase" shape=ellipse]
83 [label="9:CtInvocationImpl@resolveClassIdent(nameNode, location, context, referencePhase)" shape=ellipse]
84 [label="9:CtAssignmentImpl@result = resolveClassIdent(nameNode, location, context, referencePhase)" shape=ellipse]
85 [label="8:CtBlockImpl@\{
    result = resolveClassIdent(nameNode, location, context, referencePhase);
\}" shape=ellipse]
86 [label="6:CtIfImpl@if (nameNode.getType() == TokenTypes.DOT) \{
    result = resolveDottedName(nameNode, location, context, referencePhase);
\} else \{
    result = resolveClassIdent(nameNode, location, context, referencePhase);
\}" shape=ellipse]
87 [label="11:CtVariableReadImpl@result" shape=ellipse]
88 [label="11:CtLocalVariableReferenceImpl@result" shape=ellipse]
89 [label="11:CtReturnImpl@return result" shape=ellipse]
90 [label="3:CtBlockImpl@\{
    IClass result = null;
    SymTabAST nameNode = ((SymTabAST) (expr.getFirstChild()));
    if (nameNode.getType() == TokenTypes.DOT) \{
        result = resolveDottedName(nameNode, location, context, referencePhase);
    \} else \{
        result = resolveClassIdent(nameNode, location, context, referencePhase);
    \}
    return result;
\}" shape=ellipse]
91 [label="2:CtMethodImpl@public IClass resolveType(SymTabAST expr, Scope location, IClass context, boolean referencePhase) \{
    IClass result = null;
    SymTabAST nameNode = ((SymTabAST) (expr.getFirstChild()));
    if (nameNode.getType() == TokenTypes.DOT) \{
        result = resolveDottedName(nameNode, location, context, referencePhase);
    \} else \{
        result = resolveClassIdent(nameNode, location, context, referencePhase);
    \}
    return result;
\}" shape=ellipse]
92 [label="7:Update@UPDATE" shape=ellipse]
93 [label="8:CtTypeReferenceImpl@boolean" shape=ellipse]
94 [label="8:CtLocalVariableReferenceImpl@createReference" shape=ellipse]
95 [label="8:CtVariableReadImpl@createReference" shape=ellipse]
96 [label="9:Update@UPDATE" shape=ellipse]
97 [label="10:CtTypeReferenceImpl@boolean" shape=ellipse]
98 [label="10:CtLocalVariableReferenceImpl@createReference" shape=ellipse]
99 [label="10:CtVariableReadImpl@createReference" shape=ellipse]
100 [label="6:Insert@INSERT" shape=ellipse]
101 [label="6:CtTypeReferenceImpl@boolean" shape=ellipse]
102 [label="6:CtTypeReferenceImpl@boolean" shape=ellipse]
103 [label="6:CtLiteralImpl@false" shape=ellipse]
104 [label="6:CtLocalVariableImpl@final boolean createReference = false" shape=ellipse]
105 [label="6:CtVirtualElement@createReference" shape=ellipse]
0 -> 1 [label="AST"];
3 -> 4 [label="AST"];
5 -> 6 [label="AST"];
7 -> 8 [label="AST"];
9 -> 10 [label="AST"];
11 -> 12 [label="AST"];
13 -> 14 [label="AST"];
15 -> 87 [label="Define-Use"];
16 -> 15 [label="AST"];
16 -> 11 [label="AST"];
16 -> 13 [label="AST"];
17 -> 18 [label="AST"];
19 -> 20 [label="AST"];
22 -> 23 [label="AST"];
22 -> 26 [label="Data Dep"];
24 -> 21 [label="AST"];
24 -> 25 [label="AST"];
24 -> 22 [label="AST"];
24 -> 19 [label="AST"];
26 -> 31 [label="Define-Use"];
26 -> 52 [label="Define-Use"];
26 -> 75 [label="Define-Use"];
27 -> 26 [label="AST"];
27 -> 17 [label="AST"];
27 -> 24 [label="AST"];
28 -> 29 [label="AST"];
31 -> 32 [label="AST"];
33 -> 30 [label="AST"];
33 -> 31 [label="AST"];
33 -> 28 [label="AST"];
34 -> 35 [label="AST"];
34 -> 36 [label="AST"];
37 -> 38 [label="AST"];
37 -> 34 [label="AST"];
39 -> 33 [label="AST"];
39 -> 37 [label="AST"];
39 -> 62 [label="Control Dep"];
39 -> 61 [label="Control Dep"];
39 -> 40 [label="Control Dep"];
39 -> 60 [label="Control Dep"];
39 -> 42 [label="Control Dep"];
39 -> 50 [label="Control Dep"];
39 -> 48 [label="Control Dep"];
39 -> 52 [label="Control Dep"];
39 -> 54 [label="Control Dep"];
39 -> 56 [label="Control Dep"];
39 -> 58 [label="Control Dep"];
39 -> 85 [label="Control Dep"];
39 -> 84 [label="Control Dep"];
39 -> 63 [label="Control Dep"];
39 -> 83 [label="Control Dep"];
39 -> 65 [label="Control Dep"];
39 -> 73 [label="Control Dep"];
39 -> 71 [label="Control Dep"];
39 -> 75 [label="Control Dep"];
39 -> 77 [label="Control Dep"];
39 -> 79 [label="Control Dep"];
39 -> 81 [label="Control Dep"];
39 -> 95 [label="Control Dep"];
39 -> 99 [label="Control Dep"];
40 -> 41 [label="AST"];
40 -> 87 [label="Define-Use"];
41 -> 87 [label="Define-Use"];
42 -> 43 [label="AST"];
42 -> 44 [label="AST"];
42 -> 45 [label="AST"];
42 -> 46 [label="AST"];
48 -> 49 [label="AST"];
50 -> 51 [label="AST"];
50 -> 48 [label="AST"];
50 -> 40 [label="Data Dep"];
52 -> 53 [label="AST"];
52 -> 40 [label="Data Dep"];
54 -> 55 [label="AST"];
54 -> 40 [label="Data Dep"];
56 -> 57 [label="AST"];
56 -> 40 [label="Data Dep"];
58 -> 59 [label="AST"];
58 -> 40 [label="Data Dep"];
58 -> 92 [label="Action"];
60 -> 47 [label="AST"];
60 -> 50 [label="AST"];
60 -> 42 [label="AST"];
60 -> 52 [label="AST"];
60 -> 54 [label="AST"];
60 -> 56 [label="AST"];
60 -> 58 [label="AST"];
61 -> 40 [label="AST"];
61 -> 60 [label="AST"];
62 -> 61 [label="AST"];
63 -> 64 [label="AST"];
63 -> 87 [label="Define-Use"];
64 -> 87 [label="Define-Use"];
65 -> 66 [label="AST"];
65 -> 67 [label="AST"];
65 -> 68 [label="AST"];
65 -> 69 [label="AST"];
71 -> 72 [label="AST"];
73 -> 74 [label="AST"];
73 -> 71 [label="AST"];
73 -> 63 [label="Data Dep"];
75 -> 76 [label="AST"];
75 -> 63 [label="Data Dep"];
77 -> 78 [label="AST"];
77 -> 63 [label="Data Dep"];
79 -> 80 [label="AST"];
79 -> 63 [label="Data Dep"];
81 -> 82 [label="AST"];
81 -> 63 [label="Data Dep"];
81 -> 96 [label="Action"];
83 -> 70 [label="AST"];
83 -> 73 [label="AST"];
83 -> 65 [label="AST"];
83 -> 75 [label="AST"];
83 -> 77 [label="AST"];
83 -> 79 [label="AST"];
83 -> 81 [label="AST"];
84 -> 63 [label="AST"];
84 -> 83 [label="AST"];
85 -> 84 [label="AST"];
86 -> 39 [label="AST"];
86 -> 62 [label="AST"];
86 -> 85 [label="AST"];
87 -> 88 [label="AST"];
89 -> 87 [label="AST"];
90 -> 16 [label="AST"];
90 -> 27 [label="AST"];
90 -> 86 [label="AST"];
90 -> 89 [label="AST"];
90 -> 100 [label="Action"];
91 -> 2 [label="AST"];
91 -> 0 [label="AST"];
91 -> 3 [label="AST"];
91 -> 5 [label="AST"];
91 -> 7 [label="AST"];
91 -> 9 [label="AST"];
91 -> 90 [label="AST"];
92 -> 95 [label="Action"];
94 -> 93 [label="AST"];
95 -> 94 [label="AST"];
95 -> 40 [label="Data Dep"];
95 -> 40 [label="Control Dep"];
96 -> 99 [label="Action"];
98 -> 97 [label="AST"];
99 -> 98 [label="AST"];
99 -> 63 [label="Data Dep"];
99 -> 63 [label="Control Dep"];
100 -> 104 [label="Action"];
103 -> 102 [label="AST"];
104 -> 105 [label="AST"];
104 -> 101 [label="AST"];
104 -> 103 [label="AST"];
105 -> 95 [label="Define-Use"];
105 -> 99 [label="Define-Use"];
105 -> 58 [label="Define-Use"];
105 -> 58 [label="Data Dep"];
105 -> 58 [label="Control Dep"];
105 -> 81 [label="Define-Use"];
105 -> 81 [label="Data Dep"];
105 -> 81 [label="Control Dep"];
}