digraph "checkWSAfter#?,int,int,MyToken,String" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@checkWSAfter" shape=ellipse]
2 [label="2:CtParameterImpl@int aLineNo" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@int" shape=ellipse]
4 [label="2:CtParameterImpl@int aColNo" shape=ellipse]
5 [label="2:CtTypeReferenceImpl@int" shape=ellipse]
6 [label="2:CtParameterImpl@MyToken aConstruct" shape=ellipse]
7 [label="2:CtTypeReferenceImpl@MyToken" shape=ellipse]
8 [label="2:CtParameterImpl@String aAllow" shape=ellipse]
9 [label="2:CtTypeReferenceImpl@String" shape=ellipse]
10 [label="3:CtExecutableReferenceImpl@isIgnoreWhitespace()" shape=ellipse]
11 [label="3:CtTypeReferenceImpl@mConfig" shape=ellipse]
12 [label="3:CtVirtualElement@isIgnoreWhitespace" shape=ellipse]
13 [label="3:CtFieldReferenceImpl@mConfig" shape=ellipse]
14 [label="3:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
15 [label="3:CtFieldReadImpl@mConfig" shape=ellipse]
16 [label="3:CtInvocationImpl@mConfig.isIgnoreWhitespace()" shape=ellipse]
17 [label="4:CtFieldReferenceImpl@MyToken.CAST" shape=ellipse]
18 [label="4:CtTypeReferenceImpl@MyToken" shape=ellipse]
19 [label="4:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
20 [label="4:CtFieldReadImpl@MyToken.CAST" shape=ellipse]
21 [label="4:CtTypeAccessImpl@MyToken" shape=ellipse]
22 [label="4:CtVariableReadImpl@aConstruct" shape=ellipse]
23 [label="4:CtParameterReferenceImpl@aConstruct" shape=ellipse]
24 [label="4:CtBinaryOperatorImpl@(MyToken.CAST == aConstruct)" shape=ellipse]
25 [label="4:CtExecutableReferenceImpl@isIgnoreCastWhitespace()" shape=ellipse]
26 [label="4:CtTypeReferenceImpl@mConfig" shape=ellipse]
27 [label="4:CtVirtualElement@isIgnoreCastWhitespace" shape=ellipse]
28 [label="4:CtFieldReferenceImpl@mConfig" shape=ellipse]
29 [label="4:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
30 [label="4:CtFieldReadImpl@mConfig" shape=ellipse]
31 [label="4:CtInvocationImpl@mConfig.isIgnoreCastWhitespace()" shape=ellipse]
32 [label="4:CtBinaryOperatorImpl@((MyToken.CAST == aConstruct) && mConfig.isIgnoreCastWhitespace())" shape=ellipse]
33 [label="3:CtBinaryOperatorImpl@mConfig.isIgnoreWhitespace() || ((MyToken.CAST == aConstruct) && mConfig.isIgnoreCastWhitespace())" shape=ellipse]
34 [label="5:CtReturnImpl@return" shape=ellipse]
35 [label="4:CtBlockImpl@\{
    return;
\}" shape=ellipse]
36 [label="3:CtIfImpl@if (mConfig.isIgnoreWhitespace() || ((MyToken.CAST == aConstruct) && mConfig.isIgnoreCastWhitespace())) \{
    return;
\}" shape=ellipse]
37 [label="7:CtTypeReferenceImpl@String" shape=ellipse]
38 [label="7:CtPackageReferenceImpl@java.lang" shape=ellipse]
39 [label="7:CtFieldReferenceImpl@mLines" shape=ellipse]
40 [label="7:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
41 [label="7:CtFieldReadImpl@mLines" shape=ellipse]
42 [label="7:CtVariableReadImpl@aLineNo" shape=ellipse]
43 [label="7:CtParameterReferenceImpl@aLineNo" shape=ellipse]
44 [label="7:CtLiteralImpl@1" shape=ellipse]
45 [label="7:CtTypeReferenceImpl@int" shape=ellipse]
46 [label="7:CtBinaryOperatorImpl@aLineNo - 1" shape=ellipse]
47 [label="7:CtTypeReferenceImpl@int" shape=ellipse]
48 [label="7:CtArrayReadImpl@mLines[aLineNo - 1]" shape=ellipse]
49 [label="7:CtVirtualElement@line" shape=ellipse]
50 [label="7:CtLocalVariableImpl@final String line = mLines[aLineNo - 1]" shape=ellipse]
51 [label="8:CtVariableReadImpl@aColNo" shape=ellipse]
52 [label="8:CtParameterReferenceImpl@aColNo" shape=ellipse]
53 [label="8:CtExecutableReferenceImpl@length()" shape=ellipse]
54 [label="8:CtTypeReferenceImpl@String" shape=ellipse]
55 [label="8:CtTypeReferenceImpl@int" shape=ellipse]
56 [label="8:CtVirtualElement@length" shape=ellipse]
57 [label="8:CtVariableReadImpl@line" shape=ellipse]
58 [label="8:CtLocalVariableReferenceImpl@line" shape=ellipse]
59 [label="8:CtInvocationImpl@line.length()" shape=ellipse]
60 [label="8:CtBinaryOperatorImpl@(aColNo < line.length())" shape=ellipse]
61 [label="8:CtTypeReferenceImpl@boolean" shape=ellipse]
62 [label="8:CtExecutableReferenceImpl@isWhitespace(char)" shape=ellipse]
63 [label="8:CtTypeReferenceImpl@Character" shape=ellipse]
64 [label="8:CtTypeReferenceImpl@boolean" shape=ellipse]
65 [label="8:CtTypeReferenceImpl@char" shape=ellipse]
66 [label="8:CtVirtualElement@isWhitespace" shape=ellipse]
67 [label="8:CtTypeAccessImpl@Character" shape=ellipse]
68 [label="8:CtTypeReferenceImpl@Character" shape=ellipse]
69 [label="8:CtExecutableReferenceImpl@charAt(int)" shape=ellipse]
70 [label="8:CtTypeReferenceImpl@String" shape=ellipse]
71 [label="8:CtTypeReferenceImpl@char" shape=ellipse]
72 [label="8:CtTypeReferenceImpl@int" shape=ellipse]
73 [label="8:CtVirtualElement@charAt" shape=ellipse]
74 [label="8:CtVariableReadImpl@line" shape=ellipse]
75 [label="8:CtLocalVariableReferenceImpl@line" shape=ellipse]
76 [label="8:CtVariableReadImpl@aColNo" shape=ellipse]
77 [label="8:CtParameterReferenceImpl@aColNo" shape=ellipse]
78 [label="8:CtInvocationImpl@line.charAt(aColNo)" shape=ellipse]
79 [label="8:CtInvocationImpl@Character.isWhitespace(line.charAt(aColNo))" shape=ellipse]
80 [label="8:CtUnaryOperatorImpl@(!Character.isWhitespace(line.charAt(aColNo)))" shape=ellipse]
81 [label="8:CtTypeReferenceImpl@boolean" shape=ellipse]
82 [label="8:CtBinaryOperatorImpl@((aColNo < line.length()) && (!Character.isWhitespace(line.charAt(aColNo))))" shape=ellipse]
83 [label="8:CtTypeReferenceImpl@boolean" shape=ellipse]
84 [label="9:CtExecutableReferenceImpl@indexOf(int)" shape=ellipse]
85 [label="9:CtTypeReferenceImpl@String" shape=ellipse]
86 [label="9:CtTypeReferenceImpl@int" shape=ellipse]
87 [label="9:CtTypeReferenceImpl@int" shape=ellipse]
88 [label="9:CtVirtualElement@indexOf" shape=ellipse]
89 [label="9:CtVariableReadImpl@aAllow" shape=ellipse]
90 [label="9:CtParameterReferenceImpl@aAllow" shape=ellipse]
91 [label="9:CtExecutableReferenceImpl@charAt(int)" shape=ellipse]
92 [label="9:CtTypeReferenceImpl@String" shape=ellipse]
93 [label="9:CtTypeReferenceImpl@char" shape=ellipse]
94 [label="9:CtTypeReferenceImpl@int" shape=ellipse]
95 [label="9:CtVirtualElement@charAt" shape=ellipse]
96 [label="9:CtVariableReadImpl@line" shape=ellipse]
97 [label="9:CtLocalVariableReferenceImpl@line" shape=ellipse]
98 [label="9:CtVariableReadImpl@aColNo" shape=ellipse]
99 [label="9:CtParameterReferenceImpl@aColNo" shape=ellipse]
100 [label="9:CtInvocationImpl@line.charAt(aColNo)" shape=ellipse]
101 [label="9:CtInvocationImpl@aAllow.indexOf(line.charAt(aColNo))" shape=ellipse]
102 [label="9:CtLiteralImpl@1" shape=ellipse]
103 [label="9:CtTypeReferenceImpl@int" shape=ellipse]
104 [label="9:CtUnaryOperatorImpl@(-1)" shape=ellipse]
105 [label="9:CtTypeReferenceImpl@int" shape=ellipse]
106 [label="9:CtBinaryOperatorImpl@(aAllow.indexOf(line.charAt(aColNo)) == (-1))" shape=ellipse]
107 [label="9:CtTypeReferenceImpl@boolean" shape=ellipse]
108 [label="8:CtBinaryOperatorImpl@((aColNo < line.length()) && (!Character.isWhitespace(line.charAt(aColNo)))) && (aAllow.indexOf(line.charAt(aColNo)) == (-1))" shape=ellipse]
109 [label="8:CtTypeReferenceImpl@boolean" shape=ellipse]
110 [label="10:CtExecutableReferenceImpl@log(int,int,java.lang.String,<unknown>)" shape=ellipse]
111 [label="10:CtTypeReferenceImpl@int" shape=ellipse]
112 [label="10:CtTypeReferenceImpl@int" shape=ellipse]
113 [label="10:CtTypeReferenceImpl@String" shape=ellipse]
114 [label="10:CtTypeReferenceImpl@null" shape=ellipse]
115 [label="10:CtVirtualElement@log" shape=ellipse]
116 [label="10:CtTypeAccessImpl@PlaceHold" shape=ellipse]
117 [label="10:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
118 [label="10:CtThisAccessImpl@" shape=ellipse]
119 [label="10:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
120 [label="10:CtVariableReadImpl@aLineNo" shape=ellipse]
121 [label="10:CtParameterReferenceImpl@aLineNo" shape=ellipse]
122 [label="10:CtVariableReadImpl@aColNo" shape=ellipse]
123 [label="10:CtParameterReferenceImpl@aColNo" shape=ellipse]
124 [label="10:CtLiteralImpl@\"ws.notFollowed\"" shape=ellipse]
125 [label="10:CtTypeReferenceImpl@String" shape=ellipse]
126 [label="10:CtExecutableReferenceImpl@getText()" shape=ellipse]
127 [label="10:CtTypeReferenceImpl@MyToken" shape=ellipse]
128 [label="10:CtVirtualElement@getText" shape=ellipse]
129 [label="10:CtVariableReadImpl@aConstruct" shape=ellipse]
130 [label="10:CtParameterReferenceImpl@aConstruct" shape=ellipse]
131 [label="10:CtInvocationImpl@aConstruct.getText()" shape=ellipse]
132 [label="10:CtInvocationImpl@log(aLineNo, aColNo, \"ws.notFollowed\", aConstruct.getText())" shape=ellipse]
133 [label="9:CtBlockImpl@\{
    log(aLineNo, aColNo, \"ws.notFollowed\", aConstruct.getText());
\}" shape=ellipse]
134 [label="8:CtIfImpl@if (((aColNo < line.length()) && (!Character.isWhitespace(line.charAt(aColNo)))) && (aAllow.indexOf(line.charAt(aColNo)) == (-1))) \{
    log(aLineNo, aColNo, \"ws.notFollowed\", aConstruct.getText());
\}" shape=ellipse]
135 [label="2:CtBlockImpl@\{
    if (mConfig.isIgnoreWhitespace() || ((MyToken.CAST == aConstruct) && mConfig.isIgnoreCastWhitespace())) \{
        return;
    \}
    final String line = mLines[aLineNo - 1];
    if (((aColNo < line.length()) && (!Character.isWhitespace(line.charAt(aColNo)))) && (aAllow.indexOf(line.charAt(aColNo)) == (-1))) \{
        log(aLineNo, aColNo, \"ws.notFollowed\", aConstruct.getText());
    \}
\}" shape=ellipse]
136 [label="2:CtMethodImpl@void checkWSAfter(int aLineNo, int aColNo, MyToken aConstruct, String aAllow) \{
    if (mConfig.isIgnoreWhitespace() || ((MyToken.CAST == aConstruct) && mConfig.isIgnoreCastWhitespace())) \{
        return;
    \}
    final String line = mLines[aLineNo - 1];
    if (((aColNo < line.length()) && (!Character.isWhitespace(line.charAt(aColNo)))) && (aAllow.indexOf(line.charAt(aColNo)) == (-1))) \{
        log(aLineNo, aColNo, \"ws.notFollowed\", aConstruct.getText());
    \}
\}" shape=ellipse]
137 [label="10:Update@UPDATE" shape=ellipse]
138 [label="10:CtPackageReferenceImpl@" shape=ellipse]
139 [label="10:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
140 [label="10:CtFieldReferenceImpl@mMessages" shape=ellipse]
141 [label="10:CtFieldReadImpl@mMessages" shape=ellipse]
142 [label="10:CtPackageReferenceImpl@" shape=ellipse]
143 [label="10:CtTypeReferenceImpl@mMessages" shape=ellipse]
144 [label="10:CtTypeReferenceImpl@int" shape=ellipse]
145 [label="10:CtTypeReferenceImpl@int" shape=ellipse]
146 [label="10:CtPackageReferenceImpl@java.lang" shape=ellipse]
147 [label="10:CtTypeReferenceImpl@String" shape=ellipse]
148 [label="10:CtExecutableReferenceImpl@add(int,int,java.lang.String)" shape=ellipse]
149 [label="10:CtTypeReferenceImpl@int" shape=ellipse]
150 [label="10:CtParameterReferenceImpl@aLineNo" shape=ellipse]
151 [label="10:CtVariableReadImpl@aLineNo" shape=ellipse]
152 [label="10:CtTypeReferenceImpl@int" shape=ellipse]
153 [label="10:CtParameterReferenceImpl@aColNo" shape=ellipse]
154 [label="10:CtVariableReadImpl@aColNo" shape=ellipse]
155 [label="10:CtPackageReferenceImpl@java.lang" shape=ellipse]
156 [label="10:CtTypeReferenceImpl@String" shape=ellipse]
157 [label="10:CtLiteralImpl@\"ws.notFollowed\"" shape=ellipse]
158 [label="10:CtPackageReferenceImpl@" shape=ellipse]
159 [label="10:CtTypeReferenceImpl@MyToken" shape=ellipse]
160 [label="10:CtParameterReferenceImpl@aConstruct" shape=ellipse]
161 [label="10:CtVariableReadImpl@aConstruct" shape=ellipse]
162 [label="10:CtPackageReferenceImpl@" shape=ellipse]
163 [label="10:CtTypeReferenceImpl@MyToken" shape=ellipse]
164 [label="10:CtExecutableReferenceImpl@getText()" shape=ellipse]
165 [label="10:CtInvocationImpl@aConstruct.getText()" shape=ellipse]
166 [label="10:CtVirtualElement@getText" shape=ellipse]
167 [label="10:CtInvocationImpl@mMessages.add(aLineNo, aColNo, \"ws.notFollowed\", aConstruct.getText())" shape=ellipse]
168 [label="10:CtVirtualElement@add" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
6 -> 7 [label="AST"];
8 -> 9 [label="AST"];
10 -> 11 [label="AST"];
13 -> 14 [label="AST"];
15 -> 13 [label="AST"];
16 -> 12 [label="AST"];
16 -> 15 [label="AST"];
16 -> 10 [label="AST"];
17 -> 18 [label="AST"];
17 -> 19 [label="AST"];
20 -> 21 [label="AST"];
20 -> 17 [label="AST"];
22 -> 23 [label="AST"];
24 -> 20 [label="AST"];
24 -> 22 [label="AST"];
25 -> 26 [label="AST"];
28 -> 29 [label="AST"];
30 -> 28 [label="AST"];
31 -> 27 [label="AST"];
31 -> 30 [label="AST"];
31 -> 25 [label="AST"];
32 -> 24 [label="AST"];
32 -> 31 [label="AST"];
33 -> 16 [label="AST"];
33 -> 32 [label="AST"];
33 -> 35 [label="Control Dep"];
33 -> 34 [label="Control Dep"];
35 -> 34 [label="AST"];
36 -> 33 [label="AST"];
36 -> 35 [label="AST"];
37 -> 38 [label="AST"];
39 -> 40 [label="AST"];
41 -> 39 [label="AST"];
42 -> 43 [label="AST"];
44 -> 45 [label="AST"];
46 -> 47 [label="AST"];
46 -> 42 [label="AST"];
46 -> 44 [label="AST"];
48 -> 41 [label="AST"];
48 -> 46 [label="AST"];
48 -> 49 [label="Data Dep"];
49 -> 57 [label="Define-Use"];
49 -> 74 [label="Define-Use"];
49 -> 96 [label="Define-Use"];
50 -> 49 [label="AST"];
50 -> 37 [label="AST"];
50 -> 48 [label="AST"];
51 -> 52 [label="AST"];
53 -> 54 [label="AST"];
53 -> 55 [label="AST"];
57 -> 58 [label="AST"];
59 -> 56 [label="AST"];
59 -> 57 [label="AST"];
59 -> 53 [label="AST"];
60 -> 61 [label="AST"];
60 -> 51 [label="AST"];
60 -> 59 [label="AST"];
62 -> 63 [label="AST"];
62 -> 64 [label="AST"];
62 -> 65 [label="AST"];
67 -> 68 [label="AST"];
69 -> 70 [label="AST"];
69 -> 71 [label="AST"];
69 -> 72 [label="AST"];
74 -> 75 [label="AST"];
76 -> 77 [label="AST"];
78 -> 73 [label="AST"];
78 -> 74 [label="AST"];
78 -> 69 [label="AST"];
78 -> 76 [label="AST"];
79 -> 66 [label="AST"];
79 -> 67 [label="AST"];
79 -> 62 [label="AST"];
79 -> 78 [label="AST"];
80 -> 81 [label="AST"];
80 -> 79 [label="AST"];
82 -> 83 [label="AST"];
82 -> 60 [label="AST"];
82 -> 80 [label="AST"];
84 -> 85 [label="AST"];
84 -> 86 [label="AST"];
84 -> 87 [label="AST"];
89 -> 90 [label="AST"];
91 -> 92 [label="AST"];
91 -> 93 [label="AST"];
91 -> 94 [label="AST"];
96 -> 97 [label="AST"];
98 -> 99 [label="AST"];
100 -> 95 [label="AST"];
100 -> 96 [label="AST"];
100 -> 91 [label="AST"];
100 -> 98 [label="AST"];
101 -> 88 [label="AST"];
101 -> 89 [label="AST"];
101 -> 84 [label="AST"];
101 -> 100 [label="AST"];
102 -> 103 [label="AST"];
104 -> 105 [label="AST"];
104 -> 102 [label="AST"];
106 -> 107 [label="AST"];
106 -> 101 [label="AST"];
106 -> 104 [label="AST"];
108 -> 109 [label="AST"];
108 -> 82 [label="AST"];
108 -> 106 [label="AST"];
108 -> 133 [label="Control Dep"];
108 -> 132 [label="Control Dep"];
108 -> 110 [label="Control Dep"];
108 -> 118 [label="Control Dep"];
108 -> 116 [label="Control Dep"];
108 -> 120 [label="Control Dep"];
108 -> 122 [label="Control Dep"];
108 -> 124 [label="Control Dep"];
108 -> 131 [label="Control Dep"];
108 -> 126 [label="Control Dep"];
108 -> 129 [label="Control Dep"];
108 -> 141 [label="Control Dep"];
108 -> 148 [label="Control Dep"];
108 -> 151 [label="Control Dep"];
108 -> 154 [label="Control Dep"];
108 -> 157 [label="Control Dep"];
108 -> 161 [label="Control Dep"];
108 -> 164 [label="Control Dep"];
108 -> 165 [label="Control Dep"];
108 -> 167 [label="Control Dep"];
110 -> 111 [label="AST"];
110 -> 112 [label="AST"];
110 -> 113 [label="AST"];
110 -> 114 [label="AST"];
116 -> 117 [label="AST"];
118 -> 119 [label="AST"];
118 -> 116 [label="AST"];
120 -> 121 [label="AST"];
122 -> 123 [label="AST"];
124 -> 125 [label="AST"];
126 -> 127 [label="AST"];
129 -> 130 [label="AST"];
131 -> 128 [label="AST"];
131 -> 129 [label="AST"];
131 -> 126 [label="AST"];
132 -> 115 [label="AST"];
132 -> 118 [label="AST"];
132 -> 110 [label="AST"];
132 -> 120 [label="AST"];
132 -> 122 [label="AST"];
132 -> 124 [label="AST"];
132 -> 131 [label="AST"];
132 -> 137 [label="Action"];
133 -> 132 [label="AST"];
134 -> 108 [label="AST"];
134 -> 133 [label="AST"];
135 -> 36 [label="AST"];
135 -> 50 [label="AST"];
135 -> 134 [label="AST"];
136 -> 1 [label="AST"];
136 -> 0 [label="AST"];
136 -> 2 [label="AST"];
136 -> 4 [label="AST"];
136 -> 6 [label="AST"];
136 -> 8 [label="AST"];
136 -> 135 [label="AST"];
137 -> 167 [label="Action"];
139 -> 138 [label="AST"];
140 -> 139 [label="AST"];
141 -> 140 [label="AST"];
143 -> 142 [label="AST"];
147 -> 146 [label="AST"];
148 -> 143 [label="AST"];
148 -> 144 [label="AST"];
148 -> 145 [label="AST"];
148 -> 147 [label="AST"];
150 -> 149 [label="AST"];
151 -> 150 [label="AST"];
153 -> 152 [label="AST"];
154 -> 153 [label="AST"];
156 -> 155 [label="AST"];
157 -> 156 [label="AST"];
159 -> 158 [label="AST"];
160 -> 159 [label="AST"];
161 -> 160 [label="AST"];
163 -> 162 [label="AST"];
164 -> 163 [label="AST"];
165 -> 166 [label="AST"];
165 -> 161 [label="AST"];
165 -> 164 [label="AST"];
167 -> 168 [label="AST"];
167 -> 141 [label="AST"];
167 -> 148 [label="AST"];
167 -> 151 [label="AST"];
167 -> 154 [label="AST"];
167 -> 157 [label="AST"];
167 -> 165 [label="AST"];
}