digraph "visitToken#?,DetailAST" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@visitToken" shape=ellipse]
2 [label="2:CtParameterImpl@DetailAST aAST" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@DetailAST" shape=ellipse]
4 [label="3:CtExecutableReferenceImpl@isOverridingMethod(<unknown>)" shape=ellipse]
5 [label="3:CtTypeReferenceImpl@boolean" shape=ellipse]
6 [label="3:CtTypeReferenceImpl@null" shape=ellipse]
7 [label="3:CtVirtualElement@isOverridingMethod" shape=ellipse]
8 [label="3:CtTypeAccessImpl@PlaceHold" shape=ellipse]
9 [label="3:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
10 [label="3:CtThisAccessImpl@" shape=ellipse]
11 [label="3:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
12 [label="3:CtVariableReadImpl@aAST" shape=ellipse]
13 [label="3:CtParameterReferenceImpl@aAST" shape=ellipse]
14 [label="3:CtInvocationImpl@isOverridingMethod(aAST)" shape=ellipse]
15 [label="4:CtExecutableReferenceImpl@add(MethodNode)" shape=ellipse]
16 [label="4:CtTypeReferenceImpl@mMethodStack" shape=ellipse]
17 [label="4:CtTypeReferenceImpl@MethodNode" shape=ellipse]
18 [label="4:CtVirtualElement@add" shape=ellipse]
19 [label="4:CtFieldReferenceImpl@mMethodStack" shape=ellipse]
20 [label="4:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
21 [label="4:CtFieldReadImpl@mMethodStack" shape=ellipse]
22 [label="4:CtExecutableReferenceImpl@MethodNode()" shape=ellipse]
23 [label="4:CtTypeReferenceImpl@MethodNode" shape=ellipse]
24 [label="4:CtTypeReferenceImpl@MethodNode" shape=ellipse]
25 [label="4:CtVariableReadImpl@aAST" shape=ellipse]
26 [label="4:CtParameterReferenceImpl@aAST" shape=ellipse]
27 [label="4:CtConstructorCallImpl@new MethodNode(aAST)" shape=ellipse]
28 [label="4:CtInvocationImpl@mMethodStack.add(new MethodNode(aAST))" shape=ellipse]
29 [label="3:CtBlockImpl@\{
    mMethodStack.add(new MethodNode(aAST));
\}" shape=ellipse]
30 [label="5:CtExecutableReferenceImpl@isSuperCall(<unknown>)" shape=ellipse]
31 [label="5:CtTypeReferenceImpl@boolean" shape=ellipse]
32 [label="5:CtTypeReferenceImpl@null" shape=ellipse]
33 [label="5:CtVirtualElement@isSuperCall" shape=ellipse]
34 [label="5:CtTypeAccessImpl@PlaceHold" shape=ellipse]
35 [label="5:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
36 [label="5:CtThisAccessImpl@" shape=ellipse]
37 [label="5:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
38 [label="5:CtVariableReadImpl@aAST" shape=ellipse]
39 [label="5:CtParameterReferenceImpl@aAST" shape=ellipse]
40 [label="5:CtInvocationImpl@isSuperCall(aAST)" shape=ellipse]
41 [label="6:CtTypeReferenceImpl@MethodNode" shape=ellipse]
42 [label="6:CtPackageReferenceImpl@" shape=ellipse]
43 [label="6:CtExecutableReferenceImpl@getLast()" shape=ellipse]
44 [label="6:CtTypeReferenceImpl@mMethodStack" shape=ellipse]
45 [label="6:CtVirtualElement@getLast" shape=ellipse]
46 [label="6:CtFieldReferenceImpl@mMethodStack" shape=ellipse]
47 [label="6:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
48 [label="6:CtFieldReadImpl@mMethodStack" shape=ellipse]
49 [label="6:CtInvocationImpl@((MethodNode) (mMethodStack.getLast()))" shape=ellipse]
50 [label="6:CtTypeReferenceImpl@MethodNode" shape=ellipse]
51 [label="6:CtVirtualElement@methodNode" shape=ellipse]
52 [label="6:CtLocalVariableImpl@final MethodNode methodNode = ((MethodNode) (mMethodStack.getLast()))" shape=ellipse]
53 [label="7:CtExecutableReferenceImpl@setCallsSuper()" shape=ellipse]
54 [label="7:CtTypeReferenceImpl@MethodNode" shape=ellipse]
55 [label="7:CtVirtualElement@setCallsSuper" shape=ellipse]
56 [label="7:CtVariableReadImpl@methodNode" shape=ellipse]
57 [label="7:CtLocalVariableReferenceImpl@methodNode" shape=ellipse]
58 [label="7:CtInvocationImpl@methodNode.setCallsSuper()" shape=ellipse]
59 [label="5:CtBlockImpl@\{
    final MethodNode methodNode = ((MethodNode) (mMethodStack.getLast()));
    methodNode.setCallsSuper();
\}" shape=ellipse]
60 [label="5:CtIfImpl@if (isSuperCall(aAST)) \{
    final MethodNode methodNode = ((MethodNode) (mMethodStack.getLast()));
    methodNode.setCallsSuper();
\}" shape=ellipse]
61 [label="5:CtBlockImpl@
    if (isSuperCall(aAST)) \{
        final MethodNode methodNode = ((MethodNode) (mMethodStack.getLast()));
        methodNode.setCallsSuper();
    \}
" shape=ellipse]
62 [label="3:CtIfImpl@if (isOverridingMethod(aAST)) \{
    mMethodStack.add(new MethodNode(aAST));
\} else if (isSuperCall(aAST)) \{
    final MethodNode methodNode = ((MethodNode) (mMethodStack.getLast()));
    methodNode.setCallsSuper();
\}" shape=ellipse]
63 [label="2:CtBlockImpl@\{
    if (isOverridingMethod(aAST)) \{
        mMethodStack.add(new MethodNode(aAST));
    \} else if (isSuperCall(aAST)) \{
        final MethodNode methodNode = ((MethodNode) (mMethodStack.getLast()));
        methodNode.setCallsSuper();
    \}
\}" shape=ellipse]
64 [label="2:CtMethodImpl@public void visitToken(DetailAST aAST) \{
    if (isOverridingMethod(aAST)) \{
        mMethodStack.add(new MethodNode(aAST));
    \} else if (isSuperCall(aAST)) \{
        final MethodNode methodNode = ((MethodNode) (mMethodStack.getLast()));
        methodNode.setCallsSuper();
    \}
\}" shape=ellipse]
65 [label="6:Delete@DELETE" shape=ellipse]
66 [label="2:Insert@INSERT" shape=ellipse]
67 [label="2:CtPackageReferenceImpl@java.lang" shape=ellipse]
68 [label="2:CtTypeReferenceImpl@Override" shape=ellipse]
69 [label="2:CtPackageReferenceImpl@java.lang" shape=ellipse]
70 [label="2:CtTypeReferenceImpl@Override" shape=ellipse]
71 [label="2:CtAnnotationImpl@@java.lang.Override" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
4 -> 6 [label="AST"];
8 -> 9 [label="AST"];
10 -> 11 [label="AST"];
10 -> 8 [label="AST"];
12 -> 13 [label="AST"];
14 -> 7 [label="AST"];
14 -> 10 [label="AST"];
14 -> 4 [label="AST"];
14 -> 12 [label="AST"];
14 -> 29 [label="Control Dep"];
14 -> 28 [label="Control Dep"];
14 -> 15 [label="Control Dep"];
14 -> 21 [label="Control Dep"];
14 -> 27 [label="Control Dep"];
14 -> 22 [label="Control Dep"];
14 -> 25 [label="Control Dep"];
14 -> 61 [label="Control Dep"];
14 -> 60 [label="Control Dep"];
14 -> 40 [label="Control Dep"];
14 -> 30 [label="Control Dep"];
14 -> 36 [label="Control Dep"];
14 -> 34 [label="Control Dep"];
14 -> 38 [label="Control Dep"];
15 -> 16 [label="AST"];
15 -> 17 [label="AST"];
19 -> 20 [label="AST"];
21 -> 19 [label="AST"];
22 -> 23 [label="AST"];
22 -> 24 [label="AST"];
25 -> 26 [label="AST"];
27 -> 22 [label="AST"];
27 -> 25 [label="AST"];
28 -> 18 [label="AST"];
28 -> 21 [label="AST"];
28 -> 15 [label="AST"];
28 -> 27 [label="AST"];
29 -> 28 [label="AST"];
30 -> 31 [label="AST"];
30 -> 32 [label="AST"];
34 -> 35 [label="AST"];
36 -> 37 [label="AST"];
36 -> 34 [label="AST"];
38 -> 39 [label="AST"];
40 -> 33 [label="AST"];
40 -> 36 [label="AST"];
40 -> 30 [label="AST"];
40 -> 38 [label="AST"];
40 -> 59 [label="Control Dep"];
40 -> 52 [label="Control Dep"];
40 -> 49 [label="Control Dep"];
40 -> 43 [label="Control Dep"];
40 -> 48 [label="Control Dep"];
40 -> 58 [label="Control Dep"];
40 -> 53 [label="Control Dep"];
40 -> 56 [label="Control Dep"];
41 -> 42 [label="AST"];
43 -> 44 [label="AST"];
46 -> 47 [label="AST"];
48 -> 46 [label="AST"];
48 -> 51 [label="Data Dep"];
49 -> 45 [label="AST"];
49 -> 50 [label="AST"];
49 -> 48 [label="AST"];
49 -> 43 [label="AST"];
50 -> 65 [label="Action"];
51 -> 56 [label="Define-Use"];
52 -> 51 [label="AST"];
52 -> 41 [label="AST"];
52 -> 49 [label="AST"];
53 -> 54 [label="AST"];
56 -> 57 [label="AST"];
58 -> 55 [label="AST"];
58 -> 56 [label="AST"];
58 -> 53 [label="AST"];
59 -> 52 [label="AST"];
59 -> 58 [label="AST"];
60 -> 40 [label="AST"];
60 -> 59 [label="AST"];
61 -> 60 [label="AST"];
62 -> 14 [label="AST"];
62 -> 29 [label="AST"];
62 -> 61 [label="AST"];
63 -> 62 [label="AST"];
64 -> 1 [label="AST"];
64 -> 0 [label="AST"];
64 -> 2 [label="AST"];
64 -> 63 [label="AST"];
64 -> 66 [label="Action"];
66 -> 71 [label="Action"];
68 -> 67 [label="AST"];
70 -> 69 [label="AST"];
71 -> 68 [label="AST"];
71 -> 70 [label="AST"];
}