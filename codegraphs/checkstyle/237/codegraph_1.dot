digraph "leaveToken#?,DetailAST" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@leaveToken" shape=ellipse]
2 [label="2:CtParameterImpl@DetailAST aAST" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@DetailAST" shape=ellipse]
4 [label="3:CtExecutableReferenceImpl@isOverridingMethod(<unknown>)" shape=ellipse]
5 [label="3:CtTypeReferenceImpl@boolean" shape=ellipse]
6 [label="3:CtTypeReferenceImpl@null" shape=ellipse]
7 [label="3:CtVirtualElement@isOverridingMethod" shape=ellipse]
8 [label="3:CtTypeAccessImpl@PlaceHold" shape=ellipse]
9 [label="3:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
10 [label="3:CtThisAccessImpl@" shape=ellipse]
11 [label="3:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
12 [label="3:CtVariableReadImpl@aAST" shape=ellipse]
13 [label="3:CtParameterReferenceImpl@aAST" shape=ellipse]
14 [label="3:CtInvocationImpl@isOverridingMethod(aAST)" shape=ellipse]
15 [label="4:CtTypeReferenceImpl@MethodNode" shape=ellipse]
16 [label="4:CtPackageReferenceImpl@" shape=ellipse]
17 [label="4:CtExecutableReferenceImpl@removeLast()" shape=ellipse]
18 [label="4:CtTypeReferenceImpl@mMethodStack" shape=ellipse]
19 [label="4:CtVirtualElement@removeLast" shape=ellipse]
20 [label="4:CtFieldReferenceImpl@mMethodStack" shape=ellipse]
21 [label="4:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
22 [label="4:CtFieldReadImpl@mMethodStack" shape=ellipse]
23 [label="4:CtInvocationImpl@((MethodNode) (mMethodStack.removeLast()))" shape=ellipse]
24 [label="4:CtTypeReferenceImpl@MethodNode" shape=ellipse]
25 [label="4:CtVirtualElement@methodNode" shape=ellipse]
26 [label="4:CtLocalVariableImpl@final MethodNode methodNode = ((MethodNode) (mMethodStack.removeLast()))" shape=ellipse]
27 [label="5:CtExecutableReferenceImpl@getCallsSuper()" shape=ellipse]
28 [label="5:CtTypeReferenceImpl@MethodNode" shape=ellipse]
29 [label="5:CtVirtualElement@getCallsSuper" shape=ellipse]
30 [label="5:CtVariableReadImpl@methodNode" shape=ellipse]
31 [label="5:CtLocalVariableReferenceImpl@methodNode" shape=ellipse]
32 [label="5:CtInvocationImpl@methodNode.getCallsSuper()" shape=ellipse]
33 [label="5:CtUnaryOperatorImpl@!methodNode.getCallsSuper()" shape=ellipse]
34 [label="6:CtTypeReferenceImpl@DetailAST" shape=ellipse]
35 [label="6:CtPackageReferenceImpl@" shape=ellipse]
36 [label="6:CtExecutableReferenceImpl@getMethod()" shape=ellipse]
37 [label="6:CtTypeReferenceImpl@MethodNode" shape=ellipse]
38 [label="6:CtTypeReferenceImpl@DetailAST" shape=ellipse]
39 [label="6:CtVirtualElement@getMethod" shape=ellipse]
40 [label="6:CtVariableReadImpl@methodNode" shape=ellipse]
41 [label="6:CtLocalVariableReferenceImpl@methodNode" shape=ellipse]
42 [label="6:CtInvocationImpl@methodNode.getMethod()" shape=ellipse]
43 [label="6:CtVirtualElement@methodAST" shape=ellipse]
44 [label="6:CtLocalVariableImpl@final DetailAST methodAST = methodNode.getMethod()" shape=ellipse]
45 [label="7:CtTypeReferenceImpl@DetailAST" shape=ellipse]
46 [label="7:CtPackageReferenceImpl@" shape=ellipse]
47 [label="7:CtExecutableReferenceImpl@findFirstToken()" shape=ellipse]
48 [label="7:CtTypeReferenceImpl@DetailAST" shape=ellipse]
49 [label="7:CtTypeReferenceImpl@DetailAST" shape=ellipse]
50 [label="7:CtVirtualElement@findFirstToken" shape=ellipse]
51 [label="7:CtVariableReadImpl@methodAST" shape=ellipse]
52 [label="7:CtLocalVariableReferenceImpl@methodAST" shape=ellipse]
53 [label="7:CtTypeAccessImpl@IDENT" shape=ellipse]
54 [label="7:CtTypeReferenceImpl@IDENT" shape=ellipse]
55 [label="7:CtInvocationImpl@methodAST.findFirstToken(IDENT)" shape=ellipse]
56 [label="7:CtVirtualElement@nameAST" shape=ellipse]
57 [label="7:CtLocalVariableImpl@final DetailAST nameAST = methodAST.findFirstToken(IDENT)" shape=ellipse]
58 [label="8:CtExecutableReferenceImpl@log(<unknown>,<unknown>,java.lang.String,java.lang.Object[])" shape=ellipse]
59 [label="8:CtTypeReferenceImpl@null" shape=ellipse]
60 [label="8:CtTypeReferenceImpl@null" shape=ellipse]
61 [label="8:CtTypeReferenceImpl@String" shape=ellipse]
62 [label="8:CtArrayTypeReferenceImpl@Object[]" shape=ellipse]
63 [label="8:CtVirtualElement@log" shape=ellipse]
64 [label="8:CtTypeAccessImpl@PlaceHold" shape=ellipse]
65 [label="8:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
66 [label="8:CtThisAccessImpl@" shape=ellipse]
67 [label="8:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
68 [label="9:CtExecutableReferenceImpl@getLineNo()" shape=ellipse]
69 [label="9:CtTypeReferenceImpl@DetailAST" shape=ellipse]
70 [label="9:CtVirtualElement@getLineNo" shape=ellipse]
71 [label="9:CtVariableReadImpl@nameAST" shape=ellipse]
72 [label="9:CtLocalVariableReferenceImpl@nameAST" shape=ellipse]
73 [label="9:CtInvocationImpl@nameAST.getLineNo()" shape=ellipse]
74 [label="10:CtExecutableReferenceImpl@getColumnNo()" shape=ellipse]
75 [label="10:CtTypeReferenceImpl@DetailAST" shape=ellipse]
76 [label="10:CtVirtualElement@getColumnNo" shape=ellipse]
77 [label="10:CtVariableReadImpl@nameAST" shape=ellipse]
78 [label="10:CtLocalVariableReferenceImpl@nameAST" shape=ellipse]
79 [label="10:CtInvocationImpl@nameAST.getColumnNo()" shape=ellipse]
80 [label="11:CtLiteralImpl@\"missing.super.call\"" shape=ellipse]
81 [label="11:CtTypeReferenceImpl@String" shape=ellipse]
82 [label="12:CtNewArrayImpl@new Object[]\{ nameAST.getText() \}" shape=ellipse]
83 [label="12:CtArrayTypeReferenceImpl@Object[]" shape=ellipse]
84 [label="12:CtInvocationImpl@nameAST.getText()" shape=ellipse]
85 [label="8:CtInvocationImpl@log(nameAST.getLineNo(), nameAST.getColumnNo(), \"missing.super.call\", new Object[]\{ nameAST.getText() \})" shape=ellipse]
86 [label="5:CtBlockImpl@\{
    final DetailAST methodAST = methodNode.getMethod();
    final DetailAST nameAST = methodAST.findFirstToken(IDENT);
    log(nameAST.getLineNo(), nameAST.getColumnNo(), \"missing.super.call\", new Object[]\{ nameAST.getText() \});
\}" shape=ellipse]
87 [label="5:CtIfImpl@if (!methodNode.getCallsSuper()) \{
    final DetailAST methodAST = methodNode.getMethod();
    final DetailAST nameAST = methodAST.findFirstToken(IDENT);
    log(nameAST.getLineNo(), nameAST.getColumnNo(), \"missing.super.call\", new Object[]\{ nameAST.getText() \});
\}" shape=ellipse]
88 [label="3:CtBlockImpl@\{
    final MethodNode methodNode = ((MethodNode) (mMethodStack.removeLast()));
    if (!methodNode.getCallsSuper()) \{
        final DetailAST methodAST = methodNode.getMethod();
        final DetailAST nameAST = methodAST.findFirstToken(IDENT);
        log(nameAST.getLineNo(), nameAST.getColumnNo(), \"missing.super.call\", new Object[]\{ nameAST.getText() \});
    \}
\}" shape=ellipse]
89 [label="3:CtIfImpl@if (isOverridingMethod(aAST)) \{
    final MethodNode methodNode = ((MethodNode) (mMethodStack.removeLast()));
    if (!methodNode.getCallsSuper()) \{
        final DetailAST methodAST = methodNode.getMethod();
        final DetailAST nameAST = methodAST.findFirstToken(IDENT);
        log(nameAST.getLineNo(), nameAST.getColumnNo(), \"missing.super.call\", new Object[]\{ nameAST.getText() \});
    \}
\}" shape=ellipse]
90 [label="2:CtBlockImpl@\{
    if (isOverridingMethod(aAST)) \{
        final MethodNode methodNode = ((MethodNode) (mMethodStack.removeLast()));
        if (!methodNode.getCallsSuper()) \{
            final DetailAST methodAST = methodNode.getMethod();
            final DetailAST nameAST = methodAST.findFirstToken(IDENT);
            log(nameAST.getLineNo(), nameAST.getColumnNo(), \"missing.super.call\", new Object[]\{ nameAST.getText() \});
        \}
    \}
\}" shape=ellipse]
91 [label="2:CtMethodImpl@public void leaveToken(DetailAST aAST) \{
    if (isOverridingMethod(aAST)) \{
        final MethodNode methodNode = ((MethodNode) (mMethodStack.removeLast()));
        if (!methodNode.getCallsSuper()) \{
            final DetailAST methodAST = methodNode.getMethod();
            final DetailAST nameAST = methodAST.findFirstToken(IDENT);
            log(nameAST.getLineNo(), nameAST.getColumnNo(), \"missing.super.call\", new Object[]\{ nameAST.getText() \});
        \}
    \}
\}" shape=ellipse]
92 [label="4:Delete@DELETE" shape=ellipse]
93 [label="2:Insert@INSERT" shape=ellipse]
94 [label="2:CtPackageReferenceImpl@java.lang" shape=ellipse]
95 [label="2:CtTypeReferenceImpl@Override" shape=ellipse]
96 [label="2:CtPackageReferenceImpl@java.lang" shape=ellipse]
97 [label="2:CtTypeReferenceImpl@Override" shape=ellipse]
98 [label="2:CtAnnotationImpl@@java.lang.Override" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
4 -> 6 [label="AST"];
8 -> 9 [label="AST"];
10 -> 11 [label="AST"];
10 -> 8 [label="AST"];
12 -> 13 [label="AST"];
14 -> 7 [label="AST"];
14 -> 10 [label="AST"];
14 -> 4 [label="AST"];
14 -> 12 [label="AST"];
14 -> 88 [label="Control Dep"];
14 -> 26 [label="Control Dep"];
14 -> 23 [label="Control Dep"];
14 -> 17 [label="Control Dep"];
14 -> 22 [label="Control Dep"];
14 -> 87 [label="Control Dep"];
14 -> 33 [label="Control Dep"];
14 -> 32 [label="Control Dep"];
14 -> 27 [label="Control Dep"];
14 -> 30 [label="Control Dep"];
15 -> 16 [label="AST"];
17 -> 18 [label="AST"];
20 -> 21 [label="AST"];
22 -> 20 [label="AST"];
22 -> 25 [label="Data Dep"];
23 -> 19 [label="AST"];
23 -> 24 [label="AST"];
23 -> 22 [label="AST"];
23 -> 17 [label="AST"];
24 -> 92 [label="Action"];
25 -> 30 [label="Define-Use"];
25 -> 40 [label="Define-Use"];
26 -> 25 [label="AST"];
26 -> 15 [label="AST"];
26 -> 23 [label="AST"];
27 -> 28 [label="AST"];
30 -> 31 [label="AST"];
32 -> 29 [label="AST"];
32 -> 30 [label="AST"];
32 -> 27 [label="AST"];
33 -> 32 [label="AST"];
33 -> 86 [label="Control Dep"];
33 -> 44 [label="Control Dep"];
33 -> 42 [label="Control Dep"];
33 -> 36 [label="Control Dep"];
33 -> 40 [label="Control Dep"];
33 -> 57 [label="Control Dep"];
33 -> 55 [label="Control Dep"];
33 -> 47 [label="Control Dep"];
33 -> 51 [label="Control Dep"];
33 -> 53 [label="Control Dep"];
33 -> 85 [label="Control Dep"];
33 -> 58 [label="Control Dep"];
33 -> 66 [label="Control Dep"];
33 -> 64 [label="Control Dep"];
33 -> 73 [label="Control Dep"];
33 -> 68 [label="Control Dep"];
33 -> 71 [label="Control Dep"];
33 -> 79 [label="Control Dep"];
33 -> 74 [label="Control Dep"];
33 -> 77 [label="Control Dep"];
33 -> 80 [label="Control Dep"];
33 -> 82 [label="Control Dep"];
34 -> 35 [label="AST"];
36 -> 37 [label="AST"];
36 -> 38 [label="AST"];
40 -> 41 [label="AST"];
40 -> 43 [label="Data Dep"];
42 -> 39 [label="AST"];
42 -> 40 [label="AST"];
42 -> 36 [label="AST"];
43 -> 51 [label="Define-Use"];
44 -> 43 [label="AST"];
44 -> 34 [label="AST"];
44 -> 42 [label="AST"];
45 -> 46 [label="AST"];
47 -> 48 [label="AST"];
47 -> 49 [label="AST"];
51 -> 52 [label="AST"];
51 -> 56 [label="Data Dep"];
53 -> 54 [label="AST"];
55 -> 50 [label="AST"];
55 -> 51 [label="AST"];
55 -> 47 [label="AST"];
55 -> 53 [label="AST"];
56 -> 71 [label="Define-Use"];
56 -> 77 [label="Define-Use"];
57 -> 56 [label="AST"];
57 -> 45 [label="AST"];
57 -> 55 [label="AST"];
58 -> 59 [label="AST"];
58 -> 60 [label="AST"];
58 -> 61 [label="AST"];
58 -> 62 [label="AST"];
64 -> 65 [label="AST"];
66 -> 67 [label="AST"];
66 -> 64 [label="AST"];
68 -> 69 [label="AST"];
71 -> 72 [label="AST"];
73 -> 70 [label="AST"];
73 -> 71 [label="AST"];
73 -> 68 [label="AST"];
74 -> 75 [label="AST"];
77 -> 78 [label="AST"];
79 -> 76 [label="AST"];
79 -> 77 [label="AST"];
79 -> 74 [label="AST"];
80 -> 81 [label="AST"];
82 -> 83 [label="AST"];
82 -> 84 [label="AST"];
85 -> 63 [label="AST"];
85 -> 66 [label="AST"];
85 -> 58 [label="AST"];
85 -> 73 [label="AST"];
85 -> 79 [label="AST"];
85 -> 80 [label="AST"];
85 -> 82 [label="AST"];
86 -> 44 [label="AST"];
86 -> 57 [label="AST"];
86 -> 85 [label="AST"];
87 -> 33 [label="AST"];
87 -> 86 [label="AST"];
88 -> 26 [label="AST"];
88 -> 87 [label="AST"];
89 -> 14 [label="AST"];
89 -> 88 [label="AST"];
90 -> 89 [label="AST"];
91 -> 1 [label="AST"];
91 -> 0 [label="AST"];
91 -> 2 [label="AST"];
91 -> 90 [label="AST"];
91 -> 93 [label="Action"];
93 -> 98 [label="Action"];
95 -> 94 [label="AST"];
97 -> 96 [label="AST"];
98 -> 95 [label="AST"];
98 -> 97 [label="AST"];
}