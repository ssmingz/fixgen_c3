digraph "checkIndentation#?" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@checkIndentation" shape=ellipse]
2 [label="3:CtTypeReferenceImpl@DetailAST" shape=ellipse]
3 [label="3:CtPackageReferenceImpl@" shape=ellipse]
4 [label="3:CtExecutableReferenceImpl@getFirstChild()" shape=ellipse]
5 [label="3:CtVirtualElement@getFirstChild" shape=ellipse]
6 [label="3:CtExecutableReferenceImpl@getMainAst()" shape=ellipse]
7 [label="3:CtVirtualElement@getMainAst" shape=ellipse]
8 [label="3:CtTypeAccessImpl@PlaceHold" shape=ellipse]
9 [label="3:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
10 [label="3:CtThisAccessImpl@" shape=ellipse]
11 [label="3:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
12 [label="3:CtInvocationImpl@getMainAst()" shape=ellipse]
13 [label="3:CtInvocationImpl@((DetailAST) (getMainAst().getFirstChild()))" shape=ellipse]
14 [label="3:CtTypeReferenceImpl@DetailAST" shape=ellipse]
15 [label="3:CtVirtualElement@methodName" shape=ellipse]
16 [label="3:CtLocalVariableImpl@DetailAST methodName = ((DetailAST) (getMainAst().getFirstChild()))" shape=ellipse]
17 [label="4:CtExecutableReferenceImpl@checkExpressionSubtree(<unknown>,<unknown>,boolean,boolean)" shape=ellipse]
18 [label="4:CtTypeReferenceImpl@null" shape=ellipse]
19 [label="4:CtTypeReferenceImpl@null" shape=ellipse]
20 [label="4:CtTypeReferenceImpl@boolean" shape=ellipse]
21 [label="4:CtTypeReferenceImpl@boolean" shape=ellipse]
22 [label="4:CtVirtualElement@checkExpressionSubtree" shape=ellipse]
23 [label="4:CtTypeAccessImpl@PlaceHold" shape=ellipse]
24 [label="4:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
25 [label="4:CtThisAccessImpl@" shape=ellipse]
26 [label="4:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
27 [label="4:CtVariableReadImpl@methodName" shape=ellipse]
28 [label="4:CtLocalVariableReferenceImpl@methodName" shape=ellipse]
29 [label="4:CtExecutableReferenceImpl@getLevel()" shape=ellipse]
30 [label="4:CtVirtualElement@getLevel" shape=ellipse]
31 [label="4:CtTypeAccessImpl@PlaceHold" shape=ellipse]
32 [label="4:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
33 [label="4:CtThisAccessImpl@" shape=ellipse]
34 [label="4:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
35 [label="4:CtInvocationImpl@getLevel()" shape=ellipse]
36 [label="4:CtLiteralImpl@false" shape=ellipse]
37 [label="4:CtTypeReferenceImpl@boolean" shape=ellipse]
38 [label="4:CtLiteralImpl@false" shape=ellipse]
39 [label="4:CtTypeReferenceImpl@boolean" shape=ellipse]
40 [label="4:CtInvocationImpl@checkExpressionSubtree(methodName, getLevel(), false, false)" shape=ellipse]
41 [label="5:CtExecutableReferenceImpl@checkLParen()" shape=ellipse]
42 [label="5:CtVirtualElement@checkLParen" shape=ellipse]
43 [label="5:CtTypeAccessImpl@PlaceHold" shape=ellipse]
44 [label="5:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
45 [label="5:CtThisAccessImpl@" shape=ellipse]
46 [label="5:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
47 [label="5:CtInvocationImpl@checkLParen()" shape=ellipse]
48 [label="6:CtTypeReferenceImpl@DetailAST" shape=ellipse]
49 [label="6:CtPackageReferenceImpl@" shape=ellipse]
50 [label="6:CtExecutableReferenceImpl@findFirstToken()" shape=ellipse]
51 [label="6:CtTypeReferenceImpl@DetailAST" shape=ellipse]
52 [label="6:CtVirtualElement@findFirstToken" shape=ellipse]
53 [label="6:CtExecutableReferenceImpl@getMainAst()" shape=ellipse]
54 [label="6:CtVirtualElement@getMainAst" shape=ellipse]
55 [label="6:CtTypeAccessImpl@PlaceHold" shape=ellipse]
56 [label="6:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
57 [label="6:CtThisAccessImpl@" shape=ellipse]
58 [label="6:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
59 [label="6:CtInvocationImpl@getMainAst()" shape=ellipse]
60 [label="6:CtTypeAccessImpl@RPAREN" shape=ellipse]
61 [label="6:CtTypeReferenceImpl@RPAREN" shape=ellipse]
62 [label="6:CtInvocationImpl@getMainAst().findFirstToken(RPAREN)" shape=ellipse]
63 [label="6:CtVirtualElement@rparen" shape=ellipse]
64 [label="6:CtLocalVariableImpl@DetailAST rparen = getMainAst().findFirstToken(RPAREN)" shape=ellipse]
65 [label="7:CtTypeReferenceImpl@DetailAST" shape=ellipse]
66 [label="7:CtPackageReferenceImpl@" shape=ellipse]
67 [label="7:CtExecutableReferenceImpl@getMainAst()" shape=ellipse]
68 [label="7:CtTypeReferenceImpl@DetailAST" shape=ellipse]
69 [label="7:CtVirtualElement@getMainAst" shape=ellipse]
70 [label="7:CtTypeAccessImpl@PlaceHold" shape=ellipse]
71 [label="7:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
72 [label="7:CtThisAccessImpl@" shape=ellipse]
73 [label="7:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
74 [label="7:CtInvocationImpl@getMainAst()" shape=ellipse]
75 [label="7:CtVirtualElement@lparen" shape=ellipse]
76 [label="7:CtLocalVariableImpl@DetailAST lparen = getMainAst()" shape=ellipse]
77 [label="8:CtExecutableReferenceImpl@getLineNo()" shape=ellipse]
78 [label="8:CtTypeReferenceImpl@DetailAST" shape=ellipse]
79 [label="8:CtVirtualElement@getLineNo" shape=ellipse]
80 [label="8:CtVariableReadImpl@rparen" shape=ellipse]
81 [label="8:CtLocalVariableReferenceImpl@rparen" shape=ellipse]
82 [label="8:CtInvocationImpl@rparen.getLineNo()" shape=ellipse]
83 [label="8:CtExecutableReferenceImpl@getLineNo()" shape=ellipse]
84 [label="8:CtTypeReferenceImpl@DetailAST" shape=ellipse]
85 [label="8:CtVirtualElement@getLineNo" shape=ellipse]
86 [label="8:CtVariableReadImpl@lparen" shape=ellipse]
87 [label="8:CtLocalVariableReferenceImpl@lparen" shape=ellipse]
88 [label="8:CtInvocationImpl@lparen.getLineNo()" shape=ellipse]
89 [label="8:CtBinaryOperatorImpl@rparen.getLineNo() != lparen.getLineNo()" shape=ellipse]
90 [label="9:CtExecutableReferenceImpl@checkExpressionSubtree(<unknown>,<unknown>,boolean,boolean)" shape=ellipse]
91 [label="9:CtTypeReferenceImpl@null" shape=ellipse]
92 [label="9:CtTypeReferenceImpl@null" shape=ellipse]
93 [label="9:CtTypeReferenceImpl@boolean" shape=ellipse]
94 [label="9:CtTypeReferenceImpl@boolean" shape=ellipse]
95 [label="9:CtVirtualElement@checkExpressionSubtree" shape=ellipse]
96 [label="9:CtTypeAccessImpl@PlaceHold" shape=ellipse]
97 [label="9:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
98 [label="9:CtThisAccessImpl@" shape=ellipse]
99 [label="9:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
100 [label="10:CtExecutableReferenceImpl@findFirstToken()" shape=ellipse]
101 [label="10:CtVirtualElement@findFirstToken" shape=ellipse]
102 [label="10:CtExecutableReferenceImpl@getMainAst()" shape=ellipse]
103 [label="10:CtVirtualElement@getMainAst" shape=ellipse]
104 [label="10:CtTypeAccessImpl@PlaceHold" shape=ellipse]
105 [label="10:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
106 [label="10:CtThisAccessImpl@" shape=ellipse]
107 [label="10:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
108 [label="10:CtInvocationImpl@getMainAst()" shape=ellipse]
109 [label="10:CtTypeAccessImpl@ELIST" shape=ellipse]
110 [label="10:CtTypeReferenceImpl@ELIST" shape=ellipse]
111 [label="10:CtInvocationImpl@getMainAst().findFirstToken(ELIST)" shape=ellipse]
112 [label="11:CtExecutableReferenceImpl@getLevel()" shape=ellipse]
113 [label="11:CtVirtualElement@getLevel" shape=ellipse]
114 [label="11:CtTypeAccessImpl@PlaceHold" shape=ellipse]
115 [label="11:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
116 [label="11:CtThisAccessImpl@" shape=ellipse]
117 [label="11:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
118 [label="11:CtInvocationImpl@getLevel()" shape=ellipse]
119 [label="11:CtExecutableReferenceImpl@getIndentationAmount()" shape=ellipse]
120 [label="11:CtVirtualElement@getIndentationAmount" shape=ellipse]
121 [label="11:CtExecutableReferenceImpl@getIndentCheck()" shape=ellipse]
122 [label="11:CtVirtualElement@getIndentCheck" shape=ellipse]
123 [label="11:CtTypeAccessImpl@PlaceHold" shape=ellipse]
124 [label="11:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
125 [label="11:CtThisAccessImpl@" shape=ellipse]
126 [label="11:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
127 [label="11:CtInvocationImpl@getIndentCheck()" shape=ellipse]
128 [label="11:CtInvocationImpl@getIndentCheck().getIndentationAmount()" shape=ellipse]
129 [label="11:CtBinaryOperatorImpl@getLevel() + getIndentCheck().getIndentationAmount()" shape=ellipse]
130 [label="12:CtLiteralImpl@false" shape=ellipse]
131 [label="12:CtTypeReferenceImpl@boolean" shape=ellipse]
132 [label="13:CtLiteralImpl@true" shape=ellipse]
133 [label="13:CtTypeReferenceImpl@boolean" shape=ellipse]
134 [label="9:CtInvocationImpl@checkExpressionSubtree(getMainAst().findFirstToken(ELIST), getLevel() + getIndentCheck().getIndentationAmount(), false, true)" shape=ellipse]
135 [label="14:CtExecutableReferenceImpl@checkRParen()" shape=ellipse]
136 [label="14:CtVirtualElement@checkRParen" shape=ellipse]
137 [label="14:CtTypeAccessImpl@PlaceHold" shape=ellipse]
138 [label="14:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
139 [label="14:CtThisAccessImpl@" shape=ellipse]
140 [label="14:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
141 [label="14:CtInvocationImpl@checkRParen()" shape=ellipse]
142 [label="8:CtBlockImpl@\{
    checkExpressionSubtree(getMainAst().findFirstToken(ELIST), getLevel() + getIndentCheck().getIndentationAmount(), false, true);
    checkRParen();
\}" shape=ellipse]
143 [label="8:CtIfImpl@if (rparen.getLineNo() != lparen.getLineNo()) \{
    checkExpressionSubtree(getMainAst().findFirstToken(ELIST), getLevel() + getIndentCheck().getIndentationAmount(), false, true);
    checkRParen();
\}" shape=ellipse]
144 [label="2:CtBlockImpl@\{
    DetailAST methodName = ((DetailAST) (getMainAst().getFirstChild()));
    checkExpressionSubtree(methodName, getLevel(), false, false);
    checkLParen();
    DetailAST rparen = getMainAst().findFirstToken(RPAREN);
    DetailAST lparen = getMainAst();
    if (rparen.getLineNo() != lparen.getLineNo()) \{
        checkExpressionSubtree(getMainAst().findFirstToken(ELIST), getLevel() + getIndentCheck().getIndentationAmount(), false, true);
        checkRParen();
    \}
\}" shape=ellipse]
145 [label="2:CtMethodImpl@public void checkIndentation() \{
    DetailAST methodName = ((DetailAST) (getMainAst().getFirstChild()));
    checkExpressionSubtree(methodName, getLevel(), false, false);
    checkLParen();
    DetailAST rparen = getMainAst().findFirstToken(RPAREN);
    DetailAST lparen = getMainAst();
    if (rparen.getLineNo() != lparen.getLineNo()) \{
        checkExpressionSubtree(getMainAst().findFirstToken(ELIST), getLevel() + getIndentCheck().getIndentationAmount(), false, true);
        checkRParen();
    \}
\}" shape=ellipse]
146 [label="11:Update@UPDATE" shape=ellipse]
147 [label="11:CtPackageReferenceImpl@" shape=ellipse]
148 [label="11:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
149 [label="11:CtPackageReferenceImpl@" shape=ellipse]
150 [label="11:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
151 [label="11:CtTypeAccessImpl@PlaceHold" shape=ellipse]
152 [label="11:CtThisAccessImpl@" shape=ellipse]
153 [label="11:CtExecutableReferenceImpl@getIndentCheck()" shape=ellipse]
154 [label="11:CtInvocationImpl@getIndentCheck()" shape=ellipse]
155 [label="11:CtVirtualElement@getIndentCheck" shape=ellipse]
156 [label="11:CtExecutableReferenceImpl@getBasicOffset()" shape=ellipse]
157 [label="11:CtInvocationImpl@getIndentCheck().getBasicOffset()" shape=ellipse]
158 [label="11:CtVirtualElement@getBasicOffset" shape=ellipse]
2 -> 3 [label="AST"];
8 -> 9 [label="AST"];
10 -> 11 [label="AST"];
10 -> 8 [label="AST"];
10 -> 15 [label="Data Dep"];
12 -> 7 [label="AST"];
12 -> 10 [label="AST"];
12 -> 6 [label="AST"];
13 -> 5 [label="AST"];
13 -> 14 [label="AST"];
13 -> 12 [label="AST"];
13 -> 4 [label="AST"];
15 -> 27 [label="Define-Use"];
16 -> 15 [label="AST"];
16 -> 2 [label="AST"];
16 -> 13 [label="AST"];
17 -> 18 [label="AST"];
17 -> 19 [label="AST"];
17 -> 20 [label="AST"];
17 -> 21 [label="AST"];
23 -> 24 [label="AST"];
25 -> 26 [label="AST"];
25 -> 23 [label="AST"];
27 -> 28 [label="AST"];
31 -> 32 [label="AST"];
33 -> 34 [label="AST"];
33 -> 31 [label="AST"];
35 -> 30 [label="AST"];
35 -> 33 [label="AST"];
35 -> 29 [label="AST"];
36 -> 37 [label="AST"];
38 -> 39 [label="AST"];
40 -> 22 [label="AST"];
40 -> 25 [label="AST"];
40 -> 17 [label="AST"];
40 -> 27 [label="AST"];
40 -> 35 [label="AST"];
40 -> 36 [label="AST"];
40 -> 38 [label="AST"];
43 -> 44 [label="AST"];
45 -> 46 [label="AST"];
45 -> 43 [label="AST"];
47 -> 42 [label="AST"];
47 -> 45 [label="AST"];
47 -> 41 [label="AST"];
48 -> 49 [label="AST"];
50 -> 51 [label="AST"];
55 -> 56 [label="AST"];
57 -> 58 [label="AST"];
57 -> 55 [label="AST"];
57 -> 63 [label="Data Dep"];
59 -> 54 [label="AST"];
59 -> 57 [label="AST"];
59 -> 53 [label="AST"];
60 -> 61 [label="AST"];
62 -> 52 [label="AST"];
62 -> 59 [label="AST"];
62 -> 50 [label="AST"];
62 -> 60 [label="AST"];
63 -> 80 [label="Define-Use"];
64 -> 63 [label="AST"];
64 -> 48 [label="AST"];
64 -> 62 [label="AST"];
65 -> 66 [label="AST"];
67 -> 68 [label="AST"];
70 -> 71 [label="AST"];
72 -> 73 [label="AST"];
72 -> 70 [label="AST"];
72 -> 75 [label="Data Dep"];
74 -> 69 [label="AST"];
74 -> 72 [label="AST"];
74 -> 67 [label="AST"];
75 -> 86 [label="Define-Use"];
76 -> 75 [label="AST"];
76 -> 65 [label="AST"];
76 -> 74 [label="AST"];
77 -> 78 [label="AST"];
80 -> 81 [label="AST"];
82 -> 79 [label="AST"];
82 -> 80 [label="AST"];
82 -> 77 [label="AST"];
83 -> 84 [label="AST"];
86 -> 87 [label="AST"];
88 -> 85 [label="AST"];
88 -> 86 [label="AST"];
88 -> 83 [label="AST"];
89 -> 82 [label="AST"];
89 -> 88 [label="AST"];
89 -> 142 [label="Control Dep"];
89 -> 134 [label="Control Dep"];
89 -> 90 [label="Control Dep"];
89 -> 98 [label="Control Dep"];
89 -> 96 [label="Control Dep"];
89 -> 111 [label="Control Dep"];
89 -> 100 [label="Control Dep"];
89 -> 108 [label="Control Dep"];
89 -> 102 [label="Control Dep"];
89 -> 106 [label="Control Dep"];
89 -> 104 [label="Control Dep"];
89 -> 109 [label="Control Dep"];
89 -> 129 [label="Control Dep"];
89 -> 118 [label="Control Dep"];
89 -> 112 [label="Control Dep"];
89 -> 116 [label="Control Dep"];
89 -> 114 [label="Control Dep"];
89 -> 128 [label="Control Dep"];
89 -> 119 [label="Control Dep"];
89 -> 127 [label="Control Dep"];
89 -> 121 [label="Control Dep"];
89 -> 125 [label="Control Dep"];
89 -> 123 [label="Control Dep"];
89 -> 130 [label="Control Dep"];
89 -> 132 [label="Control Dep"];
89 -> 141 [label="Control Dep"];
89 -> 135 [label="Control Dep"];
89 -> 139 [label="Control Dep"];
89 -> 137 [label="Control Dep"];
89 -> 151 [label="Control Dep"];
89 -> 152 [label="Control Dep"];
89 -> 153 [label="Control Dep"];
89 -> 154 [label="Control Dep"];
89 -> 156 [label="Control Dep"];
89 -> 157 [label="Control Dep"];
90 -> 91 [label="AST"];
90 -> 92 [label="AST"];
90 -> 93 [label="AST"];
90 -> 94 [label="AST"];
96 -> 97 [label="AST"];
98 -> 99 [label="AST"];
98 -> 96 [label="AST"];
104 -> 105 [label="AST"];
106 -> 107 [label="AST"];
106 -> 104 [label="AST"];
108 -> 103 [label="AST"];
108 -> 106 [label="AST"];
108 -> 102 [label="AST"];
109 -> 110 [label="AST"];
111 -> 101 [label="AST"];
111 -> 108 [label="AST"];
111 -> 100 [label="AST"];
111 -> 109 [label="AST"];
114 -> 115 [label="AST"];
116 -> 117 [label="AST"];
116 -> 114 [label="AST"];
118 -> 113 [label="AST"];
118 -> 116 [label="AST"];
118 -> 112 [label="AST"];
123 -> 124 [label="AST"];
125 -> 126 [label="AST"];
125 -> 123 [label="AST"];
127 -> 122 [label="AST"];
127 -> 125 [label="AST"];
127 -> 121 [label="AST"];
128 -> 120 [label="AST"];
128 -> 127 [label="AST"];
128 -> 119 [label="AST"];
128 -> 146 [label="Action"];
129 -> 118 [label="AST"];
129 -> 128 [label="AST"];
130 -> 131 [label="AST"];
132 -> 133 [label="AST"];
134 -> 95 [label="AST"];
134 -> 98 [label="AST"];
134 -> 90 [label="AST"];
134 -> 111 [label="AST"];
134 -> 129 [label="AST"];
134 -> 130 [label="AST"];
134 -> 132 [label="AST"];
137 -> 138 [label="AST"];
139 -> 140 [label="AST"];
139 -> 137 [label="AST"];
141 -> 136 [label="AST"];
141 -> 139 [label="AST"];
141 -> 135 [label="AST"];
142 -> 134 [label="AST"];
142 -> 141 [label="AST"];
143 -> 89 [label="AST"];
143 -> 142 [label="AST"];
144 -> 16 [label="AST"];
144 -> 40 [label="AST"];
144 -> 47 [label="AST"];
144 -> 64 [label="AST"];
144 -> 76 [label="AST"];
144 -> 143 [label="AST"];
145 -> 1 [label="AST"];
145 -> 0 [label="AST"];
145 -> 144 [label="AST"];
146 -> 157 [label="Action"];
148 -> 147 [label="AST"];
150 -> 149 [label="AST"];
151 -> 150 [label="AST"];
152 -> 148 [label="AST"];
152 -> 151 [label="AST"];
154 -> 155 [label="AST"];
154 -> 152 [label="AST"];
154 -> 153 [label="AST"];
157 -> 158 [label="AST"];
157 -> 154 [label="AST"];
157 -> 156 [label="AST"];
}