digraph "suggestedChildLevel#?,ExpressionHandler" {
0 [label="2:CtTypeReferenceImpl@int" shape=ellipse]
1 [label="2:CtVirtualElement@suggestedChildLevel" shape=ellipse]
2 [label="2:CtParameterImpl@ExpressionHandler aChild" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@ExpressionHandler" shape=ellipse]
4 [label="3:CtTypeReferenceImpl@DetailAST" shape=ellipse]
5 [label="3:CtPackageReferenceImpl@" shape=ellipse]
6 [label="3:CtExecutableReferenceImpl@getFirstChild()" shape=ellipse]
7 [label="3:CtVirtualElement@getFirstChild" shape=ellipse]
8 [label="3:CtExecutableReferenceImpl@getMainAst()" shape=ellipse]
9 [label="3:CtVirtualElement@getMainAst" shape=ellipse]
10 [label="3:CtTypeAccessImpl@PlaceHold" shape=ellipse]
11 [label="3:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
12 [label="3:CtThisAccessImpl@" shape=ellipse]
13 [label="3:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
14 [label="3:CtInvocationImpl@getMainAst()" shape=ellipse]
15 [label="3:CtInvocationImpl@((DetailAST) (getMainAst().getFirstChild()))" shape=ellipse]
16 [label="3:CtTypeReferenceImpl@DetailAST" shape=ellipse]
17 [label="3:CtVirtualElement@first" shape=ellipse]
18 [label="3:CtLocalVariableImpl@DetailAST first = ((DetailAST) (getMainAst().getFirstChild()))" shape=ellipse]
19 [label="4:CtTypeReferenceImpl@int" shape=ellipse]
20 [label="4:CtExecutableReferenceImpl@getLineStart(<unknown>)" shape=ellipse]
21 [label="4:CtTypeReferenceImpl@int" shape=ellipse]
22 [label="4:CtTypeReferenceImpl@null" shape=ellipse]
23 [label="4:CtVirtualElement@getLineStart" shape=ellipse]
24 [label="4:CtTypeAccessImpl@PlaceHold" shape=ellipse]
25 [label="4:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
26 [label="4:CtThisAccessImpl@" shape=ellipse]
27 [label="4:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
28 [label="4:CtVariableReadImpl@first" shape=ellipse]
29 [label="4:CtLocalVariableReferenceImpl@first" shape=ellipse]
30 [label="4:CtInvocationImpl@getLineStart(first)" shape=ellipse]
31 [label="4:CtVirtualElement@indentLevel" shape=ellipse]
32 [label="4:CtLocalVariableImpl@int indentLevel = getLineStart(first)" shape=ellipse]
33 [label="5:CtVariableReadImpl@aChild" shape=ellipse]
34 [label="5:CtParameterReferenceImpl@aChild" shape=ellipse]
35 [label="5:CtTypeAccessImpl@MethodCallHandler" shape=ellipse]
36 [label="5:CtTypeReferenceImpl@MethodCallHandler" shape=ellipse]
37 [label="5:CtBinaryOperatorImpl@aChild instanceof MethodCallHandler" shape=ellipse]
38 [label="6:CtExecutableReferenceImpl@areOnSameLine(DetailAST,DetailAST)" shape=ellipse]
39 [label="6:CtTypeReferenceImpl@DetailAST" shape=ellipse]
40 [label="6:CtTypeReferenceImpl@DetailAST" shape=ellipse]
41 [label="6:CtVirtualElement@areOnSameLine" shape=ellipse]
42 [label="6:CtTypeAccessImpl@PlaceHold" shape=ellipse]
43 [label="6:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
44 [label="6:CtThisAccessImpl@" shape=ellipse]
45 [label="6:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
46 [label="7:CtExecutableReferenceImpl@getFirstChild()" shape=ellipse]
47 [label="7:CtVirtualElement@getFirstChild" shape=ellipse]
48 [label="7:CtExecutableReferenceImpl@getMainAst()" shape=ellipse]
49 [label="7:CtTypeReferenceImpl@ExpressionHandler" shape=ellipse]
50 [label="7:CtVirtualElement@getMainAst" shape=ellipse]
51 [label="7:CtVariableReadImpl@aChild" shape=ellipse]
52 [label="7:CtParameterReferenceImpl@aChild" shape=ellipse]
53 [label="7:CtInvocationImpl@aChild.getMainAst()" shape=ellipse]
54 [label="7:CtInvocationImpl@((DetailAST) (aChild.getMainAst().getFirstChild()))" shape=ellipse]
55 [label="7:CtTypeReferenceImpl@DetailAST" shape=ellipse]
56 [label="8:CtExecutableReferenceImpl@getFirstChild()" shape=ellipse]
57 [label="8:CtVirtualElement@getFirstChild" shape=ellipse]
58 [label="8:CtExecutableReferenceImpl@getMainAst()" shape=ellipse]
59 [label="8:CtVirtualElement@getMainAst" shape=ellipse]
60 [label="8:CtTypeAccessImpl@PlaceHold" shape=ellipse]
61 [label="8:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
62 [label="8:CtThisAccessImpl@" shape=ellipse]
63 [label="8:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
64 [label="8:CtInvocationImpl@getMainAst()" shape=ellipse]
65 [label="8:CtInvocationImpl@((DetailAST) (getMainAst().getFirstChild()))" shape=ellipse]
66 [label="8:CtTypeReferenceImpl@DetailAST" shape=ellipse]
67 [label="6:CtInvocationImpl@areOnSameLine(((DetailAST) (aChild.getMainAst().getFirstChild())), ((DetailAST) (getMainAst().getFirstChild())))" shape=ellipse]
68 [label="6:CtUnaryOperatorImpl@!areOnSameLine(((DetailAST) (aChild.getMainAst().getFirstChild())), ((DetailAST) (getMainAst().getFirstChild())))" shape=ellipse]
69 [label="9:CtVariableWriteImpl@indentLevel" shape=ellipse]
70 [label="9:CtLocalVariableReferenceImpl@indentLevel" shape=ellipse]
71 [label="9:CtExecutableReferenceImpl@getIndentationAmount()" shape=ellipse]
72 [label="9:CtVirtualElement@getIndentationAmount" shape=ellipse]
73 [label="9:CtExecutableReferenceImpl@getIndentCheck()" shape=ellipse]
74 [label="9:CtVirtualElement@getIndentCheck" shape=ellipse]
75 [label="9:CtTypeAccessImpl@PlaceHold" shape=ellipse]
76 [label="9:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
77 [label="9:CtThisAccessImpl@" shape=ellipse]
78 [label="9:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
79 [label="9:CtInvocationImpl@getIndentCheck()" shape=ellipse]
80 [label="9:CtInvocationImpl@getIndentCheck().getIndentationAmount()" shape=ellipse]
81 [label="9:CtOperatorAssignmentImpl@indentLevel += getIndentCheck().getIndentationAmount()" shape=ellipse]
82 [label="8:CtBlockImpl@\{
    indentLevel += getIndentCheck().getIndentationAmount();
\}" shape=ellipse]
83 [label="6:CtIfImpl@if (!areOnSameLine(((DetailAST) (aChild.getMainAst().getFirstChild())), ((DetailAST) (getMainAst().getFirstChild())))) \{
    indentLevel += getIndentCheck().getIndentationAmount();
\}" shape=ellipse]
84 [label="5:CtBlockImpl@\{
    if (!areOnSameLine(((DetailAST) (aChild.getMainAst().getFirstChild())), ((DetailAST) (getMainAst().getFirstChild())))) \{
        indentLevel += getIndentCheck().getIndentationAmount();
    \}
\}" shape=ellipse]
85 [label="5:CtIfImpl@if (aChild instanceof MethodCallHandler) \{
    if (!areOnSameLine(((DetailAST) (aChild.getMainAst().getFirstChild())), ((DetailAST) (getMainAst().getFirstChild())))) \{
        indentLevel += getIndentCheck().getIndentationAmount();
    \}
\}" shape=ellipse]
86 [label="12:CtVariableReadImpl@indentLevel" shape=ellipse]
87 [label="12:CtLocalVariableReferenceImpl@indentLevel" shape=ellipse]
88 [label="12:CtReturnImpl@return indentLevel" shape=ellipse]
89 [label="2:CtBlockImpl@\{
    DetailAST first = ((DetailAST) (getMainAst().getFirstChild()));
    int indentLevel = getLineStart(first);
    if (aChild instanceof MethodCallHandler) \{
        if (!areOnSameLine(((DetailAST) (aChild.getMainAst().getFirstChild())), ((DetailAST) (getMainAst().getFirstChild())))) \{
            indentLevel += getIndentCheck().getIndentationAmount();
        \}
    \}
    return indentLevel;
\}" shape=ellipse]
90 [label="2:CtMethodImpl@public int suggestedChildLevel(ExpressionHandler aChild) \{
    DetailAST first = ((DetailAST) (getMainAst().getFirstChild()));
    int indentLevel = getLineStart(first);
    if (aChild instanceof MethodCallHandler) \{
        if (!areOnSameLine(((DetailAST) (aChild.getMainAst().getFirstChild())), ((DetailAST) (getMainAst().getFirstChild())))) \{
            indentLevel += getIndentCheck().getIndentationAmount();
        \}
    \}
    return indentLevel;
\}" shape=ellipse]
91 [label="9:Update@UPDATE" shape=ellipse]
92 [label="9:CtPackageReferenceImpl@" shape=ellipse]
93 [label="9:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
94 [label="9:CtPackageReferenceImpl@" shape=ellipse]
95 [label="9:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
96 [label="9:CtTypeAccessImpl@PlaceHold" shape=ellipse]
97 [label="9:CtThisAccessImpl@" shape=ellipse]
98 [label="9:CtExecutableReferenceImpl@getIndentCheck()" shape=ellipse]
99 [label="9:CtInvocationImpl@getIndentCheck()" shape=ellipse]
100 [label="9:CtVirtualElement@getIndentCheck" shape=ellipse]
101 [label="9:CtExecutableReferenceImpl@getBasicOffset()" shape=ellipse]
102 [label="9:CtInvocationImpl@getIndentCheck().getBasicOffset()" shape=ellipse]
103 [label="9:CtVirtualElement@getBasicOffset" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
10 -> 11 [label="AST"];
12 -> 13 [label="AST"];
12 -> 10 [label="AST"];
12 -> 17 [label="Data Dep"];
14 -> 9 [label="AST"];
14 -> 12 [label="AST"];
14 -> 8 [label="AST"];
15 -> 7 [label="AST"];
15 -> 16 [label="AST"];
15 -> 14 [label="AST"];
15 -> 6 [label="AST"];
17 -> 28 [label="Define-Use"];
18 -> 17 [label="AST"];
18 -> 4 [label="AST"];
18 -> 15 [label="AST"];
20 -> 21 [label="AST"];
20 -> 22 [label="AST"];
24 -> 25 [label="AST"];
26 -> 27 [label="AST"];
26 -> 24 [label="AST"];
26 -> 31 [label="Data Dep"];
28 -> 29 [label="AST"];
28 -> 31 [label="Data Dep"];
30 -> 23 [label="AST"];
30 -> 26 [label="AST"];
30 -> 20 [label="AST"];
30 -> 28 [label="AST"];
31 -> 86 [label="Define-Use"];
32 -> 31 [label="AST"];
32 -> 19 [label="AST"];
32 -> 30 [label="AST"];
33 -> 34 [label="AST"];
35 -> 36 [label="AST"];
37 -> 33 [label="AST"];
37 -> 35 [label="AST"];
37 -> 84 [label="Control Dep"];
37 -> 83 [label="Control Dep"];
37 -> 68 [label="Control Dep"];
37 -> 67 [label="Control Dep"];
37 -> 38 [label="Control Dep"];
37 -> 44 [label="Control Dep"];
37 -> 42 [label="Control Dep"];
37 -> 54 [label="Control Dep"];
37 -> 46 [label="Control Dep"];
37 -> 53 [label="Control Dep"];
37 -> 48 [label="Control Dep"];
37 -> 51 [label="Control Dep"];
37 -> 65 [label="Control Dep"];
37 -> 56 [label="Control Dep"];
37 -> 64 [label="Control Dep"];
37 -> 58 [label="Control Dep"];
37 -> 62 [label="Control Dep"];
37 -> 60 [label="Control Dep"];
38 -> 39 [label="AST"];
38 -> 40 [label="AST"];
42 -> 43 [label="AST"];
44 -> 45 [label="AST"];
44 -> 42 [label="AST"];
48 -> 49 [label="AST"];
51 -> 52 [label="AST"];
53 -> 50 [label="AST"];
53 -> 51 [label="AST"];
53 -> 48 [label="AST"];
54 -> 47 [label="AST"];
54 -> 55 [label="AST"];
54 -> 53 [label="AST"];
54 -> 46 [label="AST"];
60 -> 61 [label="AST"];
62 -> 63 [label="AST"];
62 -> 60 [label="AST"];
64 -> 59 [label="AST"];
64 -> 62 [label="AST"];
64 -> 58 [label="AST"];
65 -> 57 [label="AST"];
65 -> 66 [label="AST"];
65 -> 64 [label="AST"];
65 -> 56 [label="AST"];
67 -> 41 [label="AST"];
67 -> 44 [label="AST"];
67 -> 38 [label="AST"];
67 -> 54 [label="AST"];
67 -> 65 [label="AST"];
68 -> 67 [label="AST"];
68 -> 82 [label="Control Dep"];
68 -> 81 [label="Control Dep"];
68 -> 69 [label="Control Dep"];
68 -> 80 [label="Control Dep"];
68 -> 71 [label="Control Dep"];
68 -> 79 [label="Control Dep"];
68 -> 73 [label="Control Dep"];
68 -> 77 [label="Control Dep"];
68 -> 75 [label="Control Dep"];
68 -> 96 [label="Control Dep"];
68 -> 97 [label="Control Dep"];
68 -> 98 [label="Control Dep"];
68 -> 99 [label="Control Dep"];
68 -> 101 [label="Control Dep"];
68 -> 102 [label="Control Dep"];
69 -> 70 [label="AST"];
69 -> 86 [label="Define-Use"];
70 -> 86 [label="Define-Use"];
75 -> 76 [label="AST"];
77 -> 78 [label="AST"];
77 -> 75 [label="AST"];
77 -> 69 [label="Data Dep"];
79 -> 74 [label="AST"];
79 -> 77 [label="AST"];
79 -> 73 [label="AST"];
80 -> 72 [label="AST"];
80 -> 79 [label="AST"];
80 -> 71 [label="AST"];
80 -> 91 [label="Action"];
81 -> 69 [label="AST"];
81 -> 80 [label="AST"];
82 -> 81 [label="AST"];
83 -> 68 [label="AST"];
83 -> 82 [label="AST"];
84 -> 83 [label="AST"];
85 -> 37 [label="AST"];
85 -> 84 [label="AST"];
86 -> 87 [label="AST"];
88 -> 86 [label="AST"];
89 -> 18 [label="AST"];
89 -> 32 [label="AST"];
89 -> 85 [label="AST"];
89 -> 88 [label="AST"];
90 -> 1 [label="AST"];
90 -> 0 [label="AST"];
90 -> 2 [label="AST"];
90 -> 89 [label="AST"];
91 -> 102 [label="Action"];
93 -> 92 [label="AST"];
95 -> 94 [label="AST"];
96 -> 95 [label="AST"];
97 -> 93 [label="AST"];
97 -> 96 [label="AST"];
97 -> 69 [label="Data Dep"];
97 -> 69 [label="Control Dep"];
99 -> 100 [label="AST"];
99 -> 97 [label="AST"];
99 -> 98 [label="AST"];
102 -> 103 [label="AST"];
102 -> 99 [label="AST"];
102 -> 101 [label="AST"];
}