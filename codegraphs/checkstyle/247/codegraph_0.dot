digraph "visitVariableDef#?,DetailAST" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtVirtualElement@visitVariableDef" shape=ellipse]
2 [label="2:CtParameterImpl@DetailAST variableDef" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@DetailAST" shape=ellipse]
4 [label="3:CtTypeReferenceImpl@boolean" shape=ellipse]
5 [label="4:CtExecutableReferenceImpl@inInterfaceOrAnnotationBlock(DetailAST)" shape=ellipse]
6 [label="4:CtTypeReferenceImpl@ScopeUtils" shape=ellipse]
7 [label="4:CtTypeReferenceImpl@boolean" shape=ellipse]
8 [label="4:CtTypeReferenceImpl@DetailAST" shape=ellipse]
9 [label="4:CtVirtualElement@inInterfaceOrAnnotationBlock" shape=ellipse]
10 [label="4:CtTypeAccessImpl@ScopeUtils" shape=ellipse]
11 [label="4:CtTypeReferenceImpl@ScopeUtils" shape=ellipse]
12 [label="4:CtVariableReadImpl@variableDef" shape=ellipse]
13 [label="4:CtParameterReferenceImpl@variableDef" shape=ellipse]
14 [label="4:CtInvocationImpl@ScopeUtils.inInterfaceOrAnnotationBlock(variableDef)" shape=ellipse]
15 [label="3:CtVirtualElement@inInterfaceOrAnnotationBlock" shape=ellipse]
16 [label="3:CtLocalVariableImpl@final boolean inInterfaceOrAnnotationBlock = ScopeUtils.inInterfaceOrAnnotationBlock(variableDef)" shape=ellipse]
17 [label="5:CtVariableReadImpl@inInterfaceOrAnnotationBlock" shape=ellipse]
18 [label="5:CtLocalVariableReferenceImpl@inInterfaceOrAnnotationBlock" shape=ellipse]
19 [label="5:CtUnaryOperatorImpl@(!inInterfaceOrAnnotationBlock)" shape=ellipse]
20 [label="5:CtTypeReferenceImpl@boolean" shape=ellipse]
21 [label="5:CtExecutableReferenceImpl@hasIgnoreAnnotation(<unknown>)" shape=ellipse]
22 [label="5:CtTypeReferenceImpl@null" shape=ellipse]
23 [label="5:CtVirtualElement@hasIgnoreAnnotation" shape=ellipse]
24 [label="5:CtTypeAccessImpl@PlaceHold" shape=ellipse]
25 [label="5:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
26 [label="5:CtThisAccessImpl@" shape=ellipse]
27 [label="5:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
28 [label="5:CtVariableReadImpl@variableDef" shape=ellipse]
29 [label="5:CtParameterReferenceImpl@variableDef" shape=ellipse]
30 [label="5:CtInvocationImpl@hasIgnoreAnnotation(variableDef)" shape=ellipse]
31 [label="5:CtUnaryOperatorImpl@(!hasIgnoreAnnotation(variableDef))" shape=ellipse]
32 [label="5:CtBinaryOperatorImpl@(!inInterfaceOrAnnotationBlock) && (!hasIgnoreAnnotation(variableDef))" shape=ellipse]
33 [label="6:CtTypeReferenceImpl@DetailAST" shape=ellipse]
34 [label="6:CtPackageReferenceImpl@" shape=ellipse]
35 [label="6:CtExecutableReferenceImpl@getNextSibling()" shape=ellipse]
36 [label="6:CtTypeReferenceImpl@DetailAST" shape=ellipse]
37 [label="6:CtVirtualElement@getNextSibling" shape=ellipse]
38 [label="6:CtExecutableReferenceImpl@findFirstToken()" shape=ellipse]
39 [label="6:CtTypeReferenceImpl@DetailAST" shape=ellipse]
40 [label="6:CtVirtualElement@findFirstToken" shape=ellipse]
41 [label="6:CtVariableReadImpl@variableDef" shape=ellipse]
42 [label="6:CtParameterReferenceImpl@variableDef" shape=ellipse]
43 [label="6:CtTypeAccessImpl@TYPE" shape=ellipse]
44 [label="6:CtTypeReferenceImpl@TYPE" shape=ellipse]
45 [label="6:CtInvocationImpl@variableDef.findFirstToken(TYPE)" shape=ellipse]
46 [label="6:CtInvocationImpl@variableDef.findFirstToken(TYPE).getNextSibling()" shape=ellipse]
47 [label="6:CtVirtualElement@varNameAST" shape=ellipse]
48 [label="6:CtLocalVariableImpl@final DetailAST varNameAST = variableDef.findFirstToken(TYPE).getNextSibling()" shape=ellipse]
49 [label="7:CtTypeReferenceImpl@String" shape=ellipse]
50 [label="7:CtPackageReferenceImpl@java.lang" shape=ellipse]
51 [label="7:CtExecutableReferenceImpl@getText()" shape=ellipse]
52 [label="7:CtTypeReferenceImpl@DetailAST" shape=ellipse]
53 [label="7:CtTypeReferenceImpl@String" shape=ellipse]
54 [label="7:CtVirtualElement@getText" shape=ellipse]
55 [label="7:CtVariableReadImpl@varNameAST" shape=ellipse]
56 [label="7:CtLocalVariableReferenceImpl@varNameAST" shape=ellipse]
57 [label="7:CtInvocationImpl@varNameAST.getText()" shape=ellipse]
58 [label="7:CtVirtualElement@varName" shape=ellipse]
59 [label="7:CtLocalVariableImpl@final String varName = varNameAST.getText()" shape=ellipse]
60 [label="8:CtExecutableReferenceImpl@hasProperAccessModifier(<unknown>,java.lang.String)" shape=ellipse]
61 [label="8:CtTypeReferenceImpl@null" shape=ellipse]
62 [label="8:CtTypeReferenceImpl@String" shape=ellipse]
63 [label="8:CtVirtualElement@hasProperAccessModifier" shape=ellipse]
64 [label="8:CtTypeAccessImpl@PlaceHold" shape=ellipse]
65 [label="8:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
66 [label="8:CtThisAccessImpl@" shape=ellipse]
67 [label="8:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
68 [label="8:CtVariableReadImpl@variableDef" shape=ellipse]
69 [label="8:CtParameterReferenceImpl@variableDef" shape=ellipse]
70 [label="8:CtVariableReadImpl@varName" shape=ellipse]
71 [label="8:CtLocalVariableReferenceImpl@varName" shape=ellipse]
72 [label="8:CtInvocationImpl@hasProperAccessModifier(variableDef, varName)" shape=ellipse]
73 [label="8:CtUnaryOperatorImpl@!hasProperAccessModifier(variableDef, varName)" shape=ellipse]
74 [label="9:CtExecutableReferenceImpl@log(<unknown>,<unknown>,<unknown>,java.lang.String)" shape=ellipse]
75 [label="9:CtTypeReferenceImpl@null" shape=ellipse]
76 [label="9:CtTypeReferenceImpl@null" shape=ellipse]
77 [label="9:CtTypeReferenceImpl@null" shape=ellipse]
78 [label="9:CtTypeReferenceImpl@String" shape=ellipse]
79 [label="9:CtVirtualElement@log" shape=ellipse]
80 [label="9:CtTypeAccessImpl@PlaceHold" shape=ellipse]
81 [label="9:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
82 [label="9:CtThisAccessImpl@" shape=ellipse]
83 [label="9:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
84 [label="9:CtExecutableReferenceImpl@getLineNo()" shape=ellipse]
85 [label="9:CtTypeReferenceImpl@DetailAST" shape=ellipse]
86 [label="9:CtVirtualElement@getLineNo" shape=ellipse]
87 [label="9:CtVariableReadImpl@varNameAST" shape=ellipse]
88 [label="9:CtLocalVariableReferenceImpl@varNameAST" shape=ellipse]
89 [label="9:CtInvocationImpl@varNameAST.getLineNo()" shape=ellipse]
90 [label="9:CtExecutableReferenceImpl@getColumnNo()" shape=ellipse]
91 [label="9:CtTypeReferenceImpl@DetailAST" shape=ellipse]
92 [label="9:CtVirtualElement@getColumnNo" shape=ellipse]
93 [label="9:CtVariableReadImpl@varNameAST" shape=ellipse]
94 [label="9:CtLocalVariableReferenceImpl@varNameAST" shape=ellipse]
95 [label="9:CtInvocationImpl@varNameAST.getColumnNo()" shape=ellipse]
96 [label="9:CtTypeAccessImpl@MSG_KEY" shape=ellipse]
97 [label="9:CtTypeReferenceImpl@MSG_KEY" shape=ellipse]
98 [label="9:CtVariableReadImpl@varName" shape=ellipse]
99 [label="9:CtLocalVariableReferenceImpl@varName" shape=ellipse]
100 [label="9:CtInvocationImpl@log(varNameAST.getLineNo(), varNameAST.getColumnNo(), MSG_KEY, varName)" shape=ellipse]
101 [label="8:CtBlockImpl@\{
    log(varNameAST.getLineNo(), varNameAST.getColumnNo(), MSG_KEY, varName);
\}" shape=ellipse]
102 [label="8:CtIfImpl@if (!hasProperAccessModifier(variableDef, varName)) \{
    log(varNameAST.getLineNo(), varNameAST.getColumnNo(), MSG_KEY, varName);
\}" shape=ellipse]
103 [label="5:CtBlockImpl@\{
    final DetailAST varNameAST = variableDef.findFirstToken(TYPE).getNextSibling();
    final String varName = varNameAST.getText();
    if (!hasProperAccessModifier(variableDef, varName)) \{
        log(varNameAST.getLineNo(), varNameAST.getColumnNo(), MSG_KEY, varName);
    \}
\}" shape=ellipse]
104 [label="5:CtIfImpl@if ((!inInterfaceOrAnnotationBlock) && (!hasIgnoreAnnotation(variableDef))) \{
    final DetailAST varNameAST = variableDef.findFirstToken(TYPE).getNextSibling();
    final String varName = varNameAST.getText();
    if (!hasProperAccessModifier(variableDef, varName)) \{
        log(varNameAST.getLineNo(), varNameAST.getColumnNo(), MSG_KEY, varName);
    \}
\}" shape=ellipse]
105 [label="2:CtBlockImpl@\{
    final boolean inInterfaceOrAnnotationBlock = ScopeUtils.inInterfaceOrAnnotationBlock(variableDef);
    if ((!inInterfaceOrAnnotationBlock) && (!hasIgnoreAnnotation(variableDef))) \{
        final DetailAST varNameAST = variableDef.findFirstToken(TYPE).getNextSibling();
        final String varName = varNameAST.getText();
        if (!hasProperAccessModifier(variableDef, varName)) \{
            log(varNameAST.getLineNo(), varNameAST.getColumnNo(), MSG_KEY, varName);
        \}
    \}
\}" shape=ellipse]
106 [label="2:CtMethodImpl@private void visitVariableDef(DetailAST variableDef) \{
    final boolean inInterfaceOrAnnotationBlock = ScopeUtils.inInterfaceOrAnnotationBlock(variableDef);
    if ((!inInterfaceOrAnnotationBlock) && (!hasIgnoreAnnotation(variableDef))) \{
        final DetailAST varNameAST = variableDef.findFirstToken(TYPE).getNextSibling();
        final String varName = varNameAST.getText();
        if (!hasProperAccessModifier(variableDef, varName)) \{
            log(varNameAST.getLineNo(), varNameAST.getColumnNo(), MSG_KEY, varName);
        \}
    \}
\}" shape=ellipse]
107 [label="4:Update@UPDATE" shape=ellipse]
108 [label="4:CtPackageReferenceImpl@" shape=ellipse]
109 [label="4:CtTypeReferenceImpl@ScopeUtils" shape=ellipse]
110 [label="4:CtTypeAccessImpl@ScopeUtils" shape=ellipse]
111 [label="4:CtPackageReferenceImpl@" shape=ellipse]
112 [label="4:CtTypeReferenceImpl@ScopeUtils" shape=ellipse]
113 [label="4:CtTypeReferenceImpl@boolean" shape=ellipse]
114 [label="4:CtPackageReferenceImpl@" shape=ellipse]
115 [label="4:CtTypeReferenceImpl@DetailAST" shape=ellipse]
116 [label="4:CtExecutableReferenceImpl@isInInterfaceOrAnnotationBlock(DetailAST)" shape=ellipse]
117 [label="4:CtPackageReferenceImpl@" shape=ellipse]
118 [label="4:CtTypeReferenceImpl@DetailAST" shape=ellipse]
119 [label="4:CtParameterReferenceImpl@variableDef" shape=ellipse]
120 [label="4:CtVariableReadImpl@variableDef" shape=ellipse]
121 [label="4:CtInvocationImpl@ScopeUtils.isInInterfaceOrAnnotationBlock(variableDef)" shape=ellipse]
122 [label="4:CtVirtualElement@isInInterfaceOrAnnotationBlock" shape=ellipse]
2 -> 3 [label="AST"];
5 -> 6 [label="AST"];
5 -> 7 [label="AST"];
5 -> 8 [label="AST"];
10 -> 11 [label="AST"];
12 -> 13 [label="AST"];
12 -> 15 [label="Data Dep"];
14 -> 9 [label="AST"];
14 -> 10 [label="AST"];
14 -> 5 [label="AST"];
14 -> 12 [label="AST"];
14 -> 107 [label="Action"];
15 -> 17 [label="Define-Use"];
16 -> 15 [label="AST"];
16 -> 4 [label="AST"];
16 -> 14 [label="AST"];
17 -> 18 [label="AST"];
19 -> 20 [label="AST"];
19 -> 17 [label="AST"];
21 -> 22 [label="AST"];
24 -> 25 [label="AST"];
26 -> 27 [label="AST"];
26 -> 24 [label="AST"];
28 -> 29 [label="AST"];
30 -> 23 [label="AST"];
30 -> 26 [label="AST"];
30 -> 21 [label="AST"];
30 -> 28 [label="AST"];
31 -> 30 [label="AST"];
32 -> 19 [label="AST"];
32 -> 31 [label="AST"];
32 -> 103 [label="Control Dep"];
32 -> 48 [label="Control Dep"];
32 -> 46 [label="Control Dep"];
32 -> 35 [label="Control Dep"];
32 -> 45 [label="Control Dep"];
32 -> 38 [label="Control Dep"];
32 -> 41 [label="Control Dep"];
32 -> 43 [label="Control Dep"];
32 -> 59 [label="Control Dep"];
32 -> 57 [label="Control Dep"];
32 -> 51 [label="Control Dep"];
32 -> 55 [label="Control Dep"];
32 -> 102 [label="Control Dep"];
32 -> 73 [label="Control Dep"];
32 -> 72 [label="Control Dep"];
32 -> 60 [label="Control Dep"];
32 -> 66 [label="Control Dep"];
32 -> 64 [label="Control Dep"];
32 -> 68 [label="Control Dep"];
32 -> 70 [label="Control Dep"];
33 -> 34 [label="AST"];
35 -> 36 [label="AST"];
38 -> 39 [label="AST"];
41 -> 42 [label="AST"];
41 -> 47 [label="Data Dep"];
43 -> 44 [label="AST"];
45 -> 40 [label="AST"];
45 -> 41 [label="AST"];
45 -> 38 [label="AST"];
45 -> 43 [label="AST"];
46 -> 37 [label="AST"];
46 -> 45 [label="AST"];
46 -> 35 [label="AST"];
47 -> 55 [label="Define-Use"];
47 -> 87 [label="Define-Use"];
47 -> 93 [label="Define-Use"];
48 -> 47 [label="AST"];
48 -> 33 [label="AST"];
48 -> 46 [label="AST"];
49 -> 50 [label="AST"];
51 -> 52 [label="AST"];
51 -> 53 [label="AST"];
55 -> 56 [label="AST"];
55 -> 58 [label="Data Dep"];
57 -> 54 [label="AST"];
57 -> 55 [label="AST"];
57 -> 51 [label="AST"];
58 -> 70 [label="Define-Use"];
58 -> 98 [label="Define-Use"];
59 -> 58 [label="AST"];
59 -> 49 [label="AST"];
59 -> 57 [label="AST"];
60 -> 61 [label="AST"];
60 -> 62 [label="AST"];
64 -> 65 [label="AST"];
66 -> 67 [label="AST"];
66 -> 64 [label="AST"];
68 -> 69 [label="AST"];
70 -> 71 [label="AST"];
72 -> 63 [label="AST"];
72 -> 66 [label="AST"];
72 -> 60 [label="AST"];
72 -> 68 [label="AST"];
72 -> 70 [label="AST"];
73 -> 72 [label="AST"];
73 -> 101 [label="Control Dep"];
73 -> 100 [label="Control Dep"];
73 -> 74 [label="Control Dep"];
73 -> 82 [label="Control Dep"];
73 -> 80 [label="Control Dep"];
73 -> 89 [label="Control Dep"];
73 -> 84 [label="Control Dep"];
73 -> 87 [label="Control Dep"];
73 -> 95 [label="Control Dep"];
73 -> 90 [label="Control Dep"];
73 -> 93 [label="Control Dep"];
73 -> 96 [label="Control Dep"];
73 -> 98 [label="Control Dep"];
74 -> 75 [label="AST"];
74 -> 76 [label="AST"];
74 -> 77 [label="AST"];
74 -> 78 [label="AST"];
80 -> 81 [label="AST"];
82 -> 83 [label="AST"];
82 -> 80 [label="AST"];
84 -> 85 [label="AST"];
87 -> 88 [label="AST"];
89 -> 86 [label="AST"];
89 -> 87 [label="AST"];
89 -> 84 [label="AST"];
90 -> 91 [label="AST"];
93 -> 94 [label="AST"];
95 -> 92 [label="AST"];
95 -> 93 [label="AST"];
95 -> 90 [label="AST"];
96 -> 97 [label="AST"];
98 -> 99 [label="AST"];
100 -> 79 [label="AST"];
100 -> 82 [label="AST"];
100 -> 74 [label="AST"];
100 -> 89 [label="AST"];
100 -> 95 [label="AST"];
100 -> 96 [label="AST"];
100 -> 98 [label="AST"];
101 -> 100 [label="AST"];
102 -> 73 [label="AST"];
102 -> 101 [label="AST"];
103 -> 48 [label="AST"];
103 -> 59 [label="AST"];
103 -> 102 [label="AST"];
104 -> 32 [label="AST"];
104 -> 103 [label="AST"];
105 -> 16 [label="AST"];
105 -> 104 [label="AST"];
106 -> 1 [label="AST"];
106 -> 0 [label="AST"];
106 -> 2 [label="AST"];
106 -> 105 [label="AST"];
107 -> 121 [label="Action"];
109 -> 108 [label="AST"];
110 -> 109 [label="AST"];
112 -> 111 [label="AST"];
115 -> 114 [label="AST"];
116 -> 112 [label="AST"];
116 -> 113 [label="AST"];
116 -> 115 [label="AST"];
118 -> 117 [label="AST"];
119 -> 118 [label="AST"];
120 -> 119 [label="AST"];
121 -> 122 [label="AST"];
121 -> 110 [label="AST"];
121 -> 116 [label="AST"];
121 -> 120 [label="AST"];
}