digraph "getChildren#?" {
0 [label="3:CtVirtualElement@DetailNode[]" shape=ellipse]
1 [label="3:CtArrayTypeReferenceImpl@DetailNode[]" shape=ellipse]
2 [label="3:CtTypeReferenceImpl@DetailNode" shape=ellipse]
3 [label="3:CtVirtualElement@getChildren" shape=ellipse]
4 [label="4:CtFieldReferenceImpl@children" shape=ellipse]
5 [label="4:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
6 [label="4:CtFieldReadImpl@children" shape=ellipse]
7 [label="4:CtLiteralImpl@null" shape=ellipse]
8 [label="4:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
9 [label="4:CtBinaryOperatorImpl@children == null" shape=ellipse]
10 [label="5:CtFieldReferenceImpl@children" shape=ellipse]
11 [label="5:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
12 [label="5:CtFieldReadImpl@children" shape=ellipse]
13 [label="5:CtReturnImpl@return children" shape=ellipse]
14 [label="4:CtBlockImpl@\{
    return children;
\}" shape=ellipse]
15 [label="7:CtExecutableReferenceImpl@copyOf()" shape=ellipse]
16 [label="7:CtTypeReferenceImpl@Arrays" shape=ellipse]
17 [label="7:CtArrayTypeReferenceImpl@DetailNode[]" shape=ellipse]
18 [label="7:CtVirtualElement@copyOf" shape=ellipse]
19 [label="7:CtTypeAccessImpl@Arrays" shape=ellipse]
20 [label="7:CtTypeReferenceImpl@Arrays" shape=ellipse]
21 [label="7:CtFieldReferenceImpl@children" shape=ellipse]
22 [label="7:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
23 [label="7:CtFieldReadImpl@children" shape=ellipse]
24 [label="7:CtTypeAccessImpl@length" shape=ellipse]
25 [label="7:CtTypeReferenceImpl@length" shape=ellipse]
26 [label="7:CtInvocationImpl@Arrays.copyOf(children, length)" shape=ellipse]
27 [label="7:CtReturnImpl@return Arrays.copyOf(children, length)" shape=ellipse]
28 [label="6:CtBlockImpl@\{
    return Arrays.copyOf(children, length);
\}" shape=ellipse]
29 [label="4:CtIfImpl@if (children == null) \{
    return children;
\} else \{
    return Arrays.copyOf(children, length);
\}" shape=ellipse]
30 [label="3:CtBlockImpl@\{
    if (children == null) \{
        return children;
    \} else \{
        return Arrays.copyOf(children, length);
    \}
\}" shape=ellipse]
31 [label="3:CtMethodImpl@@Override
public DetailNode[] getChildren() \{
    if (children == null) \{
        return children;
    \} else \{
        return Arrays.copyOf(children, length);
    \}
\}" shape=ellipse]
32 [label="2:CtAnnotationImpl@@Override" shape=ellipse]
33 [label="5:Delete@DELETE" shape=ellipse]
34 [label="5:Insert@INSERT" shape=ellipse]
35 [label="5:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
36 [label="5:CtLiteralImpl@null" shape=ellipse]
1 -> 0 [label="AST"];
1 -> 2 [label="AST"];
4 -> 5 [label="AST"];
6 -> 4 [label="AST"];
7 -> 8 [label="AST"];
9 -> 6 [label="AST"];
9 -> 7 [label="AST"];
9 -> 14 [label="Control Dep"];
9 -> 13 [label="Control Dep"];
9 -> 12 [label="Control Dep"];
9 -> 28 [label="Control Dep"];
9 -> 27 [label="Control Dep"];
9 -> 26 [label="Control Dep"];
9 -> 15 [label="Control Dep"];
9 -> 19 [label="Control Dep"];
9 -> 23 [label="Control Dep"];
9 -> 24 [label="Control Dep"];
9 -> 36 [label="Control Dep"];
10 -> 11 [label="AST"];
12 -> 10 [label="AST"];
12 -> 33 [label="Action"];
13 -> 12 [label="AST"];
13 -> 34 [label="Action"];
14 -> 13 [label="AST"];
15 -> 16 [label="AST"];
15 -> 17 [label="AST"];
19 -> 20 [label="AST"];
21 -> 22 [label="AST"];
23 -> 21 [label="AST"];
24 -> 25 [label="AST"];
26 -> 18 [label="AST"];
26 -> 19 [label="AST"];
26 -> 15 [label="AST"];
26 -> 23 [label="AST"];
26 -> 24 [label="AST"];
27 -> 26 [label="AST"];
28 -> 27 [label="AST"];
29 -> 9 [label="AST"];
29 -> 14 [label="AST"];
29 -> 28 [label="AST"];
30 -> 29 [label="AST"];
31 -> 3 [label="AST"];
31 -> 32 [label="AST"];
31 -> 1 [label="AST"];
31 -> 30 [label="AST"];
34 -> 36 [label="Action"];
36 -> 35 [label="AST"];
}