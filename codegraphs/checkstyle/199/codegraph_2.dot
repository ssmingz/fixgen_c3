digraph "checkIndentation#?" {
0 [label="3:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="3:CtVirtualElement@checkIndentation" shape=ellipse]
2 [label="4:CtTypeReferenceImpl@DetailAST" shape=ellipse]
3 [label="4:CtPackageReferenceImpl@" shape=ellipse]
4 [label="4:CtExecutableReferenceImpl@getFirstChild()" shape=ellipse]
5 [label="4:CtTypeReferenceImpl@DetailAST" shape=ellipse]
6 [label="4:CtVirtualElement@getFirstChild" shape=ellipse]
7 [label="4:CtExecutableReferenceImpl@getMainAst()" shape=ellipse]
8 [label="4:CtVirtualElement@getMainAst" shape=ellipse]
9 [label="4:CtTypeAccessImpl@PlaceHold" shape=ellipse]
10 [label="4:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
11 [label="4:CtThisAccessImpl@" shape=ellipse]
12 [label="4:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
13 [label="4:CtInvocationImpl@getMainAst()" shape=ellipse]
14 [label="4:CtInvocationImpl@getMainAst().getFirstChild()" shape=ellipse]
15 [label="4:CtVirtualElement@type" shape=ellipse]
16 [label="4:CtLocalVariableImpl@final DetailAST type = getMainAst().getFirstChild()" shape=ellipse]
17 [label="5:CtVariableReadImpl@type" shape=ellipse]
18 [label="5:CtLocalVariableReferenceImpl@type" shape=ellipse]
19 [label="5:CtLiteralImpl@null" shape=ellipse]
20 [label="5:CtTypeReferenceImpl@<nulltype>" shape=ellipse]
21 [label="5:CtBinaryOperatorImpl@type != null" shape=ellipse]
22 [label="6:CtExecutableReferenceImpl@checkExpressionSubtree(<unknown>,<unknown>,boolean,boolean)" shape=ellipse]
23 [label="6:CtTypeReferenceImpl@null" shape=ellipse]
24 [label="6:CtTypeReferenceImpl@null" shape=ellipse]
25 [label="6:CtTypeReferenceImpl@boolean" shape=ellipse]
26 [label="6:CtTypeReferenceImpl@boolean" shape=ellipse]
27 [label="6:CtVirtualElement@checkExpressionSubtree" shape=ellipse]
28 [label="6:CtTypeAccessImpl@PlaceHold" shape=ellipse]
29 [label="6:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
30 [label="6:CtThisAccessImpl@" shape=ellipse]
31 [label="6:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
32 [label="6:CtVariableReadImpl@type" shape=ellipse]
33 [label="6:CtLocalVariableReferenceImpl@type" shape=ellipse]
34 [label="6:CtExecutableReferenceImpl@getLevel()" shape=ellipse]
35 [label="6:CtVirtualElement@getLevel" shape=ellipse]
36 [label="6:CtTypeAccessImpl@PlaceHold" shape=ellipse]
37 [label="6:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
38 [label="6:CtThisAccessImpl@" shape=ellipse]
39 [label="6:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
40 [label="6:CtInvocationImpl@getLevel()" shape=ellipse]
41 [label="6:CtLiteralImpl@false" shape=ellipse]
42 [label="6:CtTypeReferenceImpl@boolean" shape=ellipse]
43 [label="6:CtLiteralImpl@false" shape=ellipse]
44 [label="6:CtTypeReferenceImpl@boolean" shape=ellipse]
45 [label="6:CtInvocationImpl@checkExpressionSubtree(type, getLevel(), false, false)" shape=ellipse]
46 [label="5:CtBlockImpl@\{
    checkExpressionSubtree(type, getLevel(), false, false);
\}" shape=ellipse]
47 [label="5:CtIfImpl@if (type != null) \{
    checkExpressionSubtree(type, getLevel(), false, false);
\}" shape=ellipse]
48 [label="8:CtTypeReferenceImpl@DetailAST" shape=ellipse]
49 [label="8:CtPackageReferenceImpl@" shape=ellipse]
50 [label="8:CtExecutableReferenceImpl@findFirstToken()" shape=ellipse]
51 [label="8:CtTypeReferenceImpl@DetailAST" shape=ellipse]
52 [label="8:CtVirtualElement@findFirstToken" shape=ellipse]
53 [label="8:CtExecutableReferenceImpl@getMainAst()" shape=ellipse]
54 [label="8:CtVirtualElement@getMainAst" shape=ellipse]
55 [label="8:CtTypeAccessImpl@PlaceHold" shape=ellipse]
56 [label="8:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
57 [label="8:CtThisAccessImpl@" shape=ellipse]
58 [label="8:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
59 [label="8:CtInvocationImpl@getMainAst()" shape=ellipse]
60 [label="8:CtTypeAccessImpl@LPAREN" shape=ellipse]
61 [label="8:CtTypeReferenceImpl@LPAREN" shape=ellipse]
62 [label="8:CtInvocationImpl@getMainAst().findFirstToken(LPAREN)" shape=ellipse]
63 [label="8:CtVirtualElement@lparen" shape=ellipse]
64 [label="8:CtLocalVariableImpl@final DetailAST lparen = getMainAst().findFirstToken(LPAREN)" shape=ellipse]
65 [label="9:CtExecutableReferenceImpl@checkLParen(<unknown>)" shape=ellipse]
66 [label="9:CtTypeReferenceImpl@null" shape=ellipse]
67 [label="9:CtVirtualElement@checkLParen" shape=ellipse]
68 [label="9:CtTypeAccessImpl@PlaceHold" shape=ellipse]
69 [label="9:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
70 [label="9:CtThisAccessImpl@" shape=ellipse]
71 [label="9:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
72 [label="9:CtVariableReadImpl@lparen" shape=ellipse]
73 [label="9:CtLocalVariableReferenceImpl@lparen" shape=ellipse]
74 [label="9:CtInvocationImpl@checkLParen(lparen)" shape=ellipse]
75 [label="3:CtBlockImpl@\{
    final DetailAST type = getMainAst().getFirstChild();
    if (type != null) \{
        checkExpressionSubtree(type, getLevel(), false, false);
    \}
    final DetailAST lparen = getMainAst().findFirstToken(LPAREN);
    checkLParen(lparen);
\}" shape=ellipse]
76 [label="3:CtMethodImpl@@Override
public void checkIndentation() \{
    final DetailAST type = getMainAst().getFirstChild();
    if (type != null) \{
        checkExpressionSubtree(type, getLevel(), false, false);
    \}
    final DetailAST lparen = getMainAst().findFirstToken(LPAREN);
    checkLParen(lparen);
\}" shape=ellipse]
77 [label="2:CtAnnotationImpl@@Override" shape=ellipse]
78 [label="6:Update@UPDATE" shape=ellipse]
79 [label="6:CtPackageReferenceImpl@" shape=ellipse]
80 [label="6:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
81 [label="6:CtPackageReferenceImpl@" shape=ellipse]
82 [label="6:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
83 [label="6:CtTypeAccessImpl@PlaceHold" shape=ellipse]
84 [label="6:CtThisAccessImpl@" shape=ellipse]
85 [label="6:CtExecutableReferenceImpl@getIndent()" shape=ellipse]
86 [label="6:CtInvocationImpl@getIndent()" shape=ellipse]
87 [label="6:CtVirtualElement@getIndent" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
9 -> 10 [label="AST"];
11 -> 12 [label="AST"];
11 -> 9 [label="AST"];
11 -> 15 [label="Data Dep"];
13 -> 8 [label="AST"];
13 -> 11 [label="AST"];
13 -> 7 [label="AST"];
14 -> 6 [label="AST"];
14 -> 13 [label="AST"];
14 -> 4 [label="AST"];
15 -> 17 [label="Define-Use"];
15 -> 32 [label="Define-Use"];
16 -> 15 [label="AST"];
16 -> 2 [label="AST"];
16 -> 14 [label="AST"];
17 -> 18 [label="AST"];
19 -> 20 [label="AST"];
21 -> 17 [label="AST"];
21 -> 19 [label="AST"];
21 -> 46 [label="Control Dep"];
21 -> 45 [label="Control Dep"];
21 -> 22 [label="Control Dep"];
21 -> 30 [label="Control Dep"];
21 -> 28 [label="Control Dep"];
21 -> 32 [label="Control Dep"];
21 -> 40 [label="Control Dep"];
21 -> 34 [label="Control Dep"];
21 -> 38 [label="Control Dep"];
21 -> 36 [label="Control Dep"];
21 -> 41 [label="Control Dep"];
21 -> 43 [label="Control Dep"];
21 -> 83 [label="Control Dep"];
21 -> 84 [label="Control Dep"];
21 -> 85 [label="Control Dep"];
21 -> 86 [label="Control Dep"];
22 -> 23 [label="AST"];
22 -> 24 [label="AST"];
22 -> 25 [label="AST"];
22 -> 26 [label="AST"];
28 -> 29 [label="AST"];
30 -> 31 [label="AST"];
30 -> 28 [label="AST"];
32 -> 33 [label="AST"];
36 -> 37 [label="AST"];
38 -> 39 [label="AST"];
38 -> 36 [label="AST"];
40 -> 35 [label="AST"];
40 -> 38 [label="AST"];
40 -> 34 [label="AST"];
40 -> 78 [label="Action"];
41 -> 42 [label="AST"];
43 -> 44 [label="AST"];
45 -> 27 [label="AST"];
45 -> 30 [label="AST"];
45 -> 22 [label="AST"];
45 -> 32 [label="AST"];
45 -> 40 [label="AST"];
45 -> 41 [label="AST"];
45 -> 43 [label="AST"];
46 -> 45 [label="AST"];
47 -> 21 [label="AST"];
47 -> 46 [label="AST"];
48 -> 49 [label="AST"];
50 -> 51 [label="AST"];
55 -> 56 [label="AST"];
57 -> 58 [label="AST"];
57 -> 55 [label="AST"];
57 -> 63 [label="Data Dep"];
59 -> 54 [label="AST"];
59 -> 57 [label="AST"];
59 -> 53 [label="AST"];
60 -> 61 [label="AST"];
62 -> 52 [label="AST"];
62 -> 59 [label="AST"];
62 -> 50 [label="AST"];
62 -> 60 [label="AST"];
63 -> 72 [label="Define-Use"];
64 -> 63 [label="AST"];
64 -> 48 [label="AST"];
64 -> 62 [label="AST"];
65 -> 66 [label="AST"];
68 -> 69 [label="AST"];
70 -> 71 [label="AST"];
70 -> 68 [label="AST"];
72 -> 73 [label="AST"];
74 -> 67 [label="AST"];
74 -> 70 [label="AST"];
74 -> 65 [label="AST"];
74 -> 72 [label="AST"];
75 -> 16 [label="AST"];
75 -> 47 [label="AST"];
75 -> 64 [label="AST"];
75 -> 74 [label="AST"];
76 -> 1 [label="AST"];
76 -> 77 [label="AST"];
76 -> 0 [label="AST"];
76 -> 75 [label="AST"];
78 -> 86 [label="Action"];
80 -> 79 [label="AST"];
82 -> 81 [label="AST"];
83 -> 82 [label="AST"];
84 -> 80 [label="AST"];
84 -> 83 [label="AST"];
86 -> 87 [label="AST"];
86 -> 84 [label="AST"];
86 -> 85 [label="AST"];
}