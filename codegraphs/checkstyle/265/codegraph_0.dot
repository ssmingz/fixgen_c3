digraph "testDefaultTokensAreSubsetOfAcceptableTokens#?" {
0 [label="3:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="3:CtVirtualElement@testDefaultTokensAreSubsetOfAcceptableTokens" shape=ellipse]
2 [label="3:CtTypeReferenceImpl@Exception" shape=ellipse]
3 [label="3:CtPackageReferenceImpl@java.lang" shape=ellipse]
4 [label="4:CtTypeReferenceImpl@Set<Class<?>>" shape=ellipse]
5 [label="4:CtPackageReferenceImpl@" shape=ellipse]
6 [label="4:CtTypeReferenceImpl@Class<?>" shape=ellipse]
7 [label="4:CtExecutableReferenceImpl@getCheckstyleChecks()" shape=ellipse]
8 [label="4:CtTypeReferenceImpl@Set<Class<?>>" shape=ellipse]
9 [label="4:CtVirtualElement@getCheckstyleChecks" shape=ellipse]
10 [label="4:CtTypeAccessImpl@PlaceHold" shape=ellipse]
11 [label="4:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
12 [label="4:CtThisAccessImpl@" shape=ellipse]
13 [label="4:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
14 [label="4:CtInvocationImpl@getCheckstyleChecks()" shape=ellipse]
15 [label="4:CtVirtualElement@checkstyleChecks" shape=ellipse]
16 [label="4:CtLocalVariableImpl@Set<Class<?>> checkstyleChecks = getCheckstyleChecks()" shape=ellipse]
17 [label="5:CtTypeReferenceImpl@Class<?>" shape=ellipse]
18 [label="5:CtPackageReferenceImpl@java.lang" shape=ellipse]
19 [label="5:CtWildcardReferenceImpl@?" shape=ellipse]
20 [label="5:CtVirtualElement@check" shape=ellipse]
21 [label="5:CtLocalVariableImpl@Class<?> check" shape=ellipse]
22 [label="5:CtVariableReadImpl@checkstyleChecks" shape=ellipse]
23 [label="5:CtLocalVariableReferenceImpl@checkstyleChecks" shape=ellipse]
24 [label="6:CtExecutableReferenceImpl@isAssignableFrom(java.lang.Class)" shape=ellipse]
25 [label="6:CtTypeReferenceImpl@Class" shape=ellipse]
26 [label="6:CtTypeReferenceImpl@boolean" shape=ellipse]
27 [label="6:CtTypeReferenceImpl@Class<?>" shape=ellipse]
28 [label="6:CtVirtualElement@isAssignableFrom" shape=ellipse]
29 [label="6:CtFieldReferenceImpl@Check.class" shape=ellipse]
30 [label="6:CtTypeReferenceImpl@Check" shape=ellipse]
31 [label="6:CtTypeReferenceImpl@Class" shape=ellipse]
32 [label="6:CtFieldReadImpl@Check.class" shape=ellipse]
33 [label="6:CtTypeAccessImpl@Check" shape=ellipse]
34 [label="6:CtVariableReadImpl@check" shape=ellipse]
35 [label="6:CtLocalVariableReferenceImpl@check" shape=ellipse]
36 [label="6:CtInvocationImpl@Check.class.isAssignableFrom(check)" shape=ellipse]
37 [label="7:CtTypeReferenceImpl@Check" shape=ellipse]
38 [label="7:CtPackageReferenceImpl@" shape=ellipse]
39 [label="7:CtExecutableReferenceImpl@newInstance(java.lang.Object[])" shape=ellipse]
40 [label="7:CtTypeReferenceImpl@Constructor" shape=ellipse]
41 [label="7:CtWildcardReferenceImpl@?" shape=ellipse]
42 [label="7:CtArrayTypeReferenceImpl@Object[]" shape=ellipse]
43 [label="7:CtVirtualElement@newInstance" shape=ellipse]
44 [label="7:CtExecutableReferenceImpl@getDeclaredConstructor(java.lang.Class[])" shape=ellipse]
45 [label="7:CtTypeReferenceImpl@Class" shape=ellipse]
46 [label="7:CtTypeReferenceImpl@Constructor<?>" shape=ellipse]
47 [label="7:CtArrayTypeReferenceImpl@Class<?>[]" shape=ellipse]
48 [label="7:CtVirtualElement@getDeclaredConstructor" shape=ellipse]
49 [label="7:CtVariableReadImpl@check" shape=ellipse]
50 [label="7:CtLocalVariableReferenceImpl@check" shape=ellipse]
51 [label="7:CtInvocationImpl@check.getDeclaredConstructor()" shape=ellipse]
52 [label="7:CtInvocationImpl@((Check) (check.getDeclaredConstructor().newInstance()))" shape=ellipse]
53 [label="7:CtTypeReferenceImpl@Check" shape=ellipse]
54 [label="7:CtVirtualElement@testedCheck" shape=ellipse]
55 [label="7:CtLocalVariableImpl@final Check testedCheck = ((Check) (check.getDeclaredConstructor().newInstance()))" shape=ellipse]
56 [label="8:CtVirtualElement@int[]" shape=ellipse]
57 [label="8:CtArrayTypeReferenceImpl@int[]" shape=ellipse]
58 [label="8:CtTypeReferenceImpl@int" shape=ellipse]
59 [label="8:CtExecutableReferenceImpl@getDefaultTokens()" shape=ellipse]
60 [label="8:CtTypeReferenceImpl@Check" shape=ellipse]
61 [label="8:CtArrayTypeReferenceImpl@int[]" shape=ellipse]
62 [label="8:CtVirtualElement@getDefaultTokens" shape=ellipse]
63 [label="8:CtVariableReadImpl@testedCheck" shape=ellipse]
64 [label="8:CtLocalVariableReferenceImpl@testedCheck" shape=ellipse]
65 [label="8:CtInvocationImpl@testedCheck.getDefaultTokens()" shape=ellipse]
66 [label="8:CtVirtualElement@defaultTokens" shape=ellipse]
67 [label="8:CtLocalVariableImpl@final int[] defaultTokens = testedCheck.getDefaultTokens()" shape=ellipse]
68 [label="9:CtVirtualElement@int[]" shape=ellipse]
69 [label="9:CtArrayTypeReferenceImpl@int[]" shape=ellipse]
70 [label="9:CtTypeReferenceImpl@int" shape=ellipse]
71 [label="9:CtExecutableReferenceImpl@getAcceptableTokens()" shape=ellipse]
72 [label="9:CtTypeReferenceImpl@Check" shape=ellipse]
73 [label="9:CtArrayTypeReferenceImpl@int[]" shape=ellipse]
74 [label="9:CtVirtualElement@getAcceptableTokens" shape=ellipse]
75 [label="9:CtVariableReadImpl@testedCheck" shape=ellipse]
76 [label="9:CtLocalVariableReferenceImpl@testedCheck" shape=ellipse]
77 [label="9:CtInvocationImpl@testedCheck.getAcceptableTokens()" shape=ellipse]
78 [label="9:CtVirtualElement@acceptableTokens" shape=ellipse]
79 [label="9:CtLocalVariableImpl@final int[] acceptableTokens = testedCheck.getAcceptableTokens()" shape=ellipse]
80 [label="10:CtExecutableReferenceImpl@isSubset(int[],int[])" shape=ellipse]
81 [label="10:CtArrayTypeReferenceImpl@int[]" shape=ellipse]
82 [label="10:CtArrayTypeReferenceImpl@int[]" shape=ellipse]
83 [label="10:CtVirtualElement@isSubset" shape=ellipse]
84 [label="10:CtTypeAccessImpl@PlaceHold" shape=ellipse]
85 [label="10:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
86 [label="10:CtThisAccessImpl@" shape=ellipse]
87 [label="10:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
88 [label="10:CtVariableReadImpl@defaultTokens" shape=ellipse]
89 [label="10:CtLocalVariableReferenceImpl@defaultTokens" shape=ellipse]
90 [label="10:CtVariableReadImpl@acceptableTokens" shape=ellipse]
91 [label="10:CtLocalVariableReferenceImpl@acceptableTokens" shape=ellipse]
92 [label="10:CtInvocationImpl@isSubset(defaultTokens, acceptableTokens)" shape=ellipse]
93 [label="10:CtUnaryOperatorImpl@!isSubset(defaultTokens, acceptableTokens)" shape=ellipse]
94 [label="11:CtTypeReferenceImpl@String" shape=ellipse]
95 [label="11:CtPackageReferenceImpl@java.lang" shape=ellipse]
96 [label="12:CtExecutableReferenceImpl@format(java.lang.String,java.lang.Object[])" shape=ellipse]
97 [label="12:CtTypeReferenceImpl@String" shape=ellipse]
98 [label="12:CtTypeReferenceImpl@String" shape=ellipse]
99 [label="12:CtTypeReferenceImpl@String" shape=ellipse]
100 [label="12:CtArrayTypeReferenceImpl@Object[]" shape=ellipse]
101 [label="12:CtVirtualElement@format" shape=ellipse]
102 [label="12:CtTypeAccessImpl@String" shape=ellipse]
103 [label="12:CtTypeReferenceImpl@String" shape=ellipse]
104 [label="13:CtLiteralImpl@\"%s's default tokens must be a subset\"" shape=ellipse]
105 [label="13:CtTypeReferenceImpl@String" shape=ellipse]
106 [label="13:CtLiteralImpl@\" of acceptable tokens.\"" shape=ellipse]
107 [label="13:CtTypeReferenceImpl@String" shape=ellipse]
108 [label="13:CtBinaryOperatorImpl@\"%s's default tokens must be a subset\" + \" of acceptable tokens.\"" shape=ellipse]
109 [label="13:CtTypeReferenceImpl@String" shape=ellipse]
110 [label="14:CtExecutableReferenceImpl@getName()" shape=ellipse]
111 [label="14:CtTypeReferenceImpl@Class" shape=ellipse]
112 [label="14:CtTypeReferenceImpl@String" shape=ellipse]
113 [label="14:CtVirtualElement@getName" shape=ellipse]
114 [label="14:CtVariableReadImpl@check" shape=ellipse]
115 [label="14:CtLocalVariableReferenceImpl@check" shape=ellipse]
116 [label="14:CtInvocationImpl@check.getName()" shape=ellipse]
117 [label="12:CtInvocationImpl@String.format(\"%s's default tokens must be a subset\" + \" of acceptable tokens.\", check.getName())" shape=ellipse]
118 [label="11:CtVirtualElement@errorMessage" shape=ellipse]
119 [label="11:CtLocalVariableImpl@String errorMessage = String.format(\"%s's default tokens must be a subset\" + \" of acceptable tokens.\", check.getName())" shape=ellipse]
120 [label="15:CtExecutableReferenceImpl@fail(java.lang.String)" shape=ellipse]
121 [label="15:CtTypeReferenceImpl@Assert" shape=ellipse]
122 [label="15:CtTypeReferenceImpl@String" shape=ellipse]
123 [label="15:CtVirtualElement@fail" shape=ellipse]
124 [label="15:CtTypeAccessImpl@Assert" shape=ellipse]
125 [label="15:CtTypeReferenceImpl@Assert" shape=ellipse]
126 [label="15:CtVariableReadImpl@errorMessage" shape=ellipse]
127 [label="15:CtLocalVariableReferenceImpl@errorMessage" shape=ellipse]
128 [label="15:CtInvocationImpl@Assert.fail(errorMessage)" shape=ellipse]
129 [label="10:CtBlockImpl@\{
    String errorMessage = String.format(\"%s's default tokens must be a subset\" + \" of acceptable tokens.\", check.getName());
    Assert.fail(errorMessage);
\}" shape=ellipse]
130 [label="10:CtIfImpl@if (!isSubset(defaultTokens, acceptableTokens)) \{
    String errorMessage = String.format(\"%s's default tokens must be a subset\" + \" of acceptable tokens.\", check.getName());
    Assert.fail(errorMessage);
\}" shape=ellipse]
131 [label="6:CtBlockImpl@\{
    final Check testedCheck = ((Check) (check.getDeclaredConstructor().newInstance()));
    final int[] defaultTokens = testedCheck.getDefaultTokens();
    final int[] acceptableTokens = testedCheck.getAcceptableTokens();
    if (!isSubset(defaultTokens, acceptableTokens)) \{
        String errorMessage = String.format(\"%s's default tokens must be a subset\" + \" of acceptable tokens.\", check.getName());
        Assert.fail(errorMessage);
    \}
\}" shape=ellipse]
132 [label="6:CtIfImpl@if (Check.class.isAssignableFrom(check)) \{
    final Check testedCheck = ((Check) (check.getDeclaredConstructor().newInstance()));
    final int[] defaultTokens = testedCheck.getDefaultTokens();
    final int[] acceptableTokens = testedCheck.getAcceptableTokens();
    if (!isSubset(defaultTokens, acceptableTokens)) \{
        String errorMessage = String.format(\"%s's default tokens must be a subset\" + \" of acceptable tokens.\", check.getName());
        Assert.fail(errorMessage);
    \}
\}" shape=ellipse]
133 [label="5:CtBlockImpl@\{
    if (Check.class.isAssignableFrom(check)) \{
        final Check testedCheck = ((Check) (check.getDeclaredConstructor().newInstance()));
        final int[] defaultTokens = testedCheck.getDefaultTokens();
        final int[] acceptableTokens = testedCheck.getAcceptableTokens();
        if (!isSubset(defaultTokens, acceptableTokens)) \{
            String errorMessage = String.format(\"%s's default tokens must be a subset\" + \" of acceptable tokens.\", check.getName());
            Assert.fail(errorMessage);
        \}
    \}
\}" shape=ellipse]
134 [label="5:CtForEachImpl@for (Class<?> check : checkstyleChecks) \{
    if (Check.class.isAssignableFrom(check)) \{
        final Check testedCheck = ((Check) (check.getDeclaredConstructor().newInstance()));
        final int[] defaultTokens = testedCheck.getDefaultTokens();
        final int[] acceptableTokens = testedCheck.getAcceptableTokens();
        if (!isSubset(defaultTokens, acceptableTokens)) \{
            String errorMessage = String.format(\"%s's default tokens must be a subset\" + \" of acceptable tokens.\", check.getName());
            Assert.fail(errorMessage);
        \}
    \}
\}" shape=ellipse]
135 [label="3:CtBlockImpl@\{
    Set<Class<?>> checkstyleChecks = getCheckstyleChecks();
    for (Class<?> check : checkstyleChecks) \{
        if (Check.class.isAssignableFrom(check)) \{
            final Check testedCheck = ((Check) (check.getDeclaredConstructor().newInstance()));
            final int[] defaultTokens = testedCheck.getDefaultTokens();
            final int[] acceptableTokens = testedCheck.getAcceptableTokens();
            if (!isSubset(defaultTokens, acceptableTokens)) \{
                String errorMessage = String.format(\"%s's default tokens must be a subset\" + \" of acceptable tokens.\", check.getName());
                Assert.fail(errorMessage);
            \}
        \}
    \}
\}" shape=ellipse]
136 [label="3:CtMethodImpl@@Test
public void testDefaultTokensAreSubsetOfAcceptableTokens() throws Exception \{
    Set<Class<?>> checkstyleChecks = getCheckstyleChecks();
    for (Class<?> check : checkstyleChecks) \{
        if (Check.class.isAssignableFrom(check)) \{
            final Check testedCheck = ((Check) (check.getDeclaredConstructor().newInstance()));
            final int[] defaultTokens = testedCheck.getDefaultTokens();
            final int[] acceptableTokens = testedCheck.getAcceptableTokens();
            if (!isSubset(defaultTokens, acceptableTokens)) \{
                String errorMessage = String.format(\"%s's default tokens must be a subset\" + \" of acceptable tokens.\", check.getName());
                Assert.fail(errorMessage);
            \}
        \}
    \}
\}" shape=ellipse]
137 [label="2:CtAnnotationImpl@@Test" shape=ellipse]
138 [label="13:Insert@INSERT" shape=ellipse]
139 [label="13:CtPackageReferenceImpl@Locale" shape=ellipse]
140 [label="13:CtTypeReferenceImpl@ROOT" shape=ellipse]
141 [label="13:CtTypeAccessImpl@Locale.ROOT" shape=ellipse]
2 -> 3 [label="AST"];
4 -> 5 [label="AST"];
4 -> 6 [label="AST"];
7 -> 8 [label="AST"];
10 -> 11 [label="AST"];
12 -> 13 [label="AST"];
12 -> 10 [label="AST"];
12 -> 15 [label="Data Dep"];
14 -> 9 [label="AST"];
14 -> 12 [label="AST"];
14 -> 7 [label="AST"];
15 -> 22 [label="Define-Use"];
16 -> 15 [label="AST"];
16 -> 4 [label="AST"];
16 -> 14 [label="AST"];
17 -> 18 [label="AST"];
17 -> 19 [label="AST"];
20 -> 34 [label="Define-Use"];
20 -> 49 [label="Define-Use"];
20 -> 114 [label="Define-Use"];
21 -> 20 [label="AST"];
21 -> 17 [label="AST"];
22 -> 23 [label="AST"];
22 -> 133 [label="Control Dep"];
22 -> 132 [label="Control Dep"];
22 -> 36 [label="Control Dep"];
22 -> 24 [label="Control Dep"];
22 -> 32 [label="Control Dep"];
22 -> 34 [label="Control Dep"];
24 -> 25 [label="AST"];
24 -> 26 [label="AST"];
24 -> 27 [label="AST"];
29 -> 30 [label="AST"];
29 -> 31 [label="AST"];
32 -> 33 [label="AST"];
32 -> 29 [label="AST"];
34 -> 35 [label="AST"];
36 -> 28 [label="AST"];
36 -> 32 [label="AST"];
36 -> 24 [label="AST"];
36 -> 34 [label="AST"];
36 -> 131 [label="Control Dep"];
36 -> 55 [label="Control Dep"];
36 -> 52 [label="Control Dep"];
36 -> 39 [label="Control Dep"];
36 -> 51 [label="Control Dep"];
36 -> 44 [label="Control Dep"];
36 -> 49 [label="Control Dep"];
36 -> 67 [label="Control Dep"];
36 -> 57 [label="Control Dep"];
36 -> 65 [label="Control Dep"];
36 -> 59 [label="Control Dep"];
36 -> 63 [label="Control Dep"];
36 -> 79 [label="Control Dep"];
36 -> 69 [label="Control Dep"];
36 -> 77 [label="Control Dep"];
36 -> 71 [label="Control Dep"];
36 -> 75 [label="Control Dep"];
36 -> 130 [label="Control Dep"];
36 -> 93 [label="Control Dep"];
36 -> 92 [label="Control Dep"];
36 -> 80 [label="Control Dep"];
36 -> 86 [label="Control Dep"];
36 -> 84 [label="Control Dep"];
36 -> 88 [label="Control Dep"];
36 -> 90 [label="Control Dep"];
37 -> 38 [label="AST"];
39 -> 40 [label="AST"];
39 -> 41 [label="AST"];
39 -> 42 [label="AST"];
44 -> 45 [label="AST"];
44 -> 46 [label="AST"];
44 -> 47 [label="AST"];
49 -> 50 [label="AST"];
49 -> 54 [label="Data Dep"];
51 -> 48 [label="AST"];
51 -> 49 [label="AST"];
51 -> 44 [label="AST"];
52 -> 43 [label="AST"];
52 -> 53 [label="AST"];
52 -> 51 [label="AST"];
52 -> 39 [label="AST"];
54 -> 63 [label="Define-Use"];
54 -> 75 [label="Define-Use"];
55 -> 54 [label="AST"];
55 -> 37 [label="AST"];
55 -> 52 [label="AST"];
57 -> 56 [label="AST"];
57 -> 58 [label="AST"];
59 -> 60 [label="AST"];
59 -> 61 [label="AST"];
63 -> 64 [label="AST"];
63 -> 66 [label="Data Dep"];
65 -> 62 [label="AST"];
65 -> 63 [label="AST"];
65 -> 59 [label="AST"];
66 -> 88 [label="Define-Use"];
67 -> 66 [label="AST"];
67 -> 57 [label="AST"];
67 -> 65 [label="AST"];
69 -> 68 [label="AST"];
69 -> 70 [label="AST"];
71 -> 72 [label="AST"];
71 -> 73 [label="AST"];
75 -> 76 [label="AST"];
75 -> 78 [label="Data Dep"];
77 -> 74 [label="AST"];
77 -> 75 [label="AST"];
77 -> 71 [label="AST"];
78 -> 90 [label="Define-Use"];
79 -> 78 [label="AST"];
79 -> 69 [label="AST"];
79 -> 77 [label="AST"];
80 -> 81 [label="AST"];
80 -> 82 [label="AST"];
84 -> 85 [label="AST"];
86 -> 87 [label="AST"];
86 -> 84 [label="AST"];
88 -> 89 [label="AST"];
90 -> 91 [label="AST"];
92 -> 83 [label="AST"];
92 -> 86 [label="AST"];
92 -> 80 [label="AST"];
92 -> 88 [label="AST"];
92 -> 90 [label="AST"];
93 -> 92 [label="AST"];
93 -> 129 [label="Control Dep"];
93 -> 119 [label="Control Dep"];
93 -> 117 [label="Control Dep"];
93 -> 96 [label="Control Dep"];
93 -> 102 [label="Control Dep"];
93 -> 108 [label="Control Dep"];
93 -> 104 [label="Control Dep"];
93 -> 106 [label="Control Dep"];
93 -> 116 [label="Control Dep"];
93 -> 110 [label="Control Dep"];
93 -> 114 [label="Control Dep"];
93 -> 128 [label="Control Dep"];
93 -> 120 [label="Control Dep"];
93 -> 124 [label="Control Dep"];
93 -> 126 [label="Control Dep"];
93 -> 141 [label="Control Dep"];
94 -> 95 [label="AST"];
96 -> 97 [label="AST"];
96 -> 98 [label="AST"];
96 -> 99 [label="AST"];
96 -> 100 [label="AST"];
102 -> 103 [label="AST"];
104 -> 105 [label="AST"];
106 -> 107 [label="AST"];
108 -> 109 [label="AST"];
108 -> 104 [label="AST"];
108 -> 106 [label="AST"];
110 -> 111 [label="AST"];
110 -> 112 [label="AST"];
114 -> 115 [label="AST"];
114 -> 118 [label="Data Dep"];
116 -> 113 [label="AST"];
116 -> 114 [label="AST"];
116 -> 110 [label="AST"];
117 -> 101 [label="AST"];
117 -> 102 [label="AST"];
117 -> 96 [label="AST"];
117 -> 108 [label="AST"];
117 -> 116 [label="AST"];
117 -> 138 [label="Action"];
118 -> 126 [label="Define-Use"];
119 -> 118 [label="AST"];
119 -> 94 [label="AST"];
119 -> 117 [label="AST"];
120 -> 121 [label="AST"];
120 -> 122 [label="AST"];
124 -> 125 [label="AST"];
126 -> 127 [label="AST"];
128 -> 123 [label="AST"];
128 -> 124 [label="AST"];
128 -> 120 [label="AST"];
128 -> 126 [label="AST"];
129 -> 119 [label="AST"];
129 -> 128 [label="AST"];
130 -> 93 [label="AST"];
130 -> 129 [label="AST"];
131 -> 55 [label="AST"];
131 -> 67 [label="AST"];
131 -> 79 [label="AST"];
131 -> 130 [label="AST"];
132 -> 36 [label="AST"];
132 -> 131 [label="AST"];
133 -> 132 [label="AST"];
134 -> 21 [label="AST"];
134 -> 22 [label="AST"];
134 -> 133 [label="AST"];
135 -> 16 [label="AST"];
135 -> 134 [label="AST"];
136 -> 1 [label="AST"];
136 -> 137 [label="AST"];
136 -> 0 [label="AST"];
136 -> 2 [label="AST"];
136 -> 135 [label="AST"];
138 -> 141 [label="Action"];
140 -> 139 [label="AST"];
141 -> 140 [label="AST"];
}